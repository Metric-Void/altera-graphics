
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000238

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012d30 memsz 0x00012d30 flags r-x
    LOAD off    0x00013d50 vaddr 0x10012d50 paddr 0x10014f6c align 2**12
         filesz 0x0000221c memsz 0x0000221c flags rw-
    LOAD off    0x00016188 vaddr 0x10017188 paddr 0x10017188 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011bf8  10000238  10000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f20  10011e30  10011e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000221c  10012d50  10014f6c  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  10017188  10017188  00016188  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015f6c  2**0
                  CONTENTS
  7 .sdram        00000000  100172e4  100172e4  00015f6c  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00015f6c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc8  00000000  00000000  00015f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004ae22  00000000  00000000  00016f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f2b5  00000000  00000000  00061d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018a22  00000000  00000000  00071037  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000254c  00000000  00000000  00089a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000411a  00000000  00000000  0008bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c27c  00000000  00000000  000900c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000ac340  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c58  00000000  00000000  000ac3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b15ec  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b15ef  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b15fb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b15fc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b15fd  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b1601  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b1605  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b1609  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b1614  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b161f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000b162a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  000b163b  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b00  00000000  00000000  000b1650  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000238 l    d  .text	00000000 .text
10011e30 l    d  .rodata	00000000 .rodata
10012d50 l    d  .rwdata	00000000 .rwdata
10017188 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100172e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Lab7/final_project/software/final_project_bsp/obj/HAL/src/crt0.o
10000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 aesop.c
10014f30 l     O .rwdata	00000001 CNST_AES_NB
10014f31 l     O .rwdata	00000001 CNST_AES_NR
10014f32 l     O .rwdata	00000001 CNST_AES_NK
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10017188 l     O .bss	00000002 ctl_reg.3791
1001718a l     O .bss	00000002 no_device.3792
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10005450 l     F .text	000000c0 __sbprintf
10012822 l     O .rodata	00000010 blanks.5226
10012812 l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10005670 l     F .text	00000210 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100071f8 l     F .text	00000008 __fp_lock
1000720c l     F .text	00000168 __sinit.part.0
10007374 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10013390 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012844 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a35c l     F .text	000000f4 __sprint_r.part.0
1000b7ac l     F .text	000000c0 __sbprintf
10012978 l     O .rodata	00000010 blanks.5203
10012968 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f654 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f760 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f78c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f878 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f958 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fa44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fc18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014f5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fe88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000ffbc l     F .text	00000034 alt_dev_reg
10013ed0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100102ac l     F .text	00000204 altera_avalon_jtag_uart_irq
100104b0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
10010aec l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010e7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100112e4 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011410 l     F .text	0000003c alt_get_errno
1001144c l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100171b8 g     O .bss	00000004 alt_instruction_exception_handler
10009a44 g     F .text	00000074 _mprec_log10
10009b24 g     F .text	00000074 __any_on
1000bd38 g     F .text	00000058 _isatty_r
10012850 g     O .rodata	00000028 __mprec_tinytens
1000fb54 g     F .text	0000007c alt_main
10003164 g     F .text	000000cc _puts_r
100171e4 g     O .bss	00000100 alt_irq
1000be20 g     F .text	00000064 _lseek_r
10014f6c g       *ABS*	00000000 __flash_rwdata_start
1000e170 g     F .text	00000080 .hidden __eqdf2
100172e4 g       *ABS*	00000000 __alt_heap_start
1000312c g     F .text	00000038 printf
1000c16c g     F .text	0000006c _wcrtomb_r
1000a2f8 g     F .text	0000005c __sseek
100074f4 g     F .text	00000010 __sinit
1000c010 g     F .text	00000148 __swbuf_r
1000bd90 g     F .text	00000070 _setlocale_r
1000737c g     F .text	00000068 __sfmoreglue
1000fbf4 g     F .text	00000024 __malloc_unlock
10002e9c g     F .text	00000080 UsbGetRetryCnt
10008a40 g     F .text	0000012c memmove
10000f28 g     F .text	00000088 IO_init
100074e0 g     F .text	00000014 _cleanup
10008c5c g     F .text	000000a4 _Balloc
1000e1f0 g     F .text	000000f0 .hidden __gtdf2
100117fc g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000001c __reset
10007f70 g     F .text	00000008 __localeconv_l
10000020 g       *ABS*	00000000 __flash_exceptions_start
10011e30 g     O .rodata	00000100 aes_sbox
1000bcd8 g     F .text	00000060 _fstat_r
10017198 g     O .bss	00000004 errno
10000e80 g     F .text	000000a8 transpose
1000a270 g     F .text	00000008 __seofread
100171a4 g     O .bss	00000004 alt_argv
10012d50 g     O .rwdata	00000600 gf_mul
1001cf30 g       *ABS*	00000000 _gp
1000fe58 g     F .text	00000030 usleep
10013d50 g     O .rwdata	00000180 alt_fd_list
10011820 g     F .text	00000090 alt_find_dev
10002ffc g     F .text	00000100 memcpy
10007200 g     F .text	0000000c _cleanup_r
1000f49c g     F .text	000000c8 .hidden __floatsidf
10011394 g     F .text	0000007c alt_io_redirect
1000e2e0 g     F .text	000000f0 .hidden __ltdf2
10011e30 g       *ABS*	00000000 __DTOR_END__
10003230 g     F .text	00000010 puts
10011ae8 g     F .text	00000098 alt_exception_cause_generated_bad_addr
1000999c g     F .text	000000a8 __ratio
1000b794 g     F .text	00000018 __vfiprintf_internal
100106ac g     F .text	0000021c altera_avalon_jtag_uart_read
100030fc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000ce68 g     F .text	00000064 .hidden __udivsi3
1000f8b4 g     F .text	000000a4 isatty
100128a0 g     O .rodata	000000c8 __mprec_tens
10011a58 g     F .text	00000090 alt_icache_flush
10017194 g     O .bss	00000004 __malloc_top_pad
10002528 g     F .text	00000268 UsbGetConfigDesc2
10007f78 g     F .text	0000000c _localeconv_r
1000905c g     F .text	00000034 __i2b
10007954 g     F .text	000004c4 __sfvwrite_r
1000a1c4 g     F .text	00000058 _sbrk_r
1000bed4 g     F .text	00000064 _read_r
10014f54 g     O .rwdata	00000004 alt_max_fd
1000b9e0 g     F .text	000000f8 _fclose_r
100071d0 g     F .text	00000028 fflush
10017190 g     O .bss	00000004 __malloc_max_sbrked_mem
1000cf28 g     F .text	000009a0 .hidden __adddf3
10009750 g     F .text	00000104 __b2d
1000c830 g     F .text	00000540 .hidden __umoddi3
1000fa80 g     F .text	000000d4 lseek
10014f34 g     O .rwdata	00000004 _global_impure_ptr
10009b98 g     F .text	0000062c _realloc_r
100172e4 g       *ABS*	00000000 __bss_end
10011200 g     F .text	000000e4 alt_iic_isr_register
100116f4 g     F .text	00000108 alt_tick
1000c298 g     F .text	00000598 .hidden __udivdi3
1000bc38 g     F .text	00000024 _fputwc_r
10012878 g     O .rodata	00000028 __mprec_bigtens
10008e38 g     F .text	00000110 __s2b
1000f564 g     F .text	0000009c .hidden __floatunsidf
100094e0 g     F .text	00000058 __mcmp
10001f78 g     F .text	00000100 UsbSetAddress
10007514 g     F .text	00000014 __fp_lock_all
100111b4 g     F .text	0000004c alt_ic_irq_enabled
10000dc0 g     F .text	000000c0 add_round_key
10011658 g     F .text	0000009c alt_alarm_stop
100171ac g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000c8 alt_irq_handler
10013d28 g     O .rwdata	00000028 alt_dev_null
10010e34 g     F .text	00000048 alt_dcache_flush_all
10008f48 g     F .text	00000064 __hi0bits
10001024 g     F .text	00000068 IO_read
1000f41c g     F .text	00000080 .hidden __fixdfsi
10014f6c g       *ABS*	00000000 __ram_rwdata_end
10014f4c g     O .rwdata	00000008 alt_dev_list
1000fec4 g     F .text	000000f8 write
10012d50 g       *ABS*	00000000 __ram_rodata_end
1000f7c8 g     F .text	000000b0 fstat
1000e2e0 g     F .text	000000f0 .hidden __ledf2
10002f1c g     F .text	00000080 UsbPrintMem
1000927c g     F .text	00000128 __pow5mult
1000a468 g     F .text	0000132c ___vfiprintf_internal_r
1000cecc g     F .text	0000005c .hidden __umodsi3
100172e4 g       *ABS*	00000000 end
100101ec g     F .text	000000c0 altera_avalon_jtag_uart_init
100001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
10011e30 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10010b64 g     F .text	0000007c alt_avalon_timer_sc_init
1000f600 g     F .text	00000054 .hidden __clzsi2
100108c8 g     F .text	00000224 altera_avalon_jtag_uart_write
10007504 g     F .text	00000004 __sfp_lock_acquire
10008958 g     F .text	000000e8 memchr
100032d8 g     F .text	00002160 ___vfprintf_internal_r
10002890 g     F .text	00000100 UsbClassRequest
10007658 g     F .text	000002fc _free_r
10012a99 g     O .rodata	00000180 _ctype_b
1000be00 g     F .text	0000000c __locale_mb_cur_max
1000096c g     F .text	000000ac sub_word32
10011ce4 g     F .text	00000118 __call_exitprocs
10000658 g     F .text	000001f0 key_expansion
10014f3c g     O .rwdata	00000004 __malloc_sbrk_base
10000238 g     F .text	0000004c _start
100171b0 g     O .bss	00000004 _alt_tick_rate
10000848 g     F .text	000000d8 shift_rows
100093a4 g     F .text	0000013c __lshift
100171b4 g     O .bss	00000004 _alt_nticks
1000fc54 g     F .text	000000fc read
10010028 g     F .text	00000060 alt_sys_init
10011c54 g     F .text	00000090 __register_exitproc
10009090 g     F .text	000001ec __multiply
10010550 g     F .text	00000068 altera_avalon_jtag_uart_close
10012d50 g       *ABS*	00000000 __ram_rwdata_start
10011e30 g       *ABS*	00000000 __ram_rodata_start
100171bc g     O .bss	00000028 __malloc_current_mallinfo
10009854 g     F .text	00000148 __d2b
10002078 g     F .text	00000148 UsbGetDeviceDesc1
10010088 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011f30 g     O .rodata	00000100 aes_invsbox
100119b8 g     F .text	000000a0 alt_get_fd
10010d0c g     F .text	00000128 alt_busy_sleep
1000b8d0 g     F .text	00000058 _close_r
10011bc8 g     F .text	0000008c memcmp
10010148 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100172e4 g       *ABS*	00000000 __alt_stack_base
10010198 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005510 g     F .text	00000160 __swsetup_r
1000d8c8 g     F .text	000008a8 .hidden __divdf3
100073e4 g     F .text	000000fc __sfp
10009ab8 g     F .text	0000006c __copybits
100137b4 g     O .rwdata	00000408 __malloc_av_
10007510 g     F .text	00000004 __sinit_lock_release
1000e3d0 g     F .text	0000068c .hidden __muldf3
1000a21c g     F .text	00000054 __sread
10000adc g     F .text	00000028 rot_word
10002e18 g     F .text	00000084 UsbWaitTDListDone
100118b0 g     F .text	00000108 alt_find_file
10000b04 g     F .text	000002bc mix_columns
10010eb8 g     F .text	000000a4 alt_dev_llist_insert
1000fbd0 g     F .text	00000024 __malloc_lock
1000fda8 g     F .text	000000b0 sbrk
10007170 g     F .text	00000060 _fflush_r
1000b928 g     F .text	000000b8 _calloc_r
10017188 g       *ABS*	00000000 __bss_start
10008b6c g     F .text	000000f0 memset
1000108c g     F .text	00000d98 main
100171a8 g     O .bss	00000004 alt_envp
1001718c g     O .bss	00000004 __malloc_max_total_mem
100100e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002790 g     F .text	00000100 UsbSetConfig
1000c158 g     F .text	00000014 __swbuf
1000a354 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000bad8 g     F .text	00000010 fclose
10000a18 g     F .text	000000c4 sub_word
10005880 g     F .text	000016c8 _dtoa_r
10008164 g     F .text	000007f4 _malloc_r
1000c268 g     F .text	00000030 __ascii_wctomb
10014f58 g     O .rwdata	00000004 alt_errno
10007e18 g     F .text	000000a4 _fwalk
1000be84 g     F .text	0000000c _mbtowc_r
1000cd70 g     F .text	00000080 .hidden __divsi3
1000753c g     F .text	0000011c _malloc_trim_r
10002990 g     F .text	00000148 UsbGetHidDesc
10011e30 g       *ABS*	00000000 __CTOR_END__
1000bf38 g     F .text	000000d8 strcmp
10011e30 g       *ABS*	00000000 __flash_rodata_start
10011e30 g       *ABS*	00000000 __DTOR_LIST__
1000e170 g     F .text	00000080 .hidden __nedf2
10001e80 g     F .text	00000044 UsbRead
1000fff0 g     F .text	00000038 alt_irq_init
1000fd50 g     F .text	00000058 alt_release_fd
10012c19 g     O .rodata	00000100 .hidden __clz_tab
1001719c g     O .bss	00000004 _PathLocale
10011b80 g     F .text	00000014 atexit
1000b86c g     F .text	00000064 _write_r
1000be0c g     F .text	00000014 setlocale
10014f38 g     O .rwdata	00000004 _impure_ptr
100171a0 g     O .bss	00000004 alt_argc
10006f48 g     F .text	00000228 __sflush_r
10010fbc g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000be90 g     F .text	00000044 __ascii_mbtowc
100096f4 g     F .text	0000005c __ulp
10007528 g     F .text	00000014 __fp_unlock_all
10014f44 g     O .rwdata	00000008 alt_fs_list
10013350 g     O .rwdata	00000040 Rcon
10002ad8 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007f84 g     F .text	0000000c localeconv
10007f90 g     F .text	00000098 __swhatbuf_r
10011050 g     F .text	00000050 alt_ic_isr_register
10014f6c g       *ABS*	00000000 _edata
100172e4 g       *ABS*	00000000 _end
10001e24 g     F .text	0000005c UsbWrite
1000bae8 g     F .text	00000150 __fputwc
10000238 g       *ABS*	00000000 __ram_exceptions_end
100105b8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
10011128 g     F .text	0000008c alt_ic_irq_disable
1000a278 g     F .text	00000080 __swrite
10014f40 g     O .rwdata	00000004 __malloc_trim_threshold
10011b94 g     F .text	00000034 exit
10007ebc g     F .text	000000b4 _fwalk_reent
10009538 g     F .text	000001bc __mdiff
1000cdf0 g     F .text	00000078 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007508 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000fb0 g     F .text	00000074 IO_write
10012998 g     O .rodata	00000101 _ctype_
1000f3c8 g     F .text	00000054 .hidden __unorddf2
10011dfc g     F .text	00000034 _exit
10010be0 g     F .text	0000012c alt_alarm_start
10002f9c g     F .text	00000060 .hidden __muldi3
10008028 g     F .text	0000013c __smakebuf_r
10003240 g     F .text	00000098 strlen
10011504 g     F .text	00000154 open
1000e1f0 g     F .text	000000f0 .hidden __gedf2
1000a450 g     F .text	00000018 __sprint_r
1001101c g     F .text	00000034 alt_icache_flush_all
10014f60 g     O .rwdata	00000004 alt_priority_mask
100110a0 g     F .text	00000088 alt_ic_irq_enable
10005438 g     F .text	00000018 __vfprintf_internal
1000c25c g     F .text	0000000c _wctomb_r
1000ea5c g     F .text	0000096c .hidden __subdf3
10008fac g     F .text	000000b0 __lo0bits
10002398 g     F .text	00000190 UsbGetConfigDesc1
10014f64 g     O .rwdata	00000008 alt_alarm_list
10010f5c g     F .text	00000060 _do_ctors
10001ec4 g     F .text	000000b4 UsbSoftReset
1000c1d8 g     F .text	00000084 wcrtomb
1000f690 g     F .text	000000d0 close
100021c0 g     F .text	000001d8 UsbGetDeviceDesc2
10013bbc g     O .rwdata	0000016c __global_locale
1000f9c0 g     F .text	00000084 alt_load
10000920 g     F .text	0000004c sub_byte
1000bc5c g     F .text	0000007c fputwc
1000750c g     F .text	00000004 __sinit_lock_acquire
10008d24 g     F .text	00000114 __multadd
10008d00 g     F .text	00000024 _Bfree
10000284 g     F .text	000003d4 aes_encrypt



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08408e14 	ori	at,at,568
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001c40 	call	100001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
10000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0ffff17 	ldw	r3,-4(fp)
10000130:	e0bffe17 	ldw	r2,-8(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001126 	beq	r2,zero,10000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	e0bffd17 	ldw	r2,-12(fp)
10000140:	100690fa 	slli	r3,r2,3
10000144:	00840074 	movhi	r2,4097
10000148:	1885883a 	add	r2,r3,r2
1000014c:	10dc7917 	ldw	r3,29156(r2)
10000150:	e0bffd17 	ldw	r2,-12(fp)
10000154:	100890fa 	slli	r4,r2,3
10000158:	00840074 	movhi	r2,4097
1000015c:	2085883a 	add	r2,r4,r2
10000160:	109c7a17 	ldw	r2,29160(r2)
10000164:	1009883a 	mov	r4,r2
10000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
1000016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
10000170:	0005313a 	rdctl	r2,ipending
10000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
10000178:	e0bffb17 	ldw	r2,-20(fp)
1000017c:	00000706 	br	1000019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
10000180:	e0bffe17 	ldw	r2,-8(fp)
10000184:	1085883a 	add	r2,r2,r2
10000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
1000018c:	e0bffd17 	ldw	r2,-12(fp)
10000190:	10800044 	addi	r2,r2,1
10000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
10000198:	003fe406 	br	1000012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
1000019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
100001a0:	e0bfff17 	ldw	r2,-4(fp)
100001a4:	103fde1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a8:	0001883a 	nop
}
100001ac:	0001883a 	nop
100001b0:	e037883a 	mov	sp,fp
100001b4:	dfc00117 	ldw	ra,4(sp)
100001b8:	df000017 	ldw	fp,0(sp)
100001bc:	dec00204 	addi	sp,sp,8
100001c0:	f800283a 	ret

100001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001c4:	defffb04 	addi	sp,sp,-20
100001c8:	dfc00415 	stw	ra,16(sp)
100001cc:	df000315 	stw	fp,12(sp)
100001d0:	df000304 	addi	fp,sp,12
100001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001d8:	000531fa 	rdctl	r2,exception
100001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001e0:	e0bfff17 	ldw	r2,-4(fp)
100001e4:	1004d0ba 	srli	r2,r2,2
100001e8:	108007cc 	andi	r2,r2,31
100001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001f0:	0005333a 	rdctl	r2,badaddr
100001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f8:	d0a8a217 	ldw	r2,-23928(gp)
100001fc:	10000726 	beq	r2,zero,1000021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10000200:	d0a8a217 	ldw	r2,-23928(gp)
10000204:	e0ffff17 	ldw	r3,-4(fp)
10000208:	e1bffe17 	ldw	r6,-8(fp)
1000020c:	e17ffd17 	ldw	r5,-12(fp)
10000210:	1809883a 	mov	r4,r3
10000214:	103ee83a 	callr	r2
10000218:	00000206 	br	10000224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
1000021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000220:	0005883a 	mov	r2,zero
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

Disassembly of section .text:

10000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
1000023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000244:	00bffd16 	blt	zero,r2,1000023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000248:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
1000024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000250:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000254:	d6b3cc14 	ori	gp,gp,53040
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000258:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
1000025c:	109c6214 	ori	r2,r2,29064

    movhi r3, %hi(__bss_end)
10000260:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000264:	18dcb914 	ori	r3,r3,29412

    beq r2, r3, 1f
10000268:	10c00326 	beq	r2,r3,10000278 <_start+0x40>

0:
    stw zero, (r2)
1000026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000274:	10fffd36 	bltu	r2,r3,1000026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000278:	000f9c00 	call	1000f9c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
1000027c:	000fb540 	call	1000fb54 <alt_main>

10000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000280:	003fff06 	br	10000280 <alt_after_alt_main>

10000284 <aes_encrypt>:
[0 1]  [1 1] ...
[0 2]  ...
[0 3] ...
*/

void aes_encrypt(uint8_t* data_in, uint32_t* data_out, uint32_t* keyarr) {
10000284:	deffd404 	addi	sp,sp,-176
10000288:	dfc02b15 	stw	ra,172(sp)
1000028c:	df002a15 	stw	fp,168(sp)
10000290:	ddc02915 	stw	r23,164(sp)
10000294:	dd802815 	stw	r22,160(sp)
10000298:	dd402715 	stw	r21,156(sp)
1000029c:	dd002615 	stw	r20,152(sp)
100002a0:	dcc02515 	stw	r19,148(sp)
100002a4:	dc802415 	stw	r18,144(sp)
100002a8:	dc402315 	stw	r17,140(sp)
100002ac:	dc002215 	stw	r16,136(sp)
100002b0:	df002a04 	addi	fp,sp,168
100002b4:	e13fdb15 	stw	r4,-148(fp)
100002b8:	e17fda15 	stw	r5,-152(fp)
100002bc:	e1bfd915 	stw	r6,-156(fp)
100002c0:	d809883a 	mov	r4,sp
100002c4:	202f883a 	mov	r23,r4
	aes_state state; // = malloc(sizeof(uint32_t) * 4); //Flattened.
	aes_state state_in; // = malloc(sizeof(uint32_t) * 4); //Temporary.
	// Generate round keys.
	
	uint32_t key_out[(CNST_AES_NR+1)][CNST_AES_NB];
100002c8:	01000104 	movi	r4,4
100002cc:	21003fcc 	andi	r4,r4,255
100002d0:	213fffc4 	addi	r4,r4,-1
100002d4:	e13ff615 	stw	r4,-40(fp)
100002d8:	01000104 	movi	r4,4
100002dc:	21003fcc 	andi	r4,r4,255
100002e0:	200f883a 	mov	r7,r4
100002e4:	0011883a 	mov	r8,zero
100002e8:	3808d6fa 	srli	r4,r7,27
100002ec:	4006917a 	slli	r3,r8,5
100002f0:	20c6b03a 	or	r3,r4,r3
100002f4:	3804917a 	slli	r2,r7,5
100002f8:	00800104 	movi	r2,4
100002fc:	10803fcc 	andi	r2,r2,255
10000300:	102890ba 	slli	r20,r2,2
10000304:	00800284 	movi	r2,10
10000308:	10803fcc 	andi	r2,r2,255
1000030c:	e0bff515 	stw	r2,-44(fp)
10000310:	00800104 	movi	r2,4
10000314:	10803fcc 	andi	r2,r2,255
10000318:	1013883a 	mov	r9,r2
1000031c:	0015883a 	mov	r10,zero
10000320:	00800284 	movi	r2,10
10000324:	10803fcc 	andi	r2,r2,255
10000328:	10800044 	addi	r2,r2,1
1000032c:	1017883a 	mov	r11,r2
10000330:	0019883a 	mov	r12,zero
10000334:	580d883a 	mov	r6,r11
10000338:	600f883a 	mov	r7,r12
1000033c:	4809883a 	mov	r4,r9
10000340:	500b883a 	mov	r5,r10
10000344:	0002f9c0 	call	10002f9c <__muldi3>
10000348:	1009883a 	mov	r4,r2
1000034c:	180b883a 	mov	r5,r3
10000350:	2005883a 	mov	r2,r4
10000354:	2807883a 	mov	r3,r5
10000358:	1008d6fa 	srli	r4,r2,27
1000035c:	1826917a 	slli	r19,r3,5
10000360:	24e6b03a 	or	r19,r4,r19
10000364:	1024917a 	slli	r18,r2,5
10000368:	00800104 	movi	r2,4
1000036c:	10803fcc 	andi	r2,r2,255
10000370:	102b883a 	mov	r21,r2
10000374:	002d883a 	mov	r22,zero
10000378:	00800284 	movi	r2,10
1000037c:	10803fcc 	andi	r2,r2,255
10000380:	10800044 	addi	r2,r2,1
10000384:	e0bfd715 	stw	r2,-164(fp)
10000388:	e03fd815 	stw	zero,-160(fp)
1000038c:	e1bfd717 	ldw	r6,-164(fp)
10000390:	e1ffd817 	ldw	r7,-160(fp)
10000394:	a809883a 	mov	r4,r21
10000398:	b00b883a 	mov	r5,r22
1000039c:	0002f9c0 	call	10002f9c <__muldi3>
100003a0:	1009883a 	mov	r4,r2
100003a4:	180b883a 	mov	r5,r3
100003a8:	2005883a 	mov	r2,r4
100003ac:	2807883a 	mov	r3,r5
100003b0:	1008d6fa 	srli	r4,r2,27
100003b4:	1822917a 	slli	r17,r3,5
100003b8:	2462b03a 	or	r17,r4,r17
100003bc:	1020917a 	slli	r16,r2,5
100003c0:	00800284 	movi	r2,10
100003c4:	10803fcc 	andi	r2,r2,255
100003c8:	10c00044 	addi	r3,r2,1
100003cc:	00800104 	movi	r2,4
100003d0:	10803fcc 	andi	r2,r2,255
100003d4:	1885383a 	mul	r2,r3,r2
100003d8:	100490ba 	slli	r2,r2,2
100003dc:	108000c4 	addi	r2,r2,3
100003e0:	1004d0ba 	srli	r2,r2,2
100003e4:	100490ba 	slli	r2,r2,2
100003e8:	d8b7c83a 	sub	sp,sp,r2
100003ec:	d8800104 	addi	r2,sp,4
100003f0:	108000c4 	addi	r2,r2,3
100003f4:	1004d0ba 	srli	r2,r2,2
100003f8:	100490ba 	slli	r2,r2,2
100003fc:	e0bff415 	stw	r2,-48(fp)
	key_expansion(&keyarr[0], &key_out[0][0], CNST_AES_NK, CNST_AES_NB, CNST_AES_NR);
10000400:	e0fff417 	ldw	r3,-48(fp)
10000404:	00800104 	movi	r2,4
10000408:	11003fcc 	andi	r4,r2,255
1000040c:	00800104 	movi	r2,4
10000410:	11403fcc 	andi	r5,r2,255
10000414:	00800284 	movi	r2,10
10000418:	10803fcc 	andi	r2,r2,255
1000041c:	d8800015 	stw	r2,0(sp)
10000420:	280f883a 	mov	r7,r5
10000424:	200d883a 	mov	r6,r4
10000428:	180b883a 	mov	r5,r3
1000042c:	e13fd917 	ldw	r4,-156(fp)
10000430:	00006580 	call	10000658 <key_expansion>

	memcpy(state.state8, data_in, sizeof(state));
10000434:	e0ffdb17 	ldw	r3,-148(fp)
10000438:	e0bff004 	addi	r2,fp,-64
1000043c:	1809883a 	mov	r4,r3
10000440:	00c00404 	movi	r3,16
10000444:	180d883a 	mov	r6,r3
10000448:	200b883a 	mov	r5,r4
1000044c:	1009883a 	mov	r4,r2
10000450:	0002ffc0 	call	10002ffc <memcpy>
	
	add_round_key(state.state32, key_out[0], state_in.state32);
10000454:	e0fff417 	ldw	r3,-48(fp)
10000458:	e13fec04 	addi	r4,fp,-80
1000045c:	e0bff004 	addi	r2,fp,-64
10000460:	200d883a 	mov	r6,r4
10000464:	180b883a 	mov	r5,r3
10000468:	1009883a 	mov	r4,r2
1000046c:	0000dc00 	call	10000dc0 <add_round_key>
	memcpy(&state, &state_in, sizeof(state_in));
10000470:	e0bfec17 	ldw	r2,-80(fp)
10000474:	e0bff015 	stw	r2,-64(fp)
10000478:	e0bfed17 	ldw	r2,-76(fp)
1000047c:	e0bff115 	stw	r2,-60(fp)
10000480:	e0bfee17 	ldw	r2,-72(fp)
10000484:	e0bff215 	stw	r2,-56(fp)
10000488:	e0bfef17 	ldw	r2,-68(fp)
1000048c:	e0bff315 	stw	r2,-52(fp)
	
	aes_state state_in0, state_in1, state_in2, state_in3;
	
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
10000490:	00800044 	movi	r2,1
10000494:	e0bff745 	stb	r2,-35(fp)
10000498:	00003306 	br	10000568 <aes_encrypt+0x2e4>
		// Sub words.
		for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
1000049c:	e03ff785 	stb	zero,-34(fp)
100004a0:	00000d06 	br	100004d8 <aes_encrypt+0x254>
100004a4:	e0bff783 	ldbu	r2,-34(fp)
100004a8:	e0fff004 	addi	r3,fp,-64
100004ac:	100490ba 	slli	r2,r2,2
100004b0:	1889883a 	add	r4,r3,r2
100004b4:	e0bff783 	ldbu	r2,-34(fp)
100004b8:	e0ffe804 	addi	r3,fp,-96
100004bc:	100490ba 	slli	r2,r2,2
100004c0:	1885883a 	add	r2,r3,r2
100004c4:	100b883a 	mov	r5,r2
100004c8:	0000a180 	call	10000a18 <sub_word>
100004cc:	e0bff783 	ldbu	r2,-34(fp)
100004d0:	10800044 	addi	r2,r2,1
100004d4:	e0bff785 	stb	r2,-34(fp)
100004d8:	e0bff783 	ldbu	r2,-34(fp)
100004dc:	10800130 	cmpltui	r2,r2,4
100004e0:	103ff01e 	bne	r2,zero,100004a4 <aes_encrypt+0x220>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Shift Rows.
		shift_rows(state_in0.state8, state_in1.state8);
100004e4:	e0ffe404 	addi	r3,fp,-112
100004e8:	e0bfe804 	addi	r2,fp,-96
100004ec:	180b883a 	mov	r5,r3
100004f0:	1009883a 	mov	r4,r2
100004f4:	00008480 	call	10000848 <shift_rows>
		// memcpy(&state, &state_in, sizeof(state_in));
		
		// Mix Columns.
		mix_columns(state_in1.state8, state_in2.state8);
100004f8:	e0ffe004 	addi	r3,fp,-128
100004fc:	e0bfe404 	addi	r2,fp,-112
10000500:	180b883a 	mov	r5,r3
10000504:	1009883a 	mov	r4,r2
10000508:	0000b040 	call	10000b04 <mix_columns>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Add Round Key
		add_round_key(state_in2.state32, key_out[round], state_in3.state32);
1000050c:	a006d0ba 	srli	r3,r20,2
10000510:	e0bff743 	ldbu	r2,-35(fp)
10000514:	1885383a 	mul	r2,r3,r2
10000518:	100490ba 	slli	r2,r2,2
1000051c:	e0fff417 	ldw	r3,-48(fp)
10000520:	1887883a 	add	r3,r3,r2
10000524:	e13fdc04 	addi	r4,fp,-144
10000528:	e0bfe004 	addi	r2,fp,-128
1000052c:	200d883a 	mov	r6,r4
10000530:	180b883a 	mov	r5,r3
10000534:	1009883a 	mov	r4,r2
10000538:	0000dc00 	call	10000dc0 <add_round_key>
		memcpy(&state, &state_in3, sizeof(state_in3));
1000053c:	e0bfdc17 	ldw	r2,-144(fp)
10000540:	e0bff015 	stw	r2,-64(fp)
10000544:	e0bfdd17 	ldw	r2,-140(fp)
10000548:	e0bff115 	stw	r2,-60(fp)
1000054c:	e0bfde17 	ldw	r2,-136(fp)
10000550:	e0bff215 	stw	r2,-56(fp)
10000554:	e0bfdf17 	ldw	r2,-132(fp)
10000558:	e0bff315 	stw	r2,-52(fp)
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
1000055c:	e0bff743 	ldbu	r2,-35(fp)
10000560:	10800044 	addi	r2,r2,1
10000564:	e0bff745 	stb	r2,-35(fp)
10000568:	00800284 	movi	r2,10
1000056c:	e0fff743 	ldbu	r3,-35(fp)
10000570:	10803fcc 	andi	r2,r2,255
10000574:	18bfc936 	bltu	r3,r2,1000049c <aes_encrypt+0x218>
	}
	
	// Sub words.
	for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
10000578:	e03ff7c5 	stb	zero,-33(fp)
1000057c:	00000d06 	br	100005b4 <aes_encrypt+0x330>
10000580:	e0bff7c3 	ldbu	r2,-33(fp)
10000584:	e0fff004 	addi	r3,fp,-64
10000588:	100490ba 	slli	r2,r2,2
1000058c:	1889883a 	add	r4,r3,r2
10000590:	e0bff7c3 	ldbu	r2,-33(fp)
10000594:	e0ffe804 	addi	r3,fp,-96
10000598:	100490ba 	slli	r2,r2,2
1000059c:	1885883a 	add	r2,r3,r2
100005a0:	100b883a 	mov	r5,r2
100005a4:	0000a180 	call	10000a18 <sub_word>
100005a8:	e0bff7c3 	ldbu	r2,-33(fp)
100005ac:	10800044 	addi	r2,r2,1
100005b0:	e0bff7c5 	stb	r2,-33(fp)
100005b4:	e0bff7c3 	ldbu	r2,-33(fp)
100005b8:	10800130 	cmpltui	r2,r2,4
100005bc:	103ff01e 	bne	r2,zero,10000580 <aes_encrypt+0x2fc>
	//memcpy(&state, &state_in, sizeof(state_in));
	
	// Shift Rows.
	shift_rows(&state_in0.state8, &state_in1.state8);
100005c0:	e0ffe404 	addi	r3,fp,-112
100005c4:	e0bfe804 	addi	r2,fp,-96
100005c8:	180b883a 	mov	r5,r3
100005cc:	1009883a 	mov	r4,r2
100005d0:	00008480 	call	10000848 <shift_rows>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Add Round Key
	add_round_key(&state_in1.state32, &key_out[CNST_AES_NR], &state_in2.state32);
100005d4:	a006d0ba 	srli	r3,r20,2
100005d8:	00800284 	movi	r2,10
100005dc:	10803fcc 	andi	r2,r2,255
100005e0:	1885383a 	mul	r2,r3,r2
100005e4:	100490ba 	slli	r2,r2,2
100005e8:	e0fff417 	ldw	r3,-48(fp)
100005ec:	1887883a 	add	r3,r3,r2
100005f0:	e13fe004 	addi	r4,fp,-128
100005f4:	e0bfe404 	addi	r2,fp,-112
100005f8:	200d883a 	mov	r6,r4
100005fc:	180b883a 	mov	r5,r3
10000600:	1009883a 	mov	r4,r2
10000604:	0000dc00 	call	10000dc0 <add_round_key>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Now everything is ready.
	memcpy(data_out, state_in2.state32, sizeof(state_in2.state32));
10000608:	e0bfe004 	addi	r2,fp,-128
1000060c:	01800404 	movi	r6,16
10000610:	100b883a 	mov	r5,r2
10000614:	e13fda17 	ldw	r4,-152(fp)
10000618:	0002ffc0 	call	10002ffc <memcpy>
1000061c:	b837883a 	mov	sp,r23
}
10000620:	0001883a 	nop
10000624:	e6fff804 	addi	sp,fp,-32
10000628:	dfc00917 	ldw	ra,36(sp)
1000062c:	df000817 	ldw	fp,32(sp)
10000630:	ddc00717 	ldw	r23,28(sp)
10000634:	dd800617 	ldw	r22,24(sp)
10000638:	dd400517 	ldw	r21,20(sp)
1000063c:	dd000417 	ldw	r20,16(sp)
10000640:	dcc00317 	ldw	r19,12(sp)
10000644:	dc800217 	ldw	r18,8(sp)
10000648:	dc400117 	ldw	r17,4(sp)
1000064c:	dc000017 	ldw	r16,0(sp)
10000650:	dec00a04 	addi	sp,sp,40
10000654:	f800283a 	ret

10000658 <key_expansion>:

// Verified working.
void key_expansion(uint8_t* key_in, uint32_t* key_out, uint8_t Nk, uint8_t Nb, uint8_t Nr) {
10000658:	defff704 	addi	sp,sp,-36
1000065c:	dfc00815 	stw	ra,32(sp)
10000660:	df000715 	stw	fp,28(sp)
10000664:	df000704 	addi	fp,sp,28
10000668:	e13ffd15 	stw	r4,-12(fp)
1000066c:	e17ffc15 	stw	r5,-16(fp)
10000670:	3007883a 	mov	r3,r6
10000674:	3809883a 	mov	r4,r7
10000678:	e0800217 	ldw	r2,8(fp)
1000067c:	e0fffb05 	stb	r3,-20(fp)
10000680:	2007883a 	mov	r3,r4
10000684:	e0fffa05 	stb	r3,-24(fp)
10000688:	e0bff905 	stb	r2,-28(fp)
	uint32_t temp;
	for(uint8_t i=0; i<Nk; i++) {
1000068c:	e03ffec5 	stb	zero,-5(fp)
10000690:	00002b06 	br	10000740 <key_expansion+0xe8>
		key_out[i] = key_in[4*i+3] | (key_in[4*i+2] << 8) | (key_in[4*i+1] << 16) | (key_in[4*i] << 24);
10000694:	e0bffec3 	ldbu	r2,-5(fp)
10000698:	100490ba 	slli	r2,r2,2
1000069c:	108000c4 	addi	r2,r2,3
100006a0:	e0fffd17 	ldw	r3,-12(fp)
100006a4:	1885883a 	add	r2,r3,r2
100006a8:	10800003 	ldbu	r2,0(r2)
100006ac:	10c03fcc 	andi	r3,r2,255
100006b0:	e0bffec3 	ldbu	r2,-5(fp)
100006b4:	100490ba 	slli	r2,r2,2
100006b8:	10800084 	addi	r2,r2,2
100006bc:	e13ffd17 	ldw	r4,-12(fp)
100006c0:	2085883a 	add	r2,r4,r2
100006c4:	10800003 	ldbu	r2,0(r2)
100006c8:	10803fcc 	andi	r2,r2,255
100006cc:	1004923a 	slli	r2,r2,8
100006d0:	1886b03a 	or	r3,r3,r2
100006d4:	e0bffec3 	ldbu	r2,-5(fp)
100006d8:	100490ba 	slli	r2,r2,2
100006dc:	10800044 	addi	r2,r2,1
100006e0:	e13ffd17 	ldw	r4,-12(fp)
100006e4:	2085883a 	add	r2,r4,r2
100006e8:	10800003 	ldbu	r2,0(r2)
100006ec:	10803fcc 	andi	r2,r2,255
100006f0:	1004943a 	slli	r2,r2,16
100006f4:	1886b03a 	or	r3,r3,r2
100006f8:	e0bffec3 	ldbu	r2,-5(fp)
100006fc:	100490ba 	slli	r2,r2,2
10000700:	1009883a 	mov	r4,r2
10000704:	e0bffd17 	ldw	r2,-12(fp)
10000708:	1105883a 	add	r2,r2,r4
1000070c:	10800003 	ldbu	r2,0(r2)
10000710:	10803fcc 	andi	r2,r2,255
10000714:	1004963a 	slli	r2,r2,24
10000718:	1888b03a 	or	r4,r3,r2
1000071c:	e0bffec3 	ldbu	r2,-5(fp)
10000720:	100490ba 	slli	r2,r2,2
10000724:	e0fffc17 	ldw	r3,-16(fp)
10000728:	1885883a 	add	r2,r3,r2
1000072c:	2007883a 	mov	r3,r4
10000730:	10c00015 	stw	r3,0(r2)
	for(uint8_t i=0; i<Nk; i++) {
10000734:	e0bffec3 	ldbu	r2,-5(fp)
10000738:	10800044 	addi	r2,r2,1
1000073c:	e0bffec5 	stb	r2,-5(fp)
10000740:	e0fffec3 	ldbu	r3,-5(fp)
10000744:	e0bffb03 	ldbu	r2,-20(fp)
10000748:	18bfd236 	bltu	r3,r2,10000694 <key_expansion+0x3c>
	}
	uint8_t i = Nk;
1000074c:	e0bffb03 	ldbu	r2,-20(fp)
10000750:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000754:	00003006 	br	10000818 <key_expansion+0x1c0>
		temp = key_out[i-1];
10000758:	e0fffe83 	ldbu	r3,-6(fp)
1000075c:	00900034 	movhi	r2,16384
10000760:	10bfffc4 	addi	r2,r2,-1
10000764:	1885883a 	add	r2,r3,r2
10000768:	100490ba 	slli	r2,r2,2
1000076c:	e0fffc17 	ldw	r3,-16(fp)
10000770:	1885883a 	add	r2,r3,r2
10000774:	10800017 	ldw	r2,0(r2)
10000778:	e0bfff15 	stw	r2,-4(fp)
		if(i % Nk == 0) {
1000077c:	e0bffe83 	ldbu	r2,-6(fp)
10000780:	e0fffb03 	ldbu	r3,-20(fp)
10000784:	10c9203a 	divu	r4,r2,r3
10000788:	20c7383a 	mul	r3,r4,r3
1000078c:	10c5c83a 	sub	r2,r2,r3
10000790:	10803fcc 	andi	r2,r2,255
10000794:	10000f1e 	bne	r2,zero,100007d4 <key_expansion+0x17c>
			temp = sub_word32(rot_word(temp)) ^ Rcon[i/Nk];
10000798:	e13fff17 	ldw	r4,-4(fp)
1000079c:	0000adc0 	call	10000adc <rot_word>
100007a0:	1009883a 	mov	r4,r2
100007a4:	000096c0 	call	1000096c <sub_word32>
100007a8:	1009883a 	mov	r4,r2
100007ac:	e0fffe83 	ldbu	r3,-6(fp)
100007b0:	e0bffb03 	ldbu	r2,-20(fp)
100007b4:	1885203a 	divu	r2,r3,r2
100007b8:	10803fcc 	andi	r2,r2,255
100007bc:	100690ba 	slli	r3,r2,2
100007c0:	00840074 	movhi	r2,4097
100007c4:	1885883a 	add	r2,r3,r2
100007c8:	108cd417 	ldw	r2,13136(r2)
100007cc:	2084f03a 	xor	r2,r4,r2
100007d0:	e0bfff15 	stw	r2,-4(fp)
		}
		key_out[i] = key_out[i-Nk] ^ temp;
100007d4:	e0fffe83 	ldbu	r3,-6(fp)
100007d8:	e0bffb03 	ldbu	r2,-20(fp)
100007dc:	1885c83a 	sub	r2,r3,r2
100007e0:	100490ba 	slli	r2,r2,2
100007e4:	e0fffc17 	ldw	r3,-16(fp)
100007e8:	1885883a 	add	r2,r3,r2
100007ec:	11000017 	ldw	r4,0(r2)
100007f0:	e0bffe83 	ldbu	r2,-6(fp)
100007f4:	100490ba 	slli	r2,r2,2
100007f8:	e0fffc17 	ldw	r3,-16(fp)
100007fc:	1885883a 	add	r2,r3,r2
10000800:	e0ffff17 	ldw	r3,-4(fp)
10000804:	20c6f03a 	xor	r3,r4,r3
10000808:	10c00015 	stw	r3,0(r2)
		++i;
1000080c:	e0bffe83 	ldbu	r2,-6(fp)
10000810:	10800044 	addi	r2,r2,1
10000814:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000818:	e0fffe83 	ldbu	r3,-6(fp)
1000081c:	e13ffa03 	ldbu	r4,-24(fp)
10000820:	e0bff903 	ldbu	r2,-28(fp)
10000824:	10800044 	addi	r2,r2,1
10000828:	2085383a 	mul	r2,r4,r2
1000082c:	18bfca16 	blt	r3,r2,10000758 <key_expansion+0x100>
	}
}
10000830:	0001883a 	nop
10000834:	e037883a 	mov	sp,fp
10000838:	dfc00117 	ldw	ra,4(sp)
1000083c:	df000017 	ldw	fp,0(sp)
10000840:	dec00204 	addi	sp,sp,8
10000844:	f800283a 	ret

10000848 <shift_rows>:

// Verified working.
void shift_rows(uint8_t* in, uint8_t* result) {
10000848:	defffb04 	addi	sp,sp,-20
1000084c:	df000415 	stw	fp,16(sp)
10000850:	df000404 	addi	fp,sp,16
10000854:	e13ffd15 	stw	r4,-12(fp)
10000858:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
1000085c:	e03fff15 	stw	zero,-4(fp)
10000860:	00002706 	br	10000900 <shift_rows+0xb8>
		for(int j=0; j<4; j++) {
10000864:	e03ffe15 	stw	zero,-8(fp)
10000868:	00001f06 	br	100008e8 <shift_rows+0xa0>
			result[j*4+i] = in[((-i+3+j)%4)*4+i];
1000086c:	00c000c4 	movi	r3,3
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	1887c83a 	sub	r3,r3,r2
10000878:	e0bffe17 	ldw	r2,-8(fp)
1000087c:	1887883a 	add	r3,r3,r2
10000880:	00a00034 	movhi	r2,32768
10000884:	108000c4 	addi	r2,r2,3
10000888:	1884703a 	and	r2,r3,r2
1000088c:	1000040e 	bge	r2,zero,100008a0 <shift_rows+0x58>
10000890:	10bfffc4 	addi	r2,r2,-1
10000894:	00ffff04 	movi	r3,-4
10000898:	10c4b03a 	or	r2,r2,r3
1000089c:	10800044 	addi	r2,r2,1
100008a0:	100690ba 	slli	r3,r2,2
100008a4:	e0bfff17 	ldw	r2,-4(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	1007883a 	mov	r3,r2
100008b0:	e0bffd17 	ldw	r2,-12(fp)
100008b4:	10c7883a 	add	r3,r2,r3
100008b8:	e0bffe17 	ldw	r2,-8(fp)
100008bc:	100890ba 	slli	r4,r2,2
100008c0:	e0bfff17 	ldw	r2,-4(fp)
100008c4:	2085883a 	add	r2,r4,r2
100008c8:	1009883a 	mov	r4,r2
100008cc:	e0bffc17 	ldw	r2,-16(fp)
100008d0:	1105883a 	add	r2,r2,r4
100008d4:	18c00003 	ldbu	r3,0(r3)
100008d8:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
100008dc:	e0bffe17 	ldw	r2,-8(fp)
100008e0:	10800044 	addi	r2,r2,1
100008e4:	e0bffe15 	stw	r2,-8(fp)
100008e8:	e0bffe17 	ldw	r2,-8(fp)
100008ec:	10800110 	cmplti	r2,r2,4
100008f0:	103fde1e 	bne	r2,zero,1000086c <shift_rows+0x24>
	for(int i=0; i<4; i++) {
100008f4:	e0bfff17 	ldw	r2,-4(fp)
100008f8:	10800044 	addi	r2,r2,1
100008fc:	e0bfff15 	stw	r2,-4(fp)
10000900:	e0bfff17 	ldw	r2,-4(fp)
10000904:	10800110 	cmplti	r2,r2,4
10000908:	103fd61e 	bne	r2,zero,10000864 <shift_rows+0x1c>
		}
	}
}
1000090c:	0001883a 	nop
10000910:	e037883a 	mov	sp,fp
10000914:	df000017 	ldw	fp,0(sp)
10000918:	dec00104 	addi	sp,sp,4
1000091c:	f800283a 	ret

10000920 <sub_byte>:

uint8_t sub_byte(uint8_t byte_in) {
10000920:	defffe04 	addi	sp,sp,-8
10000924:	df000115 	stw	fp,4(sp)
10000928:	df000104 	addi	fp,sp,4
1000092c:	2005883a 	mov	r2,r4
10000930:	e0bfff05 	stb	r2,-4(fp)
	return aes_sbox[(((byte_in & 0xF0) >> 4) * 16) + (byte_in & 0x0F)];
10000934:	e0bfff03 	ldbu	r2,-4(fp)
10000938:	1004d13a 	srli	r2,r2,4
1000093c:	10803fcc 	andi	r2,r2,255
10000940:	1006913a 	slli	r3,r2,4
10000944:	e0bfff03 	ldbu	r2,-4(fp)
10000948:	108003cc 	andi	r2,r2,15
1000094c:	1887883a 	add	r3,r3,r2
10000950:	00840074 	movhi	r2,4097
10000954:	1885883a 	add	r2,r3,r2
10000958:	10878c03 	ldbu	r2,7728(r2)
}
1000095c:	e037883a 	mov	sp,fp
10000960:	df000017 	ldw	fp,0(sp)
10000964:	dec00104 	addi	sp,sp,4
10000968:	f800283a 	ret

1000096c <sub_word32>:

uint32_t sub_word32(uint32_t word_in) {
1000096c:	defffc04 	addi	sp,sp,-16
10000970:	dfc00315 	stw	ra,12(sp)
10000974:	df000215 	stw	fp,8(sp)
10000978:	df000204 	addi	fp,sp,8
1000097c:	e13ffe15 	stw	r4,-8(fp)
	uint8_t bo_3 = sub_byte((word_in & 0xFF000000) >> 24);
10000980:	e0bffe17 	ldw	r2,-8(fp)
10000984:	1004d63a 	srli	r2,r2,24
10000988:	10803fcc 	andi	r2,r2,255
1000098c:	1009883a 	mov	r4,r2
10000990:	00009200 	call	10000920 <sub_byte>
10000994:	e0bfffc5 	stb	r2,-1(fp)
	uint8_t bo_2 = sub_byte((word_in & 0x00FF0000) >> 16);
10000998:	e0bffe17 	ldw	r2,-8(fp)
1000099c:	1004d43a 	srli	r2,r2,16
100009a0:	10803fcc 	andi	r2,r2,255
100009a4:	1009883a 	mov	r4,r2
100009a8:	00009200 	call	10000920 <sub_byte>
100009ac:	e0bfff85 	stb	r2,-2(fp)
	uint8_t bo_1 = sub_byte((word_in & 0x0000FF00) >> 8);
100009b0:	e0bffe17 	ldw	r2,-8(fp)
100009b4:	1004d23a 	srli	r2,r2,8
100009b8:	10803fcc 	andi	r2,r2,255
100009bc:	1009883a 	mov	r4,r2
100009c0:	00009200 	call	10000920 <sub_byte>
100009c4:	e0bfff45 	stb	r2,-3(fp)
	uint8_t bo_0 = sub_byte((word_in & 0x000000FF));
100009c8:	e0bffe17 	ldw	r2,-8(fp)
100009cc:	10803fcc 	andi	r2,r2,255
100009d0:	1009883a 	mov	r4,r2
100009d4:	00009200 	call	10000920 <sub_byte>
100009d8:	e0bfff05 	stb	r2,-4(fp)

	return (bo_3 << 24) | (bo_2 << 16) | (bo_1 << 8) | bo_0;
100009dc:	e0bfffc3 	ldbu	r2,-1(fp)
100009e0:	1006963a 	slli	r3,r2,24
100009e4:	e0bfff83 	ldbu	r2,-2(fp)
100009e8:	1004943a 	slli	r2,r2,16
100009ec:	1886b03a 	or	r3,r3,r2
100009f0:	e0bfff43 	ldbu	r2,-3(fp)
100009f4:	1004923a 	slli	r2,r2,8
100009f8:	1886b03a 	or	r3,r3,r2
100009fc:	e0bfff03 	ldbu	r2,-4(fp)
10000a00:	1884b03a 	or	r2,r3,r2
}
10000a04:	e037883a 	mov	sp,fp
10000a08:	dfc00117 	ldw	ra,4(sp)
10000a0c:	df000017 	ldw	fp,0(sp)
10000a10:	dec00204 	addi	sp,sp,8
10000a14:	f800283a 	ret

10000a18 <sub_word>:

void sub_word(uint8_t* word_in, uint8_t* word_out) {
10000a18:	defffb04 	addi	sp,sp,-20
10000a1c:	dfc00415 	stw	ra,16(sp)
10000a20:	df000315 	stw	fp,12(sp)
10000a24:	dc000215 	stw	r16,8(sp)
10000a28:	df000304 	addi	fp,sp,12
10000a2c:	e13ffe15 	stw	r4,-8(fp)
10000a30:	e17ffd15 	stw	r5,-12(fp)
	word_out[3] = sub_byte(word_in[3]);
10000a34:	e0bffe17 	ldw	r2,-8(fp)
10000a38:	108000c4 	addi	r2,r2,3
10000a3c:	10800003 	ldbu	r2,0(r2)
10000a40:	10c03fcc 	andi	r3,r2,255
10000a44:	e0bffd17 	ldw	r2,-12(fp)
10000a48:	140000c4 	addi	r16,r2,3
10000a4c:	1809883a 	mov	r4,r3
10000a50:	00009200 	call	10000920 <sub_byte>
10000a54:	80800005 	stb	r2,0(r16)
	word_out[2] = sub_byte(word_in[2]);
10000a58:	e0bffe17 	ldw	r2,-8(fp)
10000a5c:	10800084 	addi	r2,r2,2
10000a60:	10800003 	ldbu	r2,0(r2)
10000a64:	10c03fcc 	andi	r3,r2,255
10000a68:	e0bffd17 	ldw	r2,-12(fp)
10000a6c:	14000084 	addi	r16,r2,2
10000a70:	1809883a 	mov	r4,r3
10000a74:	00009200 	call	10000920 <sub_byte>
10000a78:	80800005 	stb	r2,0(r16)
	word_out[1] = sub_byte(word_in[1]);
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10800044 	addi	r2,r2,1
10000a84:	10800003 	ldbu	r2,0(r2)
10000a88:	10c03fcc 	andi	r3,r2,255
10000a8c:	e0bffd17 	ldw	r2,-12(fp)
10000a90:	14000044 	addi	r16,r2,1
10000a94:	1809883a 	mov	r4,r3
10000a98:	00009200 	call	10000920 <sub_byte>
10000a9c:	80800005 	stb	r2,0(r16)
	word_out[0] = sub_byte(word_in[0]);
10000aa0:	e0bffe17 	ldw	r2,-8(fp)
10000aa4:	10800003 	ldbu	r2,0(r2)
10000aa8:	10803fcc 	andi	r2,r2,255
10000aac:	1009883a 	mov	r4,r2
10000ab0:	00009200 	call	10000920 <sub_byte>
10000ab4:	1007883a 	mov	r3,r2
10000ab8:	e0bffd17 	ldw	r2,-12(fp)
10000abc:	10c00005 	stb	r3,0(r2)
}
10000ac0:	0001883a 	nop
10000ac4:	e6ffff04 	addi	sp,fp,-4
10000ac8:	dfc00217 	ldw	ra,8(sp)
10000acc:	df000117 	ldw	fp,4(sp)
10000ad0:	dc000017 	ldw	r16,0(sp)
10000ad4:	dec00304 	addi	sp,sp,12
10000ad8:	f800283a 	ret

10000adc <rot_word>:

uint32_t rot_word(uint32_t word_in) {
10000adc:	defffe04 	addi	sp,sp,-8
10000ae0:	df000115 	stw	fp,4(sp)
10000ae4:	df000104 	addi	fp,sp,4
10000ae8:	e13fff15 	stw	r4,-4(fp)
	return (((word_in & 0x00FFFFFF) << 8) & 0xFFFFFF00) | ((word_in & 0xFF000000) >> 24);
10000aec:	e0bfff17 	ldw	r2,-4(fp)
10000af0:	1004123a 	roli	r2,r2,8
}
10000af4:	e037883a 	mov	sp,fp
10000af8:	df000017 	ldw	fp,0(sp)
10000afc:	dec00104 	addi	sp,sp,4
10000b00:	f800283a 	ret

10000b04 <mix_columns>:

void mix_columns(uint8_t* mat_in, uint8_t* result) {
10000b04:	defff304 	addi	sp,sp,-52
10000b08:	dfc00c15 	stw	ra,48(sp)
10000b0c:	df000b15 	stw	fp,44(sp)
10000b10:	df000b04 	addi	fp,sp,44
10000b14:	e13ff615 	stw	r4,-40(fp)
10000b18:	e17ff515 	stw	r5,-44(fp)
	uint8_t state_deasm[4][4];	// State_disassembled.
	uint8_t result_deasm[4][4];	// Result disassembled.
	
	memcpy(&state_deasm, mat_in, sizeof(state_deasm));
10000b1c:	e0fff617 	ldw	r3,-40(fp)
10000b20:	e0bffbc4 	addi	r2,fp,-17
10000b24:	1809883a 	mov	r4,r3
10000b28:	00c00404 	movi	r3,16
10000b2c:	180d883a 	mov	r6,r3
10000b30:	200b883a 	mov	r5,r4
10000b34:	1009883a 	mov	r4,r2
10000b38:	0002ffc0 	call	10002ffc <memcpy>
		
	// Calculate.
	for(uint8_t i=0; i<4; i++) {
10000b3c:	e03fffc5 	stb	zero,-1(fp)
10000b40:	00008f06 	br	10000d80 <mix_columns+0x27c>
		result_deasm[i][3] = 
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b44:	e0bfffc3 	ldbu	r2,-1(fp)
10000b48:	100490ba 	slli	r2,r2,2
10000b4c:	e085883a 	add	r2,fp,r2
10000b50:	10bffc83 	ldbu	r2,-14(r2)
10000b54:	10803fcc 	andi	r2,r2,255
10000b58:	10c001a4 	muli	r3,r2,6
10000b5c:	00840074 	movhi	r2,4097
10000b60:	1885883a 	add	r2,r3,r2
10000b64:	10cb5403 	ldbu	r3,11600(r2)
10000b68:	e0bfffc3 	ldbu	r2,-1(fp)
10000b6c:	100490ba 	slli	r2,r2,2
10000b70:	e085883a 	add	r2,fp,r2
10000b74:	10bffc43 	ldbu	r2,-15(r2)
10000b78:	10803fcc 	andi	r2,r2,255
10000b7c:	110001a4 	muli	r4,r2,6
10000b80:	00840074 	movhi	r2,4097
10000b84:	2085883a 	add	r2,r4,r2
10000b88:	108b5443 	ldbu	r2,11601(r2)
		result_deasm[i][3] = 
10000b8c:	1884f03a 	xor	r2,r3,r2
10000b90:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b94:	e0bfffc3 	ldbu	r2,-1(fp)
10000b98:	100490ba 	slli	r2,r2,2
10000b9c:	e085883a 	add	r2,fp,r2
10000ba0:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][3] = 
10000ba4:	1884f03a 	xor	r2,r3,r2
10000ba8:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000bac:	e0bfffc3 	ldbu	r2,-1(fp)
10000bb0:	100490ba 	slli	r2,r2,2
10000bb4:	e085883a 	add	r2,fp,r2
10000bb8:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][3] = 
10000bbc:	e0bfffc3 	ldbu	r2,-1(fp)
10000bc0:	20c6f03a 	xor	r3,r4,r3
10000bc4:	100490ba 	slli	r2,r2,2
10000bc8:	e085883a 	add	r2,fp,r2
10000bcc:	10fff885 	stb	r3,-30(r2)
		result_deasm[i][2] = 
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000bd0:	e0bfffc3 	ldbu	r2,-1(fp)
10000bd4:	100490ba 	slli	r2,r2,2
10000bd8:	e085883a 	add	r2,fp,r2
10000bdc:	10fffc83 	ldbu	r3,-14(r2)
10000be0:	e0bfffc3 	ldbu	r2,-1(fp)
10000be4:	100490ba 	slli	r2,r2,2
10000be8:	e085883a 	add	r2,fp,r2
10000bec:	10bffc43 	ldbu	r2,-15(r2)
10000bf0:	10803fcc 	andi	r2,r2,255
10000bf4:	110001a4 	muli	r4,r2,6
10000bf8:	00840074 	movhi	r2,4097
10000bfc:	2085883a 	add	r2,r4,r2
10000c00:	108b5403 	ldbu	r2,11600(r2)
		result_deasm[i][2] = 
10000c04:	1884f03a 	xor	r2,r3,r2
10000c08:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c10:	100490ba 	slli	r2,r2,2
10000c14:	e085883a 	add	r2,fp,r2
10000c18:	10bffc03 	ldbu	r2,-16(r2)
10000c1c:	10803fcc 	andi	r2,r2,255
10000c20:	10c001a4 	muli	r3,r2,6
10000c24:	00840074 	movhi	r2,4097
10000c28:	1885883a 	add	r2,r3,r2
10000c2c:	108b5443 	ldbu	r2,11601(r2)
		result_deasm[i][2] = 
10000c30:	2084f03a 	xor	r2,r4,r2
10000c34:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c38:	e0bfffc3 	ldbu	r2,-1(fp)
10000c3c:	100490ba 	slli	r2,r2,2
10000c40:	e085883a 	add	r2,fp,r2
10000c44:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][2] = 
10000c48:	e0bfffc3 	ldbu	r2,-1(fp)
10000c4c:	20c6f03a 	xor	r3,r4,r3
10000c50:	100490ba 	slli	r2,r2,2
10000c54:	e085883a 	add	r2,fp,r2
10000c58:	10fff845 	stb	r3,-31(r2)
		result_deasm[i][1] = 
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c5c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c60:	100490ba 	slli	r2,r2,2
10000c64:	e085883a 	add	r2,fp,r2
10000c68:	10fffc83 	ldbu	r3,-14(r2)
10000c6c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c70:	100490ba 	slli	r2,r2,2
10000c74:	e085883a 	add	r2,fp,r2
10000c78:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][1] = 
10000c7c:	1884f03a 	xor	r2,r3,r2
10000c80:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c84:	e0bfffc3 	ldbu	r2,-1(fp)
10000c88:	100490ba 	slli	r2,r2,2
10000c8c:	e085883a 	add	r2,fp,r2
10000c90:	10bffc03 	ldbu	r2,-16(r2)
10000c94:	10803fcc 	andi	r2,r2,255
10000c98:	10c001a4 	muli	r3,r2,6
10000c9c:	00840074 	movhi	r2,4097
10000ca0:	1885883a 	add	r2,r3,r2
10000ca4:	108b5403 	ldbu	r2,11600(r2)
		result_deasm[i][1] = 
10000ca8:	2084f03a 	xor	r2,r4,r2
10000cac:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000cb0:	e0bfffc3 	ldbu	r2,-1(fp)
10000cb4:	100490ba 	slli	r2,r2,2
10000cb8:	e085883a 	add	r2,fp,r2
10000cbc:	10bffbc3 	ldbu	r2,-17(r2)
10000cc0:	10803fcc 	andi	r2,r2,255
10000cc4:	10c001a4 	muli	r3,r2,6
10000cc8:	00840074 	movhi	r2,4097
10000ccc:	1885883a 	add	r2,r3,r2
10000cd0:	10cb5443 	ldbu	r3,11601(r2)
		result_deasm[i][1] = 
10000cd4:	e0bfffc3 	ldbu	r2,-1(fp)
10000cd8:	20c6f03a 	xor	r3,r4,r3
10000cdc:	100490ba 	slli	r2,r2,2
10000ce0:	e085883a 	add	r2,fp,r2
10000ce4:	10fff805 	stb	r3,-32(r2)
		result_deasm[i][0] = 
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000ce8:	e0bfffc3 	ldbu	r2,-1(fp)
10000cec:	100490ba 	slli	r2,r2,2
10000cf0:	e085883a 	add	r2,fp,r2
10000cf4:	10bffc83 	ldbu	r2,-14(r2)
10000cf8:	10803fcc 	andi	r2,r2,255
10000cfc:	10c001a4 	muli	r3,r2,6
10000d00:	00840074 	movhi	r2,4097
10000d04:	1885883a 	add	r2,r3,r2
10000d08:	10cb5443 	ldbu	r3,11601(r2)
10000d0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d10:	100490ba 	slli	r2,r2,2
10000d14:	e085883a 	add	r2,fp,r2
10000d18:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][0] = 
10000d1c:	1884f03a 	xor	r2,r3,r2
10000d20:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d24:	e0bfffc3 	ldbu	r2,-1(fp)
10000d28:	100490ba 	slli	r2,r2,2
10000d2c:	e085883a 	add	r2,fp,r2
10000d30:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][0] = 
10000d34:	1884f03a 	xor	r2,r3,r2
10000d38:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d3c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d40:	100490ba 	slli	r2,r2,2
10000d44:	e085883a 	add	r2,fp,r2
10000d48:	10bffbc3 	ldbu	r2,-17(r2)
10000d4c:	10803fcc 	andi	r2,r2,255
10000d50:	10c001a4 	muli	r3,r2,6
10000d54:	00840074 	movhi	r2,4097
10000d58:	1885883a 	add	r2,r3,r2
10000d5c:	10cb5403 	ldbu	r3,11600(r2)
		result_deasm[i][0] = 
10000d60:	e0bfffc3 	ldbu	r2,-1(fp)
10000d64:	20c6f03a 	xor	r3,r4,r3
10000d68:	100490ba 	slli	r2,r2,2
10000d6c:	e085883a 	add	r2,fp,r2
10000d70:	10fff7c5 	stb	r3,-33(r2)
	for(uint8_t i=0; i<4; i++) {
10000d74:	e0bfffc3 	ldbu	r2,-1(fp)
10000d78:	10800044 	addi	r2,r2,1
10000d7c:	e0bfffc5 	stb	r2,-1(fp)
10000d80:	e0bfffc3 	ldbu	r2,-1(fp)
10000d84:	10800130 	cmpltui	r2,r2,4
10000d88:	103f6e1e 	bne	r2,zero,10000b44 <mix_columns+0x40>
	}
	
	memcpy(result, &result_deasm, sizeof(state_deasm));
10000d8c:	e0bff517 	ldw	r2,-44(fp)
10000d90:	1009883a 	mov	r4,r2
10000d94:	e0bff7c4 	addi	r2,fp,-33
10000d98:	00c00404 	movi	r3,16
10000d9c:	180d883a 	mov	r6,r3
10000da0:	100b883a 	mov	r5,r2
10000da4:	0002ffc0 	call	10002ffc <memcpy>
}
10000da8:	0001883a 	nop
10000dac:	e037883a 	mov	sp,fp
10000db0:	dfc00117 	ldw	ra,4(sp)
10000db4:	df000017 	ldw	fp,0(sp)
10000db8:	dec00204 	addi	sp,sp,8
10000dbc:	f800283a 	ret

10000dc0 <add_round_key>:

// Each have a shape of uint32_t[4]
void add_round_key(uint32_t* state, uint32_t* round_key, uint32_t* result) {
10000dc0:	defffc04 	addi	sp,sp,-16
10000dc4:	df000315 	stw	fp,12(sp)
10000dc8:	df000304 	addi	fp,sp,12
10000dcc:	e13fff15 	stw	r4,-4(fp)
10000dd0:	e17ffe15 	stw	r5,-8(fp)
10000dd4:	e1bffd15 	stw	r6,-12(fp)
	result[0] = state[0] ^ round_key[0];
10000dd8:	e0bfff17 	ldw	r2,-4(fp)
10000ddc:	10c00017 	ldw	r3,0(r2)
10000de0:	e0bffe17 	ldw	r2,-8(fp)
10000de4:	10800017 	ldw	r2,0(r2)
10000de8:	1886f03a 	xor	r3,r3,r2
10000dec:	e0bffd17 	ldw	r2,-12(fp)
10000df0:	10c00015 	stw	r3,0(r2)
	result[1] = state[1] ^ round_key[1];
10000df4:	e0bfff17 	ldw	r2,-4(fp)
10000df8:	10800104 	addi	r2,r2,4
10000dfc:	11000017 	ldw	r4,0(r2)
10000e00:	e0bffe17 	ldw	r2,-8(fp)
10000e04:	10800104 	addi	r2,r2,4
10000e08:	10c00017 	ldw	r3,0(r2)
10000e0c:	e0bffd17 	ldw	r2,-12(fp)
10000e10:	10800104 	addi	r2,r2,4
10000e14:	20c6f03a 	xor	r3,r4,r3
10000e18:	10c00015 	stw	r3,0(r2)
	result[2] = state[2] ^ round_key[2];
10000e1c:	e0bfff17 	ldw	r2,-4(fp)
10000e20:	10800204 	addi	r2,r2,8
10000e24:	11000017 	ldw	r4,0(r2)
10000e28:	e0bffe17 	ldw	r2,-8(fp)
10000e2c:	10800204 	addi	r2,r2,8
10000e30:	10c00017 	ldw	r3,0(r2)
10000e34:	e0bffd17 	ldw	r2,-12(fp)
10000e38:	10800204 	addi	r2,r2,8
10000e3c:	20c6f03a 	xor	r3,r4,r3
10000e40:	10c00015 	stw	r3,0(r2)
	result[3] = state[3] ^ round_key[3];
10000e44:	e0bfff17 	ldw	r2,-4(fp)
10000e48:	10800304 	addi	r2,r2,12
10000e4c:	11000017 	ldw	r4,0(r2)
10000e50:	e0bffe17 	ldw	r2,-8(fp)
10000e54:	10800304 	addi	r2,r2,12
10000e58:	10c00017 	ldw	r3,0(r2)
10000e5c:	e0bffd17 	ldw	r2,-12(fp)
10000e60:	10800304 	addi	r2,r2,12
10000e64:	20c6f03a 	xor	r3,r4,r3
10000e68:	10c00015 	stw	r3,0(r2)
}
10000e6c:	0001883a 	nop
10000e70:	e037883a 	mov	sp,fp
10000e74:	df000017 	ldw	fp,0(sp)
10000e78:	dec00104 	addi	sp,sp,4
10000e7c:	f800283a 	ret

10000e80 <transpose>:

void transpose(uint8_t* arr_in, uint8_t* arr_out) {
10000e80:	defffb04 	addi	sp,sp,-20
10000e84:	df000415 	stw	fp,16(sp)
10000e88:	df000404 	addi	fp,sp,16
10000e8c:	e13ffd15 	stw	r4,-12(fp)
10000e90:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
10000e94:	e03fff15 	stw	zero,-4(fp)
10000e98:	00001b06 	br	10000f08 <transpose+0x88>
		for(int j=0; j<4; j++) {
10000e9c:	e03ffe15 	stw	zero,-8(fp)
10000ea0:	00001306 	br	10000ef0 <transpose+0x70>
			arr_out[j*4+i] = arr_in[i*4+j];
10000ea4:	e0bfff17 	ldw	r2,-4(fp)
10000ea8:	100690ba 	slli	r3,r2,2
10000eac:	e0bffe17 	ldw	r2,-8(fp)
10000eb0:	1885883a 	add	r2,r3,r2
10000eb4:	1007883a 	mov	r3,r2
10000eb8:	e0bffd17 	ldw	r2,-12(fp)
10000ebc:	10c7883a 	add	r3,r2,r3
10000ec0:	e0bffe17 	ldw	r2,-8(fp)
10000ec4:	100890ba 	slli	r4,r2,2
10000ec8:	e0bfff17 	ldw	r2,-4(fp)
10000ecc:	2085883a 	add	r2,r4,r2
10000ed0:	1009883a 	mov	r4,r2
10000ed4:	e0bffc17 	ldw	r2,-16(fp)
10000ed8:	1105883a 	add	r2,r2,r4
10000edc:	18c00003 	ldbu	r3,0(r3)
10000ee0:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
10000ee4:	e0bffe17 	ldw	r2,-8(fp)
10000ee8:	10800044 	addi	r2,r2,1
10000eec:	e0bffe15 	stw	r2,-8(fp)
10000ef0:	e0bffe17 	ldw	r2,-8(fp)
10000ef4:	10800110 	cmplti	r2,r2,4
10000ef8:	103fea1e 	bne	r2,zero,10000ea4 <transpose+0x24>
	for(int i=0; i<4; i++) {
10000efc:	e0bfff17 	ldw	r2,-4(fp)
10000f00:	10800044 	addi	r2,r2,1
10000f04:	e0bfff15 	stw	r2,-4(fp)
10000f08:	e0bfff17 	ldw	r2,-4(fp)
10000f0c:	10800110 	cmplti	r2,r2,4
10000f10:	103fe21e 	bne	r2,zero,10000e9c <transpose+0x1c>
		}
	}
}
10000f14:	0001883a 	nop
10000f18:	e037883a 	mov	sp,fp
10000f1c:	df000017 	ldw	fp,0(sp)
10000f20:	dec00104 	addi	sp,sp,4
10000f24:	f800283a 	ret

10000f28 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000f28:	deffff04 	addi	sp,sp,-4
10000f2c:	df000015 	stw	fp,0(sp)
10000f30:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000f34:	00801404 	movi	r2,80
10000f38:	00c00044 	movi	r3,1
10000f3c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000f40:	00801804 	movi	r2,96
10000f44:	00c00044 	movi	r3,1
10000f48:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000f4c:	00802004 	movi	r2,128
10000f50:	00c00044 	movi	r3,1
10000f54:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000f58:	00801c04 	movi	r2,112
10000f5c:	00c00044 	movi	r3,1
10000f60:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000f64:	00801004 	movi	r2,64
10000f68:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000f6c:	00802804 	movi	r2,160
10000f70:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000f74:	00801804 	movi	r2,96
10000f78:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10000f7c:	00801404 	movi	r2,80
10000f80:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000f84:	00801404 	movi	r2,80
10000f88:	00c00044 	movi	r3,1
10000f8c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000f90:	00801804 	movi	r2,96
10000f94:	00c00044 	movi	r3,1
10000f98:	10c00005 	stb	r3,0(r2)
}
10000f9c:	0001883a 	nop
10000fa0:	e037883a 	mov	sp,fp
10000fa4:	df000017 	ldw	fp,0(sp)
10000fa8:	dec00104 	addi	sp,sp,4
10000fac:	f800283a 	ret

10000fb0 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000fb0:	defffd04 	addi	sp,sp,-12
10000fb4:	df000215 	stw	fp,8(sp)
10000fb8:	df000204 	addi	fp,sp,8
10000fbc:	2005883a 	mov	r2,r4
10000fc0:	2807883a 	mov	r3,r5
10000fc4:	e0bfff05 	stb	r2,-4(fp)
10000fc8:	1805883a 	mov	r2,r3
10000fcc:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000fd0:	00801004 	movi	r2,64
10000fd4:	e0ffff03 	ldbu	r3,-4(fp)
10000fd8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000fdc:	00802804 	movi	r2,160
10000fe0:	e0fffe0b 	ldhu	r3,-8(fp)
10000fe4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000fe8:	00801804 	movi	r2,96
10000fec:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000ff0:	00801c04 	movi	r2,112
10000ff4:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000ff8:	00801c04 	movi	r2,112
10000ffc:	00c00044 	movi	r3,1
10001000:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001004:	00801804 	movi	r2,96
10001008:	00c00044 	movi	r3,1
1000100c:	10c00005 	stb	r3,0(r2)
	//printf("Wrote %x to HPI %d\n", Data, Address);
}
10001010:	0001883a 	nop
10001014:	e037883a 	mov	sp,fp
10001018:	df000017 	ldw	fp,0(sp)
1000101c:	dec00104 	addi	sp,sp,4
10001020:	f800283a 	ret

10001024 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10001024:	defffd04 	addi	sp,sp,-12
10001028:	df000215 	stw	fp,8(sp)
1000102c:	df000204 	addi	fp,sp,8
10001030:	2005883a 	mov	r2,r4
10001034:	e0bffe05 	stb	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10001038:	00801004 	movi	r2,64
1000103c:	e0fffe03 	ldbu	r3,-8(fp)
10001040:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10001044:	00801804 	movi	r2,96
10001048:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000104c:	00802004 	movi	r2,128
10001050:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10001054:	00802804 	movi	r2,160
10001058:	10800017 	ldw	r2,0(r2)
1000105c:	e0bfff8d 	sth	r2,-2(fp)
	*otg_hpi_r = 1;
10001060:	00802004 	movi	r2,128
10001064:	00c00044 	movi	r3,1
10001068:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000106c:	00801804 	movi	r2,96
10001070:	00c00044 	movi	r3,1
10001074:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	//printf("Read %x from HPI %d\n", temp, Address);
	return temp;
10001078:	e0bfff8b 	ldhu	r2,-2(fp)
}
1000107c:	e037883a 	mov	sp,fp
10001080:	df000017 	ldw	fp,0(sp)
10001084:	dec00104 	addi	sp,sp,4
10001088:	f800283a 	ret

1000108c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000108c:	defff904 	addi	sp,sp,-28
10001090:	dfc00615 	stw	ra,24(sp)
10001094:	df000515 	stw	fp,20(sp)
10001098:	df000504 	addi	fp,sp,20
	IO_init();
1000109c:	0000f280 	call	10000f28 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100010a0:	e03ffe8d 	sth	zero,-6(fp)
	int keycode = 0;
100010a4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100010a8:	e03fff45 	stb	zero,-3(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100010ac:	01040074 	movhi	r4,4097
100010b0:	21080c04 	addi	r4,r4,8240
100010b4:	00032300 	call	10003230 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100010b8:	0001ec40 	call	10001ec4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100010bc:	000b883a 	mov	r5,zero
100010c0:	01005104 	movi	r4,324
100010c4:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100010c8:	017fffd4 	movui	r5,65535
100010cc:	01302414 	movui	r4,49296
100010d0:	0001e240 	call	10001e24 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100010d4:	01409604 	movi	r5,600
100010d8:	01006d04 	movi	r4,436
100010dc:	0001e240 	call	10001e24 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100010e0:	00811004 	movi	r2,1088
100010e4:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
100010e8:	e0bfff8b 	ldhu	r2,-2(fp)
100010ec:	100b883a 	mov	r5,r2
100010f0:	01005084 	movi	r4,322
100010f4:	0001e240 	call	10001e24 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100010f8:	00808404 	movi	r2,528
100010fc:	e0bffc8d 	sth	r2,-14(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10001100:	e0bffc8b 	ldhu	r2,-14(fp)
10001104:	100b883a 	mov	r5,r2
10001108:	01302314 	movui	r4,49292
1000110c:	0001e240 	call	10001e24 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10001110:	000b883a 	mov	r5,zero
10001114:	01007104 	movi	r4,452
10001118:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000111c:	000b883a 	mov	r5,zero
10001120:	01007184 	movi	r4,454
10001124:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10001128:	000b883a 	mov	r5,zero
1000112c:	01007204 	movi	r4,456
10001130:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10001134:	000b883a 	mov	r5,zero
10001138:	01007284 	movi	r4,458
1000113c:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10001140:	000b883a 	mov	r5,zero
10001144:	01007304 	movi	r4,460
10001148:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000114c:	000b883a 	mov	r5,zero
10001150:	01007384 	movi	r4,462
10001154:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10001158:	000b883a 	mov	r5,zero
1000115c:	01007404 	movi	r4,464
10001160:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10001164:	000b883a 	mov	r5,zero
10001168:	01007484 	movi	r4,466
1000116c:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10001170:	000b883a 	mov	r5,zero
10001174:	01007504 	movi	r4,468
10001178:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000117c:	000b883a 	mov	r5,zero
10001180:	01007584 	movi	r4,470
10001184:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10001188:	000b883a 	mov	r5,zero
1000118c:	01007604 	movi	r4,472
10001190:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10001194:	000b883a 	mov	r5,zero
10001198:	01007684 	movi	r4,474
1000119c:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100011a0:	000b883a 	mov	r5,zero
100011a4:	01007704 	movi	r4,476
100011a8:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100011ac:	000b883a 	mov	r5,zero
100011b0:	01007784 	movi	r4,478
100011b4:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100011b8:	01401c84 	movi	r5,114
100011bc:	01007084 	movi	r4,450
100011c0:	0001e240 	call	10001e24 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100011c4:	01738054 	movui	r5,52737
100011c8:	01000044 	movi	r4,1
100011cc:	0000fb00 	call	10000fb0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
100011d0:	0001883a 	nop
100011d4:	010000c4 	movi	r4,3
100011d8:	00010240 	call	10001024 <IO_read>
100011dc:	10bfffcc 	andi	r2,r2,65535
100011e0:	103ffc26 	beq	r2,zero,100011d4 <main+0x148>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100011e4:	00000806 	br	10001208 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100011e8:	01000044 	movi	r4,1
100011ec:	00010240 	call	10001024 <IO_read>
100011f0:	10bfffcc 	andi	r2,r2,65535
100011f4:	100b883a 	mov	r5,r2
100011f8:	01040074 	movhi	r4,4097
100011fc:	21081204 	addi	r4,r4,8264
10001200:	000312c0 	call	1000312c <printf>
		goto USB_HOT_PLUG;
10001204:	003fac06 	br	100010b8 <main+0x2c>
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001208:	01000044 	movi	r4,1
1000120c:	00010240 	call	10001024 <IO_read>
10001210:	10bfffcc 	andi	r2,r2,65535
10001214:	1083fb58 	cmpnei	r2,r2,4077
10001218:	103ff31e 	bne	r2,zero,100011e8 <main+0x15c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
1000121c:	01040074 	movhi	r4,4097
10001220:	21081b04 	addi	r4,r4,8300
10001224:	000312c0 	call	1000312c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10001228:	01401d04 	movi	r5,116
1000122c:	01007084 	movi	r4,450
10001230:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10001234:	01400f04 	movi	r5,60
10001238:	01007104 	movi	r4,452
1000123c:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10001240:	000b883a 	mov	r5,zero
10001244:	01007184 	movi	r4,454
10001248:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000124c:	000b883a 	mov	r5,zero
10001250:	01007204 	movi	r4,456
10001254:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10001258:	000b883a 	mov	r5,zero
1000125c:	01007284 	movi	r4,458
10001260:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10001264:	000b883a 	mov	r5,zero
10001268:	01007304 	movi	r4,460
1000126c:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10001270:	000b883a 	mov	r5,zero
10001274:	01007384 	movi	r4,462
10001278:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000127c:	000b883a 	mov	r5,zero
10001280:	01007404 	movi	r4,464
10001284:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10001288:	000b883a 	mov	r5,zero
1000128c:	01007484 	movi	r4,466
10001290:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10001294:	000b883a 	mov	r5,zero
10001298:	01007504 	movi	r4,468
1000129c:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100012a0:	000b883a 	mov	r5,zero
100012a4:	01007584 	movi	r4,470
100012a8:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100012ac:	000b883a 	mov	r5,zero
100012b0:	01007604 	movi	r4,472
100012b4:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100012b8:	000b883a 	mov	r5,zero
100012bc:	01007684 	movi	r4,474
100012c0:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100012c4:	000b883a 	mov	r5,zero
100012c8:	01007704 	movi	r4,476
100012cc:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100012d0:	000b883a 	mov	r5,zero
100012d4:	01007784 	movi	r4,478
100012d8:	0001e240 	call	10001e24 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100012dc:	01738054 	movui	r5,52737
100012e0:	01000044 	movi	r4,1
100012e4:	0000fb00 	call	10000fb0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100012e8:	0001883a 	nop
100012ec:	01000044 	movi	r4,1
100012f0:	00010240 	call	10001024 <IO_read>
100012f4:	10bfffcc 	andi	r2,r2,65535
100012f8:	1083fb58 	cmpnei	r2,r2,4077
100012fc:	10000826 	beq	r2,zero,10001320 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10001300:	01000044 	movi	r4,1
10001304:	00010240 	call	10001024 <IO_read>
10001308:	10bfffcc 	andi	r2,r2,65535
1000130c:	100b883a 	mov	r5,r2
10001310:	01040074 	movhi	r4,4097
10001314:	21081204 	addi	r4,r4,8264
10001318:	000312c0 	call	1000312c <printf>
		goto USB_HOT_PLUG;
1000131c:	003f6606 	br	100010b8 <main+0x2c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10001320:	00b02284 	movi	r2,-16246
10001324:	d0a8960d 	sth	r2,-23976(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10001328:	008c0004 	movi	r2,12288
1000132c:	d0a8968d 	sth	r2,-23974(gp)
	fs_device = A_DP_STAT;
10001330:	00880004 	movi	r2,8192
10001334:	e0bffe8d 	sth	r2,-6(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10001338:	d0a8960b 	ldhu	r2,-23976(gp)
1000133c:	10bfffcc 	andi	r2,r2,65535
10001340:	1009883a 	mov	r4,r2
10001344:	0001e800 	call	10001e80 <UsbRead>
10001348:	e0bfff8d 	sth	r2,-2(fp)

	if (!(usb_ctl_val & no_device))
1000134c:	d0a8968b 	ldhu	r2,-23974(gp)
10001350:	e0ffff8b 	ldhu	r3,-2(fp)
10001354:	1884703a 	and	r2,r3,r2
10001358:	10bfffcc 	andi	r2,r2,65535
1000135c:	1000351e 	bne	r2,zero,10001434 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001360:	e03fff05 	stb	zero,-4(fp)
10001364:	00000f06 	br	100013a4 <main+0x318>
		{
			usleep(5*1000);
10001368:	0104e204 	movi	r4,5000
1000136c:	000fe580 	call	1000fe58 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001370:	d0a8960b 	ldhu	r2,-23976(gp)
10001374:	10bfffcc 	andi	r2,r2,65535
10001378:	1009883a 	mov	r4,r2
1000137c:	0001e800 	call	10001e80 <UsbRead>
10001380:	e0bfff8d 	sth	r2,-2(fp)
			if(usb_ctl_val & no_device) break;
10001384:	d0a8968b 	ldhu	r2,-23974(gp)
10001388:	e0ffff8b 	ldhu	r3,-2(fp)
1000138c:	1884703a 	and	r2,r3,r2
10001390:	10bfffcc 	andi	r2,r2,65535
10001394:	1000071e 	bne	r2,zero,100013b4 <main+0x328>
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001398:	e0bfff03 	ldbu	r2,-4(fp)
1000139c:	10800044 	addi	r2,r2,1
100013a0:	e0bfff05 	stb	r2,-4(fp)
100013a4:	e0bfff03 	ldbu	r2,-4(fp)
100013a8:	10800170 	cmpltui	r2,r2,5
100013ac:	103fee1e 	bne	r2,zero,10001368 <main+0x2dc>
100013b0:	00000106 	br	100013b8 <main+0x32c>
			if(usb_ctl_val & no_device) break;
100013b4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100013b8:	d0a8968b 	ldhu	r2,-23974(gp)
100013bc:	e0ffff8b 	ldhu	r3,-2(fp)
100013c0:	1884703a 	and	r2,r3,r2
100013c4:	10bfffcc 	andi	r2,r2,65535
100013c8:	1000261e 	bne	r2,zero,10001464 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
100013cc:	01040074 	movhi	r4,4097
100013d0:	21081f04 	addi	r4,r4,8316
100013d4:	00032300 	call	10003230 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100013d8:	01040074 	movhi	r4,4097
100013dc:	21082904 	addi	r4,r4,8356
100013e0:	00032300 	call	10003230 <puts>
			while (!(usb_ctl_val & no_device))
100013e4:	00000d06 	br	1000141c <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100013e8:	d0a8960b 	ldhu	r2,-23976(gp)
100013ec:	10bfffcc 	andi	r2,r2,65535
100013f0:	1009883a 	mov	r4,r2
100013f4:	0001e800 	call	10001e80 <UsbRead>
100013f8:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device)
100013fc:	d0a8968b 	ldhu	r2,-23974(gp)
10001400:	e0ffff8b 	ldhu	r3,-2(fp)
10001404:	1884703a 	and	r2,r3,r2
10001408:	10bfffcc 	andi	r2,r2,65535
1000140c:	10000126 	beq	r2,zero,10001414 <main+0x388>
					goto USB_HOT_PLUG;
10001410:	003f2906 	br	100010b8 <main+0x2c>

				usleep(2000);
10001414:	0101f404 	movi	r4,2000
10001418:	000fe580 	call	1000fe58 <usleep>
			while (!(usb_ctl_val & no_device))
1000141c:	d0a8968b 	ldhu	r2,-23974(gp)
10001420:	e0ffff8b 	ldhu	r3,-2(fp)
10001424:	1884703a 	and	r2,r3,r2
10001428:	10bfffcc 	andi	r2,r2,65535
1000142c:	103fee26 	beq	r2,zero,100013e8 <main+0x35c>
10001430:	00000c06 	br	10001464 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10001434:	e0ffff8b 	ldhu	r3,-2(fp)
10001438:	e0bffe8b 	ldhu	r2,-6(fp)
1000143c:	1884703a 	and	r2,r3,r2
10001440:	10bfffcc 	andi	r2,r2,65535
10001444:	10000426 	beq	r2,zero,10001458 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10001448:	01040074 	movhi	r4,4097
1000144c:	21083504 	addi	r4,r4,8404
10001450:	00032300 	call	10003230 <puts>
10001454:	00000306 	br	10001464 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10001458:	01040074 	movhi	r4,4097
1000145c:	21083c04 	addi	r4,r4,8432
10001460:	00032300 	call	10003230 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10001464:	0001f780 	call	10001f78 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001468:	00000306 	br	10001478 <main+0x3ec>
	{
		UsbSetAddress();
1000146c:	0001f780 	call	10001f78 <UsbSetAddress>
		usleep(10*1000);
10001470:	0109c404 	movi	r4,10000
10001474:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001478:	010000c4 	movi	r4,3
1000147c:	00010240 	call	10001024 <IO_read>
10001480:	10bfffcc 	andi	r2,r2,65535
10001484:	1080040c 	andi	r2,r2,16
10001488:	103ff826 	beq	r2,zero,1000146c <main+0x3e0>
	}

	UsbWaitTDListDone();
1000148c:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10001490:	01414184 	movi	r5,1286
10001494:	01000084 	movi	r4,2
10001498:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000149c:	0009883a 	mov	r4,zero
100014a0:	00010240 	call	10001024 <IO_read>
100014a4:	10bfffcc 	andi	r2,r2,65535
100014a8:	100b883a 	mov	r5,r2
100014ac:	01040074 	movhi	r4,4097
100014b0:	21084304 	addi	r4,r4,8460
100014b4:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508); // n
100014b8:	01414204 	movi	r5,1288
100014bc:	01000084 	movi	r4,2
100014c0:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100014c4:	0009883a 	mov	r4,zero
100014c8:	00010240 	call	10001024 <IO_read>
100014cc:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100014d0:	e0bfff8b 	ldhu	r2,-2(fp)
100014d4:	100b883a 	mov	r5,r2
100014d8:	01040074 	movhi	r4,4097
100014dc:	21084e04 	addi	r4,r4,8504
100014e0:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100014e4:	e0bfff8b 	ldhu	r2,-2(fp)
100014e8:	108000e0 	cmpeqi	r2,r2,3
100014ec:	1000031e 	bne	r2,zero,100014fc <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
100014f0:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
100014f4:	e0bfff8d 	sth	r2,-2(fp)

		goto USB_HOT_PLUG;
100014f8:	003eef06 	br	100010b8 <main+0x2c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100014fc:	01040074 	movhi	r4,4097
10001500:	21085a04 	addi	r4,r4,8552
10001504:	00032300 	call	10003230 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10001508:	00020780 	call	10002078 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000150c:	00000306 	br	1000151c <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10001510:	00020780 	call	10002078 <UsbGetDeviceDesc1>
		usleep(10*1000);
10001514:	0109c404 	movi	r4,10000
10001518:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000151c:	010000c4 	movi	r4,3
10001520:	00010240 	call	10001024 <IO_read>
10001524:	10bfffcc 	andi	r2,r2,65535
10001528:	1080040c 	andi	r2,r2,16
1000152c:	103ff826 	beq	r2,zero,10001510 <main+0x484>
	}

	UsbWaitTDListDone();
10001530:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001534:	01414184 	movi	r5,1286
10001538:	01000084 	movi	r4,2
1000153c:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001540:	0009883a 	mov	r4,zero
10001544:	00010240 	call	10001024 <IO_read>
10001548:	10bfffcc 	andi	r2,r2,65535
1000154c:	100b883a 	mov	r5,r2
10001550:	01040074 	movhi	r4,4097
10001554:	21086904 	addi	r4,r4,8612
10001558:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
1000155c:	01414204 	movi	r5,1288
10001560:	01000084 	movi	r4,2
10001564:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001568:	0009883a 	mov	r4,zero
1000156c:	00010240 	call	10001024 <IO_read>
10001570:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10001574:	e0bfff8b 	ldhu	r2,-2(fp)
10001578:	100b883a 	mov	r5,r2
1000157c:	01040074 	movhi	r4,4097
10001580:	21087404 	addi	r4,r4,8656
10001584:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
10001588:	e0bfff8b 	ldhu	r2,-2(fp)
1000158c:	108000e0 	cmpeqi	r2,r2,3
10001590:	1000061e 	bne	r2,zero,100015ac <main+0x520>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001594:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
10001598:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
1000159c:	01040074 	movhi	r4,4097
100015a0:	21088004 	addi	r4,r4,8704
100015a4:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
100015a8:	003ec306 	br	100010b8 <main+0x2c>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100015ac:	01040074 	movhi	r4,4097
100015b0:	21088904 	addi	r4,r4,8740
100015b4:	00032300 	call	10003230 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100015b8:	00021c00 	call	100021c0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100015bc:	00000306 	br	100015cc <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100015c0:	00021c00 	call	100021c0 <UsbGetDeviceDesc2>
		usleep(10*1000);
100015c4:	0109c404 	movi	r4,10000
100015c8:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100015cc:	010000c4 	movi	r4,3
100015d0:	00010240 	call	10001024 <IO_read>
100015d4:	10bfffcc 	andi	r2,r2,65535
100015d8:	1080040c 	andi	r2,r2,16
100015dc:	103ff826 	beq	r2,zero,100015c0 <main+0x534>
	}

	UsbWaitTDListDone();
100015e0:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100015e4:	01414184 	movi	r5,1286
100015e8:	01000084 	movi	r4,2
100015ec:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100015f0:	0009883a 	mov	r4,zero
100015f4:	00010240 	call	10001024 <IO_read>
100015f8:	10bfffcc 	andi	r2,r2,65535
100015fc:	100b883a 	mov	r5,r2
10001600:	01040074 	movhi	r4,4097
10001604:	21086904 	addi	r4,r4,8612
10001608:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
1000160c:	01414204 	movi	r5,1288
10001610:	01000084 	movi	r4,2
10001614:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001618:	0009883a 	mov	r4,zero
1000161c:	00010240 	call	10001024 <IO_read>
10001620:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10001624:	e0bfff8b 	ldhu	r2,-2(fp)
10001628:	100b883a 	mov	r5,r2
1000162c:	01040074 	movhi	r4,4097
10001630:	21087404 	addi	r4,r4,8656
10001634:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
10001638:	e0bfff8b 	ldhu	r2,-2(fp)
1000163c:	108000e0 	cmpeqi	r2,r2,3
10001640:	1000061e 	bne	r2,zero,1000165c <main+0x5d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001644:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
10001648:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
1000164c:	01040074 	movhi	r4,4097
10001650:	21088004 	addi	r4,r4,8704
10001654:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
10001658:	003e9706 	br	100010b8 <main+0x2c>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
1000165c:	01040074 	movhi	r4,4097
10001660:	21089d04 	addi	r4,r4,8820
10001664:	00032300 	call	10003230 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10001668:	00023980 	call	10002398 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000166c:	00000306 	br	1000167c <main+0x5f0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10001670:	00023980 	call	10002398 <UsbGetConfigDesc1>
		usleep(10*1000);
10001674:	0109c404 	movi	r4,10000
10001678:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000167c:	010000c4 	movi	r4,3
10001680:	00010240 	call	10001024 <IO_read>
10001684:	10bfffcc 	andi	r2,r2,65535
10001688:	1080040c 	andi	r2,r2,16
1000168c:	103ff826 	beq	r2,zero,10001670 <main+0x5e4>
	}

	UsbWaitTDListDone();
10001690:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001694:	01414184 	movi	r5,1286
10001698:	01000084 	movi	r4,2
1000169c:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100016a0:	0009883a 	mov	r4,zero
100016a4:	00010240 	call	10001024 <IO_read>
100016a8:	10bfffcc 	andi	r2,r2,65535
100016ac:	100b883a 	mov	r5,r2
100016b0:	01040074 	movhi	r4,4097
100016b4:	2108af04 	addi	r4,r4,8892
100016b8:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
100016bc:	01414204 	movi	r5,1288
100016c0:	01000084 	movi	r4,2
100016c4:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100016c8:	0009883a 	mov	r4,zero
100016cc:	00010240 	call	10001024 <IO_read>
100016d0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100016d4:	e0bfff8b 	ldhu	r2,-2(fp)
100016d8:	100b883a 	mov	r5,r2
100016dc:	01040074 	movhi	r4,4097
100016e0:	2108ba04 	addi	r4,r4,8936
100016e4:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
100016e8:	e0bfff8b 	ldhu	r2,-2(fp)
100016ec:	108000e0 	cmpeqi	r2,r2,3
100016f0:	1000061e 	bne	r2,zero,1000170c <main+0x680>
	{
		usb_ctl_val = UsbGetRetryCnt();
100016f4:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
100016f8:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100016fc:	01040074 	movhi	r4,4097
10001700:	21088004 	addi	r4,r4,8704
10001704:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
10001708:	003e6b06 	br	100010b8 <main+0x2c>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
1000170c:	01040074 	movhi	r4,4097
10001710:	2108c604 	addi	r4,r4,8984
10001714:	00032300 	call	10003230 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10001718:	00025280 	call	10002528 <UsbGetConfigDesc2>

	usleep(100*1000);
1000171c:	010000b4 	movhi	r4,2
10001720:	2121a804 	addi	r4,r4,-31072
10001724:	000fe580 	call	1000fe58 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001728:	00000306 	br	10001738 <main+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
1000172c:	00025280 	call	10002528 <UsbGetConfigDesc2>
		usleep(10*1000);
10001730:	0109c404 	movi	r4,10000
10001734:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001738:	010000c4 	movi	r4,3
1000173c:	00010240 	call	10001024 <IO_read>
10001740:	10bfffcc 	andi	r2,r2,65535
10001744:	1080040c 	andi	r2,r2,16
10001748:	103ff826 	beq	r2,zero,1000172c <main+0x6a0>
	}

	UsbWaitTDListDone();
1000174c:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001750:	01414184 	movi	r5,1286
10001754:	01000084 	movi	r4,2
10001758:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000175c:	0009883a 	mov	r4,zero
10001760:	00010240 	call	10001024 <IO_read>
10001764:	10bfffcc 	andi	r2,r2,65535
10001768:	100b883a 	mov	r5,r2
1000176c:	01040074 	movhi	r4,4097
10001770:	2108d904 	addi	r4,r4,9060
10001774:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
10001778:	01414204 	movi	r5,1288
1000177c:	01000084 	movi	r4,2
10001780:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001784:	0009883a 	mov	r4,zero
10001788:	00010240 	call	10001024 <IO_read>
1000178c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10001790:	e0bfff8b 	ldhu	r2,-2(fp)
10001794:	100b883a 	mov	r5,r2
10001798:	01040074 	movhi	r4,4097
1000179c:	2108e404 	addi	r4,r4,9104
100017a0:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
100017a4:	e0bfff8b 	ldhu	r2,-2(fp)
100017a8:	108000e0 	cmpeqi	r2,r2,3
100017ac:	1000061e 	bne	r2,zero,100017c8 <main+0x73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100017b0:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
100017b4:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100017b8:	01040074 	movhi	r4,4097
100017bc:	21088004 	addi	r4,r4,8704
100017c0:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
100017c4:	003e3c06 	br	100010b8 <main+0x2c>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
100017c8:	01040074 	movhi	r4,4097
100017cc:	2108f004 	addi	r4,r4,9152
100017d0:	00032300 	call	10003230 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
100017d4:	01415b04 	movi	r5,1388
100017d8:	01000084 	movi	r4,2
100017dc:	0000fb00 	call	10000fb0 <IO_write>
	code = IO_read(HPI_DATA);
100017e0:	0009883a 	mov	r4,zero
100017e4:	00010240 	call	10001024 <IO_read>
100017e8:	e0bffc0d 	sth	r2,-16(fp)
	code = code & 0x003;
100017ec:	e0bffc0b 	ldhu	r2,-16(fp)
100017f0:	108000cc 	andi	r2,r2,3
100017f4:	e0bffc0d 	sth	r2,-16(fp)
	printf("\ncode = %x\n", code);
100017f8:	e0bffc0b 	ldhu	r2,-16(fp)
100017fc:	100b883a 	mov	r5,r2
10001800:	01040074 	movhi	r4,4097
10001804:	21090304 	addi	r4,r4,9228
10001808:	000312c0 	call	1000312c <printf>

	if (code == 0x01)
1000180c:	e0bffc0b 	ldhu	r2,-16(fp)
10001810:	10800058 	cmpnei	r2,r2,1
10001814:	1000041e 	bne	r2,zero,10001828 <main+0x79c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10001818:	01040074 	movhi	r4,4097
1000181c:	21090604 	addi	r4,r4,9240
10001820:	00032300 	call	10003230 <puts>
10001824:	00000306 	br	10001834 <main+0x7a8>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10001828:	01040074 	movhi	r4,4097
1000182c:	21091504 	addi	r4,r4,9300
10001830:	00032300 	call	10003230 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10001834:	01415d84 	movi	r5,1398
10001838:	01000084 	movi	r4,2
1000183c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x073F);
10001840:	0141cfc4 	movi	r5,1855
10001844:	0009883a 	mov	r4,zero
10001848:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x8105);
1000184c:	01604154 	movui	r5,33029
10001850:	0009883a 	mov	r4,zero
10001854:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0003);
10001858:	014000c4 	movi	r5,3
1000185c:	0009883a 	mov	r4,zero
10001860:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001864:	01400204 	movi	r5,8
10001868:	0009883a 	mov	r4,zero
1000186c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10001870:	016b0294 	movui	r5,44042
10001874:	0009883a 	mov	r4,zero
10001878:	0000fb00 	call	10000fb0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
1000187c:	01415d84 	movi	r5,1398
10001880:	01006c04 	movi	r4,432
10001884:	0001e240 	call	10001e24 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10001888:	01415f04 	movi	r5,1404
1000188c:	01000084 	movi	r4,2
10001890:	0000fb00 	call	10000fb0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10001894:	0009883a 	mov	r4,zero
10001898:	00010240 	call	10001024 <IO_read>
1000189c:	e0bffbc5 	stb	r2,-17(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
100018a0:	e0bffbc3 	ldbu	r2,-17(fp)
100018a4:	100b883a 	mov	r5,r2
100018a8:	01040074 	movhi	r4,4097
100018ac:	21091e04 	addi	r4,r4,9336
100018b0:	000312c0 	call	1000312c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
100018b4:	00027900 	call	10002790 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100018b8:	00000306 	br	100018c8 <main+0x83c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
100018bc:	00027900 	call	10002790 <UsbSetConfig>
		usleep(10*1000);
100018c0:	0109c404 	movi	r4,10000
100018c4:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100018c8:	010000c4 	movi	r4,3
100018cc:	00010240 	call	10001024 <IO_read>
100018d0:	10bfffcc 	andi	r2,r2,65535
100018d4:	1080040c 	andi	r2,r2,16
100018d8:	103ff826 	beq	r2,zero,100018bc <main+0x830>
	}

	UsbWaitTDListDone();
100018dc:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100018e0:	01414184 	movi	r5,1286
100018e4:	01000084 	movi	r4,2
100018e8:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
100018ec:	0009883a 	mov	r4,zero
100018f0:	00010240 	call	10001024 <IO_read>
100018f4:	10bfffcc 	andi	r2,r2,65535
100018f8:	100b883a 	mov	r5,r2
100018fc:	01040074 	movhi	r4,4097
10001900:	21092804 	addi	r4,r4,9376
10001904:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
10001908:	01414204 	movi	r5,1288
1000190c:	01000084 	movi	r4,2
10001910:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001914:	0009883a 	mov	r4,zero
10001918:	00010240 	call	10001024 <IO_read>
1000191c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10001920:	e0bfff8b 	ldhu	r2,-2(fp)
10001924:	100b883a 	mov	r5,r2
10001928:	01040074 	movhi	r4,4097
1000192c:	21093304 	addi	r4,r4,9420
10001930:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
10001934:	e0bfff8b 	ldhu	r2,-2(fp)
10001938:	108000e0 	cmpeqi	r2,r2,3
1000193c:	1000061e 	bne	r2,zero,10001958 <main+0x8cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001940:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
10001944:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001948:	01040074 	movhi	r4,4097
1000194c:	21088004 	addi	r4,r4,8704
10001950:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
10001954:	003dd806 	br	100010b8 <main+0x2c>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10001958:	01040074 	movhi	r4,4097
1000195c:	21093f04 	addi	r4,r4,9468
10001960:	00032300 	call	10003230 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10001964:	00028900 	call	10002890 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001968:	00000306 	br	10001978 <main+0x8ec>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
1000196c:	00028900 	call	10002890 <UsbClassRequest>
		usleep(10*1000);
10001970:	0109c404 	movi	r4,10000
10001974:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001978:	010000c4 	movi	r4,3
1000197c:	00010240 	call	10001024 <IO_read>
10001980:	10bfffcc 	andi	r2,r2,65535
10001984:	1080040c 	andi	r2,r2,16
10001988:	103ff826 	beq	r2,zero,1000196c <main+0x8e0>
	}

	UsbWaitTDListDone();
1000198c:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001990:	01414184 	movi	r5,1286
10001994:	01000084 	movi	r4,2
10001998:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000199c:	0009883a 	mov	r4,zero
100019a0:	00010240 	call	10001024 <IO_read>
100019a4:	10bfffcc 	andi	r2,r2,65535
100019a8:	100b883a 	mov	r5,r2
100019ac:	01040074 	movhi	r4,4097
100019b0:	21095104 	addi	r4,r4,9540
100019b4:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
100019b8:	01414204 	movi	r5,1288
100019bc:	01000084 	movi	r4,2
100019c0:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100019c4:	0009883a 	mov	r4,zero
100019c8:	00010240 	call	10001024 <IO_read>
100019cc:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100019d0:	e0bfff8b 	ldhu	r2,-2(fp)
100019d4:	100b883a 	mov	r5,r2
100019d8:	01040074 	movhi	r4,4097
100019dc:	21095c04 	addi	r4,r4,9584
100019e0:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
100019e4:	e0bfff8b 	ldhu	r2,-2(fp)
100019e8:	108000e0 	cmpeqi	r2,r2,3
100019ec:	1000061e 	bne	r2,zero,10001a08 <main+0x97c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100019f0:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
100019f4:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100019f8:	01040074 	movhi	r4,4097
100019fc:	21088004 	addi	r4,r4,8704
10001a00:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
10001a04:	003dac06 	br	100010b8 <main+0x2c>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10001a08:	01040074 	movhi	r4,4097
10001a0c:	21096804 	addi	r4,r4,9632
10001a10:	00032300 	call	10003230 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10001a14:	00029900 	call	10002990 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001a18:	00000306 	br	10001a28 <main+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10001a1c:	00029900 	call	10002990 <UsbGetHidDesc>
		usleep(10*1000);
10001a20:	0109c404 	movi	r4,10000
10001a24:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001a28:	010000c4 	movi	r4,3
10001a2c:	00010240 	call	10001024 <IO_read>
10001a30:	10bfffcc 	andi	r2,r2,65535
10001a34:	1080040c 	andi	r2,r2,16
10001a38:	103ff826 	beq	r2,zero,10001a1c <main+0x990>
	}

	UsbWaitTDListDone();
10001a3c:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001a40:	01414184 	movi	r5,1286
10001a44:	01000084 	movi	r4,2
10001a48:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001a4c:	0009883a 	mov	r4,zero
10001a50:	00010240 	call	10001024 <IO_read>
10001a54:	10bfffcc 	andi	r2,r2,65535
10001a58:	100b883a 	mov	r5,r2
10001a5c:	01040074 	movhi	r4,4097
10001a60:	21095104 	addi	r4,r4,9540
10001a64:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
10001a68:	01414204 	movi	r5,1288
10001a6c:	01000084 	movi	r4,2
10001a70:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001a74:	0009883a 	mov	r4,zero
10001a78:	00010240 	call	10001024 <IO_read>
10001a7c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001a80:	e0bfff8b 	ldhu	r2,-2(fp)
10001a84:	100b883a 	mov	r5,r2
10001a88:	01040074 	movhi	r4,4097
10001a8c:	21095c04 	addi	r4,r4,9584
10001a90:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
10001a94:	e0bfff8b 	ldhu	r2,-2(fp)
10001a98:	108000e0 	cmpeqi	r2,r2,3
10001a9c:	1000061e 	bne	r2,zero,10001ab8 <main+0xa2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001aa0:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
10001aa4:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001aa8:	01040074 	movhi	r4,4097
10001aac:	21088004 	addi	r4,r4,8704
10001ab0:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
10001ab4:	003d8006 	br	100010b8 <main+0x2c>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10001ab8:	01040074 	movhi	r4,4097
10001abc:	21097a04 	addi	r4,r4,9704
10001ac0:	00032300 	call	10003230 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10001ac4:	0002ad80 	call	10002ad8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001ac8:	00000306 	br	10001ad8 <main+0xa4c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10001acc:	0002ad80 	call	10002ad8 <UsbGetReportDesc>
		usleep(10*1000);
10001ad0:	0109c404 	movi	r4,10000
10001ad4:	000fe580 	call	1000fe58 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001ad8:	010000c4 	movi	r4,3
10001adc:	00010240 	call	10001024 <IO_read>
10001ae0:	10bfffcc 	andi	r2,r2,65535
10001ae4:	1080040c 	andi	r2,r2,16
10001ae8:	103ff826 	beq	r2,zero,10001acc <main+0xa40>
	}

	UsbWaitTDListDone();
10001aec:	0002e180 	call	10002e18 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001af0:	01414184 	movi	r5,1286
10001af4:	01000084 	movi	r4,2
10001af8:	0000fb00 	call	10000fb0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001afc:	0009883a 	mov	r4,zero
10001b00:	00010240 	call	10001024 <IO_read>
10001b04:	10bfffcc 	andi	r2,r2,65535
10001b08:	100b883a 	mov	r5,r2
10001b0c:	01040074 	movhi	r4,4097
10001b10:	21098e04 	addi	r4,r4,9784
10001b14:	000312c0 	call	1000312c <printf>

	IO_write(HPI_ADDR,0x0508);
10001b18:	01414204 	movi	r5,1288
10001b1c:	01000084 	movi	r4,2
10001b20:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001b24:	0009883a 	mov	r4,zero
10001b28:	00010240 	call	10001024 <IO_read>
10001b2c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10001b30:	e0bfff8b 	ldhu	r2,-2(fp)
10001b34:	100b883a 	mov	r5,r2
10001b38:	01040074 	movhi	r4,4097
10001b3c:	21099a04 	addi	r4,r4,9832
10001b40:	000312c0 	call	1000312c <printf>
	while (usb_ctl_val != 0x03)
10001b44:	e0bfff8b 	ldhu	r2,-2(fp)
10001b48:	108000e0 	cmpeqi	r2,r2,3
10001b4c:	1000061e 	bne	r2,zero,10001b68 <main+0xadc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001b50:	0002e9c0 	call	10002e9c <UsbGetRetryCnt>
10001b54:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001b58:	01040074 	movhi	r4,4097
10001b5c:	21088004 	addi	r4,r4,8704
10001b60:	00032300 	call	10003230 <puts>
		goto USB_HOT_PLUG;
10001b64:	003d5406 	br	100010b8 <main+0x2c>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10001b68:	01040074 	movhi	r4,4097
10001b6c:	2109a604 	addi	r4,r4,9880
10001b70:	00032300 	call	10003230 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10001b74:	0109c404 	movi	r4,10000
10001b78:	000fe580 	call	1000fe58 <usleep>
	while(1)
	{
		toggle++;
10001b7c:	e0bfff43 	ldbu	r2,-3(fp)
10001b80:	10800044 	addi	r2,r2,1
10001b84:	e0bfff45 	stb	r2,-3(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10001b88:	01414004 	movi	r5,1280
10001b8c:	01000084 	movi	r4,2
10001b90:	0000fb00 	call	10000fb0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001b94:	01414704 	movi	r5,1308
10001b98:	0009883a 	mov	r4,zero
10001b9c:	0000fb00 	call	10000fb0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001ba0:	e0bffbc3 	ldbu	r2,-17(fp)
10001ba4:	108003cc 	andi	r2,r2,15
10001ba8:	100b883a 	mov	r5,r2
10001bac:	0009883a 	mov	r4,zero
10001bb0:	0000fb00 	call	10000fb0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001bb4:	0140a444 	movi	r5,657
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	0000fb00 	call	10000fb0 <IO_write>
		if(toggle%2)
10001bc0:	e0bfff43 	ldbu	r2,-3(fp)
10001bc4:	1080004c 	andi	r2,r2,1
10001bc8:	10803fcc 	andi	r2,r2,255
10001bcc:	10000426 	beq	r2,zero,10001be0 <main+0xb54>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10001bd0:	01400044 	movi	r5,1
10001bd4:	0009883a 	mov	r4,zero
10001bd8:	0000fb00 	call	10000fb0 <IO_write>
10001bdc:	00000306 	br	10001bec <main+0xb60>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10001be0:	01401044 	movi	r5,65
10001be4:	0009883a 	mov	r4,zero
10001be8:	0000fb00 	call	10000fb0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10001bec:	014004c4 	movi	r5,19
10001bf0:	0009883a 	mov	r4,zero
10001bf4:	0000fb00 	call	10000fb0 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10001bf8:	000b883a 	mov	r5,zero
10001bfc:	0009883a 	mov	r4,zero
10001c00:	0000fb00 	call	10000fb0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c04:	01414004 	movi	r5,1280
10001c08:	01006c04 	movi	r4,432
10001c0c:	0001e240 	call	10001e24 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001c10:	00002406 	br	10001ca4 <main+0xc18>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001c14:	01414004 	movi	r5,1280
10001c18:	01000084 	movi	r4,2
10001c1c:	0000fb00 	call	10000fb0 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10001c20:	01414704 	movi	r5,1308
10001c24:	0009883a 	mov	r4,zero
10001c28:	0000fb00 	call	10000fb0 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001c2c:	e0bffbc3 	ldbu	r2,-17(fp)
10001c30:	108003cc 	andi	r2,r2,15
10001c34:	100b883a 	mov	r5,r2
10001c38:	0009883a 	mov	r4,zero
10001c3c:	0000fb00 	call	10000fb0 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001c40:	0140a444 	movi	r5,657
10001c44:	0009883a 	mov	r4,zero
10001c48:	0000fb00 	call	10000fb0 <IO_write>
			if(toggle%2)
10001c4c:	e0bfff43 	ldbu	r2,-3(fp)
10001c50:	1080004c 	andi	r2,r2,1
10001c54:	10803fcc 	andi	r2,r2,255
10001c58:	10000426 	beq	r2,zero,10001c6c <main+0xbe0>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001c5c:	01400044 	movi	r5,1
10001c60:	0009883a 	mov	r4,zero
10001c64:	0000fb00 	call	10000fb0 <IO_write>
10001c68:	00000306 	br	10001c78 <main+0xbec>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001c6c:	01401044 	movi	r5,65
10001c70:	0009883a 	mov	r4,zero
10001c74:	0000fb00 	call	10000fb0 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001c78:	014004c4 	movi	r5,19
10001c7c:	0009883a 	mov	r4,zero
10001c80:	0000fb00 	call	10000fb0 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001c84:	000b883a 	mov	r5,zero
10001c88:	0009883a 	mov	r4,zero
10001c8c:	0000fb00 	call	10000fb0 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c90:	01414004 	movi	r5,1280
10001c94:	01006c04 	movi	r4,432
10001c98:	0001e240 	call	10001e24 <UsbWrite>
			usleep(10*1000);
10001c9c:	0109c404 	movi	r4,10000
10001ca0:	000fe580 	call	1000fe58 <usleep>
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001ca4:	010000c4 	movi	r4,3
10001ca8:	00010240 	call	10001024 <IO_read>
10001cac:	10bfffcc 	andi	r2,r2,65535
10001cb0:	1080040c 	andi	r2,r2,16
10001cb4:	103fd726 	beq	r2,zero,10001c14 <main+0xb88>
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10001cb8:	0002e180 	call	10002e18 <UsbWaitTDListDone>
10001cbc:	e0bfff8d 	sth	r2,-2(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10001cc0:	01014784 	movi	r4,1310
10001cc4:	0001e800 	call	10001e80 <UsbRead>
10001cc8:	10bfffcc 	andi	r2,r2,65535
10001ccc:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10001cd0:	e17ffd17 	ldw	r5,-12(fp)
10001cd4:	01040074 	movhi	r4,4097
10001cd8:	2109ba04 	addi	r4,r4,9960
10001cdc:	000312c0 	call	1000312c <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		// *keycode_base = keycode & 0xff;

		usleep(200);//usleep(5000);
10001ce0:	01003204 	movi	r4,200
10001ce4:	000fe580 	call	1000fe58 <usleep>

		// TODO Core game logic can be written here.

		usb_ctl_val = UsbRead(ctl_reg);
10001ce8:	d0a8960b 	ldhu	r2,-23976(gp)
10001cec:	10bfffcc 	andi	r2,r2,65535
10001cf0:	1009883a 	mov	r4,r2
10001cf4:	0001e800 	call	10001e80 <UsbRead>
10001cf8:	e0bfff8d 	sth	r2,-2(fp)

		if(!(usb_ctl_val & no_device))
10001cfc:	d0a8968b 	ldhu	r2,-23974(gp)
10001d00:	e0ffff8b 	ldhu	r3,-2(fp)
10001d04:	1884703a 	and	r2,r3,r2
10001d08:	10bfffcc 	andi	r2,r2,65535
10001d0c:	10003f1e 	bne	r2,zero,10001e0c <main+0xd80>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001d10:	e03fff05 	stb	zero,-4(fp)
10001d14:	00000f06 	br	10001d54 <main+0xcc8>
			{
				usleep(5*1000);
10001d18:	0104e204 	movi	r4,5000
10001d1c:	000fe580 	call	1000fe58 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001d20:	d0a8960b 	ldhu	r2,-23976(gp)
10001d24:	10bfffcc 	andi	r2,r2,65535
10001d28:	1009883a 	mov	r4,r2
10001d2c:	0001e800 	call	10001e80 <UsbRead>
10001d30:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device) break;
10001d34:	d0a8968b 	ldhu	r2,-23974(gp)
10001d38:	e0ffff8b 	ldhu	r3,-2(fp)
10001d3c:	1884703a 	and	r2,r3,r2
10001d40:	10bfffcc 	andi	r2,r2,65535
10001d44:	1000071e 	bne	r2,zero,10001d64 <main+0xcd8>
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001d48:	e0bfff03 	ldbu	r2,-4(fp)
10001d4c:	10800044 	addi	r2,r2,1
10001d50:	e0bfff05 	stb	r2,-4(fp)
10001d54:	e0bfff03 	ldbu	r2,-4(fp)
10001d58:	108001f0 	cmpltui	r2,r2,7
10001d5c:	103fee1e 	bne	r2,zero,10001d18 <main+0xc8c>
10001d60:	00000106 	br	10001d68 <main+0xcdc>
				if(usb_ctl_val & no_device) break;
10001d64:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001d68:	d0a8968b 	ldhu	r2,-23974(gp)
10001d6c:	e0ffff8b 	ldhu	r3,-2(fp)
10001d70:	1884703a 	and	r2,r3,r2
10001d74:	10bfffcc 	andi	r2,r2,65535
10001d78:	1000241e 	bne	r2,zero,10001e0c <main+0xd80>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001d7c:	01040074 	movhi	r4,4097
10001d80:	2109c304 	addi	r4,r4,9996
10001d84:	00032300 	call	10003230 <puts>
				printf("[INFO]: please insert again!!! \n");
10001d88:	01040074 	movhi	r4,4097
10001d8c:	2109ce04 	addi	r4,r4,10040
10001d90:	00032300 	call	10003230 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001d94:	00001d06 	br	10001e0c <main+0xd80>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001d98:	d0a8960b 	ldhu	r2,-23976(gp)
10001d9c:	10bfffcc 	andi	r2,r2,65535
10001da0:	1009883a 	mov	r4,r2
10001da4:	0001e800 	call	10001e80 <UsbRead>
10001da8:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001dac:	0104e204 	movi	r4,5000
10001db0:	000fe580 	call	1000fe58 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001db4:	d0a8960b 	ldhu	r2,-23976(gp)
10001db8:	10bfffcc 	andi	r2,r2,65535
10001dbc:	1009883a 	mov	r4,r2
10001dc0:	0001e800 	call	10001e80 <UsbRead>
10001dc4:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001dc8:	0104e204 	movi	r4,5000
10001dcc:	000fe580 	call	1000fe58 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001dd0:	d0a8960b 	ldhu	r2,-23976(gp)
10001dd4:	10bfffcc 	andi	r2,r2,65535
10001dd8:	1009883a 	mov	r4,r2
10001ddc:	0001e800 	call	10001e80 <UsbRead>
10001de0:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001de4:	0104e204 	movi	r4,5000
10001de8:	000fe580 	call	1000fe58 <usleep>

			if(usb_ctl_val & no_device)
10001dec:	d0a8968b 	ldhu	r2,-23974(gp)
10001df0:	e0ffff8b 	ldhu	r3,-2(fp)
10001df4:	1884703a 	and	r2,r3,r2
10001df8:	10bfffcc 	andi	r2,r2,65535
10001dfc:	10000126 	beq	r2,zero,10001e04 <main+0xd78>
				goto USB_HOT_PLUG;
10001e00:	003cad06 	br	100010b8 <main+0x2c>

			usleep(200);
10001e04:	01003204 	movi	r4,200
10001e08:	000fe580 	call	1000fe58 <usleep>
		while (!(usb_ctl_val & no_device))
10001e0c:	d0a8968b 	ldhu	r2,-23974(gp)
10001e10:	e0ffff8b 	ldhu	r3,-2(fp)
10001e14:	1884703a 	and	r2,r3,r2
10001e18:	10bfffcc 	andi	r2,r2,65535
10001e1c:	103fde26 	beq	r2,zero,10001d98 <main+0xd0c>
		toggle++;
10001e20:	003f5606 	br	10001b7c <main+0xaf0>

10001e24 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001e24:	defffc04 	addi	sp,sp,-16
10001e28:	dfc00315 	stw	ra,12(sp)
10001e2c:	df000215 	stw	fp,8(sp)
10001e30:	df000204 	addi	fp,sp,8
10001e34:	2005883a 	mov	r2,r4
10001e38:	2807883a 	mov	r3,r5
10001e3c:	e0bfff0d 	sth	r2,-4(fp)
10001e40:	1805883a 	mov	r2,r3
10001e44:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001e48:	e0bfff0b 	ldhu	r2,-4(fp)
10001e4c:	100b883a 	mov	r5,r2
10001e50:	01000084 	movi	r4,2
10001e54:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA, Data);
10001e58:	e0bffe0b 	ldhu	r2,-8(fp)
10001e5c:	100b883a 	mov	r5,r2
10001e60:	0009883a 	mov	r4,zero
10001e64:	0000fb00 	call	10000fb0 <IO_write>
}
10001e68:	0001883a 	nop
10001e6c:	e037883a 	mov	sp,fp
10001e70:	dfc00117 	ldw	ra,4(sp)
10001e74:	df000017 	ldw	fp,0(sp)
10001e78:	dec00204 	addi	sp,sp,8
10001e7c:	f800283a 	ret

10001e80 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001e80:	defffd04 	addi	sp,sp,-12
10001e84:	dfc00215 	stw	ra,8(sp)
10001e88:	df000115 	stw	fp,4(sp)
10001e8c:	df000104 	addi	fp,sp,4
10001e90:	2005883a 	mov	r2,r4
10001e94:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001e98:	e0bfff0b 	ldhu	r2,-4(fp)
10001e9c:	100b883a 	mov	r5,r2
10001ea0:	01000084 	movi	r4,2
10001ea4:	0000fb00 	call	10000fb0 <IO_write>
	return IO_read(HPI_DATA);
10001ea8:	0009883a 	mov	r4,zero
10001eac:	00010240 	call	10001024 <IO_read>
}
10001eb0:	e037883a 	mov	sp,fp
10001eb4:	dfc00117 	ldw	ra,4(sp)
10001eb8:	df000017 	ldw	fp,0(sp)
10001ebc:	dec00204 	addi	sp,sp,8
10001ec0:	f800283a 	ret

10001ec4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001ec4:	defffe04 	addi	sp,sp,-8
10001ec8:	dfc00115 	stw	ra,4(sp)
10001ecc:	df000015 	stw	fp,0(sp)
10001ed0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001ed4:	017e9414 	movui	r5,64080
10001ed8:	01000044 	movi	r4,1
10001edc:	0000fb00 	call	10000fb0 <IO_write>
	usleep(100000);
10001ee0:	010000b4 	movhi	r4,2
10001ee4:	2121a804 	addi	r4,r4,-31072
10001ee8:	000fe580 	call	1000fe58 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001eec:	01040074 	movhi	r4,4097
10001ef0:	2109d604 	addi	r4,r4,10072
10001ef4:	00032300 	call	10003230 <puts>

	usleep(500000);
10001ef8:	01000234 	movhi	r4,8
10001efc:	21284804 	addi	r4,r4,-24288
10001f00:	000fe580 	call	1000fe58 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001f04:	01040074 	movhi	r4,4097
10001f08:	2109dd04 	addi	r4,r4,10100
10001f0c:	00032300 	call	10003230 <puts>
	IO_read(HPI_MAILBOX);
10001f10:	01000044 	movi	r4,1
10001f14:	00010240 	call	10001024 <IO_read>
	IO_read(HPI_STATUS);
10001f18:	010000c4 	movi	r4,3
10001f1c:	00010240 	call	10001024 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001f20:	01005104 	movi	r4,324
10001f24:	0001e800 	call	10001e80 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001f28:	000b883a 	mov	r5,zero
10001f2c:	01005104 	movi	r4,324
10001f30:	0001e240 	call	10001e24 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001f34:	01005204 	movi	r4,328
10001f38:	0001e800 	call	10001e80 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001f3c:	000b883a 	mov	r5,zero
10001f40:	01005204 	movi	r4,328
10001f44:	0001e240 	call	10001e24 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001f48:	017fffd4 	movui	r5,65535
10001f4c:	01302414 	movui	r4,49296
10001f50:	0001e240 	call	10001e24 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001f54:	017fffd4 	movui	r5,65535
10001f58:	01302c14 	movui	r4,49328
10001f5c:	0001e240 	call	10001e24 <UsbWrite>
}
10001f60:	0001883a 	nop
10001f64:	e037883a 	mov	sp,fp
10001f68:	dfc00117 	ldw	ra,4(sp)
10001f6c:	df000017 	ldw	fp,0(sp)
10001f70:	dec00204 	addi	sp,sp,8
10001f74:	f800283a 	ret

10001f78 <UsbSetAddress>:


void UsbSetAddress()
{
10001f78:	defffe04 	addi	sp,sp,-8
10001f7c:	dfc00115 	stw	ra,4(sp)
10001f80:	df000015 	stw	fp,0(sp)
10001f84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f88:	01414004 	movi	r5,1280
10001f8c:	01000084 	movi	r4,2
10001f90:	0000fb00 	call	10000fb0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001f94:	01414304 	movi	r5,1292
10001f98:	0009883a 	mov	r4,zero
10001f9c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001fa0:	01400204 	movi	r5,8
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	0000fb00 	call	10000fb0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001fac:	01403404 	movi	r5,208
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001fb8:	01400044 	movi	r5,1
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001fc4:	014004c4 	movi	r5,19
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001fd0:	01414504 	movi	r5,1300
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	0000fb00 	call	10000fb0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001fdc:	01414004 	movi	r5,1280
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001fe8:	01400084 	movi	r5,2
10001fec:	0009883a 	mov	r4,zero
10001ff0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ff4:	000b883a 	mov	r5,zero
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002000:	000b883a 	mov	r5,zero
10002004:	0009883a 	mov	r4,zero
10002008:	0000fb00 	call	10000fb0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
1000200c:	000b883a 	mov	r5,zero
10002010:	0009883a 	mov	r4,zero
10002014:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002018:	000b883a 	mov	r5,zero
1000201c:	0009883a 	mov	r4,zero
10002020:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002024:	01402404 	movi	r5,144
10002028:	0009883a 	mov	r4,zero
1000202c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002030:	01401044 	movi	r5,65
10002034:	0009883a 	mov	r4,zero
10002038:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000203c:	014004c4 	movi	r5,19
10002040:	0009883a 	mov	r4,zero
10002044:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002048:	000b883a 	mov	r5,zero
1000204c:	0009883a 	mov	r4,zero
10002050:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002054:	01414004 	movi	r5,1280
10002058:	01006c04 	movi	r4,432
1000205c:	0001e240 	call	10001e24 <UsbWrite>
}
10002060:	0001883a 	nop
10002064:	e037883a 	mov	sp,fp
10002068:	dfc00117 	ldw	ra,4(sp)
1000206c:	df000017 	ldw	fp,0(sp)
10002070:	dec00204 	addi	sp,sp,8
10002074:	f800283a 	ret

10002078 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002078:	defffe04 	addi	sp,sp,-8
1000207c:	dfc00115 	stw	ra,4(sp)
10002080:	df000015 	stw	fp,0(sp)
10002084:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002088:	01414004 	movi	r5,1280
1000208c:	01000084 	movi	r4,2
10002090:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002094:	01414304 	movi	r5,1292
10002098:	0009883a 	mov	r4,zero
1000209c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020a0:	01400204 	movi	r5,8
100020a4:	0009883a 	mov	r4,zero
100020a8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100020ac:	0140b404 	movi	r5,720
100020b0:	0009883a 	mov	r4,zero
100020b4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100020b8:	01400044 	movi	r5,1
100020bc:	0009883a 	mov	r4,zero
100020c0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100020c4:	014004c4 	movi	r5,19
100020c8:	0009883a 	mov	r4,zero
100020cc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100020d0:	01414504 	movi	r5,1300
100020d4:	0009883a 	mov	r4,zero
100020d8:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100020dc:	0141a004 	movi	r5,1664
100020e0:	0009883a 	mov	r4,zero
100020e4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100020e8:	01404004 	movi	r5,256
100020ec:	0009883a 	mov	r4,zero
100020f0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100020f4:	000b883a 	mov	r5,zero
100020f8:	0009883a 	mov	r4,zero
100020fc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002100:	01400204 	movi	r5,8
10002104:	0009883a 	mov	r4,zero
10002108:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
1000210c:	01414b04 	movi	r5,1324
10002110:	0009883a 	mov	r4,zero
10002114:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002118:	01400204 	movi	r5,8
1000211c:	0009883a 	mov	r4,zero
10002120:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002124:	0140a404 	movi	r5,656
10002128:	0009883a 	mov	r4,zero
1000212c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002130:	01401044 	movi	r5,65
10002134:	0009883a 	mov	r4,zero
10002138:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000213c:	014004c4 	movi	r5,19
10002140:	0009883a 	mov	r4,zero
10002144:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002148:	01414804 	movi	r5,1312
1000214c:	0009883a 	mov	r4,zero
10002150:	0000fb00 	call	10000fb0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002154:	000b883a 	mov	r5,zero
10002158:	0009883a 	mov	r4,zero
1000215c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002160:	000b883a 	mov	r5,zero
10002164:	0009883a 	mov	r4,zero
10002168:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
1000216c:	01408404 	movi	r5,528
10002170:	0009883a 	mov	r4,zero
10002174:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002178:	01401044 	movi	r5,65
1000217c:	0009883a 	mov	r4,zero
10002180:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002184:	014004c4 	movi	r5,19
10002188:	0009883a 	mov	r4,zero
1000218c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002190:	000b883a 	mov	r5,zero
10002194:	0009883a 	mov	r4,zero
10002198:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000219c:	01414004 	movi	r5,1280
100021a0:	01006c04 	movi	r4,432
100021a4:	0001e240 	call	10001e24 <UsbWrite>
}
100021a8:	0001883a 	nop
100021ac:	e037883a 	mov	sp,fp
100021b0:	dfc00117 	ldw	ra,4(sp)
100021b4:	df000017 	ldw	fp,0(sp)
100021b8:	dec00204 	addi	sp,sp,8
100021bc:	f800283a 	ret

100021c0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100021c0:	defffe04 	addi	sp,sp,-8
100021c4:	dfc00115 	stw	ra,4(sp)
100021c8:	df000015 	stw	fp,0(sp)
100021cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100021d0:	01414004 	movi	r5,1280
100021d4:	01000084 	movi	r4,2
100021d8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100021dc:	01414304 	movi	r5,1292
100021e0:	0009883a 	mov	r4,zero
100021e4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100021e8:	01400204 	movi	r5,8
100021ec:	0009883a 	mov	r4,zero
100021f0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100021f4:	0140b404 	movi	r5,720
100021f8:	0009883a 	mov	r4,zero
100021fc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002200:	01400044 	movi	r5,1
10002204:	0009883a 	mov	r4,zero
10002208:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000220c:	014004c4 	movi	r5,19
10002210:	0009883a 	mov	r4,zero
10002214:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002218:	01414504 	movi	r5,1300
1000221c:	0009883a 	mov	r4,zero
10002220:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002224:	0141a004 	movi	r5,1664
10002228:	0009883a 	mov	r4,zero
1000222c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002230:	01404004 	movi	r5,256
10002234:	0009883a 	mov	r4,zero
10002238:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000223c:	000b883a 	mov	r5,zero
10002240:	0009883a 	mov	r4,zero
10002244:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002248:	01400484 	movi	r5,18
1000224c:	0009883a 	mov	r4,zero
10002250:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002254:	01415104 	movi	r5,1348
10002258:	0009883a 	mov	r4,zero
1000225c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002260:	01400204 	movi	r5,8
10002264:	0009883a 	mov	r4,zero
10002268:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000226c:	0140a404 	movi	r5,656
10002270:	0009883a 	mov	r4,zero
10002274:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002278:	01401044 	movi	r5,65
1000227c:	0009883a 	mov	r4,zero
10002280:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002284:	014004c4 	movi	r5,19
10002288:	0009883a 	mov	r4,zero
1000228c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002290:	01414804 	movi	r5,1312
10002294:	0009883a 	mov	r4,zero
10002298:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000229c:	01415304 	movi	r5,1356
100022a0:	0009883a 	mov	r4,zero
100022a4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100022a8:	01400204 	movi	r5,8
100022ac:	0009883a 	mov	r4,zero
100022b0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100022b4:	0140a404 	movi	r5,656
100022b8:	0009883a 	mov	r4,zero
100022bc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100022c0:	01400044 	movi	r5,1
100022c4:	0009883a 	mov	r4,zero
100022c8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100022cc:	014004c4 	movi	r5,19
100022d0:	0009883a 	mov	r4,zero
100022d4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100022d8:	01414b04 	movi	r5,1324
100022dc:	0009883a 	mov	r4,zero
100022e0:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100022e4:	01415504 	movi	r5,1364
100022e8:	0009883a 	mov	r4,zero
100022ec:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100022f0:	01400084 	movi	r5,2
100022f4:	0009883a 	mov	r4,zero
100022f8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100022fc:	0140a404 	movi	r5,656
10002300:	0009883a 	mov	r4,zero
10002304:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002308:	01401044 	movi	r5,65
1000230c:	0009883a 	mov	r4,zero
10002310:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002314:	014004c4 	movi	r5,19
10002318:	0009883a 	mov	r4,zero
1000231c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002320:	01414e04 	movi	r5,1336
10002324:	0009883a 	mov	r4,zero
10002328:	0000fb00 	call	10000fb0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
1000232c:	000b883a 	mov	r5,zero
10002330:	0009883a 	mov	r4,zero
10002334:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002338:	000b883a 	mov	r5,zero
1000233c:	0009883a 	mov	r4,zero
10002340:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002344:	01408404 	movi	r5,528
10002348:	0009883a 	mov	r4,zero
1000234c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10002350:	01401044 	movi	r5,65
10002354:	0009883a 	mov	r4,zero
10002358:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000235c:	014004c4 	movi	r5,19
10002360:	0009883a 	mov	r4,zero
10002364:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002368:	000b883a 	mov	r5,zero
1000236c:	0009883a 	mov	r4,zero
10002370:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002374:	01414004 	movi	r5,1280
10002378:	01006c04 	movi	r4,432
1000237c:	0001e240 	call	10001e24 <UsbWrite>
}
10002380:	0001883a 	nop
10002384:	e037883a 	mov	sp,fp
10002388:	dfc00117 	ldw	ra,4(sp)
1000238c:	df000017 	ldw	fp,0(sp)
10002390:	dec00204 	addi	sp,sp,8
10002394:	f800283a 	ret

10002398 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10002398:	defffe04 	addi	sp,sp,-8
1000239c:	dfc00115 	stw	ra,4(sp)
100023a0:	df000015 	stw	fp,0(sp)
100023a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100023a8:	01414004 	movi	r5,1280
100023ac:	01000084 	movi	r4,2
100023b0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100023b4:	01414304 	movi	r5,1292
100023b8:	0009883a 	mov	r4,zero
100023bc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100023c0:	01400204 	movi	r5,8
100023c4:	0009883a 	mov	r4,zero
100023c8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100023cc:	0140b404 	movi	r5,720
100023d0:	0009883a 	mov	r4,zero
100023d4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100023d8:	01400044 	movi	r5,1
100023dc:	0009883a 	mov	r4,zero
100023e0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100023e4:	014004c4 	movi	r5,19
100023e8:	0009883a 	mov	r4,zero
100023ec:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100023f0:	01414504 	movi	r5,1300
100023f4:	0009883a 	mov	r4,zero
100023f8:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100023fc:	0141a004 	movi	r5,1664
10002400:	0009883a 	mov	r4,zero
10002404:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002408:	01408004 	movi	r5,512
1000240c:	0009883a 	mov	r4,zero
10002410:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002414:	000b883a 	mov	r5,zero
10002418:	0009883a 	mov	r4,zero
1000241c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002420:	01400244 	movi	r5,9
10002424:	0009883a 	mov	r4,zero
10002428:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000242c:	01415104 	movi	r5,1348
10002430:	0009883a 	mov	r4,zero
10002434:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002438:	01400204 	movi	r5,8
1000243c:	0009883a 	mov	r4,zero
10002440:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002444:	0140a404 	movi	r5,656
10002448:	0009883a 	mov	r4,zero
1000244c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002450:	01401044 	movi	r5,65
10002454:	0009883a 	mov	r4,zero
10002458:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000245c:	014004c4 	movi	r5,19
10002460:	0009883a 	mov	r4,zero
10002464:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002468:	01414804 	movi	r5,1312
1000246c:	0009883a 	mov	r4,zero
10002470:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002474:	01415304 	movi	r5,1356
10002478:	0009883a 	mov	r4,zero
1000247c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10002480:	01400044 	movi	r5,1
10002484:	0009883a 	mov	r4,zero
10002488:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000248c:	0140a404 	movi	r5,656
10002490:	0009883a 	mov	r4,zero
10002494:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002498:	01400044 	movi	r5,1
1000249c:	0009883a 	mov	r4,zero
100024a0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100024a4:	014004c4 	movi	r5,19
100024a8:	0009883a 	mov	r4,zero
100024ac:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100024b0:	01414b04 	movi	r5,1324
100024b4:	0009883a 	mov	r4,zero
100024b8:	0000fb00 	call	10000fb0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100024bc:	000b883a 	mov	r5,zero
100024c0:	0009883a 	mov	r4,zero
100024c4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100024c8:	000b883a 	mov	r5,zero
100024cc:	0009883a 	mov	r4,zero
100024d0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100024d4:	01408404 	movi	r5,528
100024d8:	0009883a 	mov	r4,zero
100024dc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100024e0:	01401044 	movi	r5,65
100024e4:	0009883a 	mov	r4,zero
100024e8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100024ec:	014004c4 	movi	r5,19
100024f0:	0009883a 	mov	r4,zero
100024f4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100024f8:	000b883a 	mov	r5,zero
100024fc:	0009883a 	mov	r4,zero
10002500:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002504:	01414004 	movi	r5,1280
10002508:	01006c04 	movi	r4,432
1000250c:	0001e240 	call	10001e24 <UsbWrite>
}
10002510:	0001883a 	nop
10002514:	e037883a 	mov	sp,fp
10002518:	dfc00117 	ldw	ra,4(sp)
1000251c:	df000017 	ldw	fp,0(sp)
10002520:	dec00204 	addi	sp,sp,8
10002524:	f800283a 	ret

10002528 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002528:	defffe04 	addi	sp,sp,-8
1000252c:	dfc00115 	stw	ra,4(sp)
10002530:	df000015 	stw	fp,0(sp)
10002534:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002538:	01414004 	movi	r5,1280
1000253c:	01000084 	movi	r4,2
10002540:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002544:	01414304 	movi	r5,1292
10002548:	0009883a 	mov	r4,zero
1000254c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002550:	01400204 	movi	r5,8
10002554:	0009883a 	mov	r4,zero
10002558:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000255c:	0140b404 	movi	r5,720
10002560:	0009883a 	mov	r4,zero
10002564:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002568:	01400044 	movi	r5,1
1000256c:	0009883a 	mov	r4,zero
10002570:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002574:	014004c4 	movi	r5,19
10002578:	0009883a 	mov	r4,zero
1000257c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002580:	01414504 	movi	r5,1300
10002584:	0009883a 	mov	r4,zero
10002588:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000258c:	0141a004 	movi	r5,1664
10002590:	0009883a 	mov	r4,zero
10002594:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002598:	01408004 	movi	r5,512
1000259c:	0009883a 	mov	r4,zero
100025a0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100025a4:	000b883a 	mov	r5,zero
100025a8:	0009883a 	mov	r4,zero
100025ac:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100025b0:	01403fc4 	movi	r5,255
100025b4:	0009883a 	mov	r4,zero
100025b8:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100025bc:	01415704 	movi	r5,1372
100025c0:	0009883a 	mov	r4,zero
100025c4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100025c8:	01400204 	movi	r5,8
100025cc:	0009883a 	mov	r4,zero
100025d0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100025d4:	0140a404 	movi	r5,656
100025d8:	0009883a 	mov	r4,zero
100025dc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100025e0:	01401044 	movi	r5,65
100025e4:	0009883a 	mov	r4,zero
100025e8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100025ec:	014004c4 	movi	r5,19
100025f0:	0009883a 	mov	r4,zero
100025f4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100025f8:	01414804 	movi	r5,1312
100025fc:	0009883a 	mov	r4,zero
10002600:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002604:	01415904 	movi	r5,1380
10002608:	0009883a 	mov	r4,zero
1000260c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002610:	01400204 	movi	r5,8
10002614:	0009883a 	mov	r4,zero
10002618:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000261c:	0140a404 	movi	r5,656
10002620:	0009883a 	mov	r4,zero
10002624:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002628:	01400044 	movi	r5,1
1000262c:	0009883a 	mov	r4,zero
10002630:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002634:	014004c4 	movi	r5,19
10002638:	0009883a 	mov	r4,zero
1000263c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002640:	01414b04 	movi	r5,1324
10002644:	0009883a 	mov	r4,zero
10002648:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
1000264c:	01415b04 	movi	r5,1388
10002650:	0009883a 	mov	r4,zero
10002654:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002658:	01400204 	movi	r5,8
1000265c:	0009883a 	mov	r4,zero
10002660:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002664:	0140a404 	movi	r5,656
10002668:	0009883a 	mov	r4,zero
1000266c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002670:	01401044 	movi	r5,65
10002674:	0009883a 	mov	r4,zero
10002678:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000267c:	014004c4 	movi	r5,19
10002680:	0009883a 	mov	r4,zero
10002684:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002688:	01414e04 	movi	r5,1336
1000268c:	0009883a 	mov	r4,zero
10002690:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10002694:	01415d04 	movi	r5,1396
10002698:	0009883a 	mov	r4,zero
1000269c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100026a0:	01400204 	movi	r5,8
100026a4:	0009883a 	mov	r4,zero
100026a8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100026ac:	0140a404 	movi	r5,656
100026b0:	0009883a 	mov	r4,zero
100026b4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100026b8:	01400044 	movi	r5,1
100026bc:	0009883a 	mov	r4,zero
100026c0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100026c4:	014004c4 	movi	r5,19
100026c8:	0009883a 	mov	r4,zero
100026cc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100026d0:	01415104 	movi	r5,1348
100026d4:	0009883a 	mov	r4,zero
100026d8:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100026dc:	01415f04 	movi	r5,1404
100026e0:	0009883a 	mov	r4,zero
100026e4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100026e8:	01400084 	movi	r5,2
100026ec:	0009883a 	mov	r4,zero
100026f0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100026f4:	0140a404 	movi	r5,656
100026f8:	0009883a 	mov	r4,zero
100026fc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002700:	01401044 	movi	r5,65
10002704:	0009883a 	mov	r4,zero
10002708:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000270c:	014004c4 	movi	r5,19
10002710:	0009883a 	mov	r4,zero
10002714:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002718:	01415404 	movi	r5,1360
1000271c:	0009883a 	mov	r4,zero
10002720:	0000fb00 	call	10000fb0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002724:	000b883a 	mov	r5,zero
10002728:	0009883a 	mov	r4,zero
1000272c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002730:	000b883a 	mov	r5,zero
10002734:	0009883a 	mov	r4,zero
10002738:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
1000273c:	01408404 	movi	r5,528
10002740:	0009883a 	mov	r4,zero
10002744:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002748:	01401044 	movi	r5,65
1000274c:	0009883a 	mov	r4,zero
10002750:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002754:	014004c4 	movi	r5,19
10002758:	0009883a 	mov	r4,zero
1000275c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002760:	000b883a 	mov	r5,zero
10002764:	0009883a 	mov	r4,zero
10002768:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000276c:	01414004 	movi	r5,1280
10002770:	01006c04 	movi	r4,432
10002774:	0001e240 	call	10001e24 <UsbWrite>
}
10002778:	0001883a 	nop
1000277c:	e037883a 	mov	sp,fp
10002780:	dfc00117 	ldw	ra,4(sp)
10002784:	df000017 	ldw	fp,0(sp)
10002788:	dec00204 	addi	sp,sp,8
1000278c:	f800283a 	ret

10002790 <UsbSetConfig>:

void UsbSetConfig()
{
10002790:	defffe04 	addi	sp,sp,-8
10002794:	dfc00115 	stw	ra,4(sp)
10002798:	df000015 	stw	fp,0(sp)
1000279c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100027a0:	01414004 	movi	r5,1280
100027a4:	01000084 	movi	r4,2
100027a8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100027ac:	01414304 	movi	r5,1292
100027b0:	0009883a 	mov	r4,zero
100027b4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100027b8:	01400204 	movi	r5,8
100027bc:	0009883a 	mov	r4,zero
100027c0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100027c4:	0140b404 	movi	r5,720
100027c8:	0009883a 	mov	r4,zero
100027cc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100027d0:	01400044 	movi	r5,1
100027d4:	0009883a 	mov	r4,zero
100027d8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100027dc:	014004c4 	movi	r5,19
100027e0:	0009883a 	mov	r4,zero
100027e4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100027e8:	01414504 	movi	r5,1300
100027ec:	0009883a 	mov	r4,zero
100027f0:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
100027f4:	01424004 	movi	r5,2304
100027f8:	0009883a 	mov	r4,zero
100027fc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10002800:	01400044 	movi	r5,1
10002804:	0009883a 	mov	r4,zero
10002808:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000280c:	000b883a 	mov	r5,zero
10002810:	0009883a 	mov	r4,zero
10002814:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002818:	000b883a 	mov	r5,zero
1000281c:	0009883a 	mov	r4,zero
10002820:	0000fb00 	call	10000fb0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002824:	000b883a 	mov	r5,zero
10002828:	0009883a 	mov	r4,zero
1000282c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002830:	000b883a 	mov	r5,zero
10002834:	0009883a 	mov	r4,zero
10002838:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
1000283c:	0140a404 	movi	r5,656
10002840:	0009883a 	mov	r4,zero
10002844:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002848:	01401044 	movi	r5,65
1000284c:	0009883a 	mov	r4,zero
10002850:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002854:	014004c4 	movi	r5,19
10002858:	0009883a 	mov	r4,zero
1000285c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002860:	000b883a 	mov	r5,zero
10002864:	0009883a 	mov	r4,zero
10002868:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000286c:	01414004 	movi	r5,1280
10002870:	01006c04 	movi	r4,432
10002874:	0001e240 	call	10001e24 <UsbWrite>

}
10002878:	0001883a 	nop
1000287c:	e037883a 	mov	sp,fp
10002880:	dfc00117 	ldw	ra,4(sp)
10002884:	df000017 	ldw	fp,0(sp)
10002888:	dec00204 	addi	sp,sp,8
1000288c:	f800283a 	ret

10002890 <UsbClassRequest>:

void UsbClassRequest()
{
10002890:	defffe04 	addi	sp,sp,-8
10002894:	dfc00115 	stw	ra,4(sp)
10002898:	df000015 	stw	fp,0(sp)
1000289c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100028a0:	01414004 	movi	r5,1280
100028a4:	01000084 	movi	r4,2
100028a8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100028ac:	01414304 	movi	r5,1292
100028b0:	0009883a 	mov	r4,zero
100028b4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100028b8:	01400204 	movi	r5,8
100028bc:	0009883a 	mov	r4,zero
100028c0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100028c4:	0140b404 	movi	r5,720
100028c8:	0009883a 	mov	r4,zero
100028cc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100028d0:	01400044 	movi	r5,1
100028d4:	0009883a 	mov	r4,zero
100028d8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100028dc:	014004c4 	movi	r5,19
100028e0:	0009883a 	mov	r4,zero
100028e4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100028e8:	01414504 	movi	r5,1300
100028ec:	0009883a 	mov	r4,zero
100028f0:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100028f4:	01428844 	movi	r5,2593
100028f8:	0009883a 	mov	r4,zero
100028fc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10002900:	000b883a 	mov	r5,zero
10002904:	0009883a 	mov	r4,zero
10002908:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000290c:	000b883a 	mov	r5,zero
10002910:	0009883a 	mov	r4,zero
10002914:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002918:	000b883a 	mov	r5,zero
1000291c:	0009883a 	mov	r4,zero
10002920:	0000fb00 	call	10000fb0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002924:	000b883a 	mov	r5,zero
10002928:	0009883a 	mov	r4,zero
1000292c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002930:	000b883a 	mov	r5,zero
10002934:	0009883a 	mov	r4,zero
10002938:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
1000293c:	0140a404 	movi	r5,656
10002940:	0009883a 	mov	r4,zero
10002944:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002948:	01401044 	movi	r5,65
1000294c:	0009883a 	mov	r4,zero
10002950:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002954:	014004c4 	movi	r5,19
10002958:	0009883a 	mov	r4,zero
1000295c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002960:	000b883a 	mov	r5,zero
10002964:	0009883a 	mov	r4,zero
10002968:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000296c:	01414004 	movi	r5,1280
10002970:	01006c04 	movi	r4,432
10002974:	0001e240 	call	10001e24 <UsbWrite>
}
10002978:	0001883a 	nop
1000297c:	e037883a 	mov	sp,fp
10002980:	dfc00117 	ldw	ra,4(sp)
10002984:	df000017 	ldw	fp,0(sp)
10002988:	dec00204 	addi	sp,sp,8
1000298c:	f800283a 	ret

10002990 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002990:	defffe04 	addi	sp,sp,-8
10002994:	dfc00115 	stw	ra,4(sp)
10002998:	df000015 	stw	fp,0(sp)
1000299c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100029a0:	01414004 	movi	r5,1280
100029a4:	01000084 	movi	r4,2
100029a8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100029ac:	01414304 	movi	r5,1292
100029b0:	0009883a 	mov	r4,zero
100029b4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100029b8:	01400204 	movi	r5,8
100029bc:	0009883a 	mov	r4,zero
100029c0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100029c4:	0140b404 	movi	r5,720
100029c8:	0009883a 	mov	r4,zero
100029cc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100029d0:	01400044 	movi	r5,1
100029d4:	0009883a 	mov	r4,zero
100029d8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100029dc:	014004c4 	movi	r5,19
100029e0:	0009883a 	mov	r4,zero
100029e4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100029e8:	01414504 	movi	r5,1300
100029ec:	0009883a 	mov	r4,zero
100029f0:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100029f4:	0141a044 	movi	r5,1665
100029f8:	0009883a 	mov	r4,zero
100029fc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10002a00:	01484004 	movi	r5,8448
10002a04:	0009883a 	mov	r4,zero
10002a08:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002a0c:	000b883a 	mov	r5,zero
10002a10:	0009883a 	mov	r4,zero
10002a14:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002a18:	01401ec4 	movi	r5,123
10002a1c:	0009883a 	mov	r4,zero
10002a20:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002a24:	01415104 	movi	r5,1348
10002a28:	0009883a 	mov	r4,zero
10002a2c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002a30:	01400204 	movi	r5,8
10002a34:	0009883a 	mov	r4,zero
10002a38:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002a3c:	0140a404 	movi	r5,656
10002a40:	0009883a 	mov	r4,zero
10002a44:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002a48:	01401044 	movi	r5,65
10002a4c:	0009883a 	mov	r4,zero
10002a50:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002a54:	014004c4 	movi	r5,19
10002a58:	0009883a 	mov	r4,zero
10002a5c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002a60:	01414804 	movi	r5,1312
10002a64:	0009883a 	mov	r4,zero
10002a68:	0000fb00 	call	10000fb0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002a6c:	000b883a 	mov	r5,zero
10002a70:	0009883a 	mov	r4,zero
10002a74:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002a78:	000b883a 	mov	r5,zero
10002a7c:	0009883a 	mov	r4,zero
10002a80:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002a84:	01408404 	movi	r5,528
10002a88:	0009883a 	mov	r4,zero
10002a8c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002a90:	01401044 	movi	r5,65
10002a94:	0009883a 	mov	r4,zero
10002a98:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002a9c:	014004c4 	movi	r5,19
10002aa0:	0009883a 	mov	r4,zero
10002aa4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002aa8:	000b883a 	mov	r5,zero
10002aac:	0009883a 	mov	r4,zero
10002ab0:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002ab4:	01414004 	movi	r5,1280
10002ab8:	01006c04 	movi	r4,432
10002abc:	0001e240 	call	10001e24 <UsbWrite>

}
10002ac0:	0001883a 	nop
10002ac4:	e037883a 	mov	sp,fp
10002ac8:	dfc00117 	ldw	ra,4(sp)
10002acc:	df000017 	ldw	fp,0(sp)
10002ad0:	dec00204 	addi	sp,sp,8
10002ad4:	f800283a 	ret

10002ad8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10002ad8:	defffe04 	addi	sp,sp,-8
10002adc:	dfc00115 	stw	ra,4(sp)
10002ae0:	df000015 	stw	fp,0(sp)
10002ae4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002ae8:	01414004 	movi	r5,1280
10002aec:	01000084 	movi	r4,2
10002af0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002af4:	01414304 	movi	r5,1292
10002af8:	0009883a 	mov	r4,zero
10002afc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b00:	01400204 	movi	r5,8
10002b04:	0009883a 	mov	r4,zero
10002b08:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002b0c:	0140b404 	movi	r5,720
10002b10:	0009883a 	mov	r4,zero
10002b14:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b18:	01400044 	movi	r5,1
10002b1c:	0009883a 	mov	r4,zero
10002b20:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002b24:	014004c4 	movi	r5,19
10002b28:	0009883a 	mov	r4,zero
10002b2c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002b30:	01414504 	movi	r5,1300
10002b34:	0009883a 	mov	r4,zero
10002b38:	0000fb00 	call	10000fb0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002b3c:	0141a044 	movi	r5,1665
10002b40:	0009883a 	mov	r4,zero
10002b44:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002b48:	01488004 	movi	r5,8704
10002b4c:	0009883a 	mov	r4,zero
10002b50:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002b54:	000b883a 	mov	r5,zero
10002b58:	0009883a 	mov	r4,zero
10002b5c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002b60:	01401ec4 	movi	r5,123
10002b64:	0009883a 	mov	r4,zero
10002b68:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002b6c:	01416004 	movi	r5,1408
10002b70:	0009883a 	mov	r4,zero
10002b74:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002b78:	01400204 	movi	r5,8
10002b7c:	0009883a 	mov	r4,zero
10002b80:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002b84:	0140a404 	movi	r5,656
10002b88:	0009883a 	mov	r4,zero
10002b8c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002b90:	01401044 	movi	r5,65
10002b94:	0009883a 	mov	r4,zero
10002b98:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002b9c:	014004c4 	movi	r5,19
10002ba0:	0009883a 	mov	r4,zero
10002ba4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002ba8:	01414804 	movi	r5,1312
10002bac:	0009883a 	mov	r4,zero
10002bb0:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002bb4:	01416204 	movi	r5,1416
10002bb8:	0009883a 	mov	r4,zero
10002bbc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002bc0:	01400204 	movi	r5,8
10002bc4:	0009883a 	mov	r4,zero
10002bc8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002bcc:	0140a404 	movi	r5,656
10002bd0:	0009883a 	mov	r4,zero
10002bd4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002bd8:	01400044 	movi	r5,1
10002bdc:	0009883a 	mov	r4,zero
10002be0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002be4:	014004c4 	movi	r5,19
10002be8:	0009883a 	mov	r4,zero
10002bec:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002bf0:	01414b04 	movi	r5,1324
10002bf4:	0009883a 	mov	r4,zero
10002bf8:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002bfc:	01416404 	movi	r5,1424
10002c00:	0009883a 	mov	r4,zero
10002c04:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002c08:	01400204 	movi	r5,8
10002c0c:	0009883a 	mov	r4,zero
10002c10:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002c14:	0140a404 	movi	r5,656
10002c18:	0009883a 	mov	r4,zero
10002c1c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002c20:	01401044 	movi	r5,65
10002c24:	0009883a 	mov	r4,zero
10002c28:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002c2c:	014004c4 	movi	r5,19
10002c30:	0009883a 	mov	r4,zero
10002c34:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002c38:	01414e04 	movi	r5,1336
10002c3c:	0009883a 	mov	r4,zero
10002c40:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002c44:	01416604 	movi	r5,1432
10002c48:	0009883a 	mov	r4,zero
10002c4c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002c50:	01400204 	movi	r5,8
10002c54:	0009883a 	mov	r4,zero
10002c58:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002c5c:	0140a404 	movi	r5,656
10002c60:	0009883a 	mov	r4,zero
10002c64:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002c68:	01400044 	movi	r5,1
10002c6c:	0009883a 	mov	r4,zero
10002c70:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002c74:	014004c4 	movi	r5,19
10002c78:	0009883a 	mov	r4,zero
10002c7c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002c80:	01415104 	movi	r5,1348
10002c84:	0009883a 	mov	r4,zero
10002c88:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002c8c:	01416804 	movi	r5,1440
10002c90:	0009883a 	mov	r4,zero
10002c94:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002c98:	01400204 	movi	r5,8
10002c9c:	0009883a 	mov	r4,zero
10002ca0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002ca4:	0140a404 	movi	r5,656
10002ca8:	0009883a 	mov	r4,zero
10002cac:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002cb0:	01401044 	movi	r5,65
10002cb4:	0009883a 	mov	r4,zero
10002cb8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002cbc:	014004c4 	movi	r5,19
10002cc0:	0009883a 	mov	r4,zero
10002cc4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002cc8:	01415404 	movi	r5,1360
10002ccc:	0009883a 	mov	r4,zero
10002cd0:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002cd4:	01416a04 	movi	r5,1448
10002cd8:	0009883a 	mov	r4,zero
10002cdc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002ce0:	01400204 	movi	r5,8
10002ce4:	0009883a 	mov	r4,zero
10002ce8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002cec:	0140a404 	movi	r5,656
10002cf0:	0009883a 	mov	r4,zero
10002cf4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002cf8:	01400044 	movi	r5,1
10002cfc:	0009883a 	mov	r4,zero
10002d00:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002d04:	014004c4 	movi	r5,19
10002d08:	0009883a 	mov	r4,zero
10002d0c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002d10:	01415704 	movi	r5,1372
10002d14:	0009883a 	mov	r4,zero
10002d18:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002d1c:	01416c04 	movi	r5,1456
10002d20:	0009883a 	mov	r4,zero
10002d24:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002d28:	01400204 	movi	r5,8
10002d2c:	0009883a 	mov	r4,zero
10002d30:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002d34:	0140a404 	movi	r5,656
10002d38:	0009883a 	mov	r4,zero
10002d3c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002d40:	01401044 	movi	r5,65
10002d44:	0009883a 	mov	r4,zero
10002d48:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002d4c:	014004c4 	movi	r5,19
10002d50:	0009883a 	mov	r4,zero
10002d54:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002d58:	01415a04 	movi	r5,1384
10002d5c:	0009883a 	mov	r4,zero
10002d60:	0000fb00 	call	10000fb0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002d64:	01416e04 	movi	r5,1464
10002d68:	0009883a 	mov	r4,zero
10002d6c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002d70:	014000c4 	movi	r5,3
10002d74:	0009883a 	mov	r4,zero
10002d78:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002d7c:	0140a404 	movi	r5,656
10002d80:	0009883a 	mov	r4,zero
10002d84:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002d88:	01400044 	movi	r5,1
10002d8c:	0009883a 	mov	r4,zero
10002d90:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002d94:	014004c4 	movi	r5,19
10002d98:	0009883a 	mov	r4,zero
10002d9c:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002da0:	01415d04 	movi	r5,1396
10002da4:	0009883a 	mov	r4,zero
10002da8:	0000fb00 	call	10000fb0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002dac:	000b883a 	mov	r5,zero
10002db0:	0009883a 	mov	r4,zero
10002db4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002db8:	000b883a 	mov	r5,zero
10002dbc:	0009883a 	mov	r4,zero
10002dc0:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002dc4:	01408404 	movi	r5,528
10002dc8:	0009883a 	mov	r4,zero
10002dcc:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002dd0:	01401044 	movi	r5,65
10002dd4:	0009883a 	mov	r4,zero
10002dd8:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002ddc:	014004c4 	movi	r5,19
10002de0:	0009883a 	mov	r4,zero
10002de4:	0000fb00 	call	10000fb0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002de8:	000b883a 	mov	r5,zero
10002dec:	0009883a 	mov	r4,zero
10002df0:	0000fb00 	call	10000fb0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002df4:	01414004 	movi	r5,1280
10002df8:	01006c04 	movi	r4,432
10002dfc:	0001e240 	call	10001e24 <UsbWrite>

}
10002e00:	0001883a 	nop
10002e04:	e037883a 	mov	sp,fp
10002e08:	dfc00117 	ldw	ra,4(sp)
10002e0c:	df000017 	ldw	fp,0(sp)
10002e10:	dec00204 	addi	sp,sp,8
10002e14:	f800283a 	ret

10002e18 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002e18:	defffd04 	addi	sp,sp,-12
10002e1c:	dfc00215 	stw	ra,8(sp)
10002e20:	df000115 	stw	fp,4(sp)
10002e24:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002e28:	01005104 	movi	r4,324
10002e2c:	0001e800 	call	10001e80 <UsbRead>
10002e30:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e34:	000b883a 	mov	r5,zero
10002e38:	01005104 	movi	r4,324
10002e3c:	0001e240 	call	10001e24 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002e40:	00000d06 	br	10002e78 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002e44:	e0bfff8b 	ldhu	r2,-2(fp)
10002e48:	10000526 	beq	r2,zero,10002e60 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002e4c:	e0bfff8b 	ldhu	r2,-2(fp)
10002e50:	100b883a 	mov	r5,r2
10002e54:	01040074 	movhi	r4,4097
10002e58:	2109e604 	addi	r4,r4,10136
10002e5c:	000312c0 	call	1000312c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e60:	01005104 	movi	r4,324
10002e64:	0001e800 	call	10001e80 <UsbRead>
10002e68:	e0bfff8d 	sth	r2,-2(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e6c:	000b883a 	mov	r5,zero
10002e70:	01005104 	movi	r4,324
10002e74:	0001e240 	call	10001e24 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002e78:	e0bfff8b 	ldhu	r2,-2(fp)
10002e7c:	10840018 	cmpnei	r2,r2,4096
10002e80:	103ff01e 	bne	r2,zero,10002e44 <UsbWaitTDListDone+0x2c>
	}

	return usb_ctl_val;
10002e84:	e0bfff8b 	ldhu	r2,-2(fp)
}
10002e88:	e037883a 	mov	sp,fp
10002e8c:	dfc00117 	ldw	ra,4(sp)
10002e90:	df000017 	ldw	fp,0(sp)
10002e94:	dec00204 	addi	sp,sp,8
10002e98:	f800283a 	ret

10002e9c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002e9c:	defffd04 	addi	sp,sp,-12
10002ea0:	dfc00215 	stw	ra,8(sp)
10002ea4:	df000115 	stw	fp,4(sp)
10002ea8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002eac:	010000c4 	movi	r4,3
10002eb0:	00010240 	call	10001024 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002eb4:	01005104 	movi	r4,324
10002eb8:	0001e800 	call	10001e80 <UsbRead>
10002ebc:	10bfffcc 	andi	r2,r2,65535
10002ec0:	10840018 	cmpnei	r2,r2,4096
10002ec4:	1000091e 	bne	r2,zero,10002eec <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002ec8:	000b883a 	mov	r5,zero
10002ecc:	01005104 	movi	r4,324
10002ed0:	0001e240 	call	10001e24 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002ed4:	0001883a 	nop
10002ed8:	010000c4 	movi	r4,3
10002edc:	00010240 	call	10001024 <IO_read>
10002ee0:	10bfffcc 	andi	r2,r2,65535
10002ee4:	1080040c 	andi	r2,r2,16
10002ee8:	103ffb26 	beq	r2,zero,10002ed8 <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002eec:	01414204 	movi	r5,1288
10002ef0:	01000084 	movi	r4,2
10002ef4:	0000fb00 	call	10000fb0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002ef8:	0009883a 	mov	r4,zero
10002efc:	00010240 	call	10001024 <IO_read>
10002f00:	e0bfff8d 	sth	r2,-2(fp)

	return usb_ctl_val;
10002f04:	e0bfff8b 	ldhu	r2,-2(fp)
}
10002f08:	e037883a 	mov	sp,fp
10002f0c:	dfc00117 	ldw	ra,4(sp)
10002f10:	df000017 	ldw	fp,0(sp)
10002f14:	dec00204 	addi	sp,sp,8
10002f18:	f800283a 	ret

10002f1c <UsbPrintMem>:


void UsbPrintMem()
{
10002f1c:	defffc04 	addi	sp,sp,-16
10002f20:	dfc00315 	stw	ra,12(sp)
10002f24:	df000215 	stw	fp,8(sp)
10002f28:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002f2c:	01414004 	movi	r5,1280
10002f30:	01000084 	movi	r4,2
10002f34:	0000fb00 	call	10000fb0 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002f38:	e03fff15 	stw	zero,-4(fp)
10002f3c:	00000e06 	br	10002f78 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002f40:	0009883a 	mov	r4,zero
10002f44:	00010240 	call	10001024 <IO_read>
10002f48:	10bfffcc 	andi	r2,r2,65535
10002f4c:	e0bffe15 	stw	r2,-8(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002f50:	e0bfff17 	ldw	r2,-4(fp)
10002f54:	10814004 	addi	r2,r2,1280
10002f58:	e1bffe17 	ldw	r6,-8(fp)
10002f5c:	100b883a 	mov	r5,r2
10002f60:	01040074 	movhi	r4,4097
10002f64:	2109ee04 	addi	r4,r4,10168
10002f68:	000312c0 	call	1000312c <printf>
	for (i = 0; i <= 200; i += 2)
10002f6c:	e0bfff17 	ldw	r2,-4(fp)
10002f70:	10800084 	addi	r2,r2,2
10002f74:	e0bfff15 	stw	r2,-4(fp)
10002f78:	e0bfff17 	ldw	r2,-4(fp)
10002f7c:	10803250 	cmplti	r2,r2,201
10002f80:	103fef1e 	bne	r2,zero,10002f40 <UsbPrintMem+0x24>
	}
}
10002f84:	0001883a 	nop
10002f88:	e037883a 	mov	sp,fp
10002f8c:	dfc00117 	ldw	ra,4(sp)
10002f90:	df000017 	ldw	fp,0(sp)
10002f94:	dec00204 	addi	sp,sp,8
10002f98:	f800283a 	ret

10002f9c <__muldi3>:
10002f9c:	20bfffcc 	andi	r2,r4,65535
10002fa0:	2012d43a 	srli	r9,r4,16
10002fa4:	32bfffcc 	andi	r10,r6,65535
10002fa8:	3018d43a 	srli	r12,r6,16
10002fac:	1297383a 	mul	r11,r2,r10
10002fb0:	4a95383a 	mul	r10,r9,r10
10002fb4:	1311383a 	mul	r8,r2,r12
10002fb8:	5804d43a 	srli	r2,r11,16
10002fbc:	4b13383a 	mul	r9,r9,r12
10002fc0:	4291883a 	add	r8,r8,r10
10002fc4:	1205883a 	add	r2,r2,r8
10002fc8:	1280022e 	bgeu	r2,r10,10002fd4 <__muldi3+0x38>
10002fcc:	00c00074 	movhi	r3,1
10002fd0:	48d3883a 	add	r9,r9,r3
10002fd4:	1010d43a 	srli	r8,r2,16
10002fd8:	21c9383a 	mul	r4,r4,r7
10002fdc:	314d383a 	mul	r6,r6,r5
10002fe0:	1004943a 	slli	r2,r2,16
10002fe4:	4253883a 	add	r9,r8,r9
10002fe8:	5affffcc 	andi	r11,r11,65535
10002fec:	2249883a 	add	r4,r4,r9
10002ff0:	12c5883a 	add	r2,r2,r11
10002ff4:	2187883a 	add	r3,r4,r6
10002ff8:	f800283a 	ret

10002ffc <memcpy>:
10002ffc:	30c00430 	cmpltui	r3,r6,16
10003000:	2005883a 	mov	r2,r4
10003004:	18002d1e 	bne	r3,zero,100030bc <memcpy+0xc0>
10003008:	2906b03a 	or	r3,r5,r4
1000300c:	18c000cc 	andi	r3,r3,3
10003010:	1800351e 	bne	r3,zero,100030e8 <memcpy+0xec>
10003014:	32fffc04 	addi	r11,r6,-16
10003018:	5816d13a 	srli	r11,r11,4
1000301c:	2007883a 	mov	r3,r4
10003020:	280f883a 	mov	r7,r5
10003024:	5ac00044 	addi	r11,r11,1
10003028:	5816913a 	slli	r11,r11,4
1000302c:	22c9883a 	add	r4,r4,r11
10003030:	3a000017 	ldw	r8,0(r7)
10003034:	3a800117 	ldw	r10,4(r7)
10003038:	3a400217 	ldw	r9,8(r7)
1000303c:	39c00404 	addi	r7,r7,16
10003040:	1a000015 	stw	r8,0(r3)
10003044:	3a3fff17 	ldw	r8,-4(r7)
10003048:	1a800115 	stw	r10,4(r3)
1000304c:	1a400215 	stw	r9,8(r3)
10003050:	18c00404 	addi	r3,r3,16
10003054:	1a3fff15 	stw	r8,-4(r3)
10003058:	20fff51e 	bne	r4,r3,10003030 <memcpy+0x34>
1000305c:	3100030c 	andi	r4,r6,12
10003060:	2acb883a 	add	r5,r5,r11
10003064:	320003cc 	andi	r8,r6,15
10003068:	20002226 	beq	r4,zero,100030f4 <memcpy+0xf8>
1000306c:	2809883a 	mov	r4,r5
10003070:	1813883a 	mov	r9,r3
10003074:	21000104 	addi	r4,r4,4
10003078:	22bfff17 	ldw	r10,-4(r4)
1000307c:	410fc83a 	sub	r7,r8,r4
10003080:	4a400104 	addi	r9,r9,4
10003084:	29cf883a 	add	r7,r5,r7
10003088:	4abfff15 	stw	r10,-4(r9)
1000308c:	39c00128 	cmpgeui	r7,r7,4
10003090:	383ff81e 	bne	r7,zero,10003074 <memcpy+0x78>
10003094:	413fff04 	addi	r4,r8,-4
10003098:	2008d0ba 	srli	r4,r4,2
1000309c:	318000cc 	andi	r6,r6,3
100030a0:	31ffffc4 	addi	r7,r6,-1
100030a4:	21000044 	addi	r4,r4,1
100030a8:	200890ba 	slli	r4,r4,2
100030ac:	1907883a 	add	r3,r3,r4
100030b0:	290b883a 	add	r5,r5,r4
100030b4:	3000041e 	bne	r6,zero,100030c8 <memcpy+0xcc>
100030b8:	f800283a 	ret
100030bc:	2007883a 	mov	r3,r4
100030c0:	31ffffc4 	addi	r7,r6,-1
100030c4:	303ffc26 	beq	r6,zero,100030b8 <memcpy+0xbc>
100030c8:	39c00044 	addi	r7,r7,1
100030cc:	19cf883a 	add	r7,r3,r7
100030d0:	29400044 	addi	r5,r5,1
100030d4:	29bfffc3 	ldbu	r6,-1(r5)
100030d8:	18c00044 	addi	r3,r3,1
100030dc:	19bfffc5 	stb	r6,-1(r3)
100030e0:	19fffb1e 	bne	r3,r7,100030d0 <memcpy+0xd4>
100030e4:	f800283a 	ret
100030e8:	31ffffc4 	addi	r7,r6,-1
100030ec:	2007883a 	mov	r3,r4
100030f0:	003ff506 	br	100030c8 <memcpy+0xcc>
100030f4:	400d883a 	mov	r6,r8
100030f8:	003ff106 	br	100030c0 <memcpy+0xc4>

100030fc <_printf_r>:
100030fc:	defffd04 	addi	sp,sp,-12
10003100:	2805883a 	mov	r2,r5
10003104:	dfc00015 	stw	ra,0(sp)
10003108:	d9800115 	stw	r6,4(sp)
1000310c:	d9c00215 	stw	r7,8(sp)
10003110:	21400217 	ldw	r5,8(r4)
10003114:	d9c00104 	addi	r7,sp,4
10003118:	100d883a 	mov	r6,r2
1000311c:	00032d80 	call	100032d8 <___vfprintf_internal_r>
10003120:	dfc00017 	ldw	ra,0(sp)
10003124:	dec00304 	addi	sp,sp,12
10003128:	f800283a 	ret

1000312c <printf>:
1000312c:	defffc04 	addi	sp,sp,-16
10003130:	dfc00015 	stw	ra,0(sp)
10003134:	d9400115 	stw	r5,4(sp)
10003138:	d9800215 	stw	r6,8(sp)
1000313c:	d9c00315 	stw	r7,12(sp)
10003140:	00840074 	movhi	r2,4097
10003144:	1093ce17 	ldw	r2,20280(r2)
10003148:	200b883a 	mov	r5,r4
1000314c:	d9800104 	addi	r6,sp,4
10003150:	11000217 	ldw	r4,8(r2)
10003154:	00054380 	call	10005438 <__vfprintf_internal>
10003158:	dfc00017 	ldw	ra,0(sp)
1000315c:	dec00404 	addi	sp,sp,16
10003160:	f800283a 	ret

10003164 <_puts_r>:
10003164:	defff504 	addi	sp,sp,-44
10003168:	dc000815 	stw	r16,32(sp)
1000316c:	2021883a 	mov	r16,r4
10003170:	2809883a 	mov	r4,r5
10003174:	dc400915 	stw	r17,36(sp)
10003178:	dfc00a15 	stw	ra,40(sp)
1000317c:	2823883a 	mov	r17,r5
10003180:	00032400 	call	10003240 <strlen>
10003184:	11000044 	addi	r4,r2,1
10003188:	d8800515 	stw	r2,20(sp)
1000318c:	00800044 	movi	r2,1
10003190:	00c40074 	movhi	r3,4097
10003194:	d8800715 	stw	r2,28(sp)
10003198:	d8800404 	addi	r2,sp,16
1000319c:	18c9f304 	addi	r3,r3,10188
100031a0:	d8800115 	stw	r2,4(sp)
100031a4:	00800084 	movi	r2,2
100031a8:	dc400415 	stw	r17,16(sp)
100031ac:	d8c00615 	stw	r3,24(sp)
100031b0:	d9000315 	stw	r4,12(sp)
100031b4:	d8800215 	stw	r2,8(sp)
100031b8:	81400217 	ldw	r5,8(r16)
100031bc:	80000226 	beq	r16,zero,100031c8 <_puts_r+0x64>
100031c0:	80800e17 	ldw	r2,56(r16)
100031c4:	10001326 	beq	r2,zero,10003214 <_puts_r+0xb0>
100031c8:	2880030b 	ldhu	r2,12(r5)
100031cc:	10c8000c 	andi	r3,r2,8192
100031d0:	1800061e 	bne	r3,zero,100031ec <_puts_r+0x88>
100031d4:	28c01917 	ldw	r3,100(r5)
100031d8:	0137ffc4 	movi	r4,-8193
100031dc:	10880014 	ori	r2,r2,8192
100031e0:	1906703a 	and	r3,r3,r4
100031e4:	2880030d 	sth	r2,12(r5)
100031e8:	28c01915 	stw	r3,100(r5)
100031ec:	d9800104 	addi	r6,sp,4
100031f0:	8009883a 	mov	r4,r16
100031f4:	00079540 	call	10007954 <__sfvwrite_r>
100031f8:	10000b1e 	bne	r2,zero,10003228 <_puts_r+0xc4>
100031fc:	00800284 	movi	r2,10
10003200:	dfc00a17 	ldw	ra,40(sp)
10003204:	dc400917 	ldw	r17,36(sp)
10003208:	dc000817 	ldw	r16,32(sp)
1000320c:	dec00b04 	addi	sp,sp,44
10003210:	f800283a 	ret
10003214:	8009883a 	mov	r4,r16
10003218:	d9400015 	stw	r5,0(sp)
1000321c:	00074f40 	call	100074f4 <__sinit>
10003220:	d9400017 	ldw	r5,0(sp)
10003224:	003fe806 	br	100031c8 <_puts_r+0x64>
10003228:	00bfffc4 	movi	r2,-1
1000322c:	003ff406 	br	10003200 <_puts_r+0x9c>

10003230 <puts>:
10003230:	00840074 	movhi	r2,4097
10003234:	200b883a 	mov	r5,r4
10003238:	1113ce17 	ldw	r4,20280(r2)
1000323c:	00031641 	jmpi	10003164 <_puts_r>

10003240 <strlen>:
10003240:	208000cc 	andi	r2,r4,3
10003244:	10002026 	beq	r2,zero,100032c8 <strlen+0x88>
10003248:	20800007 	ldb	r2,0(r4)
1000324c:	10002026 	beq	r2,zero,100032d0 <strlen+0x90>
10003250:	2005883a 	mov	r2,r4
10003254:	00000206 	br	10003260 <strlen+0x20>
10003258:	10c00007 	ldb	r3,0(r2)
1000325c:	18001826 	beq	r3,zero,100032c0 <strlen+0x80>
10003260:	10800044 	addi	r2,r2,1
10003264:	10c000cc 	andi	r3,r2,3
10003268:	183ffb1e 	bne	r3,zero,10003258 <strlen+0x18>
1000326c:	11400017 	ldw	r5,0(r2)
10003270:	01ffbff4 	movhi	r7,65279
10003274:	39ffbfc4 	addi	r7,r7,-257
10003278:	29c7883a 	add	r3,r5,r7
1000327c:	01a02074 	movhi	r6,32897
10003280:	014a303a 	nor	r5,zero,r5
10003284:	1946703a 	and	r3,r3,r5
10003288:	31a02004 	addi	r6,r6,-32640
1000328c:	1986703a 	and	r3,r3,r6
10003290:	1800091e 	bne	r3,zero,100032b8 <strlen+0x78>
10003294:	10800104 	addi	r2,r2,4
10003298:	11400017 	ldw	r5,0(r2)
1000329c:	29c7883a 	add	r3,r5,r7
100032a0:	014a303a 	nor	r5,zero,r5
100032a4:	1946703a 	and	r3,r3,r5
100032a8:	1986703a 	and	r3,r3,r6
100032ac:	183ff926 	beq	r3,zero,10003294 <strlen+0x54>
100032b0:	00000106 	br	100032b8 <strlen+0x78>
100032b4:	10800044 	addi	r2,r2,1
100032b8:	10c00007 	ldb	r3,0(r2)
100032bc:	183ffd1e 	bne	r3,zero,100032b4 <strlen+0x74>
100032c0:	1105c83a 	sub	r2,r2,r4
100032c4:	f800283a 	ret
100032c8:	2005883a 	mov	r2,r4
100032cc:	003fe706 	br	1000326c <strlen+0x2c>
100032d0:	0005883a 	mov	r2,zero
100032d4:	f800283a 	ret

100032d8 <___vfprintf_internal_r>:
100032d8:	deffbd04 	addi	sp,sp,-268
100032dc:	dfc04215 	stw	ra,264(sp)
100032e0:	dd003d15 	stw	r20,244(sp)
100032e4:	dcc03c15 	stw	r19,240(sp)
100032e8:	dc003915 	stw	r16,228(sp)
100032ec:	d9000515 	stw	r4,20(sp)
100032f0:	2021883a 	mov	r16,r4
100032f4:	2827883a 	mov	r19,r5
100032f8:	3029883a 	mov	r20,r6
100032fc:	d9c00615 	stw	r7,24(sp)
10003300:	df004115 	stw	fp,260(sp)
10003304:	ddc04015 	stw	r23,256(sp)
10003308:	dd803f15 	stw	r22,252(sp)
1000330c:	dd403e15 	stw	r21,248(sp)
10003310:	dc803b15 	stw	r18,236(sp)
10003314:	dc403a15 	stw	r17,232(sp)
10003318:	0007f780 	call	10007f78 <_localeconv_r>
1000331c:	10800017 	ldw	r2,0(r2)
10003320:	1009883a 	mov	r4,r2
10003324:	d8800d15 	stw	r2,52(sp)
10003328:	00032400 	call	10003240 <strlen>
1000332c:	d8800b15 	stw	r2,44(sp)
10003330:	80000226 	beq	r16,zero,1000333c <___vfprintf_internal_r+0x64>
10003334:	80800e17 	ldw	r2,56(r16)
10003338:	1002da26 	beq	r2,zero,10003ea4 <___vfprintf_internal_r+0xbcc>
1000333c:	9880030b 	ldhu	r2,12(r19)
10003340:	10c8000c 	andi	r3,r2,8192
10003344:	1800061e 	bne	r3,zero,10003360 <___vfprintf_internal_r+0x88>
10003348:	98c01917 	ldw	r3,100(r19)
1000334c:	0137ffc4 	movi	r4,-8193
10003350:	10880014 	ori	r2,r2,8192
10003354:	1906703a 	and	r3,r3,r4
10003358:	9880030d 	sth	r2,12(r19)
1000335c:	98c01915 	stw	r3,100(r19)
10003360:	10c0020c 	andi	r3,r2,8
10003364:	18009a26 	beq	r3,zero,100035d0 <___vfprintf_internal_r+0x2f8>
10003368:	98c00417 	ldw	r3,16(r19)
1000336c:	18009826 	beq	r3,zero,100035d0 <___vfprintf_internal_r+0x2f8>
10003370:	1080068c 	andi	r2,r2,26
10003374:	10800298 	cmpnei	r2,r2,10
10003378:	10009d26 	beq	r2,zero,100035f0 <___vfprintf_internal_r+0x318>
1000337c:	ddc02904 	addi	r23,sp,164
10003380:	ddc01c15 	stw	r23,112(sp)
10003384:	d8001e15 	stw	zero,120(sp)
10003388:	d8001d15 	stw	zero,116(sp)
1000338c:	d8000815 	stw	zero,32(sp)
10003390:	d8000915 	stw	zero,36(sp)
10003394:	d8000a15 	stw	zero,40(sp)
10003398:	b811883a 	mov	r8,r23
1000339c:	d8000c15 	stw	zero,48(sp)
100033a0:	d8001115 	stw	zero,68(sp)
100033a4:	d8000415 	stw	zero,16(sp)
100033a8:	a02d883a 	mov	r22,r20
100033ac:	b0800007 	ldb	r2,0(r22)
100033b0:	1000a226 	beq	r2,zero,1000363c <___vfprintf_internal_r+0x364>
100033b4:	10800960 	cmpeqi	r2,r2,37
100033b8:	10052e1e 	bne	r2,zero,10004874 <___vfprintf_internal_r+0x159c>
100033bc:	b021883a 	mov	r16,r22
100033c0:	00000206 	br	100033cc <___vfprintf_internal_r+0xf4>
100033c4:	18009326 	beq	r3,zero,10003614 <___vfprintf_internal_r+0x33c>
100033c8:	9021883a 	mov	r16,r18
100033cc:	80800047 	ldb	r2,1(r16)
100033d0:	84800044 	addi	r18,r16,1
100033d4:	10c00958 	cmpnei	r3,r2,37
100033d8:	103ffa1e 	bne	r2,zero,100033c4 <___vfprintf_internal_r+0xec>
100033dc:	95a3c83a 	sub	r17,r18,r22
100033e0:	88009626 	beq	r17,zero,1000363c <___vfprintf_internal_r+0x364>
100033e4:	d8c01e17 	ldw	r3,120(sp)
100033e8:	d8801d17 	ldw	r2,116(sp)
100033ec:	45800015 	stw	r22,0(r8)
100033f0:	1c47883a 	add	r3,r3,r17
100033f4:	10800044 	addi	r2,r2,1
100033f8:	d8801d15 	stw	r2,116(sp)
100033fc:	44400115 	stw	r17,4(r8)
10003400:	d8c01e15 	stw	r3,120(sp)
10003404:	10800208 	cmpgei	r2,r2,8
10003408:	1000851e 	bne	r2,zero,10003620 <___vfprintf_internal_r+0x348>
1000340c:	42000204 	addi	r8,r8,8
10003410:	d8c00417 	ldw	r3,16(sp)
10003414:	80800047 	ldb	r2,1(r16)
10003418:	1c47883a 	add	r3,r3,r17
1000341c:	d8c00415 	stw	r3,16(sp)
10003420:	10008626 	beq	r2,zero,1000363c <___vfprintf_internal_r+0x364>
10003424:	92800047 	ldb	r10,1(r18)
10003428:	95800044 	addi	r22,r18,1
1000342c:	d8001545 	stb	zero,85(sp)
10003430:	0009883a 	mov	r4,zero
10003434:	000b883a 	mov	r5,zero
10003438:	02ffffc4 	movi	r11,-1
1000343c:	0023883a 	mov	r17,zero
10003440:	0019883a 	mov	r12,zero
10003444:	b5800044 	addi	r22,r22,1
10003448:	5039883a 	mov	fp,r10
1000344c:	e0bff804 	addi	r2,fp,-32
10003450:	10c01668 	cmpgeui	r3,r2,89
10003454:	18009b1e 	bne	r3,zero,100036c4 <___vfprintf_internal_r+0x3ec>
10003458:	100490ba 	slli	r2,r2,2
1000345c:	00c40034 	movhi	r3,4096
10003460:	10c7883a 	add	r3,r2,r3
10003464:	188d1b17 	ldw	r2,13420(r3)
10003468:	1000683a 	jmp	r2
1000346c:	10003794 	ori	zero,r2,222
10003470:	100036c4 	addi	zero,r2,219
10003474:	100036c4 	addi	zero,r2,219
10003478:	10003788 	cmpgei	zero,r2,222
1000347c:	100036c4 	addi	zero,r2,219
10003480:	100036c4 	addi	zero,r2,219
10003484:	100036c4 	addi	zero,r2,219
10003488:	100036c4 	addi	zero,r2,219
1000348c:	100036c4 	addi	zero,r2,219
10003490:	100036c4 	addi	zero,r2,219
10003494:	10003760 	cmpeqi	zero,r2,221
10003498:	10003750 	cmplti	zero,r2,221
1000349c:	100036c4 	addi	zero,r2,219
100034a0:	10003738 	rdprs	zero,r2,220
100034a4:	100036f4 	orhi	zero,r2,219
100034a8:	100036c4 	addi	zero,r2,219
100034ac:	100036e8 	cmpgeui	zero,r2,219
100034b0:	10003694 	ori	zero,r2,218
100034b4:	10003694 	ori	zero,r2,218
100034b8:	10003694 	ori	zero,r2,218
100034bc:	10003694 	ori	zero,r2,218
100034c0:	10003694 	ori	zero,r2,218
100034c4:	10003694 	ori	zero,r2,218
100034c8:	10003694 	ori	zero,r2,218
100034cc:	10003694 	ori	zero,r2,218
100034d0:	10003694 	ori	zero,r2,218
100034d4:	100036c4 	addi	zero,r2,219
100034d8:	100036c4 	addi	zero,r2,219
100034dc:	100036c4 	addi	zero,r2,219
100034e0:	100036c4 	addi	zero,r2,219
100034e4:	100036c4 	addi	zero,r2,219
100034e8:	100036c4 	addi	zero,r2,219
100034ec:	100036c4 	addi	zero,r2,219
100034f0:	100036c4 	addi	zero,r2,219
100034f4:	100036c4 	addi	zero,r2,219
100034f8:	100036c4 	addi	zero,r2,219
100034fc:	10003ca8 	cmpgeui	zero,r2,242
10003500:	10003bc8 	cmpgei	zero,r2,239
10003504:	100036c4 	addi	zero,r2,219
10003508:	10003bc8 	cmpgei	zero,r2,239
1000350c:	100036c4 	addi	zero,r2,219
10003510:	100036c4 	addi	zero,r2,219
10003514:	100036c4 	addi	zero,r2,219
10003518:	100036c4 	addi	zero,r2,219
1000351c:	10003bbc 	xorhi	zero,r2,238
10003520:	100036c4 	addi	zero,r2,219
10003524:	100036c4 	addi	zero,r2,219
10003528:	10003b88 	cmpgei	zero,r2,238
1000352c:	100036c4 	addi	zero,r2,219
10003530:	100036c4 	addi	zero,r2,219
10003534:	100036c4 	addi	zero,r2,219
10003538:	100036c4 	addi	zero,r2,219
1000353c:	100036c4 	addi	zero,r2,219
10003540:	10003dc8 	cmpgei	zero,r2,247
10003544:	100036c4 	addi	zero,r2,219
10003548:	100036c4 	addi	zero,r2,219
1000354c:	10003d80 	call	110003d8 <_gp+0xfe34a8>
10003550:	100036c4 	addi	zero,r2,219
10003554:	100036c4 	addi	zero,r2,219
10003558:	100036c4 	addi	zero,r2,219
1000355c:	100036c4 	addi	zero,r2,219
10003560:	100036c4 	addi	zero,r2,219
10003564:	100036c4 	addi	zero,r2,219
10003568:	100036c4 	addi	zero,r2,219
1000356c:	100036c4 	addi	zero,r2,219
10003570:	100036c4 	addi	zero,r2,219
10003574:	100036c4 	addi	zero,r2,219
10003578:	10003918 	cmpnei	zero,r2,228
1000357c:	100038a4 	muli	zero,r2,226
10003580:	10003bc8 	cmpgei	zero,r2,239
10003584:	10003bc8 	cmpgei	zero,r2,239
10003588:	10003bc8 	cmpgei	zero,r2,239
1000358c:	10003e98 	cmpnei	zero,r2,250
10003590:	100038a4 	muli	zero,r2,226
10003594:	100036c4 	addi	zero,r2,219
10003598:	100036c4 	addi	zero,r2,219
1000359c:	10003e84 	addi	zero,r2,250
100035a0:	100036c4 	addi	zero,r2,219
100035a4:	10003b48 	cmpgei	zero,r2,237
100035a8:	10003b08 	cmpgei	zero,r2,236
100035ac:	10003e08 	cmpgei	zero,r2,248
100035b0:	10003dfc 	xorhi	zero,r2,247
100035b4:	100036c4 	addi	zero,r2,219
100035b8:	10003848 	cmpgei	zero,r2,225
100035bc:	100036c4 	addi	zero,r2,219
100035c0:	10003808 	cmpgei	zero,r2,224
100035c4:	100036c4 	addi	zero,r2,219
100035c8:	100036c4 	addi	zero,r2,219
100035cc:	100037c0 	call	1100037c <_gp+0xfe344c>
100035d0:	d9000517 	ldw	r4,20(sp)
100035d4:	980b883a 	mov	r5,r19
100035d8:	00055100 	call	10005510 <__swsetup_r>
100035dc:	10074c1e 	bne	r2,zero,10005310 <___vfprintf_internal_r+0x2038>
100035e0:	9880030b 	ldhu	r2,12(r19)
100035e4:	1080068c 	andi	r2,r2,26
100035e8:	10800298 	cmpnei	r2,r2,10
100035ec:	103f631e 	bne	r2,zero,1000337c <___vfprintf_internal_r+0xa4>
100035f0:	9880038f 	ldh	r2,14(r19)
100035f4:	103f6116 	blt	r2,zero,1000337c <___vfprintf_internal_r+0xa4>
100035f8:	d9c00617 	ldw	r7,24(sp)
100035fc:	d9000517 	ldw	r4,20(sp)
10003600:	a00d883a 	mov	r6,r20
10003604:	980b883a 	mov	r5,r19
10003608:	00054500 	call	10005450 <__sbprintf>
1000360c:	d8800415 	stw	r2,16(sp)
10003610:	00001306 	br	10003660 <___vfprintf_internal_r+0x388>
10003614:	95a3c83a 	sub	r17,r18,r22
10003618:	883f8226 	beq	r17,zero,10003424 <___vfprintf_internal_r+0x14c>
1000361c:	003f7106 	br	100033e4 <___vfprintf_internal_r+0x10c>
10003620:	d9000517 	ldw	r4,20(sp)
10003624:	d9801c04 	addi	r6,sp,112
10003628:	980b883a 	mov	r5,r19
1000362c:	000a4500 	call	1000a450 <__sprint_r>
10003630:	1000081e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10003634:	b811883a 	mov	r8,r23
10003638:	003f7506 	br	10003410 <___vfprintf_internal_r+0x138>
1000363c:	d8801e17 	ldw	r2,120(sp)
10003640:	10000426 	beq	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10003644:	d9000517 	ldw	r4,20(sp)
10003648:	d9801c04 	addi	r6,sp,112
1000364c:	980b883a 	mov	r5,r19
10003650:	000a4500 	call	1000a450 <__sprint_r>
10003654:	9880030b 	ldhu	r2,12(r19)
10003658:	1080100c 	andi	r2,r2,64
1000365c:	10072c1e 	bne	r2,zero,10005310 <___vfprintf_internal_r+0x2038>
10003660:	d8800417 	ldw	r2,16(sp)
10003664:	dfc04217 	ldw	ra,264(sp)
10003668:	df004117 	ldw	fp,260(sp)
1000366c:	ddc04017 	ldw	r23,256(sp)
10003670:	dd803f17 	ldw	r22,252(sp)
10003674:	dd403e17 	ldw	r21,248(sp)
10003678:	dd003d17 	ldw	r20,244(sp)
1000367c:	dcc03c17 	ldw	r19,240(sp)
10003680:	dc803b17 	ldw	r18,236(sp)
10003684:	dc403a17 	ldw	r17,232(sp)
10003688:	dc003917 	ldw	r16,228(sp)
1000368c:	dec04304 	addi	sp,sp,268
10003690:	f800283a 	ret
10003694:	0023883a 	mov	r17,zero
10003698:	e0bff404 	addi	r2,fp,-48
1000369c:	b5800044 	addi	r22,r22,1
100036a0:	8c4002a4 	muli	r17,r17,10
100036a4:	b73fffc7 	ldb	fp,-1(r22)
100036a8:	1463883a 	add	r17,r2,r17
100036ac:	e0bff404 	addi	r2,fp,-48
100036b0:	10c002b0 	cmpltui	r3,r2,10
100036b4:	183ff91e 	bne	r3,zero,1000369c <___vfprintf_internal_r+0x3c4>
100036b8:	e0bff804 	addi	r2,fp,-32
100036bc:	10c01668 	cmpgeui	r3,r2,89
100036c0:	183f6526 	beq	r3,zero,10003458 <___vfprintf_internal_r+0x180>
100036c4:	21003fcc 	andi	r4,r4,255
100036c8:	20066d1e 	bne	r4,zero,10005080 <___vfprintf_internal_r+0x1da8>
100036cc:	e03fdb26 	beq	fp,zero,1000363c <___vfprintf_internal_r+0x364>
100036d0:	df001f05 	stb	fp,124(sp)
100036d4:	d8001545 	stb	zero,85(sp)
100036d8:	05400044 	movi	r21,1
100036dc:	05000044 	movi	r20,1
100036e0:	dc001f04 	addi	r16,sp,124
100036e4:	00009506 	br	1000393c <___vfprintf_internal_r+0x664>
100036e8:	63002014 	ori	r12,r12,128
100036ec:	b2800007 	ldb	r10,0(r22)
100036f0:	003f5406 	br	10003444 <___vfprintf_internal_r+0x16c>
100036f4:	b7000007 	ldb	fp,0(r22)
100036f8:	b0c00044 	addi	r3,r22,1
100036fc:	e0800aa0 	cmpeqi	r2,fp,42
10003700:	1007411e 	bne	r2,zero,10005408 <___vfprintf_internal_r+0x2130>
10003704:	e0bff404 	addi	r2,fp,-48
10003708:	118002b0 	cmpltui	r6,r2,10
1000370c:	182d883a 	mov	r22,r3
10003710:	0017883a 	mov	r11,zero
10003714:	303f4d26 	beq	r6,zero,1000344c <___vfprintf_internal_r+0x174>
10003718:	b5800044 	addi	r22,r22,1
1000371c:	5ac002a4 	muli	r11,r11,10
10003720:	b73fffc7 	ldb	fp,-1(r22)
10003724:	5897883a 	add	r11,r11,r2
10003728:	e0bff404 	addi	r2,fp,-48
1000372c:	10c002b0 	cmpltui	r3,r2,10
10003730:	183ff91e 	bne	r3,zero,10003718 <___vfprintf_internal_r+0x440>
10003734:	003f4506 	br	1000344c <___vfprintf_internal_r+0x174>
10003738:	b7000003 	ldbu	fp,0(r22)
1000373c:	e2803fcc 	andi	r10,fp,255
10003740:	5280201c 	xori	r10,r10,128
10003744:	63000114 	ori	r12,r12,4
10003748:	52bfe004 	addi	r10,r10,-128
1000374c:	003f3d06 	br	10003444 <___vfprintf_internal_r+0x16c>
10003750:	01000044 	movi	r4,1
10003754:	01400ac4 	movi	r5,43
10003758:	b2800007 	ldb	r10,0(r22)
1000375c:	003f3906 	br	10003444 <___vfprintf_internal_r+0x16c>
10003760:	d8800617 	ldw	r2,24(sp)
10003764:	b7000003 	ldbu	fp,0(r22)
10003768:	14400017 	ldw	r17,0(r2)
1000376c:	10800104 	addi	r2,r2,4
10003770:	8804d716 	blt	r17,zero,10004ad0 <___vfprintf_internal_r+0x17f8>
10003774:	d8800615 	stw	r2,24(sp)
10003778:	e2803fcc 	andi	r10,fp,255
1000377c:	5280201c 	xori	r10,r10,128
10003780:	52bfe004 	addi	r10,r10,-128
10003784:	003f2f06 	br	10003444 <___vfprintf_internal_r+0x16c>
10003788:	63000054 	ori	r12,r12,1
1000378c:	b2800007 	ldb	r10,0(r22)
10003790:	003f2c06 	br	10003444 <___vfprintf_internal_r+0x16c>
10003794:	28803fcc 	andi	r2,r5,255
10003798:	1080201c 	xori	r2,r2,128
1000379c:	10bfe004 	addi	r2,r2,-128
100037a0:	b7000003 	ldbu	fp,0(r22)
100037a4:	103ff41e 	bne	r2,zero,10003778 <___vfprintf_internal_r+0x4a0>
100037a8:	e2803fcc 	andi	r10,fp,255
100037ac:	5280201c 	xori	r10,r10,128
100037b0:	01000044 	movi	r4,1
100037b4:	01400804 	movi	r5,32
100037b8:	52bfe004 	addi	r10,r10,-128
100037bc:	003f2106 	br	10003444 <___vfprintf_internal_r+0x16c>
100037c0:	21003fcc 	andi	r4,r4,255
100037c4:	2006b31e 	bne	r4,zero,10005294 <___vfprintf_internal_r+0x1fbc>
100037c8:	00840074 	movhi	r2,4097
100037cc:	1089fd04 	addi	r2,r2,10228
100037d0:	d8800c15 	stw	r2,48(sp)
100037d4:	6080080c 	andi	r2,r12,32
100037d8:	10017026 	beq	r2,zero,10003d9c <___vfprintf_internal_r+0xac4>
100037dc:	d8800617 	ldw	r2,24(sp)
100037e0:	15400017 	ldw	r21,0(r2)
100037e4:	15000117 	ldw	r20,4(r2)
100037e8:	10800204 	addi	r2,r2,8
100037ec:	d8800615 	stw	r2,24(sp)
100037f0:	6080004c 	andi	r2,r12,1
100037f4:	10000226 	beq	r2,zero,10003800 <___vfprintf_internal_r+0x528>
100037f8:	ad04b03a 	or	r2,r21,r20
100037fc:	1004a71e 	bne	r2,zero,10004a9c <___vfprintf_internal_r+0x17c4>
10003800:	00800084 	movi	r2,2
10003804:	00018f06 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003808:	21003fcc 	andi	r4,r4,255
1000380c:	20069f1e 	bne	r4,zero,1000528c <___vfprintf_internal_r+0x1fb4>
10003810:	6080080c 	andi	r2,r12,32
10003814:	1001b41e 	bne	r2,zero,10003ee8 <___vfprintf_internal_r+0xc10>
10003818:	d8800617 	ldw	r2,24(sp)
1000381c:	60c0040c 	andi	r3,r12,16
10003820:	15400017 	ldw	r21,0(r2)
10003824:	10800104 	addi	r2,r2,4
10003828:	18016e1e 	bne	r3,zero,10003de4 <___vfprintf_internal_r+0xb0c>
1000382c:	60c0100c 	andi	r3,r12,64
10003830:	18059f26 	beq	r3,zero,10004eb0 <___vfprintf_internal_r+0x1bd8>
10003834:	d8800615 	stw	r2,24(sp)
10003838:	ad7fffcc 	andi	r21,r21,65535
1000383c:	0029883a 	mov	r20,zero
10003840:	00800044 	movi	r2,1
10003844:	00017f06 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003848:	d8800617 	ldw	r2,24(sp)
1000384c:	d8001545 	stb	zero,85(sp)
10003850:	14000017 	ldw	r16,0(r2)
10003854:	14800104 	addi	r18,r2,4
10003858:	8004c726 	beq	r16,zero,10004b78 <___vfprintf_internal_r+0x18a0>
1000385c:	da000e15 	stw	r8,56(sp)
10003860:	db000715 	stw	r12,28(sp)
10003864:	58bfffe0 	cmpeqi	r2,r11,-1
10003868:	1005691e 	bne	r2,zero,10004e10 <___vfprintf_internal_r+0x1b38>
1000386c:	580d883a 	mov	r6,r11
10003870:	000b883a 	mov	r5,zero
10003874:	8009883a 	mov	r4,r16
10003878:	dac00615 	stw	r11,24(sp)
1000387c:	00089580 	call	10008958 <memchr>
10003880:	dac00617 	ldw	r11,24(sp)
10003884:	db000717 	ldw	r12,28(sp)
10003888:	da000e17 	ldw	r8,56(sp)
1000388c:	10066726 	beq	r2,zero,1000522c <___vfprintf_internal_r+0x1f54>
10003890:	1429c83a 	sub	r20,r2,r16
10003894:	a02b883a 	mov	r21,r20
10003898:	a005f716 	blt	r20,zero,10005078 <___vfprintf_internal_r+0x1da0>
1000389c:	dc800615 	stw	r18,24(sp)
100038a0:	00002606 	br	1000393c <___vfprintf_internal_r+0x664>
100038a4:	21003fcc 	andi	r4,r4,255
100038a8:	2006761e 	bne	r4,zero,10005284 <___vfprintf_internal_r+0x1fac>
100038ac:	6080080c 	andi	r2,r12,32
100038b0:	10017f1e 	bne	r2,zero,10003eb0 <___vfprintf_internal_r+0xbd8>
100038b4:	d8800617 	ldw	r2,24(sp)
100038b8:	60c0040c 	andi	r3,r12,16
100038bc:	10800104 	addi	r2,r2,4
100038c0:	1801001e 	bne	r3,zero,10003cc4 <___vfprintf_internal_r+0x9ec>
100038c4:	60c0100c 	andi	r3,r12,64
100038c8:	1800fe26 	beq	r3,zero,10003cc4 <___vfprintf_internal_r+0x9ec>
100038cc:	d8c00617 	ldw	r3,24(sp)
100038d0:	d8800615 	stw	r2,24(sp)
100038d4:	1d40000f 	ldh	r21,0(r3)
100038d8:	a829d7fa 	srai	r20,r21,31
100038dc:	a005883a 	mov	r2,r20
100038e0:	1000fe16 	blt	r2,zero,10003cdc <___vfprintf_internal_r+0xa04>
100038e4:	58bfffd8 	cmpnei	r2,r11,-1
100038e8:	db401543 	ldbu	r13,85(sp)
100038ec:	10018526 	beq	r2,zero,10003f04 <___vfprintf_internal_r+0xc2c>
100038f0:	00ffdfc4 	movi	r3,-129
100038f4:	ad04b03a 	or	r2,r21,r20
100038f8:	60d8703a 	and	r12,r12,r3
100038fc:	1001811e 	bne	r2,zero,10003f04 <___vfprintf_internal_r+0xc2c>
10003900:	5801831e 	bne	r11,zero,10003f10 <___vfprintf_internal_r+0xc38>
10003904:	6025883a 	mov	r18,r12
10003908:	0017883a 	mov	r11,zero
1000390c:	0029883a 	mov	r20,zero
10003910:	b821883a 	mov	r16,r23
10003914:	00018306 	br	10003f24 <___vfprintf_internal_r+0xc4c>
10003918:	d8c00617 	ldw	r3,24(sp)
1000391c:	d8001545 	stb	zero,85(sp)
10003920:	05400044 	movi	r21,1
10003924:	18800017 	ldw	r2,0(r3)
10003928:	18c00104 	addi	r3,r3,4
1000392c:	d8c00615 	stw	r3,24(sp)
10003930:	d8801f05 	stb	r2,124(sp)
10003934:	05000044 	movi	r20,1
10003938:	dc001f04 	addi	r16,sp,124
1000393c:	6025883a 	mov	r18,r12
10003940:	0017883a 	mov	r11,zero
10003944:	d8000715 	stw	zero,28(sp)
10003948:	9380008c 	andi	r14,r18,2
1000394c:	70000126 	beq	r14,zero,10003954 <___vfprintf_internal_r+0x67c>
10003950:	ad400084 	addi	r21,r21,2
10003954:	9340210c 	andi	r13,r18,132
10003958:	d8c01e17 	ldw	r3,120(sp)
1000395c:	6800021e 	bne	r13,zero,10003968 <___vfprintf_internal_r+0x690>
10003960:	8d4fc83a 	sub	r7,r17,r21
10003964:	01c2ce16 	blt	zero,r7,100044a0 <___vfprintf_internal_r+0x11c8>
10003968:	d8801547 	ldb	r2,85(sp)
1000396c:	10000c26 	beq	r2,zero,100039a0 <___vfprintf_internal_r+0x6c8>
10003970:	d8801d17 	ldw	r2,116(sp)
10003974:	d9001544 	addi	r4,sp,85
10003978:	18c00044 	addi	r3,r3,1
1000397c:	10800044 	addi	r2,r2,1
10003980:	41000015 	stw	r4,0(r8)
10003984:	01000044 	movi	r4,1
10003988:	d8801d15 	stw	r2,116(sp)
1000398c:	41000115 	stw	r4,4(r8)
10003990:	d8c01e15 	stw	r3,120(sp)
10003994:	10800208 	cmpgei	r2,r2,8
10003998:	1002fb1e 	bne	r2,zero,10004588 <___vfprintf_internal_r+0x12b0>
1000399c:	42000204 	addi	r8,r8,8
100039a0:	70000c26 	beq	r14,zero,100039d4 <___vfprintf_internal_r+0x6fc>
100039a4:	d8801d17 	ldw	r2,116(sp)
100039a8:	d9001584 	addi	r4,sp,86
100039ac:	18c00084 	addi	r3,r3,2
100039b0:	10800044 	addi	r2,r2,1
100039b4:	41000015 	stw	r4,0(r8)
100039b8:	01000084 	movi	r4,2
100039bc:	d8801d15 	stw	r2,116(sp)
100039c0:	41000115 	stw	r4,4(r8)
100039c4:	d8c01e15 	stw	r3,120(sp)
100039c8:	10800208 	cmpgei	r2,r2,8
100039cc:	1002fc1e 	bne	r2,zero,100045c0 <___vfprintf_internal_r+0x12e8>
100039d0:	42000204 	addi	r8,r8,8
100039d4:	6b402018 	cmpnei	r13,r13,128
100039d8:	6801cf26 	beq	r13,zero,10004118 <___vfprintf_internal_r+0xe40>
100039dc:	5d0fc83a 	sub	r7,r11,r20
100039e0:	01c20616 	blt	zero,r7,100041fc <___vfprintf_internal_r+0xf24>
100039e4:	9080400c 	andi	r2,r18,256
100039e8:	10017c1e 	bne	r2,zero,10003fdc <___vfprintf_internal_r+0xd04>
100039ec:	d8801d17 	ldw	r2,116(sp)
100039f0:	1d07883a 	add	r3,r3,r20
100039f4:	44000015 	stw	r16,0(r8)
100039f8:	10800044 	addi	r2,r2,1
100039fc:	d8801d15 	stw	r2,116(sp)
10003a00:	45000115 	stw	r20,4(r8)
10003a04:	d8c01e15 	stw	r3,120(sp)
10003a08:	10800208 	cmpgei	r2,r2,8
10003a0c:	1002571e 	bne	r2,zero,1000436c <___vfprintf_internal_r+0x1094>
10003a10:	42000204 	addi	r8,r8,8
10003a14:	9480010c 	andi	r18,r18,4
10003a18:	90000226 	beq	r18,zero,10003a24 <___vfprintf_internal_r+0x74c>
10003a1c:	8d61c83a 	sub	r16,r17,r21
10003a20:	04000916 	blt	zero,r16,10003a48 <___vfprintf_internal_r+0x770>
10003a24:	8d40010e 	bge	r17,r21,10003a2c <___vfprintf_internal_r+0x754>
10003a28:	a823883a 	mov	r17,r21
10003a2c:	d8800417 	ldw	r2,16(sp)
10003a30:	1445883a 	add	r2,r2,r17
10003a34:	d8800415 	stw	r2,16(sp)
10003a38:	1802241e 	bne	r3,zero,100042cc <___vfprintf_internal_r+0xff4>
10003a3c:	d8001d15 	stw	zero,116(sp)
10003a40:	b811883a 	mov	r8,r23
10003a44:	003e5906 	br	100033ac <___vfprintf_internal_r+0xd4>
10003a48:	03040074 	movhi	r12,4097
10003a4c:	81000450 	cmplti	r4,r16,17
10003a50:	630a0884 	addi	r12,r12,10274
10003a54:	d8801d17 	ldw	r2,116(sp)
10003a58:	20001c1e 	bne	r4,zero,10003acc <___vfprintf_internal_r+0x7f4>
10003a5c:	04800404 	movi	r18,16
10003a60:	dd000517 	ldw	r20,20(sp)
10003a64:	6039883a 	mov	fp,r12
10003a68:	00000406 	br	10003a7c <___vfprintf_internal_r+0x7a4>
10003a6c:	843ffc04 	addi	r16,r16,-16
10003a70:	81000448 	cmpgei	r4,r16,17
10003a74:	42000204 	addi	r8,r8,8
10003a78:	20001326 	beq	r4,zero,10003ac8 <___vfprintf_internal_r+0x7f0>
10003a7c:	10800044 	addi	r2,r2,1
10003a80:	18c00404 	addi	r3,r3,16
10003a84:	47000015 	stw	fp,0(r8)
10003a88:	44800115 	stw	r18,4(r8)
10003a8c:	d8c01e15 	stw	r3,120(sp)
10003a90:	d8801d15 	stw	r2,116(sp)
10003a94:	11000208 	cmpgei	r4,r2,8
10003a98:	203ff426 	beq	r4,zero,10003a6c <___vfprintf_internal_r+0x794>
10003a9c:	d9801c04 	addi	r6,sp,112
10003aa0:	980b883a 	mov	r5,r19
10003aa4:	a009883a 	mov	r4,r20
10003aa8:	000a4500 	call	1000a450 <__sprint_r>
10003aac:	103ee91e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10003ab0:	843ffc04 	addi	r16,r16,-16
10003ab4:	81000448 	cmpgei	r4,r16,17
10003ab8:	d8c01e17 	ldw	r3,120(sp)
10003abc:	d8801d17 	ldw	r2,116(sp)
10003ac0:	b811883a 	mov	r8,r23
10003ac4:	203fed1e 	bne	r4,zero,10003a7c <___vfprintf_internal_r+0x7a4>
10003ac8:	e019883a 	mov	r12,fp
10003acc:	10800044 	addi	r2,r2,1
10003ad0:	1c07883a 	add	r3,r3,r16
10003ad4:	d8801d15 	stw	r2,116(sp)
10003ad8:	43000015 	stw	r12,0(r8)
10003adc:	44000115 	stw	r16,4(r8)
10003ae0:	d8c01e15 	stw	r3,120(sp)
10003ae4:	10800210 	cmplti	r2,r2,8
10003ae8:	103fce1e 	bne	r2,zero,10003a24 <___vfprintf_internal_r+0x74c>
10003aec:	d9000517 	ldw	r4,20(sp)
10003af0:	d9801c04 	addi	r6,sp,112
10003af4:	980b883a 	mov	r5,r19
10003af8:	000a4500 	call	1000a450 <__sprint_r>
10003afc:	103ed51e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10003b00:	d8c01e17 	ldw	r3,120(sp)
10003b04:	003fc706 	br	10003a24 <___vfprintf_internal_r+0x74c>
10003b08:	21003fcc 	andi	r4,r4,255
10003b0c:	2005d91e 	bne	r4,zero,10005274 <___vfprintf_internal_r+0x1f9c>
10003b10:	6080080c 	andi	r2,r12,32
10003b14:	1000ed1e 	bne	r2,zero,10003ecc <___vfprintf_internal_r+0xbf4>
10003b18:	d8800617 	ldw	r2,24(sp)
10003b1c:	60c0040c 	andi	r3,r12,16
10003b20:	15400017 	ldw	r21,0(r2)
10003b24:	10800104 	addi	r2,r2,4
10003b28:	18001e1e 	bne	r3,zero,10003ba4 <___vfprintf_internal_r+0x8cc>
10003b2c:	60c0100c 	andi	r3,r12,64
10003b30:	1804db26 	beq	r3,zero,10004ea0 <___vfprintf_internal_r+0x1bc8>
10003b34:	d8800615 	stw	r2,24(sp)
10003b38:	ad7fffcc 	andi	r21,r21,65535
10003b3c:	0029883a 	mov	r20,zero
10003b40:	0005883a 	mov	r2,zero
10003b44:	0000bf06 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003b48:	21003fcc 	andi	r4,r4,255
10003b4c:	2005cb1e 	bne	r4,zero,1000527c <___vfprintf_internal_r+0x1fa4>
10003b50:	d9000617 	ldw	r4,24(sp)
10003b54:	6080080c 	andi	r2,r12,32
10003b58:	20c00104 	addi	r3,r4,4
10003b5c:	1003d51e 	bne	r2,zero,10004ab4 <___vfprintf_internal_r+0x17dc>
10003b60:	6080040c 	andi	r2,r12,16
10003b64:	1004301e 	bne	r2,zero,10004c28 <___vfprintf_internal_r+0x1950>
10003b68:	6300100c 	andi	r12,r12,64
10003b6c:	60042e26 	beq	r12,zero,10004c28 <___vfprintf_internal_r+0x1950>
10003b70:	d8800617 	ldw	r2,24(sp)
10003b74:	d8c00615 	stw	r3,24(sp)
10003b78:	d8c00417 	ldw	r3,16(sp)
10003b7c:	10800017 	ldw	r2,0(r2)
10003b80:	10c0000d 	sth	r3,0(r2)
10003b84:	003e0906 	br	100033ac <___vfprintf_internal_r+0xd4>
10003b88:	21003fcc 	andi	r4,r4,255
10003b8c:	2005c31e 	bne	r4,zero,1000529c <___vfprintf_internal_r+0x1fc4>
10003b90:	6080080c 	andi	r2,r12,32
10003b94:	63000414 	ori	r12,r12,16
10003b98:	1000cc1e 	bne	r2,zero,10003ecc <___vfprintf_internal_r+0xbf4>
10003b9c:	d8800617 	ldw	r2,24(sp)
10003ba0:	10800104 	addi	r2,r2,4
10003ba4:	d8c00617 	ldw	r3,24(sp)
10003ba8:	0029883a 	mov	r20,zero
10003bac:	d8800615 	stw	r2,24(sp)
10003bb0:	1d400017 	ldw	r21,0(r3)
10003bb4:	0005883a 	mov	r2,zero
10003bb8:	0000a206 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003bbc:	63000214 	ori	r12,r12,8
10003bc0:	b2800007 	ldb	r10,0(r22)
10003bc4:	003e1f06 	br	10003444 <___vfprintf_internal_r+0x16c>
10003bc8:	21003fcc 	andi	r4,r4,255
10003bcc:	2005b71e 	bne	r4,zero,100052ac <___vfprintf_internal_r+0x1fd4>
10003bd0:	d8c00617 	ldw	r3,24(sp)
10003bd4:	00a00034 	movhi	r2,32768
10003bd8:	10bfffc4 	addi	r2,r2,-1
10003bdc:	1d000117 	ldw	r20,4(r3)
10003be0:	1c800017 	ldw	r18,0(r3)
10003be4:	01dffc34 	movhi	r7,32752
10003be8:	a0a0703a 	and	r16,r20,r2
10003bec:	01bfffc4 	movi	r6,-1
10003bf0:	18800204 	addi	r2,r3,8
10003bf4:	39ffffc4 	addi	r7,r7,-1
10003bf8:	9009883a 	mov	r4,r18
10003bfc:	800b883a 	mov	r5,r16
10003c00:	da000f15 	stw	r8,60(sp)
10003c04:	dac00e15 	stw	r11,56(sp)
10003c08:	db000715 	stw	r12,28(sp)
10003c0c:	dd000a15 	stw	r20,40(sp)
10003c10:	dc800915 	stw	r18,36(sp)
10003c14:	d8800615 	stw	r2,24(sp)
10003c18:	000f3c80 	call	1000f3c8 <__unorddf2>
10003c1c:	db000717 	ldw	r12,28(sp)
10003c20:	dac00e17 	ldw	r11,56(sp)
10003c24:	da000f17 	ldw	r8,60(sp)
10003c28:	1003161e 	bne	r2,zero,10004884 <___vfprintf_internal_r+0x15ac>
10003c2c:	01dffc34 	movhi	r7,32752
10003c30:	01bfffc4 	movi	r6,-1
10003c34:	39ffffc4 	addi	r7,r7,-1
10003c38:	9009883a 	mov	r4,r18
10003c3c:	800b883a 	mov	r5,r16
10003c40:	000e2e00 	call	1000e2e0 <__ledf2>
10003c44:	db000717 	ldw	r12,28(sp)
10003c48:	dac00e17 	ldw	r11,56(sp)
10003c4c:	da000f17 	ldw	r8,60(sp)
10003c50:	00830c0e 	bge	zero,r2,10004884 <___vfprintf_internal_r+0x15ac>
10003c54:	000d883a 	mov	r6,zero
10003c58:	000f883a 	mov	r7,zero
10003c5c:	9009883a 	mov	r4,r18
10003c60:	a00b883a 	mov	r5,r20
10003c64:	da000e15 	stw	r8,56(sp)
10003c68:	000e2e00 	call	1000e2e0 <__ledf2>
10003c6c:	db000717 	ldw	r12,28(sp)
10003c70:	da000e17 	ldw	r8,56(sp)
10003c74:	1004e216 	blt	r2,zero,10005000 <___vfprintf_internal_r+0x1d28>
10003c78:	db401543 	ldbu	r13,85(sp)
10003c7c:	e0801210 	cmplti	r2,fp,72
10003c80:	1004cb1e 	bne	r2,zero,10004fb0 <___vfprintf_internal_r+0x1cd8>
10003c84:	04040074 	movhi	r16,4097
10003c88:	8409f504 	addi	r16,r16,10196
10003c8c:	04bfdfc4 	movi	r18,-129
10003c90:	64a4703a 	and	r18,r12,r18
10003c94:	054000c4 	movi	r21,3
10003c98:	050000c4 	movi	r20,3
10003c9c:	0017883a 	mov	r11,zero
10003ca0:	d8000715 	stw	zero,28(sp)
10003ca4:	0000a306 	br	10003f34 <___vfprintf_internal_r+0xc5c>
10003ca8:	21003fcc 	andi	r4,r4,255
10003cac:	20057d1e 	bne	r4,zero,100052a4 <___vfprintf_internal_r+0x1fcc>
10003cb0:	6080080c 	andi	r2,r12,32
10003cb4:	63000414 	ori	r12,r12,16
10003cb8:	10007d1e 	bne	r2,zero,10003eb0 <___vfprintf_internal_r+0xbd8>
10003cbc:	d8800617 	ldw	r2,24(sp)
10003cc0:	10800104 	addi	r2,r2,4
10003cc4:	d8c00617 	ldw	r3,24(sp)
10003cc8:	1d400017 	ldw	r21,0(r3)
10003ccc:	d8800615 	stw	r2,24(sp)
10003cd0:	a829d7fa 	srai	r20,r21,31
10003cd4:	a005883a 	mov	r2,r20
10003cd8:	103f020e 	bge	r2,zero,100038e4 <___vfprintf_internal_r+0x60c>
10003cdc:	056bc83a 	sub	r21,zero,r21
10003ce0:	a804c03a 	cmpne	r2,r21,zero
10003ce4:	0529c83a 	sub	r20,zero,r20
10003ce8:	a0a9c83a 	sub	r20,r20,r2
10003cec:	00800b44 	movi	r2,45
10003cf0:	d8801545 	stb	r2,85(sp)
10003cf4:	58ffffe0 	cmpeqi	r3,r11,-1
10003cf8:	03400b44 	movi	r13,45
10003cfc:	00800044 	movi	r2,1
10003d00:	18005426 	beq	r3,zero,10003e54 <___vfprintf_internal_r+0xb7c>
10003d04:	10c00060 	cmpeqi	r3,r2,1
10003d08:	18007e1e 	bne	r3,zero,10003f04 <___vfprintf_internal_r+0xc2c>
10003d0c:	108000a0 	cmpeqi	r2,r2,2
10003d10:	1002371e 	bne	r2,zero,100045f0 <___vfprintf_internal_r+0x1318>
10003d14:	b807883a 	mov	r3,r23
10003d18:	00000106 	br	10003d20 <___vfprintf_internal_r+0xa48>
10003d1c:	8007883a 	mov	r3,r16
10003d20:	a808d0fa 	srli	r4,r21,3
10003d24:	a00a977a 	slli	r5,r20,29
10003d28:	a028d0fa 	srli	r20,r20,3
10003d2c:	ad4001cc 	andi	r21,r21,7
10003d30:	a8800c04 	addi	r2,r21,48
10003d34:	292ab03a 	or	r21,r5,r4
10003d38:	18bfffc5 	stb	r2,-1(r3)
10003d3c:	ad08b03a 	or	r4,r21,r20
10003d40:	1c3fffc4 	addi	r16,r3,-1
10003d44:	203ff51e 	bne	r4,zero,10003d1c <___vfprintf_internal_r+0xa44>
10003d48:	6100004c 	andi	r4,r12,1
10003d4c:	2000a026 	beq	r4,zero,10003fd0 <___vfprintf_internal_r+0xcf8>
10003d50:	10803fcc 	andi	r2,r2,255
10003d54:	1080201c 	xori	r2,r2,128
10003d58:	10bfe004 	addi	r2,r2,-128
10003d5c:	10800c18 	cmpnei	r2,r2,48
10003d60:	10009b26 	beq	r2,zero,10003fd0 <___vfprintf_internal_r+0xcf8>
10003d64:	18ffff84 	addi	r3,r3,-2
10003d68:	00800c04 	movi	r2,48
10003d6c:	80bfffc5 	stb	r2,-1(r16)
10003d70:	b8e9c83a 	sub	r20,r23,r3
10003d74:	6025883a 	mov	r18,r12
10003d78:	1821883a 	mov	r16,r3
10003d7c:	00006906 	br	10003f24 <___vfprintf_internal_r+0xc4c>
10003d80:	21003fcc 	andi	r4,r4,255
10003d84:	2005391e 	bne	r4,zero,1000526c <___vfprintf_internal_r+0x1f94>
10003d88:	00840074 	movhi	r2,4097
10003d8c:	1089f804 	addi	r2,r2,10208
10003d90:	d8800c15 	stw	r2,48(sp)
10003d94:	6080080c 	andi	r2,r12,32
10003d98:	103e901e 	bne	r2,zero,100037dc <___vfprintf_internal_r+0x504>
10003d9c:	d8c00617 	ldw	r3,24(sp)
10003da0:	6080040c 	andi	r2,r12,16
10003da4:	1d400017 	ldw	r21,0(r3)
10003da8:	18c00104 	addi	r3,r3,4
10003dac:	d8c00615 	stw	r3,24(sp)
10003db0:	1002ae1e 	bne	r2,zero,1000486c <___vfprintf_internal_r+0x1594>
10003db4:	6080100c 	andi	r2,r12,64
10003db8:	1002ac26 	beq	r2,zero,1000486c <___vfprintf_internal_r+0x1594>
10003dbc:	ad7fffcc 	andi	r21,r21,65535
10003dc0:	0029883a 	mov	r20,zero
10003dc4:	003e8a06 	br	100037f0 <___vfprintf_internal_r+0x518>
10003dc8:	21003fcc 	andi	r4,r4,255
10003dcc:	2005391e 	bne	r4,zero,100052b4 <___vfprintf_internal_r+0x1fdc>
10003dd0:	6080080c 	andi	r2,r12,32
10003dd4:	63000414 	ori	r12,r12,16
10003dd8:	1000431e 	bne	r2,zero,10003ee8 <___vfprintf_internal_r+0xc10>
10003ddc:	d8800617 	ldw	r2,24(sp)
10003de0:	10800104 	addi	r2,r2,4
10003de4:	d8c00617 	ldw	r3,24(sp)
10003de8:	0029883a 	mov	r20,zero
10003dec:	d8800615 	stw	r2,24(sp)
10003df0:	1d400017 	ldw	r21,0(r3)
10003df4:	00800044 	movi	r2,1
10003df8:	00001206 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003dfc:	63000814 	ori	r12,r12,32
10003e00:	b2800007 	ldb	r10,0(r22)
10003e04:	003d8f06 	br	10003444 <___vfprintf_internal_r+0x16c>
10003e08:	d8c00617 	ldw	r3,24(sp)
10003e0c:	00800c04 	movi	r2,48
10003e10:	d8801585 	stb	r2,86(sp)
10003e14:	00801e04 	movi	r2,120
10003e18:	01040074 	movhi	r4,4097
10003e1c:	d88015c5 	stb	r2,87(sp)
10003e20:	1d400017 	ldw	r21,0(r3)
10003e24:	18800104 	addi	r2,r3,4
10003e28:	d8800615 	stw	r2,24(sp)
10003e2c:	2089fd04 	addi	r2,r4,10228
10003e30:	d8800c15 	stw	r2,48(sp)
10003e34:	0029883a 	mov	r20,zero
10003e38:	63000094 	ori	r12,r12,2
10003e3c:	00800084 	movi	r2,2
10003e40:	07001e04 	movi	fp,120
10003e44:	d8001545 	stb	zero,85(sp)
10003e48:	58ffffe0 	cmpeqi	r3,r11,-1
10003e4c:	001b883a 	mov	r13,zero
10003e50:	183fac1e 	bne	r3,zero,10003d04 <___vfprintf_internal_r+0xa2c>
10003e54:	04bfdfc4 	movi	r18,-129
10003e58:	ad06b03a 	or	r3,r21,r20
10003e5c:	64a4703a 	and	r18,r12,r18
10003e60:	18018d1e 	bne	r3,zero,10004498 <___vfprintf_internal_r+0x11c0>
10003e64:	5803b91e 	bne	r11,zero,10004d4c <___vfprintf_internal_r+0x1a74>
10003e68:	103ea71e 	bne	r2,zero,10003908 <___vfprintf_internal_r+0x630>
10003e6c:	6500004c 	andi	r20,r12,1
10003e70:	a0028226 	beq	r20,zero,1000487c <___vfprintf_internal_r+0x15a4>
10003e74:	00800c04 	movi	r2,48
10003e78:	d88028c5 	stb	r2,163(sp)
10003e7c:	dc0028c4 	addi	r16,sp,163
10003e80:	00002806 	br	10003f24 <___vfprintf_internal_r+0xc4c>
10003e84:	b2800007 	ldb	r10,0(r22)
10003e88:	50801b18 	cmpnei	r2,r10,108
10003e8c:	10032926 	beq	r2,zero,10004b34 <___vfprintf_internal_r+0x185c>
10003e90:	63000414 	ori	r12,r12,16
10003e94:	003d6b06 	br	10003444 <___vfprintf_internal_r+0x16c>
10003e98:	63001014 	ori	r12,r12,64
10003e9c:	b2800007 	ldb	r10,0(r22)
10003ea0:	003d6806 	br	10003444 <___vfprintf_internal_r+0x16c>
10003ea4:	d9000517 	ldw	r4,20(sp)
10003ea8:	00074f40 	call	100074f4 <__sinit>
10003eac:	003d2306 	br	1000333c <___vfprintf_internal_r+0x64>
10003eb0:	d8c00617 	ldw	r3,24(sp)
10003eb4:	18800117 	ldw	r2,4(r3)
10003eb8:	1d400017 	ldw	r21,0(r3)
10003ebc:	18c00204 	addi	r3,r3,8
10003ec0:	d8c00615 	stw	r3,24(sp)
10003ec4:	1029883a 	mov	r20,r2
10003ec8:	003e8506 	br	100038e0 <___vfprintf_internal_r+0x608>
10003ecc:	d8c00617 	ldw	r3,24(sp)
10003ed0:	0005883a 	mov	r2,zero
10003ed4:	1d400017 	ldw	r21,0(r3)
10003ed8:	1d000117 	ldw	r20,4(r3)
10003edc:	18c00204 	addi	r3,r3,8
10003ee0:	d8c00615 	stw	r3,24(sp)
10003ee4:	003fd706 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003ee8:	d8c00617 	ldw	r3,24(sp)
10003eec:	00800044 	movi	r2,1
10003ef0:	1d400017 	ldw	r21,0(r3)
10003ef4:	1d000117 	ldw	r20,4(r3)
10003ef8:	18c00204 	addi	r3,r3,8
10003efc:	d8c00615 	stw	r3,24(sp)
10003f00:	003fd006 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10003f04:	a000111e 	bne	r20,zero,10003f4c <___vfprintf_internal_r+0xc74>
10003f08:	a88002a8 	cmpgeui	r2,r21,10
10003f0c:	10000f1e 	bne	r2,zero,10003f4c <___vfprintf_internal_r+0xc74>
10003f10:	ad400c04 	addi	r21,r21,48
10003f14:	dd4028c5 	stb	r21,163(sp)
10003f18:	6025883a 	mov	r18,r12
10003f1c:	05000044 	movi	r20,1
10003f20:	dc0028c4 	addi	r16,sp,163
10003f24:	582b883a 	mov	r21,r11
10003f28:	5d00010e 	bge	r11,r20,10003f30 <___vfprintf_internal_r+0xc58>
10003f2c:	a02b883a 	mov	r21,r20
10003f30:	d8000715 	stw	zero,28(sp)
10003f34:	6b403fcc 	andi	r13,r13,255
10003f38:	6b40201c 	xori	r13,r13,128
10003f3c:	6b7fe004 	addi	r13,r13,-128
10003f40:	683e8126 	beq	r13,zero,10003948 <___vfprintf_internal_r+0x670>
10003f44:	ad400044 	addi	r21,r21,1
10003f48:	003e7f06 	br	10003948 <___vfprintf_internal_r+0x670>
10003f4c:	dc400e15 	stw	r17,56(sp)
10003f50:	b821883a 	mov	r16,r23
10003f54:	a023883a 	mov	r17,r20
10003f58:	db000715 	stw	r12,28(sp)
10003f5c:	9829883a 	mov	r20,r19
10003f60:	dac00f15 	stw	r11,60(sp)
10003f64:	4025883a 	mov	r18,r8
10003f68:	6827883a 	mov	r19,r13
10003f6c:	00000206 	br	10003f78 <___vfprintf_internal_r+0xca0>
10003f70:	102b883a 	mov	r21,r2
10003f74:	1823883a 	mov	r17,r3
10003f78:	a809883a 	mov	r4,r21
10003f7c:	880b883a 	mov	r5,r17
10003f80:	01800284 	movi	r6,10
10003f84:	000f883a 	mov	r7,zero
10003f88:	000c8300 	call	1000c830 <__umoddi3>
10003f8c:	10800c04 	addi	r2,r2,48
10003f90:	843fffc4 	addi	r16,r16,-1
10003f94:	a809883a 	mov	r4,r21
10003f98:	880b883a 	mov	r5,r17
10003f9c:	80800005 	stb	r2,0(r16)
10003fa0:	01800284 	movi	r6,10
10003fa4:	000f883a 	mov	r7,zero
10003fa8:	000c2980 	call	1000c298 <__udivdi3>
10003fac:	883ff01e 	bne	r17,zero,10003f70 <___vfprintf_internal_r+0xc98>
10003fb0:	ad4002a8 	cmpgeui	r21,r21,10
10003fb4:	a83fee1e 	bne	r21,zero,10003f70 <___vfprintf_internal_r+0xc98>
10003fb8:	db000717 	ldw	r12,28(sp)
10003fbc:	dc400e17 	ldw	r17,56(sp)
10003fc0:	dac00f17 	ldw	r11,60(sp)
10003fc4:	981b883a 	mov	r13,r19
10003fc8:	9011883a 	mov	r8,r18
10003fcc:	a027883a 	mov	r19,r20
10003fd0:	bc29c83a 	sub	r20,r23,r16
10003fd4:	6025883a 	mov	r18,r12
10003fd8:	003fd206 	br	10003f24 <___vfprintf_internal_r+0xc4c>
10003fdc:	e2801990 	cmplti	r10,fp,102
10003fe0:	5000ea1e 	bne	r10,zero,1000438c <___vfprintf_internal_r+0x10b4>
10003fe4:	d9000917 	ldw	r4,36(sp)
10003fe8:	d9400a17 	ldw	r5,40(sp)
10003fec:	000d883a 	mov	r6,zero
10003ff0:	000f883a 	mov	r7,zero
10003ff4:	da000f15 	stw	r8,60(sp)
10003ff8:	d8c00e15 	stw	r3,56(sp)
10003ffc:	000e1700 	call	1000e170 <__eqdf2>
10004000:	d8c00e17 	ldw	r3,56(sp)
10004004:	da000f17 	ldw	r8,60(sp)
10004008:	1001891e 	bne	r2,zero,10004630 <___vfprintf_internal_r+0x1358>
1000400c:	d8801d17 	ldw	r2,116(sp)
10004010:	01040074 	movhi	r4,4097
10004014:	210a0404 	addi	r4,r4,10256
10004018:	10800044 	addi	r2,r2,1
1000401c:	18c00044 	addi	r3,r3,1
10004020:	41000015 	stw	r4,0(r8)
10004024:	01000044 	movi	r4,1
10004028:	d8801d15 	stw	r2,116(sp)
1000402c:	41000115 	stw	r4,4(r8)
10004030:	d8c01e15 	stw	r3,120(sp)
10004034:	10800208 	cmpgei	r2,r2,8
10004038:	1003331e 	bne	r2,zero,10004d08 <___vfprintf_internal_r+0x1a30>
1000403c:	42000204 	addi	r8,r8,8
10004040:	d8801617 	ldw	r2,88(sp)
10004044:	d8c00817 	ldw	r3,32(sp)
10004048:	10c00416 	blt	r2,r3,1000405c <___vfprintf_internal_r+0xd84>
1000404c:	9080004c 	andi	r2,r18,1
10004050:	1000021e 	bne	r2,zero,1000405c <___vfprintf_internal_r+0xd84>
10004054:	d8c01e17 	ldw	r3,120(sp)
10004058:	003e6e06 	br	10003a14 <___vfprintf_internal_r+0x73c>
1000405c:	d8800d17 	ldw	r2,52(sp)
10004060:	d8c01e17 	ldw	r3,120(sp)
10004064:	d9000b17 	ldw	r4,44(sp)
10004068:	40800015 	stw	r2,0(r8)
1000406c:	d8801d17 	ldw	r2,116(sp)
10004070:	20c7883a 	add	r3,r4,r3
10004074:	41000115 	stw	r4,4(r8)
10004078:	10800044 	addi	r2,r2,1
1000407c:	d8801d15 	stw	r2,116(sp)
10004080:	d8c01e15 	stw	r3,120(sp)
10004084:	10800208 	cmpgei	r2,r2,8
10004088:	1002b11e 	bne	r2,zero,10004b50 <___vfprintf_internal_r+0x1878>
1000408c:	42000204 	addi	r8,r8,8
10004090:	d8800817 	ldw	r2,32(sp)
10004094:	143fffc4 	addi	r16,r2,-1
10004098:	043e5e0e 	bge	zero,r16,10003a14 <___vfprintf_internal_r+0x73c>
1000409c:	03040074 	movhi	r12,4097
100040a0:	81000450 	cmplti	r4,r16,17
100040a4:	630a0484 	addi	r12,r12,10258
100040a8:	d8801d17 	ldw	r2,116(sp)
100040ac:	2003731e 	bne	r4,zero,10004e7c <___vfprintf_internal_r+0x1ba4>
100040b0:	dc400715 	stw	r17,28(sp)
100040b4:	05000404 	movi	r20,16
100040b8:	df000517 	ldw	fp,20(sp)
100040bc:	6023883a 	mov	r17,r12
100040c0:	00000406 	br	100040d4 <___vfprintf_internal_r+0xdfc>
100040c4:	42000204 	addi	r8,r8,8
100040c8:	843ffc04 	addi	r16,r16,-16
100040cc:	81000448 	cmpgei	r4,r16,17
100040d0:	20036826 	beq	r4,zero,10004e74 <___vfprintf_internal_r+0x1b9c>
100040d4:	10800044 	addi	r2,r2,1
100040d8:	18c00404 	addi	r3,r3,16
100040dc:	44400015 	stw	r17,0(r8)
100040e0:	45000115 	stw	r20,4(r8)
100040e4:	d8c01e15 	stw	r3,120(sp)
100040e8:	d8801d15 	stw	r2,116(sp)
100040ec:	11000208 	cmpgei	r4,r2,8
100040f0:	203ff426 	beq	r4,zero,100040c4 <___vfprintf_internal_r+0xdec>
100040f4:	d9801c04 	addi	r6,sp,112
100040f8:	980b883a 	mov	r5,r19
100040fc:	e009883a 	mov	r4,fp
10004100:	000a4500 	call	1000a450 <__sprint_r>
10004104:	103d531e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004108:	d8c01e17 	ldw	r3,120(sp)
1000410c:	d8801d17 	ldw	r2,116(sp)
10004110:	b811883a 	mov	r8,r23
10004114:	003fec06 	br	100040c8 <___vfprintf_internal_r+0xdf0>
10004118:	8d4fc83a 	sub	r7,r17,r21
1000411c:	01fe2f0e 	bge	zero,r7,100039dc <___vfprintf_internal_r+0x704>
10004120:	03040074 	movhi	r12,4097
10004124:	39000450 	cmplti	r4,r7,17
10004128:	630a0484 	addi	r12,r12,10258
1000412c:	d8801d17 	ldw	r2,116(sp)
10004130:	2000271e 	bne	r4,zero,100041d0 <___vfprintf_internal_r+0xef8>
10004134:	dc000e15 	stw	r16,56(sp)
10004138:	dc800f15 	stw	r18,60(sp)
1000413c:	dc401015 	stw	r17,64(sp)
10004140:	03400404 	movi	r13,16
10004144:	3821883a 	mov	r16,r7
10004148:	dac01215 	stw	r11,72(sp)
1000414c:	dc400517 	ldw	r17,20(sp)
10004150:	6025883a 	mov	r18,r12
10004154:	00000406 	br	10004168 <___vfprintf_internal_r+0xe90>
10004158:	843ffc04 	addi	r16,r16,-16
1000415c:	81000448 	cmpgei	r4,r16,17
10004160:	42000204 	addi	r8,r8,8
10004164:	20001426 	beq	r4,zero,100041b8 <___vfprintf_internal_r+0xee0>
10004168:	10800044 	addi	r2,r2,1
1000416c:	18c00404 	addi	r3,r3,16
10004170:	44800015 	stw	r18,0(r8)
10004174:	43400115 	stw	r13,4(r8)
10004178:	d8c01e15 	stw	r3,120(sp)
1000417c:	d8801d15 	stw	r2,116(sp)
10004180:	11000208 	cmpgei	r4,r2,8
10004184:	203ff426 	beq	r4,zero,10004158 <___vfprintf_internal_r+0xe80>
10004188:	d9801c04 	addi	r6,sp,112
1000418c:	980b883a 	mov	r5,r19
10004190:	8809883a 	mov	r4,r17
10004194:	000a4500 	call	1000a450 <__sprint_r>
10004198:	103d2e1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
1000419c:	843ffc04 	addi	r16,r16,-16
100041a0:	81000448 	cmpgei	r4,r16,17
100041a4:	d8c01e17 	ldw	r3,120(sp)
100041a8:	d8801d17 	ldw	r2,116(sp)
100041ac:	b811883a 	mov	r8,r23
100041b0:	03400404 	movi	r13,16
100041b4:	203fec1e 	bne	r4,zero,10004168 <___vfprintf_internal_r+0xe90>
100041b8:	800f883a 	mov	r7,r16
100041bc:	9019883a 	mov	r12,r18
100041c0:	dc000e17 	ldw	r16,56(sp)
100041c4:	dc401017 	ldw	r17,64(sp)
100041c8:	dac01217 	ldw	r11,72(sp)
100041cc:	dc800f17 	ldw	r18,60(sp)
100041d0:	10800044 	addi	r2,r2,1
100041d4:	19c7883a 	add	r3,r3,r7
100041d8:	d8801d15 	stw	r2,116(sp)
100041dc:	43000015 	stw	r12,0(r8)
100041e0:	41c00115 	stw	r7,4(r8)
100041e4:	d8c01e15 	stw	r3,120(sp)
100041e8:	10800208 	cmpgei	r2,r2,8
100041ec:	1002cd1e 	bne	r2,zero,10004d24 <___vfprintf_internal_r+0x1a4c>
100041f0:	5d0fc83a 	sub	r7,r11,r20
100041f4:	42000204 	addi	r8,r8,8
100041f8:	01fdfa0e 	bge	zero,r7,100039e4 <___vfprintf_internal_r+0x70c>
100041fc:	03040074 	movhi	r12,4097
10004200:	39000450 	cmplti	r4,r7,17
10004204:	630a0484 	addi	r12,r12,10258
10004208:	d8801d17 	ldw	r2,116(sp)
1000420c:	2000251e 	bne	r4,zero,100042a4 <___vfprintf_internal_r+0xfcc>
10004210:	dc000e15 	stw	r16,56(sp)
10004214:	dc800f15 	stw	r18,60(sp)
10004218:	dc401015 	stw	r17,64(sp)
1000421c:	02c00404 	movi	r11,16
10004220:	3821883a 	mov	r16,r7
10004224:	dc400517 	ldw	r17,20(sp)
10004228:	6025883a 	mov	r18,r12
1000422c:	00000406 	br	10004240 <___vfprintf_internal_r+0xf68>
10004230:	843ffc04 	addi	r16,r16,-16
10004234:	81000448 	cmpgei	r4,r16,17
10004238:	42000204 	addi	r8,r8,8
1000423c:	20001426 	beq	r4,zero,10004290 <___vfprintf_internal_r+0xfb8>
10004240:	10800044 	addi	r2,r2,1
10004244:	18c00404 	addi	r3,r3,16
10004248:	44800015 	stw	r18,0(r8)
1000424c:	42c00115 	stw	r11,4(r8)
10004250:	d8c01e15 	stw	r3,120(sp)
10004254:	d8801d15 	stw	r2,116(sp)
10004258:	11000208 	cmpgei	r4,r2,8
1000425c:	203ff426 	beq	r4,zero,10004230 <___vfprintf_internal_r+0xf58>
10004260:	d9801c04 	addi	r6,sp,112
10004264:	980b883a 	mov	r5,r19
10004268:	8809883a 	mov	r4,r17
1000426c:	000a4500 	call	1000a450 <__sprint_r>
10004270:	103cf81e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004274:	843ffc04 	addi	r16,r16,-16
10004278:	81000448 	cmpgei	r4,r16,17
1000427c:	d8c01e17 	ldw	r3,120(sp)
10004280:	d8801d17 	ldw	r2,116(sp)
10004284:	b811883a 	mov	r8,r23
10004288:	02c00404 	movi	r11,16
1000428c:	203fec1e 	bne	r4,zero,10004240 <___vfprintf_internal_r+0xf68>
10004290:	800f883a 	mov	r7,r16
10004294:	9019883a 	mov	r12,r18
10004298:	dc401017 	ldw	r17,64(sp)
1000429c:	dc000e17 	ldw	r16,56(sp)
100042a0:	dc800f17 	ldw	r18,60(sp)
100042a4:	10800044 	addi	r2,r2,1
100042a8:	19c7883a 	add	r3,r3,r7
100042ac:	d8801d15 	stw	r2,116(sp)
100042b0:	43000015 	stw	r12,0(r8)
100042b4:	41c00115 	stw	r7,4(r8)
100042b8:	d8c01e15 	stw	r3,120(sp)
100042bc:	10800208 	cmpgei	r2,r2,8
100042c0:	1001621e 	bne	r2,zero,1000484c <___vfprintf_internal_r+0x1574>
100042c4:	42000204 	addi	r8,r8,8
100042c8:	003dc606 	br	100039e4 <___vfprintf_internal_r+0x70c>
100042cc:	d9000517 	ldw	r4,20(sp)
100042d0:	d9801c04 	addi	r6,sp,112
100042d4:	980b883a 	mov	r5,r19
100042d8:	000a4500 	call	1000a450 <__sprint_r>
100042dc:	103dd726 	beq	r2,zero,10003a3c <___vfprintf_internal_r+0x764>
100042e0:	003cdc06 	br	10003654 <___vfprintf_internal_r+0x37c>
100042e4:	d9000517 	ldw	r4,20(sp)
100042e8:	d9801c04 	addi	r6,sp,112
100042ec:	980b883a 	mov	r5,r19
100042f0:	000a4500 	call	1000a450 <__sprint_r>
100042f4:	103cd71e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
100042f8:	d9001617 	ldw	r4,88(sp)
100042fc:	d8c01e17 	ldw	r3,120(sp)
10004300:	b811883a 	mov	r8,r23
10004304:	2002951e 	bne	r4,zero,10004d5c <___vfprintf_internal_r+0x1a84>
10004308:	d9000817 	ldw	r4,32(sp)
1000430c:	9080004c 	andi	r2,r18,1
10004310:	1104b03a 	or	r2,r2,r4
10004314:	103dbf26 	beq	r2,zero,10003a14 <___vfprintf_internal_r+0x73c>
10004318:	d8800d17 	ldw	r2,52(sp)
1000431c:	d9000b17 	ldw	r4,44(sp)
10004320:	40800015 	stw	r2,0(r8)
10004324:	d8801d17 	ldw	r2,116(sp)
10004328:	20c7883a 	add	r3,r4,r3
1000432c:	41000115 	stw	r4,4(r8)
10004330:	10800044 	addi	r2,r2,1
10004334:	d8c01e15 	stw	r3,120(sp)
10004338:	d8801d15 	stw	r2,116(sp)
1000433c:	11000208 	cmpgei	r4,r2,8
10004340:	2003641e 	bne	r4,zero,100050d4 <___vfprintf_internal_r+0x1dfc>
10004344:	42000204 	addi	r8,r8,8
10004348:	d9000817 	ldw	r4,32(sp)
1000434c:	10800044 	addi	r2,r2,1
10004350:	d8801d15 	stw	r2,116(sp)
10004354:	20c7883a 	add	r3,r4,r3
10004358:	44000015 	stw	r16,0(r8)
1000435c:	41000115 	stw	r4,4(r8)
10004360:	d8c01e15 	stw	r3,120(sp)
10004364:	10800208 	cmpgei	r2,r2,8
10004368:	103da926 	beq	r2,zero,10003a10 <___vfprintf_internal_r+0x738>
1000436c:	d9000517 	ldw	r4,20(sp)
10004370:	d9801c04 	addi	r6,sp,112
10004374:	980b883a 	mov	r5,r19
10004378:	000a4500 	call	1000a450 <__sprint_r>
1000437c:	103cb51e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004380:	d8c01e17 	ldw	r3,120(sp)
10004384:	b811883a 	mov	r8,r23
10004388:	003da206 	br	10003a14 <___vfprintf_internal_r+0x73c>
1000438c:	d8800817 	ldw	r2,32(sp)
10004390:	df001d17 	ldw	fp,116(sp)
10004394:	18c00044 	addi	r3,r3,1
10004398:	10800088 	cmpgei	r2,r2,2
1000439c:	e5000044 	addi	r20,fp,1
100043a0:	42800204 	addi	r10,r8,8
100043a4:	1000fb26 	beq	r2,zero,10004794 <___vfprintf_internal_r+0x14bc>
100043a8:	00800044 	movi	r2,1
100043ac:	40800115 	stw	r2,4(r8)
100043b0:	44000015 	stw	r16,0(r8)
100043b4:	d8c01e15 	stw	r3,120(sp)
100043b8:	dd001d15 	stw	r20,116(sp)
100043bc:	a0800210 	cmplti	r2,r20,8
100043c0:	10022c26 	beq	r2,zero,10004c74 <___vfprintf_internal_r+0x199c>
100043c4:	d8800b17 	ldw	r2,44(sp)
100043c8:	d9000d17 	ldw	r4,52(sp)
100043cc:	a5000044 	addi	r20,r20,1
100043d0:	1887883a 	add	r3,r3,r2
100043d4:	50800115 	stw	r2,4(r10)
100043d8:	51000015 	stw	r4,0(r10)
100043dc:	d8c01e15 	stw	r3,120(sp)
100043e0:	dd001d15 	stw	r20,116(sp)
100043e4:	a0800208 	cmpgei	r2,r20,8
100043e8:	1002191e 	bne	r2,zero,10004c50 <___vfprintf_internal_r+0x1978>
100043ec:	52800204 	addi	r10,r10,8
100043f0:	d8800817 	ldw	r2,32(sp)
100043f4:	d9000917 	ldw	r4,36(sp)
100043f8:	d9400a17 	ldw	r5,40(sp)
100043fc:	52000204 	addi	r8,r10,8
10004400:	12ffffc4 	addi	r11,r2,-1
10004404:	a7000044 	addi	fp,r20,1
10004408:	000d883a 	mov	r6,zero
1000440c:	000f883a 	mov	r7,zero
10004410:	d8c01215 	stw	r3,72(sp)
10004414:	da800f15 	stw	r10,60(sp)
10004418:	da000e15 	stw	r8,56(sp)
1000441c:	dac00715 	stw	r11,28(sp)
10004420:	df001015 	stw	fp,64(sp)
10004424:	000e1700 	call	1000e170 <__eqdf2>
10004428:	dac00717 	ldw	r11,28(sp)
1000442c:	da000e17 	ldw	r8,56(sp)
10004430:	da800f17 	ldw	r10,60(sp)
10004434:	db401017 	ldw	r13,64(sp)
10004438:	d8c01217 	ldw	r3,72(sp)
1000443c:	1000e126 	beq	r2,zero,100047c4 <___vfprintf_internal_r+0x14ec>
10004440:	84000044 	addi	r16,r16,1
10004444:	1ac7883a 	add	r3,r3,r11
10004448:	df001d15 	stw	fp,116(sp)
1000444c:	54000015 	stw	r16,0(r10)
10004450:	52c00115 	stw	r11,4(r10)
10004454:	d8c01e15 	stw	r3,120(sp)
10004458:	e7000208 	cmpgei	fp,fp,8
1000445c:	e001aa1e 	bne	fp,zero,10004b08 <___vfprintf_internal_r+0x1830>
10004460:	50800404 	addi	r2,r10,16
10004464:	a7000084 	addi	fp,r20,2
10004468:	4015883a 	mov	r10,r8
1000446c:	1011883a 	mov	r8,r2
10004470:	d9001117 	ldw	r4,68(sp)
10004474:	d8801844 	addi	r2,sp,97
10004478:	df001d15 	stw	fp,116(sp)
1000447c:	20c7883a 	add	r3,r4,r3
10004480:	50800015 	stw	r2,0(r10)
10004484:	51000115 	stw	r4,4(r10)
10004488:	d8c01e15 	stw	r3,120(sp)
1000448c:	e7000210 	cmplti	fp,fp,8
10004490:	e03d601e 	bne	fp,zero,10003a14 <___vfprintf_internal_r+0x73c>
10004494:	003fb506 	br	1000436c <___vfprintf_internal_r+0x1094>
10004498:	9019883a 	mov	r12,r18
1000449c:	003e1906 	br	10003d04 <___vfprintf_internal_r+0xa2c>
100044a0:	03040074 	movhi	r12,4097
100044a4:	39000450 	cmplti	r4,r7,17
100044a8:	630a0884 	addi	r12,r12,10274
100044ac:	d8801d17 	ldw	r2,116(sp)
100044b0:	20002b1e 	bne	r4,zero,10004560 <___vfprintf_internal_r+0x1288>
100044b4:	dc001015 	stw	r16,64(sp)
100044b8:	dc801215 	stw	r18,72(sp)
100044bc:	dc401315 	stw	r17,76(sp)
100044c0:	03c00404 	movi	r15,16
100044c4:	db800e15 	stw	r14,56(sp)
100044c8:	db400f15 	stw	r13,60(sp)
100044cc:	dac01415 	stw	r11,80(sp)
100044d0:	3821883a 	mov	r16,r7
100044d4:	dc400517 	ldw	r17,20(sp)
100044d8:	6025883a 	mov	r18,r12
100044dc:	00000406 	br	100044f0 <___vfprintf_internal_r+0x1218>
100044e0:	843ffc04 	addi	r16,r16,-16
100044e4:	81000448 	cmpgei	r4,r16,17
100044e8:	42000204 	addi	r8,r8,8
100044ec:	20001426 	beq	r4,zero,10004540 <___vfprintf_internal_r+0x1268>
100044f0:	10800044 	addi	r2,r2,1
100044f4:	18c00404 	addi	r3,r3,16
100044f8:	44800015 	stw	r18,0(r8)
100044fc:	43c00115 	stw	r15,4(r8)
10004500:	d8c01e15 	stw	r3,120(sp)
10004504:	d8801d15 	stw	r2,116(sp)
10004508:	11000208 	cmpgei	r4,r2,8
1000450c:	203ff426 	beq	r4,zero,100044e0 <___vfprintf_internal_r+0x1208>
10004510:	d9801c04 	addi	r6,sp,112
10004514:	980b883a 	mov	r5,r19
10004518:	8809883a 	mov	r4,r17
1000451c:	000a4500 	call	1000a450 <__sprint_r>
10004520:	103c4c1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004524:	843ffc04 	addi	r16,r16,-16
10004528:	81000448 	cmpgei	r4,r16,17
1000452c:	d8c01e17 	ldw	r3,120(sp)
10004530:	d8801d17 	ldw	r2,116(sp)
10004534:	b811883a 	mov	r8,r23
10004538:	03c00404 	movi	r15,16
1000453c:	203fec1e 	bne	r4,zero,100044f0 <___vfprintf_internal_r+0x1218>
10004540:	800f883a 	mov	r7,r16
10004544:	9019883a 	mov	r12,r18
10004548:	db800e17 	ldw	r14,56(sp)
1000454c:	db400f17 	ldw	r13,60(sp)
10004550:	dc401317 	ldw	r17,76(sp)
10004554:	dac01417 	ldw	r11,80(sp)
10004558:	dc001017 	ldw	r16,64(sp)
1000455c:	dc801217 	ldw	r18,72(sp)
10004560:	10800044 	addi	r2,r2,1
10004564:	19c7883a 	add	r3,r3,r7
10004568:	d8801d15 	stw	r2,116(sp)
1000456c:	43000015 	stw	r12,0(r8)
10004570:	41c00115 	stw	r7,4(r8)
10004574:	d8c01e15 	stw	r3,120(sp)
10004578:	10800208 	cmpgei	r2,r2,8
1000457c:	1001d41e 	bne	r2,zero,10004cd0 <___vfprintf_internal_r+0x19f8>
10004580:	42000204 	addi	r8,r8,8
10004584:	003cf806 	br	10003968 <___vfprintf_internal_r+0x690>
10004588:	d9000517 	ldw	r4,20(sp)
1000458c:	d9801c04 	addi	r6,sp,112
10004590:	980b883a 	mov	r5,r19
10004594:	dac01015 	stw	r11,64(sp)
10004598:	db400f15 	stw	r13,60(sp)
1000459c:	db800e15 	stw	r14,56(sp)
100045a0:	000a4500 	call	1000a450 <__sprint_r>
100045a4:	103c2b1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
100045a8:	d8c01e17 	ldw	r3,120(sp)
100045ac:	b811883a 	mov	r8,r23
100045b0:	dac01017 	ldw	r11,64(sp)
100045b4:	db400f17 	ldw	r13,60(sp)
100045b8:	db800e17 	ldw	r14,56(sp)
100045bc:	003cf806 	br	100039a0 <___vfprintf_internal_r+0x6c8>
100045c0:	d9000517 	ldw	r4,20(sp)
100045c4:	d9801c04 	addi	r6,sp,112
100045c8:	980b883a 	mov	r5,r19
100045cc:	dac00f15 	stw	r11,60(sp)
100045d0:	db400e15 	stw	r13,56(sp)
100045d4:	000a4500 	call	1000a450 <__sprint_r>
100045d8:	103c1e1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
100045dc:	d8c01e17 	ldw	r3,120(sp)
100045e0:	b811883a 	mov	r8,r23
100045e4:	dac00f17 	ldw	r11,60(sp)
100045e8:	db400e17 	ldw	r13,56(sp)
100045ec:	003cf906 	br	100039d4 <___vfprintf_internal_r+0x6fc>
100045f0:	d9000c17 	ldw	r4,48(sp)
100045f4:	b821883a 	mov	r16,r23
100045f8:	a88003cc 	andi	r2,r21,15
100045fc:	a006973a 	slli	r3,r20,28
10004600:	2085883a 	add	r2,r4,r2
10004604:	a82ad13a 	srli	r21,r21,4
10004608:	10800003 	ldbu	r2,0(r2)
1000460c:	a028d13a 	srli	r20,r20,4
10004610:	843fffc4 	addi	r16,r16,-1
10004614:	1d6ab03a 	or	r21,r3,r21
10004618:	80800005 	stb	r2,0(r16)
1000461c:	ad04b03a 	or	r2,r21,r20
10004620:	103ff51e 	bne	r2,zero,100045f8 <___vfprintf_internal_r+0x1320>
10004624:	bc29c83a 	sub	r20,r23,r16
10004628:	6025883a 	mov	r18,r12
1000462c:	003e3d06 	br	10003f24 <___vfprintf_internal_r+0xc4c>
10004630:	d9001617 	ldw	r4,88(sp)
10004634:	0101980e 	bge	zero,r4,10004c98 <___vfprintf_internal_r+0x19c0>
10004638:	d8800717 	ldw	r2,28(sp)
1000463c:	d9000817 	ldw	r4,32(sp)
10004640:	1039883a 	mov	fp,r2
10004644:	20812516 	blt	r4,r2,10004adc <___vfprintf_internal_r+0x1804>
10004648:	07000a0e 	bge	zero,fp,10004674 <___vfprintf_internal_r+0x139c>
1000464c:	d8801d17 	ldw	r2,116(sp)
10004650:	1f07883a 	add	r3,r3,fp
10004654:	44000015 	stw	r16,0(r8)
10004658:	10800044 	addi	r2,r2,1
1000465c:	d8801d15 	stw	r2,116(sp)
10004660:	47000115 	stw	fp,4(r8)
10004664:	d8c01e15 	stw	r3,120(sp)
10004668:	10800208 	cmpgei	r2,r2,8
1000466c:	1002d91e 	bne	r2,zero,100051d4 <___vfprintf_internal_r+0x1efc>
10004670:	42000204 	addi	r8,r8,8
10004674:	e0013e16 	blt	fp,zero,10004b70 <___vfprintf_internal_r+0x1898>
10004678:	d8800717 	ldw	r2,28(sp)
1000467c:	1739c83a 	sub	fp,r2,fp
10004680:	07014516 	blt	zero,fp,10004b98 <___vfprintf_internal_r+0x18c0>
10004684:	d9001617 	ldw	r4,88(sp)
10004688:	d8800817 	ldw	r2,32(sp)
1000468c:	2081160e 	bge	r4,r2,10004ae8 <___vfprintf_internal_r+0x1810>
10004690:	d8800d17 	ldw	r2,52(sp)
10004694:	d9400b17 	ldw	r5,44(sp)
10004698:	40800015 	stw	r2,0(r8)
1000469c:	d8801d17 	ldw	r2,116(sp)
100046a0:	1947883a 	add	r3,r3,r5
100046a4:	41400115 	stw	r5,4(r8)
100046a8:	10800044 	addi	r2,r2,1
100046ac:	d8801d15 	stw	r2,116(sp)
100046b0:	d8c01e15 	stw	r3,120(sp)
100046b4:	10800208 	cmpgei	r2,r2,8
100046b8:	1002601e 	bne	r2,zero,1000503c <___vfprintf_internal_r+0x1d64>
100046bc:	42000204 	addi	r8,r8,8
100046c0:	d8800817 	ldw	r2,32(sp)
100046c4:	d9400717 	ldw	r5,28(sp)
100046c8:	1105c83a 	sub	r2,r2,r4
100046cc:	29015c0e 	bge	r5,r4,10004c40 <___vfprintf_internal_r+0x1968>
100046d0:	1039883a 	mov	fp,r2
100046d4:	07000c0e 	bge	zero,fp,10004708 <___vfprintf_internal_r+0x1430>
100046d8:	d9000717 	ldw	r4,28(sp)
100046dc:	1f07883a 	add	r3,r3,fp
100046e0:	47000115 	stw	fp,4(r8)
100046e4:	8121883a 	add	r16,r16,r4
100046e8:	d9001d17 	ldw	r4,116(sp)
100046ec:	44000015 	stw	r16,0(r8)
100046f0:	d8c01e15 	stw	r3,120(sp)
100046f4:	21000044 	addi	r4,r4,1
100046f8:	d9001d15 	stw	r4,116(sp)
100046fc:	21000208 	cmpgei	r4,r4,8
10004700:	2002bf1e 	bne	r4,zero,10005200 <___vfprintf_internal_r+0x1f28>
10004704:	42000204 	addi	r8,r8,8
10004708:	e000010e 	bge	fp,zero,10004710 <___vfprintf_internal_r+0x1438>
1000470c:	0039883a 	mov	fp,zero
10004710:	1739c83a 	sub	fp,r2,fp
10004714:	073cbf0e 	bge	zero,fp,10003a14 <___vfprintf_internal_r+0x73c>
10004718:	03040074 	movhi	r12,4097
1000471c:	e1000450 	cmplti	r4,fp,17
10004720:	630a0484 	addi	r12,r12,10258
10004724:	d8801d17 	ldw	r2,116(sp)
10004728:	20023b1e 	bne	r4,zero,10005018 <___vfprintf_internal_r+0x1d40>
1000472c:	dc400715 	stw	r17,28(sp)
10004730:	05000404 	movi	r20,16
10004734:	dc000517 	ldw	r16,20(sp)
10004738:	6023883a 	mov	r17,r12
1000473c:	00000406 	br	10004750 <___vfprintf_internal_r+0x1478>
10004740:	42000204 	addi	r8,r8,8
10004744:	e73ffc04 	addi	fp,fp,-16
10004748:	e1000448 	cmpgei	r4,fp,17
1000474c:	20023026 	beq	r4,zero,10005010 <___vfprintf_internal_r+0x1d38>
10004750:	10800044 	addi	r2,r2,1
10004754:	18c00404 	addi	r3,r3,16
10004758:	44400015 	stw	r17,0(r8)
1000475c:	45000115 	stw	r20,4(r8)
10004760:	d8c01e15 	stw	r3,120(sp)
10004764:	d8801d15 	stw	r2,116(sp)
10004768:	11000208 	cmpgei	r4,r2,8
1000476c:	203ff426 	beq	r4,zero,10004740 <___vfprintf_internal_r+0x1468>
10004770:	d9801c04 	addi	r6,sp,112
10004774:	980b883a 	mov	r5,r19
10004778:	8009883a 	mov	r4,r16
1000477c:	000a4500 	call	1000a450 <__sprint_r>
10004780:	103bb41e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004784:	d8c01e17 	ldw	r3,120(sp)
10004788:	d8801d17 	ldw	r2,116(sp)
1000478c:	b811883a 	mov	r8,r23
10004790:	003fec06 	br	10004744 <___vfprintf_internal_r+0x146c>
10004794:	9080004c 	andi	r2,r18,1
10004798:	103f031e 	bne	r2,zero,100043a8 <___vfprintf_internal_r+0x10d0>
1000479c:	00800044 	movi	r2,1
100047a0:	dd001d15 	stw	r20,116(sp)
100047a4:	44000015 	stw	r16,0(r8)
100047a8:	40800115 	stw	r2,4(r8)
100047ac:	d8c01e15 	stw	r3,120(sp)
100047b0:	a5000208 	cmpgei	r20,r20,8
100047b4:	a000d41e 	bne	r20,zero,10004b08 <___vfprintf_internal_r+0x1830>
100047b8:	e7000084 	addi	fp,fp,2
100047bc:	42000404 	addi	r8,r8,16
100047c0:	003f2b06 	br	10004470 <___vfprintf_internal_r+0x1198>
100047c4:	02ff2a0e 	bge	zero,r11,10004470 <___vfprintf_internal_r+0x1198>
100047c8:	58800450 	cmplti	r2,r11,17
100047cc:	03040074 	movhi	r12,4097
100047d0:	1002f81e 	bne	r2,zero,100053b4 <___vfprintf_internal_r+0x20dc>
100047d4:	630a0484 	addi	r12,r12,10258
100047d8:	dc800715 	stw	r18,28(sp)
100047dc:	dc400e15 	stw	r17,56(sp)
100047e0:	04000404 	movi	r16,16
100047e4:	5823883a 	mov	r17,r11
100047e8:	df000517 	ldw	fp,20(sp)
100047ec:	6025883a 	mov	r18,r12
100047f0:	6829883a 	mov	r20,r13
100047f4:	00000506 	br	1000480c <___vfprintf_internal_r+0x1534>
100047f8:	52800204 	addi	r10,r10,8
100047fc:	8c7ffc04 	addi	r17,r17,-16
10004800:	88800448 	cmpgei	r2,r17,17
10004804:	10018a26 	beq	r2,zero,10004e30 <___vfprintf_internal_r+0x1b58>
10004808:	a5000044 	addi	r20,r20,1
1000480c:	18c00404 	addi	r3,r3,16
10004810:	54800015 	stw	r18,0(r10)
10004814:	54000115 	stw	r16,4(r10)
10004818:	d8c01e15 	stw	r3,120(sp)
1000481c:	dd001d15 	stw	r20,116(sp)
10004820:	a0800208 	cmpgei	r2,r20,8
10004824:	103ff426 	beq	r2,zero,100047f8 <___vfprintf_internal_r+0x1520>
10004828:	d9801c04 	addi	r6,sp,112
1000482c:	980b883a 	mov	r5,r19
10004830:	e009883a 	mov	r4,fp
10004834:	000a4500 	call	1000a450 <__sprint_r>
10004838:	103b861e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
1000483c:	dd001d17 	ldw	r20,116(sp)
10004840:	d8c01e17 	ldw	r3,120(sp)
10004844:	b815883a 	mov	r10,r23
10004848:	003fec06 	br	100047fc <___vfprintf_internal_r+0x1524>
1000484c:	d9000517 	ldw	r4,20(sp)
10004850:	d9801c04 	addi	r6,sp,112
10004854:	980b883a 	mov	r5,r19
10004858:	000a4500 	call	1000a450 <__sprint_r>
1000485c:	103b7d1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004860:	d8c01e17 	ldw	r3,120(sp)
10004864:	b811883a 	mov	r8,r23
10004868:	003c5e06 	br	100039e4 <___vfprintf_internal_r+0x70c>
1000486c:	0029883a 	mov	r20,zero
10004870:	003bdf06 	br	100037f0 <___vfprintf_internal_r+0x518>
10004874:	b025883a 	mov	r18,r22
10004878:	003aea06 	br	10003424 <___vfprintf_internal_r+0x14c>
1000487c:	b821883a 	mov	r16,r23
10004880:	003da806 	br	10003f24 <___vfprintf_internal_r+0xc4c>
10004884:	d9000917 	ldw	r4,36(sp)
10004888:	d9400a17 	ldw	r5,40(sp)
1000488c:	da000f15 	stw	r8,60(sp)
10004890:	200d883a 	mov	r6,r4
10004894:	280f883a 	mov	r7,r5
10004898:	dac00e15 	stw	r11,56(sp)
1000489c:	db000715 	stw	r12,28(sp)
100048a0:	000f3c80 	call	1000f3c8 <__unorddf2>
100048a4:	db000717 	ldw	r12,28(sp)
100048a8:	dac00e17 	ldw	r11,56(sp)
100048ac:	da000f17 	ldw	r8,60(sp)
100048b0:	1002af1e 	bne	r2,zero,10005370 <___vfprintf_internal_r+0x2098>
100048b4:	00fff7c4 	movi	r3,-33
100048b8:	e0c6703a 	and	r3,fp,r3
100048bc:	58bfffe0 	cmpeqi	r2,r11,-1
100048c0:	d8c00715 	stw	r3,28(sp)
100048c4:	10024c1e 	bne	r2,zero,100051f8 <___vfprintf_internal_r+0x1f20>
100048c8:	188011d8 	cmpnei	r2,r3,71
100048cc:	1001fe26 	beq	r2,zero,100050c8 <___vfprintf_internal_r+0x1df0>
100048d0:	d8800a17 	ldw	r2,40(sp)
100048d4:	64804014 	ori	r18,r12,256
100048d8:	1001e116 	blt	r2,zero,10005060 <___vfprintf_internal_r+0x1d88>
100048dc:	dd400a17 	ldw	r21,40(sp)
100048e0:	d8000e05 	stb	zero,56(sp)
100048e4:	e08019a0 	cmpeqi	r2,fp,102
100048e8:	d8800f15 	stw	r2,60(sp)
100048ec:	1001741e 	bne	r2,zero,10004ec0 <___vfprintf_internal_r+0x1be8>
100048f0:	e08011a0 	cmpeqi	r2,fp,70
100048f4:	1001721e 	bne	r2,zero,10004ec0 <___vfprintf_internal_r+0x1be8>
100048f8:	d8800717 	ldw	r2,28(sp)
100048fc:	da001215 	stw	r8,72(sp)
10004900:	db001015 	stw	r12,64(sp)
10004904:	10801158 	cmpnei	r2,r2,69
10004908:	10020526 	beq	r2,zero,10005120 <___vfprintf_internal_r+0x1e48>
1000490c:	d8801a04 	addi	r2,sp,104
10004910:	d8800315 	stw	r2,12(sp)
10004914:	d9400917 	ldw	r5,36(sp)
10004918:	d8801704 	addi	r2,sp,92
1000491c:	d9000517 	ldw	r4,20(sp)
10004920:	d8800215 	stw	r2,8(sp)
10004924:	d8801604 	addi	r2,sp,88
10004928:	dac00015 	stw	r11,0(sp)
1000492c:	d8800115 	stw	r2,4(sp)
10004930:	01c00084 	movi	r7,2
10004934:	a80d883a 	mov	r6,r21
10004938:	dac00815 	stw	r11,32(sp)
1000493c:	00058800 	call	10005880 <_dtoa_r>
10004940:	dac00817 	ldw	r11,32(sp)
10004944:	1021883a 	mov	r16,r2
10004948:	e08019d8 	cmpnei	r2,fp,103
1000494c:	db001017 	ldw	r12,64(sp)
10004950:	da001217 	ldw	r8,72(sp)
10004954:	5829883a 	mov	r20,r11
10004958:	1002031e 	bne	r2,zero,10005168 <___vfprintf_internal_r+0x1e90>
1000495c:	6080004c 	andi	r2,r12,1
10004960:	1002031e 	bne	r2,zero,10005170 <___vfprintf_internal_r+0x1e98>
10004964:	d8c01617 	ldw	r3,88(sp)
10004968:	d8800717 	ldw	r2,28(sp)
1000496c:	d8c00715 	stw	r3,28(sp)
10004970:	d8c01a17 	ldw	r3,104(sp)
10004974:	108011e0 	cmpeqi	r2,r2,71
10004978:	1c07c83a 	sub	r3,r3,r16
1000497c:	d8c00815 	stw	r3,32(sp)
10004980:	10000526 	beq	r2,zero,10004998 <___vfprintf_internal_r+0x16c0>
10004984:	d8c00717 	ldw	r3,28(sp)
10004988:	18bfff50 	cmplti	r2,r3,-3
1000498c:	1000011e 	bne	r2,zero,10004994 <___vfprintf_internal_r+0x16bc>
10004990:	58c2050e 	bge	r11,r3,100051a8 <___vfprintf_internal_r+0x1ed0>
10004994:	e73fff84 	addi	fp,fp,-2
10004998:	d8800717 	ldw	r2,28(sp)
1000499c:	df001845 	stb	fp,97(sp)
100049a0:	153fffc4 	addi	r20,r2,-1
100049a4:	dd001615 	stw	r20,88(sp)
100049a8:	a0027916 	blt	r20,zero,10005390 <___vfprintf_internal_r+0x20b8>
100049ac:	00800ac4 	movi	r2,43
100049b0:	d8801885 	stb	r2,98(sp)
100049b4:	a0800290 	cmplti	r2,r20,10
100049b8:	1002581e 	bne	r2,zero,1000531c <___vfprintf_internal_r+0x2044>
100049bc:	dc000715 	stw	r16,28(sp)
100049c0:	dd401bc4 	addi	r21,sp,111
100049c4:	a021883a 	mov	r16,r20
100049c8:	db000f15 	stw	r12,60(sp)
100049cc:	9829883a 	mov	r20,r19
100049d0:	4027883a 	mov	r19,r8
100049d4:	00000206 	br	100049e0 <___vfprintf_internal_r+0x1708>
100049d8:	202b883a 	mov	r21,r4
100049dc:	1021883a 	mov	r16,r2
100049e0:	8009883a 	mov	r4,r16
100049e4:	01400284 	movi	r5,10
100049e8:	000cdf00 	call	1000cdf0 <__modsi3>
100049ec:	10800c04 	addi	r2,r2,48
100049f0:	8009883a 	mov	r4,r16
100049f4:	a8bfffc5 	stb	r2,-1(r21)
100049f8:	01400284 	movi	r5,10
100049fc:	000cd700 	call	1000cd70 <__divsi3>
10004a00:	80c01908 	cmpgei	r3,r16,100
10004a04:	a93fffc4 	addi	r4,r21,-1
10004a08:	183ff31e 	bne	r3,zero,100049d8 <___vfprintf_internal_r+0x1700>
10004a0c:	10800c04 	addi	r2,r2,48
10004a10:	20bfffc5 	stb	r2,-1(r4)
10004a14:	a8ffff84 	addi	r3,r21,-2
10004a18:	d9001bc4 	addi	r4,sp,111
10004a1c:	9811883a 	mov	r8,r19
10004a20:	dc000717 	ldw	r16,28(sp)
10004a24:	db000f17 	ldw	r12,60(sp)
10004a28:	a027883a 	mov	r19,r20
10004a2c:	1902732e 	bgeu	r3,r4,100053fc <___vfprintf_internal_r+0x2124>
10004a30:	d90018c4 	addi	r4,sp,99
10004a34:	00000106 	br	10004a3c <___vfprintf_internal_r+0x1764>
10004a38:	18800003 	ldbu	r2,0(r3)
10004a3c:	21000044 	addi	r4,r4,1
10004a40:	20bfffc5 	stb	r2,-1(r4)
10004a44:	18c00044 	addi	r3,r3,1
10004a48:	d8801bc4 	addi	r2,sp,111
10004a4c:	18bffa1e 	bne	r3,r2,10004a38 <___vfprintf_internal_r+0x1760>
10004a50:	d8801c44 	addi	r2,sp,113
10004a54:	d8c018c4 	addi	r3,sp,99
10004a58:	1545c83a 	sub	r2,r2,r21
10004a5c:	1885883a 	add	r2,r3,r2
10004a60:	d8c01844 	addi	r3,sp,97
10004a64:	10c5c83a 	sub	r2,r2,r3
10004a68:	d8801115 	stw	r2,68(sp)
10004a6c:	d8c00817 	ldw	r3,32(sp)
10004a70:	d9001117 	ldw	r4,68(sp)
10004a74:	18800088 	cmpgei	r2,r3,2
10004a78:	1929883a 	add	r20,r3,r4
10004a7c:	10024926 	beq	r2,zero,100053a4 <___vfprintf_internal_r+0x20cc>
10004a80:	d8800b17 	ldw	r2,44(sp)
10004a84:	a0a9883a 	add	r20,r20,r2
10004a88:	a02b883a 	mov	r21,r20
10004a8c:	a000010e 	bge	r20,zero,10004a94 <___vfprintf_internal_r+0x17bc>
10004a90:	002b883a 	mov	r21,zero
10004a94:	d8000715 	stw	zero,28(sp)
10004a98:	00013f06 	br	10004f98 <___vfprintf_internal_r+0x1cc0>
10004a9c:	00800c04 	movi	r2,48
10004aa0:	d8801585 	stb	r2,86(sp)
10004aa4:	df0015c5 	stb	fp,87(sp)
10004aa8:	63000094 	ori	r12,r12,2
10004aac:	00800084 	movi	r2,2
10004ab0:	003ce406 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10004ab4:	d9400417 	ldw	r5,16(sp)
10004ab8:	20800017 	ldw	r2,0(r4)
10004abc:	d8c00615 	stw	r3,24(sp)
10004ac0:	2809d7fa 	srai	r4,r5,31
10004ac4:	11400015 	stw	r5,0(r2)
10004ac8:	11000115 	stw	r4,4(r2)
10004acc:	003a3706 	br	100033ac <___vfprintf_internal_r+0xd4>
10004ad0:	0463c83a 	sub	r17,zero,r17
10004ad4:	d8800615 	stw	r2,24(sp)
10004ad8:	003b1806 	br	1000373c <___vfprintf_internal_r+0x464>
10004adc:	2039883a 	mov	fp,r4
10004ae0:	073eda16 	blt	zero,fp,1000464c <___vfprintf_internal_r+0x1374>
10004ae4:	003ee306 	br	10004674 <___vfprintf_internal_r+0x139c>
10004ae8:	9080004c 	andi	r2,r18,1
10004aec:	103ee81e 	bne	r2,zero,10004690 <___vfprintf_internal_r+0x13b8>
10004af0:	d8800817 	ldw	r2,32(sp)
10004af4:	d9400717 	ldw	r5,28(sp)
10004af8:	1105c83a 	sub	r2,r2,r4
10004afc:	2900500e 	bge	r5,r4,10004c40 <___vfprintf_internal_r+0x1968>
10004b00:	1039883a 	mov	fp,r2
10004b04:	003f0006 	br	10004708 <___vfprintf_internal_r+0x1430>
10004b08:	d9000517 	ldw	r4,20(sp)
10004b0c:	d9801c04 	addi	r6,sp,112
10004b10:	980b883a 	mov	r5,r19
10004b14:	000a4500 	call	1000a450 <__sprint_r>
10004b18:	103ace1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004b1c:	df001d17 	ldw	fp,116(sp)
10004b20:	d8c01e17 	ldw	r3,120(sp)
10004b24:	da002b04 	addi	r8,sp,172
10004b28:	e7000044 	addi	fp,fp,1
10004b2c:	b815883a 	mov	r10,r23
10004b30:	003e4f06 	br	10004470 <___vfprintf_internal_r+0x1198>
10004b34:	b7000043 	ldbu	fp,1(r22)
10004b38:	63000814 	ori	r12,r12,32
10004b3c:	b5800044 	addi	r22,r22,1
10004b40:	e2803fcc 	andi	r10,fp,255
10004b44:	5280201c 	xori	r10,r10,128
10004b48:	52bfe004 	addi	r10,r10,-128
10004b4c:	003a3d06 	br	10003444 <___vfprintf_internal_r+0x16c>
10004b50:	d9000517 	ldw	r4,20(sp)
10004b54:	d9801c04 	addi	r6,sp,112
10004b58:	980b883a 	mov	r5,r19
10004b5c:	000a4500 	call	1000a450 <__sprint_r>
10004b60:	103abc1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004b64:	d8c01e17 	ldw	r3,120(sp)
10004b68:	b811883a 	mov	r8,r23
10004b6c:	003d4806 	br	10004090 <___vfprintf_internal_r+0xdb8>
10004b70:	0039883a 	mov	fp,zero
10004b74:	003ec006 	br	10004678 <___vfprintf_internal_r+0x13a0>
10004b78:	588001f0 	cmpltui	r2,r11,7
10004b7c:	5829883a 	mov	r20,r11
10004b80:	10013b26 	beq	r2,zero,10005070 <___vfprintf_internal_r+0x1d98>
10004b84:	04040074 	movhi	r16,4097
10004b88:	a02b883a 	mov	r21,r20
10004b8c:	dc800615 	stw	r18,24(sp)
10004b90:	840a0204 	addi	r16,r16,10248
10004b94:	003b6906 	br	1000393c <___vfprintf_internal_r+0x664>
10004b98:	03040074 	movhi	r12,4097
10004b9c:	e1000450 	cmplti	r4,fp,17
10004ba0:	630a0484 	addi	r12,r12,10258
10004ba4:	d8801d17 	ldw	r2,116(sp)
10004ba8:	20010b1e 	bne	r4,zero,10004fd8 <___vfprintf_internal_r+0x1d00>
10004bac:	b009883a 	mov	r4,r22
10004bb0:	dc000e15 	stw	r16,56(sp)
10004bb4:	dc800f15 	stw	r18,60(sp)
10004bb8:	882d883a 	mov	r22,r17
10004bbc:	05000404 	movi	r20,16
10004bc0:	e023883a 	mov	r17,fp
10004bc4:	dc000517 	ldw	r16,20(sp)
10004bc8:	6025883a 	mov	r18,r12
10004bcc:	2039883a 	mov	fp,r4
10004bd0:	00000406 	br	10004be4 <___vfprintf_internal_r+0x190c>
10004bd4:	42000204 	addi	r8,r8,8
10004bd8:	8c7ffc04 	addi	r17,r17,-16
10004bdc:	89000448 	cmpgei	r4,r17,17
10004be0:	2000f626 	beq	r4,zero,10004fbc <___vfprintf_internal_r+0x1ce4>
10004be4:	10800044 	addi	r2,r2,1
10004be8:	18c00404 	addi	r3,r3,16
10004bec:	44800015 	stw	r18,0(r8)
10004bf0:	45000115 	stw	r20,4(r8)
10004bf4:	d8c01e15 	stw	r3,120(sp)
10004bf8:	d8801d15 	stw	r2,116(sp)
10004bfc:	11000208 	cmpgei	r4,r2,8
10004c00:	203ff426 	beq	r4,zero,10004bd4 <___vfprintf_internal_r+0x18fc>
10004c04:	d9801c04 	addi	r6,sp,112
10004c08:	980b883a 	mov	r5,r19
10004c0c:	8009883a 	mov	r4,r16
10004c10:	000a4500 	call	1000a450 <__sprint_r>
10004c14:	103a8f1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004c18:	d8c01e17 	ldw	r3,120(sp)
10004c1c:	d8801d17 	ldw	r2,116(sp)
10004c20:	b811883a 	mov	r8,r23
10004c24:	003fec06 	br	10004bd8 <___vfprintf_internal_r+0x1900>
10004c28:	d8800617 	ldw	r2,24(sp)
10004c2c:	10800017 	ldw	r2,0(r2)
10004c30:	d8c00615 	stw	r3,24(sp)
10004c34:	d8c00417 	ldw	r3,16(sp)
10004c38:	10c00015 	stw	r3,0(r2)
10004c3c:	0039db06 	br	100033ac <___vfprintf_internal_r+0xd4>
10004c40:	d9000817 	ldw	r4,32(sp)
10004c44:	d9400717 	ldw	r5,28(sp)
10004c48:	2179c83a 	sub	fp,r4,r5
10004c4c:	003ea106 	br	100046d4 <___vfprintf_internal_r+0x13fc>
10004c50:	d9000517 	ldw	r4,20(sp)
10004c54:	d9801c04 	addi	r6,sp,112
10004c58:	980b883a 	mov	r5,r19
10004c5c:	000a4500 	call	1000a450 <__sprint_r>
10004c60:	103a7c1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004c64:	d8c01e17 	ldw	r3,120(sp)
10004c68:	dd001d17 	ldw	r20,116(sp)
10004c6c:	b815883a 	mov	r10,r23
10004c70:	003ddf06 	br	100043f0 <___vfprintf_internal_r+0x1118>
10004c74:	d9000517 	ldw	r4,20(sp)
10004c78:	d9801c04 	addi	r6,sp,112
10004c7c:	980b883a 	mov	r5,r19
10004c80:	000a4500 	call	1000a450 <__sprint_r>
10004c84:	103a731e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004c88:	d8c01e17 	ldw	r3,120(sp)
10004c8c:	dd001d17 	ldw	r20,116(sp)
10004c90:	b815883a 	mov	r10,r23
10004c94:	003dcb06 	br	100043c4 <___vfprintf_internal_r+0x10ec>
10004c98:	d8801d17 	ldw	r2,116(sp)
10004c9c:	01440074 	movhi	r5,4097
10004ca0:	294a0404 	addi	r5,r5,10256
10004ca4:	10800044 	addi	r2,r2,1
10004ca8:	18c00044 	addi	r3,r3,1
10004cac:	41400015 	stw	r5,0(r8)
10004cb0:	01400044 	movi	r5,1
10004cb4:	d8801d15 	stw	r2,116(sp)
10004cb8:	41400115 	stw	r5,4(r8)
10004cbc:	d8c01e15 	stw	r3,120(sp)
10004cc0:	10800208 	cmpgei	r2,r2,8
10004cc4:	103d871e 	bne	r2,zero,100042e4 <___vfprintf_internal_r+0x100c>
10004cc8:	42000204 	addi	r8,r8,8
10004ccc:	003d8d06 	br	10004304 <___vfprintf_internal_r+0x102c>
10004cd0:	d9000517 	ldw	r4,20(sp)
10004cd4:	d9801c04 	addi	r6,sp,112
10004cd8:	980b883a 	mov	r5,r19
10004cdc:	dac01015 	stw	r11,64(sp)
10004ce0:	db400f15 	stw	r13,60(sp)
10004ce4:	db800e15 	stw	r14,56(sp)
10004ce8:	000a4500 	call	1000a450 <__sprint_r>
10004cec:	103a591e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004cf0:	d8c01e17 	ldw	r3,120(sp)
10004cf4:	b811883a 	mov	r8,r23
10004cf8:	dac01017 	ldw	r11,64(sp)
10004cfc:	db400f17 	ldw	r13,60(sp)
10004d00:	db800e17 	ldw	r14,56(sp)
10004d04:	003b1806 	br	10003968 <___vfprintf_internal_r+0x690>
10004d08:	d9000517 	ldw	r4,20(sp)
10004d0c:	d9801c04 	addi	r6,sp,112
10004d10:	980b883a 	mov	r5,r19
10004d14:	000a4500 	call	1000a450 <__sprint_r>
10004d18:	103a4e1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004d1c:	b811883a 	mov	r8,r23
10004d20:	003cc706 	br	10004040 <___vfprintf_internal_r+0xd68>
10004d24:	d9000517 	ldw	r4,20(sp)
10004d28:	d9801c04 	addi	r6,sp,112
10004d2c:	980b883a 	mov	r5,r19
10004d30:	dac00e15 	stw	r11,56(sp)
10004d34:	000a4500 	call	1000a450 <__sprint_r>
10004d38:	103a461e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004d3c:	d8c01e17 	ldw	r3,120(sp)
10004d40:	b811883a 	mov	r8,r23
10004d44:	dac00e17 	ldw	r11,56(sp)
10004d48:	003b2406 	br	100039dc <___vfprintf_internal_r+0x704>
10004d4c:	10c00060 	cmpeqi	r3,r2,1
10004d50:	9019883a 	mov	r12,r18
10004d54:	183bed26 	beq	r3,zero,10003d0c <___vfprintf_internal_r+0xa34>
10004d58:	003c6d06 	br	10003f10 <___vfprintf_internal_r+0xc38>
10004d5c:	d8800d17 	ldw	r2,52(sp)
10004d60:	d9400b17 	ldw	r5,44(sp)
10004d64:	40800015 	stw	r2,0(r8)
10004d68:	d8801d17 	ldw	r2,116(sp)
10004d6c:	28c7883a 	add	r3,r5,r3
10004d70:	41400115 	stw	r5,4(r8)
10004d74:	10800044 	addi	r2,r2,1
10004d78:	d8c01e15 	stw	r3,120(sp)
10004d7c:	d8801d15 	stw	r2,116(sp)
10004d80:	11400208 	cmpgei	r5,r2,8
10004d84:	2800d31e 	bne	r5,zero,100050d4 <___vfprintf_internal_r+0x1dfc>
10004d88:	42000204 	addi	r8,r8,8
10004d8c:	203d6e0e 	bge	r4,zero,10004348 <___vfprintf_internal_r+0x1070>
10004d90:	03040074 	movhi	r12,4097
10004d94:	217ffc08 	cmpgei	r5,r4,-16
10004d98:	630a0484 	addi	r12,r12,10258
10004d9c:	0129c83a 	sub	r20,zero,r4
10004da0:	28014a1e 	bne	r5,zero,100052cc <___vfprintf_internal_r+0x1ff4>
10004da4:	dc000715 	stw	r16,28(sp)
10004da8:	07000404 	movi	fp,16
10004dac:	a021883a 	mov	r16,r20
10004db0:	8829883a 	mov	r20,r17
10004db4:	6023883a 	mov	r17,r12
10004db8:	00000406 	br	10004dcc <___vfprintf_internal_r+0x1af4>
10004dbc:	42000204 	addi	r8,r8,8
10004dc0:	843ffc04 	addi	r16,r16,-16
10004dc4:	81000448 	cmpgei	r4,r16,17
10004dc8:	20013c26 	beq	r4,zero,100052bc <___vfprintf_internal_r+0x1fe4>
10004dcc:	10800044 	addi	r2,r2,1
10004dd0:	18c00404 	addi	r3,r3,16
10004dd4:	44400015 	stw	r17,0(r8)
10004dd8:	47000115 	stw	fp,4(r8)
10004ddc:	d8c01e15 	stw	r3,120(sp)
10004de0:	d8801d15 	stw	r2,116(sp)
10004de4:	11000208 	cmpgei	r4,r2,8
10004de8:	203ff426 	beq	r4,zero,10004dbc <___vfprintf_internal_r+0x1ae4>
10004dec:	d9000517 	ldw	r4,20(sp)
10004df0:	d9801c04 	addi	r6,sp,112
10004df4:	980b883a 	mov	r5,r19
10004df8:	000a4500 	call	1000a450 <__sprint_r>
10004dfc:	103a151e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10004e00:	d8c01e17 	ldw	r3,120(sp)
10004e04:	d8801d17 	ldw	r2,116(sp)
10004e08:	b811883a 	mov	r8,r23
10004e0c:	003fec06 	br	10004dc0 <___vfprintf_internal_r+0x1ae8>
10004e10:	8009883a 	mov	r4,r16
10004e14:	00032400 	call	10003240 <strlen>
10004e18:	1029883a 	mov	r20,r2
10004e1c:	102b883a 	mov	r21,r2
10004e20:	dc800615 	stw	r18,24(sp)
10004e24:	db000717 	ldw	r12,28(sp)
10004e28:	da000e17 	ldw	r8,56(sp)
10004e2c:	003ac306 	br	1000393c <___vfprintf_internal_r+0x664>
10004e30:	8817883a 	mov	r11,r17
10004e34:	9019883a 	mov	r12,r18
10004e38:	dc400e17 	ldw	r17,56(sp)
10004e3c:	dc800717 	ldw	r18,28(sp)
10004e40:	a7000044 	addi	fp,r20,1
10004e44:	50800204 	addi	r2,r10,8
10004e48:	1ac7883a 	add	r3,r3,r11
10004e4c:	53000015 	stw	r12,0(r10)
10004e50:	52c00115 	stw	r11,4(r10)
10004e54:	d8c01e15 	stw	r3,120(sp)
10004e58:	df001d15 	stw	fp,116(sp)
10004e5c:	e1000208 	cmpgei	r4,fp,8
10004e60:	203f291e 	bne	r4,zero,10004b08 <___vfprintf_internal_r+0x1830>
10004e64:	e7000044 	addi	fp,fp,1
10004e68:	12000204 	addi	r8,r2,8
10004e6c:	1015883a 	mov	r10,r2
10004e70:	003d7f06 	br	10004470 <___vfprintf_internal_r+0x1198>
10004e74:	8819883a 	mov	r12,r17
10004e78:	dc400717 	ldw	r17,28(sp)
10004e7c:	10800044 	addi	r2,r2,1
10004e80:	1c07883a 	add	r3,r3,r16
10004e84:	d8801d15 	stw	r2,116(sp)
10004e88:	43000015 	stw	r12,0(r8)
10004e8c:	44000115 	stw	r16,4(r8)
10004e90:	d8c01e15 	stw	r3,120(sp)
10004e94:	10800208 	cmpgei	r2,r2,8
10004e98:	103add26 	beq	r2,zero,10003a10 <___vfprintf_internal_r+0x738>
10004e9c:	003d3306 	br	1000436c <___vfprintf_internal_r+0x1094>
10004ea0:	d8800615 	stw	r2,24(sp)
10004ea4:	0029883a 	mov	r20,zero
10004ea8:	0005883a 	mov	r2,zero
10004eac:	003be506 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10004eb0:	d8800615 	stw	r2,24(sp)
10004eb4:	0029883a 	mov	r20,zero
10004eb8:	00800044 	movi	r2,1
10004ebc:	003be106 	br	10003e44 <___vfprintf_internal_r+0xb6c>
10004ec0:	d8801a04 	addi	r2,sp,104
10004ec4:	d8800315 	stw	r2,12(sp)
10004ec8:	d9400917 	ldw	r5,36(sp)
10004ecc:	d8801704 	addi	r2,sp,92
10004ed0:	d9000517 	ldw	r4,20(sp)
10004ed4:	d8800215 	stw	r2,8(sp)
10004ed8:	d8801604 	addi	r2,sp,88
10004edc:	dac00015 	stw	r11,0(sp)
10004ee0:	d8800115 	stw	r2,4(sp)
10004ee4:	01c000c4 	movi	r7,3
10004ee8:	a80d883a 	mov	r6,r21
10004eec:	da001215 	stw	r8,72(sp)
10004ef0:	db001015 	stw	r12,64(sp)
10004ef4:	dac00815 	stw	r11,32(sp)
10004ef8:	00058800 	call	10005880 <_dtoa_r>
10004efc:	dac00817 	ldw	r11,32(sp)
10004f00:	1021883a 	mov	r16,r2
10004f04:	db001017 	ldw	r12,64(sp)
10004f08:	12e9883a 	add	r20,r2,r11
10004f0c:	80800007 	ldb	r2,0(r16)
10004f10:	da001217 	ldw	r8,72(sp)
10004f14:	10800c20 	cmpeqi	r2,r2,48
10004f18:	10005b1e 	bne	r2,zero,10005088 <___vfprintf_internal_r+0x1db0>
10004f1c:	d8801617 	ldw	r2,88(sp)
10004f20:	a0a9883a 	add	r20,r20,r2
10004f24:	d9000917 	ldw	r4,36(sp)
10004f28:	000d883a 	mov	r6,zero
10004f2c:	000f883a 	mov	r7,zero
10004f30:	a80b883a 	mov	r5,r21
10004f34:	da001215 	stw	r8,72(sp)
10004f38:	dac01015 	stw	r11,64(sp)
10004f3c:	db000815 	stw	r12,32(sp)
10004f40:	000e1700 	call	1000e170 <__eqdf2>
10004f44:	db000817 	ldw	r12,32(sp)
10004f48:	dac01017 	ldw	r11,64(sp)
10004f4c:	da001217 	ldw	r8,72(sp)
10004f50:	1000891e 	bne	r2,zero,10005178 <___vfprintf_internal_r+0x1ea0>
10004f54:	a005883a 	mov	r2,r20
10004f58:	1405c83a 	sub	r2,r2,r16
10004f5c:	d8c00717 	ldw	r3,28(sp)
10004f60:	d8800815 	stw	r2,32(sp)
10004f64:	d8801617 	ldw	r2,88(sp)
10004f68:	18c011d8 	cmpnei	r3,r3,71
10004f6c:	d8800715 	stw	r2,28(sp)
10004f70:	183e8426 	beq	r3,zero,10004984 <___vfprintf_internal_r+0x16ac>
10004f74:	d8800f17 	ldw	r2,60(sp)
10004f78:	103e8726 	beq	r2,zero,10004998 <___vfprintf_internal_r+0x16c0>
10004f7c:	d8c00717 	ldw	r3,28(sp)
10004f80:	6080004c 	andi	r2,r12,1
10004f84:	12c4b03a 	or	r2,r2,r11
10004f88:	00c10d0e 	bge	zero,r3,100053c0 <___vfprintf_internal_r+0x20e8>
10004f8c:	1000f11e 	bne	r2,zero,10005354 <___vfprintf_internal_r+0x207c>
10004f90:	dd000717 	ldw	r20,28(sp)
10004f94:	a02b883a 	mov	r21,r20
10004f98:	d8800e07 	ldb	r2,56(sp)
10004f9c:	10007f26 	beq	r2,zero,1000519c <___vfprintf_internal_r+0x1ec4>
10004fa0:	00800b44 	movi	r2,45
10004fa4:	d8801545 	stb	r2,85(sp)
10004fa8:	0017883a 	mov	r11,zero
10004fac:	003be506 	br	10003f44 <___vfprintf_internal_r+0xc6c>
10004fb0:	04040074 	movhi	r16,4097
10004fb4:	8409f404 	addi	r16,r16,10192
10004fb8:	003b3406 	br	10003c8c <___vfprintf_internal_r+0x9b4>
10004fbc:	9019883a 	mov	r12,r18
10004fc0:	dc000e17 	ldw	r16,56(sp)
10004fc4:	dc800f17 	ldw	r18,60(sp)
10004fc8:	e009883a 	mov	r4,fp
10004fcc:	8839883a 	mov	fp,r17
10004fd0:	b023883a 	mov	r17,r22
10004fd4:	202d883a 	mov	r22,r4
10004fd8:	10800044 	addi	r2,r2,1
10004fdc:	1f07883a 	add	r3,r3,fp
10004fe0:	d8801d15 	stw	r2,116(sp)
10004fe4:	43000015 	stw	r12,0(r8)
10004fe8:	47000115 	stw	fp,4(r8)
10004fec:	d8c01e15 	stw	r3,120(sp)
10004ff0:	10800208 	cmpgei	r2,r2,8
10004ff4:	1000421e 	bne	r2,zero,10005100 <___vfprintf_internal_r+0x1e28>
10004ff8:	42000204 	addi	r8,r8,8
10004ffc:	003da106 	br	10004684 <___vfprintf_internal_r+0x13ac>
10005000:	00800b44 	movi	r2,45
10005004:	d8801545 	stb	r2,85(sp)
10005008:	03400b44 	movi	r13,45
1000500c:	003b1b06 	br	10003c7c <___vfprintf_internal_r+0x9a4>
10005010:	8819883a 	mov	r12,r17
10005014:	dc400717 	ldw	r17,28(sp)
10005018:	10800044 	addi	r2,r2,1
1000501c:	1f07883a 	add	r3,r3,fp
10005020:	d8801d15 	stw	r2,116(sp)
10005024:	43000015 	stw	r12,0(r8)
10005028:	47000115 	stw	fp,4(r8)
1000502c:	d8c01e15 	stw	r3,120(sp)
10005030:	10800208 	cmpgei	r2,r2,8
10005034:	103a7626 	beq	r2,zero,10003a10 <___vfprintf_internal_r+0x738>
10005038:	003ccc06 	br	1000436c <___vfprintf_internal_r+0x1094>
1000503c:	d9000517 	ldw	r4,20(sp)
10005040:	d9801c04 	addi	r6,sp,112
10005044:	980b883a 	mov	r5,r19
10005048:	000a4500 	call	1000a450 <__sprint_r>
1000504c:	1039811e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10005050:	d9001617 	ldw	r4,88(sp)
10005054:	d8c01e17 	ldw	r3,120(sp)
10005058:	b811883a 	mov	r8,r23
1000505c:	003d9806 	br	100046c0 <___vfprintf_internal_r+0x13e8>
10005060:	1560003c 	xorhi	r21,r2,32768
10005064:	00800b44 	movi	r2,45
10005068:	d8800e05 	stb	r2,56(sp)
1000506c:	003e1d06 	br	100048e4 <___vfprintf_internal_r+0x160c>
10005070:	05000184 	movi	r20,6
10005074:	003ec306 	br	10004b84 <___vfprintf_internal_r+0x18ac>
10005078:	002b883a 	mov	r21,zero
1000507c:	003a0706 	br	1000389c <___vfprintf_internal_r+0x5c4>
10005080:	d9401545 	stb	r5,85(sp)
10005084:	00399106 	br	100036cc <___vfprintf_internal_r+0x3f4>
10005088:	d9000917 	ldw	r4,36(sp)
1000508c:	000d883a 	mov	r6,zero
10005090:	000f883a 	mov	r7,zero
10005094:	a80b883a 	mov	r5,r21
10005098:	da001215 	stw	r8,72(sp)
1000509c:	dac01015 	stw	r11,64(sp)
100050a0:	db000815 	stw	r12,32(sp)
100050a4:	000e1700 	call	1000e170 <__eqdf2>
100050a8:	db000817 	ldw	r12,32(sp)
100050ac:	dac01017 	ldw	r11,64(sp)
100050b0:	da001217 	ldw	r8,72(sp)
100050b4:	103f9926 	beq	r2,zero,10004f1c <___vfprintf_internal_r+0x1c44>
100050b8:	00800044 	movi	r2,1
100050bc:	12c5c83a 	sub	r2,r2,r11
100050c0:	d8801615 	stw	r2,88(sp)
100050c4:	003f9606 	br	10004f20 <___vfprintf_internal_r+0x1c48>
100050c8:	583e011e 	bne	r11,zero,100048d0 <___vfprintf_internal_r+0x15f8>
100050cc:	02c00044 	movi	r11,1
100050d0:	003dff06 	br	100048d0 <___vfprintf_internal_r+0x15f8>
100050d4:	d9000517 	ldw	r4,20(sp)
100050d8:	d9801c04 	addi	r6,sp,112
100050dc:	980b883a 	mov	r5,r19
100050e0:	000a4500 	call	1000a450 <__sprint_r>
100050e4:	10395b1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
100050e8:	d9001617 	ldw	r4,88(sp)
100050ec:	d8c01e17 	ldw	r3,120(sp)
100050f0:	d8801d17 	ldw	r2,116(sp)
100050f4:	b811883a 	mov	r8,r23
100050f8:	203c930e 	bge	r4,zero,10004348 <___vfprintf_internal_r+0x1070>
100050fc:	003f2406 	br	10004d90 <___vfprintf_internal_r+0x1ab8>
10005100:	d9000517 	ldw	r4,20(sp)
10005104:	d9801c04 	addi	r6,sp,112
10005108:	980b883a 	mov	r5,r19
1000510c:	000a4500 	call	1000a450 <__sprint_r>
10005110:	1039501e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10005114:	d8c01e17 	ldw	r3,120(sp)
10005118:	b811883a 	mov	r8,r23
1000511c:	003d5906 	br	10004684 <___vfprintf_internal_r+0x13ac>
10005120:	d8801a04 	addi	r2,sp,104
10005124:	d8800315 	stw	r2,12(sp)
10005128:	d9400917 	ldw	r5,36(sp)
1000512c:	d8801704 	addi	r2,sp,92
10005130:	d9000517 	ldw	r4,20(sp)
10005134:	5d000044 	addi	r20,r11,1
10005138:	d8800215 	stw	r2,8(sp)
1000513c:	d8801604 	addi	r2,sp,88
10005140:	d8800115 	stw	r2,4(sp)
10005144:	dd000015 	stw	r20,0(sp)
10005148:	01c00084 	movi	r7,2
1000514c:	a80d883a 	mov	r6,r21
10005150:	dac00815 	stw	r11,32(sp)
10005154:	00058800 	call	10005880 <_dtoa_r>
10005158:	dac00817 	ldw	r11,32(sp)
1000515c:	db001017 	ldw	r12,64(sp)
10005160:	da001217 	ldw	r8,72(sp)
10005164:	1021883a 	mov	r16,r2
10005168:	e08011d8 	cmpnei	r2,fp,71
1000516c:	103dfb26 	beq	r2,zero,1000495c <___vfprintf_internal_r+0x1684>
10005170:	8529883a 	add	r20,r16,r20
10005174:	003f6b06 	br	10004f24 <___vfprintf_internal_r+0x1c4c>
10005178:	d8801a17 	ldw	r2,104(sp)
1000517c:	01000c04 	movi	r4,48
10005180:	153f752e 	bgeu	r2,r20,10004f58 <___vfprintf_internal_r+0x1c80>
10005184:	10c00044 	addi	r3,r2,1
10005188:	d8c01a15 	stw	r3,104(sp)
1000518c:	11000005 	stb	r4,0(r2)
10005190:	d8801a17 	ldw	r2,104(sp)
10005194:	153ffb36 	bltu	r2,r20,10005184 <___vfprintf_internal_r+0x1eac>
10005198:	003f6f06 	br	10004f58 <___vfprintf_internal_r+0x1c80>
1000519c:	db401543 	ldbu	r13,85(sp)
100051a0:	0017883a 	mov	r11,zero
100051a4:	003b6306 	br	10003f34 <___vfprintf_internal_r+0xc5c>
100051a8:	d8800717 	ldw	r2,28(sp)
100051ac:	d8c00817 	ldw	r3,32(sp)
100051b0:	10c02216 	blt	r2,r3,1000523c <___vfprintf_internal_r+0x1f64>
100051b4:	6300004c 	andi	r12,r12,1
100051b8:	60005f1e 	bne	r12,zero,10005338 <___vfprintf_internal_r+0x2060>
100051bc:	102b883a 	mov	r21,r2
100051c0:	1000010e 	bge	r2,zero,100051c8 <___vfprintf_internal_r+0x1ef0>
100051c4:	002b883a 	mov	r21,zero
100051c8:	dd000717 	ldw	r20,28(sp)
100051cc:	070019c4 	movi	fp,103
100051d0:	003f7106 	br	10004f98 <___vfprintf_internal_r+0x1cc0>
100051d4:	d9000517 	ldw	r4,20(sp)
100051d8:	d9801c04 	addi	r6,sp,112
100051dc:	980b883a 	mov	r5,r19
100051e0:	000a4500 	call	1000a450 <__sprint_r>
100051e4:	10391b1e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
100051e8:	d8c01e17 	ldw	r3,120(sp)
100051ec:	b811883a 	mov	r8,r23
100051f0:	e03d210e 	bge	fp,zero,10004678 <___vfprintf_internal_r+0x13a0>
100051f4:	003e5e06 	br	10004b70 <___vfprintf_internal_r+0x1898>
100051f8:	02c00184 	movi	r11,6
100051fc:	003db406 	br	100048d0 <___vfprintf_internal_r+0x15f8>
10005200:	d9000517 	ldw	r4,20(sp)
10005204:	d9801c04 	addi	r6,sp,112
10005208:	980b883a 	mov	r5,r19
1000520c:	000a4500 	call	1000a450 <__sprint_r>
10005210:	1039101e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10005214:	d8801617 	ldw	r2,88(sp)
10005218:	d9000817 	ldw	r4,32(sp)
1000521c:	d8c01e17 	ldw	r3,120(sp)
10005220:	b811883a 	mov	r8,r23
10005224:	2085c83a 	sub	r2,r4,r2
10005228:	003d3706 	br	10004708 <___vfprintf_internal_r+0x1430>
1000522c:	582b883a 	mov	r21,r11
10005230:	dc800615 	stw	r18,24(sp)
10005234:	5829883a 	mov	r20,r11
10005238:	0039c006 	br	1000393c <___vfprintf_internal_r+0x664>
1000523c:	d8800817 	ldw	r2,32(sp)
10005240:	d8c00b17 	ldw	r3,44(sp)
10005244:	10e9883a 	add	r20,r2,r3
10005248:	d8800717 	ldw	r2,28(sp)
1000524c:	00800316 	blt	zero,r2,1000525c <___vfprintf_internal_r+0x1f84>
10005250:	d8800717 	ldw	r2,28(sp)
10005254:	a0b9c83a 	sub	fp,r20,r2
10005258:	e5000044 	addi	r20,fp,1
1000525c:	a02b883a 	mov	r21,r20
10005260:	a0003a16 	blt	r20,zero,1000534c <___vfprintf_internal_r+0x2074>
10005264:	070019c4 	movi	fp,103
10005268:	003f4b06 	br	10004f98 <___vfprintf_internal_r+0x1cc0>
1000526c:	d9401545 	stb	r5,85(sp)
10005270:	003ac506 	br	10003d88 <___vfprintf_internal_r+0xab0>
10005274:	d9401545 	stb	r5,85(sp)
10005278:	003a2506 	br	10003b10 <___vfprintf_internal_r+0x838>
1000527c:	d9401545 	stb	r5,85(sp)
10005280:	003a3306 	br	10003b50 <___vfprintf_internal_r+0x878>
10005284:	d9401545 	stb	r5,85(sp)
10005288:	00398806 	br	100038ac <___vfprintf_internal_r+0x5d4>
1000528c:	d9401545 	stb	r5,85(sp)
10005290:	00395f06 	br	10003810 <___vfprintf_internal_r+0x538>
10005294:	d9401545 	stb	r5,85(sp)
10005298:	00394b06 	br	100037c8 <___vfprintf_internal_r+0x4f0>
1000529c:	d9401545 	stb	r5,85(sp)
100052a0:	003a3b06 	br	10003b90 <___vfprintf_internal_r+0x8b8>
100052a4:	d9401545 	stb	r5,85(sp)
100052a8:	003a8106 	br	10003cb0 <___vfprintf_internal_r+0x9d8>
100052ac:	d9401545 	stb	r5,85(sp)
100052b0:	003a4706 	br	10003bd0 <___vfprintf_internal_r+0x8f8>
100052b4:	d9401545 	stb	r5,85(sp)
100052b8:	003ac506 	br	10003dd0 <___vfprintf_internal_r+0xaf8>
100052bc:	8819883a 	mov	r12,r17
100052c0:	a023883a 	mov	r17,r20
100052c4:	8029883a 	mov	r20,r16
100052c8:	dc000717 	ldw	r16,28(sp)
100052cc:	10800044 	addi	r2,r2,1
100052d0:	1d07883a 	add	r3,r3,r20
100052d4:	43000015 	stw	r12,0(r8)
100052d8:	45000115 	stw	r20,4(r8)
100052dc:	d8c01e15 	stw	r3,120(sp)
100052e0:	d8801d15 	stw	r2,116(sp)
100052e4:	11000208 	cmpgei	r4,r2,8
100052e8:	203c1626 	beq	r4,zero,10004344 <___vfprintf_internal_r+0x106c>
100052ec:	d9000517 	ldw	r4,20(sp)
100052f0:	d9801c04 	addi	r6,sp,112
100052f4:	980b883a 	mov	r5,r19
100052f8:	000a4500 	call	1000a450 <__sprint_r>
100052fc:	1038d51e 	bne	r2,zero,10003654 <___vfprintf_internal_r+0x37c>
10005300:	d8c01e17 	ldw	r3,120(sp)
10005304:	d8801d17 	ldw	r2,116(sp)
10005308:	b811883a 	mov	r8,r23
1000530c:	003c0e06 	br	10004348 <___vfprintf_internal_r+0x1070>
10005310:	00bfffc4 	movi	r2,-1
10005314:	d8800415 	stw	r2,16(sp)
10005318:	0038d106 	br	10003660 <___vfprintf_internal_r+0x388>
1000531c:	00800c04 	movi	r2,48
10005320:	a0c00c04 	addi	r3,r20,48
10005324:	d88018c5 	stb	r2,99(sp)
10005328:	00800104 	movi	r2,4
1000532c:	d8c01905 	stb	r3,100(sp)
10005330:	d8801115 	stw	r2,68(sp)
10005334:	003dcd06 	br	10004a6c <___vfprintf_internal_r+0x1794>
10005338:	d8800717 	ldw	r2,28(sp)
1000533c:	d8c00b17 	ldw	r3,44(sp)
10005340:	10e9883a 	add	r20,r2,r3
10005344:	a02b883a 	mov	r21,r20
10005348:	a03fc60e 	bge	r20,zero,10005264 <___vfprintf_internal_r+0x1f8c>
1000534c:	002b883a 	mov	r21,zero
10005350:	003fc406 	br	10005264 <___vfprintf_internal_r+0x1f8c>
10005354:	d8800b17 	ldw	r2,44(sp)
10005358:	1885883a 	add	r2,r3,r2
1000535c:	12e9883a 	add	r20,r2,r11
10005360:	a02b883a 	mov	r21,r20
10005364:	a03f0c0e 	bge	r20,zero,10004f98 <___vfprintf_internal_r+0x1cc0>
10005368:	002b883a 	mov	r21,zero
1000536c:	003f0a06 	br	10004f98 <___vfprintf_internal_r+0x1cc0>
10005370:	d8800a17 	ldw	r2,40(sp)
10005374:	10001d16 	blt	r2,zero,100053ec <___vfprintf_internal_r+0x2114>
10005378:	db401543 	ldbu	r13,85(sp)
1000537c:	e0801210 	cmplti	r2,fp,72
10005380:	1000171e 	bne	r2,zero,100053e0 <___vfprintf_internal_r+0x2108>
10005384:	04040074 	movhi	r16,4097
10005388:	8409f704 	addi	r16,r16,10204
1000538c:	003a3f06 	br	10003c8c <___vfprintf_internal_r+0x9b4>
10005390:	00c00044 	movi	r3,1
10005394:	18a9c83a 	sub	r20,r3,r2
10005398:	00800b44 	movi	r2,45
1000539c:	d8801885 	stb	r2,98(sp)
100053a0:	003d8406 	br	100049b4 <___vfprintf_internal_r+0x16dc>
100053a4:	6080004c 	andi	r2,r12,1
100053a8:	d8800715 	stw	r2,28(sp)
100053ac:	103db41e 	bne	r2,zero,10004a80 <___vfprintf_internal_r+0x17a8>
100053b0:	003feb06 	br	10005360 <___vfprintf_internal_r+0x2088>
100053b4:	4005883a 	mov	r2,r8
100053b8:	630a0484 	addi	r12,r12,10258
100053bc:	003ea206 	br	10004e48 <___vfprintf_internal_r+0x1b70>
100053c0:	1000031e 	bne	r2,zero,100053d0 <___vfprintf_internal_r+0x20f8>
100053c4:	05400044 	movi	r21,1
100053c8:	05000044 	movi	r20,1
100053cc:	003ef206 	br	10004f98 <___vfprintf_internal_r+0x1cc0>
100053d0:	d8800b17 	ldw	r2,44(sp)
100053d4:	10800044 	addi	r2,r2,1
100053d8:	12e9883a 	add	r20,r2,r11
100053dc:	003fe006 	br	10005360 <___vfprintf_internal_r+0x2088>
100053e0:	04040074 	movhi	r16,4097
100053e4:	8409f604 	addi	r16,r16,10200
100053e8:	003a2806 	br	10003c8c <___vfprintf_internal_r+0x9b4>
100053ec:	00800b44 	movi	r2,45
100053f0:	d8801545 	stb	r2,85(sp)
100053f4:	03400b44 	movi	r13,45
100053f8:	003fe006 	br	1000537c <___vfprintf_internal_r+0x20a4>
100053fc:	00800084 	movi	r2,2
10005400:	d8801115 	stw	r2,68(sp)
10005404:	003d9906 	br	10004a6c <___vfprintf_internal_r+0x1794>
10005408:	d8800617 	ldw	r2,24(sp)
1000540c:	12c00017 	ldw	r11,0(r2)
10005410:	10800104 	addi	r2,r2,4
10005414:	5800010e 	bge	r11,zero,1000541c <___vfprintf_internal_r+0x2144>
10005418:	02ffffc4 	movi	r11,-1
1000541c:	b7000043 	ldbu	fp,1(r22)
10005420:	d8800615 	stw	r2,24(sp)
10005424:	182d883a 	mov	r22,r3
10005428:	e2803fcc 	andi	r10,fp,255
1000542c:	5280201c 	xori	r10,r10,128
10005430:	52bfe004 	addi	r10,r10,-128
10005434:	00380306 	br	10003444 <___vfprintf_internal_r+0x16c>

10005438 <__vfprintf_internal>:
10005438:	00840074 	movhi	r2,4097
1000543c:	300f883a 	mov	r7,r6
10005440:	280d883a 	mov	r6,r5
10005444:	200b883a 	mov	r5,r4
10005448:	1113ce17 	ldw	r4,20280(r2)
1000544c:	00032d81 	jmpi	100032d8 <___vfprintf_internal_r>

10005450 <__sbprintf>:
10005450:	2880030b 	ldhu	r2,12(r5)
10005454:	2b001917 	ldw	r12,100(r5)
10005458:	2ac0038b 	ldhu	r11,14(r5)
1000545c:	2a800717 	ldw	r10,28(r5)
10005460:	2a400917 	ldw	r9,36(r5)
10005464:	defee204 	addi	sp,sp,-1144
10005468:	da001a04 	addi	r8,sp,104
1000546c:	00c10004 	movi	r3,1024
10005470:	dc011a15 	stw	r16,1128(sp)
10005474:	10bfff4c 	andi	r2,r2,65533
10005478:	2821883a 	mov	r16,r5
1000547c:	d80b883a 	mov	r5,sp
10005480:	dc811c15 	stw	r18,1136(sp)
10005484:	dc411b15 	stw	r17,1132(sp)
10005488:	dfc11d15 	stw	ra,1140(sp)
1000548c:	2025883a 	mov	r18,r4
10005490:	d880030d 	sth	r2,12(sp)
10005494:	db001915 	stw	r12,100(sp)
10005498:	dac0038d 	sth	r11,14(sp)
1000549c:	da800715 	stw	r10,28(sp)
100054a0:	da400915 	stw	r9,36(sp)
100054a4:	da000015 	stw	r8,0(sp)
100054a8:	da000415 	stw	r8,16(sp)
100054ac:	d8c00215 	stw	r3,8(sp)
100054b0:	d8c00515 	stw	r3,20(sp)
100054b4:	d8000615 	stw	zero,24(sp)
100054b8:	00032d80 	call	100032d8 <___vfprintf_internal_r>
100054bc:	1023883a 	mov	r17,r2
100054c0:	10000d0e 	bge	r2,zero,100054f8 <__sbprintf+0xa8>
100054c4:	d880030b 	ldhu	r2,12(sp)
100054c8:	1080100c 	andi	r2,r2,64
100054cc:	10000326 	beq	r2,zero,100054dc <__sbprintf+0x8c>
100054d0:	8080030b 	ldhu	r2,12(r16)
100054d4:	10801014 	ori	r2,r2,64
100054d8:	8080030d 	sth	r2,12(r16)
100054dc:	8805883a 	mov	r2,r17
100054e0:	dfc11d17 	ldw	ra,1140(sp)
100054e4:	dc811c17 	ldw	r18,1136(sp)
100054e8:	dc411b17 	ldw	r17,1132(sp)
100054ec:	dc011a17 	ldw	r16,1128(sp)
100054f0:	dec11e04 	addi	sp,sp,1144
100054f4:	f800283a 	ret
100054f8:	d80b883a 	mov	r5,sp
100054fc:	9009883a 	mov	r4,r18
10005500:	00071700 	call	10007170 <_fflush_r>
10005504:	103fef26 	beq	r2,zero,100054c4 <__sbprintf+0x74>
10005508:	047fffc4 	movi	r17,-1
1000550c:	003fed06 	br	100054c4 <__sbprintf+0x74>

10005510 <__swsetup_r>:
10005510:	00840074 	movhi	r2,4097
10005514:	1093ce17 	ldw	r2,20280(r2)
10005518:	defffd04 	addi	sp,sp,-12
1000551c:	dc400115 	stw	r17,4(sp)
10005520:	dc000015 	stw	r16,0(sp)
10005524:	dfc00215 	stw	ra,8(sp)
10005528:	2023883a 	mov	r17,r4
1000552c:	2821883a 	mov	r16,r5
10005530:	10000226 	beq	r2,zero,1000553c <__swsetup_r+0x2c>
10005534:	10c00e17 	ldw	r3,56(r2)
10005538:	18002026 	beq	r3,zero,100055bc <__swsetup_r+0xac>
1000553c:	8080030b 	ldhu	r2,12(r16)
10005540:	10c0020c 	andi	r3,r2,8
10005544:	1009883a 	mov	r4,r2
10005548:	18002226 	beq	r3,zero,100055d4 <__swsetup_r+0xc4>
1000554c:	80c00417 	ldw	r3,16(r16)
10005550:	18002826 	beq	r3,zero,100055f4 <__swsetup_r+0xe4>
10005554:	1100004c 	andi	r4,r2,1
10005558:	20000b1e 	bne	r4,zero,10005588 <__swsetup_r+0x78>
1000555c:	1080008c 	andi	r2,r2,2
10005560:	10002d1e 	bne	r2,zero,10005618 <__swsetup_r+0x108>
10005564:	80800517 	ldw	r2,20(r16)
10005568:	80800215 	stw	r2,8(r16)
1000556c:	18000b26 	beq	r3,zero,1000559c <__swsetup_r+0x8c>
10005570:	0005883a 	mov	r2,zero
10005574:	dfc00217 	ldw	ra,8(sp)
10005578:	dc400117 	ldw	r17,4(sp)
1000557c:	dc000017 	ldw	r16,0(sp)
10005580:	dec00304 	addi	sp,sp,12
10005584:	f800283a 	ret
10005588:	80800517 	ldw	r2,20(r16)
1000558c:	80000215 	stw	zero,8(r16)
10005590:	0085c83a 	sub	r2,zero,r2
10005594:	80800615 	stw	r2,24(r16)
10005598:	183ff51e 	bne	r3,zero,10005570 <__swsetup_r+0x60>
1000559c:	80c0030b 	ldhu	r3,12(r16)
100055a0:	0005883a 	mov	r2,zero
100055a4:	1900200c 	andi	r4,r3,128
100055a8:	203ff226 	beq	r4,zero,10005574 <__swsetup_r+0x64>
100055ac:	18c01014 	ori	r3,r3,64
100055b0:	80c0030d 	sth	r3,12(r16)
100055b4:	00bfffc4 	movi	r2,-1
100055b8:	003fee06 	br	10005574 <__swsetup_r+0x64>
100055bc:	1009883a 	mov	r4,r2
100055c0:	00074f40 	call	100074f4 <__sinit>
100055c4:	8080030b 	ldhu	r2,12(r16)
100055c8:	10c0020c 	andi	r3,r2,8
100055cc:	1009883a 	mov	r4,r2
100055d0:	183fde1e 	bne	r3,zero,1000554c <__swsetup_r+0x3c>
100055d4:	2080040c 	andi	r2,r4,16
100055d8:	10001f26 	beq	r2,zero,10005658 <__swsetup_r+0x148>
100055dc:	2080010c 	andi	r2,r4,4
100055e0:	10000f1e 	bne	r2,zero,10005620 <__swsetup_r+0x110>
100055e4:	80c00417 	ldw	r3,16(r16)
100055e8:	20800214 	ori	r2,r4,8
100055ec:	8080030d 	sth	r2,12(r16)
100055f0:	183fd81e 	bne	r3,zero,10005554 <__swsetup_r+0x44>
100055f4:	1100a00c 	andi	r4,r2,640
100055f8:	21008020 	cmpeqi	r4,r4,512
100055fc:	203fd51e 	bne	r4,zero,10005554 <__swsetup_r+0x44>
10005600:	800b883a 	mov	r5,r16
10005604:	8809883a 	mov	r4,r17
10005608:	00080280 	call	10008028 <__smakebuf_r>
1000560c:	8080030b 	ldhu	r2,12(r16)
10005610:	80c00417 	ldw	r3,16(r16)
10005614:	003fcf06 	br	10005554 <__swsetup_r+0x44>
10005618:	0005883a 	mov	r2,zero
1000561c:	003fd206 	br	10005568 <__swsetup_r+0x58>
10005620:	81400c17 	ldw	r5,48(r16)
10005624:	28000626 	beq	r5,zero,10005640 <__swsetup_r+0x130>
10005628:	80801004 	addi	r2,r16,64
1000562c:	28800326 	beq	r5,r2,1000563c <__swsetup_r+0x12c>
10005630:	8809883a 	mov	r4,r17
10005634:	00076580 	call	10007658 <_free_r>
10005638:	8100030b 	ldhu	r4,12(r16)
1000563c:	80000c15 	stw	zero,48(r16)
10005640:	80c00417 	ldw	r3,16(r16)
10005644:	00bff6c4 	movi	r2,-37
10005648:	1108703a 	and	r4,r2,r4
1000564c:	80000115 	stw	zero,4(r16)
10005650:	80c00015 	stw	r3,0(r16)
10005654:	003fe406 	br	100055e8 <__swsetup_r+0xd8>
10005658:	00800244 	movi	r2,9
1000565c:	88800015 	stw	r2,0(r17)
10005660:	20801014 	ori	r2,r4,64
10005664:	8080030d 	sth	r2,12(r16)
10005668:	00bfffc4 	movi	r2,-1
1000566c:	003fc106 	br	10005574 <__swsetup_r+0x64>

10005670 <quorem>:
10005670:	defff504 	addi	sp,sp,-44
10005674:	dc800315 	stw	r18,12(sp)
10005678:	20800417 	ldw	r2,16(r4)
1000567c:	2c800417 	ldw	r18,16(r5)
10005680:	dfc00a15 	stw	ra,40(sp)
10005684:	df000915 	stw	fp,36(sp)
10005688:	ddc00815 	stw	r23,32(sp)
1000568c:	dd800715 	stw	r22,28(sp)
10005690:	dd400615 	stw	r21,24(sp)
10005694:	dd000515 	stw	r20,20(sp)
10005698:	dcc00415 	stw	r19,16(sp)
1000569c:	dc400215 	stw	r17,8(sp)
100056a0:	dc000115 	stw	r16,4(sp)
100056a4:	14807416 	blt	r2,r18,10005878 <quorem+0x208>
100056a8:	94bfffc4 	addi	r18,r18,-1
100056ac:	902e90ba 	slli	r23,r18,2
100056b0:	2c400504 	addi	r17,r5,20
100056b4:	25400504 	addi	r21,r4,20
100056b8:	8de9883a 	add	r20,r17,r23
100056bc:	a7000017 	ldw	fp,0(r20)
100056c0:	adef883a 	add	r23,r21,r23
100056c4:	b8c00017 	ldw	r3,0(r23)
100056c8:	e7000044 	addi	fp,fp,1
100056cc:	282d883a 	mov	r22,r5
100056d0:	2021883a 	mov	r16,r4
100056d4:	e00b883a 	mov	r5,fp
100056d8:	1809883a 	mov	r4,r3
100056dc:	d8c00015 	stw	r3,0(sp)
100056e0:	000ce680 	call	1000ce68 <__udivsi3>
100056e4:	d8c00017 	ldw	r3,0(sp)
100056e8:	1027883a 	mov	r19,r2
100056ec:	1f002c36 	bltu	r3,fp,100057a0 <quorem+0x130>
100056f0:	8811883a 	mov	r8,r17
100056f4:	a80b883a 	mov	r5,r21
100056f8:	0013883a 	mov	r9,zero
100056fc:	0007883a 	mov	r3,zero
10005700:	42000104 	addi	r8,r8,4
10005704:	41ffff17 	ldw	r7,-4(r8)
10005708:	29800017 	ldw	r6,0(r5)
1000570c:	29400104 	addi	r5,r5,4
10005710:	38bfffcc 	andi	r2,r7,65535
10005714:	14c5383a 	mul	r2,r2,r19
10005718:	3808d43a 	srli	r4,r7,16
1000571c:	32bfffcc 	andi	r10,r6,65535
10005720:	1245883a 	add	r2,r2,r9
10005724:	1012d43a 	srli	r9,r2,16
10005728:	11ffffcc 	andi	r7,r2,65535
1000572c:	24c9383a 	mul	r4,r4,r19
10005730:	19c7c83a 	sub	r3,r3,r7
10005734:	1a8f883a 	add	r7,r3,r10
10005738:	3006d43a 	srli	r3,r6,16
1000573c:	2249883a 	add	r4,r4,r9
10005740:	3805d43a 	srai	r2,r7,16
10005744:	21bfffcc 	andi	r6,r4,65535
10005748:	1987c83a 	sub	r3,r3,r6
1000574c:	1887883a 	add	r3,r3,r2
10005750:	180c943a 	slli	r6,r3,16
10005754:	39ffffcc 	andi	r7,r7,65535
10005758:	2012d43a 	srli	r9,r4,16
1000575c:	31ceb03a 	or	r7,r6,r7
10005760:	29ffff15 	stw	r7,-4(r5)
10005764:	1807d43a 	srai	r3,r3,16
10005768:	a23fe52e 	bgeu	r20,r8,10005700 <quorem+0x90>
1000576c:	b8800017 	ldw	r2,0(r23)
10005770:	10000b1e 	bne	r2,zero,100057a0 <quorem+0x130>
10005774:	b8bfff04 	addi	r2,r23,-4
10005778:	a880082e 	bgeu	r21,r2,1000579c <quorem+0x12c>
1000577c:	b8ffff17 	ldw	r3,-4(r23)
10005780:	18000326 	beq	r3,zero,10005790 <quorem+0x120>
10005784:	00000506 	br	1000579c <quorem+0x12c>
10005788:	10c00017 	ldw	r3,0(r2)
1000578c:	1800031e 	bne	r3,zero,1000579c <quorem+0x12c>
10005790:	10bfff04 	addi	r2,r2,-4
10005794:	94bfffc4 	addi	r18,r18,-1
10005798:	a8bffb36 	bltu	r21,r2,10005788 <quorem+0x118>
1000579c:	84800415 	stw	r18,16(r16)
100057a0:	b00b883a 	mov	r5,r22
100057a4:	8009883a 	mov	r4,r16
100057a8:	00094e00 	call	100094e0 <__mcmp>
100057ac:	10002516 	blt	r2,zero,10005844 <quorem+0x1d4>
100057b0:	9cc00044 	addi	r19,r19,1
100057b4:	a80d883a 	mov	r6,r21
100057b8:	0007883a 	mov	r3,zero
100057bc:	8c400104 	addi	r17,r17,4
100057c0:	893fff17 	ldw	r4,-4(r17)
100057c4:	31400017 	ldw	r5,0(r6)
100057c8:	31800104 	addi	r6,r6,4
100057cc:	20bfffcc 	andi	r2,r4,65535
100057d0:	1887c83a 	sub	r3,r3,r2
100057d4:	28bfffcc 	andi	r2,r5,65535
100057d8:	1885883a 	add	r2,r3,r2
100057dc:	2008d43a 	srli	r4,r4,16
100057e0:	2806d43a 	srli	r3,r5,16
100057e4:	100fd43a 	srai	r7,r2,16
100057e8:	117fffcc 	andi	r5,r2,65535
100057ec:	1907c83a 	sub	r3,r3,r4
100057f0:	19c7883a 	add	r3,r3,r7
100057f4:	1804943a 	slli	r2,r3,16
100057f8:	1807d43a 	srai	r3,r3,16
100057fc:	1144b03a 	or	r2,r2,r5
10005800:	30bfff15 	stw	r2,-4(r6)
10005804:	a47fed2e 	bgeu	r20,r17,100057bc <quorem+0x14c>
10005808:	900690ba 	slli	r3,r18,2
1000580c:	a8c7883a 	add	r3,r21,r3
10005810:	18800017 	ldw	r2,0(r3)
10005814:	10000b1e 	bne	r2,zero,10005844 <quorem+0x1d4>
10005818:	18bfff04 	addi	r2,r3,-4
1000581c:	a880082e 	bgeu	r21,r2,10005840 <quorem+0x1d0>
10005820:	18ffff17 	ldw	r3,-4(r3)
10005824:	18000326 	beq	r3,zero,10005834 <quorem+0x1c4>
10005828:	00000506 	br	10005840 <quorem+0x1d0>
1000582c:	10c00017 	ldw	r3,0(r2)
10005830:	1800031e 	bne	r3,zero,10005840 <quorem+0x1d0>
10005834:	10bfff04 	addi	r2,r2,-4
10005838:	94bfffc4 	addi	r18,r18,-1
1000583c:	a8bffb36 	bltu	r21,r2,1000582c <quorem+0x1bc>
10005840:	84800415 	stw	r18,16(r16)
10005844:	9805883a 	mov	r2,r19
10005848:	dfc00a17 	ldw	ra,40(sp)
1000584c:	df000917 	ldw	fp,36(sp)
10005850:	ddc00817 	ldw	r23,32(sp)
10005854:	dd800717 	ldw	r22,28(sp)
10005858:	dd400617 	ldw	r21,24(sp)
1000585c:	dd000517 	ldw	r20,20(sp)
10005860:	dcc00417 	ldw	r19,16(sp)
10005864:	dc800317 	ldw	r18,12(sp)
10005868:	dc400217 	ldw	r17,8(sp)
1000586c:	dc000117 	ldw	r16,4(sp)
10005870:	dec00b04 	addi	sp,sp,44
10005874:	f800283a 	ret
10005878:	0005883a 	mov	r2,zero
1000587c:	003ff206 	br	10005848 <quorem+0x1d8>

10005880 <_dtoa_r>:
10005880:	20801017 	ldw	r2,64(r4)
10005884:	deffe204 	addi	sp,sp,-120
10005888:	df001c15 	stw	fp,112(sp)
1000588c:	dcc01715 	stw	r19,92(sp)
10005890:	dc401515 	stw	r17,84(sp)
10005894:	dc001415 	stw	r16,80(sp)
10005898:	dfc01d15 	stw	ra,116(sp)
1000589c:	ddc01b15 	stw	r23,108(sp)
100058a0:	dd801a15 	stw	r22,104(sp)
100058a4:	dd401915 	stw	r21,100(sp)
100058a8:	dd001815 	stw	r20,96(sp)
100058ac:	dc801615 	stw	r18,88(sp)
100058b0:	d9400115 	stw	r5,4(sp)
100058b4:	d9c00215 	stw	r7,8(sp)
100058b8:	2039883a 	mov	fp,r4
100058bc:	3027883a 	mov	r19,r6
100058c0:	dc002017 	ldw	r16,128(sp)
100058c4:	3023883a 	mov	r17,r6
100058c8:	10000826 	beq	r2,zero,100058ec <_dtoa_r+0x6c>
100058cc:	21801117 	ldw	r6,68(r4)
100058d0:	00c00044 	movi	r3,1
100058d4:	100b883a 	mov	r5,r2
100058d8:	1986983a 	sll	r3,r3,r6
100058dc:	11800115 	stw	r6,4(r2)
100058e0:	10c00215 	stw	r3,8(r2)
100058e4:	0008d000 	call	10008d00 <_Bfree>
100058e8:	e0001015 	stw	zero,64(fp)
100058ec:	98018116 	blt	r19,zero,10005ef4 <_dtoa_r+0x674>
100058f0:	80000015 	stw	zero,0(r16)
100058f4:	989ffc2c 	andhi	r2,r19,32752
100058f8:	00dffc34 	movhi	r3,32752
100058fc:	10c18626 	beq	r2,r3,10005f18 <_dtoa_r+0x698>
10005900:	d9000117 	ldw	r4,4(sp)
10005904:	000d883a 	mov	r6,zero
10005908:	000f883a 	mov	r7,zero
1000590c:	880b883a 	mov	r5,r17
10005910:	000e1700 	call	1000e170 <__eqdf2>
10005914:	1000191e 	bne	r2,zero,1000597c <_dtoa_r+0xfc>
10005918:	d8c01f17 	ldw	r3,124(sp)
1000591c:	00800044 	movi	r2,1
10005920:	18800015 	stw	r2,0(r3)
10005924:	d8802117 	ldw	r2,132(sp)
10005928:	10032426 	beq	r2,zero,100065bc <_dtoa_r+0xd3c>
1000592c:	d9002117 	ldw	r4,132(sp)
10005930:	00840074 	movhi	r2,4097
10005934:	108a0444 	addi	r2,r2,10257
10005938:	00c40074 	movhi	r3,4097
1000593c:	20800015 	stw	r2,0(r4)
10005940:	188a0404 	addi	r2,r3,10256
10005944:	d8800315 	stw	r2,12(sp)
10005948:	d8800317 	ldw	r2,12(sp)
1000594c:	dfc01d17 	ldw	ra,116(sp)
10005950:	df001c17 	ldw	fp,112(sp)
10005954:	ddc01b17 	ldw	r23,108(sp)
10005958:	dd801a17 	ldw	r22,104(sp)
1000595c:	dd401917 	ldw	r21,100(sp)
10005960:	dd001817 	ldw	r20,96(sp)
10005964:	dcc01717 	ldw	r19,92(sp)
10005968:	dc801617 	ldw	r18,88(sp)
1000596c:	dc401517 	ldw	r17,84(sp)
10005970:	dc001417 	ldw	r16,80(sp)
10005974:	dec01e04 	addi	sp,sp,120
10005978:	f800283a 	ret
1000597c:	dc800117 	ldw	r18,4(sp)
10005980:	d8801204 	addi	r2,sp,72
10005984:	9820d53a 	srli	r16,r19,20
10005988:	d8800015 	stw	r2,0(sp)
1000598c:	d9c01304 	addi	r7,sp,76
10005990:	900b883a 	mov	r5,r18
10005994:	880d883a 	mov	r6,r17
10005998:	e009883a 	mov	r4,fp
1000599c:	00098540 	call	10009854 <__d2b>
100059a0:	102b883a 	mov	r21,r2
100059a4:	8001701e 	bne	r16,zero,10005f68 <_dtoa_r+0x6e8>
100059a8:	dc801217 	ldw	r18,72(sp)
100059ac:	dc001317 	ldw	r16,76(sp)
100059b0:	9421883a 	add	r16,r18,r16
100059b4:	80810c84 	addi	r2,r16,1074
100059b8:	10c00850 	cmplti	r3,r2,33
100059bc:	18030f1e 	bne	r3,zero,100065fc <_dtoa_r+0xd7c>
100059c0:	01001004 	movi	r4,64
100059c4:	2085c83a 	sub	r2,r4,r2
100059c8:	98a6983a 	sll	r19,r19,r2
100059cc:	d8800117 	ldw	r2,4(sp)
100059d0:	81010484 	addi	r4,r16,1042
100059d4:	1108d83a 	srl	r4,r2,r4
100059d8:	9908b03a 	or	r4,r19,r4
100059dc:	000f5640 	call	1000f564 <__floatunsidf>
100059e0:	1009883a 	mov	r4,r2
100059e4:	017f8434 	movhi	r5,65040
100059e8:	00800044 	movi	r2,1
100059ec:	194b883a 	add	r5,r3,r5
100059f0:	843fffc4 	addi	r16,r16,-1
100059f4:	d8800a15 	stw	r2,40(sp)
100059f8:	000d883a 	mov	r6,zero
100059fc:	01cffe34 	movhi	r7,16376
10005a00:	000ea5c0 	call	1000ea5c <__subdf3>
10005a04:	0198dbf4 	movhi	r6,25455
10005a08:	01cff4f4 	movhi	r7,16339
10005a0c:	3190d844 	addi	r6,r6,17249
10005a10:	39e1e9c4 	addi	r7,r7,-30809
10005a14:	1009883a 	mov	r4,r2
10005a18:	180b883a 	mov	r5,r3
10005a1c:	000e3d00 	call	1000e3d0 <__muldf3>
10005a20:	01a2d874 	movhi	r6,35681
10005a24:	01cff1f4 	movhi	r7,16327
10005a28:	31b22cc4 	addi	r6,r6,-14157
10005a2c:	39e28a04 	addi	r7,r7,-30168
10005a30:	180b883a 	mov	r5,r3
10005a34:	1009883a 	mov	r4,r2
10005a38:	000cf280 	call	1000cf28 <__adddf3>
10005a3c:	8009883a 	mov	r4,r16
10005a40:	1029883a 	mov	r20,r2
10005a44:	1827883a 	mov	r19,r3
10005a48:	000f49c0 	call	1000f49c <__floatsidf>
10005a4c:	019427f4 	movhi	r6,20639
10005a50:	01cff4f4 	movhi	r7,16339
10005a54:	319e7ec4 	addi	r6,r6,31227
10005a58:	39d104c4 	addi	r7,r7,17427
10005a5c:	1009883a 	mov	r4,r2
10005a60:	180b883a 	mov	r5,r3
10005a64:	000e3d00 	call	1000e3d0 <__muldf3>
10005a68:	100d883a 	mov	r6,r2
10005a6c:	180f883a 	mov	r7,r3
10005a70:	a009883a 	mov	r4,r20
10005a74:	980b883a 	mov	r5,r19
10005a78:	000cf280 	call	1000cf28 <__adddf3>
10005a7c:	1009883a 	mov	r4,r2
10005a80:	180b883a 	mov	r5,r3
10005a84:	1029883a 	mov	r20,r2
10005a88:	1827883a 	mov	r19,r3
10005a8c:	000f41c0 	call	1000f41c <__fixdfsi>
10005a90:	000d883a 	mov	r6,zero
10005a94:	000f883a 	mov	r7,zero
10005a98:	a009883a 	mov	r4,r20
10005a9c:	980b883a 	mov	r5,r19
10005aa0:	102d883a 	mov	r22,r2
10005aa4:	000e2e00 	call	1000e2e0 <__ledf2>
10005aa8:	1002ba16 	blt	r2,zero,10006594 <_dtoa_r+0xd14>
10005aac:	9421c83a 	sub	r16,r18,r16
10005ab0:	b08005e8 	cmpgeui	r2,r22,23
10005ab4:	853fffc4 	addi	r20,r16,-1
10005ab8:	1002ae1e 	bne	r2,zero,10006574 <_dtoa_r+0xcf4>
10005abc:	b00690fa 	slli	r3,r22,3
10005ac0:	00840074 	movhi	r2,4097
10005ac4:	108a2804 	addi	r2,r2,10400
10005ac8:	10c5883a 	add	r2,r2,r3
10005acc:	11800017 	ldw	r6,0(r2)
10005ad0:	11c00117 	ldw	r7,4(r2)
10005ad4:	d9000117 	ldw	r4,4(sp)
10005ad8:	880b883a 	mov	r5,r17
10005adc:	000e2e00 	call	1000e2e0 <__ledf2>
10005ae0:	10026f0e 	bge	r2,zero,100064a0 <_dtoa_r+0xc20>
10005ae4:	d8000915 	stw	zero,36(sp)
10005ae8:	b5bfffc4 	addi	r22,r22,-1
10005aec:	a002a416 	blt	r20,zero,10006580 <_dtoa_r+0xd00>
10005af0:	d8000515 	stw	zero,20(sp)
10005af4:	b0026d0e 	bge	r22,zero,100064ac <_dtoa_r+0xc2c>
10005af8:	d8800517 	ldw	r2,20(sp)
10005afc:	d8c00217 	ldw	r3,8(sp)
10005b00:	dd800415 	stw	r22,16(sp)
10005b04:	1585c83a 	sub	r2,r2,r22
10005b08:	d8800515 	stw	r2,20(sp)
10005b0c:	0585c83a 	sub	r2,zero,r22
10005b10:	d8800815 	stw	r2,32(sp)
10005b14:	188002a8 	cmpgeui	r2,r3,10
10005b18:	002d883a 	mov	r22,zero
10005b1c:	1002691e 	bne	r2,zero,100064c4 <_dtoa_r+0xc44>
10005b20:	18800190 	cmplti	r2,r3,6
10005b24:	1002ba1e 	bne	r2,zero,10006610 <_dtoa_r+0xd90>
10005b28:	18bfff04 	addi	r2,r3,-4
10005b2c:	d8800215 	stw	r2,8(sp)
10005b30:	0021883a 	mov	r16,zero
10005b34:	d8c00217 	ldw	r3,8(sp)
10005b38:	188000e0 	cmpeqi	r2,r3,3
10005b3c:	10039d1e 	bne	r2,zero,100069b4 <_dtoa_r+0x1134>
10005b40:	18800108 	cmpgei	r2,r3,4
10005b44:	10027a26 	beq	r2,zero,10006530 <_dtoa_r+0xcb0>
10005b48:	d8c00217 	ldw	r3,8(sp)
10005b4c:	18800120 	cmpeqi	r2,r3,4
10005b50:	10026926 	beq	r2,zero,100064f8 <_dtoa_r+0xc78>
10005b54:	00800044 	movi	r2,1
10005b58:	d8800715 	stw	r2,28(sp)
10005b5c:	d8801e17 	ldw	r2,120(sp)
10005b60:	0083670e 	bge	zero,r2,10006900 <_dtoa_r+0x1080>
10005b64:	d8800b15 	stw	r2,44(sp)
10005b68:	d8800615 	stw	r2,24(sp)
10005b6c:	100d883a 	mov	r6,r2
10005b70:	e0001115 	stw	zero,68(fp)
10005b74:	30800610 	cmplti	r2,r6,24
10005b78:	dc800617 	ldw	r18,24(sp)
10005b7c:	1004eb1e 	bne	r2,zero,10006f2c <_dtoa_r+0x16ac>
10005b80:	00c00044 	movi	r3,1
10005b84:	00800104 	movi	r2,4
10005b88:	1085883a 	add	r2,r2,r2
10005b8c:	11000504 	addi	r4,r2,20
10005b90:	180b883a 	mov	r5,r3
10005b94:	18c00044 	addi	r3,r3,1
10005b98:	313ffb2e 	bgeu	r6,r4,10005b88 <_dtoa_r+0x308>
10005b9c:	e1401115 	stw	r5,68(fp)
10005ba0:	e009883a 	mov	r4,fp
10005ba4:	0008c5c0 	call	10008c5c <_Balloc>
10005ba8:	d8800315 	stw	r2,12(sp)
10005bac:	e0801015 	stw	r2,64(fp)
10005bb0:	948003e8 	cmpgeui	r18,r18,15
10005bb4:	9000fe1e 	bne	r18,zero,10005fb0 <_dtoa_r+0x730>
10005bb8:	8000fd26 	beq	r16,zero,10005fb0 <_dtoa_r+0x730>
10005bbc:	d9000417 	ldw	r4,16(sp)
10005bc0:	0103c60e 	bge	zero,r4,10006adc <_dtoa_r+0x125c>
10005bc4:	208003cc 	andi	r2,r4,15
10005bc8:	100690fa 	slli	r3,r2,3
10005bcc:	202fd13a 	srai	r23,r4,4
10005bd0:	00840074 	movhi	r2,4097
10005bd4:	108a2804 	addi	r2,r2,10400
10005bd8:	10c5883a 	add	r2,r2,r3
10005bdc:	b8c0040c 	andi	r3,r23,16
10005be0:	12800017 	ldw	r10,0(r2)
10005be4:	12400117 	ldw	r9,4(r2)
10005be8:	1803621e 	bne	r3,zero,10006974 <_dtoa_r+0x10f4>
10005bec:	d8800117 	ldw	r2,4(sp)
10005bf0:	8827883a 	mov	r19,r17
10005bf4:	04000084 	movi	r16,2
10005bf8:	d8800c15 	stw	r2,48(sp)
10005bfc:	04840074 	movhi	r18,4097
10005c00:	948a1e04 	addi	r18,r18,10360
10005c04:	b8000f26 	beq	r23,zero,10005c44 <_dtoa_r+0x3c4>
10005c08:	5005883a 	mov	r2,r10
10005c0c:	4807883a 	mov	r3,r9
10005c10:	b980004c 	andi	r6,r23,1
10005c14:	1009883a 	mov	r4,r2
10005c18:	b82fd07a 	srai	r23,r23,1
10005c1c:	180b883a 	mov	r5,r3
10005c20:	30000426 	beq	r6,zero,10005c34 <_dtoa_r+0x3b4>
10005c24:	91800017 	ldw	r6,0(r18)
10005c28:	91c00117 	ldw	r7,4(r18)
10005c2c:	84000044 	addi	r16,r16,1
10005c30:	000e3d00 	call	1000e3d0 <__muldf3>
10005c34:	94800204 	addi	r18,r18,8
10005c38:	b83ff51e 	bne	r23,zero,10005c10 <_dtoa_r+0x390>
10005c3c:	1015883a 	mov	r10,r2
10005c40:	1813883a 	mov	r9,r3
10005c44:	d9000c17 	ldw	r4,48(sp)
10005c48:	980b883a 	mov	r5,r19
10005c4c:	500d883a 	mov	r6,r10
10005c50:	480f883a 	mov	r7,r9
10005c54:	000d8c80 	call	1000d8c8 <__divdf3>
10005c58:	1025883a 	mov	r18,r2
10005c5c:	1827883a 	mov	r19,r3
10005c60:	d8800917 	ldw	r2,36(sp)
10005c64:	10000626 	beq	r2,zero,10005c80 <_dtoa_r+0x400>
10005c68:	000d883a 	mov	r6,zero
10005c6c:	01cffc34 	movhi	r7,16368
10005c70:	9009883a 	mov	r4,r18
10005c74:	980b883a 	mov	r5,r19
10005c78:	000e2e00 	call	1000e2e0 <__ledf2>
10005c7c:	10042616 	blt	r2,zero,10006d18 <_dtoa_r+0x1498>
10005c80:	8009883a 	mov	r4,r16
10005c84:	000f49c0 	call	1000f49c <__floatsidf>
10005c88:	900d883a 	mov	r6,r18
10005c8c:	980f883a 	mov	r7,r19
10005c90:	1009883a 	mov	r4,r2
10005c94:	180b883a 	mov	r5,r3
10005c98:	000e3d00 	call	1000e3d0 <__muldf3>
10005c9c:	000d883a 	mov	r6,zero
10005ca0:	01d00734 	movhi	r7,16412
10005ca4:	1009883a 	mov	r4,r2
10005ca8:	180b883a 	mov	r5,r3
10005cac:	000cf280 	call	1000cf28 <__adddf3>
10005cb0:	d8800c15 	stw	r2,48(sp)
10005cb4:	00bf3034 	movhi	r2,64704
10005cb8:	1885883a 	add	r2,r3,r2
10005cbc:	d8800d15 	stw	r2,52(sp)
10005cc0:	d8800617 	ldw	r2,24(sp)
10005cc4:	10036d26 	beq	r2,zero,10006a7c <_dtoa_r+0x11fc>
10005cc8:	d8800417 	ldw	r2,16(sp)
10005ccc:	d8800f15 	stw	r2,60(sp)
10005cd0:	d8800617 	ldw	r2,24(sp)
10005cd4:	d8800e15 	stw	r2,56(sp)
10005cd8:	980b883a 	mov	r5,r19
10005cdc:	9009883a 	mov	r4,r18
10005ce0:	000f41c0 	call	1000f41c <__fixdfsi>
10005ce4:	1009883a 	mov	r4,r2
10005ce8:	102f883a 	mov	r23,r2
10005cec:	000f49c0 	call	1000f49c <__floatsidf>
10005cf0:	100d883a 	mov	r6,r2
10005cf4:	180f883a 	mov	r7,r3
10005cf8:	9009883a 	mov	r4,r18
10005cfc:	980b883a 	mov	r5,r19
10005d00:	000ea5c0 	call	1000ea5c <__subdf3>
10005d04:	1025883a 	mov	r18,r2
10005d08:	d8800e17 	ldw	r2,56(sp)
10005d0c:	1821883a 	mov	r16,r3
10005d10:	ba400c04 	addi	r9,r23,48
10005d14:	10bfffc4 	addi	r2,r2,-1
10005d18:	100690fa 	slli	r3,r2,3
10005d1c:	00840074 	movhi	r2,4097
10005d20:	108a2804 	addi	r2,r2,10400
10005d24:	10c5883a 	add	r2,r2,r3
10005d28:	11800017 	ldw	r6,0(r2)
10005d2c:	d8c00317 	ldw	r3,12(sp)
10005d30:	11c00117 	ldw	r7,4(r2)
10005d34:	d8800717 	ldw	r2,28(sp)
10005d38:	4811883a 	mov	r8,r9
10005d3c:	da001015 	stw	r8,64(sp)
10005d40:	1dc00044 	addi	r23,r3,1
10005d44:	1003a226 	beq	r2,zero,10006bd0 <_dtoa_r+0x1350>
10005d48:	0009883a 	mov	r4,zero
10005d4c:	014ff834 	movhi	r5,16352
10005d50:	da401115 	stw	r9,68(sp)
10005d54:	000d8c80 	call	1000d8c8 <__divdf3>
10005d58:	d9800c17 	ldw	r6,48(sp)
10005d5c:	d9c00d17 	ldw	r7,52(sp)
10005d60:	1009883a 	mov	r4,r2
10005d64:	180b883a 	mov	r5,r3
10005d68:	000ea5c0 	call	1000ea5c <__subdf3>
10005d6c:	1827883a 	mov	r19,r3
10005d70:	da401117 	ldw	r9,68(sp)
10005d74:	d8c00317 	ldw	r3,12(sp)
10005d78:	900d883a 	mov	r6,r18
10005d7c:	800f883a 	mov	r7,r16
10005d80:	1a400005 	stb	r9,0(r3)
10005d84:	1009883a 	mov	r4,r2
10005d88:	980b883a 	mov	r5,r19
10005d8c:	d8800c15 	stw	r2,48(sp)
10005d90:	000e1f00 	call	1000e1f0 <__gedf2>
10005d94:	da001017 	ldw	r8,64(sp)
10005d98:	00804816 	blt	zero,r2,10005ebc <_dtoa_r+0x63c>
10005d9c:	900d883a 	mov	r6,r18
10005da0:	800f883a 	mov	r7,r16
10005da4:	0009883a 	mov	r4,zero
10005da8:	014ffc34 	movhi	r5,16368
10005dac:	da000d15 	stw	r8,52(sp)
10005db0:	000ea5c0 	call	1000ea5c <__subdf3>
10005db4:	d9000c17 	ldw	r4,48(sp)
10005db8:	100d883a 	mov	r6,r2
10005dbc:	180f883a 	mov	r7,r3
10005dc0:	980b883a 	mov	r5,r19
10005dc4:	000e1f00 	call	1000e1f0 <__gedf2>
10005dc8:	da000d17 	ldw	r8,52(sp)
10005dcc:	00844e16 	blt	zero,r2,10006f08 <_dtoa_r+0x1688>
10005dd0:	d8c00e17 	ldw	r3,56(sp)
10005dd4:	18800060 	cmpeqi	r2,r3,1
10005dd8:	1000751e 	bne	r2,zero,10005fb0 <_dtoa_r+0x730>
10005ddc:	d8800317 	ldw	r2,12(sp)
10005de0:	dd800d15 	stw	r22,52(sp)
10005de4:	dd000e15 	stw	r20,56(sp)
10005de8:	10c5883a 	add	r2,r2,r3
10005dec:	dd000c17 	ldw	r20,48(sp)
10005df0:	102d883a 	mov	r22,r2
10005df4:	dc400c15 	stw	r17,48(sp)
10005df8:	00000806 	br	10005e1c <_dtoa_r+0x59c>
10005dfc:	000ea5c0 	call	1000ea5c <__subdf3>
10005e00:	a00d883a 	mov	r6,r20
10005e04:	980f883a 	mov	r7,r19
10005e08:	1009883a 	mov	r4,r2
10005e0c:	180b883a 	mov	r5,r3
10005e10:	000e2e00 	call	1000e2e0 <__ledf2>
10005e14:	10042316 	blt	r2,zero,10006ea4 <_dtoa_r+0x1624>
10005e18:	bd806226 	beq	r23,r22,10005fa4 <_dtoa_r+0x724>
10005e1c:	a009883a 	mov	r4,r20
10005e20:	980b883a 	mov	r5,r19
10005e24:	000d883a 	mov	r6,zero
10005e28:	01d00934 	movhi	r7,16420
10005e2c:	000e3d00 	call	1000e3d0 <__muldf3>
10005e30:	000d883a 	mov	r6,zero
10005e34:	01d00934 	movhi	r7,16420
10005e38:	9009883a 	mov	r4,r18
10005e3c:	800b883a 	mov	r5,r16
10005e40:	1029883a 	mov	r20,r2
10005e44:	1827883a 	mov	r19,r3
10005e48:	000e3d00 	call	1000e3d0 <__muldf3>
10005e4c:	180b883a 	mov	r5,r3
10005e50:	1009883a 	mov	r4,r2
10005e54:	1821883a 	mov	r16,r3
10005e58:	1025883a 	mov	r18,r2
10005e5c:	000f41c0 	call	1000f41c <__fixdfsi>
10005e60:	1009883a 	mov	r4,r2
10005e64:	1023883a 	mov	r17,r2
10005e68:	000f49c0 	call	1000f49c <__floatsidf>
10005e6c:	9009883a 	mov	r4,r18
10005e70:	800b883a 	mov	r5,r16
10005e74:	100d883a 	mov	r6,r2
10005e78:	180f883a 	mov	r7,r3
10005e7c:	000ea5c0 	call	1000ea5c <__subdf3>
10005e80:	bdc00044 	addi	r23,r23,1
10005e84:	8c400c04 	addi	r17,r17,48
10005e88:	a00d883a 	mov	r6,r20
10005e8c:	980f883a 	mov	r7,r19
10005e90:	1009883a 	mov	r4,r2
10005e94:	180b883a 	mov	r5,r3
10005e98:	bc7fffc5 	stb	r17,-1(r23)
10005e9c:	1025883a 	mov	r18,r2
10005ea0:	1821883a 	mov	r16,r3
10005ea4:	000e2e00 	call	1000e2e0 <__ledf2>
10005ea8:	900d883a 	mov	r6,r18
10005eac:	800f883a 	mov	r7,r16
10005eb0:	0009883a 	mov	r4,zero
10005eb4:	014ffc34 	movhi	r5,16368
10005eb8:	103fd00e 	bge	r2,zero,10005dfc <_dtoa_r+0x57c>
10005ebc:	d8800f17 	ldw	r2,60(sp)
10005ec0:	10800044 	addi	r2,r2,1
10005ec4:	d8800415 	stw	r2,16(sp)
10005ec8:	a80b883a 	mov	r5,r21
10005ecc:	e009883a 	mov	r4,fp
10005ed0:	0008d000 	call	10008d00 <_Bfree>
10005ed4:	d8801f17 	ldw	r2,124(sp)
10005ed8:	d8c00417 	ldw	r3,16(sp)
10005edc:	b8000005 	stb	zero,0(r23)
10005ee0:	10c00015 	stw	r3,0(r2)
10005ee4:	d8802117 	ldw	r2,132(sp)
10005ee8:	103e9726 	beq	r2,zero,10005948 <_dtoa_r+0xc8>
10005eec:	15c00015 	stw	r23,0(r2)
10005ef0:	003e9506 	br	10005948 <_dtoa_r+0xc8>
10005ef4:	04600034 	movhi	r17,32768
10005ef8:	8c7fffc4 	addi	r17,r17,-1
10005efc:	9c62703a 	and	r17,r19,r17
10005f00:	00800044 	movi	r2,1
10005f04:	8827883a 	mov	r19,r17
10005f08:	80800015 	stw	r2,0(r16)
10005f0c:	00dffc34 	movhi	r3,32752
10005f10:	989ffc2c 	andhi	r2,r19,32752
10005f14:	10fe7a1e 	bne	r2,r3,10005900 <_dtoa_r+0x80>
10005f18:	00800434 	movhi	r2,16
10005f1c:	d8c01f17 	ldw	r3,124(sp)
10005f20:	10bfffc4 	addi	r2,r2,-1
10005f24:	98a6703a 	and	r19,r19,r2
10005f28:	0089c3c4 	movi	r2,9999
10005f2c:	18800015 	stw	r2,0(r3)
10005f30:	d8800117 	ldw	r2,4(sp)
10005f34:	98aab03a 	or	r21,r19,r2
10005f38:	a800141e 	bne	r21,zero,10005f8c <_dtoa_r+0x70c>
10005f3c:	d8802117 	ldw	r2,132(sp)
10005f40:	1003f626 	beq	r2,zero,10006f1c <_dtoa_r+0x169c>
10005f44:	00840074 	movhi	r2,4097
10005f48:	1007883a 	mov	r3,r2
10005f4c:	18ca0e04 	addi	r3,r3,10296
10005f50:	00840074 	movhi	r2,4097
10005f54:	d8c00315 	stw	r3,12(sp)
10005f58:	108a1004 	addi	r2,r2,10304
10005f5c:	d8c02117 	ldw	r3,132(sp)
10005f60:	18800015 	stw	r2,0(r3)
10005f64:	003e7806 	br	10005948 <_dtoa_r+0xc8>
10005f68:	01400434 	movhi	r5,16
10005f6c:	297fffc4 	addi	r5,r5,-1
10005f70:	894a703a 	and	r5,r17,r5
10005f74:	9009883a 	mov	r4,r18
10005f78:	294ffc34 	orhi	r5,r5,16368
10005f7c:	843f0044 	addi	r16,r16,-1023
10005f80:	dc801217 	ldw	r18,72(sp)
10005f84:	d8000a15 	stw	zero,40(sp)
10005f88:	003e9b06 	br	100059f8 <_dtoa_r+0x178>
10005f8c:	d8802117 	ldw	r2,132(sp)
10005f90:	1002461e 	bne	r2,zero,100068ac <_dtoa_r+0x102c>
10005f94:	00840074 	movhi	r2,4097
10005f98:	108a0d04 	addi	r2,r2,10292
10005f9c:	d8800315 	stw	r2,12(sp)
10005fa0:	003e6906 	br	10005948 <_dtoa_r+0xc8>
10005fa4:	dd800d17 	ldw	r22,52(sp)
10005fa8:	dd000e17 	ldw	r20,56(sp)
10005fac:	dc400c17 	ldw	r17,48(sp)
10005fb0:	d8801317 	ldw	r2,76(sp)
10005fb4:	10009f16 	blt	r2,zero,10006234 <_dtoa_r+0x9b4>
10005fb8:	d9000417 	ldw	r4,16(sp)
10005fbc:	20c003c8 	cmpgei	r3,r4,15
10005fc0:	18009c1e 	bne	r3,zero,10006234 <_dtoa_r+0x9b4>
10005fc4:	200690fa 	slli	r3,r4,3
10005fc8:	00840074 	movhi	r2,4097
10005fcc:	108a2804 	addi	r2,r2,10400
10005fd0:	10c5883a 	add	r2,r2,r3
10005fd4:	14000017 	ldw	r16,0(r2)
10005fd8:	14800117 	ldw	r18,4(r2)
10005fdc:	d8801e17 	ldw	r2,120(sp)
10005fe0:	1000140e 	bge	r2,zero,10006034 <_dtoa_r+0x7b4>
10005fe4:	d8800617 	ldw	r2,24(sp)
10005fe8:	00801216 	blt	zero,r2,10006034 <_dtoa_r+0x7b4>
10005fec:	1002b81e 	bne	r2,zero,10006ad0 <_dtoa_r+0x1250>
10005ff0:	8009883a 	mov	r4,r16
10005ff4:	900b883a 	mov	r5,r18
10005ff8:	000d883a 	mov	r6,zero
10005ffc:	01d00534 	movhi	r7,16404
10006000:	000e3d00 	call	1000e3d0 <__muldf3>
10006004:	d9800117 	ldw	r6,4(sp)
10006008:	880f883a 	mov	r7,r17
1000600c:	1009883a 	mov	r4,r2
10006010:	180b883a 	mov	r5,r3
10006014:	000e1f00 	call	1000e1f0 <__gedf2>
10006018:	0025883a 	mov	r18,zero
1000601c:	0021883a 	mov	r16,zero
10006020:	1001fd16 	blt	r2,zero,10006818 <_dtoa_r+0xf98>
10006024:	d8801e17 	ldw	r2,120(sp)
10006028:	ddc00317 	ldw	r23,12(sp)
1000602c:	00a2303a 	nor	r17,zero,r2
10006030:	0001ff06 	br	10006830 <_dtoa_r+0xfb0>
10006034:	dcc00117 	ldw	r19,4(sp)
10006038:	800d883a 	mov	r6,r16
1000603c:	900f883a 	mov	r7,r18
10006040:	880b883a 	mov	r5,r17
10006044:	9809883a 	mov	r4,r19
10006048:	000d8c80 	call	1000d8c8 <__divdf3>
1000604c:	180b883a 	mov	r5,r3
10006050:	1009883a 	mov	r4,r2
10006054:	000f41c0 	call	1000f41c <__fixdfsi>
10006058:	1009883a 	mov	r4,r2
1000605c:	102d883a 	mov	r22,r2
10006060:	000f49c0 	call	1000f49c <__floatsidf>
10006064:	800d883a 	mov	r6,r16
10006068:	900f883a 	mov	r7,r18
1000606c:	1009883a 	mov	r4,r2
10006070:	180b883a 	mov	r5,r3
10006074:	000e3d00 	call	1000e3d0 <__muldf3>
10006078:	880b883a 	mov	r5,r17
1000607c:	100d883a 	mov	r6,r2
10006080:	180f883a 	mov	r7,r3
10006084:	9809883a 	mov	r4,r19
10006088:	000ea5c0 	call	1000ea5c <__subdf3>
1000608c:	dc400317 	ldw	r17,12(sp)
10006090:	1009883a 	mov	r4,r2
10006094:	d9c00417 	ldw	r7,16(sp)
10006098:	b0800c04 	addi	r2,r22,48
1000609c:	88800005 	stb	r2,0(r17)
100060a0:	d8800617 	ldw	r2,24(sp)
100060a4:	39c00044 	addi	r7,r7,1
100060a8:	d9c00415 	stw	r7,16(sp)
100060ac:	11800060 	cmpeqi	r6,r2,1
100060b0:	180b883a 	mov	r5,r3
100060b4:	2005883a 	mov	r2,r4
100060b8:	8dc00044 	addi	r23,r17,1
100060bc:	3000391e 	bne	r6,zero,100061a4 <_dtoa_r+0x924>
100060c0:	01d00934 	movhi	r7,16420
100060c4:	000e3d00 	call	1000e3d0 <__muldf3>
100060c8:	000d883a 	mov	r6,zero
100060cc:	000f883a 	mov	r7,zero
100060d0:	1009883a 	mov	r4,r2
100060d4:	180b883a 	mov	r5,r3
100060d8:	1027883a 	mov	r19,r2
100060dc:	1829883a 	mov	r20,r3
100060e0:	000e1700 	call	1000e170 <__eqdf2>
100060e4:	103f7826 	beq	r2,zero,10005ec8 <_dtoa_r+0x648>
100060e8:	d8c00617 	ldw	r3,24(sp)
100060ec:	8805883a 	mov	r2,r17
100060f0:	dd400115 	stw	r21,4(sp)
100060f4:	8c400084 	addi	r17,r17,2
100060f8:	10ed883a 	add	r22,r2,r3
100060fc:	00000a06 	br	10006128 <_dtoa_r+0x8a8>
10006100:	000e3d00 	call	1000e3d0 <__muldf3>
10006104:	000d883a 	mov	r6,zero
10006108:	000f883a 	mov	r7,zero
1000610c:	1009883a 	mov	r4,r2
10006110:	180b883a 	mov	r5,r3
10006114:	1027883a 	mov	r19,r2
10006118:	1829883a 	mov	r20,r3
1000611c:	8c400044 	addi	r17,r17,1
10006120:	000e1700 	call	1000e170 <__eqdf2>
10006124:	10029d26 	beq	r2,zero,10006b9c <_dtoa_r+0x131c>
10006128:	800d883a 	mov	r6,r16
1000612c:	900f883a 	mov	r7,r18
10006130:	9809883a 	mov	r4,r19
10006134:	a00b883a 	mov	r5,r20
10006138:	000d8c80 	call	1000d8c8 <__divdf3>
1000613c:	180b883a 	mov	r5,r3
10006140:	1009883a 	mov	r4,r2
10006144:	000f41c0 	call	1000f41c <__fixdfsi>
10006148:	1009883a 	mov	r4,r2
1000614c:	102b883a 	mov	r21,r2
10006150:	000f49c0 	call	1000f49c <__floatsidf>
10006154:	800d883a 	mov	r6,r16
10006158:	900f883a 	mov	r7,r18
1000615c:	1009883a 	mov	r4,r2
10006160:	180b883a 	mov	r5,r3
10006164:	000e3d00 	call	1000e3d0 <__muldf3>
10006168:	100d883a 	mov	r6,r2
1000616c:	180f883a 	mov	r7,r3
10006170:	9809883a 	mov	r4,r19
10006174:	a00b883a 	mov	r5,r20
10006178:	000ea5c0 	call	1000ea5c <__subdf3>
1000617c:	aa400c04 	addi	r9,r21,48
10006180:	8a7fffc5 	stb	r9,-1(r17)
10006184:	000d883a 	mov	r6,zero
10006188:	01d00934 	movhi	r7,16420
1000618c:	1009883a 	mov	r4,r2
10006190:	180b883a 	mov	r5,r3
10006194:	882f883a 	mov	r23,r17
10006198:	b47fd91e 	bne	r22,r17,10006100 <_dtoa_r+0x880>
1000619c:	a82d883a 	mov	r22,r21
100061a0:	dd400117 	ldw	r21,4(sp)
100061a4:	100d883a 	mov	r6,r2
100061a8:	180f883a 	mov	r7,r3
100061ac:	1009883a 	mov	r4,r2
100061b0:	180b883a 	mov	r5,r3
100061b4:	000cf280 	call	1000cf28 <__adddf3>
100061b8:	800d883a 	mov	r6,r16
100061bc:	900f883a 	mov	r7,r18
100061c0:	1009883a 	mov	r4,r2
100061c4:	180b883a 	mov	r5,r3
100061c8:	1027883a 	mov	r19,r2
100061cc:	1823883a 	mov	r17,r3
100061d0:	000e1f00 	call	1000e1f0 <__gedf2>
100061d4:	00800816 	blt	zero,r2,100061f8 <_dtoa_r+0x978>
100061d8:	800d883a 	mov	r6,r16
100061dc:	900f883a 	mov	r7,r18
100061e0:	9809883a 	mov	r4,r19
100061e4:	880b883a 	mov	r5,r17
100061e8:	000e1700 	call	1000e170 <__eqdf2>
100061ec:	103f361e 	bne	r2,zero,10005ec8 <_dtoa_r+0x648>
100061f0:	b580004c 	andi	r22,r22,1
100061f4:	b03f3426 	beq	r22,zero,10005ec8 <_dtoa_r+0x648>
100061f8:	ba3fffc3 	ldbu	r8,-1(r23)
100061fc:	d9000317 	ldw	r4,12(sp)
10006200:	00000306 	br	10006210 <_dtoa_r+0x990>
10006204:	20c30e26 	beq	r4,r3,10006e40 <_dtoa_r+0x15c0>
10006208:	1a3fffc3 	ldbu	r8,-1(r3)
1000620c:	182f883a 	mov	r23,r3
10006210:	40803fcc 	andi	r2,r8,255
10006214:	1080201c 	xori	r2,r2,128
10006218:	10bfe004 	addi	r2,r2,-128
1000621c:	10800e60 	cmpeqi	r2,r2,57
10006220:	b8ffffc4 	addi	r3,r23,-1
10006224:	103ff71e 	bne	r2,zero,10006204 <_dtoa_r+0x984>
10006228:	42000044 	addi	r8,r8,1
1000622c:	1a000005 	stb	r8,0(r3)
10006230:	003f2506 	br	10005ec8 <_dtoa_r+0x648>
10006234:	d8c00717 	ldw	r3,28(sp)
10006238:	1800e426 	beq	r3,zero,100065cc <_dtoa_r+0xd4c>
1000623c:	d8c00217 	ldw	r3,8(sp)
10006240:	18c00088 	cmpgei	r3,r3,2
10006244:	1801ec26 	beq	r3,zero,100069f8 <_dtoa_r+0x1178>
10006248:	d8800617 	ldw	r2,24(sp)
1000624c:	14bfffc4 	addi	r18,r2,-1
10006250:	d8800817 	ldw	r2,32(sp)
10006254:	1481c50e 	bge	r2,r18,1000696c <_dtoa_r+0x10ec>
10006258:	d8800817 	ldw	r2,32(sp)
1000625c:	dc800815 	stw	r18,32(sp)
10006260:	9085c83a 	sub	r2,r18,r2
10006264:	b0ad883a 	add	r22,r22,r2
10006268:	0025883a 	mov	r18,zero
1000626c:	d8800617 	ldw	r2,24(sp)
10006270:	10024c16 	blt	r2,zero,10006ba4 <_dtoa_r+0x1324>
10006274:	d8c00517 	ldw	r3,20(sp)
10006278:	a0a9883a 	add	r20,r20,r2
1000627c:	1885883a 	add	r2,r3,r2
10006280:	1827883a 	mov	r19,r3
10006284:	d8800515 	stw	r2,20(sp)
10006288:	01400044 	movi	r5,1
1000628c:	e009883a 	mov	r4,fp
10006290:	000905c0 	call	1000905c <__i2b>
10006294:	1021883a 	mov	r16,r2
10006298:	04c0080e 	bge	zero,r19,100062bc <_dtoa_r+0xa3c>
1000629c:	0500070e 	bge	zero,r20,100062bc <_dtoa_r+0xa3c>
100062a0:	9805883a 	mov	r2,r19
100062a4:	a4c1a916 	blt	r20,r19,1000694c <_dtoa_r+0x10cc>
100062a8:	d8c00517 	ldw	r3,20(sp)
100062ac:	98a7c83a 	sub	r19,r19,r2
100062b0:	a0a9c83a 	sub	r20,r20,r2
100062b4:	1887c83a 	sub	r3,r3,r2
100062b8:	d8c00515 	stw	r3,20(sp)
100062bc:	d8800817 	ldw	r2,32(sp)
100062c0:	10001426 	beq	r2,zero,10006314 <_dtoa_r+0xa94>
100062c4:	d8800717 	ldw	r2,28(sp)
100062c8:	10017226 	beq	r2,zero,10006894 <_dtoa_r+0x1014>
100062cc:	04800e0e 	bge	zero,r18,10006308 <_dtoa_r+0xa88>
100062d0:	800b883a 	mov	r5,r16
100062d4:	900d883a 	mov	r6,r18
100062d8:	e009883a 	mov	r4,fp
100062dc:	000927c0 	call	1000927c <__pow5mult>
100062e0:	a80d883a 	mov	r6,r21
100062e4:	100b883a 	mov	r5,r2
100062e8:	e009883a 	mov	r4,fp
100062ec:	1021883a 	mov	r16,r2
100062f0:	00090900 	call	10009090 <__multiply>
100062f4:	102f883a 	mov	r23,r2
100062f8:	a80b883a 	mov	r5,r21
100062fc:	e009883a 	mov	r4,fp
10006300:	0008d000 	call	10008d00 <_Bfree>
10006304:	b82b883a 	mov	r21,r23
10006308:	d8800817 	ldw	r2,32(sp)
1000630c:	148dc83a 	sub	r6,r2,r18
10006310:	3001611e 	bne	r6,zero,10006898 <_dtoa_r+0x1018>
10006314:	01400044 	movi	r5,1
10006318:	e009883a 	mov	r4,fp
1000631c:	000905c0 	call	1000905c <__i2b>
10006320:	1025883a 	mov	r18,r2
10006324:	0580bc16 	blt	zero,r22,10006618 <_dtoa_r+0xd98>
10006328:	d8800217 	ldw	r2,8(sp)
1000632c:	10800088 	cmpgei	r2,r2,2
10006330:	10016526 	beq	r2,zero,100068c8 <_dtoa_r+0x1048>
10006334:	0023883a 	mov	r17,zero
10006338:	00800044 	movi	r2,1
1000633c:	b000bf1e 	bne	r22,zero,1000663c <_dtoa_r+0xdbc>
10006340:	1505883a 	add	r2,r2,r20
10006344:	108007cc 	andi	r2,r2,31
10006348:	1000aa26 	beq	r2,zero,100065f4 <_dtoa_r+0xd74>
1000634c:	00c00804 	movi	r3,32
10006350:	1887c83a 	sub	r3,r3,r2
10006354:	19000150 	cmplti	r4,r3,5
10006358:	2002f61e 	bne	r4,zero,10006f34 <_dtoa_r+0x16b4>
1000635c:	00c00704 	movi	r3,28
10006360:	1885c83a 	sub	r2,r3,r2
10006364:	d8c00517 	ldw	r3,20(sp)
10006368:	98a7883a 	add	r19,r19,r2
1000636c:	a0a9883a 	add	r20,r20,r2
10006370:	1887883a 	add	r3,r3,r2
10006374:	d8c00515 	stw	r3,20(sp)
10006378:	d8800517 	ldw	r2,20(sp)
1000637c:	00809716 	blt	zero,r2,100065dc <_dtoa_r+0xd5c>
10006380:	0500050e 	bge	zero,r20,10006398 <_dtoa_r+0xb18>
10006384:	900b883a 	mov	r5,r18
10006388:	a00d883a 	mov	r6,r20
1000638c:	e009883a 	mov	r4,fp
10006390:	00093a40 	call	100093a4 <__lshift>
10006394:	1025883a 	mov	r18,r2
10006398:	d8800917 	ldw	r2,36(sp)
1000639c:	10012b1e 	bne	r2,zero,1000684c <_dtoa_r+0xfcc>
100063a0:	d8800617 	ldw	r2,24(sp)
100063a4:	00810d0e 	bge	zero,r2,100067dc <_dtoa_r+0xf5c>
100063a8:	d8800417 	ldw	r2,16(sp)
100063ac:	10800044 	addi	r2,r2,1
100063b0:	d8800415 	stw	r2,16(sp)
100063b4:	d8800717 	ldw	r2,28(sp)
100063b8:	1000b21e 	bne	r2,zero,10006684 <_dtoa_r+0xe04>
100063bc:	ddc00317 	ldw	r23,12(sp)
100063c0:	04400044 	movi	r17,1
100063c4:	dcc00617 	ldw	r19,24(sp)
100063c8:	00000306 	br	100063d8 <_dtoa_r+0xb58>
100063cc:	0008d240 	call	10008d24 <__multadd>
100063d0:	102b883a 	mov	r21,r2
100063d4:	8c400044 	addi	r17,r17,1
100063d8:	900b883a 	mov	r5,r18
100063dc:	a809883a 	mov	r4,r21
100063e0:	00056700 	call	10005670 <quorem>
100063e4:	10800c04 	addi	r2,r2,48
100063e8:	bdc00044 	addi	r23,r23,1
100063ec:	b8bfffc5 	stb	r2,-1(r23)
100063f0:	000f883a 	mov	r7,zero
100063f4:	01800284 	movi	r6,10
100063f8:	a80b883a 	mov	r5,r21
100063fc:	e009883a 	mov	r4,fp
10006400:	8cfff216 	blt	r17,r19,100063cc <_dtoa_r+0xb4c>
10006404:	1011883a 	mov	r8,r2
10006408:	0029883a 	mov	r20,zero
1000640c:	a80b883a 	mov	r5,r21
10006410:	01800044 	movi	r6,1
10006414:	e009883a 	mov	r4,fp
10006418:	da000115 	stw	r8,4(sp)
1000641c:	00093a40 	call	100093a4 <__lshift>
10006420:	900b883a 	mov	r5,r18
10006424:	1009883a 	mov	r4,r2
10006428:	102b883a 	mov	r21,r2
1000642c:	00094e00 	call	100094e0 <__mcmp>
10006430:	b8ffffc3 	ldbu	r3,-1(r23)
10006434:	0081610e 	bge	zero,r2,100069bc <_dtoa_r+0x113c>
10006438:	d9400317 	ldw	r5,12(sp)
1000643c:	00000306 	br	1000644c <_dtoa_r+0xbcc>
10006440:	29017726 	beq	r5,r4,10006a20 <_dtoa_r+0x11a0>
10006444:	20ffffc3 	ldbu	r3,-1(r4)
10006448:	202f883a 	mov	r23,r4
1000644c:	18803fcc 	andi	r2,r3,255
10006450:	1080201c 	xori	r2,r2,128
10006454:	10bfe004 	addi	r2,r2,-128
10006458:	10800e60 	cmpeqi	r2,r2,57
1000645c:	b93fffc4 	addi	r4,r23,-1
10006460:	103ff71e 	bne	r2,zero,10006440 <_dtoa_r+0xbc0>
10006464:	18c00044 	addi	r3,r3,1
10006468:	20c00005 	stb	r3,0(r4)
1000646c:	900b883a 	mov	r5,r18
10006470:	e009883a 	mov	r4,fp
10006474:	0008d000 	call	10008d00 <_Bfree>
10006478:	803e9326 	beq	r16,zero,10005ec8 <_dtoa_r+0x648>
1000647c:	a0000426 	beq	r20,zero,10006490 <_dtoa_r+0xc10>
10006480:	a4000326 	beq	r20,r16,10006490 <_dtoa_r+0xc10>
10006484:	a00b883a 	mov	r5,r20
10006488:	e009883a 	mov	r4,fp
1000648c:	0008d000 	call	10008d00 <_Bfree>
10006490:	800b883a 	mov	r5,r16
10006494:	e009883a 	mov	r4,fp
10006498:	0008d000 	call	10008d00 <_Bfree>
1000649c:	003e8a06 	br	10005ec8 <_dtoa_r+0x648>
100064a0:	d8000915 	stw	zero,36(sp)
100064a4:	a0003616 	blt	r20,zero,10006580 <_dtoa_r+0xd00>
100064a8:	d8000515 	stw	zero,20(sp)
100064ac:	d8c00217 	ldw	r3,8(sp)
100064b0:	dd800415 	stw	r22,16(sp)
100064b4:	d8000815 	stw	zero,32(sp)
100064b8:	188002a8 	cmpgeui	r2,r3,10
100064bc:	a5a9883a 	add	r20,r20,r22
100064c0:	103d9726 	beq	r2,zero,10005b20 <_dtoa_r+0x2a0>
100064c4:	00800044 	movi	r2,1
100064c8:	d8800715 	stw	r2,28(sp)
100064cc:	00bfffc4 	movi	r2,-1
100064d0:	04bfffc4 	movi	r18,-1
100064d4:	04000044 	movi	r16,1
100064d8:	d8000215 	stw	zero,8(sp)
100064dc:	d8800615 	stw	r2,24(sp)
100064e0:	d8001e15 	stw	zero,120(sp)
100064e4:	d8800617 	ldw	r2,24(sp)
100064e8:	e0001115 	stw	zero,68(fp)
100064ec:	000b883a 	mov	r5,zero
100064f0:	d8800b15 	stw	r2,44(sp)
100064f4:	003daa06 	br	10005ba0 <_dtoa_r+0x320>
100064f8:	18800160 	cmpeqi	r2,r3,5
100064fc:	00c00044 	movi	r3,1
10006500:	d8c00715 	stw	r3,28(sp)
10006504:	10000d26 	beq	r2,zero,1000653c <_dtoa_r+0xcbc>
10006508:	d8801e17 	ldw	r2,120(sp)
1000650c:	d8c00417 	ldw	r3,16(sp)
10006510:	10c5883a 	add	r2,r2,r3
10006514:	d8800b15 	stw	r2,44(sp)
10006518:	10800044 	addi	r2,r2,1
1000651c:	d8800615 	stw	r2,24(sp)
10006520:	100d883a 	mov	r6,r2
10006524:	00bd9216 	blt	zero,r2,10005b70 <_dtoa_r+0x2f0>
10006528:	01800044 	movi	r6,1
1000652c:	003d9006 	br	10005b70 <_dtoa_r+0x2f0>
10006530:	188000a0 	cmpeqi	r2,r3,2
10006534:	d8000715 	stw	zero,28(sp)
10006538:	103d881e 	bne	r2,zero,10005b5c <_dtoa_r+0x2dc>
1000653c:	e0001115 	stw	zero,68(fp)
10006540:	000b883a 	mov	r5,zero
10006544:	e009883a 	mov	r4,fp
10006548:	0008c5c0 	call	10008c5c <_Balloc>
1000654c:	d8800315 	stw	r2,12(sp)
10006550:	e0801015 	stw	r2,64(fp)
10006554:	00bfffc4 	movi	r2,-1
10006558:	d8800b15 	stw	r2,44(sp)
1000655c:	00800044 	movi	r2,1
10006560:	d8800715 	stw	r2,28(sp)
10006564:	00bfffc4 	movi	r2,-1
10006568:	d8001e15 	stw	zero,120(sp)
1000656c:	d8800615 	stw	r2,24(sp)
10006570:	003e8f06 	br	10005fb0 <_dtoa_r+0x730>
10006574:	00800044 	movi	r2,1
10006578:	d8800915 	stw	r2,36(sp)
1000657c:	a03d5c0e 	bge	r20,zero,10005af0 <_dtoa_r+0x270>
10006580:	04800044 	movi	r18,1
10006584:	9405c83a 	sub	r2,r18,r16
10006588:	d8800515 	stw	r2,20(sp)
1000658c:	0029883a 	mov	r20,zero
10006590:	003d5806 	br	10005af4 <_dtoa_r+0x274>
10006594:	b009883a 	mov	r4,r22
10006598:	000f49c0 	call	1000f49c <__floatsidf>
1000659c:	a00d883a 	mov	r6,r20
100065a0:	980f883a 	mov	r7,r19
100065a4:	1009883a 	mov	r4,r2
100065a8:	180b883a 	mov	r5,r3
100065ac:	000e1700 	call	1000e170 <__eqdf2>
100065b0:	103d3e26 	beq	r2,zero,10005aac <_dtoa_r+0x22c>
100065b4:	b5bfffc4 	addi	r22,r22,-1
100065b8:	003d3c06 	br	10005aac <_dtoa_r+0x22c>
100065bc:	00840074 	movhi	r2,4097
100065c0:	108a0404 	addi	r2,r2,10256
100065c4:	d8800315 	stw	r2,12(sp)
100065c8:	003cdf06 	br	10005948 <_dtoa_r+0xc8>
100065cc:	dc800817 	ldw	r18,32(sp)
100065d0:	dcc00517 	ldw	r19,20(sp)
100065d4:	0021883a 	mov	r16,zero
100065d8:	003f2f06 	br	10006298 <_dtoa_r+0xa18>
100065dc:	a80b883a 	mov	r5,r21
100065e0:	100d883a 	mov	r6,r2
100065e4:	e009883a 	mov	r4,fp
100065e8:	00093a40 	call	100093a4 <__lshift>
100065ec:	102b883a 	mov	r21,r2
100065f0:	003f6306 	br	10006380 <_dtoa_r+0xb00>
100065f4:	00800704 	movi	r2,28
100065f8:	003f5a06 	br	10006364 <_dtoa_r+0xae4>
100065fc:	01000804 	movi	r4,32
10006600:	2089c83a 	sub	r4,r4,r2
10006604:	d8800117 	ldw	r2,4(sp)
10006608:	1108983a 	sll	r4,r2,r4
1000660c:	003cf306 	br	100059dc <_dtoa_r+0x15c>
10006610:	04000044 	movi	r16,1
10006614:	003d4706 	br	10005b34 <_dtoa_r+0x2b4>
10006618:	b00d883a 	mov	r6,r22
1000661c:	100b883a 	mov	r5,r2
10006620:	e009883a 	mov	r4,fp
10006624:	000927c0 	call	1000927c <__pow5mult>
10006628:	1025883a 	mov	r18,r2
1000662c:	d8800217 	ldw	r2,8(sp)
10006630:	10800090 	cmplti	r2,r2,2
10006634:	10012f1e 	bne	r2,zero,10006af4 <_dtoa_r+0x1274>
10006638:	0023883a 	mov	r17,zero
1000663c:	90800417 	ldw	r2,16(r18)
10006640:	10800104 	addi	r2,r2,4
10006644:	100490ba 	slli	r2,r2,2
10006648:	9085883a 	add	r2,r18,r2
1000664c:	11000017 	ldw	r4,0(r2)
10006650:	0008f480 	call	10008f48 <__hi0bits>
10006654:	00c00804 	movi	r3,32
10006658:	1885c83a 	sub	r2,r3,r2
1000665c:	003f3806 	br	10006340 <_dtoa_r+0xac0>
10006660:	800b883a 	mov	r5,r16
10006664:	000f883a 	mov	r7,zero
10006668:	01800284 	movi	r6,10
1000666c:	e009883a 	mov	r4,fp
10006670:	0008d240 	call	10008d24 <__multadd>
10006674:	1021883a 	mov	r16,r2
10006678:	d8800b17 	ldw	r2,44(sp)
1000667c:	00821b0e 	bge	zero,r2,10006eec <_dtoa_r+0x166c>
10006680:	d8800615 	stw	r2,24(sp)
10006684:	04c0b316 	blt	zero,r19,10006954 <_dtoa_r+0x10d4>
10006688:	8801341e 	bne	r17,zero,10006b5c <_dtoa_r+0x12dc>
1000668c:	8027883a 	mov	r19,r16
10006690:	dc400317 	ldw	r17,12(sp)
10006694:	d8c00617 	ldw	r3,24(sp)
10006698:	d8800117 	ldw	r2,4(sp)
1000669c:	8dffffc4 	addi	r23,r17,-1
100066a0:	b8c7883a 	add	r3,r23,r3
100066a4:	d8c00615 	stw	r3,24(sp)
100066a8:	d8c00217 	ldw	r3,8(sp)
100066ac:	1080004c 	andi	r2,r2,1
100066b0:	d8800815 	stw	r2,32(sp)
100066b4:	10c4b03a 	or	r2,r2,r3
100066b8:	d8800715 	stw	r2,28(sp)
100066bc:	00002c06 	br	10006770 <_dtoa_r+0xef0>
100066c0:	b80b883a 	mov	r5,r23
100066c4:	a809883a 	mov	r4,r21
100066c8:	da000515 	stw	r8,20(sp)
100066cc:	00094e00 	call	100094e0 <__mcmp>
100066d0:	b80b883a 	mov	r5,r23
100066d4:	e009883a 	mov	r4,fp
100066d8:	d8800115 	stw	r2,4(sp)
100066dc:	0008d000 	call	10008d00 <_Bfree>
100066e0:	d8800117 	ldw	r2,4(sp)
100066e4:	da000517 	ldw	r8,20(sp)
100066e8:	1000021e 	bne	r2,zero,100066f4 <_dtoa_r+0xe74>
100066ec:	d8c00717 	ldw	r3,28(sp)
100066f0:	1801f226 	beq	r3,zero,10006ebc <_dtoa_r+0x163c>
100066f4:	8dc00044 	addi	r23,r17,1
100066f8:	a0010516 	blt	r20,zero,10006b10 <_dtoa_r+0x1290>
100066fc:	d8c00217 	ldw	r3,8(sp)
10006700:	a0e8b03a 	or	r20,r20,r3
10006704:	d8c00817 	ldw	r3,32(sp)
10006708:	1d28b03a 	or	r20,r3,r20
1000670c:	a0010026 	beq	r20,zero,10006b10 <_dtoa_r+0x1290>
10006710:	00812816 	blt	zero,r2,10006bb4 <_dtoa_r+0x1334>
10006714:	d8800617 	ldw	r2,24(sp)
10006718:	8a000005 	stb	r8,0(r17)
1000671c:	14412926 	beq	r2,r17,10006bc4 <_dtoa_r+0x1344>
10006720:	a80b883a 	mov	r5,r21
10006724:	000f883a 	mov	r7,zero
10006728:	01800284 	movi	r6,10
1000672c:	e009883a 	mov	r4,fp
10006730:	0008d240 	call	10008d24 <__multadd>
10006734:	102b883a 	mov	r21,r2
10006738:	000f883a 	mov	r7,zero
1000673c:	01800284 	movi	r6,10
10006740:	800b883a 	mov	r5,r16
10006744:	e009883a 	mov	r4,fp
10006748:	84c02026 	beq	r16,r19,100067cc <_dtoa_r+0xf4c>
1000674c:	0008d240 	call	10008d24 <__multadd>
10006750:	980b883a 	mov	r5,r19
10006754:	000f883a 	mov	r7,zero
10006758:	01800284 	movi	r6,10
1000675c:	e009883a 	mov	r4,fp
10006760:	1021883a 	mov	r16,r2
10006764:	0008d240 	call	10008d24 <__multadd>
10006768:	1027883a 	mov	r19,r2
1000676c:	b823883a 	mov	r17,r23
10006770:	900b883a 	mov	r5,r18
10006774:	a809883a 	mov	r4,r21
10006778:	00056700 	call	10005670 <quorem>
1000677c:	800b883a 	mov	r5,r16
10006780:	a809883a 	mov	r4,r21
10006784:	102d883a 	mov	r22,r2
10006788:	00094e00 	call	100094e0 <__mcmp>
1000678c:	980d883a 	mov	r6,r19
10006790:	900b883a 	mov	r5,r18
10006794:	e009883a 	mov	r4,fp
10006798:	1029883a 	mov	r20,r2
1000679c:	00095380 	call	10009538 <__mdiff>
100067a0:	102f883a 	mov	r23,r2
100067a4:	10800317 	ldw	r2,12(r2)
100067a8:	b2000c04 	addi	r8,r22,48
100067ac:	103fc426 	beq	r2,zero,100066c0 <_dtoa_r+0xe40>
100067b0:	b80b883a 	mov	r5,r23
100067b4:	e009883a 	mov	r4,fp
100067b8:	da000115 	stw	r8,4(sp)
100067bc:	0008d000 	call	10008d00 <_Bfree>
100067c0:	00800044 	movi	r2,1
100067c4:	da000117 	ldw	r8,4(sp)
100067c8:	003fca06 	br	100066f4 <_dtoa_r+0xe74>
100067cc:	0008d240 	call	10008d24 <__multadd>
100067d0:	1021883a 	mov	r16,r2
100067d4:	1027883a 	mov	r19,r2
100067d8:	003fe406 	br	1000676c <_dtoa_r+0xeec>
100067dc:	d8800217 	ldw	r2,8(sp)
100067e0:	108000d0 	cmplti	r2,r2,3
100067e4:	10004b1e 	bne	r2,zero,10006914 <_dtoa_r+0x1094>
100067e8:	d8800617 	ldw	r2,24(sp)
100067ec:	103e0d1e 	bne	r2,zero,10006024 <_dtoa_r+0x7a4>
100067f0:	900b883a 	mov	r5,r18
100067f4:	e009883a 	mov	r4,fp
100067f8:	000f883a 	mov	r7,zero
100067fc:	01800144 	movi	r6,5
10006800:	0008d240 	call	10008d24 <__multadd>
10006804:	100b883a 	mov	r5,r2
10006808:	a809883a 	mov	r4,r21
1000680c:	1025883a 	mov	r18,r2
10006810:	00094e00 	call	100094e0 <__mcmp>
10006814:	00be030e 	bge	zero,r2,10006024 <_dtoa_r+0x7a4>
10006818:	d8c00317 	ldw	r3,12(sp)
1000681c:	00800c44 	movi	r2,49
10006820:	18800005 	stb	r2,0(r3)
10006824:	d8800417 	ldw	r2,16(sp)
10006828:	1dc00044 	addi	r23,r3,1
1000682c:	14400044 	addi	r17,r2,1
10006830:	900b883a 	mov	r5,r18
10006834:	e009883a 	mov	r4,fp
10006838:	0008d000 	call	10008d00 <_Bfree>
1000683c:	88800044 	addi	r2,r17,1
10006840:	d8800415 	stw	r2,16(sp)
10006844:	803f121e 	bne	r16,zero,10006490 <_dtoa_r+0xc10>
10006848:	003d9f06 	br	10005ec8 <_dtoa_r+0x648>
1000684c:	900b883a 	mov	r5,r18
10006850:	a809883a 	mov	r4,r21
10006854:	00094e00 	call	100094e0 <__mcmp>
10006858:	103ed10e 	bge	r2,zero,100063a0 <_dtoa_r+0xb20>
1000685c:	a80b883a 	mov	r5,r21
10006860:	000f883a 	mov	r7,zero
10006864:	01800284 	movi	r6,10
10006868:	e009883a 	mov	r4,fp
1000686c:	0008d240 	call	10008d24 <__multadd>
10006870:	102b883a 	mov	r21,r2
10006874:	d8800417 	ldw	r2,16(sp)
10006878:	153fffc4 	addi	r20,r2,-1
1000687c:	d8800717 	ldw	r2,28(sp)
10006880:	103f771e 	bne	r2,zero,10006660 <_dtoa_r+0xde0>
10006884:	d8800b17 	ldw	r2,44(sp)
10006888:	0081910e 	bge	zero,r2,10006ed0 <_dtoa_r+0x1650>
1000688c:	d8800615 	stw	r2,24(sp)
10006890:	003eca06 	br	100063bc <_dtoa_r+0xb3c>
10006894:	d9800817 	ldw	r6,32(sp)
10006898:	a80b883a 	mov	r5,r21
1000689c:	e009883a 	mov	r4,fp
100068a0:	000927c0 	call	1000927c <__pow5mult>
100068a4:	102b883a 	mov	r21,r2
100068a8:	003e9a06 	br	10006314 <_dtoa_r+0xa94>
100068ac:	00840074 	movhi	r2,4097
100068b0:	1007883a 	mov	r3,r2
100068b4:	18ca0d04 	addi	r3,r3,10292
100068b8:	00840074 	movhi	r2,4097
100068bc:	d8c00315 	stw	r3,12(sp)
100068c0:	108a0dc4 	addi	r2,r2,10295
100068c4:	003da506 	br	10005f5c <_dtoa_r+0x6dc>
100068c8:	d8800117 	ldw	r2,4(sp)
100068cc:	103e991e 	bne	r2,zero,10006334 <_dtoa_r+0xab4>
100068d0:	00800434 	movhi	r2,16
100068d4:	10bfffc4 	addi	r2,r2,-1
100068d8:	8884703a 	and	r2,r17,r2
100068dc:	103e951e 	bne	r2,zero,10006334 <_dtoa_r+0xab4>
100068e0:	8c5ffc2c 	andhi	r17,r17,32752
100068e4:	883e9326 	beq	r17,zero,10006334 <_dtoa_r+0xab4>
100068e8:	d8800517 	ldw	r2,20(sp)
100068ec:	a5000044 	addi	r20,r20,1
100068f0:	04400044 	movi	r17,1
100068f4:	10800044 	addi	r2,r2,1
100068f8:	d8800515 	stw	r2,20(sp)
100068fc:	003e8e06 	br	10006338 <_dtoa_r+0xab8>
10006900:	00800044 	movi	r2,1
10006904:	04800044 	movi	r18,1
10006908:	d8800615 	stw	r2,24(sp)
1000690c:	d8801e15 	stw	r2,120(sp)
10006910:	003ef406 	br	100064e4 <_dtoa_r+0xc64>
10006914:	d8800417 	ldw	r2,16(sp)
10006918:	10800044 	addi	r2,r2,1
1000691c:	d8800415 	stw	r2,16(sp)
10006920:	d8800717 	ldw	r2,28(sp)
10006924:	103f571e 	bne	r2,zero,10006684 <_dtoa_r+0xe04>
10006928:	900b883a 	mov	r5,r18
1000692c:	a809883a 	mov	r4,r21
10006930:	00056700 	call	10005670 <quorem>
10006934:	12000c04 	addi	r8,r2,48
10006938:	d8800317 	ldw	r2,12(sp)
1000693c:	0029883a 	mov	r20,zero
10006940:	15c00044 	addi	r23,r2,1
10006944:	12000005 	stb	r8,0(r2)
10006948:	003eb006 	br	1000640c <_dtoa_r+0xb8c>
1000694c:	a005883a 	mov	r2,r20
10006950:	003e5506 	br	100062a8 <_dtoa_r+0xa28>
10006954:	800b883a 	mov	r5,r16
10006958:	980d883a 	mov	r6,r19
1000695c:	e009883a 	mov	r4,fp
10006960:	00093a40 	call	100093a4 <__lshift>
10006964:	1021883a 	mov	r16,r2
10006968:	003f4706 	br	10006688 <_dtoa_r+0xe08>
1000696c:	14a5c83a 	sub	r18,r2,r18
10006970:	003e3e06 	br	1000626c <_dtoa_r+0x9ec>
10006974:	00840074 	movhi	r2,4097
10006978:	108a1e04 	addi	r2,r2,10360
1000697c:	11800817 	ldw	r6,32(r2)
10006980:	11c00917 	ldw	r7,36(r2)
10006984:	d9000117 	ldw	r4,4(sp)
10006988:	880b883a 	mov	r5,r17
1000698c:	da400e15 	stw	r9,56(sp)
10006990:	da800d15 	stw	r10,52(sp)
10006994:	000d8c80 	call	1000d8c8 <__divdf3>
10006998:	d8800c15 	stw	r2,48(sp)
1000699c:	1827883a 	mov	r19,r3
100069a0:	bdc003cc 	andi	r23,r23,15
100069a4:	040000c4 	movi	r16,3
100069a8:	da800d17 	ldw	r10,52(sp)
100069ac:	da400e17 	ldw	r9,56(sp)
100069b0:	003c9206 	br	10005bfc <_dtoa_r+0x37c>
100069b4:	d8000715 	stw	zero,28(sp)
100069b8:	003ed306 	br	10006508 <_dtoa_r+0xc88>
100069bc:	1000031e 	bne	r2,zero,100069cc <_dtoa_r+0x114c>
100069c0:	da000117 	ldw	r8,4(sp)
100069c4:	4200004c 	andi	r8,r8,1
100069c8:	403e9b1e 	bne	r8,zero,10006438 <_dtoa_r+0xbb8>
100069cc:	1805883a 	mov	r2,r3
100069d0:	00000206 	br	100069dc <_dtoa_r+0x115c>
100069d4:	b8bfff83 	ldbu	r2,-2(r23)
100069d8:	182f883a 	mov	r23,r3
100069dc:	10803fcc 	andi	r2,r2,255
100069e0:	1080201c 	xori	r2,r2,128
100069e4:	10bfe004 	addi	r2,r2,-128
100069e8:	10800c18 	cmpnei	r2,r2,48
100069ec:	b8ffffc4 	addi	r3,r23,-1
100069f0:	103ff826 	beq	r2,zero,100069d4 <_dtoa_r+0x1154>
100069f4:	003e9d06 	br	1000646c <_dtoa_r+0xbec>
100069f8:	d8c00a17 	ldw	r3,40(sp)
100069fc:	1800bc26 	beq	r3,zero,10006cf0 <_dtoa_r+0x1470>
10006a00:	d8c00517 	ldw	r3,20(sp)
10006a04:	10810cc4 	addi	r2,r2,1075
10006a08:	a0a9883a 	add	r20,r20,r2
10006a0c:	1885883a 	add	r2,r3,r2
10006a10:	1827883a 	mov	r19,r3
10006a14:	dc800817 	ldw	r18,32(sp)
10006a18:	d8800515 	stw	r2,20(sp)
10006a1c:	003e1a06 	br	10006288 <_dtoa_r+0xa08>
10006a20:	d8c00317 	ldw	r3,12(sp)
10006a24:	00800c44 	movi	r2,49
10006a28:	18800005 	stb	r2,0(r3)
10006a2c:	d8800417 	ldw	r2,16(sp)
10006a30:	10800044 	addi	r2,r2,1
10006a34:	d8800415 	stw	r2,16(sp)
10006a38:	003e8c06 	br	1000646c <_dtoa_r+0xbec>
10006a3c:	8009883a 	mov	r4,r16
10006a40:	000f49c0 	call	1000f49c <__floatsidf>
10006a44:	900d883a 	mov	r6,r18
10006a48:	980f883a 	mov	r7,r19
10006a4c:	1009883a 	mov	r4,r2
10006a50:	180b883a 	mov	r5,r3
10006a54:	000e3d00 	call	1000e3d0 <__muldf3>
10006a58:	000d883a 	mov	r6,zero
10006a5c:	01d00734 	movhi	r7,16412
10006a60:	1009883a 	mov	r4,r2
10006a64:	180b883a 	mov	r5,r3
10006a68:	000cf280 	call	1000cf28 <__adddf3>
10006a6c:	d8800c15 	stw	r2,48(sp)
10006a70:	00bf3034 	movhi	r2,64704
10006a74:	1885883a 	add	r2,r3,r2
10006a78:	d8800d15 	stw	r2,52(sp)
10006a7c:	9009883a 	mov	r4,r18
10006a80:	980b883a 	mov	r5,r19
10006a84:	000d883a 	mov	r6,zero
10006a88:	01d00534 	movhi	r7,16404
10006a8c:	000ea5c0 	call	1000ea5c <__subdf3>
10006a90:	ddc00c17 	ldw	r23,48(sp)
10006a94:	dcc00d17 	ldw	r19,52(sp)
10006a98:	1009883a 	mov	r4,r2
10006a9c:	b80d883a 	mov	r6,r23
10006aa0:	980f883a 	mov	r7,r19
10006aa4:	180b883a 	mov	r5,r3
10006aa8:	1025883a 	mov	r18,r2
10006aac:	1821883a 	mov	r16,r3
10006ab0:	000e1f00 	call	1000e1f0 <__gedf2>
10006ab4:	0080ee16 	blt	zero,r2,10006e70 <_dtoa_r+0x15f0>
10006ab8:	99e0003c 	xorhi	r7,r19,32768
10006abc:	b80d883a 	mov	r6,r23
10006ac0:	9009883a 	mov	r4,r18
10006ac4:	800b883a 	mov	r5,r16
10006ac8:	000e2e00 	call	1000e2e0 <__ledf2>
10006acc:	103d380e 	bge	r2,zero,10005fb0 <_dtoa_r+0x730>
10006ad0:	0025883a 	mov	r18,zero
10006ad4:	0021883a 	mov	r16,zero
10006ad8:	003d5206 	br	10006024 <_dtoa_r+0x7a4>
10006adc:	d8800417 	ldw	r2,16(sp)
10006ae0:	1000ad1e 	bne	r2,zero,10006d98 <_dtoa_r+0x1518>
10006ae4:	dc800117 	ldw	r18,4(sp)
10006ae8:	8827883a 	mov	r19,r17
10006aec:	04000084 	movi	r16,2
10006af0:	003c5b06 	br	10005c60 <_dtoa_r+0x3e0>
10006af4:	d8800117 	ldw	r2,4(sp)
10006af8:	103ecf1e 	bne	r2,zero,10006638 <_dtoa_r+0xdb8>
10006afc:	00800434 	movhi	r2,16
10006b00:	10bfffc4 	addi	r2,r2,-1
10006b04:	8884703a 	and	r2,r17,r2
10006b08:	103f7526 	beq	r2,zero,100068e0 <_dtoa_r+0x1060>
10006b0c:	003eca06 	br	10006638 <_dtoa_r+0xdb8>
10006b10:	00800e0e 	bge	zero,r2,10006b4c <_dtoa_r+0x12cc>
10006b14:	a80b883a 	mov	r5,r21
10006b18:	01800044 	movi	r6,1
10006b1c:	e009883a 	mov	r4,fp
10006b20:	da000115 	stw	r8,4(sp)
10006b24:	00093a40 	call	100093a4 <__lshift>
10006b28:	900b883a 	mov	r5,r18
10006b2c:	1009883a 	mov	r4,r2
10006b30:	102b883a 	mov	r21,r2
10006b34:	00094e00 	call	100094e0 <__mcmp>
10006b38:	da000117 	ldw	r8,4(sp)
10006b3c:	0080d50e 	bge	zero,r2,10006e94 <_dtoa_r+0x1614>
10006b40:	42000e60 	cmpeqi	r8,r8,57
10006b44:	4000c31e 	bne	r8,zero,10006e54 <_dtoa_r+0x15d4>
10006b48:	b2000c44 	addi	r8,r22,49
10006b4c:	8029883a 	mov	r20,r16
10006b50:	8a000005 	stb	r8,0(r17)
10006b54:	9821883a 	mov	r16,r19
10006b58:	003e4406 	br	1000646c <_dtoa_r+0xbec>
10006b5c:	81400117 	ldw	r5,4(r16)
10006b60:	e009883a 	mov	r4,fp
10006b64:	0008c5c0 	call	10008c5c <_Balloc>
10006b68:	81800417 	ldw	r6,16(r16)
10006b6c:	81400304 	addi	r5,r16,12
10006b70:	11000304 	addi	r4,r2,12
10006b74:	31800084 	addi	r6,r6,2
10006b78:	300c90ba 	slli	r6,r6,2
10006b7c:	1023883a 	mov	r17,r2
10006b80:	0002ffc0 	call	10002ffc <memcpy>
10006b84:	01800044 	movi	r6,1
10006b88:	880b883a 	mov	r5,r17
10006b8c:	e009883a 	mov	r4,fp
10006b90:	00093a40 	call	100093a4 <__lshift>
10006b94:	1027883a 	mov	r19,r2
10006b98:	003ebd06 	br	10006690 <_dtoa_r+0xe10>
10006b9c:	dd400117 	ldw	r21,4(sp)
10006ba0:	003cc906 	br	10005ec8 <_dtoa_r+0x648>
10006ba4:	d8800517 	ldw	r2,20(sp)
10006ba8:	d8c00617 	ldw	r3,24(sp)
10006bac:	10e7c83a 	sub	r19,r2,r3
10006bb0:	003db506 	br	10006288 <_dtoa_r+0xa08>
10006bb4:	40800e58 	cmpnei	r2,r8,57
10006bb8:	1000a626 	beq	r2,zero,10006e54 <_dtoa_r+0x15d4>
10006bbc:	42000044 	addi	r8,r8,1
10006bc0:	003fe206 	br	10006b4c <_dtoa_r+0x12cc>
10006bc4:	8029883a 	mov	r20,r16
10006bc8:	9821883a 	mov	r16,r19
10006bcc:	003e0f06 	br	1000640c <_dtoa_r+0xb8c>
10006bd0:	d9000c17 	ldw	r4,48(sp)
10006bd4:	d9400d17 	ldw	r5,52(sp)
10006bd8:	da401015 	stw	r9,64(sp)
10006bdc:	000e3d00 	call	1000e3d0 <__muldf3>
10006be0:	d9000e17 	ldw	r4,56(sp)
10006be4:	d8c00d15 	stw	r3,52(sp)
10006be8:	da401017 	ldw	r9,64(sp)
10006bec:	d8c00317 	ldw	r3,12(sp)
10006bf0:	d8800c15 	stw	r2,48(sp)
10006bf4:	20800058 	cmpnei	r2,r4,1
10006bf8:	1a400005 	stb	r9,0(r3)
10006bfc:	1907883a 	add	r3,r3,r4
10006c00:	1809883a 	mov	r4,r3
10006c04:	10001d26 	beq	r2,zero,10006c7c <_dtoa_r+0x13fc>
10006c08:	8007883a 	mov	r3,r16
10006c0c:	9005883a 	mov	r2,r18
10006c10:	dc400e15 	stw	r17,56(sp)
10006c14:	2021883a 	mov	r16,r4
10006c18:	000d883a 	mov	r6,zero
10006c1c:	01d00934 	movhi	r7,16420
10006c20:	1009883a 	mov	r4,r2
10006c24:	180b883a 	mov	r5,r3
10006c28:	000e3d00 	call	1000e3d0 <__muldf3>
10006c2c:	180b883a 	mov	r5,r3
10006c30:	1009883a 	mov	r4,r2
10006c34:	1825883a 	mov	r18,r3
10006c38:	1023883a 	mov	r17,r2
10006c3c:	000f41c0 	call	1000f41c <__fixdfsi>
10006c40:	1009883a 	mov	r4,r2
10006c44:	1027883a 	mov	r19,r2
10006c48:	000f49c0 	call	1000f49c <__floatsidf>
10006c4c:	100d883a 	mov	r6,r2
10006c50:	180f883a 	mov	r7,r3
10006c54:	8809883a 	mov	r4,r17
10006c58:	900b883a 	mov	r5,r18
10006c5c:	bdc00044 	addi	r23,r23,1
10006c60:	9cc00c04 	addi	r19,r19,48
10006c64:	000ea5c0 	call	1000ea5c <__subdf3>
10006c68:	bcffffc5 	stb	r19,-1(r23)
10006c6c:	bc3fea1e 	bne	r23,r16,10006c18 <_dtoa_r+0x1398>
10006c70:	dc400e17 	ldw	r17,56(sp)
10006c74:	1025883a 	mov	r18,r2
10006c78:	1821883a 	mov	r16,r3
10006c7c:	d9000c17 	ldw	r4,48(sp)
10006c80:	d9400d17 	ldw	r5,52(sp)
10006c84:	000d883a 	mov	r6,zero
10006c88:	01cff834 	movhi	r7,16352
10006c8c:	000cf280 	call	1000cf28 <__adddf3>
10006c90:	100d883a 	mov	r6,r2
10006c94:	180f883a 	mov	r7,r3
10006c98:	9009883a 	mov	r4,r18
10006c9c:	800b883a 	mov	r5,r16
10006ca0:	000e1f00 	call	1000e1f0 <__gedf2>
10006ca4:	00807516 	blt	zero,r2,10006e7c <_dtoa_r+0x15fc>
10006ca8:	d9800c17 	ldw	r6,48(sp)
10006cac:	d9c00d17 	ldw	r7,52(sp)
10006cb0:	0009883a 	mov	r4,zero
10006cb4:	014ff834 	movhi	r5,16352
10006cb8:	000ea5c0 	call	1000ea5c <__subdf3>
10006cbc:	100d883a 	mov	r6,r2
10006cc0:	180f883a 	mov	r7,r3
10006cc4:	9009883a 	mov	r4,r18
10006cc8:	800b883a 	mov	r5,r16
10006ccc:	000e2e00 	call	1000e2e0 <__ledf2>
10006cd0:	103cb70e 	bge	r2,zero,10005fb0 <_dtoa_r+0x730>
10006cd4:	00000106 	br	10006cdc <_dtoa_r+0x145c>
10006cd8:	182f883a 	mov	r23,r3
10006cdc:	b8bfffc7 	ldb	r2,-1(r23)
10006ce0:	b8ffffc4 	addi	r3,r23,-1
10006ce4:	10800c20 	cmpeqi	r2,r2,48
10006ce8:	103ffb1e 	bne	r2,zero,10006cd8 <_dtoa_r+0x1458>
10006cec:	003c7306 	br	10005ebc <_dtoa_r+0x63c>
10006cf0:	d8c01217 	ldw	r3,72(sp)
10006cf4:	d9000517 	ldw	r4,20(sp)
10006cf8:	00800d84 	movi	r2,54
10006cfc:	10c5c83a 	sub	r2,r2,r3
10006d00:	a0a9883a 	add	r20,r20,r2
10006d04:	2085883a 	add	r2,r4,r2
10006d08:	2027883a 	mov	r19,r4
10006d0c:	dc800817 	ldw	r18,32(sp)
10006d10:	d8800515 	stw	r2,20(sp)
10006d14:	003d5c06 	br	10006288 <_dtoa_r+0xa08>
10006d18:	d8800617 	ldw	r2,24(sp)
10006d1c:	103f4726 	beq	r2,zero,10006a3c <_dtoa_r+0x11bc>
10006d20:	ddc00b17 	ldw	r23,44(sp)
10006d24:	05fca20e 	bge	zero,r23,10005fb0 <_dtoa_r+0x730>
10006d28:	980b883a 	mov	r5,r19
10006d2c:	000d883a 	mov	r6,zero
10006d30:	01d00934 	movhi	r7,16420
10006d34:	9009883a 	mov	r4,r18
10006d38:	000e3d00 	call	1000e3d0 <__muldf3>
10006d3c:	81000044 	addi	r4,r16,1
10006d40:	1025883a 	mov	r18,r2
10006d44:	1827883a 	mov	r19,r3
10006d48:	000f49c0 	call	1000f49c <__floatsidf>
10006d4c:	900d883a 	mov	r6,r18
10006d50:	980f883a 	mov	r7,r19
10006d54:	1009883a 	mov	r4,r2
10006d58:	180b883a 	mov	r5,r3
10006d5c:	000e3d00 	call	1000e3d0 <__muldf3>
10006d60:	000d883a 	mov	r6,zero
10006d64:	01d00734 	movhi	r7,16412
10006d68:	1009883a 	mov	r4,r2
10006d6c:	180b883a 	mov	r5,r3
10006d70:	000cf280 	call	1000cf28 <__adddf3>
10006d74:	d8800c15 	stw	r2,48(sp)
10006d78:	d8800417 	ldw	r2,16(sp)
10006d7c:	ddc00e15 	stw	r23,56(sp)
10006d80:	10bfffc4 	addi	r2,r2,-1
10006d84:	d8800f15 	stw	r2,60(sp)
10006d88:	00bf3034 	movhi	r2,64704
10006d8c:	1885883a 	add	r2,r3,r2
10006d90:	d8800d15 	stw	r2,52(sp)
10006d94:	003bd006 	br	10005cd8 <_dtoa_r+0x458>
10006d98:	d8800417 	ldw	r2,16(sp)
10006d9c:	d9000117 	ldw	r4,4(sp)
10006da0:	880b883a 	mov	r5,r17
10006da4:	00afc83a 	sub	r23,zero,r2
10006da8:	b88003cc 	andi	r2,r23,15
10006dac:	100690fa 	slli	r3,r2,3
10006db0:	00840074 	movhi	r2,4097
10006db4:	108a2804 	addi	r2,r2,10400
10006db8:	10c5883a 	add	r2,r2,r3
10006dbc:	11800017 	ldw	r6,0(r2)
10006dc0:	11c00117 	ldw	r7,4(r2)
10006dc4:	b82fd13a 	srai	r23,r23,4
10006dc8:	000e3d00 	call	1000e3d0 <__muldf3>
10006dcc:	1025883a 	mov	r18,r2
10006dd0:	1827883a 	mov	r19,r3
10006dd4:	b8004a26 	beq	r23,zero,10006f00 <_dtoa_r+0x1680>
10006dd8:	02040074 	movhi	r8,4097
10006ddc:	04000084 	movi	r16,2
10006de0:	420a1e04 	addi	r8,r8,10360
10006de4:	dc400c15 	stw	r17,48(sp)
10006de8:	000f883a 	mov	r7,zero
10006dec:	8023883a 	mov	r17,r16
10006df0:	4021883a 	mov	r16,r8
10006df4:	b980004c 	andi	r6,r23,1
10006df8:	1009883a 	mov	r4,r2
10006dfc:	b82fd07a 	srai	r23,r23,1
10006e00:	180b883a 	mov	r5,r3
10006e04:	30000526 	beq	r6,zero,10006e1c <_dtoa_r+0x159c>
10006e08:	81c00117 	ldw	r7,4(r16)
10006e0c:	81800017 	ldw	r6,0(r16)
10006e10:	8c400044 	addi	r17,r17,1
10006e14:	000e3d00 	call	1000e3d0 <__muldf3>
10006e18:	01c00044 	movi	r7,1
10006e1c:	84000204 	addi	r16,r16,8
10006e20:	b83ff41e 	bne	r23,zero,10006df4 <_dtoa_r+0x1574>
10006e24:	39c03fcc 	andi	r7,r7,255
10006e28:	8821883a 	mov	r16,r17
10006e2c:	dc400c17 	ldw	r17,48(sp)
10006e30:	383b8b26 	beq	r7,zero,10005c60 <_dtoa_r+0x3e0>
10006e34:	1025883a 	mov	r18,r2
10006e38:	1827883a 	mov	r19,r3
10006e3c:	003b8806 	br	10005c60 <_dtoa_r+0x3e0>
10006e40:	d8800417 	ldw	r2,16(sp)
10006e44:	02000c44 	movi	r8,49
10006e48:	10800044 	addi	r2,r2,1
10006e4c:	d8800415 	stw	r2,16(sp)
10006e50:	003cf606 	br	1000622c <_dtoa_r+0x9ac>
10006e54:	00800e44 	movi	r2,57
10006e58:	8029883a 	mov	r20,r16
10006e5c:	88800005 	stb	r2,0(r17)
10006e60:	9821883a 	mov	r16,r19
10006e64:	00c00e44 	movi	r3,57
10006e68:	d9400317 	ldw	r5,12(sp)
10006e6c:	003d7706 	br	1000644c <_dtoa_r+0xbcc>
10006e70:	0025883a 	mov	r18,zero
10006e74:	0021883a 	mov	r16,zero
10006e78:	003e6706 	br	10006818 <_dtoa_r+0xf98>
10006e7c:	d8800f17 	ldw	r2,60(sp)
10006e80:	ba3fffc3 	ldbu	r8,-1(r23)
10006e84:	d9000317 	ldw	r4,12(sp)
10006e88:	10800044 	addi	r2,r2,1
10006e8c:	d8800415 	stw	r2,16(sp)
10006e90:	003cdf06 	br	10006210 <_dtoa_r+0x990>
10006e94:	103f2d1e 	bne	r2,zero,10006b4c <_dtoa_r+0x12cc>
10006e98:	4080004c 	andi	r2,r8,1
10006e9c:	103f281e 	bne	r2,zero,10006b40 <_dtoa_r+0x12c0>
10006ea0:	003f2a06 	br	10006b4c <_dtoa_r+0x12cc>
10006ea4:	d8800f17 	ldw	r2,60(sp)
10006ea8:	8811883a 	mov	r8,r17
10006eac:	d9000317 	ldw	r4,12(sp)
10006eb0:	10800044 	addi	r2,r2,1
10006eb4:	d8800415 	stw	r2,16(sp)
10006eb8:	003cd506 	br	10006210 <_dtoa_r+0x990>
10006ebc:	40800e60 	cmpeqi	r2,r8,57
10006ec0:	8dc00044 	addi	r23,r17,1
10006ec4:	103fe31e 	bne	r2,zero,10006e54 <_dtoa_r+0x15d4>
10006ec8:	053f1f16 	blt	zero,r20,10006b48 <_dtoa_r+0x12c8>
10006ecc:	003f1f06 	br	10006b4c <_dtoa_r+0x12cc>
10006ed0:	d8800217 	ldw	r2,8(sp)
10006ed4:	108000c8 	cmpgei	r2,r2,3
10006ed8:	103e9326 	beq	r2,zero,10006928 <_dtoa_r+0x10a8>
10006edc:	d8800b17 	ldw	r2,44(sp)
10006ee0:	dd000415 	stw	r20,16(sp)
10006ee4:	d8800615 	stw	r2,24(sp)
10006ee8:	003e3f06 	br	100067e8 <_dtoa_r+0xf68>
10006eec:	d8800217 	ldw	r2,8(sp)
10006ef0:	108000c8 	cmpgei	r2,r2,3
10006ef4:	103ff91e 	bne	r2,zero,10006edc <_dtoa_r+0x165c>
10006ef8:	d8800b17 	ldw	r2,44(sp)
10006efc:	003de006 	br	10006680 <_dtoa_r+0xe00>
10006f00:	04000084 	movi	r16,2
10006f04:	003b5606 	br	10005c60 <_dtoa_r+0x3e0>
10006f08:	d8800f17 	ldw	r2,60(sp)
10006f0c:	d9000317 	ldw	r4,12(sp)
10006f10:	10800044 	addi	r2,r2,1
10006f14:	d8800415 	stw	r2,16(sp)
10006f18:	003cbd06 	br	10006210 <_dtoa_r+0x990>
10006f1c:	00840074 	movhi	r2,4097
10006f20:	108a0e04 	addi	r2,r2,10296
10006f24:	d8800315 	stw	r2,12(sp)
10006f28:	003a8706 	br	10005948 <_dtoa_r+0xc8>
10006f2c:	000b883a 	mov	r5,zero
10006f30:	003b1b06 	br	10005ba0 <_dtoa_r+0x320>
10006f34:	18c00120 	cmpeqi	r3,r3,4
10006f38:	183d0f1e 	bne	r3,zero,10006378 <_dtoa_r+0xaf8>
10006f3c:	00c00f04 	movi	r3,60
10006f40:	1885c83a 	sub	r2,r3,r2
10006f44:	003d0706 	br	10006364 <_dtoa_r+0xae4>

10006f48 <__sflush_r>:
10006f48:	2880030b 	ldhu	r2,12(r5)
10006f4c:	defffb04 	addi	sp,sp,-20
10006f50:	dcc00315 	stw	r19,12(sp)
10006f54:	dc000015 	stw	r16,0(sp)
10006f58:	dfc00415 	stw	ra,16(sp)
10006f5c:	dc800215 	stw	r18,8(sp)
10006f60:	dc400115 	stw	r17,4(sp)
10006f64:	10c0020c 	andi	r3,r2,8
10006f68:	2821883a 	mov	r16,r5
10006f6c:	2027883a 	mov	r19,r4
10006f70:	18003f1e 	bne	r3,zero,10007070 <__sflush_r+0x128>
10006f74:	28c00117 	ldw	r3,4(r5)
10006f78:	10820014 	ori	r2,r2,2048
10006f7c:	2880030d 	sth	r2,12(r5)
10006f80:	00c0550e 	bge	zero,r3,100070d8 <__sflush_r+0x190>
10006f84:	82000a17 	ldw	r8,40(r16)
10006f88:	40003126 	beq	r8,zero,10007050 <__sflush_r+0x108>
10006f8c:	9c400017 	ldw	r17,0(r19)
10006f90:	1104000c 	andi	r4,r2,4096
10006f94:	98000015 	stw	zero,0(r19)
10006f98:	1007883a 	mov	r3,r2
10006f9c:	81400717 	ldw	r5,28(r16)
10006fa0:	2000521e 	bne	r4,zero,100070ec <__sflush_r+0x1a4>
10006fa4:	01c00044 	movi	r7,1
10006fa8:	000d883a 	mov	r6,zero
10006fac:	9809883a 	mov	r4,r19
10006fb0:	403ee83a 	callr	r8
10006fb4:	10ffffd8 	cmpnei	r3,r2,-1
10006fb8:	18005826 	beq	r3,zero,1000711c <__sflush_r+0x1d4>
10006fbc:	80c0030b 	ldhu	r3,12(r16)
10006fc0:	82000a17 	ldw	r8,40(r16)
10006fc4:	81400717 	ldw	r5,28(r16)
10006fc8:	18c0010c 	andi	r3,r3,4
10006fcc:	18000626 	beq	r3,zero,10006fe8 <__sflush_r+0xa0>
10006fd0:	81000117 	ldw	r4,4(r16)
10006fd4:	80c00c17 	ldw	r3,48(r16)
10006fd8:	1105c83a 	sub	r2,r2,r4
10006fdc:	18000226 	beq	r3,zero,10006fe8 <__sflush_r+0xa0>
10006fe0:	80c00f17 	ldw	r3,60(r16)
10006fe4:	10c5c83a 	sub	r2,r2,r3
10006fe8:	000f883a 	mov	r7,zero
10006fec:	100d883a 	mov	r6,r2
10006ff0:	9809883a 	mov	r4,r19
10006ff4:	403ee83a 	callr	r8
10006ff8:	10ffffd8 	cmpnei	r3,r2,-1
10006ffc:	18003d1e 	bne	r3,zero,100070f4 <__sflush_r+0x1ac>
10007000:	99000017 	ldw	r4,0(r19)
10007004:	80c0030b 	ldhu	r3,12(r16)
10007008:	20004e26 	beq	r4,zero,10007144 <__sflush_r+0x1fc>
1000700c:	21400760 	cmpeqi	r5,r4,29
10007010:	2800021e 	bne	r5,zero,1000701c <__sflush_r+0xd4>
10007014:	210005a0 	cmpeqi	r4,r4,22
10007018:	20002c26 	beq	r4,zero,100070cc <__sflush_r+0x184>
1000701c:	80800417 	ldw	r2,16(r16)
10007020:	18fdffcc 	andi	r3,r3,63487
10007024:	80c0030d 	sth	r3,12(r16)
10007028:	80000115 	stw	zero,4(r16)
1000702c:	80800015 	stw	r2,0(r16)
10007030:	81400c17 	ldw	r5,48(r16)
10007034:	9c400015 	stw	r17,0(r19)
10007038:	28000526 	beq	r5,zero,10007050 <__sflush_r+0x108>
1000703c:	80801004 	addi	r2,r16,64
10007040:	28800226 	beq	r5,r2,1000704c <__sflush_r+0x104>
10007044:	9809883a 	mov	r4,r19
10007048:	00076580 	call	10007658 <_free_r>
1000704c:	80000c15 	stw	zero,48(r16)
10007050:	0005883a 	mov	r2,zero
10007054:	dfc00417 	ldw	ra,16(sp)
10007058:	dcc00317 	ldw	r19,12(sp)
1000705c:	dc800217 	ldw	r18,8(sp)
10007060:	dc400117 	ldw	r17,4(sp)
10007064:	dc000017 	ldw	r16,0(sp)
10007068:	dec00504 	addi	sp,sp,20
1000706c:	f800283a 	ret
10007070:	2c800417 	ldw	r18,16(r5)
10007074:	903ff626 	beq	r18,zero,10007050 <__sflush_r+0x108>
10007078:	2c400017 	ldw	r17,0(r5)
1000707c:	108000cc 	andi	r2,r2,3
10007080:	2c800015 	stw	r18,0(r5)
10007084:	8ca3c83a 	sub	r17,r17,r18
10007088:	1000161e 	bne	r2,zero,100070e4 <__sflush_r+0x19c>
1000708c:	28800517 	ldw	r2,20(r5)
10007090:	80800215 	stw	r2,8(r16)
10007094:	04400316 	blt	zero,r17,100070a4 <__sflush_r+0x15c>
10007098:	003fed06 	br	10007050 <__sflush_r+0x108>
1000709c:	90a5883a 	add	r18,r18,r2
100070a0:	047feb0e 	bge	zero,r17,10007050 <__sflush_r+0x108>
100070a4:	80800917 	ldw	r2,36(r16)
100070a8:	81400717 	ldw	r5,28(r16)
100070ac:	880f883a 	mov	r7,r17
100070b0:	900d883a 	mov	r6,r18
100070b4:	9809883a 	mov	r4,r19
100070b8:	103ee83a 	callr	r2
100070bc:	88a3c83a 	sub	r17,r17,r2
100070c0:	00bff616 	blt	zero,r2,1000709c <__sflush_r+0x154>
100070c4:	80c0030b 	ldhu	r3,12(r16)
100070c8:	00bfffc4 	movi	r2,-1
100070cc:	18c01014 	ori	r3,r3,64
100070d0:	80c0030d 	sth	r3,12(r16)
100070d4:	003fdf06 	br	10007054 <__sflush_r+0x10c>
100070d8:	28c00f17 	ldw	r3,60(r5)
100070dc:	00ffa916 	blt	zero,r3,10006f84 <__sflush_r+0x3c>
100070e0:	003fdb06 	br	10007050 <__sflush_r+0x108>
100070e4:	0005883a 	mov	r2,zero
100070e8:	003fe906 	br	10007090 <__sflush_r+0x148>
100070ec:	80801417 	ldw	r2,80(r16)
100070f0:	003fb506 	br	10006fc8 <__sflush_r+0x80>
100070f4:	80c0030b 	ldhu	r3,12(r16)
100070f8:	81000417 	ldw	r4,16(r16)
100070fc:	80000115 	stw	zero,4(r16)
10007100:	197dffcc 	andi	r5,r3,63487
10007104:	8140030d 	sth	r5,12(r16)
10007108:	81000015 	stw	r4,0(r16)
1000710c:	18c4000c 	andi	r3,r3,4096
10007110:	183fc726 	beq	r3,zero,10007030 <__sflush_r+0xe8>
10007114:	80801415 	stw	r2,80(r16)
10007118:	003fc506 	br	10007030 <__sflush_r+0xe8>
1000711c:	98c00017 	ldw	r3,0(r19)
10007120:	183fa626 	beq	r3,zero,10006fbc <__sflush_r+0x74>
10007124:	19000760 	cmpeqi	r4,r3,29
10007128:	20000e1e 	bne	r4,zero,10007164 <__sflush_r+0x21c>
1000712c:	18c00598 	cmpnei	r3,r3,22
10007130:	18000c26 	beq	r3,zero,10007164 <__sflush_r+0x21c>
10007134:	80c0030b 	ldhu	r3,12(r16)
10007138:	18c01014 	ori	r3,r3,64
1000713c:	80c0030d 	sth	r3,12(r16)
10007140:	003fc406 	br	10007054 <__sflush_r+0x10c>
10007144:	81000417 	ldw	r4,16(r16)
10007148:	197dffcc 	andi	r5,r3,63487
1000714c:	8140030d 	sth	r5,12(r16)
10007150:	80000115 	stw	zero,4(r16)
10007154:	81000015 	stw	r4,0(r16)
10007158:	18c4000c 	andi	r3,r3,4096
1000715c:	183fb426 	beq	r3,zero,10007030 <__sflush_r+0xe8>
10007160:	003fec06 	br	10007114 <__sflush_r+0x1cc>
10007164:	9c400015 	stw	r17,0(r19)
10007168:	0005883a 	mov	r2,zero
1000716c:	003fb906 	br	10007054 <__sflush_r+0x10c>

10007170 <_fflush_r>:
10007170:	defffd04 	addi	sp,sp,-12
10007174:	dc000115 	stw	r16,4(sp)
10007178:	dfc00215 	stw	ra,8(sp)
1000717c:	2021883a 	mov	r16,r4
10007180:	20000226 	beq	r4,zero,1000718c <_fflush_r+0x1c>
10007184:	20800e17 	ldw	r2,56(r4)
10007188:	10000726 	beq	r2,zero,100071a8 <_fflush_r+0x38>
1000718c:	2880030f 	ldh	r2,12(r5)
10007190:	10000a1e 	bne	r2,zero,100071bc <_fflush_r+0x4c>
10007194:	0005883a 	mov	r2,zero
10007198:	dfc00217 	ldw	ra,8(sp)
1000719c:	dc000117 	ldw	r16,4(sp)
100071a0:	dec00304 	addi	sp,sp,12
100071a4:	f800283a 	ret
100071a8:	d9400015 	stw	r5,0(sp)
100071ac:	00074f40 	call	100074f4 <__sinit>
100071b0:	d9400017 	ldw	r5,0(sp)
100071b4:	2880030f 	ldh	r2,12(r5)
100071b8:	103ff626 	beq	r2,zero,10007194 <_fflush_r+0x24>
100071bc:	8009883a 	mov	r4,r16
100071c0:	dfc00217 	ldw	ra,8(sp)
100071c4:	dc000117 	ldw	r16,4(sp)
100071c8:	dec00304 	addi	sp,sp,12
100071cc:	0006f481 	jmpi	10006f48 <__sflush_r>

100071d0 <fflush>:
100071d0:	200b883a 	mov	r5,r4
100071d4:	20000326 	beq	r4,zero,100071e4 <fflush+0x14>
100071d8:	00840074 	movhi	r2,4097
100071dc:	1113ce17 	ldw	r4,20280(r2)
100071e0:	00071701 	jmpi	10007170 <_fflush_r>
100071e4:	00840074 	movhi	r2,4097
100071e8:	1113cd17 	ldw	r4,20276(r2)
100071ec:	01440034 	movhi	r5,4096
100071f0:	295c5c04 	addi	r5,r5,29040
100071f4:	0007ebc1 	jmpi	10007ebc <_fwalk_reent>

100071f8 <__fp_lock>:
100071f8:	0005883a 	mov	r2,zero
100071fc:	f800283a 	ret

10007200 <_cleanup_r>:
10007200:	01440074 	movhi	r5,4097
10007204:	296e7804 	addi	r5,r5,-17952
10007208:	0007ebc1 	jmpi	10007ebc <_fwalk_reent>

1000720c <__sinit.part.0>:
1000720c:	00c40034 	movhi	r3,4096
10007210:	20800117 	ldw	r2,4(r4)
10007214:	18dc8004 	addi	r3,r3,29184
10007218:	20c00f15 	stw	r3,60(r4)
1000721c:	2140bb04 	addi	r5,r4,748
10007220:	00c000c4 	movi	r3,3
10007224:	20c0b915 	stw	r3,740(r4)
10007228:	2140ba15 	stw	r5,744(r4)
1000722c:	2000b815 	stw	zero,736(r4)
10007230:	10001705 	stb	zero,92(r2)
10007234:	10001745 	stb	zero,93(r2)
10007238:	10001785 	stb	zero,94(r2)
1000723c:	100017c5 	stb	zero,95(r2)
10007240:	10001805 	stb	zero,96(r2)
10007244:	10001845 	stb	zero,97(r2)
10007248:	10001885 	stb	zero,98(r2)
1000724c:	100018c5 	stb	zero,99(r2)
10007250:	00c00104 	movi	r3,4
10007254:	10c00315 	stw	r3,12(r2)
10007258:	02040074 	movhi	r8,4097
1000725c:	20c00217 	ldw	r3,8(r4)
10007260:	01c40074 	movhi	r7,4097
10007264:	01840074 	movhi	r6,4097
10007268:	01440074 	movhi	r5,4097
1000726c:	42288704 	addi	r8,r8,-24036
10007270:	39e89e04 	addi	r7,r7,-23944
10007274:	31a8be04 	addi	r6,r6,-23816
10007278:	2968d504 	addi	r5,r5,-23724
1000727c:	02400074 	movhi	r9,1
10007280:	10001915 	stw	zero,100(r2)
10007284:	10000015 	stw	zero,0(r2)
10007288:	10000115 	stw	zero,4(r2)
1000728c:	10000215 	stw	zero,8(r2)
10007290:	10000415 	stw	zero,16(r2)
10007294:	10000515 	stw	zero,20(r2)
10007298:	10000615 	stw	zero,24(r2)
1000729c:	10800715 	stw	r2,28(r2)
100072a0:	12000815 	stw	r8,32(r2)
100072a4:	11c00915 	stw	r7,36(r2)
100072a8:	11800a15 	stw	r6,40(r2)
100072ac:	11400b15 	stw	r5,44(r2)
100072b0:	4a400284 	addi	r9,r9,10
100072b4:	1a400315 	stw	r9,12(r3)
100072b8:	18001915 	stw	zero,100(r3)
100072bc:	18000015 	stw	zero,0(r3)
100072c0:	18000115 	stw	zero,4(r3)
100072c4:	18000215 	stw	zero,8(r3)
100072c8:	18000415 	stw	zero,16(r3)
100072cc:	18001705 	stb	zero,92(r3)
100072d0:	18001745 	stb	zero,93(r3)
100072d4:	18001785 	stb	zero,94(r3)
100072d8:	180017c5 	stb	zero,95(r3)
100072dc:	18001805 	stb	zero,96(r3)
100072e0:	18001845 	stb	zero,97(r3)
100072e4:	18001885 	stb	zero,98(r3)
100072e8:	180018c5 	stb	zero,99(r3)
100072ec:	20800317 	ldw	r2,12(r4)
100072f0:	024000b4 	movhi	r9,2
100072f4:	18000515 	stw	zero,20(r3)
100072f8:	18000615 	stw	zero,24(r3)
100072fc:	18c00715 	stw	r3,28(r3)
10007300:	1a000815 	stw	r8,32(r3)
10007304:	19c00915 	stw	r7,36(r3)
10007308:	19800a15 	stw	r6,40(r3)
1000730c:	19400b15 	stw	r5,44(r3)
10007310:	4a400484 	addi	r9,r9,18
10007314:	10001915 	stw	zero,100(r2)
10007318:	10000015 	stw	zero,0(r2)
1000731c:	10000115 	stw	zero,4(r2)
10007320:	10000215 	stw	zero,8(r2)
10007324:	12400315 	stw	r9,12(r2)
10007328:	10000415 	stw	zero,16(r2)
1000732c:	10000515 	stw	zero,20(r2)
10007330:	10000615 	stw	zero,24(r2)
10007334:	10001705 	stb	zero,92(r2)
10007338:	10001745 	stb	zero,93(r2)
1000733c:	10001785 	stb	zero,94(r2)
10007340:	100017c5 	stb	zero,95(r2)
10007344:	10001805 	stb	zero,96(r2)
10007348:	10001845 	stb	zero,97(r2)
1000734c:	10001885 	stb	zero,98(r2)
10007350:	100018c5 	stb	zero,99(r2)
10007354:	10800715 	stw	r2,28(r2)
10007358:	12000815 	stw	r8,32(r2)
1000735c:	11c00915 	stw	r7,36(r2)
10007360:	11800a15 	stw	r6,40(r2)
10007364:	11400b15 	stw	r5,44(r2)
10007368:	00800044 	movi	r2,1
1000736c:	20800e15 	stw	r2,56(r4)
10007370:	f800283a 	ret

10007374 <__fp_unlock>:
10007374:	0005883a 	mov	r2,zero
10007378:	f800283a 	ret

1000737c <__sfmoreglue>:
1000737c:	defffc04 	addi	sp,sp,-16
10007380:	dc400115 	stw	r17,4(sp)
10007384:	2c7fffc4 	addi	r17,r5,-1
10007388:	8c401a24 	muli	r17,r17,104
1000738c:	dc800215 	stw	r18,8(sp)
10007390:	2825883a 	mov	r18,r5
10007394:	89401d04 	addi	r5,r17,116
10007398:	dc000015 	stw	r16,0(sp)
1000739c:	dfc00315 	stw	ra,12(sp)
100073a0:	00081640 	call	10008164 <_malloc_r>
100073a4:	1021883a 	mov	r16,r2
100073a8:	10000726 	beq	r2,zero,100073c8 <__sfmoreglue+0x4c>
100073ac:	11000304 	addi	r4,r2,12
100073b0:	10000015 	stw	zero,0(r2)
100073b4:	14800115 	stw	r18,4(r2)
100073b8:	11000215 	stw	r4,8(r2)
100073bc:	89801a04 	addi	r6,r17,104
100073c0:	000b883a 	mov	r5,zero
100073c4:	0008b6c0 	call	10008b6c <memset>
100073c8:	8005883a 	mov	r2,r16
100073cc:	dfc00317 	ldw	ra,12(sp)
100073d0:	dc800217 	ldw	r18,8(sp)
100073d4:	dc400117 	ldw	r17,4(sp)
100073d8:	dc000017 	ldw	r16,0(sp)
100073dc:	dec00404 	addi	sp,sp,16
100073e0:	f800283a 	ret

100073e4 <__sfp>:
100073e4:	defffd04 	addi	sp,sp,-12
100073e8:	00840074 	movhi	r2,4097
100073ec:	dc000015 	stw	r16,0(sp)
100073f0:	1413cd17 	ldw	r16,20276(r2)
100073f4:	dc400115 	stw	r17,4(sp)
100073f8:	dfc00215 	stw	ra,8(sp)
100073fc:	80800e17 	ldw	r2,56(r16)
10007400:	2023883a 	mov	r17,r4
10007404:	10002b26 	beq	r2,zero,100074b4 <__sfp+0xd0>
10007408:	8400b804 	addi	r16,r16,736
1000740c:	80c00117 	ldw	r3,4(r16)
10007410:	80800217 	ldw	r2,8(r16)
10007414:	18ffffc4 	addi	r3,r3,-1
10007418:	1800050e 	bge	r3,zero,10007430 <__sfp+0x4c>
1000741c:	00002106 	br	100074a4 <__sfp+0xc0>
10007420:	18ffffc4 	addi	r3,r3,-1
10007424:	193fffd8 	cmpnei	r4,r3,-1
10007428:	10801a04 	addi	r2,r2,104
1000742c:	20001d26 	beq	r4,zero,100074a4 <__sfp+0xc0>
10007430:	1100030f 	ldh	r4,12(r2)
10007434:	203ffa1e 	bne	r4,zero,10007420 <__sfp+0x3c>
10007438:	00fffff4 	movhi	r3,65535
1000743c:	18c00044 	addi	r3,r3,1
10007440:	10001915 	stw	zero,100(r2)
10007444:	10000015 	stw	zero,0(r2)
10007448:	10000115 	stw	zero,4(r2)
1000744c:	10000215 	stw	zero,8(r2)
10007450:	10c00315 	stw	r3,12(r2)
10007454:	10000415 	stw	zero,16(r2)
10007458:	10000515 	stw	zero,20(r2)
1000745c:	10000615 	stw	zero,24(r2)
10007460:	10001705 	stb	zero,92(r2)
10007464:	10001745 	stb	zero,93(r2)
10007468:	10001785 	stb	zero,94(r2)
1000746c:	100017c5 	stb	zero,95(r2)
10007470:	10001805 	stb	zero,96(r2)
10007474:	10001845 	stb	zero,97(r2)
10007478:	10001885 	stb	zero,98(r2)
1000747c:	100018c5 	stb	zero,99(r2)
10007480:	10000c15 	stw	zero,48(r2)
10007484:	10000d15 	stw	zero,52(r2)
10007488:	10001115 	stw	zero,68(r2)
1000748c:	10001215 	stw	zero,72(r2)
10007490:	dfc00217 	ldw	ra,8(sp)
10007494:	dc400117 	ldw	r17,4(sp)
10007498:	dc000017 	ldw	r16,0(sp)
1000749c:	dec00304 	addi	sp,sp,12
100074a0:	f800283a 	ret
100074a4:	80800017 	ldw	r2,0(r16)
100074a8:	10000526 	beq	r2,zero,100074c0 <__sfp+0xdc>
100074ac:	1021883a 	mov	r16,r2
100074b0:	003fd606 	br	1000740c <__sfp+0x28>
100074b4:	8009883a 	mov	r4,r16
100074b8:	000720c0 	call	1000720c <__sinit.part.0>
100074bc:	003fd206 	br	10007408 <__sfp+0x24>
100074c0:	01400104 	movi	r5,4
100074c4:	8809883a 	mov	r4,r17
100074c8:	000737c0 	call	1000737c <__sfmoreglue>
100074cc:	80800015 	stw	r2,0(r16)
100074d0:	103ff61e 	bne	r2,zero,100074ac <__sfp+0xc8>
100074d4:	00c00304 	movi	r3,12
100074d8:	88c00015 	stw	r3,0(r17)
100074dc:	003fec06 	br	10007490 <__sfp+0xac>

100074e0 <_cleanup>:
100074e0:	00840074 	movhi	r2,4097
100074e4:	1113cd17 	ldw	r4,20276(r2)
100074e8:	01440074 	movhi	r5,4097
100074ec:	296e7804 	addi	r5,r5,-17952
100074f0:	0007ebc1 	jmpi	10007ebc <_fwalk_reent>

100074f4 <__sinit>:
100074f4:	20800e17 	ldw	r2,56(r4)
100074f8:	10000126 	beq	r2,zero,10007500 <__sinit+0xc>
100074fc:	f800283a 	ret
10007500:	000720c1 	jmpi	1000720c <__sinit.part.0>

10007504 <__sfp_lock_acquire>:
10007504:	f800283a 	ret

10007508 <__sfp_lock_release>:
10007508:	f800283a 	ret

1000750c <__sinit_lock_acquire>:
1000750c:	f800283a 	ret

10007510 <__sinit_lock_release>:
10007510:	f800283a 	ret

10007514 <__fp_lock_all>:
10007514:	00840074 	movhi	r2,4097
10007518:	1113ce17 	ldw	r4,20280(r2)
1000751c:	01440034 	movhi	r5,4096
10007520:	295c7e04 	addi	r5,r5,29176
10007524:	0007e181 	jmpi	10007e18 <_fwalk>

10007528 <__fp_unlock_all>:
10007528:	00840074 	movhi	r2,4097
1000752c:	1113ce17 	ldw	r4,20280(r2)
10007530:	01440034 	movhi	r5,4096
10007534:	295cdd04 	addi	r5,r5,29556
10007538:	0007e181 	jmpi	10007e18 <_fwalk>

1000753c <_malloc_trim_r>:
1000753c:	defffb04 	addi	sp,sp,-20
10007540:	dcc00315 	stw	r19,12(sp)
10007544:	04c40074 	movhi	r19,4097
10007548:	dc800215 	stw	r18,8(sp)
1000754c:	dc400115 	stw	r17,4(sp)
10007550:	dc000015 	stw	r16,0(sp)
10007554:	dfc00415 	stw	ra,16(sp)
10007558:	2821883a 	mov	r16,r5
1000755c:	9ccded04 	addi	r19,r19,14260
10007560:	2025883a 	mov	r18,r4
10007564:	000fbd00 	call	1000fbd0 <__malloc_lock>
10007568:	98800217 	ldw	r2,8(r19)
1000756c:	14400117 	ldw	r17,4(r2)
10007570:	00bfff04 	movi	r2,-4
10007574:	88a2703a 	and	r17,r17,r2
10007578:	8c21c83a 	sub	r16,r17,r16
1000757c:	8403fbc4 	addi	r16,r16,4079
10007580:	8020d33a 	srli	r16,r16,12
10007584:	843fffc4 	addi	r16,r16,-1
10007588:	8020933a 	slli	r16,r16,12
1000758c:	80840008 	cmpgei	r2,r16,4096
10007590:	10000626 	beq	r2,zero,100075ac <_malloc_trim_r+0x70>
10007594:	000b883a 	mov	r5,zero
10007598:	9009883a 	mov	r4,r18
1000759c:	000a1c40 	call	1000a1c4 <_sbrk_r>
100075a0:	98c00217 	ldw	r3,8(r19)
100075a4:	1c47883a 	add	r3,r3,r17
100075a8:	10c00a26 	beq	r2,r3,100075d4 <_malloc_trim_r+0x98>
100075ac:	9009883a 	mov	r4,r18
100075b0:	000fbf40 	call	1000fbf4 <__malloc_unlock>
100075b4:	0005883a 	mov	r2,zero
100075b8:	dfc00417 	ldw	ra,16(sp)
100075bc:	dcc00317 	ldw	r19,12(sp)
100075c0:	dc800217 	ldw	r18,8(sp)
100075c4:	dc400117 	ldw	r17,4(sp)
100075c8:	dc000017 	ldw	r16,0(sp)
100075cc:	dec00504 	addi	sp,sp,20
100075d0:	f800283a 	ret
100075d4:	040bc83a 	sub	r5,zero,r16
100075d8:	9009883a 	mov	r4,r18
100075dc:	000a1c40 	call	1000a1c4 <_sbrk_r>
100075e0:	10bfffd8 	cmpnei	r2,r2,-1
100075e4:	10000d26 	beq	r2,zero,1000761c <_malloc_trim_r+0xe0>
100075e8:	00840074 	movhi	r2,4097
100075ec:	109c6f17 	ldw	r2,29116(r2)
100075f0:	98c00217 	ldw	r3,8(r19)
100075f4:	8c23c83a 	sub	r17,r17,r16
100075f8:	8c400054 	ori	r17,r17,1
100075fc:	1421c83a 	sub	r16,r2,r16
10007600:	1c400115 	stw	r17,4(r3)
10007604:	00840074 	movhi	r2,4097
10007608:	9009883a 	mov	r4,r18
1000760c:	141c6f15 	stw	r16,29116(r2)
10007610:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10007614:	00800044 	movi	r2,1
10007618:	003fe706 	br	100075b8 <_malloc_trim_r+0x7c>
1000761c:	000b883a 	mov	r5,zero
10007620:	9009883a 	mov	r4,r18
10007624:	000a1c40 	call	1000a1c4 <_sbrk_r>
10007628:	99000217 	ldw	r4,8(r19)
1000762c:	1107c83a 	sub	r3,r2,r4
10007630:	19400410 	cmplti	r5,r3,16
10007634:	283fdd1e 	bne	r5,zero,100075ac <_malloc_trim_r+0x70>
10007638:	01440074 	movhi	r5,4097
1000763c:	2953cf17 	ldw	r5,20284(r5)
10007640:	18c00054 	ori	r3,r3,1
10007644:	20c00115 	stw	r3,4(r4)
10007648:	1145c83a 	sub	r2,r2,r5
1000764c:	01440074 	movhi	r5,4097
10007650:	289c6f15 	stw	r2,29116(r5)
10007654:	003fd506 	br	100075ac <_malloc_trim_r+0x70>

10007658 <_free_r>:
10007658:	28004f26 	beq	r5,zero,10007798 <_free_r+0x140>
1000765c:	defffd04 	addi	sp,sp,-12
10007660:	dc400115 	stw	r17,4(sp)
10007664:	dc000015 	stw	r16,0(sp)
10007668:	2023883a 	mov	r17,r4
1000766c:	2821883a 	mov	r16,r5
10007670:	dfc00215 	stw	ra,8(sp)
10007674:	000fbd00 	call	1000fbd0 <__malloc_lock>
10007678:	81ffff17 	ldw	r7,-4(r16)
1000767c:	00bfff84 	movi	r2,-2
10007680:	80fffe04 	addi	r3,r16,-8
10007684:	3884703a 	and	r2,r7,r2
10007688:	01840074 	movhi	r6,4097
1000768c:	1889883a 	add	r4,r3,r2
10007690:	318ded04 	addi	r6,r6,14260
10007694:	21400117 	ldw	r5,4(r4)
10007698:	32000217 	ldw	r8,8(r6)
1000769c:	027fff04 	movi	r9,-4
100076a0:	2a4a703a 	and	r5,r5,r9
100076a4:	41006426 	beq	r8,r4,10007838 <_free_r+0x1e0>
100076a8:	21400115 	stw	r5,4(r4)
100076ac:	39c0004c 	andi	r7,r7,1
100076b0:	2151883a 	add	r8,r4,r5
100076b4:	3800281e 	bne	r7,zero,10007758 <_free_r+0x100>
100076b8:	82bffe17 	ldw	r10,-8(r16)
100076bc:	42000117 	ldw	r8,4(r8)
100076c0:	01c40074 	movhi	r7,4097
100076c4:	1a87c83a 	sub	r3,r3,r10
100076c8:	1a400217 	ldw	r9,8(r3)
100076cc:	39cdef04 	addi	r7,r7,14268
100076d0:	1285883a 	add	r2,r2,r10
100076d4:	4200004c 	andi	r8,r8,1
100076d8:	49c04c26 	beq	r9,r7,1000780c <_free_r+0x1b4>
100076dc:	1a800317 	ldw	r10,12(r3)
100076e0:	4a800315 	stw	r10,12(r9)
100076e4:	52400215 	stw	r9,8(r10)
100076e8:	40007126 	beq	r8,zero,100078b0 <_free_r+0x258>
100076ec:	11400054 	ori	r5,r2,1
100076f0:	19400115 	stw	r5,4(r3)
100076f4:	20800015 	stw	r2,0(r4)
100076f8:	11008028 	cmpgeui	r4,r2,512
100076fc:	20002c1e 	bne	r4,zero,100077b0 <_free_r+0x158>
10007700:	1008d0fa 	srli	r4,r2,3
10007704:	31c00117 	ldw	r7,4(r6)
10007708:	20800044 	addi	r2,r4,1
1000770c:	200bd0ba 	srai	r5,r4,2
10007710:	100490fa 	slli	r2,r2,3
10007714:	01000044 	movi	r4,1
10007718:	2148983a 	sll	r4,r4,r5
1000771c:	3085883a 	add	r2,r6,r2
10007720:	11400017 	ldw	r5,0(r2)
10007724:	21c8b03a 	or	r4,r4,r7
10007728:	11fffe04 	addi	r7,r2,-8
1000772c:	19c00315 	stw	r7,12(r3)
10007730:	19400215 	stw	r5,8(r3)
10007734:	31000115 	stw	r4,4(r6)
10007738:	10c00015 	stw	r3,0(r2)
1000773c:	28c00315 	stw	r3,12(r5)
10007740:	8809883a 	mov	r4,r17
10007744:	dfc00217 	ldw	ra,8(sp)
10007748:	dc400117 	ldw	r17,4(sp)
1000774c:	dc000017 	ldw	r16,0(sp)
10007750:	dec00304 	addi	sp,sp,12
10007754:	000fbf41 	jmpi	1000fbf4 <__malloc_unlock>
10007758:	41c00117 	ldw	r7,4(r8)
1000775c:	39c0004c 	andi	r7,r7,1
10007760:	38000e1e 	bne	r7,zero,1000779c <_free_r+0x144>
10007764:	01c40074 	movhi	r7,4097
10007768:	1145883a 	add	r2,r2,r5
1000776c:	39cdef04 	addi	r7,r7,14268
10007770:	21400217 	ldw	r5,8(r4)
10007774:	12400054 	ori	r9,r2,1
10007778:	1891883a 	add	r8,r3,r2
1000777c:	29c05226 	beq	r5,r7,100078c8 <_free_r+0x270>
10007780:	21000317 	ldw	r4,12(r4)
10007784:	29000315 	stw	r4,12(r5)
10007788:	21400215 	stw	r5,8(r4)
1000778c:	1a400115 	stw	r9,4(r3)
10007790:	40800015 	stw	r2,0(r8)
10007794:	003fd806 	br	100076f8 <_free_r+0xa0>
10007798:	f800283a 	ret
1000779c:	11400054 	ori	r5,r2,1
100077a0:	817fff15 	stw	r5,-4(r16)
100077a4:	20800015 	stw	r2,0(r4)
100077a8:	11008028 	cmpgeui	r4,r2,512
100077ac:	203fd426 	beq	r4,zero,10007700 <_free_r+0xa8>
100077b0:	1008d27a 	srli	r4,r2,9
100077b4:	21400168 	cmpgeui	r5,r4,5
100077b8:	2800341e 	bne	r5,zero,1000788c <_free_r+0x234>
100077bc:	1008d1ba 	srli	r4,r2,6
100077c0:	21c00e44 	addi	r7,r4,57
100077c4:	380e90fa 	slli	r7,r7,3
100077c8:	21400e04 	addi	r5,r4,56
100077cc:	31cf883a 	add	r7,r6,r7
100077d0:	39000017 	ldw	r4,0(r7)
100077d4:	39fffe04 	addi	r7,r7,-8
100077d8:	39004226 	beq	r7,r4,100078e4 <_free_r+0x28c>
100077dc:	01bfff04 	movi	r6,-4
100077e0:	21400117 	ldw	r5,4(r4)
100077e4:	298a703a 	and	r5,r5,r6
100077e8:	1140022e 	bgeu	r2,r5,100077f4 <_free_r+0x19c>
100077ec:	21000217 	ldw	r4,8(r4)
100077f0:	393ffb1e 	bne	r7,r4,100077e0 <_free_r+0x188>
100077f4:	21c00317 	ldw	r7,12(r4)
100077f8:	19c00315 	stw	r7,12(r3)
100077fc:	19000215 	stw	r4,8(r3)
10007800:	38c00215 	stw	r3,8(r7)
10007804:	20c00315 	stw	r3,12(r4)
10007808:	003fcd06 	br	10007740 <_free_r+0xe8>
1000780c:	40004d1e 	bne	r8,zero,10007944 <_free_r+0x2ec>
10007810:	21800317 	ldw	r6,12(r4)
10007814:	21000217 	ldw	r4,8(r4)
10007818:	2885883a 	add	r2,r5,r2
1000781c:	11400054 	ori	r5,r2,1
10007820:	21800315 	stw	r6,12(r4)
10007824:	31000215 	stw	r4,8(r6)
10007828:	19400115 	stw	r5,4(r3)
1000782c:	1887883a 	add	r3,r3,r2
10007830:	18800015 	stw	r2,0(r3)
10007834:	003fc206 	br	10007740 <_free_r+0xe8>
10007838:	39c0004c 	andi	r7,r7,1
1000783c:	1145883a 	add	r2,r2,r5
10007840:	3800071e 	bne	r7,zero,10007860 <_free_r+0x208>
10007844:	81fffe17 	ldw	r7,-8(r16)
10007848:	19c7c83a 	sub	r3,r3,r7
1000784c:	19000317 	ldw	r4,12(r3)
10007850:	19400217 	ldw	r5,8(r3)
10007854:	11c5883a 	add	r2,r2,r7
10007858:	29000315 	stw	r4,12(r5)
1000785c:	21400215 	stw	r5,8(r4)
10007860:	01040074 	movhi	r4,4097
10007864:	11400054 	ori	r5,r2,1
10007868:	2113d017 	ldw	r4,20288(r4)
1000786c:	19400115 	stw	r5,4(r3)
10007870:	30c00215 	stw	r3,8(r6)
10007874:	113fb236 	bltu	r2,r4,10007740 <_free_r+0xe8>
10007878:	00840074 	movhi	r2,4097
1000787c:	115c6517 	ldw	r5,29076(r2)
10007880:	8809883a 	mov	r4,r17
10007884:	000753c0 	call	1000753c <_malloc_trim_r>
10007888:	003fad06 	br	10007740 <_free_r+0xe8>
1000788c:	21400568 	cmpgeui	r5,r4,21
10007890:	28000926 	beq	r5,zero,100078b8 <_free_r+0x260>
10007894:	21401568 	cmpgeui	r5,r4,85
10007898:	2800191e 	bne	r5,zero,10007900 <_free_r+0x2a8>
1000789c:	1008d33a 	srli	r4,r2,12
100078a0:	21c01bc4 	addi	r7,r4,111
100078a4:	21401b84 	addi	r5,r4,110
100078a8:	380e90fa 	slli	r7,r7,3
100078ac:	003fc706 	br	100077cc <_free_r+0x174>
100078b0:	1145883a 	add	r2,r2,r5
100078b4:	003fae06 	br	10007770 <_free_r+0x118>
100078b8:	21c01704 	addi	r7,r4,92
100078bc:	214016c4 	addi	r5,r4,91
100078c0:	380e90fa 	slli	r7,r7,3
100078c4:	003fc106 	br	100077cc <_free_r+0x174>
100078c8:	30c00515 	stw	r3,20(r6)
100078cc:	30c00415 	stw	r3,16(r6)
100078d0:	19c00315 	stw	r7,12(r3)
100078d4:	19c00215 	stw	r7,8(r3)
100078d8:	1a400115 	stw	r9,4(r3)
100078dc:	40800015 	stw	r2,0(r8)
100078e0:	003f9706 	br	10007740 <_free_r+0xe8>
100078e4:	280bd0ba 	srai	r5,r5,2
100078e8:	00800044 	movi	r2,1
100078ec:	32000117 	ldw	r8,4(r6)
100078f0:	114a983a 	sll	r5,r2,r5
100078f4:	2a0ab03a 	or	r5,r5,r8
100078f8:	31400115 	stw	r5,4(r6)
100078fc:	003fbe06 	br	100077f8 <_free_r+0x1a0>
10007900:	21405568 	cmpgeui	r5,r4,341
10007904:	2800051e 	bne	r5,zero,1000791c <_free_r+0x2c4>
10007908:	1008d3fa 	srli	r4,r2,15
1000790c:	21c01e04 	addi	r7,r4,120
10007910:	21401dc4 	addi	r5,r4,119
10007914:	380e90fa 	slli	r7,r7,3
10007918:	003fac06 	br	100077cc <_free_r+0x174>
1000791c:	21015568 	cmpgeui	r4,r4,1365
10007920:	2000051e 	bne	r4,zero,10007938 <_free_r+0x2e0>
10007924:	1008d4ba 	srli	r4,r2,18
10007928:	21c01f44 	addi	r7,r4,125
1000792c:	21401f04 	addi	r5,r4,124
10007930:	380e90fa 	slli	r7,r7,3
10007934:	003fa506 	br	100077cc <_free_r+0x174>
10007938:	01c0fe04 	movi	r7,1016
1000793c:	01401f84 	movi	r5,126
10007940:	003fa206 	br	100077cc <_free_r+0x174>
10007944:	11400054 	ori	r5,r2,1
10007948:	19400115 	stw	r5,4(r3)
1000794c:	20800015 	stw	r2,0(r4)
10007950:	003f7b06 	br	10007740 <_free_r+0xe8>

10007954 <__sfvwrite_r>:
10007954:	30800217 	ldw	r2,8(r6)
10007958:	1000c926 	beq	r2,zero,10007c80 <__sfvwrite_r+0x32c>
1000795c:	2880030b 	ldhu	r2,12(r5)
10007960:	defff304 	addi	sp,sp,-52
10007964:	dd000715 	stw	r20,28(sp)
10007968:	dc000315 	stw	r16,12(sp)
1000796c:	dfc00c15 	stw	ra,48(sp)
10007970:	df000b15 	stw	fp,44(sp)
10007974:	ddc00a15 	stw	r23,40(sp)
10007978:	dd800915 	stw	r22,36(sp)
1000797c:	dd400815 	stw	r21,32(sp)
10007980:	dcc00615 	stw	r19,24(sp)
10007984:	dc800515 	stw	r18,20(sp)
10007988:	dc400415 	stw	r17,16(sp)
1000798c:	d9000015 	stw	r4,0(sp)
10007990:	10c0020c 	andi	r3,r2,8
10007994:	2821883a 	mov	r16,r5
10007998:	3029883a 	mov	r20,r6
1000799c:	18002426 	beq	r3,zero,10007a30 <__sfvwrite_r+0xdc>
100079a0:	28c00417 	ldw	r3,16(r5)
100079a4:	18002226 	beq	r3,zero,10007a30 <__sfvwrite_r+0xdc>
100079a8:	10c0008c 	andi	r3,r2,2
100079ac:	a4400017 	ldw	r17,0(r20)
100079b0:	18002726 	beq	r3,zero,10007a50 <__sfvwrite_r+0xfc>
100079b4:	80c00917 	ldw	r3,36(r16)
100079b8:	80800717 	ldw	r2,28(r16)
100079bc:	05600034 	movhi	r21,32768
100079c0:	0027883a 	mov	r19,zero
100079c4:	0025883a 	mov	r18,zero
100079c8:	ad7f0004 	addi	r21,r21,-1024
100079cc:	980d883a 	mov	r6,r19
100079d0:	100b883a 	mov	r5,r2
100079d4:	d9000017 	ldw	r4,0(sp)
100079d8:	90001126 	beq	r18,zero,10007a20 <__sfvwrite_r+0xcc>
100079dc:	900f883a 	mov	r7,r18
100079e0:	ac80012e 	bgeu	r21,r18,100079e8 <__sfvwrite_r+0x94>
100079e4:	a80f883a 	mov	r7,r21
100079e8:	183ee83a 	callr	r3
100079ec:	00809f0e 	bge	zero,r2,10007c6c <__sfvwrite_r+0x318>
100079f0:	a0c00217 	ldw	r3,8(r20)
100079f4:	98a7883a 	add	r19,r19,r2
100079f8:	90a5c83a 	sub	r18,r18,r2
100079fc:	1885c83a 	sub	r2,r3,r2
10007a00:	a0800215 	stw	r2,8(r20)
10007a04:	10006326 	beq	r2,zero,10007b94 <__sfvwrite_r+0x240>
10007a08:	80800717 	ldw	r2,28(r16)
10007a0c:	80c00917 	ldw	r3,36(r16)
10007a10:	980d883a 	mov	r6,r19
10007a14:	100b883a 	mov	r5,r2
10007a18:	d9000017 	ldw	r4,0(sp)
10007a1c:	903fef1e 	bne	r18,zero,100079dc <__sfvwrite_r+0x88>
10007a20:	8cc00017 	ldw	r19,0(r17)
10007a24:	8c800117 	ldw	r18,4(r17)
10007a28:	8c400204 	addi	r17,r17,8
10007a2c:	003fe706 	br	100079cc <__sfvwrite_r+0x78>
10007a30:	d9000017 	ldw	r4,0(sp)
10007a34:	800b883a 	mov	r5,r16
10007a38:	00055100 	call	10005510 <__swsetup_r>
10007a3c:	1000f41e 	bne	r2,zero,10007e10 <__sfvwrite_r+0x4bc>
10007a40:	8080030b 	ldhu	r2,12(r16)
10007a44:	a4400017 	ldw	r17,0(r20)
10007a48:	10c0008c 	andi	r3,r2,2
10007a4c:	183fd91e 	bne	r3,zero,100079b4 <__sfvwrite_r+0x60>
10007a50:	10c0004c 	andi	r3,r2,1
10007a54:	84800217 	ldw	r18,8(r16)
10007a58:	87000017 	ldw	fp,0(r16)
10007a5c:	18008a1e 	bne	r3,zero,10007c88 <__sfvwrite_r+0x334>
10007a60:	00e00034 	movhi	r3,32768
10007a64:	18ffff84 	addi	r3,r3,-2
10007a68:	01200034 	movhi	r4,32768
10007a6c:	d8c00115 	stw	r3,4(sp)
10007a70:	20ffffc4 	addi	r3,r4,-1
10007a74:	002d883a 	mov	r22,zero
10007a78:	002f883a 	mov	r23,zero
10007a7c:	d8c00215 	stw	r3,8(sp)
10007a80:	b8004026 	beq	r23,zero,10007b84 <__sfvwrite_r+0x230>
10007a84:	1100800c 	andi	r4,r2,512
10007a88:	20009026 	beq	r4,zero,10007ccc <__sfvwrite_r+0x378>
10007a8c:	902b883a 	mov	r21,r18
10007a90:	bc80b436 	bltu	r23,r18,10007d64 <__sfvwrite_r+0x410>
10007a94:	1101200c 	andi	r4,r2,1152
10007a98:	20002526 	beq	r4,zero,10007b30 <__sfvwrite_r+0x1dc>
10007a9c:	81800517 	ldw	r6,20(r16)
10007aa0:	81400417 	ldw	r5,16(r16)
10007aa4:	b9000044 	addi	r4,r23,1
10007aa8:	318000e4 	muli	r6,r6,3
10007aac:	e167c83a 	sub	r19,fp,r5
10007ab0:	24c9883a 	add	r4,r4,r19
10007ab4:	3024d7fa 	srli	r18,r6,31
10007ab8:	91a5883a 	add	r18,r18,r6
10007abc:	9025d07a 	srai	r18,r18,1
10007ac0:	900d883a 	mov	r6,r18
10007ac4:	9100022e 	bgeu	r18,r4,10007ad0 <__sfvwrite_r+0x17c>
10007ac8:	2025883a 	mov	r18,r4
10007acc:	200d883a 	mov	r6,r4
10007ad0:	1081000c 	andi	r2,r2,1024
10007ad4:	1000bc26 	beq	r2,zero,10007dc8 <__sfvwrite_r+0x474>
10007ad8:	d9000017 	ldw	r4,0(sp)
10007adc:	300b883a 	mov	r5,r6
10007ae0:	00081640 	call	10008164 <_malloc_r>
10007ae4:	1000c526 	beq	r2,zero,10007dfc <__sfvwrite_r+0x4a8>
10007ae8:	81400417 	ldw	r5,16(r16)
10007aec:	980d883a 	mov	r6,r19
10007af0:	1009883a 	mov	r4,r2
10007af4:	0002ffc0 	call	10002ffc <memcpy>
10007af8:	100f883a 	mov	r7,r2
10007afc:	8080030b 	ldhu	r2,12(r16)
10007b00:	00fedfc4 	movi	r3,-1153
10007b04:	10c4703a 	and	r2,r2,r3
10007b08:	10802014 	ori	r2,r2,128
10007b0c:	8080030d 	sth	r2,12(r16)
10007b10:	94c5c83a 	sub	r2,r18,r19
10007b14:	3cf9883a 	add	fp,r7,r19
10007b18:	84800515 	stw	r18,20(r16)
10007b1c:	81c00415 	stw	r7,16(r16)
10007b20:	87000015 	stw	fp,0(r16)
10007b24:	b825883a 	mov	r18,r23
10007b28:	80800215 	stw	r2,8(r16)
10007b2c:	b82b883a 	mov	r21,r23
10007b30:	a80d883a 	mov	r6,r21
10007b34:	b00b883a 	mov	r5,r22
10007b38:	e009883a 	mov	r4,fp
10007b3c:	0008a400 	call	10008a40 <memmove>
10007b40:	80800217 	ldw	r2,8(r16)
10007b44:	81800017 	ldw	r6,0(r16)
10007b48:	b827883a 	mov	r19,r23
10007b4c:	14a5c83a 	sub	r18,r2,r18
10007b50:	354d883a 	add	r6,r6,r21
10007b54:	84800215 	stw	r18,8(r16)
10007b58:	81800015 	stw	r6,0(r16)
10007b5c:	002f883a 	mov	r23,zero
10007b60:	a0800217 	ldw	r2,8(r20)
10007b64:	b4ed883a 	add	r22,r22,r19
10007b68:	14e7c83a 	sub	r19,r2,r19
10007b6c:	a4c00215 	stw	r19,8(r20)
10007b70:	98000826 	beq	r19,zero,10007b94 <__sfvwrite_r+0x240>
10007b74:	8080030b 	ldhu	r2,12(r16)
10007b78:	84800217 	ldw	r18,8(r16)
10007b7c:	87000017 	ldw	fp,0(r16)
10007b80:	b83fc01e 	bne	r23,zero,10007a84 <__sfvwrite_r+0x130>
10007b84:	8d800017 	ldw	r22,0(r17)
10007b88:	8dc00117 	ldw	r23,4(r17)
10007b8c:	8c400204 	addi	r17,r17,8
10007b90:	003fbb06 	br	10007a80 <__sfvwrite_r+0x12c>
10007b94:	0005883a 	mov	r2,zero
10007b98:	dfc00c17 	ldw	ra,48(sp)
10007b9c:	df000b17 	ldw	fp,44(sp)
10007ba0:	ddc00a17 	ldw	r23,40(sp)
10007ba4:	dd800917 	ldw	r22,36(sp)
10007ba8:	dd400817 	ldw	r21,32(sp)
10007bac:	dd000717 	ldw	r20,28(sp)
10007bb0:	dcc00617 	ldw	r19,24(sp)
10007bb4:	dc800517 	ldw	r18,20(sp)
10007bb8:	dc400417 	ldw	r17,16(sp)
10007bbc:	dc000317 	ldw	r16,12(sp)
10007bc0:	dec00d04 	addi	sp,sp,52
10007bc4:	f800283a 	ret
10007bc8:	b1c06e16 	blt	r22,r7,10007d84 <__sfvwrite_r+0x430>
10007bcc:	80800917 	ldw	r2,36(r16)
10007bd0:	81400717 	ldw	r5,28(r16)
10007bd4:	d9000017 	ldw	r4,0(sp)
10007bd8:	b80d883a 	mov	r6,r23
10007bdc:	103ee83a 	callr	r2
10007be0:	1025883a 	mov	r18,r2
10007be4:	0080210e 	bge	zero,r2,10007c6c <__sfvwrite_r+0x318>
10007be8:	acabc83a 	sub	r21,r21,r18
10007bec:	a8006026 	beq	r21,zero,10007d70 <__sfvwrite_r+0x41c>
10007bf0:	00800044 	movi	r2,1
10007bf4:	a0c00217 	ldw	r3,8(r20)
10007bf8:	bcaf883a 	add	r23,r23,r18
10007bfc:	9ca7c83a 	sub	r19,r19,r18
10007c00:	1ca5c83a 	sub	r18,r3,r18
10007c04:	a4800215 	stw	r18,8(r20)
10007c08:	903fe226 	beq	r18,zero,10007b94 <__sfvwrite_r+0x240>
10007c0c:	84800217 	ldw	r18,8(r16)
10007c10:	87000017 	ldw	fp,0(r16)
10007c14:	98002126 	beq	r19,zero,10007c9c <__sfvwrite_r+0x348>
10007c18:	10002426 	beq	r2,zero,10007cac <__sfvwrite_r+0x358>
10007c1c:	a805883a 	mov	r2,r21
10007c20:	982d883a 	mov	r22,r19
10007c24:	14c0012e 	bgeu	r2,r19,10007c2c <__sfvwrite_r+0x2d8>
10007c28:	102d883a 	mov	r22,r2
10007c2c:	80800417 	ldw	r2,16(r16)
10007c30:	81c00517 	ldw	r7,20(r16)
10007c34:	173fe42e 	bgeu	r2,fp,10007bc8 <__sfvwrite_r+0x274>
10007c38:	3ca5883a 	add	r18,r7,r18
10007c3c:	95bfe20e 	bge	r18,r22,10007bc8 <__sfvwrite_r+0x274>
10007c40:	b80b883a 	mov	r5,r23
10007c44:	e009883a 	mov	r4,fp
10007c48:	900d883a 	mov	r6,r18
10007c4c:	0008a400 	call	10008a40 <memmove>
10007c50:	80800017 	ldw	r2,0(r16)
10007c54:	d9000017 	ldw	r4,0(sp)
10007c58:	800b883a 	mov	r5,r16
10007c5c:	1485883a 	add	r2,r2,r18
10007c60:	80800015 	stw	r2,0(r16)
10007c64:	00071700 	call	10007170 <_fflush_r>
10007c68:	103fdf26 	beq	r2,zero,10007be8 <__sfvwrite_r+0x294>
10007c6c:	8080030b 	ldhu	r2,12(r16)
10007c70:	10801014 	ori	r2,r2,64
10007c74:	8080030d 	sth	r2,12(r16)
10007c78:	00bfffc4 	movi	r2,-1
10007c7c:	003fc606 	br	10007b98 <__sfvwrite_r+0x244>
10007c80:	0005883a 	mov	r2,zero
10007c84:	f800283a 	ret
10007c88:	0027883a 	mov	r19,zero
10007c8c:	002b883a 	mov	r21,zero
10007c90:	0005883a 	mov	r2,zero
10007c94:	002f883a 	mov	r23,zero
10007c98:	983fdf1e 	bne	r19,zero,10007c18 <__sfvwrite_r+0x2c4>
10007c9c:	8cc00117 	ldw	r19,4(r17)
10007ca0:	8dc00017 	ldw	r23,0(r17)
10007ca4:	8c400204 	addi	r17,r17,8
10007ca8:	983ffc26 	beq	r19,zero,10007c9c <__sfvwrite_r+0x348>
10007cac:	980d883a 	mov	r6,r19
10007cb0:	01400284 	movi	r5,10
10007cb4:	b809883a 	mov	r4,r23
10007cb8:	00089580 	call	10008958 <memchr>
10007cbc:	10003f26 	beq	r2,zero,10007dbc <__sfvwrite_r+0x468>
10007cc0:	10800044 	addi	r2,r2,1
10007cc4:	15ebc83a 	sub	r21,r2,r23
10007cc8:	003fd406 	br	10007c1c <__sfvwrite_r+0x2c8>
10007ccc:	80800417 	ldw	r2,16(r16)
10007cd0:	17001136 	bltu	r2,fp,10007d18 <__sfvwrite_r+0x3c4>
10007cd4:	84c00517 	ldw	r19,20(r16)
10007cd8:	bcc00f36 	bltu	r23,r19,10007d18 <__sfvwrite_r+0x3c4>
10007cdc:	d8800117 	ldw	r2,4(sp)
10007ce0:	15c0342e 	bgeu	r2,r23,10007db4 <__sfvwrite_r+0x460>
10007ce4:	d9000217 	ldw	r4,8(sp)
10007ce8:	980b883a 	mov	r5,r19
10007cec:	000cd700 	call	1000cd70 <__divsi3>
10007cf0:	14cf383a 	mul	r7,r2,r19
10007cf4:	81400717 	ldw	r5,28(r16)
10007cf8:	80800917 	ldw	r2,36(r16)
10007cfc:	d9000017 	ldw	r4,0(sp)
10007d00:	b00d883a 	mov	r6,r22
10007d04:	103ee83a 	callr	r2
10007d08:	00bfd80e 	bge	zero,r2,10007c6c <__sfvwrite_r+0x318>
10007d0c:	1027883a 	mov	r19,r2
10007d10:	bcefc83a 	sub	r23,r23,r19
10007d14:	003f9206 	br	10007b60 <__sfvwrite_r+0x20c>
10007d18:	9027883a 	mov	r19,r18
10007d1c:	bc80012e 	bgeu	r23,r18,10007d24 <__sfvwrite_r+0x3d0>
10007d20:	b827883a 	mov	r19,r23
10007d24:	e009883a 	mov	r4,fp
10007d28:	980d883a 	mov	r6,r19
10007d2c:	b00b883a 	mov	r5,r22
10007d30:	0008a400 	call	10008a40 <memmove>
10007d34:	80800217 	ldw	r2,8(r16)
10007d38:	81000017 	ldw	r4,0(r16)
10007d3c:	14c5c83a 	sub	r2,r2,r19
10007d40:	24c9883a 	add	r4,r4,r19
10007d44:	80800215 	stw	r2,8(r16)
10007d48:	81000015 	stw	r4,0(r16)
10007d4c:	103ff01e 	bne	r2,zero,10007d10 <__sfvwrite_r+0x3bc>
10007d50:	d9000017 	ldw	r4,0(sp)
10007d54:	800b883a 	mov	r5,r16
10007d58:	00071700 	call	10007170 <_fflush_r>
10007d5c:	103fec26 	beq	r2,zero,10007d10 <__sfvwrite_r+0x3bc>
10007d60:	003fc206 	br	10007c6c <__sfvwrite_r+0x318>
10007d64:	b825883a 	mov	r18,r23
10007d68:	b82b883a 	mov	r21,r23
10007d6c:	003f7006 	br	10007b30 <__sfvwrite_r+0x1dc>
10007d70:	d9000017 	ldw	r4,0(sp)
10007d74:	800b883a 	mov	r5,r16
10007d78:	00071700 	call	10007170 <_fflush_r>
10007d7c:	103f9d26 	beq	r2,zero,10007bf4 <__sfvwrite_r+0x2a0>
10007d80:	003fba06 	br	10007c6c <__sfvwrite_r+0x318>
10007d84:	b00d883a 	mov	r6,r22
10007d88:	b80b883a 	mov	r5,r23
10007d8c:	e009883a 	mov	r4,fp
10007d90:	0008a400 	call	10008a40 <memmove>
10007d94:	80c00217 	ldw	r3,8(r16)
10007d98:	80800017 	ldw	r2,0(r16)
10007d9c:	b025883a 	mov	r18,r22
10007da0:	1d87c83a 	sub	r3,r3,r22
10007da4:	15ad883a 	add	r22,r2,r22
10007da8:	80c00215 	stw	r3,8(r16)
10007dac:	85800015 	stw	r22,0(r16)
10007db0:	003f8d06 	br	10007be8 <__sfvwrite_r+0x294>
10007db4:	b809883a 	mov	r4,r23
10007db8:	003fcb06 	br	10007ce8 <__sfvwrite_r+0x394>
10007dbc:	98800044 	addi	r2,r19,1
10007dc0:	102b883a 	mov	r21,r2
10007dc4:	003f9606 	br	10007c20 <__sfvwrite_r+0x2cc>
10007dc8:	d9000017 	ldw	r4,0(sp)
10007dcc:	0009b980 	call	10009b98 <_realloc_r>
10007dd0:	100f883a 	mov	r7,r2
10007dd4:	103f4e1e 	bne	r2,zero,10007b10 <__sfvwrite_r+0x1bc>
10007dd8:	dc400017 	ldw	r17,0(sp)
10007ddc:	81400417 	ldw	r5,16(r16)
10007de0:	8809883a 	mov	r4,r17
10007de4:	00076580 	call	10007658 <_free_r>
10007de8:	8080030b 	ldhu	r2,12(r16)
10007dec:	00c00304 	movi	r3,12
10007df0:	88c00015 	stw	r3,0(r17)
10007df4:	10bfdfcc 	andi	r2,r2,65407
10007df8:	003f9d06 	br	10007c70 <__sfvwrite_r+0x31c>
10007dfc:	d8c00017 	ldw	r3,0(sp)
10007e00:	00800304 	movi	r2,12
10007e04:	18800015 	stw	r2,0(r3)
10007e08:	8080030b 	ldhu	r2,12(r16)
10007e0c:	003f9806 	br	10007c70 <__sfvwrite_r+0x31c>
10007e10:	00bfffc4 	movi	r2,-1
10007e14:	003f6006 	br	10007b98 <__sfvwrite_r+0x244>

10007e18 <_fwalk>:
10007e18:	defffa04 	addi	sp,sp,-24
10007e1c:	dc800215 	stw	r18,8(sp)
10007e20:	dfc00515 	stw	ra,20(sp)
10007e24:	dd000415 	stw	r20,16(sp)
10007e28:	dcc00315 	stw	r19,12(sp)
10007e2c:	dc400115 	stw	r17,4(sp)
10007e30:	dc000015 	stw	r16,0(sp)
10007e34:	2480b804 	addi	r18,r4,736
10007e38:	90001e26 	beq	r18,zero,10007eb4 <_fwalk+0x9c>
10007e3c:	2827883a 	mov	r19,r5
10007e40:	0029883a 	mov	r20,zero
10007e44:	94400117 	ldw	r17,4(r18)
10007e48:	94000217 	ldw	r16,8(r18)
10007e4c:	8c7fffc4 	addi	r17,r17,-1
10007e50:	88000d16 	blt	r17,zero,10007e88 <_fwalk+0x70>
10007e54:	8080030b 	ldhu	r2,12(r16)
10007e58:	8c7fffc4 	addi	r17,r17,-1
10007e5c:	108000b0 	cmpltui	r2,r2,2
10007e60:	1000061e 	bne	r2,zero,10007e7c <_fwalk+0x64>
10007e64:	8080038f 	ldh	r2,14(r16)
10007e68:	8009883a 	mov	r4,r16
10007e6c:	10bfffe0 	cmpeqi	r2,r2,-1
10007e70:	1000021e 	bne	r2,zero,10007e7c <_fwalk+0x64>
10007e74:	983ee83a 	callr	r19
10007e78:	a0a8b03a 	or	r20,r20,r2
10007e7c:	88bfffd8 	cmpnei	r2,r17,-1
10007e80:	84001a04 	addi	r16,r16,104
10007e84:	103ff31e 	bne	r2,zero,10007e54 <_fwalk+0x3c>
10007e88:	94800017 	ldw	r18,0(r18)
10007e8c:	903fed1e 	bne	r18,zero,10007e44 <_fwalk+0x2c>
10007e90:	a005883a 	mov	r2,r20
10007e94:	dfc00517 	ldw	ra,20(sp)
10007e98:	dd000417 	ldw	r20,16(sp)
10007e9c:	dcc00317 	ldw	r19,12(sp)
10007ea0:	dc800217 	ldw	r18,8(sp)
10007ea4:	dc400117 	ldw	r17,4(sp)
10007ea8:	dc000017 	ldw	r16,0(sp)
10007eac:	dec00604 	addi	sp,sp,24
10007eb0:	f800283a 	ret
10007eb4:	0029883a 	mov	r20,zero
10007eb8:	003ff506 	br	10007e90 <_fwalk+0x78>

10007ebc <_fwalk_reent>:
10007ebc:	defff904 	addi	sp,sp,-28
10007ec0:	dc800215 	stw	r18,8(sp)
10007ec4:	dfc00615 	stw	ra,24(sp)
10007ec8:	dd400515 	stw	r21,20(sp)
10007ecc:	dd000415 	stw	r20,16(sp)
10007ed0:	dcc00315 	stw	r19,12(sp)
10007ed4:	dc400115 	stw	r17,4(sp)
10007ed8:	dc000015 	stw	r16,0(sp)
10007edc:	2480b804 	addi	r18,r4,736
10007ee0:	90002126 	beq	r18,zero,10007f68 <_fwalk_reent+0xac>
10007ee4:	2829883a 	mov	r20,r5
10007ee8:	2027883a 	mov	r19,r4
10007eec:	002b883a 	mov	r21,zero
10007ef0:	94400117 	ldw	r17,4(r18)
10007ef4:	94000217 	ldw	r16,8(r18)
10007ef8:	8c7fffc4 	addi	r17,r17,-1
10007efc:	88000e16 	blt	r17,zero,10007f38 <_fwalk_reent+0x7c>
10007f00:	8080030b 	ldhu	r2,12(r16)
10007f04:	8c7fffc4 	addi	r17,r17,-1
10007f08:	108000b0 	cmpltui	r2,r2,2
10007f0c:	1000071e 	bne	r2,zero,10007f2c <_fwalk_reent+0x70>
10007f10:	8080038f 	ldh	r2,14(r16)
10007f14:	800b883a 	mov	r5,r16
10007f18:	9809883a 	mov	r4,r19
10007f1c:	10bfffe0 	cmpeqi	r2,r2,-1
10007f20:	1000021e 	bne	r2,zero,10007f2c <_fwalk_reent+0x70>
10007f24:	a03ee83a 	callr	r20
10007f28:	a8aab03a 	or	r21,r21,r2
10007f2c:	88bfffd8 	cmpnei	r2,r17,-1
10007f30:	84001a04 	addi	r16,r16,104
10007f34:	103ff21e 	bne	r2,zero,10007f00 <_fwalk_reent+0x44>
10007f38:	94800017 	ldw	r18,0(r18)
10007f3c:	903fec1e 	bne	r18,zero,10007ef0 <_fwalk_reent+0x34>
10007f40:	a805883a 	mov	r2,r21
10007f44:	dfc00617 	ldw	ra,24(sp)
10007f48:	dd400517 	ldw	r21,20(sp)
10007f4c:	dd000417 	ldw	r20,16(sp)
10007f50:	dcc00317 	ldw	r19,12(sp)
10007f54:	dc800217 	ldw	r18,8(sp)
10007f58:	dc400117 	ldw	r17,4(sp)
10007f5c:	dc000017 	ldw	r16,0(sp)
10007f60:	dec00704 	addi	sp,sp,28
10007f64:	f800283a 	ret
10007f68:	002b883a 	mov	r21,zero
10007f6c:	003ff406 	br	10007f40 <_fwalk_reent+0x84>

10007f70 <__localeconv_l>:
10007f70:	20803c04 	addi	r2,r4,240
10007f74:	f800283a 	ret

10007f78 <_localeconv_r>:
10007f78:	00840074 	movhi	r2,4097
10007f7c:	108f2b04 	addi	r2,r2,15532
10007f80:	f800283a 	ret

10007f84 <localeconv>:
10007f84:	00840074 	movhi	r2,4097
10007f88:	108f2b04 	addi	r2,r2,15532
10007f8c:	f800283a 	ret

10007f90 <__swhatbuf_r>:
10007f90:	deffea04 	addi	sp,sp,-88
10007f94:	dc001215 	stw	r16,72(sp)
10007f98:	2821883a 	mov	r16,r5
10007f9c:	2940038f 	ldh	r5,14(r5)
10007fa0:	dc801415 	stw	r18,80(sp)
10007fa4:	dc401315 	stw	r17,76(sp)
10007fa8:	dfc01515 	stw	ra,84(sp)
10007fac:	3023883a 	mov	r17,r6
10007fb0:	3825883a 	mov	r18,r7
10007fb4:	28001016 	blt	r5,zero,10007ff8 <__swhatbuf_r+0x68>
10007fb8:	d80d883a 	mov	r6,sp
10007fbc:	000bcd80 	call	1000bcd8 <_fstat_r>
10007fc0:	10000d16 	blt	r2,zero,10007ff8 <__swhatbuf_r+0x68>
10007fc4:	d8c00117 	ldw	r3,4(sp)
10007fc8:	00820004 	movi	r2,2048
10007fcc:	18fc000c 	andi	r3,r3,61440
10007fd0:	18c80020 	cmpeqi	r3,r3,8192
10007fd4:	90c00015 	stw	r3,0(r18)
10007fd8:	00c10004 	movi	r3,1024
10007fdc:	88c00015 	stw	r3,0(r17)
10007fe0:	dfc01517 	ldw	ra,84(sp)
10007fe4:	dc801417 	ldw	r18,80(sp)
10007fe8:	dc401317 	ldw	r17,76(sp)
10007fec:	dc001217 	ldw	r16,72(sp)
10007ff0:	dec01604 	addi	sp,sp,88
10007ff4:	f800283a 	ret
10007ff8:	8080030b 	ldhu	r2,12(r16)
10007ffc:	90000015 	stw	zero,0(r18)
10008000:	1080200c 	andi	r2,r2,128
10008004:	10000426 	beq	r2,zero,10008018 <__swhatbuf_r+0x88>
10008008:	00801004 	movi	r2,64
1000800c:	88800015 	stw	r2,0(r17)
10008010:	0005883a 	mov	r2,zero
10008014:	003ff206 	br	10007fe0 <__swhatbuf_r+0x50>
10008018:	00810004 	movi	r2,1024
1000801c:	88800015 	stw	r2,0(r17)
10008020:	0005883a 	mov	r2,zero
10008024:	003fee06 	br	10007fe0 <__swhatbuf_r+0x50>

10008028 <__smakebuf_r>:
10008028:	28c0030b 	ldhu	r3,12(r5)
1000802c:	defffa04 	addi	sp,sp,-24
10008030:	dc000215 	stw	r16,8(sp)
10008034:	dfc00515 	stw	ra,20(sp)
10008038:	dc800415 	stw	r18,16(sp)
1000803c:	dc400315 	stw	r17,12(sp)
10008040:	18c0008c 	andi	r3,r3,2
10008044:	2821883a 	mov	r16,r5
10008048:	18000b26 	beq	r3,zero,10008078 <__smakebuf_r+0x50>
1000804c:	28c010c4 	addi	r3,r5,67
10008050:	28c00015 	stw	r3,0(r5)
10008054:	28c00415 	stw	r3,16(r5)
10008058:	00c00044 	movi	r3,1
1000805c:	28c00515 	stw	r3,20(r5)
10008060:	dfc00517 	ldw	ra,20(sp)
10008064:	dc800417 	ldw	r18,16(sp)
10008068:	dc400317 	ldw	r17,12(sp)
1000806c:	dc000217 	ldw	r16,8(sp)
10008070:	dec00604 	addi	sp,sp,24
10008074:	f800283a 	ret
10008078:	d9c00104 	addi	r7,sp,4
1000807c:	d80d883a 	mov	r6,sp
10008080:	2023883a 	mov	r17,r4
10008084:	0007f900 	call	10007f90 <__swhatbuf_r>
10008088:	1025883a 	mov	r18,r2
1000808c:	d8800117 	ldw	r2,4(sp)
10008090:	1000131e 	bne	r2,zero,100080e0 <__smakebuf_r+0xb8>
10008094:	d9400017 	ldw	r5,0(sp)
10008098:	8809883a 	mov	r4,r17
1000809c:	00081640 	call	10008164 <_malloc_r>
100080a0:	10001c26 	beq	r2,zero,10008114 <__smakebuf_r+0xec>
100080a4:	01040034 	movhi	r4,4096
100080a8:	211c8004 	addi	r4,r4,29184
100080ac:	80c0030b 	ldhu	r3,12(r16)
100080b0:	89000f15 	stw	r4,60(r17)
100080b4:	80800015 	stw	r2,0(r16)
100080b8:	80800415 	stw	r2,16(r16)
100080bc:	d8800017 	ldw	r2,0(sp)
100080c0:	d9400117 	ldw	r5,4(sp)
100080c4:	18c02014 	ori	r3,r3,128
100080c8:	80c0030d 	sth	r3,12(r16)
100080cc:	80800515 	stw	r2,20(r16)
100080d0:	28001c1e 	bne	r5,zero,10008144 <__smakebuf_r+0x11c>
100080d4:	90c6b03a 	or	r3,r18,r3
100080d8:	80c0030d 	sth	r3,12(r16)
100080dc:	003fe006 	br	10008060 <__smakebuf_r+0x38>
100080e0:	8140038f 	ldh	r5,14(r16)
100080e4:	8809883a 	mov	r4,r17
100080e8:	000bd380 	call	1000bd38 <_isatty_r>
100080ec:	103fe926 	beq	r2,zero,10008094 <__smakebuf_r+0x6c>
100080f0:	8080030b 	ldhu	r2,12(r16)
100080f4:	80c010c4 	addi	r3,r16,67
100080f8:	80c00015 	stw	r3,0(r16)
100080fc:	10800054 	ori	r2,r2,1
10008100:	8080030d 	sth	r2,12(r16)
10008104:	00800044 	movi	r2,1
10008108:	80c00415 	stw	r3,16(r16)
1000810c:	80800515 	stw	r2,20(r16)
10008110:	003fe006 	br	10008094 <__smakebuf_r+0x6c>
10008114:	8080030b 	ldhu	r2,12(r16)
10008118:	10c0800c 	andi	r3,r2,512
1000811c:	183fd01e 	bne	r3,zero,10008060 <__smakebuf_r+0x38>
10008120:	10bfff0c 	andi	r2,r2,65532
10008124:	10800094 	ori	r2,r2,2
10008128:	80c010c4 	addi	r3,r16,67
1000812c:	8080030d 	sth	r2,12(r16)
10008130:	00800044 	movi	r2,1
10008134:	80c00015 	stw	r3,0(r16)
10008138:	80c00415 	stw	r3,16(r16)
1000813c:	80800515 	stw	r2,20(r16)
10008140:	003fc706 	br	10008060 <__smakebuf_r+0x38>
10008144:	8140038f 	ldh	r5,14(r16)
10008148:	8809883a 	mov	r4,r17
1000814c:	000bd380 	call	1000bd38 <_isatty_r>
10008150:	80c0030b 	ldhu	r3,12(r16)
10008154:	103fdf26 	beq	r2,zero,100080d4 <__smakebuf_r+0xac>
10008158:	18ffff0c 	andi	r3,r3,65532
1000815c:	18c00054 	ori	r3,r3,1
10008160:	003fdc06 	br	100080d4 <__smakebuf_r+0xac>

10008164 <_malloc_r>:
10008164:	defff604 	addi	sp,sp,-40
10008168:	dc400115 	stw	r17,4(sp)
1000816c:	2c4002c4 	addi	r17,r5,11
10008170:	dc800215 	stw	r18,8(sp)
10008174:	dfc00915 	stw	ra,36(sp)
10008178:	df000815 	stw	fp,32(sp)
1000817c:	ddc00715 	stw	r23,28(sp)
10008180:	dd800615 	stw	r22,24(sp)
10008184:	dd400515 	stw	r21,20(sp)
10008188:	dd000415 	stw	r20,16(sp)
1000818c:	dcc00315 	stw	r19,12(sp)
10008190:	dc000015 	stw	r16,0(sp)
10008194:	888005e8 	cmpgeui	r2,r17,23
10008198:	2025883a 	mov	r18,r4
1000819c:	10001b1e 	bne	r2,zero,1000820c <_malloc_r+0xa8>
100081a0:	29400468 	cmpgeui	r5,r5,17
100081a4:	2800951e 	bne	r5,zero,100083fc <_malloc_r+0x298>
100081a8:	000fbd00 	call	1000fbd0 <__malloc_lock>
100081ac:	04400404 	movi	r17,16
100081b0:	00800604 	movi	r2,24
100081b4:	01800084 	movi	r6,2
100081b8:	04c40074 	movhi	r19,4097
100081bc:	9ccded04 	addi	r19,r19,14260
100081c0:	9885883a 	add	r2,r19,r2
100081c4:	14000117 	ldw	r16,4(r2)
100081c8:	10fffe04 	addi	r3,r2,-8
100081cc:	80c09e26 	beq	r16,r3,10008448 <_malloc_r+0x2e4>
100081d0:	80800117 	ldw	r2,4(r16)
100081d4:	81000317 	ldw	r4,12(r16)
100081d8:	00ffff04 	movi	r3,-4
100081dc:	10c4703a 	and	r2,r2,r3
100081e0:	81400217 	ldw	r5,8(r16)
100081e4:	8085883a 	add	r2,r16,r2
100081e8:	10c00117 	ldw	r3,4(r2)
100081ec:	29000315 	stw	r4,12(r5)
100081f0:	21400215 	stw	r5,8(r4)
100081f4:	18c00054 	ori	r3,r3,1
100081f8:	10c00115 	stw	r3,4(r2)
100081fc:	9009883a 	mov	r4,r18
10008200:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10008204:	80800204 	addi	r2,r16,8
10008208:	00007f06 	br	10008408 <_malloc_r+0x2a4>
1000820c:	00bffe04 	movi	r2,-8
10008210:	88a2703a 	and	r17,r17,r2
10008214:	88007916 	blt	r17,zero,100083fc <_malloc_r+0x298>
10008218:	89407836 	bltu	r17,r5,100083fc <_malloc_r+0x298>
1000821c:	000fbd00 	call	1000fbd0 <__malloc_lock>
10008220:	88807e28 	cmpgeui	r2,r17,504
10008224:	10013326 	beq	r2,zero,100086f4 <_malloc_r+0x590>
10008228:	8804d27a 	srli	r2,r17,9
1000822c:	10008226 	beq	r2,zero,10008438 <_malloc_r+0x2d4>
10008230:	10c00168 	cmpgeui	r3,r2,5
10008234:	1801151e 	bne	r3,zero,1000868c <_malloc_r+0x528>
10008238:	8804d1ba 	srli	r2,r17,6
1000823c:	11800e44 	addi	r6,r2,57
10008240:	300a90fa 	slli	r5,r6,3
10008244:	12000e04 	addi	r8,r2,56
10008248:	04c40074 	movhi	r19,4097
1000824c:	9ccded04 	addi	r19,r19,14260
10008250:	994b883a 	add	r5,r19,r5
10008254:	2c000117 	ldw	r16,4(r5)
10008258:	297ffe04 	addi	r5,r5,-8
1000825c:	2c001126 	beq	r5,r16,100082a4 <_malloc_r+0x140>
10008260:	80800117 	ldw	r2,4(r16)
10008264:	00ffff04 	movi	r3,-4
10008268:	10c4703a 	and	r2,r2,r3
1000826c:	1447c83a 	sub	r3,r2,r17
10008270:	19000408 	cmpgei	r4,r3,16
10008274:	2000e81e 	bne	r4,zero,10008618 <_malloc_r+0x4b4>
10008278:	1800e90e 	bge	r3,zero,10008620 <_malloc_r+0x4bc>
1000827c:	01ffff04 	movi	r7,-4
10008280:	00000606 	br	1000829c <_malloc_r+0x138>
10008284:	80800117 	ldw	r2,4(r16)
10008288:	11c4703a 	and	r2,r2,r7
1000828c:	1447c83a 	sub	r3,r2,r17
10008290:	19000408 	cmpgei	r4,r3,16
10008294:	2000e01e 	bne	r4,zero,10008618 <_malloc_r+0x4b4>
10008298:	1800e10e 	bge	r3,zero,10008620 <_malloc_r+0x4bc>
1000829c:	84000317 	ldw	r16,12(r16)
100082a0:	2c3ff81e 	bne	r5,r16,10008284 <_malloc_r+0x120>
100082a4:	9c000417 	ldw	r16,16(r19)
100082a8:	02040074 	movhi	r8,4097
100082ac:	420def04 	addi	r8,r8,14268
100082b0:	82006c26 	beq	r16,r8,10008464 <_malloc_r+0x300>
100082b4:	80c00117 	ldw	r3,4(r16)
100082b8:	00bfff04 	movi	r2,-4
100082bc:	1884703a 	and	r2,r3,r2
100082c0:	1447c83a 	sub	r3,r2,r17
100082c4:	19000410 	cmplti	r4,r3,16
100082c8:	20011526 	beq	r4,zero,10008720 <_malloc_r+0x5bc>
100082cc:	9a000515 	stw	r8,20(r19)
100082d0:	9a000415 	stw	r8,16(r19)
100082d4:	18010a0e 	bge	r3,zero,10008700 <_malloc_r+0x59c>
100082d8:	10c08028 	cmpgeui	r3,r2,512
100082dc:	1800d21e 	bne	r3,zero,10008628 <_malloc_r+0x4c4>
100082e0:	1004d0fa 	srli	r2,r2,3
100082e4:	99400117 	ldw	r5,4(r19)
100082e8:	10c00044 	addi	r3,r2,1
100082ec:	1009d0ba 	srai	r4,r2,2
100082f0:	180690fa 	slli	r3,r3,3
100082f4:	00800044 	movi	r2,1
100082f8:	1104983a 	sll	r2,r2,r4
100082fc:	98c7883a 	add	r3,r19,r3
10008300:	19000017 	ldw	r4,0(r3)
10008304:	1144b03a 	or	r2,r2,r5
10008308:	197ffe04 	addi	r5,r3,-8
1000830c:	81400315 	stw	r5,12(r16)
10008310:	81000215 	stw	r4,8(r16)
10008314:	98800115 	stw	r2,4(r19)
10008318:	1c000015 	stw	r16,0(r3)
1000831c:	24000315 	stw	r16,12(r4)
10008320:	3007d0ba 	srai	r3,r6,2
10008324:	01000044 	movi	r4,1
10008328:	20c8983a 	sll	r4,r4,r3
1000832c:	11005236 	bltu	r2,r4,10008478 <_malloc_r+0x314>
10008330:	2086703a 	and	r3,r4,r2
10008334:	18000a1e 	bne	r3,zero,10008360 <_malloc_r+0x1fc>
10008338:	00ffff04 	movi	r3,-4
1000833c:	2109883a 	add	r4,r4,r4
10008340:	30cc703a 	and	r6,r6,r3
10008344:	2086703a 	and	r3,r4,r2
10008348:	31800104 	addi	r6,r6,4
1000834c:	1800041e 	bne	r3,zero,10008360 <_malloc_r+0x1fc>
10008350:	2109883a 	add	r4,r4,r4
10008354:	2086703a 	and	r3,r4,r2
10008358:	31800104 	addi	r6,r6,4
1000835c:	183ffc26 	beq	r3,zero,10008350 <_malloc_r+0x1ec>
10008360:	027fff04 	movi	r9,-4
10008364:	301490fa 	slli	r10,r6,3
10008368:	3017883a 	mov	r11,r6
1000836c:	9a95883a 	add	r10,r19,r10
10008370:	500f883a 	mov	r7,r10
10008374:	3c000317 	ldw	r16,12(r7)
10008378:	3c00cd26 	beq	r7,r16,100086b0 <_malloc_r+0x54c>
1000837c:	80800117 	ldw	r2,4(r16)
10008380:	1244703a 	and	r2,r2,r9
10008384:	1447c83a 	sub	r3,r2,r17
10008388:	19400408 	cmpgei	r5,r3,16
1000838c:	2800081e 	bne	r5,zero,100083b0 <_malloc_r+0x24c>
10008390:	1800cc0e 	bge	r3,zero,100086c4 <_malloc_r+0x560>
10008394:	84000317 	ldw	r16,12(r16)
10008398:	3c00c526 	beq	r7,r16,100086b0 <_malloc_r+0x54c>
1000839c:	80800117 	ldw	r2,4(r16)
100083a0:	1244703a 	and	r2,r2,r9
100083a4:	1447c83a 	sub	r3,r2,r17
100083a8:	19400410 	cmplti	r5,r3,16
100083ac:	283ff81e 	bne	r5,zero,10008390 <_malloc_r+0x22c>
100083b0:	81000317 	ldw	r4,12(r16)
100083b4:	81400217 	ldw	r5,8(r16)
100083b8:	89800054 	ori	r6,r17,1
100083bc:	81800115 	stw	r6,4(r16)
100083c0:	29000315 	stw	r4,12(r5)
100083c4:	21400215 	stw	r5,8(r4)
100083c8:	8463883a 	add	r17,r16,r17
100083cc:	9c400515 	stw	r17,20(r19)
100083d0:	9c400415 	stw	r17,16(r19)
100083d4:	19000054 	ori	r4,r3,1
100083d8:	89000115 	stw	r4,4(r17)
100083dc:	8085883a 	add	r2,r16,r2
100083e0:	8a000315 	stw	r8,12(r17)
100083e4:	8a000215 	stw	r8,8(r17)
100083e8:	10c00015 	stw	r3,0(r2)
100083ec:	9009883a 	mov	r4,r18
100083f0:	000fbf40 	call	1000fbf4 <__malloc_unlock>
100083f4:	80800204 	addi	r2,r16,8
100083f8:	00000306 	br	10008408 <_malloc_r+0x2a4>
100083fc:	00800304 	movi	r2,12
10008400:	90800015 	stw	r2,0(r18)
10008404:	0005883a 	mov	r2,zero
10008408:	dfc00917 	ldw	ra,36(sp)
1000840c:	df000817 	ldw	fp,32(sp)
10008410:	ddc00717 	ldw	r23,28(sp)
10008414:	dd800617 	ldw	r22,24(sp)
10008418:	dd400517 	ldw	r21,20(sp)
1000841c:	dd000417 	ldw	r20,16(sp)
10008420:	dcc00317 	ldw	r19,12(sp)
10008424:	dc800217 	ldw	r18,8(sp)
10008428:	dc400117 	ldw	r17,4(sp)
1000842c:	dc000017 	ldw	r16,0(sp)
10008430:	dec00a04 	addi	sp,sp,40
10008434:	f800283a 	ret
10008438:	01408004 	movi	r5,512
1000843c:	01801004 	movi	r6,64
10008440:	02000fc4 	movi	r8,63
10008444:	003f8006 	br	10008248 <_malloc_r+0xe4>
10008448:	14000317 	ldw	r16,12(r2)
1000844c:	31800084 	addi	r6,r6,2
10008450:	143f5f1e 	bne	r2,r16,100081d0 <_malloc_r+0x6c>
10008454:	9c000417 	ldw	r16,16(r19)
10008458:	02040074 	movhi	r8,4097
1000845c:	420def04 	addi	r8,r8,14268
10008460:	823f941e 	bne	r16,r8,100082b4 <_malloc_r+0x150>
10008464:	3007d0ba 	srai	r3,r6,2
10008468:	01000044 	movi	r4,1
1000846c:	98800117 	ldw	r2,4(r19)
10008470:	20c8983a 	sll	r4,r4,r3
10008474:	113fae2e 	bgeu	r2,r4,10008330 <_malloc_r+0x1cc>
10008478:	9c000217 	ldw	r16,8(r19)
1000847c:	00bfff04 	movi	r2,-4
10008480:	85000117 	ldw	r20,4(r16)
10008484:	a0ac703a 	and	r22,r20,r2
10008488:	b4400336 	bltu	r22,r17,10008498 <_malloc_r+0x334>
1000848c:	b445c83a 	sub	r2,r22,r17
10008490:	10c00408 	cmpgei	r3,r2,16
10008494:	1800561e 	bne	r3,zero,100085f0 <_malloc_r+0x48c>
10008498:	00840074 	movhi	r2,4097
1000849c:	1093cf17 	ldw	r2,20284(r2)
100084a0:	00c40074 	movhi	r3,4097
100084a4:	1d1c6517 	ldw	r20,29076(r3)
100084a8:	10bfffd8 	cmpnei	r2,r2,-1
100084ac:	85ab883a 	add	r21,r16,r22
100084b0:	8d29883a 	add	r20,r17,r20
100084b4:	1000c826 	beq	r2,zero,100087d8 <_malloc_r+0x674>
100084b8:	a50403c4 	addi	r20,r20,4111
100084bc:	00bc0004 	movi	r2,-4096
100084c0:	a0a8703a 	and	r20,r20,r2
100084c4:	a00b883a 	mov	r5,r20
100084c8:	9009883a 	mov	r4,r18
100084cc:	000a1c40 	call	1000a1c4 <_sbrk_r>
100084d0:	102f883a 	mov	r23,r2
100084d4:	10bfffd8 	cmpnei	r2,r2,-1
100084d8:	10009a26 	beq	r2,zero,10008744 <_malloc_r+0x5e0>
100084dc:	bd409836 	bltu	r23,r21,10008740 <_malloc_r+0x5dc>
100084e0:	00840074 	movhi	r2,4097
100084e4:	109c6f17 	ldw	r2,29116(r2)
100084e8:	00c40074 	movhi	r3,4097
100084ec:	a085883a 	add	r2,r20,r2
100084f0:	189c6f15 	stw	r2,29116(r3)
100084f4:	1007883a 	mov	r3,r2
100084f8:	adc0dd26 	beq	r21,r23,10008870 <_malloc_r+0x70c>
100084fc:	00840074 	movhi	r2,4097
10008500:	1093cf17 	ldw	r2,20284(r2)
10008504:	10bfffd8 	cmpnei	r2,r2,-1
10008508:	1000e026 	beq	r2,zero,1000888c <_malloc_r+0x728>
1000850c:	bd6bc83a 	sub	r21,r23,r21
10008510:	a8c7883a 	add	r3,r21,r3
10008514:	00840074 	movhi	r2,4097
10008518:	10dc6f15 	stw	r3,29116(r2)
1000851c:	bf0001cc 	andi	fp,r23,7
10008520:	e000b626 	beq	fp,zero,100087fc <_malloc_r+0x698>
10008524:	bf2fc83a 	sub	r23,r23,fp
10008528:	bdc00204 	addi	r23,r23,8
1000852c:	00840204 	movi	r2,4104
10008530:	1705c83a 	sub	r2,r2,fp
10008534:	bd29883a 	add	r20,r23,r20
10008538:	1505c83a 	sub	r2,r2,r20
1000853c:	1543ffcc 	andi	r21,r2,4095
10008540:	a80b883a 	mov	r5,r21
10008544:	9009883a 	mov	r4,r18
10008548:	000a1c40 	call	1000a1c4 <_sbrk_r>
1000854c:	10ffffe0 	cmpeqi	r3,r2,-1
10008550:	1800e41e 	bne	r3,zero,100088e4 <_malloc_r+0x780>
10008554:	15c5c83a 	sub	r2,r2,r23
10008558:	1569883a 	add	r20,r2,r21
1000855c:	00840074 	movhi	r2,4097
10008560:	109c6f17 	ldw	r2,29116(r2)
10008564:	9dc00215 	stw	r23,8(r19)
10008568:	a5000054 	ori	r20,r20,1
1000856c:	a885883a 	add	r2,r21,r2
10008570:	00c40074 	movhi	r3,4097
10008574:	189c6f15 	stw	r2,29116(r3)
10008578:	bd000115 	stw	r20,4(r23)
1000857c:	84c0c626 	beq	r16,r19,10008898 <_malloc_r+0x734>
10008580:	b0c00428 	cmpgeui	r3,r22,16
10008584:	1800c626 	beq	r3,zero,100088a0 <_malloc_r+0x73c>
10008588:	81000117 	ldw	r4,4(r16)
1000858c:	017ffe04 	movi	r5,-8
10008590:	b0fffd04 	addi	r3,r22,-12
10008594:	1946703a 	and	r3,r3,r5
10008598:	2100004c 	andi	r4,r4,1
1000859c:	20c8b03a 	or	r4,r4,r3
100085a0:	81000115 	stw	r4,4(r16)
100085a4:	01400144 	movi	r5,5
100085a8:	80c9883a 	add	r4,r16,r3
100085ac:	21400115 	stw	r5,4(r4)
100085b0:	21400215 	stw	r5,8(r4)
100085b4:	18c00428 	cmpgeui	r3,r3,16
100085b8:	1800cf1e 	bne	r3,zero,100088f8 <_malloc_r+0x794>
100085bc:	bd000117 	ldw	r20,4(r23)
100085c0:	b821883a 	mov	r16,r23
100085c4:	00c40074 	movhi	r3,4097
100085c8:	18dc6417 	ldw	r3,29072(r3)
100085cc:	1880022e 	bgeu	r3,r2,100085d8 <_malloc_r+0x474>
100085d0:	00c40074 	movhi	r3,4097
100085d4:	189c6415 	stw	r2,29072(r3)
100085d8:	00c40074 	movhi	r3,4097
100085dc:	18dc6317 	ldw	r3,29068(r3)
100085e0:	18805a2e 	bgeu	r3,r2,1000874c <_malloc_r+0x5e8>
100085e4:	00c40074 	movhi	r3,4097
100085e8:	189c6315 	stw	r2,29068(r3)
100085ec:	00005706 	br	1000874c <_malloc_r+0x5e8>
100085f0:	88c00054 	ori	r3,r17,1
100085f4:	80c00115 	stw	r3,4(r16)
100085f8:	8463883a 	add	r17,r16,r17
100085fc:	10800054 	ori	r2,r2,1
10008600:	9c400215 	stw	r17,8(r19)
10008604:	88800115 	stw	r2,4(r17)
10008608:	9009883a 	mov	r4,r18
1000860c:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10008610:	80800204 	addi	r2,r16,8
10008614:	003f7c06 	br	10008408 <_malloc_r+0x2a4>
10008618:	400d883a 	mov	r6,r8
1000861c:	003f2106 	br	100082a4 <_malloc_r+0x140>
10008620:	81000317 	ldw	r4,12(r16)
10008624:	003eee06 	br	100081e0 <_malloc_r+0x7c>
10008628:	1006d27a 	srli	r3,r2,9
1000862c:	19000168 	cmpgeui	r4,r3,5
10008630:	20003e26 	beq	r4,zero,1000872c <_malloc_r+0x5c8>
10008634:	19000568 	cmpgeui	r4,r3,21
10008638:	20007a1e 	bne	r4,zero,10008824 <_malloc_r+0x6c0>
1000863c:	19401704 	addi	r5,r3,92
10008640:	280a90fa 	slli	r5,r5,3
10008644:	190016c4 	addi	r4,r3,91
10008648:	994b883a 	add	r5,r19,r5
1000864c:	28c00017 	ldw	r3,0(r5)
10008650:	297ffe04 	addi	r5,r5,-8
10008654:	28c06226 	beq	r5,r3,100087e0 <_malloc_r+0x67c>
10008658:	01ffff04 	movi	r7,-4
1000865c:	19000117 	ldw	r4,4(r3)
10008660:	21c8703a 	and	r4,r4,r7
10008664:	1100022e 	bgeu	r2,r4,10008670 <_malloc_r+0x50c>
10008668:	18c00217 	ldw	r3,8(r3)
1000866c:	28fffb1e 	bne	r5,r3,1000865c <_malloc_r+0x4f8>
10008670:	19400317 	ldw	r5,12(r3)
10008674:	98800117 	ldw	r2,4(r19)
10008678:	81400315 	stw	r5,12(r16)
1000867c:	80c00215 	stw	r3,8(r16)
10008680:	2c000215 	stw	r16,8(r5)
10008684:	1c000315 	stw	r16,12(r3)
10008688:	003f2506 	br	10008320 <_malloc_r+0x1bc>
1000868c:	10c00568 	cmpgeui	r3,r2,21
10008690:	18003826 	beq	r3,zero,10008774 <_malloc_r+0x610>
10008694:	10c01568 	cmpgeui	r3,r2,85
10008698:	1800691e 	bne	r3,zero,10008840 <_malloc_r+0x6dc>
1000869c:	8804d33a 	srli	r2,r17,12
100086a0:	11801bc4 	addi	r6,r2,111
100086a4:	12001b84 	addi	r8,r2,110
100086a8:	300a90fa 	slli	r5,r6,3
100086ac:	003ee606 	br	10008248 <_malloc_r+0xe4>
100086b0:	5ac00044 	addi	r11,r11,1
100086b4:	588000cc 	andi	r2,r11,3
100086b8:	39c00204 	addi	r7,r7,8
100086bc:	103f2d1e 	bne	r2,zero,10008374 <_malloc_r+0x210>
100086c0:	00003306 	br	10008790 <_malloc_r+0x62c>
100086c4:	8085883a 	add	r2,r16,r2
100086c8:	10c00117 	ldw	r3,4(r2)
100086cc:	81000317 	ldw	r4,12(r16)
100086d0:	81400217 	ldw	r5,8(r16)
100086d4:	18c00054 	ori	r3,r3,1
100086d8:	10c00115 	stw	r3,4(r2)
100086dc:	29000315 	stw	r4,12(r5)
100086e0:	21400215 	stw	r5,8(r4)
100086e4:	9009883a 	mov	r4,r18
100086e8:	000fbf40 	call	1000fbf4 <__malloc_unlock>
100086ec:	80800204 	addi	r2,r16,8
100086f0:	003f4506 	br	10008408 <_malloc_r+0x2a4>
100086f4:	880cd0fa 	srli	r6,r17,3
100086f8:	88800204 	addi	r2,r17,8
100086fc:	003eae06 	br	100081b8 <_malloc_r+0x54>
10008700:	8085883a 	add	r2,r16,r2
10008704:	10c00117 	ldw	r3,4(r2)
10008708:	9009883a 	mov	r4,r18
1000870c:	18c00054 	ori	r3,r3,1
10008710:	10c00115 	stw	r3,4(r2)
10008714:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10008718:	80800204 	addi	r2,r16,8
1000871c:	003f3a06 	br	10008408 <_malloc_r+0x2a4>
10008720:	89000054 	ori	r4,r17,1
10008724:	81000115 	stw	r4,4(r16)
10008728:	003f2706 	br	100083c8 <_malloc_r+0x264>
1000872c:	1006d1ba 	srli	r3,r2,6
10008730:	19400e44 	addi	r5,r3,57
10008734:	19000e04 	addi	r4,r3,56
10008738:	280a90fa 	slli	r5,r5,3
1000873c:	003fc206 	br	10008648 <_malloc_r+0x4e4>
10008740:	84c04626 	beq	r16,r19,1000885c <_malloc_r+0x6f8>
10008744:	9c000217 	ldw	r16,8(r19)
10008748:	85000117 	ldw	r20,4(r16)
1000874c:	00bfff04 	movi	r2,-4
10008750:	a0a8703a 	and	r20,r20,r2
10008754:	a445c83a 	sub	r2,r20,r17
10008758:	a4400236 	bltu	r20,r17,10008764 <_malloc_r+0x600>
1000875c:	10c00408 	cmpgei	r3,r2,16
10008760:	183fa31e 	bne	r3,zero,100085f0 <_malloc_r+0x48c>
10008764:	9009883a 	mov	r4,r18
10008768:	000fbf40 	call	1000fbf4 <__malloc_unlock>
1000876c:	0005883a 	mov	r2,zero
10008770:	003f2506 	br	10008408 <_malloc_r+0x2a4>
10008774:	11801704 	addi	r6,r2,92
10008778:	120016c4 	addi	r8,r2,91
1000877c:	300a90fa 	slli	r5,r6,3
10008780:	003eb106 	br	10008248 <_malloc_r+0xe4>
10008784:	50800217 	ldw	r2,8(r10)
10008788:	31bfffc4 	addi	r6,r6,-1
1000878c:	1280701e 	bne	r2,r10,10008950 <_malloc_r+0x7ec>
10008790:	308000cc 	andi	r2,r6,3
10008794:	52bffe04 	addi	r10,r10,-8
10008798:	103ffa1e 	bne	r2,zero,10008784 <_malloc_r+0x620>
1000879c:	98c00117 	ldw	r3,4(r19)
100087a0:	0104303a 	nor	r2,zero,r4
100087a4:	10c4703a 	and	r2,r2,r3
100087a8:	98800115 	stw	r2,4(r19)
100087ac:	2109883a 	add	r4,r4,r4
100087b0:	113f3136 	bltu	r2,r4,10008478 <_malloc_r+0x314>
100087b4:	203f3026 	beq	r4,zero,10008478 <_malloc_r+0x314>
100087b8:	2086703a 	and	r3,r4,r2
100087bc:	1800041e 	bne	r3,zero,100087d0 <_malloc_r+0x66c>
100087c0:	2109883a 	add	r4,r4,r4
100087c4:	2086703a 	and	r3,r4,r2
100087c8:	5ac00104 	addi	r11,r11,4
100087cc:	183ffc26 	beq	r3,zero,100087c0 <_malloc_r+0x65c>
100087d0:	580d883a 	mov	r6,r11
100087d4:	003ee306 	br	10008364 <_malloc_r+0x200>
100087d8:	a5000404 	addi	r20,r20,16
100087dc:	003f3906 	br	100084c4 <_malloc_r+0x360>
100087e0:	2009d0ba 	srai	r4,r4,2
100087e4:	00800044 	movi	r2,1
100087e8:	99c00117 	ldw	r7,4(r19)
100087ec:	1104983a 	sll	r2,r2,r4
100087f0:	11c4b03a 	or	r2,r2,r7
100087f4:	98800115 	stw	r2,4(r19)
100087f8:	003f9f06 	br	10008678 <_malloc_r+0x514>
100087fc:	bd05883a 	add	r2,r23,r20
10008800:	0085c83a 	sub	r2,zero,r2
10008804:	1543ffcc 	andi	r21,r2,4095
10008808:	a80b883a 	mov	r5,r21
1000880c:	9009883a 	mov	r4,r18
10008810:	000a1c40 	call	1000a1c4 <_sbrk_r>
10008814:	10ffffe0 	cmpeqi	r3,r2,-1
10008818:	183f4e26 	beq	r3,zero,10008554 <_malloc_r+0x3f0>
1000881c:	002b883a 	mov	r21,zero
10008820:	003f4e06 	br	1000855c <_malloc_r+0x3f8>
10008824:	19001568 	cmpgeui	r4,r3,85
10008828:	2000201e 	bne	r4,zero,100088ac <_malloc_r+0x748>
1000882c:	1006d33a 	srli	r3,r2,12
10008830:	19401bc4 	addi	r5,r3,111
10008834:	19001b84 	addi	r4,r3,110
10008838:	280a90fa 	slli	r5,r5,3
1000883c:	003f8206 	br	10008648 <_malloc_r+0x4e4>
10008840:	10c05568 	cmpgeui	r3,r2,341
10008844:	1800201e 	bne	r3,zero,100088c8 <_malloc_r+0x764>
10008848:	8804d3fa 	srli	r2,r17,15
1000884c:	11801e04 	addi	r6,r2,120
10008850:	12001dc4 	addi	r8,r2,119
10008854:	300a90fa 	slli	r5,r6,3
10008858:	003e7b06 	br	10008248 <_malloc_r+0xe4>
1000885c:	00840074 	movhi	r2,4097
10008860:	10dc6f17 	ldw	r3,29116(r2)
10008864:	a0c7883a 	add	r3,r20,r3
10008868:	10dc6f15 	stw	r3,29116(r2)
1000886c:	003f2306 	br	100084fc <_malloc_r+0x398>
10008870:	a903ffcc 	andi	r4,r21,4095
10008874:	203f211e 	bne	r4,zero,100084fc <_malloc_r+0x398>
10008878:	9c000217 	ldw	r16,8(r19)
1000887c:	b529883a 	add	r20,r22,r20
10008880:	a5000054 	ori	r20,r20,1
10008884:	85000115 	stw	r20,4(r16)
10008888:	003f4e06 	br	100085c4 <_malloc_r+0x460>
1000888c:	00840074 	movhi	r2,4097
10008890:	15d3cf15 	stw	r23,20284(r2)
10008894:	003f2106 	br	1000851c <_malloc_r+0x3b8>
10008898:	b821883a 	mov	r16,r23
1000889c:	003f4906 	br	100085c4 <_malloc_r+0x460>
100088a0:	00800044 	movi	r2,1
100088a4:	b8800115 	stw	r2,4(r23)
100088a8:	003fae06 	br	10008764 <_malloc_r+0x600>
100088ac:	19005568 	cmpgeui	r4,r3,341
100088b0:	2000191e 	bne	r4,zero,10008918 <_malloc_r+0x7b4>
100088b4:	1006d3fa 	srli	r3,r2,15
100088b8:	19401e04 	addi	r5,r3,120
100088bc:	19001dc4 	addi	r4,r3,119
100088c0:	280a90fa 	slli	r5,r5,3
100088c4:	003f6006 	br	10008648 <_malloc_r+0x4e4>
100088c8:	10815568 	cmpgeui	r2,r2,1365
100088cc:	1000191e 	bne	r2,zero,10008934 <_malloc_r+0x7d0>
100088d0:	8804d4ba 	srli	r2,r17,18
100088d4:	11801f44 	addi	r6,r2,125
100088d8:	12001f04 	addi	r8,r2,124
100088dc:	300a90fa 	slli	r5,r6,3
100088e0:	003e5906 	br	10008248 <_malloc_r+0xe4>
100088e4:	e73ffe04 	addi	fp,fp,-8
100088e8:	a729883a 	add	r20,r20,fp
100088ec:	a5e9c83a 	sub	r20,r20,r23
100088f0:	002b883a 	mov	r21,zero
100088f4:	003f1906 	br	1000855c <_malloc_r+0x3f8>
100088f8:	81400204 	addi	r5,r16,8
100088fc:	9009883a 	mov	r4,r18
10008900:	00076580 	call	10007658 <_free_r>
10008904:	9c000217 	ldw	r16,8(r19)
10008908:	00840074 	movhi	r2,4097
1000890c:	109c6f17 	ldw	r2,29116(r2)
10008910:	85000117 	ldw	r20,4(r16)
10008914:	003f2b06 	br	100085c4 <_malloc_r+0x460>
10008918:	18c15568 	cmpgeui	r3,r3,1365
1000891c:	1800091e 	bne	r3,zero,10008944 <_malloc_r+0x7e0>
10008920:	1006d4ba 	srli	r3,r2,18
10008924:	19401f44 	addi	r5,r3,125
10008928:	19001f04 	addi	r4,r3,124
1000892c:	280a90fa 	slli	r5,r5,3
10008930:	003f4506 	br	10008648 <_malloc_r+0x4e4>
10008934:	0140fe04 	movi	r5,1016
10008938:	01801fc4 	movi	r6,127
1000893c:	02001f84 	movi	r8,126
10008940:	003e4106 	br	10008248 <_malloc_r+0xe4>
10008944:	0140fe04 	movi	r5,1016
10008948:	01001f84 	movi	r4,126
1000894c:	003f3e06 	br	10008648 <_malloc_r+0x4e4>
10008950:	98800117 	ldw	r2,4(r19)
10008954:	003f9506 	br	100087ac <_malloc_r+0x648>

10008958 <memchr>:
10008958:	208000cc 	andi	r2,r4,3
1000895c:	280f883a 	mov	r7,r5
10008960:	10003526 	beq	r2,zero,10008a38 <memchr+0xe0>
10008964:	30bfffc4 	addi	r2,r6,-1
10008968:	30001926 	beq	r6,zero,100089d0 <memchr+0x78>
1000896c:	20c00003 	ldbu	r3,0(r4)
10008970:	29803fcc 	andi	r6,r5,255
10008974:	30c0061e 	bne	r6,r3,10008990 <memchr+0x38>
10008978:	00001706 	br	100089d8 <memchr+0x80>
1000897c:	10bfffc4 	addi	r2,r2,-1
10008980:	10ffffe0 	cmpeqi	r3,r2,-1
10008984:	1800121e 	bne	r3,zero,100089d0 <memchr+0x78>
10008988:	20c00003 	ldbu	r3,0(r4)
1000898c:	19801226 	beq	r3,r6,100089d8 <memchr+0x80>
10008990:	21000044 	addi	r4,r4,1
10008994:	20c000cc 	andi	r3,r4,3
10008998:	183ff81e 	bne	r3,zero,1000897c <memchr+0x24>
1000899c:	10c00128 	cmpgeui	r3,r2,4
100089a0:	18000f1e 	bne	r3,zero,100089e0 <memchr+0x88>
100089a4:	10000a26 	beq	r2,zero,100089d0 <memchr+0x78>
100089a8:	20c00003 	ldbu	r3,0(r4)
100089ac:	29403fcc 	andi	r5,r5,255
100089b0:	19400926 	beq	r3,r5,100089d8 <memchr+0x80>
100089b4:	2085883a 	add	r2,r4,r2
100089b8:	39403fcc 	andi	r5,r7,255
100089bc:	00000206 	br	100089c8 <memchr+0x70>
100089c0:	20c00003 	ldbu	r3,0(r4)
100089c4:	19400426 	beq	r3,r5,100089d8 <memchr+0x80>
100089c8:	21000044 	addi	r4,r4,1
100089cc:	113ffc1e 	bne	r2,r4,100089c0 <memchr+0x68>
100089d0:	0005883a 	mov	r2,zero
100089d4:	f800283a 	ret
100089d8:	2005883a 	mov	r2,r4
100089dc:	f800283a 	ret
100089e0:	280c923a 	slli	r6,r5,8
100089e4:	2a403fcc 	andi	r9,r5,255
100089e8:	02bfbff4 	movhi	r10,65279
100089ec:	31bfffcc 	andi	r6,r6,65535
100089f0:	3246b03a 	or	r3,r6,r9
100089f4:	1812943a 	slli	r9,r3,16
100089f8:	02202074 	movhi	r8,32897
100089fc:	52bfbfc4 	addi	r10,r10,-257
10008a00:	48d2b03a 	or	r9,r9,r3
10008a04:	42202004 	addi	r8,r8,-32640
10008a08:	20c00017 	ldw	r3,0(r4)
10008a0c:	48c6f03a 	xor	r3,r9,r3
10008a10:	1a8d883a 	add	r6,r3,r10
10008a14:	00c6303a 	nor	r3,zero,r3
10008a18:	30c6703a 	and	r3,r6,r3
10008a1c:	1a06703a 	and	r3,r3,r8
10008a20:	183fe11e 	bne	r3,zero,100089a8 <memchr+0x50>
10008a24:	10bfff04 	addi	r2,r2,-4
10008a28:	10c00128 	cmpgeui	r3,r2,4
10008a2c:	21000104 	addi	r4,r4,4
10008a30:	183ff51e 	bne	r3,zero,10008a08 <memchr+0xb0>
10008a34:	003fdb06 	br	100089a4 <memchr+0x4c>
10008a38:	3005883a 	mov	r2,r6
10008a3c:	003fd706 	br	1000899c <memchr+0x44>

10008a40 <memmove>:
10008a40:	2005883a 	mov	r2,r4
10008a44:	29000a2e 	bgeu	r5,r4,10008a70 <memmove+0x30>
10008a48:	2989883a 	add	r4,r5,r6
10008a4c:	1100082e 	bgeu	r2,r4,10008a70 <memmove+0x30>
10008a50:	1187883a 	add	r3,r2,r6
10008a54:	30003e26 	beq	r6,zero,10008b50 <memmove+0x110>
10008a58:	213fffc4 	addi	r4,r4,-1
10008a5c:	21400003 	ldbu	r5,0(r4)
10008a60:	18ffffc4 	addi	r3,r3,-1
10008a64:	19400005 	stb	r5,0(r3)
10008a68:	10fffb1e 	bne	r2,r3,10008a58 <memmove+0x18>
10008a6c:	f800283a 	ret
10008a70:	30c00430 	cmpltui	r3,r6,16
10008a74:	18000b26 	beq	r3,zero,10008aa4 <memmove+0x64>
10008a78:	1007883a 	mov	r3,r2
10008a7c:	31ffffc4 	addi	r7,r6,-1
10008a80:	30003726 	beq	r6,zero,10008b60 <memmove+0x120>
10008a84:	39c00044 	addi	r7,r7,1
10008a88:	29cf883a 	add	r7,r5,r7
10008a8c:	29400044 	addi	r5,r5,1
10008a90:	29bfffc3 	ldbu	r6,-1(r5)
10008a94:	18c00044 	addi	r3,r3,1
10008a98:	19bfffc5 	stb	r6,-1(r3)
10008a9c:	29fffb1e 	bne	r5,r7,10008a8c <memmove+0x4c>
10008aa0:	f800283a 	ret
10008aa4:	2886b03a 	or	r3,r5,r2
10008aa8:	18c000cc 	andi	r3,r3,3
10008aac:	1800291e 	bne	r3,zero,10008b54 <memmove+0x114>
10008ab0:	327ffc04 	addi	r9,r6,-16
10008ab4:	4812d13a 	srli	r9,r9,4
10008ab8:	280f883a 	mov	r7,r5
10008abc:	1007883a 	mov	r3,r2
10008ac0:	4a400044 	addi	r9,r9,1
10008ac4:	4812913a 	slli	r9,r9,4
10008ac8:	1251883a 	add	r8,r2,r9
10008acc:	39000017 	ldw	r4,0(r7)
10008ad0:	18c00404 	addi	r3,r3,16
10008ad4:	39c00404 	addi	r7,r7,16
10008ad8:	193ffc15 	stw	r4,-16(r3)
10008adc:	393ffd17 	ldw	r4,-12(r7)
10008ae0:	193ffd15 	stw	r4,-12(r3)
10008ae4:	393ffe17 	ldw	r4,-8(r7)
10008ae8:	193ffe15 	stw	r4,-8(r3)
10008aec:	393fff17 	ldw	r4,-4(r7)
10008af0:	193fff15 	stw	r4,-4(r3)
10008af4:	40fff51e 	bne	r8,r3,10008acc <memmove+0x8c>
10008af8:	3100030c 	andi	r4,r6,12
10008afc:	2a4b883a 	add	r5,r5,r9
10008b00:	320003cc 	andi	r8,r6,15
10008b04:	20001726 	beq	r4,zero,10008b64 <memmove+0x124>
10008b08:	2813883a 	mov	r9,r5
10008b0c:	180f883a 	mov	r7,r3
10008b10:	4a400104 	addi	r9,r9,4
10008b14:	39c00104 	addi	r7,r7,4
10008b18:	4abfff17 	ldw	r10,-4(r9)
10008b1c:	41c9c83a 	sub	r4,r8,r7
10008b20:	1909883a 	add	r4,r3,r4
10008b24:	3abfff15 	stw	r10,-4(r7)
10008b28:	21000128 	cmpgeui	r4,r4,4
10008b2c:	203ff81e 	bne	r4,zero,10008b10 <memmove+0xd0>
10008b30:	413fff04 	addi	r4,r8,-4
10008b34:	2008d0ba 	srli	r4,r4,2
10008b38:	318000cc 	andi	r6,r6,3
10008b3c:	21000044 	addi	r4,r4,1
10008b40:	200890ba 	slli	r4,r4,2
10008b44:	1907883a 	add	r3,r3,r4
10008b48:	290b883a 	add	r5,r5,r4
10008b4c:	003fcb06 	br	10008a7c <memmove+0x3c>
10008b50:	f800283a 	ret
10008b54:	31ffffc4 	addi	r7,r6,-1
10008b58:	1007883a 	mov	r3,r2
10008b5c:	003fc906 	br	10008a84 <memmove+0x44>
10008b60:	f800283a 	ret
10008b64:	400d883a 	mov	r6,r8
10008b68:	003fc406 	br	10008a7c <memmove+0x3c>

10008b6c <memset>:
10008b6c:	20c000cc 	andi	r3,r4,3
10008b70:	2005883a 	mov	r2,r4
10008b74:	18003626 	beq	r3,zero,10008c50 <memset+0xe4>
10008b78:	31ffffc4 	addi	r7,r6,-1
10008b7c:	30003326 	beq	r6,zero,10008c4c <memset+0xe0>
10008b80:	2811883a 	mov	r8,r5
10008b84:	2007883a 	mov	r3,r4
10008b88:	00000306 	br	10008b98 <memset+0x2c>
10008b8c:	39ffffc4 	addi	r7,r7,-1
10008b90:	39bfffe0 	cmpeqi	r6,r7,-1
10008b94:	30002d1e 	bne	r6,zero,10008c4c <memset+0xe0>
10008b98:	18c00044 	addi	r3,r3,1
10008b9c:	1a3fffc5 	stb	r8,-1(r3)
10008ba0:	198000cc 	andi	r6,r3,3
10008ba4:	303ff91e 	bne	r6,zero,10008b8c <memset+0x20>
10008ba8:	39000130 	cmpltui	r4,r7,4
10008bac:	2000221e 	bne	r4,zero,10008c38 <memset+0xcc>
10008bb0:	29003fcc 	andi	r4,r5,255
10008bb4:	200c923a 	slli	r6,r4,8
10008bb8:	3a000430 	cmpltui	r8,r7,16
10008bbc:	3108b03a 	or	r4,r6,r4
10008bc0:	200c943a 	slli	r6,r4,16
10008bc4:	310cb03a 	or	r6,r6,r4
10008bc8:	40000e1e 	bne	r8,zero,10008c04 <memset+0x98>
10008bcc:	3a3ffc04 	addi	r8,r7,-16
10008bd0:	4010d13a 	srli	r8,r8,4
10008bd4:	42000044 	addi	r8,r8,1
10008bd8:	4010913a 	slli	r8,r8,4
10008bdc:	1a11883a 	add	r8,r3,r8
10008be0:	19800015 	stw	r6,0(r3)
10008be4:	19800115 	stw	r6,4(r3)
10008be8:	19800215 	stw	r6,8(r3)
10008bec:	18c00404 	addi	r3,r3,16
10008bf0:	19bfff15 	stw	r6,-4(r3)
10008bf4:	40fffa1e 	bne	r8,r3,10008be0 <memset+0x74>
10008bf8:	3900030c 	andi	r4,r7,12
10008bfc:	39c003cc 	andi	r7,r7,15
10008c00:	20000d26 	beq	r4,zero,10008c38 <memset+0xcc>
10008c04:	1809883a 	mov	r4,r3
10008c08:	21000104 	addi	r4,r4,4
10008c0c:	3911c83a 	sub	r8,r7,r4
10008c10:	1a11883a 	add	r8,r3,r8
10008c14:	21bfff15 	stw	r6,-4(r4)
10008c18:	42000128 	cmpgeui	r8,r8,4
10008c1c:	403ffa1e 	bne	r8,zero,10008c08 <memset+0x9c>
10008c20:	393fff04 	addi	r4,r7,-4
10008c24:	2008d0ba 	srli	r4,r4,2
10008c28:	39c000cc 	andi	r7,r7,3
10008c2c:	21000044 	addi	r4,r4,1
10008c30:	200890ba 	slli	r4,r4,2
10008c34:	1907883a 	add	r3,r3,r4
10008c38:	38000426 	beq	r7,zero,10008c4c <memset+0xe0>
10008c3c:	19cf883a 	add	r7,r3,r7
10008c40:	18c00044 	addi	r3,r3,1
10008c44:	197fffc5 	stb	r5,-1(r3)
10008c48:	38fffd1e 	bne	r7,r3,10008c40 <memset+0xd4>
10008c4c:	f800283a 	ret
10008c50:	2007883a 	mov	r3,r4
10008c54:	300f883a 	mov	r7,r6
10008c58:	003fd306 	br	10008ba8 <memset+0x3c>

10008c5c <_Balloc>:
10008c5c:	20801317 	ldw	r2,76(r4)
10008c60:	defffc04 	addi	sp,sp,-16
10008c64:	dc400115 	stw	r17,4(sp)
10008c68:	dc000015 	stw	r16,0(sp)
10008c6c:	dfc00315 	stw	ra,12(sp)
10008c70:	dc800215 	stw	r18,8(sp)
10008c74:	2021883a 	mov	r16,r4
10008c78:	2823883a 	mov	r17,r5
10008c7c:	10000e26 	beq	r2,zero,10008cb8 <_Balloc+0x5c>
10008c80:	880690ba 	slli	r3,r17,2
10008c84:	10c7883a 	add	r3,r2,r3
10008c88:	18800017 	ldw	r2,0(r3)
10008c8c:	10001126 	beq	r2,zero,10008cd4 <_Balloc+0x78>
10008c90:	11000017 	ldw	r4,0(r2)
10008c94:	19000015 	stw	r4,0(r3)
10008c98:	10000415 	stw	zero,16(r2)
10008c9c:	10000315 	stw	zero,12(r2)
10008ca0:	dfc00317 	ldw	ra,12(sp)
10008ca4:	dc800217 	ldw	r18,8(sp)
10008ca8:	dc400117 	ldw	r17,4(sp)
10008cac:	dc000017 	ldw	r16,0(sp)
10008cb0:	dec00404 	addi	sp,sp,16
10008cb4:	f800283a 	ret
10008cb8:	01800844 	movi	r6,33
10008cbc:	01400104 	movi	r5,4
10008cc0:	000b9280 	call	1000b928 <_calloc_r>
10008cc4:	80801315 	stw	r2,76(r16)
10008cc8:	103fed1e 	bne	r2,zero,10008c80 <_Balloc+0x24>
10008ccc:	0005883a 	mov	r2,zero
10008cd0:	003ff306 	br	10008ca0 <_Balloc+0x44>
10008cd4:	04800044 	movi	r18,1
10008cd8:	9464983a 	sll	r18,r18,r17
10008cdc:	01400044 	movi	r5,1
10008ce0:	8009883a 	mov	r4,r16
10008ce4:	91800144 	addi	r6,r18,5
10008ce8:	300c90ba 	slli	r6,r6,2
10008cec:	000b9280 	call	1000b928 <_calloc_r>
10008cf0:	103ff626 	beq	r2,zero,10008ccc <_Balloc+0x70>
10008cf4:	14400115 	stw	r17,4(r2)
10008cf8:	14800215 	stw	r18,8(r2)
10008cfc:	003fe606 	br	10008c98 <_Balloc+0x3c>

10008d00 <_Bfree>:
10008d00:	28000726 	beq	r5,zero,10008d20 <_Bfree+0x20>
10008d04:	28c00117 	ldw	r3,4(r5)
10008d08:	20801317 	ldw	r2,76(r4)
10008d0c:	180690ba 	slli	r3,r3,2
10008d10:	10c5883a 	add	r2,r2,r3
10008d14:	10c00017 	ldw	r3,0(r2)
10008d18:	28c00015 	stw	r3,0(r5)
10008d1c:	11400015 	stw	r5,0(r2)
10008d20:	f800283a 	ret

10008d24 <__multadd>:
10008d24:	defffa04 	addi	sp,sp,-24
10008d28:	dc800315 	stw	r18,12(sp)
10008d2c:	dc400215 	stw	r17,8(sp)
10008d30:	dc000115 	stw	r16,4(sp)
10008d34:	2823883a 	mov	r17,r5
10008d38:	2c000417 	ldw	r16,16(r5)
10008d3c:	2025883a 	mov	r18,r4
10008d40:	dfc00515 	stw	ra,20(sp)
10008d44:	29000504 	addi	r4,r5,20
10008d48:	dcc00415 	stw	r19,16(sp)
10008d4c:	000b883a 	mov	r5,zero
10008d50:	20800017 	ldw	r2,0(r4)
10008d54:	21000104 	addi	r4,r4,4
10008d58:	29400044 	addi	r5,r5,1
10008d5c:	10ffffcc 	andi	r3,r2,65535
10008d60:	1987383a 	mul	r3,r3,r6
10008d64:	1004d43a 	srli	r2,r2,16
10008d68:	19cf883a 	add	r7,r3,r7
10008d6c:	1185383a 	mul	r2,r2,r6
10008d70:	3810d43a 	srli	r8,r7,16
10008d74:	38ffffcc 	andi	r3,r7,65535
10008d78:	120f883a 	add	r7,r2,r8
10008d7c:	3804943a 	slli	r2,r7,16
10008d80:	380ed43a 	srli	r7,r7,16
10008d84:	10c7883a 	add	r3,r2,r3
10008d88:	20ffff15 	stw	r3,-4(r4)
10008d8c:	2c3ff016 	blt	r5,r16,10008d50 <__multadd+0x2c>
10008d90:	38000826 	beq	r7,zero,10008db4 <__multadd+0x90>
10008d94:	88800217 	ldw	r2,8(r17)
10008d98:	80800e0e 	bge	r16,r2,10008dd4 <__multadd+0xb0>
10008d9c:	80800144 	addi	r2,r16,5
10008da0:	100490ba 	slli	r2,r2,2
10008da4:	84000044 	addi	r16,r16,1
10008da8:	8885883a 	add	r2,r17,r2
10008dac:	11c00015 	stw	r7,0(r2)
10008db0:	8c000415 	stw	r16,16(r17)
10008db4:	8805883a 	mov	r2,r17
10008db8:	dfc00517 	ldw	ra,20(sp)
10008dbc:	dcc00417 	ldw	r19,16(sp)
10008dc0:	dc800317 	ldw	r18,12(sp)
10008dc4:	dc400217 	ldw	r17,8(sp)
10008dc8:	dc000117 	ldw	r16,4(sp)
10008dcc:	dec00604 	addi	sp,sp,24
10008dd0:	f800283a 	ret
10008dd4:	89400117 	ldw	r5,4(r17)
10008dd8:	9009883a 	mov	r4,r18
10008ddc:	d9c00015 	stw	r7,0(sp)
10008de0:	29400044 	addi	r5,r5,1
10008de4:	0008c5c0 	call	10008c5c <_Balloc>
10008de8:	89800417 	ldw	r6,16(r17)
10008dec:	89400304 	addi	r5,r17,12
10008df0:	11000304 	addi	r4,r2,12
10008df4:	31800084 	addi	r6,r6,2
10008df8:	300c90ba 	slli	r6,r6,2
10008dfc:	1027883a 	mov	r19,r2
10008e00:	0002ffc0 	call	10002ffc <memcpy>
10008e04:	d9c00017 	ldw	r7,0(sp)
10008e08:	88000926 	beq	r17,zero,10008e30 <__multadd+0x10c>
10008e0c:	88c00117 	ldw	r3,4(r17)
10008e10:	90801317 	ldw	r2,76(r18)
10008e14:	180690ba 	slli	r3,r3,2
10008e18:	10c5883a 	add	r2,r2,r3
10008e1c:	10c00017 	ldw	r3,0(r2)
10008e20:	88c00015 	stw	r3,0(r17)
10008e24:	14400015 	stw	r17,0(r2)
10008e28:	9823883a 	mov	r17,r19
10008e2c:	003fdb06 	br	10008d9c <__multadd+0x78>
10008e30:	9823883a 	mov	r17,r19
10008e34:	003fd906 	br	10008d9c <__multadd+0x78>

10008e38 <__s2b>:
10008e38:	defff904 	addi	sp,sp,-28
10008e3c:	dc800215 	stw	r18,8(sp)
10008e40:	dc000015 	stw	r16,0(sp)
10008e44:	2025883a 	mov	r18,r4
10008e48:	2821883a 	mov	r16,r5
10008e4c:	39000204 	addi	r4,r7,8
10008e50:	01400244 	movi	r5,9
10008e54:	dcc00315 	stw	r19,12(sp)
10008e58:	dc400115 	stw	r17,4(sp)
10008e5c:	dfc00615 	stw	ra,24(sp)
10008e60:	3823883a 	mov	r17,r7
10008e64:	dd400515 	stw	r21,20(sp)
10008e68:	dd000415 	stw	r20,16(sp)
10008e6c:	3027883a 	mov	r19,r6
10008e70:	000cd700 	call	1000cd70 <__divsi3>
10008e74:	88c00290 	cmplti	r3,r17,10
10008e78:	1800311e 	bne	r3,zero,10008f40 <__s2b+0x108>
10008e7c:	00c00044 	movi	r3,1
10008e80:	000b883a 	mov	r5,zero
10008e84:	18c7883a 	add	r3,r3,r3
10008e88:	29400044 	addi	r5,r5,1
10008e8c:	18bffd16 	blt	r3,r2,10008e84 <__s2b+0x4c>
10008e90:	9009883a 	mov	r4,r18
10008e94:	0008c5c0 	call	10008c5c <_Balloc>
10008e98:	d8c00717 	ldw	r3,28(sp)
10008e9c:	10c00515 	stw	r3,20(r2)
10008ea0:	00c00044 	movi	r3,1
10008ea4:	10c00415 	stw	r3,16(r2)
10008ea8:	98c00290 	cmplti	r3,r19,10
10008eac:	1800211e 	bne	r3,zero,10008f34 <__s2b+0xfc>
10008eb0:	85400244 	addi	r21,r16,9
10008eb4:	84e9883a 	add	r20,r16,r19
10008eb8:	a821883a 	mov	r16,r21
10008ebc:	84000044 	addi	r16,r16,1
10008ec0:	81ffffc7 	ldb	r7,-1(r16)
10008ec4:	01800284 	movi	r6,10
10008ec8:	100b883a 	mov	r5,r2
10008ecc:	39fff404 	addi	r7,r7,-48
10008ed0:	9009883a 	mov	r4,r18
10008ed4:	0008d240 	call	10008d24 <__multadd>
10008ed8:	a43ff81e 	bne	r20,r16,10008ebc <__s2b+0x84>
10008edc:	9c3ffe04 	addi	r16,r19,-8
10008ee0:	ac21883a 	add	r16,r21,r16
10008ee4:	9c400a0e 	bge	r19,r17,10008f10 <__s2b+0xd8>
10008ee8:	8ce3c83a 	sub	r17,r17,r19
10008eec:	8463883a 	add	r17,r16,r17
10008ef0:	84000044 	addi	r16,r16,1
10008ef4:	81ffffc7 	ldb	r7,-1(r16)
10008ef8:	01800284 	movi	r6,10
10008efc:	100b883a 	mov	r5,r2
10008f00:	39fff404 	addi	r7,r7,-48
10008f04:	9009883a 	mov	r4,r18
10008f08:	0008d240 	call	10008d24 <__multadd>
10008f0c:	8c3ff81e 	bne	r17,r16,10008ef0 <__s2b+0xb8>
10008f10:	dfc00617 	ldw	ra,24(sp)
10008f14:	dd400517 	ldw	r21,20(sp)
10008f18:	dd000417 	ldw	r20,16(sp)
10008f1c:	dcc00317 	ldw	r19,12(sp)
10008f20:	dc800217 	ldw	r18,8(sp)
10008f24:	dc400117 	ldw	r17,4(sp)
10008f28:	dc000017 	ldw	r16,0(sp)
10008f2c:	dec00704 	addi	sp,sp,28
10008f30:	f800283a 	ret
10008f34:	84000284 	addi	r16,r16,10
10008f38:	04c00244 	movi	r19,9
10008f3c:	003fe906 	br	10008ee4 <__s2b+0xac>
10008f40:	000b883a 	mov	r5,zero
10008f44:	003fd206 	br	10008e90 <__s2b+0x58>

10008f48 <__hi0bits>:
10008f48:	20bfffec 	andhi	r2,r4,65535
10008f4c:	1000131e 	bne	r2,zero,10008f9c <__hi0bits+0x54>
10008f50:	2008943a 	slli	r4,r4,16
10008f54:	00800404 	movi	r2,16
10008f58:	20ffc02c 	andhi	r3,r4,65280
10008f5c:	1800021e 	bne	r3,zero,10008f68 <__hi0bits+0x20>
10008f60:	2008923a 	slli	r4,r4,8
10008f64:	10800204 	addi	r2,r2,8
10008f68:	20fc002c 	andhi	r3,r4,61440
10008f6c:	1800021e 	bne	r3,zero,10008f78 <__hi0bits+0x30>
10008f70:	2008913a 	slli	r4,r4,4
10008f74:	10800104 	addi	r2,r2,4
10008f78:	20f0002c 	andhi	r3,r4,49152
10008f7c:	1800021e 	bne	r3,zero,10008f88 <__hi0bits+0x40>
10008f80:	200890ba 	slli	r4,r4,2
10008f84:	10800084 	addi	r2,r2,2
10008f88:	20000316 	blt	r4,zero,10008f98 <__hi0bits+0x50>
10008f8c:	2110002c 	andhi	r4,r4,16384
10008f90:	10800044 	addi	r2,r2,1
10008f94:	20000326 	beq	r4,zero,10008fa4 <__hi0bits+0x5c>
10008f98:	f800283a 	ret
10008f9c:	0005883a 	mov	r2,zero
10008fa0:	003fed06 	br	10008f58 <__hi0bits+0x10>
10008fa4:	00800804 	movi	r2,32
10008fa8:	f800283a 	ret

10008fac <__lo0bits>:
10008fac:	20c00017 	ldw	r3,0(r4)
10008fb0:	188001cc 	andi	r2,r3,7
10008fb4:	10000826 	beq	r2,zero,10008fd8 <__lo0bits+0x2c>
10008fb8:	1880004c 	andi	r2,r3,1
10008fbc:	10001f1e 	bne	r2,zero,1000903c <__lo0bits+0x90>
10008fc0:	1880008c 	andi	r2,r3,2
10008fc4:	10002126 	beq	r2,zero,1000904c <__lo0bits+0xa0>
10008fc8:	1806d07a 	srli	r3,r3,1
10008fcc:	00800044 	movi	r2,1
10008fd0:	20c00015 	stw	r3,0(r4)
10008fd4:	f800283a 	ret
10008fd8:	18bfffcc 	andi	r2,r3,65535
10008fdc:	1000151e 	bne	r2,zero,10009034 <__lo0bits+0x88>
10008fe0:	1806d43a 	srli	r3,r3,16
10008fe4:	00800404 	movi	r2,16
10008fe8:	19403fcc 	andi	r5,r3,255
10008fec:	2800021e 	bne	r5,zero,10008ff8 <__lo0bits+0x4c>
10008ff0:	1806d23a 	srli	r3,r3,8
10008ff4:	10800204 	addi	r2,r2,8
10008ff8:	194003cc 	andi	r5,r3,15
10008ffc:	2800021e 	bne	r5,zero,10009008 <__lo0bits+0x5c>
10009000:	1806d13a 	srli	r3,r3,4
10009004:	10800104 	addi	r2,r2,4
10009008:	194000cc 	andi	r5,r3,3
1000900c:	2800021e 	bne	r5,zero,10009018 <__lo0bits+0x6c>
10009010:	1806d0ba 	srli	r3,r3,2
10009014:	10800084 	addi	r2,r2,2
10009018:	1940004c 	andi	r5,r3,1
1000901c:	2800031e 	bne	r5,zero,1000902c <__lo0bits+0x80>
10009020:	1806d07a 	srli	r3,r3,1
10009024:	10800044 	addi	r2,r2,1
10009028:	18000626 	beq	r3,zero,10009044 <__lo0bits+0x98>
1000902c:	20c00015 	stw	r3,0(r4)
10009030:	f800283a 	ret
10009034:	0005883a 	mov	r2,zero
10009038:	003feb06 	br	10008fe8 <__lo0bits+0x3c>
1000903c:	0005883a 	mov	r2,zero
10009040:	f800283a 	ret
10009044:	00800804 	movi	r2,32
10009048:	f800283a 	ret
1000904c:	1806d0ba 	srli	r3,r3,2
10009050:	00800084 	movi	r2,2
10009054:	20c00015 	stw	r3,0(r4)
10009058:	f800283a 	ret

1000905c <__i2b>:
1000905c:	defffe04 	addi	sp,sp,-8
10009060:	dc000015 	stw	r16,0(sp)
10009064:	2821883a 	mov	r16,r5
10009068:	01400044 	movi	r5,1
1000906c:	dfc00115 	stw	ra,4(sp)
10009070:	0008c5c0 	call	10008c5c <_Balloc>
10009074:	01000044 	movi	r4,1
10009078:	14000515 	stw	r16,20(r2)
1000907c:	11000415 	stw	r4,16(r2)
10009080:	dfc00117 	ldw	ra,4(sp)
10009084:	dc000017 	ldw	r16,0(sp)
10009088:	dec00204 	addi	sp,sp,8
1000908c:	f800283a 	ret

10009090 <__multiply>:
10009090:	defffa04 	addi	sp,sp,-24
10009094:	dd000415 	stw	r20,16(sp)
10009098:	dcc00315 	stw	r19,12(sp)
1000909c:	35000417 	ldw	r20,16(r6)
100090a0:	2cc00417 	ldw	r19,16(r5)
100090a4:	dc800215 	stw	r18,8(sp)
100090a8:	dc400115 	stw	r17,4(sp)
100090ac:	dfc00515 	stw	ra,20(sp)
100090b0:	dc000015 	stw	r16,0(sp)
100090b4:	2823883a 	mov	r17,r5
100090b8:	3025883a 	mov	r18,r6
100090bc:	9d000516 	blt	r19,r20,100090d4 <__multiply+0x44>
100090c0:	a007883a 	mov	r3,r20
100090c4:	2825883a 	mov	r18,r5
100090c8:	9829883a 	mov	r20,r19
100090cc:	3023883a 	mov	r17,r6
100090d0:	1827883a 	mov	r19,r3
100090d4:	90800217 	ldw	r2,8(r18)
100090d8:	a4e1883a 	add	r16,r20,r19
100090dc:	91400117 	ldw	r5,4(r18)
100090e0:	1400010e 	bge	r2,r16,100090e8 <__multiply+0x58>
100090e4:	29400044 	addi	r5,r5,1
100090e8:	0008c5c0 	call	10008c5c <_Balloc>
100090ec:	801290ba 	slli	r9,r16,2
100090f0:	12800504 	addi	r10,r2,20
100090f4:	5007883a 	mov	r3,r10
100090f8:	5253883a 	add	r9,r10,r9
100090fc:	5240032e 	bgeu	r10,r9,1000910c <__multiply+0x7c>
10009100:	18000015 	stw	zero,0(r3)
10009104:	18c00104 	addi	r3,r3,4
10009108:	1a7ffd36 	bltu	r3,r9,10009100 <__multiply+0x70>
1000910c:	981690ba 	slli	r11,r19,2
10009110:	a01090ba 	slli	r8,r20,2
10009114:	89400504 	addi	r5,r17,20
10009118:	91800504 	addi	r6,r18,20
1000911c:	2ad7883a 	add	r11,r5,r11
10009120:	3211883a 	add	r8,r6,r8
10009124:	2ac00636 	bltu	r5,r11,10009140 <__multiply+0xb0>
10009128:	00004106 	br	10009230 <__multiply+0x1a0>
1000912c:	701cd43a 	srli	r14,r14,16
10009130:	7000221e 	bne	r14,zero,100091bc <__multiply+0x12c>
10009134:	29400104 	addi	r5,r5,4
10009138:	52800104 	addi	r10,r10,4
1000913c:	2ac03c2e 	bgeu	r5,r11,10009230 <__multiply+0x1a0>
10009140:	2b800017 	ldw	r14,0(r5)
10009144:	73ffffcc 	andi	r15,r14,65535
10009148:	783ff826 	beq	r15,zero,1000912c <__multiply+0x9c>
1000914c:	501b883a 	mov	r13,r10
10009150:	301d883a 	mov	r14,r6
10009154:	003f883a 	mov	ra,zero
10009158:	71000017 	ldw	r4,0(r14)
1000915c:	6b000017 	ldw	r12,0(r13)
10009160:	6b400104 	addi	r13,r13,4
10009164:	21ffffcc 	andi	r7,r4,65535
10009168:	3bcf383a 	mul	r7,r7,r15
1000916c:	2006d43a 	srli	r3,r4,16
10009170:	613fffcc 	andi	r4,r12,65535
10009174:	390f883a 	add	r7,r7,r4
10009178:	3fcf883a 	add	r7,r7,ra
1000917c:	1bc7383a 	mul	r3,r3,r15
10009180:	6018d43a 	srli	r12,r12,16
10009184:	3808d43a 	srli	r4,r7,16
10009188:	39ffffcc 	andi	r7,r7,65535
1000918c:	1b07883a 	add	r3,r3,r12
10009190:	1907883a 	add	r3,r3,r4
10009194:	1808943a 	slli	r4,r3,16
10009198:	73800104 	addi	r14,r14,4
1000919c:	183ed43a 	srli	ra,r3,16
100091a0:	21ceb03a 	or	r7,r4,r7
100091a4:	69ffff15 	stw	r7,-4(r13)
100091a8:	723feb36 	bltu	r14,r8,10009158 <__multiply+0xc8>
100091ac:	6fc00015 	stw	ra,0(r13)
100091b0:	2b800017 	ldw	r14,0(r5)
100091b4:	701cd43a 	srli	r14,r14,16
100091b8:	703fde26 	beq	r14,zero,10009134 <__multiply+0xa4>
100091bc:	50c00017 	ldw	r3,0(r10)
100091c0:	501b883a 	mov	r13,r10
100091c4:	3019883a 	mov	r12,r6
100091c8:	180f883a 	mov	r7,r3
100091cc:	001f883a 	mov	r15,zero
100091d0:	6100000b 	ldhu	r4,0(r12)
100091d4:	380ed43a 	srli	r7,r7,16
100091d8:	18ffffcc 	andi	r3,r3,65535
100091dc:	2389383a 	mul	r4,r4,r14
100091e0:	6b400104 	addi	r13,r13,4
100091e4:	63000104 	addi	r12,r12,4
100091e8:	21c9883a 	add	r4,r4,r7
100091ec:	23c9883a 	add	r4,r4,r15
100091f0:	201e943a 	slli	r15,r4,16
100091f4:	69c00017 	ldw	r7,0(r13)
100091f8:	2008d43a 	srli	r4,r4,16
100091fc:	78c6b03a 	or	r3,r15,r3
10009200:	68ffff15 	stw	r3,-4(r13)
10009204:	60ffff8b 	ldhu	r3,-2(r12)
10009208:	3bffffcc 	andi	r15,r7,65535
1000920c:	1b87383a 	mul	r3,r3,r14
10009210:	1bc7883a 	add	r3,r3,r15
10009214:	1907883a 	add	r3,r3,r4
10009218:	181ed43a 	srli	r15,r3,16
1000921c:	623fec36 	bltu	r12,r8,100091d0 <__multiply+0x140>
10009220:	68c00015 	stw	r3,0(r13)
10009224:	29400104 	addi	r5,r5,4
10009228:	52800104 	addi	r10,r10,4
1000922c:	2affc436 	bltu	r5,r11,10009140 <__multiply+0xb0>
10009230:	0400090e 	bge	zero,r16,10009258 <__multiply+0x1c8>
10009234:	48ffff17 	ldw	r3,-4(r9)
10009238:	4a7fff04 	addi	r9,r9,-4
1000923c:	18000326 	beq	r3,zero,1000924c <__multiply+0x1bc>
10009240:	00000506 	br	10009258 <__multiply+0x1c8>
10009244:	48c00017 	ldw	r3,0(r9)
10009248:	1800031e 	bne	r3,zero,10009258 <__multiply+0x1c8>
1000924c:	843fffc4 	addi	r16,r16,-1
10009250:	4a7fff04 	addi	r9,r9,-4
10009254:	803ffb1e 	bne	r16,zero,10009244 <__multiply+0x1b4>
10009258:	14000415 	stw	r16,16(r2)
1000925c:	dfc00517 	ldw	ra,20(sp)
10009260:	dd000417 	ldw	r20,16(sp)
10009264:	dcc00317 	ldw	r19,12(sp)
10009268:	dc800217 	ldw	r18,8(sp)
1000926c:	dc400117 	ldw	r17,4(sp)
10009270:	dc000017 	ldw	r16,0(sp)
10009274:	dec00604 	addi	sp,sp,24
10009278:	f800283a 	ret

1000927c <__pow5mult>:
1000927c:	defffb04 	addi	sp,sp,-20
10009280:	dcc00315 	stw	r19,12(sp)
10009284:	dc000015 	stw	r16,0(sp)
10009288:	dfc00415 	stw	ra,16(sp)
1000928c:	dc800215 	stw	r18,8(sp)
10009290:	dc400115 	stw	r17,4(sp)
10009294:	308000cc 	andi	r2,r6,3
10009298:	3021883a 	mov	r16,r6
1000929c:	2027883a 	mov	r19,r4
100092a0:	10002d1e 	bne	r2,zero,10009358 <__pow5mult+0xdc>
100092a4:	2825883a 	mov	r18,r5
100092a8:	8021d0ba 	srai	r16,r16,2
100092ac:	80001926 	beq	r16,zero,10009314 <__pow5mult+0x98>
100092b0:	9c401217 	ldw	r17,72(r19)
100092b4:	8800061e 	bne	r17,zero,100092d0 <__pow5mult+0x54>
100092b8:	00002f06 	br	10009378 <__pow5mult+0xfc>
100092bc:	8021d07a 	srai	r16,r16,1
100092c0:	80001426 	beq	r16,zero,10009314 <__pow5mult+0x98>
100092c4:	88800017 	ldw	r2,0(r17)
100092c8:	10001a26 	beq	r2,zero,10009334 <__pow5mult+0xb8>
100092cc:	1023883a 	mov	r17,r2
100092d0:	8080004c 	andi	r2,r16,1
100092d4:	103ff926 	beq	r2,zero,100092bc <__pow5mult+0x40>
100092d8:	880d883a 	mov	r6,r17
100092dc:	900b883a 	mov	r5,r18
100092e0:	9809883a 	mov	r4,r19
100092e4:	00090900 	call	10009090 <__multiply>
100092e8:	90001926 	beq	r18,zero,10009350 <__pow5mult+0xd4>
100092ec:	91000117 	ldw	r4,4(r18)
100092f0:	98c01317 	ldw	r3,76(r19)
100092f4:	8021d07a 	srai	r16,r16,1
100092f8:	200890ba 	slli	r4,r4,2
100092fc:	1907883a 	add	r3,r3,r4
10009300:	19000017 	ldw	r4,0(r3)
10009304:	91000015 	stw	r4,0(r18)
10009308:	1c800015 	stw	r18,0(r3)
1000930c:	1025883a 	mov	r18,r2
10009310:	803fec1e 	bne	r16,zero,100092c4 <__pow5mult+0x48>
10009314:	9005883a 	mov	r2,r18
10009318:	dfc00417 	ldw	ra,16(sp)
1000931c:	dcc00317 	ldw	r19,12(sp)
10009320:	dc800217 	ldw	r18,8(sp)
10009324:	dc400117 	ldw	r17,4(sp)
10009328:	dc000017 	ldw	r16,0(sp)
1000932c:	dec00504 	addi	sp,sp,20
10009330:	f800283a 	ret
10009334:	880d883a 	mov	r6,r17
10009338:	880b883a 	mov	r5,r17
1000933c:	9809883a 	mov	r4,r19
10009340:	00090900 	call	10009090 <__multiply>
10009344:	88800015 	stw	r2,0(r17)
10009348:	10000015 	stw	zero,0(r2)
1000934c:	003fdf06 	br	100092cc <__pow5mult+0x50>
10009350:	1025883a 	mov	r18,r2
10009354:	003fd906 	br	100092bc <__pow5mult+0x40>
10009358:	100490ba 	slli	r2,r2,2
1000935c:	00c40074 	movhi	r3,4097
10009360:	000f883a 	mov	r7,zero
10009364:	10c7883a 	add	r3,r2,r3
10009368:	198a1017 	ldw	r6,10304(r3)
1000936c:	0008d240 	call	10008d24 <__multadd>
10009370:	1025883a 	mov	r18,r2
10009374:	003fcc06 	br	100092a8 <__pow5mult+0x2c>
10009378:	01400044 	movi	r5,1
1000937c:	9809883a 	mov	r4,r19
10009380:	0008c5c0 	call	10008c5c <_Balloc>
10009384:	1023883a 	mov	r17,r2
10009388:	00809c44 	movi	r2,625
1000938c:	88800515 	stw	r2,20(r17)
10009390:	00800044 	movi	r2,1
10009394:	88800415 	stw	r2,16(r17)
10009398:	9c401215 	stw	r17,72(r19)
1000939c:	88000015 	stw	zero,0(r17)
100093a0:	003fcb06 	br	100092d0 <__pow5mult+0x54>

100093a4 <__lshift>:
100093a4:	defff904 	addi	sp,sp,-28
100093a8:	dcc00315 	stw	r19,12(sp)
100093ac:	dc400115 	stw	r17,4(sp)
100093b0:	2cc00417 	ldw	r19,16(r5)
100093b4:	3023d17a 	srai	r17,r6,5
100093b8:	28800217 	ldw	r2,8(r5)
100093bc:	dd400515 	stw	r21,20(sp)
100093c0:	8ce7883a 	add	r19,r17,r19
100093c4:	dd000415 	stw	r20,16(sp)
100093c8:	dc800215 	stw	r18,8(sp)
100093cc:	dc000015 	stw	r16,0(sp)
100093d0:	dfc00615 	stw	ra,24(sp)
100093d4:	9c000044 	addi	r16,r19,1
100093d8:	2825883a 	mov	r18,r5
100093dc:	302b883a 	mov	r21,r6
100093e0:	2029883a 	mov	r20,r4
100093e4:	29400117 	ldw	r5,4(r5)
100093e8:	1400030e 	bge	r2,r16,100093f8 <__lshift+0x54>
100093ec:	1085883a 	add	r2,r2,r2
100093f0:	29400044 	addi	r5,r5,1
100093f4:	143ffd16 	blt	r2,r16,100093ec <__lshift+0x48>
100093f8:	a009883a 	mov	r4,r20
100093fc:	0008c5c0 	call	10008c5c <_Balloc>
10009400:	11000504 	addi	r4,r2,20
10009404:	0440090e 	bge	zero,r17,1000942c <__lshift+0x88>
10009408:	8c400144 	addi	r17,r17,5
1000940c:	882290ba 	slli	r17,r17,2
10009410:	2007883a 	mov	r3,r4
10009414:	144b883a 	add	r5,r2,r17
10009418:	18c00104 	addi	r3,r3,4
1000941c:	183fff15 	stw	zero,-4(r3)
10009420:	28fffd1e 	bne	r5,r3,10009418 <__lshift+0x74>
10009424:	8c7ffb04 	addi	r17,r17,-20
10009428:	2449883a 	add	r4,r4,r17
1000942c:	92000417 	ldw	r8,16(r18)
10009430:	90c00504 	addi	r3,r18,20
10009434:	a98007cc 	andi	r6,r21,31
10009438:	401090ba 	slli	r8,r8,2
1000943c:	1a11883a 	add	r8,r3,r8
10009440:	30002126 	beq	r6,zero,100094c8 <__lshift+0x124>
10009444:	02400804 	movi	r9,32
10009448:	4993c83a 	sub	r9,r9,r6
1000944c:	000f883a 	mov	r7,zero
10009450:	19400017 	ldw	r5,0(r3)
10009454:	21000104 	addi	r4,r4,4
10009458:	18c00104 	addi	r3,r3,4
1000945c:	298a983a 	sll	r5,r5,r6
10009460:	29cab03a 	or	r5,r5,r7
10009464:	217fff15 	stw	r5,-4(r4)
10009468:	197fff17 	ldw	r5,-4(r3)
1000946c:	2a4ed83a 	srl	r7,r5,r9
10009470:	1a3ff736 	bltu	r3,r8,10009450 <__lshift+0xac>
10009474:	21c00015 	stw	r7,0(r4)
10009478:	38000126 	beq	r7,zero,10009480 <__lshift+0xdc>
1000947c:	8027883a 	mov	r19,r16
10009480:	14c00415 	stw	r19,16(r2)
10009484:	90000726 	beq	r18,zero,100094a4 <__lshift+0x100>
10009488:	91000117 	ldw	r4,4(r18)
1000948c:	a0c01317 	ldw	r3,76(r20)
10009490:	200890ba 	slli	r4,r4,2
10009494:	1907883a 	add	r3,r3,r4
10009498:	19000017 	ldw	r4,0(r3)
1000949c:	91000015 	stw	r4,0(r18)
100094a0:	1c800015 	stw	r18,0(r3)
100094a4:	dfc00617 	ldw	ra,24(sp)
100094a8:	dd400517 	ldw	r21,20(sp)
100094ac:	dd000417 	ldw	r20,16(sp)
100094b0:	dcc00317 	ldw	r19,12(sp)
100094b4:	dc800217 	ldw	r18,8(sp)
100094b8:	dc400117 	ldw	r17,4(sp)
100094bc:	dc000017 	ldw	r16,0(sp)
100094c0:	dec00704 	addi	sp,sp,28
100094c4:	f800283a 	ret
100094c8:	18c00104 	addi	r3,r3,4
100094cc:	197fff17 	ldw	r5,-4(r3)
100094d0:	21000104 	addi	r4,r4,4
100094d4:	217fff15 	stw	r5,-4(r4)
100094d8:	1a3ffb36 	bltu	r3,r8,100094c8 <__lshift+0x124>
100094dc:	003fe806 	br	10009480 <__lshift+0xdc>

100094e0 <__mcmp>:
100094e0:	20800417 	ldw	r2,16(r4)
100094e4:	28c00417 	ldw	r3,16(r5)
100094e8:	10c5c83a 	sub	r2,r2,r3
100094ec:	10000e1e 	bne	r2,zero,10009528 <__mcmp+0x48>
100094f0:	180c90ba 	slli	r6,r3,2
100094f4:	21000504 	addi	r4,r4,20
100094f8:	29400504 	addi	r5,r5,20
100094fc:	2187883a 	add	r3,r4,r6
10009500:	298b883a 	add	r5,r5,r6
10009504:	00000106 	br	1000950c <__mcmp+0x2c>
10009508:	20c0082e 	bgeu	r4,r3,1000952c <__mcmp+0x4c>
1000950c:	18ffff04 	addi	r3,r3,-4
10009510:	297fff04 	addi	r5,r5,-4
10009514:	19c00017 	ldw	r7,0(r3)
10009518:	29800017 	ldw	r6,0(r5)
1000951c:	39bffa26 	beq	r7,r6,10009508 <__mcmp+0x28>
10009520:	3980032e 	bgeu	r7,r6,10009530 <__mcmp+0x50>
10009524:	00bfffc4 	movi	r2,-1
10009528:	f800283a 	ret
1000952c:	f800283a 	ret
10009530:	00800044 	movi	r2,1
10009534:	f800283a 	ret

10009538 <__mdiff>:
10009538:	defffa04 	addi	sp,sp,-24
1000953c:	dc800215 	stw	r18,8(sp)
10009540:	30c00417 	ldw	r3,16(r6)
10009544:	2c800417 	ldw	r18,16(r5)
10009548:	dd000415 	stw	r20,16(sp)
1000954c:	dcc00315 	stw	r19,12(sp)
10009550:	dc400115 	stw	r17,4(sp)
10009554:	dc000015 	stw	r16,0(sp)
10009558:	dfc00515 	stw	ra,20(sp)
1000955c:	90e5c83a 	sub	r18,r18,r3
10009560:	2827883a 	mov	r19,r5
10009564:	3029883a 	mov	r20,r6
10009568:	2c000504 	addi	r16,r5,20
1000956c:	34400504 	addi	r17,r6,20
10009570:	9000131e 	bne	r18,zero,100095c0 <__mdiff+0x88>
10009574:	180690ba 	slli	r3,r3,2
10009578:	80c5883a 	add	r2,r16,r3
1000957c:	88c7883a 	add	r3,r17,r3
10009580:	00000106 	br	10009588 <__mdiff+0x50>
10009584:	8080552e 	bgeu	r16,r2,100096dc <__mdiff+0x1a4>
10009588:	10bfff04 	addi	r2,r2,-4
1000958c:	18ffff04 	addi	r3,r3,-4
10009590:	11c00017 	ldw	r7,0(r2)
10009594:	19400017 	ldw	r5,0(r3)
10009598:	397ffa26 	beq	r7,r5,10009584 <__mdiff+0x4c>
1000959c:	39400a2e 	bgeu	r7,r5,100095c8 <__mdiff+0x90>
100095a0:	8007883a 	mov	r3,r16
100095a4:	9805883a 	mov	r2,r19
100095a8:	8821883a 	mov	r16,r17
100095ac:	a027883a 	mov	r19,r20
100095b0:	1823883a 	mov	r17,r3
100095b4:	1029883a 	mov	r20,r2
100095b8:	04800044 	movi	r18,1
100095bc:	00000206 	br	100095c8 <__mdiff+0x90>
100095c0:	903ff716 	blt	r18,zero,100095a0 <__mdiff+0x68>
100095c4:	0025883a 	mov	r18,zero
100095c8:	99400117 	ldw	r5,4(r19)
100095cc:	0008c5c0 	call	10008c5c <_Balloc>
100095d0:	9a400417 	ldw	r9,16(r19)
100095d4:	a2c00417 	ldw	r11,16(r20)
100095d8:	12800504 	addi	r10,r2,20
100095dc:	481090ba 	slli	r8,r9,2
100095e0:	581690ba 	slli	r11,r11,2
100095e4:	14800315 	stw	r18,12(r2)
100095e8:	8211883a 	add	r8,r16,r8
100095ec:	8ad7883a 	add	r11,r17,r11
100095f0:	0007883a 	mov	r3,zero
100095f4:	00000106 	br	100095fc <__mdiff+0xc4>
100095f8:	3815883a 	mov	r10,r7
100095fc:	81000017 	ldw	r4,0(r16)
10009600:	89800017 	ldw	r6,0(r17)
10009604:	51c00104 	addi	r7,r10,4
10009608:	217fffcc 	andi	r5,r4,65535
1000960c:	28cb883a 	add	r5,r5,r3
10009610:	30ffffcc 	andi	r3,r6,65535
10009614:	28cbc83a 	sub	r5,r5,r3
10009618:	300cd43a 	srli	r6,r6,16
1000961c:	2006d43a 	srli	r3,r4,16
10009620:	2809d43a 	srai	r4,r5,16
10009624:	297fffcc 	andi	r5,r5,65535
10009628:	1987c83a 	sub	r3,r3,r6
1000962c:	1907883a 	add	r3,r3,r4
10009630:	1808943a 	slli	r4,r3,16
10009634:	8c400104 	addi	r17,r17,4
10009638:	84000104 	addi	r16,r16,4
1000963c:	214ab03a 	or	r5,r4,r5
10009640:	397fff15 	stw	r5,-4(r7)
10009644:	1807d43a 	srai	r3,r3,16
10009648:	8affeb36 	bltu	r17,r11,100095f8 <__mdiff+0xc0>
1000964c:	8200152e 	bgeu	r16,r8,100096a4 <__mdiff+0x16c>
10009650:	3815883a 	mov	r10,r7
10009654:	800d883a 	mov	r6,r16
10009658:	31000017 	ldw	r4,0(r6)
1000965c:	52800104 	addi	r10,r10,4
10009660:	31800104 	addi	r6,r6,4
10009664:	217fffcc 	andi	r5,r4,65535
10009668:	28cb883a 	add	r5,r5,r3
1000966c:	2817d43a 	srai	r11,r5,16
10009670:	2006d43a 	srli	r3,r4,16
10009674:	293fffcc 	andi	r4,r5,65535
10009678:	1ac7883a 	add	r3,r3,r11
1000967c:	180a943a 	slli	r5,r3,16
10009680:	1807d43a 	srai	r3,r3,16
10009684:	290ab03a 	or	r5,r5,r4
10009688:	517fff15 	stw	r5,-4(r10)
1000968c:	323ff236 	bltu	r6,r8,10009658 <__mdiff+0x120>
10009690:	42bfffc4 	addi	r10,r8,-1
10009694:	5415c83a 	sub	r10,r10,r16
10009698:	5014d0ba 	srli	r10,r10,2
1000969c:	501490ba 	slli	r10,r10,2
100096a0:	3a95883a 	add	r10,r7,r10
100096a4:	2800041e 	bne	r5,zero,100096b8 <__mdiff+0x180>
100096a8:	52bfff04 	addi	r10,r10,-4
100096ac:	50c00017 	ldw	r3,0(r10)
100096b0:	4a7fffc4 	addi	r9,r9,-1
100096b4:	183ffc26 	beq	r3,zero,100096a8 <__mdiff+0x170>
100096b8:	12400415 	stw	r9,16(r2)
100096bc:	dfc00517 	ldw	ra,20(sp)
100096c0:	dd000417 	ldw	r20,16(sp)
100096c4:	dcc00317 	ldw	r19,12(sp)
100096c8:	dc800217 	ldw	r18,8(sp)
100096cc:	dc400117 	ldw	r17,4(sp)
100096d0:	dc000017 	ldw	r16,0(sp)
100096d4:	dec00604 	addi	sp,sp,24
100096d8:	f800283a 	ret
100096dc:	000b883a 	mov	r5,zero
100096e0:	0008c5c0 	call	10008c5c <_Balloc>
100096e4:	00c00044 	movi	r3,1
100096e8:	10c00415 	stw	r3,16(r2)
100096ec:	10000515 	stw	zero,20(r2)
100096f0:	003ff206 	br	100096bc <__mdiff+0x184>

100096f4 <__ulp>:
100096f4:	295ffc2c 	andhi	r5,r5,32752
100096f8:	00ff3034 	movhi	r3,64704
100096fc:	28c7883a 	add	r3,r5,r3
10009700:	00c0020e 	bge	zero,r3,1000970c <__ulp+0x18>
10009704:	0005883a 	mov	r2,zero
10009708:	f800283a 	ret
1000970c:	00c7c83a 	sub	r3,zero,r3
10009710:	1807d53a 	srai	r3,r3,20
10009714:	18800508 	cmpgei	r2,r3,20
10009718:	1000041e 	bne	r2,zero,1000972c <__ulp+0x38>
1000971c:	01400234 	movhi	r5,8
10009720:	28c7d83a 	sra	r3,r5,r3
10009724:	0005883a 	mov	r2,zero
10009728:	f800283a 	ret
1000972c:	193ffb04 	addi	r4,r3,-20
10009730:	208007c8 	cmpgei	r2,r4,31
10009734:	0007883a 	mov	r3,zero
10009738:	1000031e 	bne	r2,zero,10009748 <__ulp+0x54>
1000973c:	00a00034 	movhi	r2,32768
10009740:	1104d83a 	srl	r2,r2,r4
10009744:	f800283a 	ret
10009748:	00800044 	movi	r2,1
1000974c:	f800283a 	ret

10009750 <__b2d>:
10009750:	defffa04 	addi	sp,sp,-24
10009754:	dc000015 	stw	r16,0(sp)
10009758:	24000417 	ldw	r16,16(r4)
1000975c:	dc800215 	stw	r18,8(sp)
10009760:	24800504 	addi	r18,r4,20
10009764:	802090ba 	slli	r16,r16,2
10009768:	dc400115 	stw	r17,4(sp)
1000976c:	dd000415 	stw	r20,16(sp)
10009770:	9421883a 	add	r16,r18,r16
10009774:	847fff17 	ldw	r17,-4(r16)
10009778:	dcc00315 	stw	r19,12(sp)
1000977c:	2829883a 	mov	r20,r5
10009780:	8809883a 	mov	r4,r17
10009784:	dfc00515 	stw	ra,20(sp)
10009788:	0008f480 	call	10008f48 <__hi0bits>
1000978c:	01000804 	movi	r4,32
10009790:	2087c83a 	sub	r3,r4,r2
10009794:	a0c00015 	stw	r3,0(r20)
10009798:	10c002c8 	cmpgei	r3,r2,11
1000979c:	84ffff04 	addi	r19,r16,-4
100097a0:	18001f26 	beq	r3,zero,10009820 <__b2d+0xd0>
100097a4:	10fffd44 	addi	r3,r2,-11
100097a8:	94c00e2e 	bgeu	r18,r19,100097e4 <__b2d+0x94>
100097ac:	80bffe17 	ldw	r2,-8(r16)
100097b0:	18001226 	beq	r3,zero,100097fc <__b2d+0xac>
100097b4:	20c9c83a 	sub	r4,r4,r3
100097b8:	110cd83a 	srl	r6,r2,r4
100097bc:	88e2983a 	sll	r17,r17,r3
100097c0:	10c4983a 	sll	r2,r2,r3
100097c4:	817ffe04 	addi	r5,r16,-8
100097c8:	8986b03a 	or	r3,r17,r6
100097cc:	18cffc34 	orhi	r3,r3,16368
100097d0:	91400b2e 	bgeu	r18,r5,10009800 <__b2d+0xb0>
100097d4:	817ffd17 	ldw	r5,-12(r16)
100097d8:	2908d83a 	srl	r4,r5,r4
100097dc:	1104b03a 	or	r2,r2,r4
100097e0:	00000706 	br	10009800 <__b2d+0xb0>
100097e4:	18000426 	beq	r3,zero,100097f8 <__b2d+0xa8>
100097e8:	88c6983a 	sll	r3,r17,r3
100097ec:	0005883a 	mov	r2,zero
100097f0:	18cffc34 	orhi	r3,r3,16368
100097f4:	00000206 	br	10009800 <__b2d+0xb0>
100097f8:	0005883a 	mov	r2,zero
100097fc:	88cffc34 	orhi	r3,r17,16368
10009800:	dfc00517 	ldw	ra,20(sp)
10009804:	dd000417 	ldw	r20,16(sp)
10009808:	dcc00317 	ldw	r19,12(sp)
1000980c:	dc800217 	ldw	r18,8(sp)
10009810:	dc400117 	ldw	r17,4(sp)
10009814:	dc000017 	ldw	r16,0(sp)
10009818:	dec00604 	addi	sp,sp,24
1000981c:	f800283a 	ret
10009820:	014002c4 	movi	r5,11
10009824:	2889c83a 	sub	r4,r5,r2
10009828:	8906d83a 	srl	r3,r17,r4
1000982c:	18cffc34 	orhi	r3,r3,16368
10009830:	94c00536 	bltu	r18,r19,10009848 <__b2d+0xf8>
10009834:	000b883a 	mov	r5,zero
10009838:	10800544 	addi	r2,r2,21
1000983c:	8884983a 	sll	r2,r17,r2
10009840:	1144b03a 	or	r2,r2,r5
10009844:	003fee06 	br	10009800 <__b2d+0xb0>
10009848:	817ffe17 	ldw	r5,-8(r16)
1000984c:	290ad83a 	srl	r5,r5,r4
10009850:	003ff906 	br	10009838 <__b2d+0xe8>

10009854 <__d2b>:
10009854:	defff804 	addi	sp,sp,-32
10009858:	dc400315 	stw	r17,12(sp)
1000985c:	3023883a 	mov	r17,r6
10009860:	dd000615 	stw	r20,24(sp)
10009864:	dc000215 	stw	r16,8(sp)
10009868:	2829883a 	mov	r20,r5
1000986c:	8820d53a 	srli	r16,r17,20
10009870:	01400044 	movi	r5,1
10009874:	dcc00515 	stw	r19,20(sp)
10009878:	dc800415 	stw	r18,16(sp)
1000987c:	dfc00715 	stw	ra,28(sp)
10009880:	3825883a 	mov	r18,r7
10009884:	0008c5c0 	call	10008c5c <_Balloc>
10009888:	01800434 	movhi	r6,16
1000988c:	31bfffc4 	addi	r6,r6,-1
10009890:	8401ffcc 	andi	r16,r16,2047
10009894:	1027883a 	mov	r19,r2
10009898:	89a2703a 	and	r17,r17,r6
1000989c:	80000126 	beq	r16,zero,100098a4 <__d2b+0x50>
100098a0:	8c400434 	orhi	r17,r17,16
100098a4:	dc400115 	stw	r17,4(sp)
100098a8:	a0002826 	beq	r20,zero,1000994c <__d2b+0xf8>
100098ac:	d809883a 	mov	r4,sp
100098b0:	dd000015 	stw	r20,0(sp)
100098b4:	0008fac0 	call	10008fac <__lo0bits>
100098b8:	d8c00117 	ldw	r3,4(sp)
100098bc:	1000171e 	bne	r2,zero,1000991c <__d2b+0xc8>
100098c0:	d9000017 	ldw	r4,0(sp)
100098c4:	98c00615 	stw	r3,24(r19)
100098c8:	99000515 	stw	r4,20(r19)
100098cc:	18001d1e 	bne	r3,zero,10009944 <__d2b+0xf0>
100098d0:	04400044 	movi	r17,1
100098d4:	9c400415 	stw	r17,16(r19)
100098d8:	80002526 	beq	r16,zero,10009970 <__d2b+0x11c>
100098dc:	00c00d44 	movi	r3,53
100098e0:	843ef344 	addi	r16,r16,-1075
100098e4:	80a1883a 	add	r16,r16,r2
100098e8:	1885c83a 	sub	r2,r3,r2
100098ec:	d8c00817 	ldw	r3,32(sp)
100098f0:	94000015 	stw	r16,0(r18)
100098f4:	18800015 	stw	r2,0(r3)
100098f8:	9805883a 	mov	r2,r19
100098fc:	dfc00717 	ldw	ra,28(sp)
10009900:	dd000617 	ldw	r20,24(sp)
10009904:	dcc00517 	ldw	r19,20(sp)
10009908:	dc800417 	ldw	r18,16(sp)
1000990c:	dc400317 	ldw	r17,12(sp)
10009910:	dc000217 	ldw	r16,8(sp)
10009914:	dec00804 	addi	sp,sp,32
10009918:	f800283a 	ret
1000991c:	01000804 	movi	r4,32
10009920:	2089c83a 	sub	r4,r4,r2
10009924:	1908983a 	sll	r4,r3,r4
10009928:	d9400017 	ldw	r5,0(sp)
1000992c:	1886d83a 	srl	r3,r3,r2
10009930:	2148b03a 	or	r4,r4,r5
10009934:	99000515 	stw	r4,20(r19)
10009938:	d8c00115 	stw	r3,4(sp)
1000993c:	98c00615 	stw	r3,24(r19)
10009940:	183fe326 	beq	r3,zero,100098d0 <__d2b+0x7c>
10009944:	04400084 	movi	r17,2
10009948:	003fe206 	br	100098d4 <__d2b+0x80>
1000994c:	d9000104 	addi	r4,sp,4
10009950:	0008fac0 	call	10008fac <__lo0bits>
10009954:	00c00044 	movi	r3,1
10009958:	98c00415 	stw	r3,16(r19)
1000995c:	d8c00117 	ldw	r3,4(sp)
10009960:	10800804 	addi	r2,r2,32
10009964:	04400044 	movi	r17,1
10009968:	98c00515 	stw	r3,20(r19)
1000996c:	803fdb1e 	bne	r16,zero,100098dc <__d2b+0x88>
10009970:	880690ba 	slli	r3,r17,2
10009974:	10bef384 	addi	r2,r2,-1074
10009978:	8822917a 	slli	r17,r17,5
1000997c:	98c7883a 	add	r3,r19,r3
10009980:	19000417 	ldw	r4,16(r3)
10009984:	90800015 	stw	r2,0(r18)
10009988:	0008f480 	call	10008f48 <__hi0bits>
1000998c:	88a3c83a 	sub	r17,r17,r2
10009990:	d8800817 	ldw	r2,32(sp)
10009994:	14400015 	stw	r17,0(r2)
10009998:	003fd706 	br	100098f8 <__d2b+0xa4>

1000999c <__ratio>:
1000999c:	defff904 	addi	sp,sp,-28
100099a0:	dc400315 	stw	r17,12(sp)
100099a4:	2823883a 	mov	r17,r5
100099a8:	d80b883a 	mov	r5,sp
100099ac:	dfc00615 	stw	ra,24(sp)
100099b0:	dcc00515 	stw	r19,20(sp)
100099b4:	dc800415 	stw	r18,16(sp)
100099b8:	2027883a 	mov	r19,r4
100099bc:	dc000215 	stw	r16,8(sp)
100099c0:	00097500 	call	10009750 <__b2d>
100099c4:	d9400104 	addi	r5,sp,4
100099c8:	8809883a 	mov	r4,r17
100099cc:	1025883a 	mov	r18,r2
100099d0:	1821883a 	mov	r16,r3
100099d4:	00097500 	call	10009750 <__b2d>
100099d8:	89400417 	ldw	r5,16(r17)
100099dc:	99000417 	ldw	r4,16(r19)
100099e0:	d9800117 	ldw	r6,4(sp)
100099e4:	2149c83a 	sub	r4,r4,r5
100099e8:	d9400017 	ldw	r5,0(sp)
100099ec:	2008917a 	slli	r4,r4,5
100099f0:	298bc83a 	sub	r5,r5,r6
100099f4:	2149883a 	add	r4,r4,r5
100099f8:	01000e0e 	bge	zero,r4,10009a34 <__ratio+0x98>
100099fc:	2008953a 	slli	r4,r4,20
10009a00:	2421883a 	add	r16,r4,r16
10009a04:	100d883a 	mov	r6,r2
10009a08:	180f883a 	mov	r7,r3
10009a0c:	9009883a 	mov	r4,r18
10009a10:	800b883a 	mov	r5,r16
10009a14:	000d8c80 	call	1000d8c8 <__divdf3>
10009a18:	dfc00617 	ldw	ra,24(sp)
10009a1c:	dcc00517 	ldw	r19,20(sp)
10009a20:	dc800417 	ldw	r18,16(sp)
10009a24:	dc400317 	ldw	r17,12(sp)
10009a28:	dc000217 	ldw	r16,8(sp)
10009a2c:	dec00704 	addi	sp,sp,28
10009a30:	f800283a 	ret
10009a34:	017ffc34 	movhi	r5,65520
10009a38:	2149383a 	mul	r4,r4,r5
10009a3c:	20c7883a 	add	r3,r4,r3
10009a40:	003ff006 	br	10009a04 <__ratio+0x68>

10009a44 <_mprec_log10>:
10009a44:	defffe04 	addi	sp,sp,-8
10009a48:	dc000015 	stw	r16,0(sp)
10009a4c:	dfc00115 	stw	ra,4(sp)
10009a50:	20800608 	cmpgei	r2,r4,24
10009a54:	2021883a 	mov	r16,r4
10009a58:	10000d26 	beq	r2,zero,10009a90 <_mprec_log10+0x4c>
10009a5c:	0005883a 	mov	r2,zero
10009a60:	00cffc34 	movhi	r3,16368
10009a64:	843fffc4 	addi	r16,r16,-1
10009a68:	000d883a 	mov	r6,zero
10009a6c:	01d00934 	movhi	r7,16420
10009a70:	1009883a 	mov	r4,r2
10009a74:	180b883a 	mov	r5,r3
10009a78:	000e3d00 	call	1000e3d0 <__muldf3>
10009a7c:	803ff91e 	bne	r16,zero,10009a64 <_mprec_log10+0x20>
10009a80:	dfc00117 	ldw	ra,4(sp)
10009a84:	dc000017 	ldw	r16,0(sp)
10009a88:	dec00204 	addi	sp,sp,8
10009a8c:	f800283a 	ret
10009a90:	202090fa 	slli	r16,r4,3
10009a94:	00840074 	movhi	r2,4097
10009a98:	108a2804 	addi	r2,r2,10400
10009a9c:	1421883a 	add	r16,r2,r16
10009aa0:	80800017 	ldw	r2,0(r16)
10009aa4:	80c00117 	ldw	r3,4(r16)
10009aa8:	dfc00117 	ldw	ra,4(sp)
10009aac:	dc000017 	ldw	r16,0(sp)
10009ab0:	dec00204 	addi	sp,sp,8
10009ab4:	f800283a 	ret

10009ab8 <__copybits>:
10009ab8:	29ffffc4 	addi	r7,r5,-1
10009abc:	380fd17a 	srai	r7,r7,5
10009ac0:	31400417 	ldw	r5,16(r6)
10009ac4:	30800504 	addi	r2,r6,20
10009ac8:	39c00044 	addi	r7,r7,1
10009acc:	280a90ba 	slli	r5,r5,2
10009ad0:	380e90ba 	slli	r7,r7,2
10009ad4:	114b883a 	add	r5,r2,r5
10009ad8:	21cf883a 	add	r7,r4,r7
10009adc:	11400c2e 	bgeu	r2,r5,10009b10 <__copybits+0x58>
10009ae0:	2007883a 	mov	r3,r4
10009ae4:	10800104 	addi	r2,r2,4
10009ae8:	123fff17 	ldw	r8,-4(r2)
10009aec:	18c00104 	addi	r3,r3,4
10009af0:	1a3fff15 	stw	r8,-4(r3)
10009af4:	117ffb36 	bltu	r2,r5,10009ae4 <__copybits+0x2c>
10009af8:	2985c83a 	sub	r2,r5,r6
10009afc:	10bffac4 	addi	r2,r2,-21
10009b00:	1004d0ba 	srli	r2,r2,2
10009b04:	10800044 	addi	r2,r2,1
10009b08:	100490ba 	slli	r2,r2,2
10009b0c:	2089883a 	add	r4,r4,r2
10009b10:	21c0032e 	bgeu	r4,r7,10009b20 <__copybits+0x68>
10009b14:	21000104 	addi	r4,r4,4
10009b18:	203fff15 	stw	zero,-4(r4)
10009b1c:	21fffd36 	bltu	r4,r7,10009b14 <__copybits+0x5c>
10009b20:	f800283a 	ret

10009b24 <__any_on>:
10009b24:	20800417 	ldw	r2,16(r4)
10009b28:	280dd17a 	srai	r6,r5,5
10009b2c:	21000504 	addi	r4,r4,20
10009b30:	11800c0e 	bge	r2,r6,10009b64 <__any_on+0x40>
10009b34:	100690ba 	slli	r3,r2,2
10009b38:	20c7883a 	add	r3,r4,r3
10009b3c:	20c0142e 	bgeu	r4,r3,10009b90 <__any_on+0x6c>
10009b40:	18bfff17 	ldw	r2,-4(r3)
10009b44:	18ffff04 	addi	r3,r3,-4
10009b48:	1000041e 	bne	r2,zero,10009b5c <__any_on+0x38>
10009b4c:	20c00f2e 	bgeu	r4,r3,10009b8c <__any_on+0x68>
10009b50:	18ffff04 	addi	r3,r3,-4
10009b54:	19400017 	ldw	r5,0(r3)
10009b58:	283ffc26 	beq	r5,zero,10009b4c <__any_on+0x28>
10009b5c:	00800044 	movi	r2,1
10009b60:	f800283a 	ret
10009b64:	300690ba 	slli	r3,r6,2
10009b68:	20c7883a 	add	r3,r4,r3
10009b6c:	30bff30e 	bge	r6,r2,10009b3c <__any_on+0x18>
10009b70:	294007cc 	andi	r5,r5,31
10009b74:	283ff126 	beq	r5,zero,10009b3c <__any_on+0x18>
10009b78:	19800017 	ldw	r6,0(r3)
10009b7c:	3144d83a 	srl	r2,r6,r5
10009b80:	114a983a 	sll	r5,r2,r5
10009b84:	317ff51e 	bne	r6,r5,10009b5c <__any_on+0x38>
10009b88:	003fec06 	br	10009b3c <__any_on+0x18>
10009b8c:	f800283a 	ret
10009b90:	0005883a 	mov	r2,zero
10009b94:	f800283a 	ret

10009b98 <_realloc_r>:
10009b98:	defff504 	addi	sp,sp,-44
10009b9c:	dcc00415 	stw	r19,16(sp)
10009ba0:	dfc00a15 	stw	ra,40(sp)
10009ba4:	df000915 	stw	fp,36(sp)
10009ba8:	ddc00815 	stw	r23,32(sp)
10009bac:	dd800715 	stw	r22,28(sp)
10009bb0:	dd400615 	stw	r21,24(sp)
10009bb4:	dd000515 	stw	r20,20(sp)
10009bb8:	dc800315 	stw	r18,12(sp)
10009bbc:	dc400215 	stw	r17,8(sp)
10009bc0:	dc000115 	stw	r16,4(sp)
10009bc4:	3027883a 	mov	r19,r6
10009bc8:	28008b26 	beq	r5,zero,10009df8 <_realloc_r+0x260>
10009bcc:	282d883a 	mov	r22,r5
10009bd0:	202b883a 	mov	r21,r4
10009bd4:	9c0002c4 	addi	r16,r19,11
10009bd8:	000fbd00 	call	1000fbd0 <__malloc_lock>
10009bdc:	808005f0 	cmpltui	r2,r16,23
10009be0:	1000521e 	bne	r2,zero,10009d2c <_realloc_r+0x194>
10009be4:	017ffe04 	movi	r5,-8
10009be8:	8160703a 	and	r16,r16,r5
10009bec:	8007883a 	mov	r3,r16
10009bf0:	80005116 	blt	r16,zero,10009d38 <_realloc_r+0x1a0>
10009bf4:	84c05036 	bltu	r16,r19,10009d38 <_realloc_r+0x1a0>
10009bf8:	b0bfff17 	ldw	r2,-4(r22)
10009bfc:	017fff04 	movi	r5,-4
10009c00:	b4bffe04 	addi	r18,r22,-8
10009c04:	1162703a 	and	r17,r2,r5
10009c08:	9469883a 	add	r20,r18,r17
10009c0c:	88c0390e 	bge	r17,r3,10009cf4 <_realloc_r+0x15c>
10009c10:	07040074 	movhi	fp,4097
10009c14:	e70ded04 	addi	fp,fp,14260
10009c18:	e2000217 	ldw	r8,8(fp)
10009c1c:	a1000117 	ldw	r4,4(r20)
10009c20:	45008e26 	beq	r8,r20,10009e5c <_realloc_r+0x2c4>
10009c24:	01bfff84 	movi	r6,-2
10009c28:	218c703a 	and	r6,r4,r6
10009c2c:	a18d883a 	add	r6,r20,r6
10009c30:	31800117 	ldw	r6,4(r6)
10009c34:	3180004c 	andi	r6,r6,1
10009c38:	30004f1e 	bne	r6,zero,10009d78 <_realloc_r+0x1e0>
10009c3c:	2148703a 	and	r4,r4,r5
10009c40:	890b883a 	add	r5,r17,r4
10009c44:	28c0cb0e 	bge	r5,r3,10009f74 <_realloc_r+0x3dc>
10009c48:	1080004c 	andi	r2,r2,1
10009c4c:	10004c1e 	bne	r2,zero,10009d80 <_realloc_r+0x1e8>
10009c50:	b1fffe17 	ldw	r7,-8(r22)
10009c54:	00bfff04 	movi	r2,-4
10009c58:	91cfc83a 	sub	r7,r18,r7
10009c5c:	39400117 	ldw	r5,4(r7)
10009c60:	288a703a 	and	r5,r5,r2
10009c64:	a0000426 	beq	r20,zero,10009c78 <_realloc_r+0xe0>
10009c68:	896f883a 	add	r23,r17,r5
10009c6c:	b92f883a 	add	r23,r23,r4
10009c70:	4500cb26 	beq	r8,r20,10009fa0 <_realloc_r+0x408>
10009c74:	b8c0930e 	bge	r23,r3,10009ec4 <_realloc_r+0x32c>
10009c78:	38004126 	beq	r7,zero,10009d80 <_realloc_r+0x1e8>
10009c7c:	896f883a 	add	r23,r17,r5
10009c80:	b8c03f16 	blt	r23,r3,10009d80 <_realloc_r+0x1e8>
10009c84:	38c00217 	ldw	r3,8(r7)
10009c88:	38800317 	ldw	r2,12(r7)
10009c8c:	89bfff04 	addi	r6,r17,-4
10009c90:	31000968 	cmpgeui	r4,r6,37
10009c94:	18800315 	stw	r2,12(r3)
10009c98:	10c00215 	stw	r3,8(r2)
10009c9c:	3de9883a 	add	r20,r7,r23
10009ca0:	38c00204 	addi	r3,r7,8
10009ca4:	2000f81e 	bne	r4,zero,1000a088 <_realloc_r+0x4f0>
10009ca8:	30800530 	cmpltui	r2,r6,20
10009cac:	b1000017 	ldw	r4,0(r22)
10009cb0:	1000eb1e 	bne	r2,zero,1000a060 <_realloc_r+0x4c8>
10009cb4:	39000215 	stw	r4,8(r7)
10009cb8:	b1000117 	ldw	r4,4(r22)
10009cbc:	30800728 	cmpgeui	r2,r6,28
10009cc0:	39000315 	stw	r4,12(r7)
10009cc4:	1001041e 	bne	r2,zero,1000a0d8 <_realloc_r+0x540>
10009cc8:	b1000217 	ldw	r4,8(r22)
10009ccc:	38800404 	addi	r2,r7,16
10009cd0:	b5800204 	addi	r22,r22,8
10009cd4:	11000015 	stw	r4,0(r2)
10009cd8:	b1000117 	ldw	r4,4(r22)
10009cdc:	b823883a 	mov	r17,r23
10009ce0:	3825883a 	mov	r18,r7
10009ce4:	11000115 	stw	r4,4(r2)
10009ce8:	b1000217 	ldw	r4,8(r22)
10009cec:	182d883a 	mov	r22,r3
10009cf0:	11000215 	stw	r4,8(r2)
10009cf4:	91800117 	ldw	r6,4(r18)
10009cf8:	8c05c83a 	sub	r2,r17,r16
10009cfc:	10c00430 	cmpltui	r3,r2,16
10009d00:	3180004c 	andi	r6,r6,1
10009d04:	18004926 	beq	r3,zero,10009e2c <_realloc_r+0x294>
10009d08:	898cb03a 	or	r6,r17,r6
10009d0c:	91800115 	stw	r6,4(r18)
10009d10:	a0800117 	ldw	r2,4(r20)
10009d14:	10800054 	ori	r2,r2,1
10009d18:	a0800115 	stw	r2,4(r20)
10009d1c:	a809883a 	mov	r4,r21
10009d20:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10009d24:	b027883a 	mov	r19,r22
10009d28:	00000606 	br	10009d44 <_realloc_r+0x1ac>
10009d2c:	04000404 	movi	r16,16
10009d30:	00c00404 	movi	r3,16
10009d34:	84ffb02e 	bgeu	r16,r19,10009bf8 <_realloc_r+0x60>
10009d38:	00800304 	movi	r2,12
10009d3c:	a8800015 	stw	r2,0(r21)
10009d40:	0027883a 	mov	r19,zero
10009d44:	9805883a 	mov	r2,r19
10009d48:	dfc00a17 	ldw	ra,40(sp)
10009d4c:	df000917 	ldw	fp,36(sp)
10009d50:	ddc00817 	ldw	r23,32(sp)
10009d54:	dd800717 	ldw	r22,28(sp)
10009d58:	dd400617 	ldw	r21,24(sp)
10009d5c:	dd000517 	ldw	r20,20(sp)
10009d60:	dcc00417 	ldw	r19,16(sp)
10009d64:	dc800317 	ldw	r18,12(sp)
10009d68:	dc400217 	ldw	r17,8(sp)
10009d6c:	dc000117 	ldw	r16,4(sp)
10009d70:	dec00b04 	addi	sp,sp,44
10009d74:	f800283a 	ret
10009d78:	1080004c 	andi	r2,r2,1
10009d7c:	10007826 	beq	r2,zero,10009f60 <_realloc_r+0x3c8>
10009d80:	980b883a 	mov	r5,r19
10009d84:	a809883a 	mov	r4,r21
10009d88:	00081640 	call	10008164 <_malloc_r>
10009d8c:	1027883a 	mov	r19,r2
10009d90:	10001626 	beq	r2,zero,10009dec <_realloc_r+0x254>
10009d94:	b0bfff17 	ldw	r2,-4(r22)
10009d98:	013fff84 	movi	r4,-2
10009d9c:	98fffe04 	addi	r3,r19,-8
10009da0:	1104703a 	and	r2,r2,r4
10009da4:	9085883a 	add	r2,r18,r2
10009da8:	10c06726 	beq	r2,r3,10009f48 <_realloc_r+0x3b0>
10009dac:	89bfff04 	addi	r6,r17,-4
10009db0:	30800968 	cmpgeui	r2,r6,37
10009db4:	1000761e 	bne	r2,zero,10009f90 <_realloc_r+0x3f8>
10009db8:	30800530 	cmpltui	r2,r6,20
10009dbc:	b1000017 	ldw	r4,0(r22)
10009dc0:	10003726 	beq	r2,zero,10009ea0 <_realloc_r+0x308>
10009dc4:	9805883a 	mov	r2,r19
10009dc8:	b007883a 	mov	r3,r22
10009dcc:	11000015 	stw	r4,0(r2)
10009dd0:	19000117 	ldw	r4,4(r3)
10009dd4:	11000115 	stw	r4,4(r2)
10009dd8:	18c00217 	ldw	r3,8(r3)
10009ddc:	10c00215 	stw	r3,8(r2)
10009de0:	b00b883a 	mov	r5,r22
10009de4:	a809883a 	mov	r4,r21
10009de8:	00076580 	call	10007658 <_free_r>
10009dec:	a809883a 	mov	r4,r21
10009df0:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10009df4:	003fd306 	br	10009d44 <_realloc_r+0x1ac>
10009df8:	300b883a 	mov	r5,r6
10009dfc:	dfc00a17 	ldw	ra,40(sp)
10009e00:	df000917 	ldw	fp,36(sp)
10009e04:	ddc00817 	ldw	r23,32(sp)
10009e08:	dd800717 	ldw	r22,28(sp)
10009e0c:	dd400617 	ldw	r21,24(sp)
10009e10:	dd000517 	ldw	r20,20(sp)
10009e14:	dcc00417 	ldw	r19,16(sp)
10009e18:	dc800317 	ldw	r18,12(sp)
10009e1c:	dc400217 	ldw	r17,8(sp)
10009e20:	dc000117 	ldw	r16,4(sp)
10009e24:	dec00b04 	addi	sp,sp,44
10009e28:	00081641 	jmpi	10008164 <_malloc_r>
10009e2c:	340cb03a 	or	r6,r6,r16
10009e30:	91800115 	stw	r6,4(r18)
10009e34:	940b883a 	add	r5,r18,r16
10009e38:	10800054 	ori	r2,r2,1
10009e3c:	28800115 	stw	r2,4(r5)
10009e40:	a0800117 	ldw	r2,4(r20)
10009e44:	29400204 	addi	r5,r5,8
10009e48:	a809883a 	mov	r4,r21
10009e4c:	10800054 	ori	r2,r2,1
10009e50:	a0800115 	stw	r2,4(r20)
10009e54:	00076580 	call	10007658 <_free_r>
10009e58:	003fb006 	br	10009d1c <_realloc_r+0x184>
10009e5c:	2148703a 	and	r4,r4,r5
10009e60:	890b883a 	add	r5,r17,r4
10009e64:	81800404 	addi	r6,r16,16
10009e68:	29bf7716 	blt	r5,r6,10009c48 <_realloc_r+0xb0>
10009e6c:	9425883a 	add	r18,r18,r16
10009e70:	2c05c83a 	sub	r2,r5,r16
10009e74:	e4800215 	stw	r18,8(fp)
10009e78:	10800054 	ori	r2,r2,1
10009e7c:	90800115 	stw	r2,4(r18)
10009e80:	b0bfff17 	ldw	r2,-4(r22)
10009e84:	a809883a 	mov	r4,r21
10009e88:	b027883a 	mov	r19,r22
10009e8c:	1080004c 	andi	r2,r2,1
10009e90:	1420b03a 	or	r16,r2,r16
10009e94:	b43fff15 	stw	r16,-4(r22)
10009e98:	000fbf40 	call	1000fbf4 <__malloc_unlock>
10009e9c:	003fa906 	br	10009d44 <_realloc_r+0x1ac>
10009ea0:	99000015 	stw	r4,0(r19)
10009ea4:	b0c00117 	ldw	r3,4(r22)
10009ea8:	30800728 	cmpgeui	r2,r6,28
10009eac:	98c00115 	stw	r3,4(r19)
10009eb0:	1000611e 	bne	r2,zero,1000a038 <_realloc_r+0x4a0>
10009eb4:	b0c00204 	addi	r3,r22,8
10009eb8:	98800204 	addi	r2,r19,8
10009ebc:	b1000217 	ldw	r4,8(r22)
10009ec0:	003fc206 	br	10009dcc <_realloc_r+0x234>
10009ec4:	a0800317 	ldw	r2,12(r20)
10009ec8:	a0c00217 	ldw	r3,8(r20)
10009ecc:	89bfff04 	addi	r6,r17,-4
10009ed0:	31000968 	cmpgeui	r4,r6,37
10009ed4:	18800315 	stw	r2,12(r3)
10009ed8:	10c00215 	stw	r3,8(r2)
10009edc:	38c00217 	ldw	r3,8(r7)
10009ee0:	38800317 	ldw	r2,12(r7)
10009ee4:	3a000204 	addi	r8,r7,8
10009ee8:	3de9883a 	add	r20,r7,r23
10009eec:	18800315 	stw	r2,12(r3)
10009ef0:	10c00215 	stw	r3,8(r2)
10009ef4:	20006f1e 	bne	r4,zero,1000a0b4 <_realloc_r+0x51c>
10009ef8:	30800530 	cmpltui	r2,r6,20
10009efc:	b0c00017 	ldw	r3,0(r22)
10009f00:	10006a1e 	bne	r2,zero,1000a0ac <_realloc_r+0x514>
10009f04:	38c00215 	stw	r3,8(r7)
10009f08:	b0c00117 	ldw	r3,4(r22)
10009f0c:	30800728 	cmpgeui	r2,r6,28
10009f10:	38c00315 	stw	r3,12(r7)
10009f14:	10007a1e 	bne	r2,zero,1000a100 <_realloc_r+0x568>
10009f18:	b0c00217 	ldw	r3,8(r22)
10009f1c:	38800404 	addi	r2,r7,16
10009f20:	b5800204 	addi	r22,r22,8
10009f24:	10c00015 	stw	r3,0(r2)
10009f28:	b0c00117 	ldw	r3,4(r22)
10009f2c:	b823883a 	mov	r17,r23
10009f30:	3825883a 	mov	r18,r7
10009f34:	10c00115 	stw	r3,4(r2)
10009f38:	b0c00217 	ldw	r3,8(r22)
10009f3c:	402d883a 	mov	r22,r8
10009f40:	10c00215 	stw	r3,8(r2)
10009f44:	003f6b06 	br	10009cf4 <_realloc_r+0x15c>
10009f48:	98bfff17 	ldw	r2,-4(r19)
10009f4c:	00ffff04 	movi	r3,-4
10009f50:	10c4703a 	and	r2,r2,r3
10009f54:	88a3883a 	add	r17,r17,r2
10009f58:	9469883a 	add	r20,r18,r17
10009f5c:	003f6506 	br	10009cf4 <_realloc_r+0x15c>
10009f60:	b1fffe17 	ldw	r7,-8(r22)
10009f64:	91cfc83a 	sub	r7,r18,r7
10009f68:	39000117 	ldw	r4,4(r7)
10009f6c:	214a703a 	and	r5,r4,r5
10009f70:	003f4106 	br	10009c78 <_realloc_r+0xe0>
10009f74:	a0800317 	ldw	r2,12(r20)
10009f78:	a0c00217 	ldw	r3,8(r20)
10009f7c:	2823883a 	mov	r17,r5
10009f80:	9169883a 	add	r20,r18,r5
10009f84:	18800315 	stw	r2,12(r3)
10009f88:	10c00215 	stw	r3,8(r2)
10009f8c:	003f5906 	br	10009cf4 <_realloc_r+0x15c>
10009f90:	b00b883a 	mov	r5,r22
10009f94:	9809883a 	mov	r4,r19
10009f98:	0008a400 	call	10008a40 <memmove>
10009f9c:	003f9006 	br	10009de0 <_realloc_r+0x248>
10009fa0:	80800404 	addi	r2,r16,16
10009fa4:	b8bf3416 	blt	r23,r2,10009c78 <_realloc_r+0xe0>
10009fa8:	38800317 	ldw	r2,12(r7)
10009fac:	38c00217 	ldw	r3,8(r7)
10009fb0:	89bfff04 	addi	r6,r17,-4
10009fb4:	31000968 	cmpgeui	r4,r6,37
10009fb8:	18800315 	stw	r2,12(r3)
10009fbc:	10c00215 	stw	r3,8(r2)
10009fc0:	3cc00204 	addi	r19,r7,8
10009fc4:	20005a1e 	bne	r4,zero,1000a130 <_realloc_r+0x598>
10009fc8:	30800530 	cmpltui	r2,r6,20
10009fcc:	b0c00017 	ldw	r3,0(r22)
10009fd0:	1000551e 	bne	r2,zero,1000a128 <_realloc_r+0x590>
10009fd4:	38c00215 	stw	r3,8(r7)
10009fd8:	b0c00117 	ldw	r3,4(r22)
10009fdc:	30800728 	cmpgeui	r2,r6,28
10009fe0:	38c00315 	stw	r3,12(r7)
10009fe4:	1000661e 	bne	r2,zero,1000a180 <_realloc_r+0x5e8>
10009fe8:	b0c00217 	ldw	r3,8(r22)
10009fec:	38800404 	addi	r2,r7,16
10009ff0:	b5800204 	addi	r22,r22,8
10009ff4:	10c00015 	stw	r3,0(r2)
10009ff8:	b0c00117 	ldw	r3,4(r22)
10009ffc:	10c00115 	stw	r3,4(r2)
1000a000:	b0c00217 	ldw	r3,8(r22)
1000a004:	10c00215 	stw	r3,8(r2)
1000a008:	3c07883a 	add	r3,r7,r16
1000a00c:	bc05c83a 	sub	r2,r23,r16
1000a010:	e0c00215 	stw	r3,8(fp)
1000a014:	10800054 	ori	r2,r2,1
1000a018:	18800115 	stw	r2,4(r3)
1000a01c:	38800117 	ldw	r2,4(r7)
1000a020:	a809883a 	mov	r4,r21
1000a024:	1080004c 	andi	r2,r2,1
1000a028:	1420b03a 	or	r16,r2,r16
1000a02c:	3c000115 	stw	r16,4(r7)
1000a030:	000fbf40 	call	1000fbf4 <__malloc_unlock>
1000a034:	003f4306 	br	10009d44 <_realloc_r+0x1ac>
1000a038:	b0800217 	ldw	r2,8(r22)
1000a03c:	31800920 	cmpeqi	r6,r6,36
1000a040:	98800215 	stw	r2,8(r19)
1000a044:	b0800317 	ldw	r2,12(r22)
1000a048:	98800315 	stw	r2,12(r19)
1000a04c:	3000061e 	bne	r6,zero,1000a068 <_realloc_r+0x4d0>
1000a050:	b0c00404 	addi	r3,r22,16
1000a054:	98800404 	addi	r2,r19,16
1000a058:	b1000417 	ldw	r4,16(r22)
1000a05c:	003f5b06 	br	10009dcc <_realloc_r+0x234>
1000a060:	1805883a 	mov	r2,r3
1000a064:	003f1b06 	br	10009cd4 <_realloc_r+0x13c>
1000a068:	b1000417 	ldw	r4,16(r22)
1000a06c:	b0c00604 	addi	r3,r22,24
1000a070:	98800604 	addi	r2,r19,24
1000a074:	99000415 	stw	r4,16(r19)
1000a078:	b1000517 	ldw	r4,20(r22)
1000a07c:	99000515 	stw	r4,20(r19)
1000a080:	b1000617 	ldw	r4,24(r22)
1000a084:	003f5106 	br	10009dcc <_realloc_r+0x234>
1000a088:	b00b883a 	mov	r5,r22
1000a08c:	1809883a 	mov	r4,r3
1000a090:	d9c00015 	stw	r7,0(sp)
1000a094:	0008a400 	call	10008a40 <memmove>
1000a098:	d9c00017 	ldw	r7,0(sp)
1000a09c:	102d883a 	mov	r22,r2
1000a0a0:	b823883a 	mov	r17,r23
1000a0a4:	3825883a 	mov	r18,r7
1000a0a8:	003f1206 	br	10009cf4 <_realloc_r+0x15c>
1000a0ac:	4005883a 	mov	r2,r8
1000a0b0:	003f9c06 	br	10009f24 <_realloc_r+0x38c>
1000a0b4:	b00b883a 	mov	r5,r22
1000a0b8:	4009883a 	mov	r4,r8
1000a0bc:	d9c00015 	stw	r7,0(sp)
1000a0c0:	0008a400 	call	10008a40 <memmove>
1000a0c4:	d9c00017 	ldw	r7,0(sp)
1000a0c8:	102d883a 	mov	r22,r2
1000a0cc:	b823883a 	mov	r17,r23
1000a0d0:	3825883a 	mov	r18,r7
1000a0d4:	003f0706 	br	10009cf4 <_realloc_r+0x15c>
1000a0d8:	b0800217 	ldw	r2,8(r22)
1000a0dc:	31800920 	cmpeqi	r6,r6,36
1000a0e0:	38800415 	stw	r2,16(r7)
1000a0e4:	b0800317 	ldw	r2,12(r22)
1000a0e8:	38800515 	stw	r2,20(r7)
1000a0ec:	b1000417 	ldw	r4,16(r22)
1000a0f0:	3000151e 	bne	r6,zero,1000a148 <_realloc_r+0x5b0>
1000a0f4:	38800604 	addi	r2,r7,24
1000a0f8:	b5800404 	addi	r22,r22,16
1000a0fc:	003ef506 	br	10009cd4 <_realloc_r+0x13c>
1000a100:	b0800217 	ldw	r2,8(r22)
1000a104:	31800920 	cmpeqi	r6,r6,36
1000a108:	38800415 	stw	r2,16(r7)
1000a10c:	b0800317 	ldw	r2,12(r22)
1000a110:	38800515 	stw	r2,20(r7)
1000a114:	b0c00417 	ldw	r3,16(r22)
1000a118:	3000121e 	bne	r6,zero,1000a164 <_realloc_r+0x5cc>
1000a11c:	38800604 	addi	r2,r7,24
1000a120:	b5800404 	addi	r22,r22,16
1000a124:	003f7f06 	br	10009f24 <_realloc_r+0x38c>
1000a128:	9805883a 	mov	r2,r19
1000a12c:	003fb106 	br	10009ff4 <_realloc_r+0x45c>
1000a130:	b00b883a 	mov	r5,r22
1000a134:	9809883a 	mov	r4,r19
1000a138:	d9c00015 	stw	r7,0(sp)
1000a13c:	0008a400 	call	10008a40 <memmove>
1000a140:	d9c00017 	ldw	r7,0(sp)
1000a144:	003fb006 	br	1000a008 <_realloc_r+0x470>
1000a148:	b5800604 	addi	r22,r22,24
1000a14c:	39000615 	stw	r4,24(r7)
1000a150:	b13fff17 	ldw	r4,-4(r22)
1000a154:	38800804 	addi	r2,r7,32
1000a158:	39000715 	stw	r4,28(r7)
1000a15c:	b1000017 	ldw	r4,0(r22)
1000a160:	003edc06 	br	10009cd4 <_realloc_r+0x13c>
1000a164:	b5800604 	addi	r22,r22,24
1000a168:	38c00615 	stw	r3,24(r7)
1000a16c:	b0ffff17 	ldw	r3,-4(r22)
1000a170:	38800804 	addi	r2,r7,32
1000a174:	38c00715 	stw	r3,28(r7)
1000a178:	b0c00017 	ldw	r3,0(r22)
1000a17c:	003f6906 	br	10009f24 <_realloc_r+0x38c>
1000a180:	b0800217 	ldw	r2,8(r22)
1000a184:	31800920 	cmpeqi	r6,r6,36
1000a188:	38800415 	stw	r2,16(r7)
1000a18c:	b0800317 	ldw	r2,12(r22)
1000a190:	38800515 	stw	r2,20(r7)
1000a194:	b0c00417 	ldw	r3,16(r22)
1000a198:	3000031e 	bne	r6,zero,1000a1a8 <_realloc_r+0x610>
1000a19c:	38800604 	addi	r2,r7,24
1000a1a0:	b5800404 	addi	r22,r22,16
1000a1a4:	003f9306 	br	10009ff4 <_realloc_r+0x45c>
1000a1a8:	b5800604 	addi	r22,r22,24
1000a1ac:	38c00615 	stw	r3,24(r7)
1000a1b0:	b0ffff17 	ldw	r3,-4(r22)
1000a1b4:	38800804 	addi	r2,r7,32
1000a1b8:	38c00715 	stw	r3,28(r7)
1000a1bc:	b0c00017 	ldw	r3,0(r22)
1000a1c0:	003f8c06 	br	10009ff4 <_realloc_r+0x45c>

1000a1c4 <_sbrk_r>:
1000a1c4:	defffe04 	addi	sp,sp,-8
1000a1c8:	dc000015 	stw	r16,0(sp)
1000a1cc:	00840074 	movhi	r2,4097
1000a1d0:	2021883a 	mov	r16,r4
1000a1d4:	2809883a 	mov	r4,r5
1000a1d8:	dfc00115 	stw	ra,4(sp)
1000a1dc:	101c6615 	stw	zero,29080(r2)
1000a1e0:	000fda80 	call	1000fda8 <sbrk>
1000a1e4:	10ffffd8 	cmpnei	r3,r2,-1
1000a1e8:	18000426 	beq	r3,zero,1000a1fc <_sbrk_r+0x38>
1000a1ec:	dfc00117 	ldw	ra,4(sp)
1000a1f0:	dc000017 	ldw	r16,0(sp)
1000a1f4:	dec00204 	addi	sp,sp,8
1000a1f8:	f800283a 	ret
1000a1fc:	00c40074 	movhi	r3,4097
1000a200:	18dc6617 	ldw	r3,29080(r3)
1000a204:	183ff926 	beq	r3,zero,1000a1ec <_sbrk_r+0x28>
1000a208:	80c00015 	stw	r3,0(r16)
1000a20c:	dfc00117 	ldw	ra,4(sp)
1000a210:	dc000017 	ldw	r16,0(sp)
1000a214:	dec00204 	addi	sp,sp,8
1000a218:	f800283a 	ret

1000a21c <__sread>:
1000a21c:	defffe04 	addi	sp,sp,-8
1000a220:	dc000015 	stw	r16,0(sp)
1000a224:	2821883a 	mov	r16,r5
1000a228:	2940038f 	ldh	r5,14(r5)
1000a22c:	dfc00115 	stw	ra,4(sp)
1000a230:	000bed40 	call	1000bed4 <_read_r>
1000a234:	10000716 	blt	r2,zero,1000a254 <__sread+0x38>
1000a238:	80c01417 	ldw	r3,80(r16)
1000a23c:	1887883a 	add	r3,r3,r2
1000a240:	80c01415 	stw	r3,80(r16)
1000a244:	dfc00117 	ldw	ra,4(sp)
1000a248:	dc000017 	ldw	r16,0(sp)
1000a24c:	dec00204 	addi	sp,sp,8
1000a250:	f800283a 	ret
1000a254:	80c0030b 	ldhu	r3,12(r16)
1000a258:	18fbffcc 	andi	r3,r3,61439
1000a25c:	80c0030d 	sth	r3,12(r16)
1000a260:	dfc00117 	ldw	ra,4(sp)
1000a264:	dc000017 	ldw	r16,0(sp)
1000a268:	dec00204 	addi	sp,sp,8
1000a26c:	f800283a 	ret

1000a270 <__seofread>:
1000a270:	0005883a 	mov	r2,zero
1000a274:	f800283a 	ret

1000a278 <__swrite>:
1000a278:	2880030b 	ldhu	r2,12(r5)
1000a27c:	defffb04 	addi	sp,sp,-20
1000a280:	dcc00315 	stw	r19,12(sp)
1000a284:	dc800215 	stw	r18,8(sp)
1000a288:	dc400115 	stw	r17,4(sp)
1000a28c:	dc000015 	stw	r16,0(sp)
1000a290:	dfc00415 	stw	ra,16(sp)
1000a294:	10c0400c 	andi	r3,r2,256
1000a298:	2821883a 	mov	r16,r5
1000a29c:	2023883a 	mov	r17,r4
1000a2a0:	3025883a 	mov	r18,r6
1000a2a4:	3827883a 	mov	r19,r7
1000a2a8:	2940038f 	ldh	r5,14(r5)
1000a2ac:	18000c1e 	bne	r3,zero,1000a2e0 <__swrite+0x68>
1000a2b0:	10bbffcc 	andi	r2,r2,61439
1000a2b4:	980f883a 	mov	r7,r19
1000a2b8:	900d883a 	mov	r6,r18
1000a2bc:	8809883a 	mov	r4,r17
1000a2c0:	8080030d 	sth	r2,12(r16)
1000a2c4:	dfc00417 	ldw	ra,16(sp)
1000a2c8:	dcc00317 	ldw	r19,12(sp)
1000a2cc:	dc800217 	ldw	r18,8(sp)
1000a2d0:	dc400117 	ldw	r17,4(sp)
1000a2d4:	dc000017 	ldw	r16,0(sp)
1000a2d8:	dec00504 	addi	sp,sp,20
1000a2dc:	000b86c1 	jmpi	1000b86c <_write_r>
1000a2e0:	01c00084 	movi	r7,2
1000a2e4:	000d883a 	mov	r6,zero
1000a2e8:	000be200 	call	1000be20 <_lseek_r>
1000a2ec:	8080030b 	ldhu	r2,12(r16)
1000a2f0:	8140038f 	ldh	r5,14(r16)
1000a2f4:	003fee06 	br	1000a2b0 <__swrite+0x38>

1000a2f8 <__sseek>:
1000a2f8:	defffe04 	addi	sp,sp,-8
1000a2fc:	dc000015 	stw	r16,0(sp)
1000a300:	2821883a 	mov	r16,r5
1000a304:	2940038f 	ldh	r5,14(r5)
1000a308:	dfc00115 	stw	ra,4(sp)
1000a30c:	000be200 	call	1000be20 <_lseek_r>
1000a310:	10ffffd8 	cmpnei	r3,r2,-1
1000a314:	18000826 	beq	r3,zero,1000a338 <__sseek+0x40>
1000a318:	80c0030b 	ldhu	r3,12(r16)
1000a31c:	80801415 	stw	r2,80(r16)
1000a320:	18c40014 	ori	r3,r3,4096
1000a324:	80c0030d 	sth	r3,12(r16)
1000a328:	dfc00117 	ldw	ra,4(sp)
1000a32c:	dc000017 	ldw	r16,0(sp)
1000a330:	dec00204 	addi	sp,sp,8
1000a334:	f800283a 	ret
1000a338:	80c0030b 	ldhu	r3,12(r16)
1000a33c:	18fbffcc 	andi	r3,r3,61439
1000a340:	80c0030d 	sth	r3,12(r16)
1000a344:	dfc00117 	ldw	ra,4(sp)
1000a348:	dc000017 	ldw	r16,0(sp)
1000a34c:	dec00204 	addi	sp,sp,8
1000a350:	f800283a 	ret

1000a354 <__sclose>:
1000a354:	2940038f 	ldh	r5,14(r5)
1000a358:	000b8d01 	jmpi	1000b8d0 <_close_r>

1000a35c <__sprint_r.part.0>:
1000a35c:	28801917 	ldw	r2,100(r5)
1000a360:	defff604 	addi	sp,sp,-40
1000a364:	dd000415 	stw	r20,16(sp)
1000a368:	dfc00915 	stw	ra,36(sp)
1000a36c:	df000815 	stw	fp,32(sp)
1000a370:	ddc00715 	stw	r23,28(sp)
1000a374:	dd800615 	stw	r22,24(sp)
1000a378:	dd400515 	stw	r21,20(sp)
1000a37c:	dcc00315 	stw	r19,12(sp)
1000a380:	dc800215 	stw	r18,8(sp)
1000a384:	dc400115 	stw	r17,4(sp)
1000a388:	dc000015 	stw	r16,0(sp)
1000a38c:	1088000c 	andi	r2,r2,8192
1000a390:	3029883a 	mov	r20,r6
1000a394:	10002c26 	beq	r2,zero,1000a448 <__sprint_r.part.0+0xec>
1000a398:	30800217 	ldw	r2,8(r6)
1000a39c:	2823883a 	mov	r17,r5
1000a3a0:	2027883a 	mov	r19,r4
1000a3a4:	35400017 	ldw	r21,0(r6)
1000a3a8:	05ffff04 	movi	r23,-4
1000a3ac:	10002426 	beq	r2,zero,1000a440 <__sprint_r.part.0+0xe4>
1000a3b0:	ad800117 	ldw	r22,4(r21)
1000a3b4:	ac000017 	ldw	r16,0(r21)
1000a3b8:	b024d0ba 	srli	r18,r22,2
1000a3bc:	90001b26 	beq	r18,zero,1000a42c <__sprint_r.part.0+0xd0>
1000a3c0:	0039883a 	mov	fp,zero
1000a3c4:	00000206 	br	1000a3d0 <__sprint_r.part.0+0x74>
1000a3c8:	84000104 	addi	r16,r16,4
1000a3cc:	97001626 	beq	r18,fp,1000a428 <__sprint_r.part.0+0xcc>
1000a3d0:	81400017 	ldw	r5,0(r16)
1000a3d4:	880d883a 	mov	r6,r17
1000a3d8:	9809883a 	mov	r4,r19
1000a3dc:	000bc380 	call	1000bc38 <_fputwc_r>
1000a3e0:	10bfffe0 	cmpeqi	r2,r2,-1
1000a3e4:	e7000044 	addi	fp,fp,1
1000a3e8:	103ff726 	beq	r2,zero,1000a3c8 <__sprint_r.part.0+0x6c>
1000a3ec:	00bfffc4 	movi	r2,-1
1000a3f0:	a0000215 	stw	zero,8(r20)
1000a3f4:	a0000115 	stw	zero,4(r20)
1000a3f8:	dfc00917 	ldw	ra,36(sp)
1000a3fc:	df000817 	ldw	fp,32(sp)
1000a400:	ddc00717 	ldw	r23,28(sp)
1000a404:	dd800617 	ldw	r22,24(sp)
1000a408:	dd400517 	ldw	r21,20(sp)
1000a40c:	dd000417 	ldw	r20,16(sp)
1000a410:	dcc00317 	ldw	r19,12(sp)
1000a414:	dc800217 	ldw	r18,8(sp)
1000a418:	dc400117 	ldw	r17,4(sp)
1000a41c:	dc000017 	ldw	r16,0(sp)
1000a420:	dec00a04 	addi	sp,sp,40
1000a424:	f800283a 	ret
1000a428:	a0800217 	ldw	r2,8(r20)
1000a42c:	b5ec703a 	and	r22,r22,r23
1000a430:	1585c83a 	sub	r2,r2,r22
1000a434:	a0800215 	stw	r2,8(r20)
1000a438:	ad400204 	addi	r21,r21,8
1000a43c:	103fdc1e 	bne	r2,zero,1000a3b0 <__sprint_r.part.0+0x54>
1000a440:	0005883a 	mov	r2,zero
1000a444:	003fea06 	br	1000a3f0 <__sprint_r.part.0+0x94>
1000a448:	00079540 	call	10007954 <__sfvwrite_r>
1000a44c:	003fe806 	br	1000a3f0 <__sprint_r.part.0+0x94>

1000a450 <__sprint_r>:
1000a450:	30c00217 	ldw	r3,8(r6)
1000a454:	18000126 	beq	r3,zero,1000a45c <__sprint_r+0xc>
1000a458:	000a35c1 	jmpi	1000a35c <__sprint_r.part.0>
1000a45c:	30000115 	stw	zero,4(r6)
1000a460:	0005883a 	mov	r2,zero
1000a464:	f800283a 	ret

1000a468 <___vfiprintf_internal_r>:
1000a468:	deffd004 	addi	sp,sp,-192
1000a46c:	df002e15 	stw	fp,184(sp)
1000a470:	dcc02915 	stw	r19,164(sp)
1000a474:	dc802815 	stw	r18,160(sp)
1000a478:	dfc02f15 	stw	ra,188(sp)
1000a47c:	ddc02d15 	stw	r23,180(sp)
1000a480:	dd802c15 	stw	r22,176(sp)
1000a484:	dd402b15 	stw	r21,172(sp)
1000a488:	dd002a15 	stw	r20,168(sp)
1000a48c:	dc402715 	stw	r17,156(sp)
1000a490:	dc002615 	stw	r16,152(sp)
1000a494:	d9c00315 	stw	r7,12(sp)
1000a498:	2027883a 	mov	r19,r4
1000a49c:	2825883a 	mov	r18,r5
1000a4a0:	3039883a 	mov	fp,r6
1000a4a4:	20000226 	beq	r4,zero,1000a4b0 <___vfiprintf_internal_r+0x48>
1000a4a8:	20800e17 	ldw	r2,56(r4)
1000a4ac:	1002b626 	beq	r2,zero,1000af88 <___vfiprintf_internal_r+0xb20>
1000a4b0:	9080030b 	ldhu	r2,12(r18)
1000a4b4:	10c8000c 	andi	r3,r2,8192
1000a4b8:	1800061e 	bne	r3,zero,1000a4d4 <___vfiprintf_internal_r+0x6c>
1000a4bc:	90c01917 	ldw	r3,100(r18)
1000a4c0:	0137ffc4 	movi	r4,-8193
1000a4c4:	10880014 	ori	r2,r2,8192
1000a4c8:	1906703a 	and	r3,r3,r4
1000a4cc:	9080030d 	sth	r2,12(r18)
1000a4d0:	90c01915 	stw	r3,100(r18)
1000a4d4:	10c0020c 	andi	r3,r2,8
1000a4d8:	18009426 	beq	r3,zero,1000a72c <___vfiprintf_internal_r+0x2c4>
1000a4dc:	90c00417 	ldw	r3,16(r18)
1000a4e0:	18009226 	beq	r3,zero,1000a72c <___vfiprintf_internal_r+0x2c4>
1000a4e4:	1080068c 	andi	r2,r2,26
1000a4e8:	10800298 	cmpnei	r2,r2,10
1000a4ec:	10009726 	beq	r2,zero,1000a74c <___vfiprintf_internal_r+0x2e4>
1000a4f0:	dc401604 	addi	r17,sp,88
1000a4f4:	dc400915 	stw	r17,36(sp)
1000a4f8:	d8000b15 	stw	zero,44(sp)
1000a4fc:	d8000a15 	stw	zero,40(sp)
1000a500:	8811883a 	mov	r8,r17
1000a504:	d8000415 	stw	zero,16(sp)
1000a508:	d8000015 	stw	zero,0(sp)
1000a50c:	e0800007 	ldb	r2,0(fp)
1000a510:	1000a226 	beq	r2,zero,1000a79c <___vfiprintf_internal_r+0x334>
1000a514:	10800960 	cmpeqi	r2,r2,37
1000a518:	1003e71e 	bne	r2,zero,1000b4b8 <___vfiprintf_internal_r+0x1050>
1000a51c:	e021883a 	mov	r16,fp
1000a520:	00000206 	br	1000a52c <___vfiprintf_internal_r+0xc4>
1000a524:	18009226 	beq	r3,zero,1000a770 <___vfiprintf_internal_r+0x308>
1000a528:	a021883a 	mov	r16,r20
1000a52c:	80800047 	ldb	r2,1(r16)
1000a530:	85000044 	addi	r20,r16,1
1000a534:	10c00958 	cmpnei	r3,r2,37
1000a538:	103ffa1e 	bne	r2,zero,1000a524 <___vfiprintf_internal_r+0xbc>
1000a53c:	a72bc83a 	sub	r21,r20,fp
1000a540:	a8009626 	beq	r21,zero,1000a79c <___vfiprintf_internal_r+0x334>
1000a544:	d8c00b17 	ldw	r3,44(sp)
1000a548:	d8800a17 	ldw	r2,40(sp)
1000a54c:	47000015 	stw	fp,0(r8)
1000a550:	a8c7883a 	add	r3,r21,r3
1000a554:	10800044 	addi	r2,r2,1
1000a558:	d8800a15 	stw	r2,40(sp)
1000a55c:	45400115 	stw	r21,4(r8)
1000a560:	d8c00b15 	stw	r3,44(sp)
1000a564:	10800208 	cmpgei	r2,r2,8
1000a568:	1000841e 	bne	r2,zero,1000a77c <___vfiprintf_internal_r+0x314>
1000a56c:	42000204 	addi	r8,r8,8
1000a570:	d8c00017 	ldw	r3,0(sp)
1000a574:	80800047 	ldb	r2,1(r16)
1000a578:	1d47883a 	add	r3,r3,r21
1000a57c:	d8c00015 	stw	r3,0(sp)
1000a580:	10008626 	beq	r2,zero,1000a79c <___vfiprintf_internal_r+0x334>
1000a584:	a0800047 	ldb	r2,1(r20)
1000a588:	a7000044 	addi	fp,r20,1
1000a58c:	d8000845 	stb	zero,33(sp)
1000a590:	000b883a 	mov	r5,zero
1000a594:	000d883a 	mov	r6,zero
1000a598:	027fffc4 	movi	r9,-1
1000a59c:	0021883a 	mov	r16,zero
1000a5a0:	0019883a 	mov	r12,zero
1000a5a4:	e7000044 	addi	fp,fp,1
1000a5a8:	10fff804 	addi	r3,r2,-32
1000a5ac:	19001668 	cmpgeui	r4,r3,89
1000a5b0:	20009c1e 	bne	r4,zero,1000a824 <___vfiprintf_internal_r+0x3bc>
1000a5b4:	180690ba 	slli	r3,r3,2
1000a5b8:	01040074 	movhi	r4,4097
1000a5bc:	1909883a 	add	r4,r3,r4
1000a5c0:	20e97217 	ldw	r3,-23096(r4)
1000a5c4:	1800683a 	jmp	r3
1000a5c8:	1000a8f4 	orhi	zero,r2,675
1000a5cc:	1000a824 	muli	zero,r2,672
1000a5d0:	1000a824 	muli	zero,r2,672
1000a5d4:	1000a8e8 	cmpgeui	zero,r2,675
1000a5d8:	1000a824 	muli	zero,r2,672
1000a5dc:	1000a824 	muli	zero,r2,672
1000a5e0:	1000a824 	muli	zero,r2,672
1000a5e4:	1000a824 	muli	zero,r2,672
1000a5e8:	1000a824 	muli	zero,r2,672
1000a5ec:	1000a824 	muli	zero,r2,672
1000a5f0:	1000a8c0 	call	11000a8c <_gp+0xfe3b5c>
1000a5f4:	1000a8b0 	cmpltui	zero,r2,674
1000a5f8:	1000a824 	muli	zero,r2,672
1000a5fc:	1000a898 	cmpnei	zero,r2,674
1000a600:	1000a854 	ori	zero,r2,673
1000a604:	1000a824 	muli	zero,r2,672
1000a608:	1000a848 	cmpgei	zero,r2,673
1000a60c:	1000a7f4 	orhi	zero,r2,671
1000a610:	1000a7f4 	orhi	zero,r2,671
1000a614:	1000a7f4 	orhi	zero,r2,671
1000a618:	1000a7f4 	orhi	zero,r2,671
1000a61c:	1000a7f4 	orhi	zero,r2,671
1000a620:	1000a7f4 	orhi	zero,r2,671
1000a624:	1000a7f4 	orhi	zero,r2,671
1000a628:	1000a7f4 	orhi	zero,r2,671
1000a62c:	1000a7f4 	orhi	zero,r2,671
1000a630:	1000a824 	muli	zero,r2,672
1000a634:	1000a824 	muli	zero,r2,672
1000a638:	1000a824 	muli	zero,r2,672
1000a63c:	1000a824 	muli	zero,r2,672
1000a640:	1000a824 	muli	zero,r2,672
1000a644:	1000a824 	muli	zero,r2,672
1000a648:	1000a824 	muli	zero,r2,672
1000a64c:	1000a824 	muli	zero,r2,672
1000a650:	1000a824 	muli	zero,r2,672
1000a654:	1000a824 	muli	zero,r2,672
1000a658:	1000aeb0 	cmpltui	zero,r2,698
1000a65c:	1000a824 	muli	zero,r2,672
1000a660:	1000a824 	muli	zero,r2,672
1000a664:	1000a824 	muli	zero,r2,672
1000a668:	1000a824 	muli	zero,r2,672
1000a66c:	1000a824 	muli	zero,r2,672
1000a670:	1000a824 	muli	zero,r2,672
1000a674:	1000a824 	muli	zero,r2,672
1000a678:	1000a824 	muli	zero,r2,672
1000a67c:	1000a824 	muli	zero,r2,672
1000a680:	1000a824 	muli	zero,r2,672
1000a684:	1000ae48 	cmpgei	zero,r2,697
1000a688:	1000a824 	muli	zero,r2,672
1000a68c:	1000a824 	muli	zero,r2,672
1000a690:	1000a824 	muli	zero,r2,672
1000a694:	1000a824 	muli	zero,r2,672
1000a698:	1000a824 	muli	zero,r2,672
1000a69c:	1000ae7c 	xorhi	zero,r2,697
1000a6a0:	1000a824 	muli	zero,r2,672
1000a6a4:	1000a824 	muli	zero,r2,672
1000a6a8:	1000aa4c 	andi	zero,r2,681
1000a6ac:	1000a824 	muli	zero,r2,672
1000a6b0:	1000a824 	muli	zero,r2,672
1000a6b4:	1000a824 	muli	zero,r2,672
1000a6b8:	1000a824 	muli	zero,r2,672
1000a6bc:	1000a824 	muli	zero,r2,672
1000a6c0:	1000a824 	muli	zero,r2,672
1000a6c4:	1000a824 	muli	zero,r2,672
1000a6c8:	1000a824 	muli	zero,r2,672
1000a6cc:	1000a824 	muli	zero,r2,672
1000a6d0:	1000a824 	muli	zero,r2,672
1000a6d4:	1000abe8 	cmpgeui	zero,r2,687
1000a6d8:	1000ab74 	orhi	zero,r2,685
1000a6dc:	1000a824 	muli	zero,r2,672
1000a6e0:	1000a824 	muli	zero,r2,672
1000a6e4:	1000a824 	muli	zero,r2,672
1000a6e8:	1000a97c 	xorhi	zero,r2,677
1000a6ec:	1000ab74 	orhi	zero,r2,685
1000a6f0:	1000a824 	muli	zero,r2,672
1000a6f4:	1000a824 	muli	zero,r2,672
1000a6f8:	1000a968 	cmpgeui	zero,r2,677
1000a6fc:	1000a824 	muli	zero,r2,672
1000a700:	1000ab34 	orhi	zero,r2,684
1000a704:	1000aa0c 	andi	zero,r2,680
1000a708:	1000a994 	ori	zero,r2,678
1000a70c:	1000a988 	cmpgei	zero,r2,678
1000a710:	1000a824 	muli	zero,r2,672
1000a714:	1000aad4 	ori	zero,r2,683
1000a718:	1000a824 	muli	zero,r2,672
1000a71c:	1000aa94 	ori	zero,r2,682
1000a720:	1000a824 	muli	zero,r2,672
1000a724:	1000a824 	muli	zero,r2,672
1000a728:	1000a920 	cmpeqi	zero,r2,676
1000a72c:	900b883a 	mov	r5,r18
1000a730:	9809883a 	mov	r4,r19
1000a734:	00055100 	call	10005510 <__swsetup_r>
1000a738:	1004071e 	bne	r2,zero,1000b758 <___vfiprintf_internal_r+0x12f0>
1000a73c:	9080030b 	ldhu	r2,12(r18)
1000a740:	1080068c 	andi	r2,r2,26
1000a744:	10800298 	cmpnei	r2,r2,10
1000a748:	103f691e 	bne	r2,zero,1000a4f0 <___vfiprintf_internal_r+0x88>
1000a74c:	9080038f 	ldh	r2,14(r18)
1000a750:	103f6716 	blt	r2,zero,1000a4f0 <___vfiprintf_internal_r+0x88>
1000a754:	d9c00317 	ldw	r7,12(sp)
1000a758:	e00d883a 	mov	r6,fp
1000a75c:	900b883a 	mov	r5,r18
1000a760:	9809883a 	mov	r4,r19
1000a764:	000b7ac0 	call	1000b7ac <__sbprintf>
1000a768:	d8800015 	stw	r2,0(sp)
1000a76c:	00001406 	br	1000a7c0 <___vfiprintf_internal_r+0x358>
1000a770:	a72bc83a 	sub	r21,r20,fp
1000a774:	a83f8326 	beq	r21,zero,1000a584 <___vfiprintf_internal_r+0x11c>
1000a778:	003f7206 	br	1000a544 <___vfiprintf_internal_r+0xdc>
1000a77c:	18032b26 	beq	r3,zero,1000b42c <___vfiprintf_internal_r+0xfc4>
1000a780:	d9800904 	addi	r6,sp,36
1000a784:	900b883a 	mov	r5,r18
1000a788:	9809883a 	mov	r4,r19
1000a78c:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000a790:	1000081e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000a794:	8811883a 	mov	r8,r17
1000a798:	003f7506 	br	1000a570 <___vfiprintf_internal_r+0x108>
1000a79c:	d8800b17 	ldw	r2,44(sp)
1000a7a0:	10000426 	beq	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000a7a4:	d9800904 	addi	r6,sp,36
1000a7a8:	900b883a 	mov	r5,r18
1000a7ac:	9809883a 	mov	r4,r19
1000a7b0:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000a7b4:	9080030b 	ldhu	r2,12(r18)
1000a7b8:	1080100c 	andi	r2,r2,64
1000a7bc:	1003e61e 	bne	r2,zero,1000b758 <___vfiprintf_internal_r+0x12f0>
1000a7c0:	d8800017 	ldw	r2,0(sp)
1000a7c4:	dfc02f17 	ldw	ra,188(sp)
1000a7c8:	df002e17 	ldw	fp,184(sp)
1000a7cc:	ddc02d17 	ldw	r23,180(sp)
1000a7d0:	dd802c17 	ldw	r22,176(sp)
1000a7d4:	dd402b17 	ldw	r21,172(sp)
1000a7d8:	dd002a17 	ldw	r20,168(sp)
1000a7dc:	dcc02917 	ldw	r19,164(sp)
1000a7e0:	dc802817 	ldw	r18,160(sp)
1000a7e4:	dc402717 	ldw	r17,156(sp)
1000a7e8:	dc002617 	ldw	r16,152(sp)
1000a7ec:	dec03004 	addi	sp,sp,192
1000a7f0:	f800283a 	ret
1000a7f4:	0021883a 	mov	r16,zero
1000a7f8:	10fff404 	addi	r3,r2,-48
1000a7fc:	e7000044 	addi	fp,fp,1
1000a800:	840002a4 	muli	r16,r16,10
1000a804:	e0bfffc7 	ldb	r2,-1(fp)
1000a808:	1c21883a 	add	r16,r3,r16
1000a80c:	10fff404 	addi	r3,r2,-48
1000a810:	190002b0 	cmpltui	r4,r3,10
1000a814:	203ff91e 	bne	r4,zero,1000a7fc <___vfiprintf_internal_r+0x394>
1000a818:	10fff804 	addi	r3,r2,-32
1000a81c:	19001668 	cmpgeui	r4,r3,89
1000a820:	203f6426 	beq	r4,zero,1000a5b4 <___vfiprintf_internal_r+0x14c>
1000a824:	29403fcc 	andi	r5,r5,255
1000a828:	2803a91e 	bne	r5,zero,1000b6d0 <___vfiprintf_internal_r+0x1268>
1000a82c:	103fdb26 	beq	r2,zero,1000a79c <___vfiprintf_internal_r+0x334>
1000a830:	d8800c05 	stb	r2,48(sp)
1000a834:	d8000845 	stb	zero,33(sp)
1000a838:	05400044 	movi	r21,1
1000a83c:	05800044 	movi	r22,1
1000a840:	ddc00c04 	addi	r23,sp,48
1000a844:	0000f106 	br	1000ac0c <___vfiprintf_internal_r+0x7a4>
1000a848:	63002014 	ori	r12,r12,128
1000a84c:	e0800007 	ldb	r2,0(fp)
1000a850:	003f5406 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a854:	e0800007 	ldb	r2,0(fp)
1000a858:	e1000044 	addi	r4,fp,1
1000a85c:	10c00aa0 	cmpeqi	r3,r2,42
1000a860:	1803c01e 	bne	r3,zero,1000b764 <___vfiprintf_internal_r+0x12fc>
1000a864:	10fff404 	addi	r3,r2,-48
1000a868:	19c002b0 	cmpltui	r7,r3,10
1000a86c:	2039883a 	mov	fp,r4
1000a870:	0013883a 	mov	r9,zero
1000a874:	383f4c26 	beq	r7,zero,1000a5a8 <___vfiprintf_internal_r+0x140>
1000a878:	e7000044 	addi	fp,fp,1
1000a87c:	4a4002a4 	muli	r9,r9,10
1000a880:	e0bfffc7 	ldb	r2,-1(fp)
1000a884:	48d3883a 	add	r9,r9,r3
1000a888:	10fff404 	addi	r3,r2,-48
1000a88c:	190002b0 	cmpltui	r4,r3,10
1000a890:	203ff91e 	bne	r4,zero,1000a878 <___vfiprintf_internal_r+0x410>
1000a894:	003f4406 	br	1000a5a8 <___vfiprintf_internal_r+0x140>
1000a898:	e0800003 	ldbu	r2,0(fp)
1000a89c:	10803fcc 	andi	r2,r2,255
1000a8a0:	1080201c 	xori	r2,r2,128
1000a8a4:	63000114 	ori	r12,r12,4
1000a8a8:	10bfe004 	addi	r2,r2,-128
1000a8ac:	003f3d06 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a8b0:	01400044 	movi	r5,1
1000a8b4:	01800ac4 	movi	r6,43
1000a8b8:	e0800007 	ldb	r2,0(fp)
1000a8bc:	003f3906 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a8c0:	d8800317 	ldw	r2,12(sp)
1000a8c4:	14000017 	ldw	r16,0(r2)
1000a8c8:	15c00104 	addi	r23,r2,4
1000a8cc:	e0800003 	ldbu	r2,0(fp)
1000a8d0:	80031416 	blt	r16,zero,1000b524 <___vfiprintf_internal_r+0x10bc>
1000a8d4:	ddc00315 	stw	r23,12(sp)
1000a8d8:	10803fcc 	andi	r2,r2,255
1000a8dc:	1080201c 	xori	r2,r2,128
1000a8e0:	10bfe004 	addi	r2,r2,-128
1000a8e4:	003f2f06 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a8e8:	63000054 	ori	r12,r12,1
1000a8ec:	e0800007 	ldb	r2,0(fp)
1000a8f0:	003f2c06 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a8f4:	30c03fcc 	andi	r3,r6,255
1000a8f8:	18c0201c 	xori	r3,r3,128
1000a8fc:	18ffe004 	addi	r3,r3,-128
1000a900:	e0800003 	ldbu	r2,0(fp)
1000a904:	183ff41e 	bne	r3,zero,1000a8d8 <___vfiprintf_internal_r+0x470>
1000a908:	10803fcc 	andi	r2,r2,255
1000a90c:	1080201c 	xori	r2,r2,128
1000a910:	01400044 	movi	r5,1
1000a914:	01800804 	movi	r6,32
1000a918:	10bfe004 	addi	r2,r2,-128
1000a91c:	003f2106 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a920:	29403fcc 	andi	r5,r5,255
1000a924:	2803741e 	bne	r5,zero,1000b6f8 <___vfiprintf_internal_r+0x1290>
1000a928:	00c40074 	movhi	r3,4097
1000a92c:	18c9fd04 	addi	r3,r3,10228
1000a930:	d8c00415 	stw	r3,16(sp)
1000a934:	60c0080c 	andi	r3,r12,32
1000a938:	18004b26 	beq	r3,zero,1000aa68 <___vfiprintf_internal_r+0x600>
1000a93c:	d8c00317 	ldw	r3,12(sp)
1000a940:	1d400017 	ldw	r21,0(r3)
1000a944:	1d800117 	ldw	r22,4(r3)
1000a948:	18c00204 	addi	r3,r3,8
1000a94c:	d8c00315 	stw	r3,12(sp)
1000a950:	60c0004c 	andi	r3,r12,1
1000a954:	18000226 	beq	r3,zero,1000a960 <___vfiprintf_internal_r+0x4f8>
1000a958:	ad86b03a 	or	r3,r21,r22
1000a95c:	1802df1e 	bne	r3,zero,1000b4dc <___vfiprintf_internal_r+0x1074>
1000a960:	00800084 	movi	r2,2
1000a964:	00001906 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000a968:	e0800007 	ldb	r2,0(fp)
1000a96c:	10c01b18 	cmpnei	r3,r2,108
1000a970:	18033026 	beq	r3,zero,1000b634 <___vfiprintf_internal_r+0x11cc>
1000a974:	63000414 	ori	r12,r12,16
1000a978:	003f0a06 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a97c:	63001014 	ori	r12,r12,64
1000a980:	e0800007 	ldb	r2,0(fp)
1000a984:	003f0706 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a988:	63000814 	ori	r12,r12,32
1000a98c:	e0800007 	ldb	r2,0(fp)
1000a990:	003f0406 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000a994:	d8c00317 	ldw	r3,12(sp)
1000a998:	00800c04 	movi	r2,48
1000a99c:	d8800885 	stb	r2,34(sp)
1000a9a0:	00801e04 	movi	r2,120
1000a9a4:	01040074 	movhi	r4,4097
1000a9a8:	d88008c5 	stb	r2,35(sp)
1000a9ac:	1d400017 	ldw	r21,0(r3)
1000a9b0:	18800104 	addi	r2,r3,4
1000a9b4:	d8800315 	stw	r2,12(sp)
1000a9b8:	2089fd04 	addi	r2,r4,10228
1000a9bc:	d8800415 	stw	r2,16(sp)
1000a9c0:	002d883a 	mov	r22,zero
1000a9c4:	63000094 	ori	r12,r12,2
1000a9c8:	00800084 	movi	r2,2
1000a9cc:	d8000845 	stb	zero,33(sp)
1000a9d0:	48ffffe0 	cmpeqi	r3,r9,-1
1000a9d4:	001b883a 	mov	r13,zero
1000a9d8:	18014c1e 	bne	r3,zero,1000af0c <___vfiprintf_internal_r+0xaa4>
1000a9dc:	053fdfc4 	movi	r20,-129
1000a9e0:	ad86b03a 	or	r3,r21,r22
1000a9e4:	6528703a 	and	r20,r12,r20
1000a9e8:	1802411e 	bne	r3,zero,1000b2f0 <___vfiprintf_internal_r+0xe88>
1000a9ec:	48030d1e 	bne	r9,zero,1000b624 <___vfiprintf_internal_r+0x11bc>
1000a9f0:	1000791e 	bne	r2,zero,1000abd8 <___vfiprintf_internal_r+0x770>
1000a9f4:	6580004c 	andi	r22,r12,1
1000a9f8:	b002b126 	beq	r22,zero,1000b4c0 <___vfiprintf_internal_r+0x1058>
1000a9fc:	00800c04 	movi	r2,48
1000aa00:	d88015c5 	stb	r2,87(sp)
1000aa04:	ddc015c4 	addi	r23,sp,87
1000aa08:	00017e06 	br	1000b004 <___vfiprintf_internal_r+0xb9c>
1000aa0c:	29403fcc 	andi	r5,r5,255
1000aa10:	2803461e 	bne	r5,zero,1000b72c <___vfiprintf_internal_r+0x12c4>
1000aa14:	6080080c 	andi	r2,r12,32
1000aa18:	10016b1e 	bne	r2,zero,1000afc8 <___vfiprintf_internal_r+0xb60>
1000aa1c:	d8800317 	ldw	r2,12(sp)
1000aa20:	60c0040c 	andi	r3,r12,16
1000aa24:	15400017 	ldw	r21,0(r2)
1000aa28:	10800104 	addi	r2,r2,4
1000aa2c:	18010d1e 	bne	r3,zero,1000ae64 <___vfiprintf_internal_r+0x9fc>
1000aa30:	60c0100c 	andi	r3,r12,64
1000aa34:	18031326 	beq	r3,zero,1000b684 <___vfiprintf_internal_r+0x121c>
1000aa38:	d8800315 	stw	r2,12(sp)
1000aa3c:	ad7fffcc 	andi	r21,r21,65535
1000aa40:	002d883a 	mov	r22,zero
1000aa44:	0005883a 	mov	r2,zero
1000aa48:	003fe006 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000aa4c:	29403fcc 	andi	r5,r5,255
1000aa50:	2803251e 	bne	r5,zero,1000b6e8 <___vfiprintf_internal_r+0x1280>
1000aa54:	00c40074 	movhi	r3,4097
1000aa58:	18c9f804 	addi	r3,r3,10208
1000aa5c:	d8c00415 	stw	r3,16(sp)
1000aa60:	60c0080c 	andi	r3,r12,32
1000aa64:	183fb51e 	bne	r3,zero,1000a93c <___vfiprintf_internal_r+0x4d4>
1000aa68:	d9000317 	ldw	r4,12(sp)
1000aa6c:	60c0040c 	andi	r3,r12,16
1000aa70:	25400017 	ldw	r21,0(r4)
1000aa74:	21000104 	addi	r4,r4,4
1000aa78:	d9000315 	stw	r4,12(sp)
1000aa7c:	18026e1e 	bne	r3,zero,1000b438 <___vfiprintf_internal_r+0xfd0>
1000aa80:	60c0100c 	andi	r3,r12,64
1000aa84:	18026c26 	beq	r3,zero,1000b438 <___vfiprintf_internal_r+0xfd0>
1000aa88:	ad7fffcc 	andi	r21,r21,65535
1000aa8c:	002d883a 	mov	r22,zero
1000aa90:	003faf06 	br	1000a950 <___vfiprintf_internal_r+0x4e8>
1000aa94:	29403fcc 	andi	r5,r5,255
1000aa98:	2803151e 	bne	r5,zero,1000b6f0 <___vfiprintf_internal_r+0x1288>
1000aa9c:	6080080c 	andi	r2,r12,32
1000aaa0:	10013b1e 	bne	r2,zero,1000af90 <___vfiprintf_internal_r+0xb28>
1000aaa4:	d8800317 	ldw	r2,12(sp)
1000aaa8:	60c0040c 	andi	r3,r12,16
1000aaac:	15400017 	ldw	r21,0(r2)
1000aab0:	10800104 	addi	r2,r2,4
1000aab4:	1800f81e 	bne	r3,zero,1000ae98 <___vfiprintf_internal_r+0xa30>
1000aab8:	60c0100c 	andi	r3,r12,64
1000aabc:	1802ed26 	beq	r3,zero,1000b674 <___vfiprintf_internal_r+0x120c>
1000aac0:	d8800315 	stw	r2,12(sp)
1000aac4:	ad7fffcc 	andi	r21,r21,65535
1000aac8:	002d883a 	mov	r22,zero
1000aacc:	00800044 	movi	r2,1
1000aad0:	003fbe06 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000aad4:	d8800317 	ldw	r2,12(sp)
1000aad8:	d8000845 	stb	zero,33(sp)
1000aadc:	15c00017 	ldw	r23,0(r2)
1000aae0:	15000104 	addi	r20,r2,4
1000aae4:	b802da26 	beq	r23,zero,1000b650 <___vfiprintf_internal_r+0x11e8>
1000aae8:	48bfffe0 	cmpeqi	r2,r9,-1
1000aaec:	1002901e 	bne	r2,zero,1000b530 <___vfiprintf_internal_r+0x10c8>
1000aaf0:	480d883a 	mov	r6,r9
1000aaf4:	000b883a 	mov	r5,zero
1000aaf8:	b809883a 	mov	r4,r23
1000aafc:	da000315 	stw	r8,12(sp)
1000ab00:	db000215 	stw	r12,8(sp)
1000ab04:	da400115 	stw	r9,4(sp)
1000ab08:	00089580 	call	10008958 <memchr>
1000ab0c:	da400117 	ldw	r9,4(sp)
1000ab10:	db000217 	ldw	r12,8(sp)
1000ab14:	da000317 	ldw	r8,12(sp)
1000ab18:	1002ef26 	beq	r2,zero,1000b6d8 <___vfiprintf_internal_r+0x1270>
1000ab1c:	15edc83a 	sub	r22,r2,r23
1000ab20:	b02b883a 	mov	r21,r22
1000ab24:	b000010e 	bge	r22,zero,1000ab2c <___vfiprintf_internal_r+0x6c4>
1000ab28:	002b883a 	mov	r21,zero
1000ab2c:	dd000315 	stw	r20,12(sp)
1000ab30:	00003606 	br	1000ac0c <___vfiprintf_internal_r+0x7a4>
1000ab34:	29403fcc 	andi	r5,r5,255
1000ab38:	2802fa1e 	bne	r5,zero,1000b724 <___vfiprintf_internal_r+0x12bc>
1000ab3c:	d9000317 	ldw	r4,12(sp)
1000ab40:	6080080c 	andi	r2,r12,32
1000ab44:	20c00104 	addi	r3,r4,4
1000ab48:	10026a1e 	bne	r2,zero,1000b4f4 <___vfiprintf_internal_r+0x108c>
1000ab4c:	6080040c 	andi	r2,r12,16
1000ab50:	1002891e 	bne	r2,zero,1000b578 <___vfiprintf_internal_r+0x1110>
1000ab54:	6300100c 	andi	r12,r12,64
1000ab58:	60028726 	beq	r12,zero,1000b578 <___vfiprintf_internal_r+0x1110>
1000ab5c:	d8800317 	ldw	r2,12(sp)
1000ab60:	d8c00315 	stw	r3,12(sp)
1000ab64:	d8c00017 	ldw	r3,0(sp)
1000ab68:	10800017 	ldw	r2,0(r2)
1000ab6c:	10c0000d 	sth	r3,0(r2)
1000ab70:	003e6606 	br	1000a50c <___vfiprintf_internal_r+0xa4>
1000ab74:	29403fcc 	andi	r5,r5,255
1000ab78:	2802e81e 	bne	r5,zero,1000b71c <___vfiprintf_internal_r+0x12b4>
1000ab7c:	6080080c 	andi	r2,r12,32
1000ab80:	10010a1e 	bne	r2,zero,1000afac <___vfiprintf_internal_r+0xb44>
1000ab84:	d8800317 	ldw	r2,12(sp)
1000ab88:	60c0040c 	andi	r3,r12,16
1000ab8c:	10800104 	addi	r2,r2,4
1000ab90:	1800ce1e 	bne	r3,zero,1000aecc <___vfiprintf_internal_r+0xa64>
1000ab94:	60c0100c 	andi	r3,r12,64
1000ab98:	1800cc26 	beq	r3,zero,1000aecc <___vfiprintf_internal_r+0xa64>
1000ab9c:	d8c00317 	ldw	r3,12(sp)
1000aba0:	d8800315 	stw	r2,12(sp)
1000aba4:	1d40000f 	ldh	r21,0(r3)
1000aba8:	a82dd7fa 	srai	r22,r21,31
1000abac:	b005883a 	mov	r2,r22
1000abb0:	1000cc16 	blt	r2,zero,1000aee4 <___vfiprintf_internal_r+0xa7c>
1000abb4:	48bfffd8 	cmpnei	r2,r9,-1
1000abb8:	db400843 	ldbu	r13,33(sp)
1000abbc:	10010926 	beq	r2,zero,1000afe4 <___vfiprintf_internal_r+0xb7c>
1000abc0:	00ffdfc4 	movi	r3,-129
1000abc4:	ad84b03a 	or	r2,r21,r22
1000abc8:	60d8703a 	and	r12,r12,r3
1000abcc:	1001051e 	bne	r2,zero,1000afe4 <___vfiprintf_internal_r+0xb7c>
1000abd0:	4801071e 	bne	r9,zero,1000aff0 <___vfiprintf_internal_r+0xb88>
1000abd4:	6029883a 	mov	r20,r12
1000abd8:	0013883a 	mov	r9,zero
1000abdc:	002d883a 	mov	r22,zero
1000abe0:	882f883a 	mov	r23,r17
1000abe4:	00010706 	br	1000b004 <___vfiprintf_internal_r+0xb9c>
1000abe8:	d8c00317 	ldw	r3,12(sp)
1000abec:	d8000845 	stb	zero,33(sp)
1000abf0:	05400044 	movi	r21,1
1000abf4:	18800017 	ldw	r2,0(r3)
1000abf8:	18c00104 	addi	r3,r3,4
1000abfc:	d8c00315 	stw	r3,12(sp)
1000ac00:	d8800c05 	stb	r2,48(sp)
1000ac04:	05800044 	movi	r22,1
1000ac08:	ddc00c04 	addi	r23,sp,48
1000ac0c:	6029883a 	mov	r20,r12
1000ac10:	0013883a 	mov	r9,zero
1000ac14:	a340008c 	andi	r13,r20,2
1000ac18:	68000126 	beq	r13,zero,1000ac20 <___vfiprintf_internal_r+0x7b8>
1000ac1c:	ad400084 	addi	r21,r21,2
1000ac20:	d9000a17 	ldw	r4,40(sp)
1000ac24:	a300210c 	andi	r12,r20,132
1000ac28:	d8800b17 	ldw	r2,44(sp)
1000ac2c:	21800044 	addi	r6,r4,1
1000ac30:	300b883a 	mov	r5,r6
1000ac34:	6000021e 	bne	r12,zero,1000ac40 <___vfiprintf_internal_r+0x7d8>
1000ac38:	8547c83a 	sub	r3,r16,r21
1000ac3c:	00c1ae16 	blt	zero,r3,1000b2f8 <___vfiprintf_internal_r+0xe90>
1000ac40:	d9800847 	ldb	r6,33(sp)
1000ac44:	40c00204 	addi	r3,r8,8
1000ac48:	30000d26 	beq	r6,zero,1000ac80 <___vfiprintf_internal_r+0x818>
1000ac4c:	d9000844 	addi	r4,sp,33
1000ac50:	10800044 	addi	r2,r2,1
1000ac54:	41000015 	stw	r4,0(r8)
1000ac58:	01000044 	movi	r4,1
1000ac5c:	41000115 	stw	r4,4(r8)
1000ac60:	d8800b15 	stw	r2,44(sp)
1000ac64:	d9400a15 	stw	r5,40(sp)
1000ac68:	29000208 	cmpgei	r4,r5,8
1000ac6c:	2001831e 	bne	r4,zero,1000b27c <___vfiprintf_internal_r+0xe14>
1000ac70:	2809883a 	mov	r4,r5
1000ac74:	1811883a 	mov	r8,r3
1000ac78:	29400044 	addi	r5,r5,1
1000ac7c:	18c00204 	addi	r3,r3,8
1000ac80:	68001826 	beq	r13,zero,1000ace4 <___vfiprintf_internal_r+0x87c>
1000ac84:	d9000884 	addi	r4,sp,34
1000ac88:	10800084 	addi	r2,r2,2
1000ac8c:	41000015 	stw	r4,0(r8)
1000ac90:	01000084 	movi	r4,2
1000ac94:	41000115 	stw	r4,4(r8)
1000ac98:	d8800b15 	stw	r2,44(sp)
1000ac9c:	d9400a15 	stw	r5,40(sp)
1000aca0:	29000208 	cmpgei	r4,r5,8
1000aca4:	20018d26 	beq	r4,zero,1000b2dc <___vfiprintf_internal_r+0xe74>
1000aca8:	1001ed26 	beq	r2,zero,1000b460 <___vfiprintf_internal_r+0xff8>
1000acac:	d9800904 	addi	r6,sp,36
1000acb0:	900b883a 	mov	r5,r18
1000acb4:	9809883a 	mov	r4,r19
1000acb8:	da400215 	stw	r9,8(sp)
1000acbc:	db000115 	stw	r12,4(sp)
1000acc0:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000acc4:	103ebb1e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000acc8:	d9000a17 	ldw	r4,40(sp)
1000accc:	d8800b17 	ldw	r2,44(sp)
1000acd0:	da400217 	ldw	r9,8(sp)
1000acd4:	db000117 	ldw	r12,4(sp)
1000acd8:	d8c01804 	addi	r3,sp,96
1000acdc:	21400044 	addi	r5,r4,1
1000ace0:	8811883a 	mov	r8,r17
1000ace4:	63002018 	cmpnei	r12,r12,128
1000ace8:	6000e326 	beq	r12,zero,1000b078 <___vfiprintf_internal_r+0xc10>
1000acec:	4d93c83a 	sub	r9,r9,r22
1000acf0:	02412216 	blt	zero,r9,1000b17c <___vfiprintf_internal_r+0xd14>
1000acf4:	b085883a 	add	r2,r22,r2
1000acf8:	d9400a15 	stw	r5,40(sp)
1000acfc:	45c00015 	stw	r23,0(r8)
1000ad00:	45800115 	stw	r22,4(r8)
1000ad04:	d8800b15 	stw	r2,44(sp)
1000ad08:	29400210 	cmplti	r5,r5,8
1000ad0c:	2800081e 	bne	r5,zero,1000ad30 <___vfiprintf_internal_r+0x8c8>
1000ad10:	10001426 	beq	r2,zero,1000ad64 <___vfiprintf_internal_r+0x8fc>
1000ad14:	d9800904 	addi	r6,sp,36
1000ad18:	900b883a 	mov	r5,r18
1000ad1c:	9809883a 	mov	r4,r19
1000ad20:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000ad24:	103ea31e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000ad28:	d8800b17 	ldw	r2,44(sp)
1000ad2c:	8807883a 	mov	r3,r17
1000ad30:	a500010c 	andi	r20,r20,4
1000ad34:	a0000226 	beq	r20,zero,1000ad40 <___vfiprintf_internal_r+0x8d8>
1000ad38:	8569c83a 	sub	r20,r16,r21
1000ad3c:	05000f16 	blt	zero,r20,1000ad7c <___vfiprintf_internal_r+0x914>
1000ad40:	8540010e 	bge	r16,r21,1000ad48 <___vfiprintf_internal_r+0x8e0>
1000ad44:	a821883a 	mov	r16,r21
1000ad48:	d8c00017 	ldw	r3,0(sp)
1000ad4c:	1c07883a 	add	r3,r3,r16
1000ad50:	d8c00015 	stw	r3,0(sp)
1000ad54:	10013f1e 	bne	r2,zero,1000b254 <___vfiprintf_internal_r+0xdec>
1000ad58:	d8000a15 	stw	zero,40(sp)
1000ad5c:	8811883a 	mov	r8,r17
1000ad60:	003dea06 	br	1000a50c <___vfiprintf_internal_r+0xa4>
1000ad64:	d8000a15 	stw	zero,40(sp)
1000ad68:	a500010c 	andi	r20,r20,4
1000ad6c:	a0019d26 	beq	r20,zero,1000b3e4 <___vfiprintf_internal_r+0xf7c>
1000ad70:	8569c83a 	sub	r20,r16,r21
1000ad74:	05019b0e 	bge	zero,r20,1000b3e4 <___vfiprintf_internal_r+0xf7c>
1000ad78:	8807883a 	mov	r3,r17
1000ad7c:	a1000450 	cmplti	r4,r20,17
1000ad80:	01c40074 	movhi	r7,4097
1000ad84:	d9400a17 	ldw	r5,40(sp)
1000ad88:	20026c1e 	bne	r4,zero,1000b73c <___vfiprintf_internal_r+0x12d4>
1000ad8c:	39ca5e04 	addi	r7,r7,10616
1000ad90:	05800404 	movi	r22,16
1000ad94:	00000606 	br	1000adb0 <___vfiprintf_internal_r+0x948>
1000ad98:	29800084 	addi	r6,r5,2
1000ad9c:	18c00204 	addi	r3,r3,8
1000ada0:	200b883a 	mov	r5,r4
1000ada4:	a53ffc04 	addi	r20,r20,-16
1000ada8:	a1000448 	cmpgei	r4,r20,17
1000adac:	20001726 	beq	r4,zero,1000ae0c <___vfiprintf_internal_r+0x9a4>
1000adb0:	29000044 	addi	r4,r5,1
1000adb4:	10800404 	addi	r2,r2,16
1000adb8:	19c00015 	stw	r7,0(r3)
1000adbc:	1d800115 	stw	r22,4(r3)
1000adc0:	d8800b15 	stw	r2,44(sp)
1000adc4:	d9000a15 	stw	r4,40(sp)
1000adc8:	21800208 	cmpgei	r6,r4,8
1000adcc:	303ff226 	beq	r6,zero,1000ad98 <___vfiprintf_internal_r+0x930>
1000add0:	d9800904 	addi	r6,sp,36
1000add4:	900b883a 	mov	r5,r18
1000add8:	9809883a 	mov	r4,r19
1000addc:	1000a226 	beq	r2,zero,1000b068 <___vfiprintf_internal_r+0xc00>
1000ade0:	d9c00115 	stw	r7,4(sp)
1000ade4:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000ade8:	103e721e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000adec:	d9400a17 	ldw	r5,40(sp)
1000adf0:	a53ffc04 	addi	r20,r20,-16
1000adf4:	a1000448 	cmpgei	r4,r20,17
1000adf8:	d8800b17 	ldw	r2,44(sp)
1000adfc:	8807883a 	mov	r3,r17
1000ae00:	29800044 	addi	r6,r5,1
1000ae04:	d9c00117 	ldw	r7,4(sp)
1000ae08:	203fe91e 	bne	r4,zero,1000adb0 <___vfiprintf_internal_r+0x948>
1000ae0c:	1505883a 	add	r2,r2,r20
1000ae10:	d9800a15 	stw	r6,40(sp)
1000ae14:	19c00015 	stw	r7,0(r3)
1000ae18:	1d000115 	stw	r20,4(r3)
1000ae1c:	d8800b15 	stw	r2,44(sp)
1000ae20:	31800210 	cmplti	r6,r6,8
1000ae24:	303fc61e 	bne	r6,zero,1000ad40 <___vfiprintf_internal_r+0x8d8>
1000ae28:	10016e26 	beq	r2,zero,1000b3e4 <___vfiprintf_internal_r+0xf7c>
1000ae2c:	d9800904 	addi	r6,sp,36
1000ae30:	900b883a 	mov	r5,r18
1000ae34:	9809883a 	mov	r4,r19
1000ae38:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000ae3c:	103e5d1e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000ae40:	d8800b17 	ldw	r2,44(sp)
1000ae44:	003fbe06 	br	1000ad40 <___vfiprintf_internal_r+0x8d8>
1000ae48:	29403fcc 	andi	r5,r5,255
1000ae4c:	28022c1e 	bne	r5,zero,1000b700 <___vfiprintf_internal_r+0x1298>
1000ae50:	6080080c 	andi	r2,r12,32
1000ae54:	63000414 	ori	r12,r12,16
1000ae58:	10005b1e 	bne	r2,zero,1000afc8 <___vfiprintf_internal_r+0xb60>
1000ae5c:	d8800317 	ldw	r2,12(sp)
1000ae60:	10800104 	addi	r2,r2,4
1000ae64:	d8c00317 	ldw	r3,12(sp)
1000ae68:	002d883a 	mov	r22,zero
1000ae6c:	d8800315 	stw	r2,12(sp)
1000ae70:	1d400017 	ldw	r21,0(r3)
1000ae74:	0005883a 	mov	r2,zero
1000ae78:	003ed406 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000ae7c:	29403fcc 	andi	r5,r5,255
1000ae80:	2802211e 	bne	r5,zero,1000b708 <___vfiprintf_internal_r+0x12a0>
1000ae84:	6080080c 	andi	r2,r12,32
1000ae88:	63000414 	ori	r12,r12,16
1000ae8c:	1000401e 	bne	r2,zero,1000af90 <___vfiprintf_internal_r+0xb28>
1000ae90:	d8800317 	ldw	r2,12(sp)
1000ae94:	10800104 	addi	r2,r2,4
1000ae98:	d8c00317 	ldw	r3,12(sp)
1000ae9c:	002d883a 	mov	r22,zero
1000aea0:	d8800315 	stw	r2,12(sp)
1000aea4:	1d400017 	ldw	r21,0(r3)
1000aea8:	00800044 	movi	r2,1
1000aeac:	003ec706 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000aeb0:	29403fcc 	andi	r5,r5,255
1000aeb4:	28021f1e 	bne	r5,zero,1000b734 <___vfiprintf_internal_r+0x12cc>
1000aeb8:	6080080c 	andi	r2,r12,32
1000aebc:	63000414 	ori	r12,r12,16
1000aec0:	10003a1e 	bne	r2,zero,1000afac <___vfiprintf_internal_r+0xb44>
1000aec4:	d8800317 	ldw	r2,12(sp)
1000aec8:	10800104 	addi	r2,r2,4
1000aecc:	d8c00317 	ldw	r3,12(sp)
1000aed0:	1d400017 	ldw	r21,0(r3)
1000aed4:	d8800315 	stw	r2,12(sp)
1000aed8:	a82dd7fa 	srai	r22,r21,31
1000aedc:	b005883a 	mov	r2,r22
1000aee0:	103f340e 	bge	r2,zero,1000abb4 <___vfiprintf_internal_r+0x74c>
1000aee4:	056bc83a 	sub	r21,zero,r21
1000aee8:	a804c03a 	cmpne	r2,r21,zero
1000aeec:	05adc83a 	sub	r22,zero,r22
1000aef0:	b0adc83a 	sub	r22,r22,r2
1000aef4:	00800b44 	movi	r2,45
1000aef8:	d8800845 	stb	r2,33(sp)
1000aefc:	48ffffe0 	cmpeqi	r3,r9,-1
1000af00:	03400b44 	movi	r13,45
1000af04:	00800044 	movi	r2,1
1000af08:	183eb426 	beq	r3,zero,1000a9dc <___vfiprintf_internal_r+0x574>
1000af0c:	10c00060 	cmpeqi	r3,r2,1
1000af10:	1800341e 	bne	r3,zero,1000afe4 <___vfiprintf_internal_r+0xb7c>
1000af14:	108000a0 	cmpeqi	r2,r2,2
1000af18:	1000431e 	bne	r2,zero,1000b028 <___vfiprintf_internal_r+0xbc0>
1000af1c:	8807883a 	mov	r3,r17
1000af20:	00000106 	br	1000af28 <___vfiprintf_internal_r+0xac0>
1000af24:	b807883a 	mov	r3,r23
1000af28:	a808d0fa 	srli	r4,r21,3
1000af2c:	b00a977a 	slli	r5,r22,29
1000af30:	b02cd0fa 	srli	r22,r22,3
1000af34:	ad4001cc 	andi	r21,r21,7
1000af38:	a8800c04 	addi	r2,r21,48
1000af3c:	292ab03a 	or	r21,r5,r4
1000af40:	18bfffc5 	stb	r2,-1(r3)
1000af44:	ad88b03a 	or	r4,r21,r22
1000af48:	1dffffc4 	addi	r23,r3,-1
1000af4c:	203ff51e 	bne	r4,zero,1000af24 <___vfiprintf_internal_r+0xabc>
1000af50:	6100004c 	andi	r4,r12,1
1000af54:	20004126 	beq	r4,zero,1000b05c <___vfiprintf_internal_r+0xbf4>
1000af58:	10803fcc 	andi	r2,r2,255
1000af5c:	1080201c 	xori	r2,r2,128
1000af60:	10bfe004 	addi	r2,r2,-128
1000af64:	10800c18 	cmpnei	r2,r2,48
1000af68:	10003c26 	beq	r2,zero,1000b05c <___vfiprintf_internal_r+0xbf4>
1000af6c:	18ffff84 	addi	r3,r3,-2
1000af70:	00800c04 	movi	r2,48
1000af74:	b8bfffc5 	stb	r2,-1(r23)
1000af78:	88edc83a 	sub	r22,r17,r3
1000af7c:	6029883a 	mov	r20,r12
1000af80:	182f883a 	mov	r23,r3
1000af84:	00001f06 	br	1000b004 <___vfiprintf_internal_r+0xb9c>
1000af88:	00074f40 	call	100074f4 <__sinit>
1000af8c:	003d4806 	br	1000a4b0 <___vfiprintf_internal_r+0x48>
1000af90:	d8c00317 	ldw	r3,12(sp)
1000af94:	00800044 	movi	r2,1
1000af98:	1d400017 	ldw	r21,0(r3)
1000af9c:	1d800117 	ldw	r22,4(r3)
1000afa0:	18c00204 	addi	r3,r3,8
1000afa4:	d8c00315 	stw	r3,12(sp)
1000afa8:	003e8806 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000afac:	d8c00317 	ldw	r3,12(sp)
1000afb0:	18800117 	ldw	r2,4(r3)
1000afb4:	1d400017 	ldw	r21,0(r3)
1000afb8:	18c00204 	addi	r3,r3,8
1000afbc:	d8c00315 	stw	r3,12(sp)
1000afc0:	102d883a 	mov	r22,r2
1000afc4:	003efa06 	br	1000abb0 <___vfiprintf_internal_r+0x748>
1000afc8:	d8c00317 	ldw	r3,12(sp)
1000afcc:	0005883a 	mov	r2,zero
1000afd0:	1d400017 	ldw	r21,0(r3)
1000afd4:	1d800117 	ldw	r22,4(r3)
1000afd8:	18c00204 	addi	r3,r3,8
1000afdc:	d8c00315 	stw	r3,12(sp)
1000afe0:	003e7a06 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000afe4:	b0016a1e 	bne	r22,zero,1000b590 <___vfiprintf_internal_r+0x1128>
1000afe8:	a88002a8 	cmpgeui	r2,r21,10
1000afec:	1001681e 	bne	r2,zero,1000b590 <___vfiprintf_internal_r+0x1128>
1000aff0:	ad400c04 	addi	r21,r21,48
1000aff4:	dd4015c5 	stb	r21,87(sp)
1000aff8:	6029883a 	mov	r20,r12
1000affc:	05800044 	movi	r22,1
1000b000:	ddc015c4 	addi	r23,sp,87
1000b004:	482b883a 	mov	r21,r9
1000b008:	4d80010e 	bge	r9,r22,1000b010 <___vfiprintf_internal_r+0xba8>
1000b00c:	b02b883a 	mov	r21,r22
1000b010:	6b403fcc 	andi	r13,r13,255
1000b014:	6b40201c 	xori	r13,r13,128
1000b018:	6b7fe004 	addi	r13,r13,-128
1000b01c:	683efd26 	beq	r13,zero,1000ac14 <___vfiprintf_internal_r+0x7ac>
1000b020:	ad400044 	addi	r21,r21,1
1000b024:	003efb06 	br	1000ac14 <___vfiprintf_internal_r+0x7ac>
1000b028:	882f883a 	mov	r23,r17
1000b02c:	d9000417 	ldw	r4,16(sp)
1000b030:	a88003cc 	andi	r2,r21,15
1000b034:	b006973a 	slli	r3,r22,28
1000b038:	2085883a 	add	r2,r4,r2
1000b03c:	a82ad13a 	srli	r21,r21,4
1000b040:	10800003 	ldbu	r2,0(r2)
1000b044:	b02cd13a 	srli	r22,r22,4
1000b048:	bdffffc4 	addi	r23,r23,-1
1000b04c:	1d6ab03a 	or	r21,r3,r21
1000b050:	b8800005 	stb	r2,0(r23)
1000b054:	ad84b03a 	or	r2,r21,r22
1000b058:	103ff41e 	bne	r2,zero,1000b02c <___vfiprintf_internal_r+0xbc4>
1000b05c:	8dedc83a 	sub	r22,r17,r23
1000b060:	6029883a 	mov	r20,r12
1000b064:	003fe706 	br	1000b004 <___vfiprintf_internal_r+0xb9c>
1000b068:	01800044 	movi	r6,1
1000b06c:	000b883a 	mov	r5,zero
1000b070:	8807883a 	mov	r3,r17
1000b074:	003f4b06 	br	1000ada4 <___vfiprintf_internal_r+0x93c>
1000b078:	8559c83a 	sub	r12,r16,r21
1000b07c:	033f1b0e 	bge	zero,r12,1000acec <___vfiprintf_internal_r+0x884>
1000b080:	61800450 	cmplti	r6,r12,17
1000b084:	01c40074 	movhi	r7,4097
1000b088:	3001af1e 	bne	r6,zero,1000b748 <___vfiprintf_internal_r+0x12e0>
1000b08c:	39ca5a04 	addi	r7,r7,10600
1000b090:	03400404 	movi	r13,16
1000b094:	00000606 	br	1000b0b0 <___vfiprintf_internal_r+0xc48>
1000b098:	21800084 	addi	r6,r4,2
1000b09c:	42000204 	addi	r8,r8,8
1000b0a0:	1809883a 	mov	r4,r3
1000b0a4:	633ffc04 	addi	r12,r12,-16
1000b0a8:	60c00448 	cmpgei	r3,r12,17
1000b0ac:	18001c26 	beq	r3,zero,1000b120 <___vfiprintf_internal_r+0xcb8>
1000b0b0:	20c00044 	addi	r3,r4,1
1000b0b4:	10800404 	addi	r2,r2,16
1000b0b8:	41c00015 	stw	r7,0(r8)
1000b0bc:	43400115 	stw	r13,4(r8)
1000b0c0:	d8800b15 	stw	r2,44(sp)
1000b0c4:	d8c00a15 	stw	r3,40(sp)
1000b0c8:	19400208 	cmpgei	r5,r3,8
1000b0cc:	283ff226 	beq	r5,zero,1000b098 <___vfiprintf_internal_r+0xc30>
1000b0d0:	d9800904 	addi	r6,sp,36
1000b0d4:	900b883a 	mov	r5,r18
1000b0d8:	9809883a 	mov	r4,r19
1000b0dc:	10006326 	beq	r2,zero,1000b26c <___vfiprintf_internal_r+0xe04>
1000b0e0:	d9c00515 	stw	r7,20(sp)
1000b0e4:	db000215 	stw	r12,8(sp)
1000b0e8:	da400115 	stw	r9,4(sp)
1000b0ec:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b0f0:	103db01e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b0f4:	db000217 	ldw	r12,8(sp)
1000b0f8:	d9000a17 	ldw	r4,40(sp)
1000b0fc:	d8800b17 	ldw	r2,44(sp)
1000b100:	633ffc04 	addi	r12,r12,-16
1000b104:	60c00448 	cmpgei	r3,r12,17
1000b108:	8811883a 	mov	r8,r17
1000b10c:	21800044 	addi	r6,r4,1
1000b110:	d9c00517 	ldw	r7,20(sp)
1000b114:	03400404 	movi	r13,16
1000b118:	da400117 	ldw	r9,4(sp)
1000b11c:	183fe41e 	bne	r3,zero,1000b0b0 <___vfiprintf_internal_r+0xc48>
1000b120:	43400204 	addi	r13,r8,8
1000b124:	1305883a 	add	r2,r2,r12
1000b128:	41c00015 	stw	r7,0(r8)
1000b12c:	43000115 	stw	r12,4(r8)
1000b130:	d8800b15 	stw	r2,44(sp)
1000b134:	d9800a15 	stw	r6,40(sp)
1000b138:	30c00208 	cmpgei	r3,r6,8
1000b13c:	1800e226 	beq	r3,zero,1000b4c8 <___vfiprintf_internal_r+0x1060>
1000b140:	10015726 	beq	r2,zero,1000b6a0 <___vfiprintf_internal_r+0x1238>
1000b144:	d9800904 	addi	r6,sp,36
1000b148:	900b883a 	mov	r5,r18
1000b14c:	9809883a 	mov	r4,r19
1000b150:	da400115 	stw	r9,4(sp)
1000b154:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b158:	103d961e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b15c:	da400117 	ldw	r9,4(sp)
1000b160:	d9000a17 	ldw	r4,40(sp)
1000b164:	d8800b17 	ldw	r2,44(sp)
1000b168:	4d93c83a 	sub	r9,r9,r22
1000b16c:	d8c01804 	addi	r3,sp,96
1000b170:	21400044 	addi	r5,r4,1
1000b174:	8811883a 	mov	r8,r17
1000b178:	027ede0e 	bge	zero,r9,1000acf4 <___vfiprintf_internal_r+0x88c>
1000b17c:	49800450 	cmplti	r6,r9,17
1000b180:	01c40074 	movhi	r7,4097
1000b184:	3001431e 	bne	r6,zero,1000b694 <___vfiprintf_internal_r+0x122c>
1000b188:	39ca5a04 	addi	r7,r7,10600
1000b18c:	03000404 	movi	r12,16
1000b190:	00000606 	br	1000b1ac <___vfiprintf_internal_r+0xd44>
1000b194:	21400084 	addi	r5,r4,2
1000b198:	42000204 	addi	r8,r8,8
1000b19c:	1809883a 	mov	r4,r3
1000b1a0:	4a7ffc04 	addi	r9,r9,-16
1000b1a4:	48c00448 	cmpgei	r3,r9,17
1000b1a8:	18001a26 	beq	r3,zero,1000b214 <___vfiprintf_internal_r+0xdac>
1000b1ac:	20c00044 	addi	r3,r4,1
1000b1b0:	10800404 	addi	r2,r2,16
1000b1b4:	41c00015 	stw	r7,0(r8)
1000b1b8:	43000115 	stw	r12,4(r8)
1000b1bc:	d8800b15 	stw	r2,44(sp)
1000b1c0:	d8c00a15 	stw	r3,40(sp)
1000b1c4:	19400208 	cmpgei	r5,r3,8
1000b1c8:	283ff226 	beq	r5,zero,1000b194 <___vfiprintf_internal_r+0xd2c>
1000b1cc:	d9800904 	addi	r6,sp,36
1000b1d0:	900b883a 	mov	r5,r18
1000b1d4:	9809883a 	mov	r4,r19
1000b1d8:	10001a26 	beq	r2,zero,1000b244 <___vfiprintf_internal_r+0xddc>
1000b1dc:	d9c00215 	stw	r7,8(sp)
1000b1e0:	da400115 	stw	r9,4(sp)
1000b1e4:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b1e8:	103d721e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b1ec:	da400117 	ldw	r9,4(sp)
1000b1f0:	d9000a17 	ldw	r4,40(sp)
1000b1f4:	d8800b17 	ldw	r2,44(sp)
1000b1f8:	4a7ffc04 	addi	r9,r9,-16
1000b1fc:	48c00448 	cmpgei	r3,r9,17
1000b200:	8811883a 	mov	r8,r17
1000b204:	21400044 	addi	r5,r4,1
1000b208:	d9c00217 	ldw	r7,8(sp)
1000b20c:	03000404 	movi	r12,16
1000b210:	183fe61e 	bne	r3,zero,1000b1ac <___vfiprintf_internal_r+0xd44>
1000b214:	41000204 	addi	r4,r8,8
1000b218:	1245883a 	add	r2,r2,r9
1000b21c:	41c00015 	stw	r7,0(r8)
1000b220:	42400115 	stw	r9,4(r8)
1000b224:	d8800b15 	stw	r2,44(sp)
1000b228:	d9400a15 	stw	r5,40(sp)
1000b22c:	28c00208 	cmpgei	r3,r5,8
1000b230:	1800721e 	bne	r3,zero,1000b3fc <___vfiprintf_internal_r+0xf94>
1000b234:	29400044 	addi	r5,r5,1
1000b238:	20c00204 	addi	r3,r4,8
1000b23c:	2011883a 	mov	r8,r4
1000b240:	003eac06 	br	1000acf4 <___vfiprintf_internal_r+0x88c>
1000b244:	01400044 	movi	r5,1
1000b248:	0009883a 	mov	r4,zero
1000b24c:	8811883a 	mov	r8,r17
1000b250:	003fd306 	br	1000b1a0 <___vfiprintf_internal_r+0xd38>
1000b254:	d9800904 	addi	r6,sp,36
1000b258:	900b883a 	mov	r5,r18
1000b25c:	9809883a 	mov	r4,r19
1000b260:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b264:	103ebc26 	beq	r2,zero,1000ad58 <___vfiprintf_internal_r+0x8f0>
1000b268:	003d5206 	br	1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b26c:	01800044 	movi	r6,1
1000b270:	0009883a 	mov	r4,zero
1000b274:	8811883a 	mov	r8,r17
1000b278:	003f8a06 	br	1000b0a4 <___vfiprintf_internal_r+0xc3c>
1000b27c:	10007026 	beq	r2,zero,1000b440 <___vfiprintf_internal_r+0xfd8>
1000b280:	d9800904 	addi	r6,sp,36
1000b284:	900b883a 	mov	r5,r18
1000b288:	9809883a 	mov	r4,r19
1000b28c:	da400515 	stw	r9,20(sp)
1000b290:	db000215 	stw	r12,8(sp)
1000b294:	db400115 	stw	r13,4(sp)
1000b298:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b29c:	103d451e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b2a0:	d9000a17 	ldw	r4,40(sp)
1000b2a4:	d8800b17 	ldw	r2,44(sp)
1000b2a8:	d8c01804 	addi	r3,sp,96
1000b2ac:	21400044 	addi	r5,r4,1
1000b2b0:	8811883a 	mov	r8,r17
1000b2b4:	da400517 	ldw	r9,20(sp)
1000b2b8:	db000217 	ldw	r12,8(sp)
1000b2bc:	db400117 	ldw	r13,4(sp)
1000b2c0:	003e6f06 	br	1000ac80 <___vfiprintf_internal_r+0x818>
1000b2c4:	d8800884 	addi	r2,sp,34
1000b2c8:	d8801615 	stw	r2,88(sp)
1000b2cc:	00800084 	movi	r2,2
1000b2d0:	d8801715 	stw	r2,92(sp)
1000b2d4:	d8c01804 	addi	r3,sp,96
1000b2d8:	01400044 	movi	r5,1
1000b2dc:	1811883a 	mov	r8,r3
1000b2e0:	2809883a 	mov	r4,r5
1000b2e4:	21400044 	addi	r5,r4,1
1000b2e8:	40c00204 	addi	r3,r8,8
1000b2ec:	003e7d06 	br	1000ace4 <___vfiprintf_internal_r+0x87c>
1000b2f0:	a019883a 	mov	r12,r20
1000b2f4:	003f0506 	br	1000af0c <___vfiprintf_internal_r+0xaa4>
1000b2f8:	19400450 	cmplti	r5,r3,17
1000b2fc:	01c40074 	movhi	r7,4097
1000b300:	2801031e 	bne	r5,zero,1000b710 <___vfiprintf_internal_r+0x12a8>
1000b304:	39ca5e04 	addi	r7,r7,10616
1000b308:	03800404 	movi	r14,16
1000b30c:	00000706 	br	1000b32c <___vfiprintf_internal_r+0xec4>
1000b310:	23c00084 	addi	r15,r4,2
1000b314:	42000204 	addi	r8,r8,8
1000b318:	3009883a 	mov	r4,r6
1000b31c:	18fffc04 	addi	r3,r3,-16
1000b320:	19400448 	cmpgei	r5,r3,17
1000b324:	28002026 	beq	r5,zero,1000b3a8 <___vfiprintf_internal_r+0xf40>
1000b328:	21800044 	addi	r6,r4,1
1000b32c:	10800404 	addi	r2,r2,16
1000b330:	41c00015 	stw	r7,0(r8)
1000b334:	43800115 	stw	r14,4(r8)
1000b338:	d8800b15 	stw	r2,44(sp)
1000b33c:	d9800a15 	stw	r6,40(sp)
1000b340:	31400208 	cmpgei	r5,r6,8
1000b344:	283ff226 	beq	r5,zero,1000b310 <___vfiprintf_internal_r+0xea8>
1000b348:	d9800904 	addi	r6,sp,36
1000b34c:	900b883a 	mov	r5,r18
1000b350:	9809883a 	mov	r4,r19
1000b354:	10001f26 	beq	r2,zero,1000b3d4 <___vfiprintf_internal_r+0xf6c>
1000b358:	d9c00715 	stw	r7,28(sp)
1000b35c:	d8c00615 	stw	r3,24(sp)
1000b360:	da400515 	stw	r9,20(sp)
1000b364:	db000215 	stw	r12,8(sp)
1000b368:	db400115 	stw	r13,4(sp)
1000b36c:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b370:	103d101e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b374:	d8c00617 	ldw	r3,24(sp)
1000b378:	d9000a17 	ldw	r4,40(sp)
1000b37c:	d8800b17 	ldw	r2,44(sp)
1000b380:	18fffc04 	addi	r3,r3,-16
1000b384:	19400448 	cmpgei	r5,r3,17
1000b388:	8811883a 	mov	r8,r17
1000b38c:	23c00044 	addi	r15,r4,1
1000b390:	d9c00717 	ldw	r7,28(sp)
1000b394:	03800404 	movi	r14,16
1000b398:	da400517 	ldw	r9,20(sp)
1000b39c:	db000217 	ldw	r12,8(sp)
1000b3a0:	db400117 	ldw	r13,4(sp)
1000b3a4:	283fe01e 	bne	r5,zero,1000b328 <___vfiprintf_internal_r+0xec0>
1000b3a8:	10c5883a 	add	r2,r2,r3
1000b3ac:	40c00115 	stw	r3,4(r8)
1000b3b0:	41c00015 	stw	r7,0(r8)
1000b3b4:	d8800b15 	stw	r2,44(sp)
1000b3b8:	dbc00a15 	stw	r15,40(sp)
1000b3bc:	78c00208 	cmpgei	r3,r15,8
1000b3c0:	18002c1e 	bne	r3,zero,1000b474 <___vfiprintf_internal_r+0x100c>
1000b3c4:	42000204 	addi	r8,r8,8
1000b3c8:	79400044 	addi	r5,r15,1
1000b3cc:	7809883a 	mov	r4,r15
1000b3d0:	003e1b06 	br	1000ac40 <___vfiprintf_internal_r+0x7d8>
1000b3d4:	0009883a 	mov	r4,zero
1000b3d8:	03c00044 	movi	r15,1
1000b3dc:	8811883a 	mov	r8,r17
1000b3e0:	003fce06 	br	1000b31c <___vfiprintf_internal_r+0xeb4>
1000b3e4:	8540010e 	bge	r16,r21,1000b3ec <___vfiprintf_internal_r+0xf84>
1000b3e8:	a821883a 	mov	r16,r21
1000b3ec:	d8800017 	ldw	r2,0(sp)
1000b3f0:	1405883a 	add	r2,r2,r16
1000b3f4:	d8800015 	stw	r2,0(sp)
1000b3f8:	003e5706 	br	1000ad58 <___vfiprintf_internal_r+0x8f0>
1000b3fc:	10008126 	beq	r2,zero,1000b604 <___vfiprintf_internal_r+0x119c>
1000b400:	d9800904 	addi	r6,sp,36
1000b404:	900b883a 	mov	r5,r18
1000b408:	9809883a 	mov	r4,r19
1000b40c:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b410:	103ce81e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b414:	d9400a17 	ldw	r5,40(sp)
1000b418:	d8800b17 	ldw	r2,44(sp)
1000b41c:	d8c01804 	addi	r3,sp,96
1000b420:	29400044 	addi	r5,r5,1
1000b424:	8811883a 	mov	r8,r17
1000b428:	003e3206 	br	1000acf4 <___vfiprintf_internal_r+0x88c>
1000b42c:	d8000a15 	stw	zero,40(sp)
1000b430:	8811883a 	mov	r8,r17
1000b434:	003c4e06 	br	1000a570 <___vfiprintf_internal_r+0x108>
1000b438:	002d883a 	mov	r22,zero
1000b43c:	003d4406 	br	1000a950 <___vfiprintf_internal_r+0x4e8>
1000b440:	68003326 	beq	r13,zero,1000b510 <___vfiprintf_internal_r+0x10a8>
1000b444:	d8800884 	addi	r2,sp,34
1000b448:	d8801615 	stw	r2,88(sp)
1000b44c:	00800084 	movi	r2,2
1000b450:	d8801715 	stw	r2,92(sp)
1000b454:	da001804 	addi	r8,sp,96
1000b458:	01000044 	movi	r4,1
1000b45c:	003fa106 	br	1000b2e4 <___vfiprintf_internal_r+0xe7c>
1000b460:	d8c01804 	addi	r3,sp,96
1000b464:	01400044 	movi	r5,1
1000b468:	0009883a 	mov	r4,zero
1000b46c:	8811883a 	mov	r8,r17
1000b470:	003e1c06 	br	1000ace4 <___vfiprintf_internal_r+0x87c>
1000b474:	10003826 	beq	r2,zero,1000b558 <___vfiprintf_internal_r+0x10f0>
1000b478:	d9800904 	addi	r6,sp,36
1000b47c:	900b883a 	mov	r5,r18
1000b480:	9809883a 	mov	r4,r19
1000b484:	da400515 	stw	r9,20(sp)
1000b488:	db000215 	stw	r12,8(sp)
1000b48c:	db400115 	stw	r13,4(sp)
1000b490:	000a35c0 	call	1000a35c <__sprint_r.part.0>
1000b494:	103cc71e 	bne	r2,zero,1000a7b4 <___vfiprintf_internal_r+0x34c>
1000b498:	d9000a17 	ldw	r4,40(sp)
1000b49c:	d8800b17 	ldw	r2,44(sp)
1000b4a0:	8811883a 	mov	r8,r17
1000b4a4:	21400044 	addi	r5,r4,1
1000b4a8:	da400517 	ldw	r9,20(sp)
1000b4ac:	db000217 	ldw	r12,8(sp)
1000b4b0:	db400117 	ldw	r13,4(sp)
1000b4b4:	003de206 	br	1000ac40 <___vfiprintf_internal_r+0x7d8>
1000b4b8:	e029883a 	mov	r20,fp
1000b4bc:	003c3106 	br	1000a584 <___vfiprintf_internal_r+0x11c>
1000b4c0:	882f883a 	mov	r23,r17
1000b4c4:	003ecf06 	br	1000b004 <___vfiprintf_internal_r+0xb9c>
1000b4c8:	31400044 	addi	r5,r6,1
1000b4cc:	68c00204 	addi	r3,r13,8
1000b4d0:	3009883a 	mov	r4,r6
1000b4d4:	6811883a 	mov	r8,r13
1000b4d8:	003e0406 	br	1000acec <___vfiprintf_internal_r+0x884>
1000b4dc:	00c00c04 	movi	r3,48
1000b4e0:	d88008c5 	stb	r2,35(sp)
1000b4e4:	d8c00885 	stb	r3,34(sp)
1000b4e8:	63000094 	ori	r12,r12,2
1000b4ec:	00800084 	movi	r2,2
1000b4f0:	003d3606 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000b4f4:	d9400017 	ldw	r5,0(sp)
1000b4f8:	20800017 	ldw	r2,0(r4)
1000b4fc:	d8c00315 	stw	r3,12(sp)
1000b500:	2809d7fa 	srai	r4,r5,31
1000b504:	11400015 	stw	r5,0(r2)
1000b508:	11000115 	stw	r4,4(r2)
1000b50c:	003bff06 	br	1000a50c <___vfiprintf_internal_r+0xa4>
1000b510:	0009883a 	mov	r4,zero
1000b514:	d8c01804 	addi	r3,sp,96
1000b518:	01400044 	movi	r5,1
1000b51c:	8811883a 	mov	r8,r17
1000b520:	003df006 	br	1000ace4 <___vfiprintf_internal_r+0x87c>
1000b524:	0421c83a 	sub	r16,zero,r16
1000b528:	ddc00315 	stw	r23,12(sp)
1000b52c:	003cdb06 	br	1000a89c <___vfiprintf_internal_r+0x434>
1000b530:	b809883a 	mov	r4,r23
1000b534:	da000215 	stw	r8,8(sp)
1000b538:	db000115 	stw	r12,4(sp)
1000b53c:	00032400 	call	10003240 <strlen>
1000b540:	102d883a 	mov	r22,r2
1000b544:	102b883a 	mov	r21,r2
1000b548:	dd000315 	stw	r20,12(sp)
1000b54c:	db000117 	ldw	r12,4(sp)
1000b550:	da000217 	ldw	r8,8(sp)
1000b554:	003dad06 	br	1000ac0c <___vfiprintf_internal_r+0x7a4>
1000b558:	d8c00847 	ldb	r3,33(sp)
1000b55c:	1800551e 	bne	r3,zero,1000b6b4 <___vfiprintf_internal_r+0x124c>
1000b560:	683f581e 	bne	r13,zero,1000b2c4 <___vfiprintf_internal_r+0xe5c>
1000b564:	0009883a 	mov	r4,zero
1000b568:	d8c01804 	addi	r3,sp,96
1000b56c:	01400044 	movi	r5,1
1000b570:	8811883a 	mov	r8,r17
1000b574:	003ddd06 	br	1000acec <___vfiprintf_internal_r+0x884>
1000b578:	d8800317 	ldw	r2,12(sp)
1000b57c:	10800017 	ldw	r2,0(r2)
1000b580:	d8c00315 	stw	r3,12(sp)
1000b584:	d8c00017 	ldw	r3,0(sp)
1000b588:	10c00015 	stw	r3,0(r2)
1000b58c:	003bdf06 	br	1000a50c <___vfiprintf_internal_r+0xa4>
1000b590:	882f883a 	mov	r23,r17
1000b594:	00000206 	br	1000b5a0 <___vfiprintf_internal_r+0x1138>
1000b598:	102b883a 	mov	r21,r2
1000b59c:	182d883a 	mov	r22,r3
1000b5a0:	a809883a 	mov	r4,r21
1000b5a4:	b00b883a 	mov	r5,r22
1000b5a8:	01800284 	movi	r6,10
1000b5ac:	000f883a 	mov	r7,zero
1000b5b0:	db400615 	stw	r13,24(sp)
1000b5b4:	da000515 	stw	r8,20(sp)
1000b5b8:	da400215 	stw	r9,8(sp)
1000b5bc:	db000115 	stw	r12,4(sp)
1000b5c0:	000c8300 	call	1000c830 <__umoddi3>
1000b5c4:	10800c04 	addi	r2,r2,48
1000b5c8:	bdffffc4 	addi	r23,r23,-1
1000b5cc:	a809883a 	mov	r4,r21
1000b5d0:	b00b883a 	mov	r5,r22
1000b5d4:	b8800005 	stb	r2,0(r23)
1000b5d8:	01800284 	movi	r6,10
1000b5dc:	000f883a 	mov	r7,zero
1000b5e0:	000c2980 	call	1000c298 <__udivdi3>
1000b5e4:	db000117 	ldw	r12,4(sp)
1000b5e8:	da400217 	ldw	r9,8(sp)
1000b5ec:	da000517 	ldw	r8,20(sp)
1000b5f0:	db400617 	ldw	r13,24(sp)
1000b5f4:	b03fe81e 	bne	r22,zero,1000b598 <___vfiprintf_internal_r+0x1130>
1000b5f8:	ad4002a8 	cmpgeui	r21,r21,10
1000b5fc:	a83fe61e 	bne	r21,zero,1000b598 <___vfiprintf_internal_r+0x1130>
1000b600:	003e9606 	br	1000b05c <___vfiprintf_internal_r+0xbf4>
1000b604:	00c00044 	movi	r3,1
1000b608:	d8c00a15 	stw	r3,40(sp)
1000b60c:	b005883a 	mov	r2,r22
1000b610:	ddc01615 	stw	r23,88(sp)
1000b614:	dd801715 	stw	r22,92(sp)
1000b618:	dd800b15 	stw	r22,44(sp)
1000b61c:	d8c01804 	addi	r3,sp,96
1000b620:	003dc306 	br	1000ad30 <___vfiprintf_internal_r+0x8c8>
1000b624:	10c00060 	cmpeqi	r3,r2,1
1000b628:	a019883a 	mov	r12,r20
1000b62c:	183e3926 	beq	r3,zero,1000af14 <___vfiprintf_internal_r+0xaac>
1000b630:	003e6f06 	br	1000aff0 <___vfiprintf_internal_r+0xb88>
1000b634:	e0800043 	ldbu	r2,1(fp)
1000b638:	63000814 	ori	r12,r12,32
1000b63c:	e7000044 	addi	fp,fp,1
1000b640:	10803fcc 	andi	r2,r2,255
1000b644:	1080201c 	xori	r2,r2,128
1000b648:	10bfe004 	addi	r2,r2,-128
1000b64c:	003bd506 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>
1000b650:	488001f0 	cmpltui	r2,r9,7
1000b654:	482d883a 	mov	r22,r9
1000b658:	1000011e 	bne	r2,zero,1000b660 <___vfiprintf_internal_r+0x11f8>
1000b65c:	05800184 	movi	r22,6
1000b660:	05c40074 	movhi	r23,4097
1000b664:	b02b883a 	mov	r21,r22
1000b668:	dd000315 	stw	r20,12(sp)
1000b66c:	bdca0204 	addi	r23,r23,10248
1000b670:	003d6606 	br	1000ac0c <___vfiprintf_internal_r+0x7a4>
1000b674:	d8800315 	stw	r2,12(sp)
1000b678:	002d883a 	mov	r22,zero
1000b67c:	00800044 	movi	r2,1
1000b680:	003cd206 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000b684:	d8800315 	stw	r2,12(sp)
1000b688:	002d883a 	mov	r22,zero
1000b68c:	0005883a 	mov	r2,zero
1000b690:	003cce06 	br	1000a9cc <___vfiprintf_internal_r+0x564>
1000b694:	1809883a 	mov	r4,r3
1000b698:	39ca5a04 	addi	r7,r7,10600
1000b69c:	003ede06 	br	1000b218 <___vfiprintf_internal_r+0xdb0>
1000b6a0:	d8c01804 	addi	r3,sp,96
1000b6a4:	01400044 	movi	r5,1
1000b6a8:	0009883a 	mov	r4,zero
1000b6ac:	8811883a 	mov	r8,r17
1000b6b0:	003d8e06 	br	1000acec <___vfiprintf_internal_r+0x884>
1000b6b4:	d8800844 	addi	r2,sp,33
1000b6b8:	d8801615 	stw	r2,88(sp)
1000b6bc:	00800044 	movi	r2,1
1000b6c0:	d8801715 	stw	r2,92(sp)
1000b6c4:	d8c01804 	addi	r3,sp,96
1000b6c8:	01400044 	movi	r5,1
1000b6cc:	003d6806 	br	1000ac70 <___vfiprintf_internal_r+0x808>
1000b6d0:	d9800845 	stb	r6,33(sp)
1000b6d4:	003c5506 	br	1000a82c <___vfiprintf_internal_r+0x3c4>
1000b6d8:	482b883a 	mov	r21,r9
1000b6dc:	dd000315 	stw	r20,12(sp)
1000b6e0:	482d883a 	mov	r22,r9
1000b6e4:	003d4906 	br	1000ac0c <___vfiprintf_internal_r+0x7a4>
1000b6e8:	d9800845 	stb	r6,33(sp)
1000b6ec:	003cd906 	br	1000aa54 <___vfiprintf_internal_r+0x5ec>
1000b6f0:	d9800845 	stb	r6,33(sp)
1000b6f4:	003ce906 	br	1000aa9c <___vfiprintf_internal_r+0x634>
1000b6f8:	d9800845 	stb	r6,33(sp)
1000b6fc:	003c8a06 	br	1000a928 <___vfiprintf_internal_r+0x4c0>
1000b700:	d9800845 	stb	r6,33(sp)
1000b704:	003dd206 	br	1000ae50 <___vfiprintf_internal_r+0x9e8>
1000b708:	d9800845 	stb	r6,33(sp)
1000b70c:	003ddd06 	br	1000ae84 <___vfiprintf_internal_r+0xa1c>
1000b710:	301f883a 	mov	r15,r6
1000b714:	39ca5e04 	addi	r7,r7,10616
1000b718:	003f2306 	br	1000b3a8 <___vfiprintf_internal_r+0xf40>
1000b71c:	d9800845 	stb	r6,33(sp)
1000b720:	003d1606 	br	1000ab7c <___vfiprintf_internal_r+0x714>
1000b724:	d9800845 	stb	r6,33(sp)
1000b728:	003d0406 	br	1000ab3c <___vfiprintf_internal_r+0x6d4>
1000b72c:	d9800845 	stb	r6,33(sp)
1000b730:	003cb806 	br	1000aa14 <___vfiprintf_internal_r+0x5ac>
1000b734:	d9800845 	stb	r6,33(sp)
1000b738:	003ddf06 	br	1000aeb8 <___vfiprintf_internal_r+0xa50>
1000b73c:	29800044 	addi	r6,r5,1
1000b740:	39ca5e04 	addi	r7,r7,10616
1000b744:	003db106 	br	1000ae0c <___vfiprintf_internal_r+0x9a4>
1000b748:	181b883a 	mov	r13,r3
1000b74c:	280d883a 	mov	r6,r5
1000b750:	39ca5a04 	addi	r7,r7,10600
1000b754:	003e7306 	br	1000b124 <___vfiprintf_internal_r+0xcbc>
1000b758:	00bfffc4 	movi	r2,-1
1000b75c:	d8800015 	stw	r2,0(sp)
1000b760:	003c1706 	br	1000a7c0 <___vfiprintf_internal_r+0x358>
1000b764:	d8800317 	ldw	r2,12(sp)
1000b768:	12400017 	ldw	r9,0(r2)
1000b76c:	15c00104 	addi	r23,r2,4
1000b770:	4800010e 	bge	r9,zero,1000b778 <___vfiprintf_internal_r+0x1310>
1000b774:	027fffc4 	movi	r9,-1
1000b778:	e0800043 	ldbu	r2,1(fp)
1000b77c:	ddc00315 	stw	r23,12(sp)
1000b780:	2039883a 	mov	fp,r4
1000b784:	10803fcc 	andi	r2,r2,255
1000b788:	1080201c 	xori	r2,r2,128
1000b78c:	10bfe004 	addi	r2,r2,-128
1000b790:	003b8406 	br	1000a5a4 <___vfiprintf_internal_r+0x13c>

1000b794 <__vfiprintf_internal>:
1000b794:	00840074 	movhi	r2,4097
1000b798:	300f883a 	mov	r7,r6
1000b79c:	280d883a 	mov	r6,r5
1000b7a0:	200b883a 	mov	r5,r4
1000b7a4:	1113ce17 	ldw	r4,20280(r2)
1000b7a8:	000a4681 	jmpi	1000a468 <___vfiprintf_internal_r>

1000b7ac <__sbprintf>:
1000b7ac:	2880030b 	ldhu	r2,12(r5)
1000b7b0:	2b001917 	ldw	r12,100(r5)
1000b7b4:	2ac0038b 	ldhu	r11,14(r5)
1000b7b8:	2a800717 	ldw	r10,28(r5)
1000b7bc:	2a400917 	ldw	r9,36(r5)
1000b7c0:	defee204 	addi	sp,sp,-1144
1000b7c4:	da001a04 	addi	r8,sp,104
1000b7c8:	00c10004 	movi	r3,1024
1000b7cc:	dc011a15 	stw	r16,1128(sp)
1000b7d0:	10bfff4c 	andi	r2,r2,65533
1000b7d4:	2821883a 	mov	r16,r5
1000b7d8:	d80b883a 	mov	r5,sp
1000b7dc:	dc811c15 	stw	r18,1136(sp)
1000b7e0:	dc411b15 	stw	r17,1132(sp)
1000b7e4:	dfc11d15 	stw	ra,1140(sp)
1000b7e8:	2025883a 	mov	r18,r4
1000b7ec:	d880030d 	sth	r2,12(sp)
1000b7f0:	db001915 	stw	r12,100(sp)
1000b7f4:	dac0038d 	sth	r11,14(sp)
1000b7f8:	da800715 	stw	r10,28(sp)
1000b7fc:	da400915 	stw	r9,36(sp)
1000b800:	da000015 	stw	r8,0(sp)
1000b804:	da000415 	stw	r8,16(sp)
1000b808:	d8c00215 	stw	r3,8(sp)
1000b80c:	d8c00515 	stw	r3,20(sp)
1000b810:	d8000615 	stw	zero,24(sp)
1000b814:	000a4680 	call	1000a468 <___vfiprintf_internal_r>
1000b818:	1023883a 	mov	r17,r2
1000b81c:	10000d0e 	bge	r2,zero,1000b854 <__sbprintf+0xa8>
1000b820:	d880030b 	ldhu	r2,12(sp)
1000b824:	1080100c 	andi	r2,r2,64
1000b828:	10000326 	beq	r2,zero,1000b838 <__sbprintf+0x8c>
1000b82c:	8080030b 	ldhu	r2,12(r16)
1000b830:	10801014 	ori	r2,r2,64
1000b834:	8080030d 	sth	r2,12(r16)
1000b838:	8805883a 	mov	r2,r17
1000b83c:	dfc11d17 	ldw	ra,1140(sp)
1000b840:	dc811c17 	ldw	r18,1136(sp)
1000b844:	dc411b17 	ldw	r17,1132(sp)
1000b848:	dc011a17 	ldw	r16,1128(sp)
1000b84c:	dec11e04 	addi	sp,sp,1144
1000b850:	f800283a 	ret
1000b854:	d80b883a 	mov	r5,sp
1000b858:	9009883a 	mov	r4,r18
1000b85c:	00071700 	call	10007170 <_fflush_r>
1000b860:	103fef26 	beq	r2,zero,1000b820 <__sbprintf+0x74>
1000b864:	047fffc4 	movi	r17,-1
1000b868:	003fed06 	br	1000b820 <__sbprintf+0x74>

1000b86c <_write_r>:
1000b86c:	defffe04 	addi	sp,sp,-8
1000b870:	2805883a 	mov	r2,r5
1000b874:	dc000015 	stw	r16,0(sp)
1000b878:	300b883a 	mov	r5,r6
1000b87c:	2021883a 	mov	r16,r4
1000b880:	380d883a 	mov	r6,r7
1000b884:	1009883a 	mov	r4,r2
1000b888:	00840074 	movhi	r2,4097
1000b88c:	dfc00115 	stw	ra,4(sp)
1000b890:	101c6615 	stw	zero,29080(r2)
1000b894:	000fec40 	call	1000fec4 <write>
1000b898:	10ffffd8 	cmpnei	r3,r2,-1
1000b89c:	18000426 	beq	r3,zero,1000b8b0 <_write_r+0x44>
1000b8a0:	dfc00117 	ldw	ra,4(sp)
1000b8a4:	dc000017 	ldw	r16,0(sp)
1000b8a8:	dec00204 	addi	sp,sp,8
1000b8ac:	f800283a 	ret
1000b8b0:	00c40074 	movhi	r3,4097
1000b8b4:	18dc6617 	ldw	r3,29080(r3)
1000b8b8:	183ff926 	beq	r3,zero,1000b8a0 <_write_r+0x34>
1000b8bc:	80c00015 	stw	r3,0(r16)
1000b8c0:	dfc00117 	ldw	ra,4(sp)
1000b8c4:	dc000017 	ldw	r16,0(sp)
1000b8c8:	dec00204 	addi	sp,sp,8
1000b8cc:	f800283a 	ret

1000b8d0 <_close_r>:
1000b8d0:	defffe04 	addi	sp,sp,-8
1000b8d4:	dc000015 	stw	r16,0(sp)
1000b8d8:	00840074 	movhi	r2,4097
1000b8dc:	2021883a 	mov	r16,r4
1000b8e0:	2809883a 	mov	r4,r5
1000b8e4:	dfc00115 	stw	ra,4(sp)
1000b8e8:	101c6615 	stw	zero,29080(r2)
1000b8ec:	000f6900 	call	1000f690 <close>
1000b8f0:	10ffffd8 	cmpnei	r3,r2,-1
1000b8f4:	18000426 	beq	r3,zero,1000b908 <_close_r+0x38>
1000b8f8:	dfc00117 	ldw	ra,4(sp)
1000b8fc:	dc000017 	ldw	r16,0(sp)
1000b900:	dec00204 	addi	sp,sp,8
1000b904:	f800283a 	ret
1000b908:	00c40074 	movhi	r3,4097
1000b90c:	18dc6617 	ldw	r3,29080(r3)
1000b910:	183ff926 	beq	r3,zero,1000b8f8 <_close_r+0x28>
1000b914:	80c00015 	stw	r3,0(r16)
1000b918:	dfc00117 	ldw	ra,4(sp)
1000b91c:	dc000017 	ldw	r16,0(sp)
1000b920:	dec00204 	addi	sp,sp,8
1000b924:	f800283a 	ret

1000b928 <_calloc_r>:
1000b928:	298b383a 	mul	r5,r5,r6
1000b92c:	deffff04 	addi	sp,sp,-4
1000b930:	dfc00015 	stw	ra,0(sp)
1000b934:	00081640 	call	10008164 <_malloc_r>
1000b938:	1007883a 	mov	r3,r2
1000b93c:	10000c26 	beq	r2,zero,1000b970 <_calloc_r+0x48>
1000b940:	11bfff17 	ldw	r6,-4(r2)
1000b944:	00bfff04 	movi	r2,-4
1000b948:	308c703a 	and	r6,r6,r2
1000b94c:	31bfff04 	addi	r6,r6,-4
1000b950:	30800968 	cmpgeui	r2,r6,37
1000b954:	1000141e 	bne	r2,zero,1000b9a8 <_calloc_r+0x80>
1000b958:	30800530 	cmpltui	r2,r6,20
1000b95c:	10000826 	beq	r2,zero,1000b980 <_calloc_r+0x58>
1000b960:	1805883a 	mov	r2,r3
1000b964:	10000015 	stw	zero,0(r2)
1000b968:	10000115 	stw	zero,4(r2)
1000b96c:	10000215 	stw	zero,8(r2)
1000b970:	1805883a 	mov	r2,r3
1000b974:	dfc00017 	ldw	ra,0(sp)
1000b978:	dec00104 	addi	sp,sp,4
1000b97c:	f800283a 	ret
1000b980:	18000015 	stw	zero,0(r3)
1000b984:	18000115 	stw	zero,4(r3)
1000b988:	30800728 	cmpgeui	r2,r6,28
1000b98c:	10000e26 	beq	r2,zero,1000b9c8 <_calloc_r+0xa0>
1000b990:	18000215 	stw	zero,8(r3)
1000b994:	18000315 	stw	zero,12(r3)
1000b998:	31800920 	cmpeqi	r6,r6,36
1000b99c:	30000c1e 	bne	r6,zero,1000b9d0 <_calloc_r+0xa8>
1000b9a0:	18800404 	addi	r2,r3,16
1000b9a4:	003fef06 	br	1000b964 <_calloc_r+0x3c>
1000b9a8:	1809883a 	mov	r4,r3
1000b9ac:	000b883a 	mov	r5,zero
1000b9b0:	0008b6c0 	call	10008b6c <memset>
1000b9b4:	1007883a 	mov	r3,r2
1000b9b8:	1805883a 	mov	r2,r3
1000b9bc:	dfc00017 	ldw	ra,0(sp)
1000b9c0:	dec00104 	addi	sp,sp,4
1000b9c4:	f800283a 	ret
1000b9c8:	18800204 	addi	r2,r3,8
1000b9cc:	003fe506 	br	1000b964 <_calloc_r+0x3c>
1000b9d0:	18000415 	stw	zero,16(r3)
1000b9d4:	18800604 	addi	r2,r3,24
1000b9d8:	18000515 	stw	zero,20(r3)
1000b9dc:	003fe106 	br	1000b964 <_calloc_r+0x3c>

1000b9e0 <_fclose_r>:
1000b9e0:	defffc04 	addi	sp,sp,-16
1000b9e4:	dfc00315 	stw	ra,12(sp)
1000b9e8:	dc800215 	stw	r18,8(sp)
1000b9ec:	dc400115 	stw	r17,4(sp)
1000b9f0:	dc000015 	stw	r16,0(sp)
1000b9f4:	28000726 	beq	r5,zero,1000ba14 <_fclose_r+0x34>
1000b9f8:	2023883a 	mov	r17,r4
1000b9fc:	2821883a 	mov	r16,r5
1000ba00:	20000226 	beq	r4,zero,1000ba0c <_fclose_r+0x2c>
1000ba04:	20800e17 	ldw	r2,56(r4)
1000ba08:	10002726 	beq	r2,zero,1000baa8 <_fclose_r+0xc8>
1000ba0c:	8080030f 	ldh	r2,12(r16)
1000ba10:	1000081e 	bne	r2,zero,1000ba34 <_fclose_r+0x54>
1000ba14:	0025883a 	mov	r18,zero
1000ba18:	9005883a 	mov	r2,r18
1000ba1c:	dfc00317 	ldw	ra,12(sp)
1000ba20:	dc800217 	ldw	r18,8(sp)
1000ba24:	dc400117 	ldw	r17,4(sp)
1000ba28:	dc000017 	ldw	r16,0(sp)
1000ba2c:	dec00404 	addi	sp,sp,16
1000ba30:	f800283a 	ret
1000ba34:	800b883a 	mov	r5,r16
1000ba38:	8809883a 	mov	r4,r17
1000ba3c:	0006f480 	call	10006f48 <__sflush_r>
1000ba40:	1025883a 	mov	r18,r2
1000ba44:	80800b17 	ldw	r2,44(r16)
1000ba48:	10000426 	beq	r2,zero,1000ba5c <_fclose_r+0x7c>
1000ba4c:	81400717 	ldw	r5,28(r16)
1000ba50:	8809883a 	mov	r4,r17
1000ba54:	103ee83a 	callr	r2
1000ba58:	10001716 	blt	r2,zero,1000bab8 <_fclose_r+0xd8>
1000ba5c:	8080030b 	ldhu	r2,12(r16)
1000ba60:	1080200c 	andi	r2,r2,128
1000ba64:	1000181e 	bne	r2,zero,1000bac8 <_fclose_r+0xe8>
1000ba68:	81400c17 	ldw	r5,48(r16)
1000ba6c:	28000526 	beq	r5,zero,1000ba84 <_fclose_r+0xa4>
1000ba70:	80801004 	addi	r2,r16,64
1000ba74:	28800226 	beq	r5,r2,1000ba80 <_fclose_r+0xa0>
1000ba78:	8809883a 	mov	r4,r17
1000ba7c:	00076580 	call	10007658 <_free_r>
1000ba80:	80000c15 	stw	zero,48(r16)
1000ba84:	81401117 	ldw	r5,68(r16)
1000ba88:	28000326 	beq	r5,zero,1000ba98 <_fclose_r+0xb8>
1000ba8c:	8809883a 	mov	r4,r17
1000ba90:	00076580 	call	10007658 <_free_r>
1000ba94:	80001115 	stw	zero,68(r16)
1000ba98:	00075040 	call	10007504 <__sfp_lock_acquire>
1000ba9c:	8000030d 	sth	zero,12(r16)
1000baa0:	00075080 	call	10007508 <__sfp_lock_release>
1000baa4:	003fdc06 	br	1000ba18 <_fclose_r+0x38>
1000baa8:	00074f40 	call	100074f4 <__sinit>
1000baac:	8080030f 	ldh	r2,12(r16)
1000bab0:	103fd826 	beq	r2,zero,1000ba14 <_fclose_r+0x34>
1000bab4:	003fdf06 	br	1000ba34 <_fclose_r+0x54>
1000bab8:	8080030b 	ldhu	r2,12(r16)
1000babc:	04bfffc4 	movi	r18,-1
1000bac0:	1080200c 	andi	r2,r2,128
1000bac4:	103fe826 	beq	r2,zero,1000ba68 <_fclose_r+0x88>
1000bac8:	81400417 	ldw	r5,16(r16)
1000bacc:	8809883a 	mov	r4,r17
1000bad0:	00076580 	call	10007658 <_free_r>
1000bad4:	003fe406 	br	1000ba68 <_fclose_r+0x88>

1000bad8 <fclose>:
1000bad8:	00840074 	movhi	r2,4097
1000badc:	200b883a 	mov	r5,r4
1000bae0:	1113ce17 	ldw	r4,20280(r2)
1000bae4:	000b9e01 	jmpi	1000b9e0 <_fclose_r>

1000bae8 <__fputwc>:
1000bae8:	defff904 	addi	sp,sp,-28
1000baec:	dcc00415 	stw	r19,16(sp)
1000baf0:	dc800315 	stw	r18,12(sp)
1000baf4:	dc000115 	stw	r16,4(sp)
1000baf8:	dfc00615 	stw	ra,24(sp)
1000bafc:	dd000515 	stw	r20,20(sp)
1000bb00:	dc400215 	stw	r17,8(sp)
1000bb04:	2025883a 	mov	r18,r4
1000bb08:	2827883a 	mov	r19,r5
1000bb0c:	3021883a 	mov	r16,r6
1000bb10:	000be000 	call	1000be00 <__locale_mb_cur_max>
1000bb14:	10800058 	cmpnei	r2,r2,1
1000bb18:	1000071e 	bne	r2,zero,1000bb38 <__fputwc+0x50>
1000bb1c:	98bfffc4 	addi	r2,r19,-1
1000bb20:	10803fe8 	cmpgeui	r2,r2,255
1000bb24:	1000041e 	bne	r2,zero,1000bb38 <__fputwc+0x50>
1000bb28:	980b883a 	mov	r5,r19
1000bb2c:	dcc000c5 	stb	r19,3(sp)
1000bb30:	05000044 	movi	r20,1
1000bb34:	00000a06 	br	1000bb60 <__fputwc+0x78>
1000bb38:	81c01704 	addi	r7,r16,92
1000bb3c:	980d883a 	mov	r6,r19
1000bb40:	d94000c4 	addi	r5,sp,3
1000bb44:	9009883a 	mov	r4,r18
1000bb48:	000c16c0 	call	1000c16c <_wcrtomb_r>
1000bb4c:	1029883a 	mov	r20,r2
1000bb50:	10bfffd8 	cmpnei	r2,r2,-1
1000bb54:	10003426 	beq	r2,zero,1000bc28 <__fputwc+0x140>
1000bb58:	a0002926 	beq	r20,zero,1000bc00 <__fputwc+0x118>
1000bb5c:	d94000c3 	ldbu	r5,3(sp)
1000bb60:	0023883a 	mov	r17,zero
1000bb64:	00000a06 	br	1000bb90 <__fputwc+0xa8>
1000bb68:	80800017 	ldw	r2,0(r16)
1000bb6c:	11400005 	stb	r5,0(r2)
1000bb70:	80800017 	ldw	r2,0(r16)
1000bb74:	10800044 	addi	r2,r2,1
1000bb78:	80800015 	stw	r2,0(r16)
1000bb7c:	8c400044 	addi	r17,r17,1
1000bb80:	d88000c4 	addi	r2,sp,3
1000bb84:	1445883a 	add	r2,r2,r17
1000bb88:	8d001d2e 	bgeu	r17,r20,1000bc00 <__fputwc+0x118>
1000bb8c:	11400003 	ldbu	r5,0(r2)
1000bb90:	80800217 	ldw	r2,8(r16)
1000bb94:	10bfffc4 	addi	r2,r2,-1
1000bb98:	80800215 	stw	r2,8(r16)
1000bb9c:	103ff20e 	bge	r2,zero,1000bb68 <__fputwc+0x80>
1000bba0:	80c00617 	ldw	r3,24(r16)
1000bba4:	10c01016 	blt	r2,r3,1000bbe8 <__fputwc+0x100>
1000bba8:	80800017 	ldw	r2,0(r16)
1000bbac:	11400005 	stb	r5,0(r2)
1000bbb0:	80800017 	ldw	r2,0(r16)
1000bbb4:	10c00003 	ldbu	r3,0(r2)
1000bbb8:	10800044 	addi	r2,r2,1
1000bbbc:	18c002a0 	cmpeqi	r3,r3,10
1000bbc0:	183fed26 	beq	r3,zero,1000bb78 <__fputwc+0x90>
1000bbc4:	800d883a 	mov	r6,r16
1000bbc8:	01400284 	movi	r5,10
1000bbcc:	9009883a 	mov	r4,r18
1000bbd0:	000c0100 	call	1000c010 <__swbuf_r>
1000bbd4:	10bfffe0 	cmpeqi	r2,r2,-1
1000bbd8:	10803fcc 	andi	r2,r2,255
1000bbdc:	103fe726 	beq	r2,zero,1000bb7c <__fputwc+0x94>
1000bbe0:	053fffc4 	movi	r20,-1
1000bbe4:	00000706 	br	1000bc04 <__fputwc+0x11c>
1000bbe8:	29403fcc 	andi	r5,r5,255
1000bbec:	800d883a 	mov	r6,r16
1000bbf0:	9009883a 	mov	r4,r18
1000bbf4:	000c0100 	call	1000c010 <__swbuf_r>
1000bbf8:	10bfffe0 	cmpeqi	r2,r2,-1
1000bbfc:	003ff606 	br	1000bbd8 <__fputwc+0xf0>
1000bc00:	9829883a 	mov	r20,r19
1000bc04:	a005883a 	mov	r2,r20
1000bc08:	dfc00617 	ldw	ra,24(sp)
1000bc0c:	dd000517 	ldw	r20,20(sp)
1000bc10:	dcc00417 	ldw	r19,16(sp)
1000bc14:	dc800317 	ldw	r18,12(sp)
1000bc18:	dc400217 	ldw	r17,8(sp)
1000bc1c:	dc000117 	ldw	r16,4(sp)
1000bc20:	dec00704 	addi	sp,sp,28
1000bc24:	f800283a 	ret
1000bc28:	8080030b 	ldhu	r2,12(r16)
1000bc2c:	10801014 	ori	r2,r2,64
1000bc30:	8080030d 	sth	r2,12(r16)
1000bc34:	003ff306 	br	1000bc04 <__fputwc+0x11c>

1000bc38 <_fputwc_r>:
1000bc38:	3080030b 	ldhu	r2,12(r6)
1000bc3c:	10c8000c 	andi	r3,r2,8192
1000bc40:	1800051e 	bne	r3,zero,1000bc58 <_fputwc_r+0x20>
1000bc44:	30c01917 	ldw	r3,100(r6)
1000bc48:	10880014 	ori	r2,r2,8192
1000bc4c:	3080030d 	sth	r2,12(r6)
1000bc50:	18880014 	ori	r2,r3,8192
1000bc54:	30801915 	stw	r2,100(r6)
1000bc58:	000bae81 	jmpi	1000bae8 <__fputwc>

1000bc5c <fputwc>:
1000bc5c:	defffc04 	addi	sp,sp,-16
1000bc60:	00840074 	movhi	r2,4097
1000bc64:	dc000115 	stw	r16,4(sp)
1000bc68:	1413ce17 	ldw	r16,20280(r2)
1000bc6c:	dc400215 	stw	r17,8(sp)
1000bc70:	dfc00315 	stw	ra,12(sp)
1000bc74:	2023883a 	mov	r17,r4
1000bc78:	80000226 	beq	r16,zero,1000bc84 <fputwc+0x28>
1000bc7c:	80800e17 	ldw	r2,56(r16)
1000bc80:	10001026 	beq	r2,zero,1000bcc4 <fputwc+0x68>
1000bc84:	2880030b 	ldhu	r2,12(r5)
1000bc88:	10c8000c 	andi	r3,r2,8192
1000bc8c:	1800051e 	bne	r3,zero,1000bca4 <fputwc+0x48>
1000bc90:	28c01917 	ldw	r3,100(r5)
1000bc94:	10880014 	ori	r2,r2,8192
1000bc98:	2880030d 	sth	r2,12(r5)
1000bc9c:	18880014 	ori	r2,r3,8192
1000bca0:	28801915 	stw	r2,100(r5)
1000bca4:	280d883a 	mov	r6,r5
1000bca8:	8009883a 	mov	r4,r16
1000bcac:	880b883a 	mov	r5,r17
1000bcb0:	dfc00317 	ldw	ra,12(sp)
1000bcb4:	dc400217 	ldw	r17,8(sp)
1000bcb8:	dc000117 	ldw	r16,4(sp)
1000bcbc:	dec00404 	addi	sp,sp,16
1000bcc0:	000bae81 	jmpi	1000bae8 <__fputwc>
1000bcc4:	8009883a 	mov	r4,r16
1000bcc8:	d9400015 	stw	r5,0(sp)
1000bccc:	00074f40 	call	100074f4 <__sinit>
1000bcd0:	d9400017 	ldw	r5,0(sp)
1000bcd4:	003feb06 	br	1000bc84 <fputwc+0x28>

1000bcd8 <_fstat_r>:
1000bcd8:	defffe04 	addi	sp,sp,-8
1000bcdc:	2805883a 	mov	r2,r5
1000bce0:	dc000015 	stw	r16,0(sp)
1000bce4:	300b883a 	mov	r5,r6
1000bce8:	2021883a 	mov	r16,r4
1000bcec:	1009883a 	mov	r4,r2
1000bcf0:	00840074 	movhi	r2,4097
1000bcf4:	dfc00115 	stw	ra,4(sp)
1000bcf8:	101c6615 	stw	zero,29080(r2)
1000bcfc:	000f7c80 	call	1000f7c8 <fstat>
1000bd00:	10ffffd8 	cmpnei	r3,r2,-1
1000bd04:	18000426 	beq	r3,zero,1000bd18 <_fstat_r+0x40>
1000bd08:	dfc00117 	ldw	ra,4(sp)
1000bd0c:	dc000017 	ldw	r16,0(sp)
1000bd10:	dec00204 	addi	sp,sp,8
1000bd14:	f800283a 	ret
1000bd18:	00c40074 	movhi	r3,4097
1000bd1c:	18dc6617 	ldw	r3,29080(r3)
1000bd20:	183ff926 	beq	r3,zero,1000bd08 <_fstat_r+0x30>
1000bd24:	80c00015 	stw	r3,0(r16)
1000bd28:	dfc00117 	ldw	ra,4(sp)
1000bd2c:	dc000017 	ldw	r16,0(sp)
1000bd30:	dec00204 	addi	sp,sp,8
1000bd34:	f800283a 	ret

1000bd38 <_isatty_r>:
1000bd38:	defffe04 	addi	sp,sp,-8
1000bd3c:	dc000015 	stw	r16,0(sp)
1000bd40:	00840074 	movhi	r2,4097
1000bd44:	2021883a 	mov	r16,r4
1000bd48:	2809883a 	mov	r4,r5
1000bd4c:	dfc00115 	stw	ra,4(sp)
1000bd50:	101c6615 	stw	zero,29080(r2)
1000bd54:	000f8b40 	call	1000f8b4 <isatty>
1000bd58:	10ffffd8 	cmpnei	r3,r2,-1
1000bd5c:	18000426 	beq	r3,zero,1000bd70 <_isatty_r+0x38>
1000bd60:	dfc00117 	ldw	ra,4(sp)
1000bd64:	dc000017 	ldw	r16,0(sp)
1000bd68:	dec00204 	addi	sp,sp,8
1000bd6c:	f800283a 	ret
1000bd70:	00c40074 	movhi	r3,4097
1000bd74:	18dc6617 	ldw	r3,29080(r3)
1000bd78:	183ff926 	beq	r3,zero,1000bd60 <_isatty_r+0x28>
1000bd7c:	80c00015 	stw	r3,0(r16)
1000bd80:	dfc00117 	ldw	ra,4(sp)
1000bd84:	dc000017 	ldw	r16,0(sp)
1000bd88:	dec00204 	addi	sp,sp,8
1000bd8c:	f800283a 	ret

1000bd90 <_setlocale_r>:
1000bd90:	30001826 	beq	r6,zero,1000bdf4 <_setlocale_r+0x64>
1000bd94:	01440074 	movhi	r5,4097
1000bd98:	defffe04 	addi	sp,sp,-8
1000bd9c:	294a6304 	addi	r5,r5,10636
1000bda0:	3009883a 	mov	r4,r6
1000bda4:	dc000015 	stw	r16,0(sp)
1000bda8:	dfc00115 	stw	ra,4(sp)
1000bdac:	3021883a 	mov	r16,r6
1000bdb0:	000bf380 	call	1000bf38 <strcmp>
1000bdb4:	1000061e 	bne	r2,zero,1000bdd0 <_setlocale_r+0x40>
1000bdb8:	00840074 	movhi	r2,4097
1000bdbc:	108a6204 	addi	r2,r2,10632
1000bdc0:	dfc00117 	ldw	ra,4(sp)
1000bdc4:	dc000017 	ldw	r16,0(sp)
1000bdc8:	dec00204 	addi	sp,sp,8
1000bdcc:	f800283a 	ret
1000bdd0:	01440074 	movhi	r5,4097
1000bdd4:	294a6204 	addi	r5,r5,10632
1000bdd8:	8009883a 	mov	r4,r16
1000bddc:	000bf380 	call	1000bf38 <strcmp>
1000bde0:	103ff526 	beq	r2,zero,1000bdb8 <_setlocale_r+0x28>
1000bde4:	80800003 	ldbu	r2,0(r16)
1000bde8:	103ff326 	beq	r2,zero,1000bdb8 <_setlocale_r+0x28>
1000bdec:	0005883a 	mov	r2,zero
1000bdf0:	003ff306 	br	1000bdc0 <_setlocale_r+0x30>
1000bdf4:	00840074 	movhi	r2,4097
1000bdf8:	108a6204 	addi	r2,r2,10632
1000bdfc:	f800283a 	ret

1000be00 <__locale_mb_cur_max>:
1000be00:	00840074 	movhi	r2,4097
1000be04:	108f3907 	ldb	r2,15588(r2)
1000be08:	f800283a 	ret

1000be0c <setlocale>:
1000be0c:	00840074 	movhi	r2,4097
1000be10:	280d883a 	mov	r6,r5
1000be14:	200b883a 	mov	r5,r4
1000be18:	1113ce17 	ldw	r4,20280(r2)
1000be1c:	000bd901 	jmpi	1000bd90 <_setlocale_r>

1000be20 <_lseek_r>:
1000be20:	defffe04 	addi	sp,sp,-8
1000be24:	2805883a 	mov	r2,r5
1000be28:	dc000015 	stw	r16,0(sp)
1000be2c:	300b883a 	mov	r5,r6
1000be30:	2021883a 	mov	r16,r4
1000be34:	380d883a 	mov	r6,r7
1000be38:	1009883a 	mov	r4,r2
1000be3c:	00840074 	movhi	r2,4097
1000be40:	dfc00115 	stw	ra,4(sp)
1000be44:	101c6615 	stw	zero,29080(r2)
1000be48:	000fa800 	call	1000fa80 <lseek>
1000be4c:	10ffffd8 	cmpnei	r3,r2,-1
1000be50:	18000426 	beq	r3,zero,1000be64 <_lseek_r+0x44>
1000be54:	dfc00117 	ldw	ra,4(sp)
1000be58:	dc000017 	ldw	r16,0(sp)
1000be5c:	dec00204 	addi	sp,sp,8
1000be60:	f800283a 	ret
1000be64:	00c40074 	movhi	r3,4097
1000be68:	18dc6617 	ldw	r3,29080(r3)
1000be6c:	183ff926 	beq	r3,zero,1000be54 <_lseek_r+0x34>
1000be70:	80c00015 	stw	r3,0(r16)
1000be74:	dfc00117 	ldw	ra,4(sp)
1000be78:	dc000017 	ldw	r16,0(sp)
1000be7c:	dec00204 	addi	sp,sp,8
1000be80:	f800283a 	ret

1000be84 <_mbtowc_r>:
1000be84:	00840074 	movhi	r2,4097
1000be88:	108f2817 	ldw	r2,15520(r2)
1000be8c:	1000683a 	jmp	r2

1000be90 <__ascii_mbtowc>:
1000be90:	deffff04 	addi	sp,sp,-4
1000be94:	28000826 	beq	r5,zero,1000beb8 <__ascii_mbtowc+0x28>
1000be98:	30000926 	beq	r6,zero,1000bec0 <__ascii_mbtowc+0x30>
1000be9c:	38000b26 	beq	r7,zero,1000becc <__ascii_mbtowc+0x3c>
1000bea0:	30800003 	ldbu	r2,0(r6)
1000bea4:	28800015 	stw	r2,0(r5)
1000bea8:	30800003 	ldbu	r2,0(r6)
1000beac:	1004c03a 	cmpne	r2,r2,zero
1000beb0:	dec00104 	addi	sp,sp,4
1000beb4:	f800283a 	ret
1000beb8:	d80b883a 	mov	r5,sp
1000bebc:	303ff71e 	bne	r6,zero,1000be9c <__ascii_mbtowc+0xc>
1000bec0:	0005883a 	mov	r2,zero
1000bec4:	dec00104 	addi	sp,sp,4
1000bec8:	f800283a 	ret
1000becc:	00bfff84 	movi	r2,-2
1000bed0:	003ff706 	br	1000beb0 <__ascii_mbtowc+0x20>

1000bed4 <_read_r>:
1000bed4:	defffe04 	addi	sp,sp,-8
1000bed8:	2805883a 	mov	r2,r5
1000bedc:	dc000015 	stw	r16,0(sp)
1000bee0:	300b883a 	mov	r5,r6
1000bee4:	2021883a 	mov	r16,r4
1000bee8:	380d883a 	mov	r6,r7
1000beec:	1009883a 	mov	r4,r2
1000bef0:	00840074 	movhi	r2,4097
1000bef4:	dfc00115 	stw	ra,4(sp)
1000bef8:	101c6615 	stw	zero,29080(r2)
1000befc:	000fc540 	call	1000fc54 <read>
1000bf00:	10ffffd8 	cmpnei	r3,r2,-1
1000bf04:	18000426 	beq	r3,zero,1000bf18 <_read_r+0x44>
1000bf08:	dfc00117 	ldw	ra,4(sp)
1000bf0c:	dc000017 	ldw	r16,0(sp)
1000bf10:	dec00204 	addi	sp,sp,8
1000bf14:	f800283a 	ret
1000bf18:	00c40074 	movhi	r3,4097
1000bf1c:	18dc6617 	ldw	r3,29080(r3)
1000bf20:	183ff926 	beq	r3,zero,1000bf08 <_read_r+0x34>
1000bf24:	80c00015 	stw	r3,0(r16)
1000bf28:	dfc00117 	ldw	ra,4(sp)
1000bf2c:	dc000017 	ldw	r16,0(sp)
1000bf30:	dec00204 	addi	sp,sp,8
1000bf34:	f800283a 	ret

1000bf38 <strcmp>:
1000bf38:	2144b03a 	or	r2,r4,r5
1000bf3c:	108000cc 	andi	r2,r2,3
1000bf40:	1000171e 	bne	r2,zero,1000bfa0 <strcmp+0x68>
1000bf44:	20800017 	ldw	r2,0(r4)
1000bf48:	28c00017 	ldw	r3,0(r5)
1000bf4c:	10c0141e 	bne	r2,r3,1000bfa0 <strcmp+0x68>
1000bf50:	027fbff4 	movhi	r9,65279
1000bf54:	4a7fbfc4 	addi	r9,r9,-257
1000bf58:	1247883a 	add	r3,r2,r9
1000bf5c:	02202074 	movhi	r8,32897
1000bf60:	0084303a 	nor	r2,zero,r2
1000bf64:	1884703a 	and	r2,r3,r2
1000bf68:	42202004 	addi	r8,r8,-32640
1000bf6c:	1204703a 	and	r2,r2,r8
1000bf70:	10000226 	beq	r2,zero,1000bf7c <strcmp+0x44>
1000bf74:	00002406 	br	1000c008 <strcmp+0xd0>
1000bf78:	1000231e 	bne	r2,zero,1000c008 <strcmp+0xd0>
1000bf7c:	21000104 	addi	r4,r4,4
1000bf80:	20c00017 	ldw	r3,0(r4)
1000bf84:	29400104 	addi	r5,r5,4
1000bf88:	29800017 	ldw	r6,0(r5)
1000bf8c:	1a45883a 	add	r2,r3,r9
1000bf90:	00ce303a 	nor	r7,zero,r3
1000bf94:	11c4703a 	and	r2,r2,r7
1000bf98:	1204703a 	and	r2,r2,r8
1000bf9c:	19bff626 	beq	r3,r6,1000bf78 <strcmp+0x40>
1000bfa0:	20800003 	ldbu	r2,0(r4)
1000bfa4:	10c03fcc 	andi	r3,r2,255
1000bfa8:	18c0201c 	xori	r3,r3,128
1000bfac:	18ffe004 	addi	r3,r3,-128
1000bfb0:	18000d26 	beq	r3,zero,1000bfe8 <strcmp+0xb0>
1000bfb4:	29800007 	ldb	r6,0(r5)
1000bfb8:	10803fcc 	andi	r2,r2,255
1000bfbc:	19800326 	beq	r3,r6,1000bfcc <strcmp+0x94>
1000bfc0:	00000a06 	br	1000bfec <strcmp+0xb4>
1000bfc4:	29800007 	ldb	r6,0(r5)
1000bfc8:	11800b1e 	bne	r2,r6,1000bff8 <strcmp+0xc0>
1000bfcc:	21000044 	addi	r4,r4,1
1000bfd0:	20c00003 	ldbu	r3,0(r4)
1000bfd4:	29400044 	addi	r5,r5,1
1000bfd8:	18803fcc 	andi	r2,r3,255
1000bfdc:	1080201c 	xori	r2,r2,128
1000bfe0:	10bfe004 	addi	r2,r2,-128
1000bfe4:	103ff71e 	bne	r2,zero,1000bfc4 <strcmp+0x8c>
1000bfe8:	0005883a 	mov	r2,zero
1000bfec:	28c00003 	ldbu	r3,0(r5)
1000bff0:	10c5c83a 	sub	r2,r2,r3
1000bff4:	f800283a 	ret
1000bff8:	18803fcc 	andi	r2,r3,255
1000bffc:	28c00003 	ldbu	r3,0(r5)
1000c000:	10c5c83a 	sub	r2,r2,r3
1000c004:	f800283a 	ret
1000c008:	0005883a 	mov	r2,zero
1000c00c:	f800283a 	ret

1000c010 <__swbuf_r>:
1000c010:	defffb04 	addi	sp,sp,-20
1000c014:	dc800215 	stw	r18,8(sp)
1000c018:	dc400115 	stw	r17,4(sp)
1000c01c:	dc000015 	stw	r16,0(sp)
1000c020:	dfc00415 	stw	ra,16(sp)
1000c024:	dcc00315 	stw	r19,12(sp)
1000c028:	2023883a 	mov	r17,r4
1000c02c:	2825883a 	mov	r18,r5
1000c030:	3021883a 	mov	r16,r6
1000c034:	20000226 	beq	r4,zero,1000c040 <__swbuf_r+0x30>
1000c038:	20800e17 	ldw	r2,56(r4)
1000c03c:	10003e26 	beq	r2,zero,1000c138 <__swbuf_r+0x128>
1000c040:	80800617 	ldw	r2,24(r16)
1000c044:	80c0030b 	ldhu	r3,12(r16)
1000c048:	80800215 	stw	r2,8(r16)
1000c04c:	1880020c 	andi	r2,r3,8
1000c050:	10001f26 	beq	r2,zero,1000c0d0 <__swbuf_r+0xc0>
1000c054:	80800417 	ldw	r2,16(r16)
1000c058:	10001d26 	beq	r2,zero,1000c0d0 <__swbuf_r+0xc0>
1000c05c:	1908000c 	andi	r4,r3,8192
1000c060:	94c03fcc 	andi	r19,r18,255
1000c064:	20002326 	beq	r4,zero,1000c0f4 <__swbuf_r+0xe4>
1000c068:	80c00017 	ldw	r3,0(r16)
1000c06c:	81000517 	ldw	r4,20(r16)
1000c070:	1885c83a 	sub	r2,r3,r2
1000c074:	1100290e 	bge	r2,r4,1000c11c <__swbuf_r+0x10c>
1000c078:	10800044 	addi	r2,r2,1
1000c07c:	81000217 	ldw	r4,8(r16)
1000c080:	19400044 	addi	r5,r3,1
1000c084:	81400015 	stw	r5,0(r16)
1000c088:	213fffc4 	addi	r4,r4,-1
1000c08c:	81000215 	stw	r4,8(r16)
1000c090:	1c800005 	stb	r18,0(r3)
1000c094:	80c00517 	ldw	r3,20(r16)
1000c098:	18802926 	beq	r3,r2,1000c140 <__swbuf_r+0x130>
1000c09c:	8080030b 	ldhu	r2,12(r16)
1000c0a0:	1080004c 	andi	r2,r2,1
1000c0a4:	10000226 	beq	r2,zero,1000c0b0 <__swbuf_r+0xa0>
1000c0a8:	98800298 	cmpnei	r2,r19,10
1000c0ac:	10002426 	beq	r2,zero,1000c140 <__swbuf_r+0x130>
1000c0b0:	9805883a 	mov	r2,r19
1000c0b4:	dfc00417 	ldw	ra,16(sp)
1000c0b8:	dcc00317 	ldw	r19,12(sp)
1000c0bc:	dc800217 	ldw	r18,8(sp)
1000c0c0:	dc400117 	ldw	r17,4(sp)
1000c0c4:	dc000017 	ldw	r16,0(sp)
1000c0c8:	dec00504 	addi	sp,sp,20
1000c0cc:	f800283a 	ret
1000c0d0:	800b883a 	mov	r5,r16
1000c0d4:	8809883a 	mov	r4,r17
1000c0d8:	00055100 	call	10005510 <__swsetup_r>
1000c0dc:	10001c1e 	bne	r2,zero,1000c150 <__swbuf_r+0x140>
1000c0e0:	80c0030b 	ldhu	r3,12(r16)
1000c0e4:	80800417 	ldw	r2,16(r16)
1000c0e8:	94c03fcc 	andi	r19,r18,255
1000c0ec:	1908000c 	andi	r4,r3,8192
1000c0f0:	203fdd1e 	bne	r4,zero,1000c068 <__swbuf_r+0x58>
1000c0f4:	81001917 	ldw	r4,100(r16)
1000c0f8:	18c80014 	ori	r3,r3,8192
1000c0fc:	0177ffc4 	movi	r5,-8193
1000c100:	2148703a 	and	r4,r4,r5
1000c104:	80c0030d 	sth	r3,12(r16)
1000c108:	80c00017 	ldw	r3,0(r16)
1000c10c:	81001915 	stw	r4,100(r16)
1000c110:	81000517 	ldw	r4,20(r16)
1000c114:	1885c83a 	sub	r2,r3,r2
1000c118:	113fd716 	blt	r2,r4,1000c078 <__swbuf_r+0x68>
1000c11c:	800b883a 	mov	r5,r16
1000c120:	8809883a 	mov	r4,r17
1000c124:	00071700 	call	10007170 <_fflush_r>
1000c128:	1000091e 	bne	r2,zero,1000c150 <__swbuf_r+0x140>
1000c12c:	80c00017 	ldw	r3,0(r16)
1000c130:	00800044 	movi	r2,1
1000c134:	003fd106 	br	1000c07c <__swbuf_r+0x6c>
1000c138:	00074f40 	call	100074f4 <__sinit>
1000c13c:	003fc006 	br	1000c040 <__swbuf_r+0x30>
1000c140:	800b883a 	mov	r5,r16
1000c144:	8809883a 	mov	r4,r17
1000c148:	00071700 	call	10007170 <_fflush_r>
1000c14c:	103fd826 	beq	r2,zero,1000c0b0 <__swbuf_r+0xa0>
1000c150:	04ffffc4 	movi	r19,-1
1000c154:	003fd606 	br	1000c0b0 <__swbuf_r+0xa0>

1000c158 <__swbuf>:
1000c158:	00840074 	movhi	r2,4097
1000c15c:	280d883a 	mov	r6,r5
1000c160:	200b883a 	mov	r5,r4
1000c164:	1113ce17 	ldw	r4,20280(r2)
1000c168:	000c0101 	jmpi	1000c010 <__swbuf_r>

1000c16c <_wcrtomb_r>:
1000c16c:	defffa04 	addi	sp,sp,-24
1000c170:	dc400415 	stw	r17,16(sp)
1000c174:	dc000315 	stw	r16,12(sp)
1000c178:	00840074 	movhi	r2,4097
1000c17c:	dfc00515 	stw	ra,20(sp)
1000c180:	2021883a 	mov	r16,r4
1000c184:	3823883a 	mov	r17,r7
1000c188:	108f2717 	ldw	r2,15516(r2)
1000c18c:	28000826 	beq	r5,zero,1000c1b0 <_wcrtomb_r+0x44>
1000c190:	103ee83a 	callr	r2
1000c194:	10ffffd8 	cmpnei	r3,r2,-1
1000c198:	18000a26 	beq	r3,zero,1000c1c4 <_wcrtomb_r+0x58>
1000c19c:	dfc00517 	ldw	ra,20(sp)
1000c1a0:	dc400417 	ldw	r17,16(sp)
1000c1a4:	dc000317 	ldw	r16,12(sp)
1000c1a8:	dec00604 	addi	sp,sp,24
1000c1ac:	f800283a 	ret
1000c1b0:	000d883a 	mov	r6,zero
1000c1b4:	d9400084 	addi	r5,sp,2
1000c1b8:	103ee83a 	callr	r2
1000c1bc:	10ffffd8 	cmpnei	r3,r2,-1
1000c1c0:	183ff61e 	bne	r3,zero,1000c19c <_wcrtomb_r+0x30>
1000c1c4:	00802284 	movi	r2,138
1000c1c8:	88000015 	stw	zero,0(r17)
1000c1cc:	80800015 	stw	r2,0(r16)
1000c1d0:	00bfffc4 	movi	r2,-1
1000c1d4:	003ff106 	br	1000c19c <_wcrtomb_r+0x30>

1000c1d8 <wcrtomb>:
1000c1d8:	defffa04 	addi	sp,sp,-24
1000c1dc:	00840074 	movhi	r2,4097
1000c1e0:	dc400415 	stw	r17,16(sp)
1000c1e4:	dc000315 	stw	r16,12(sp)
1000c1e8:	dfc00515 	stw	ra,20(sp)
1000c1ec:	1413ce17 	ldw	r16,20280(r2)
1000c1f0:	00840074 	movhi	r2,4097
1000c1f4:	3023883a 	mov	r17,r6
1000c1f8:	108f2717 	ldw	r2,15516(r2)
1000c1fc:	300f883a 	mov	r7,r6
1000c200:	20000b26 	beq	r4,zero,1000c230 <wcrtomb+0x58>
1000c204:	280d883a 	mov	r6,r5
1000c208:	200b883a 	mov	r5,r4
1000c20c:	8009883a 	mov	r4,r16
1000c210:	103ee83a 	callr	r2
1000c214:	10ffffd8 	cmpnei	r3,r2,-1
1000c218:	18000b26 	beq	r3,zero,1000c248 <wcrtomb+0x70>
1000c21c:	dfc00517 	ldw	ra,20(sp)
1000c220:	dc400417 	ldw	r17,16(sp)
1000c224:	dc000317 	ldw	r16,12(sp)
1000c228:	dec00604 	addi	sp,sp,24
1000c22c:	f800283a 	ret
1000c230:	000d883a 	mov	r6,zero
1000c234:	d9400084 	addi	r5,sp,2
1000c238:	8009883a 	mov	r4,r16
1000c23c:	103ee83a 	callr	r2
1000c240:	10ffffd8 	cmpnei	r3,r2,-1
1000c244:	183ff51e 	bne	r3,zero,1000c21c <wcrtomb+0x44>
1000c248:	00802284 	movi	r2,138
1000c24c:	88000015 	stw	zero,0(r17)
1000c250:	80800015 	stw	r2,0(r16)
1000c254:	00bfffc4 	movi	r2,-1
1000c258:	003ff006 	br	1000c21c <wcrtomb+0x44>

1000c25c <_wctomb_r>:
1000c25c:	00840074 	movhi	r2,4097
1000c260:	108f2717 	ldw	r2,15516(r2)
1000c264:	1000683a 	jmp	r2

1000c268 <__ascii_wctomb>:
1000c268:	28000926 	beq	r5,zero,1000c290 <__ascii_wctomb+0x28>
1000c26c:	30804030 	cmpltui	r2,r6,256
1000c270:	10000326 	beq	r2,zero,1000c280 <__ascii_wctomb+0x18>
1000c274:	29800005 	stb	r6,0(r5)
1000c278:	00800044 	movi	r2,1
1000c27c:	f800283a 	ret
1000c280:	00802284 	movi	r2,138
1000c284:	20800015 	stw	r2,0(r4)
1000c288:	00bfffc4 	movi	r2,-1
1000c28c:	f800283a 	ret
1000c290:	0005883a 	mov	r2,zero
1000c294:	f800283a 	ret

1000c298 <__udivdi3>:
1000c298:	defff504 	addi	sp,sp,-44
1000c29c:	dd400615 	stw	r21,24(sp)
1000c2a0:	dc000115 	stw	r16,4(sp)
1000c2a4:	dfc00a15 	stw	ra,40(sp)
1000c2a8:	df000915 	stw	fp,36(sp)
1000c2ac:	ddc00815 	stw	r23,32(sp)
1000c2b0:	dd800715 	stw	r22,28(sp)
1000c2b4:	dd000515 	stw	r20,20(sp)
1000c2b8:	dcc00415 	stw	r19,16(sp)
1000c2bc:	dc800315 	stw	r18,12(sp)
1000c2c0:	dc400215 	stw	r17,8(sp)
1000c2c4:	202b883a 	mov	r21,r4
1000c2c8:	2821883a 	mov	r16,r5
1000c2cc:	3800821e 	bne	r7,zero,1000c4d8 <__udivdi3+0x240>
1000c2d0:	3827883a 	mov	r19,r7
1000c2d4:	3023883a 	mov	r17,r6
1000c2d8:	2025883a 	mov	r18,r4
1000c2dc:	29803d2e 	bgeu	r5,r6,1000c3d4 <__udivdi3+0x13c>
1000c2e0:	00bfffd4 	movui	r2,65535
1000c2e4:	282d883a 	mov	r22,r5
1000c2e8:	1180a52e 	bgeu	r2,r6,1000c580 <__udivdi3+0x2e8>
1000c2ec:	00804034 	movhi	r2,256
1000c2f0:	30813836 	bltu	r6,r2,1000c7d4 <__udivdi3+0x53c>
1000c2f4:	3006d63a 	srli	r3,r6,24
1000c2f8:	04c00604 	movi	r19,24
1000c2fc:	00840074 	movhi	r2,4097
1000c300:	1885883a 	add	r2,r3,r2
1000c304:	108b0643 	ldbu	r2,11289(r2)
1000c308:	14e7883a 	add	r19,r2,r19
1000c30c:	00800804 	movi	r2,32
1000c310:	14c5c83a 	sub	r2,r2,r19
1000c314:	10000526 	beq	r2,zero,1000c32c <__udivdi3+0x94>
1000c318:	80a0983a 	sll	r16,r16,r2
1000c31c:	ace6d83a 	srl	r19,r21,r19
1000c320:	30a2983a 	sll	r17,r6,r2
1000c324:	a8a4983a 	sll	r18,r21,r2
1000c328:	9c2cb03a 	or	r22,r19,r16
1000c32c:	882ad43a 	srli	r21,r17,16
1000c330:	b009883a 	mov	r4,r22
1000c334:	8d3fffcc 	andi	r20,r17,65535
1000c338:	a80b883a 	mov	r5,r21
1000c33c:	000cecc0 	call	1000cecc <__umodsi3>
1000c340:	a80b883a 	mov	r5,r21
1000c344:	b009883a 	mov	r4,r22
1000c348:	1027883a 	mov	r19,r2
1000c34c:	000ce680 	call	1000ce68 <__udivsi3>
1000c350:	1021883a 	mov	r16,r2
1000c354:	9826943a 	slli	r19,r19,16
1000c358:	9004d43a 	srli	r2,r18,16
1000c35c:	a407383a 	mul	r3,r20,r16
1000c360:	9884b03a 	or	r2,r19,r2
1000c364:	10c0052e 	bgeu	r2,r3,1000c37c <__udivdi3+0xe4>
1000c368:	1445883a 	add	r2,r2,r17
1000c36c:	813fffc4 	addi	r4,r16,-1
1000c370:	14400136 	bltu	r2,r17,1000c378 <__udivdi3+0xe0>
1000c374:	10c12836 	bltu	r2,r3,1000c818 <__udivdi3+0x580>
1000c378:	2021883a 	mov	r16,r4
1000c37c:	10e7c83a 	sub	r19,r2,r3
1000c380:	a80b883a 	mov	r5,r21
1000c384:	9809883a 	mov	r4,r19
1000c388:	000cecc0 	call	1000cecc <__umodsi3>
1000c38c:	102d883a 	mov	r22,r2
1000c390:	a80b883a 	mov	r5,r21
1000c394:	9809883a 	mov	r4,r19
1000c398:	000ce680 	call	1000ce68 <__udivsi3>
1000c39c:	b02c943a 	slli	r22,r22,16
1000c3a0:	a0a9383a 	mul	r20,r20,r2
1000c3a4:	94bfffcc 	andi	r18,r18,65535
1000c3a8:	b4a4b03a 	or	r18,r22,r18
1000c3ac:	9500052e 	bgeu	r18,r20,1000c3c4 <__udivdi3+0x12c>
1000c3b0:	8ca5883a 	add	r18,r17,r18
1000c3b4:	10ffffc4 	addi	r3,r2,-1
1000c3b8:	94400136 	bltu	r18,r17,1000c3c0 <__udivdi3+0x128>
1000c3bc:	95011436 	bltu	r18,r20,1000c810 <__udivdi3+0x578>
1000c3c0:	1805883a 	mov	r2,r3
1000c3c4:	800c943a 	slli	r6,r16,16
1000c3c8:	0007883a 	mov	r3,zero
1000c3cc:	3084b03a 	or	r2,r6,r2
1000c3d0:	00005506 	br	1000c528 <__udivdi3+0x290>
1000c3d4:	3000041e 	bne	r6,zero,1000c3e8 <__udivdi3+0x150>
1000c3d8:	000b883a 	mov	r5,zero
1000c3dc:	01000044 	movi	r4,1
1000c3e0:	000ce680 	call	1000ce68 <__udivsi3>
1000c3e4:	1023883a 	mov	r17,r2
1000c3e8:	00bfffd4 	movui	r2,65535
1000c3ec:	14405f2e 	bgeu	r2,r17,1000c56c <__udivdi3+0x2d4>
1000c3f0:	00804034 	movhi	r2,256
1000c3f4:	8880f436 	bltu	r17,r2,1000c7c8 <__udivdi3+0x530>
1000c3f8:	8806d63a 	srli	r3,r17,24
1000c3fc:	04c00604 	movi	r19,24
1000c400:	00840074 	movhi	r2,4097
1000c404:	1885883a 	add	r2,r3,r2
1000c408:	108b0643 	ldbu	r2,11289(r2)
1000c40c:	14e7883a 	add	r19,r2,r19
1000c410:	00800804 	movi	r2,32
1000c414:	14c5c83a 	sub	r2,r2,r19
1000c418:	10005e1e 	bne	r2,zero,1000c594 <__udivdi3+0x2fc>
1000c41c:	8828d43a 	srli	r20,r17,16
1000c420:	8461c83a 	sub	r16,r16,r17
1000c424:	8d7fffcc 	andi	r21,r17,65535
1000c428:	00c00044 	movi	r3,1
1000c42c:	8009883a 	mov	r4,r16
1000c430:	a00b883a 	mov	r5,r20
1000c434:	d8c00015 	stw	r3,0(sp)
1000c438:	000cecc0 	call	1000cecc <__umodsi3>
1000c43c:	8009883a 	mov	r4,r16
1000c440:	a00b883a 	mov	r5,r20
1000c444:	1027883a 	mov	r19,r2
1000c448:	000ce680 	call	1000ce68 <__udivsi3>
1000c44c:	1021883a 	mov	r16,r2
1000c450:	9826943a 	slli	r19,r19,16
1000c454:	9004d43a 	srli	r2,r18,16
1000c458:	8549383a 	mul	r4,r16,r21
1000c45c:	d8c00017 	ldw	r3,0(sp)
1000c460:	9884b03a 	or	r2,r19,r2
1000c464:	1100052e 	bgeu	r2,r4,1000c47c <__udivdi3+0x1e4>
1000c468:	1445883a 	add	r2,r2,r17
1000c46c:	817fffc4 	addi	r5,r16,-1
1000c470:	14400136 	bltu	r2,r17,1000c478 <__udivdi3+0x1e0>
1000c474:	1100eb36 	bltu	r2,r4,1000c824 <__udivdi3+0x58c>
1000c478:	2821883a 	mov	r16,r5
1000c47c:	1127c83a 	sub	r19,r2,r4
1000c480:	a00b883a 	mov	r5,r20
1000c484:	9809883a 	mov	r4,r19
1000c488:	d8c00015 	stw	r3,0(sp)
1000c48c:	000cecc0 	call	1000cecc <__umodsi3>
1000c490:	102d883a 	mov	r22,r2
1000c494:	a00b883a 	mov	r5,r20
1000c498:	9809883a 	mov	r4,r19
1000c49c:	000ce680 	call	1000ce68 <__udivsi3>
1000c4a0:	b02c943a 	slli	r22,r22,16
1000c4a4:	156b383a 	mul	r21,r2,r21
1000c4a8:	94bfffcc 	andi	r18,r18,65535
1000c4ac:	b4a4b03a 	or	r18,r22,r18
1000c4b0:	d8c00017 	ldw	r3,0(sp)
1000c4b4:	9540052e 	bgeu	r18,r21,1000c4cc <__udivdi3+0x234>
1000c4b8:	8ca5883a 	add	r18,r17,r18
1000c4bc:	113fffc4 	addi	r4,r2,-1
1000c4c0:	94400136 	bltu	r18,r17,1000c4c8 <__udivdi3+0x230>
1000c4c4:	9540d036 	bltu	r18,r21,1000c808 <__udivdi3+0x570>
1000c4c8:	2005883a 	mov	r2,r4
1000c4cc:	800c943a 	slli	r6,r16,16
1000c4d0:	3084b03a 	or	r2,r6,r2
1000c4d4:	00001406 	br	1000c528 <__udivdi3+0x290>
1000c4d8:	29c01136 	bltu	r5,r7,1000c520 <__udivdi3+0x288>
1000c4dc:	00bfffd4 	movui	r2,65535
1000c4e0:	11c01d2e 	bgeu	r2,r7,1000c558 <__udivdi3+0x2c0>
1000c4e4:	00804034 	movhi	r2,256
1000c4e8:	3880ac36 	bltu	r7,r2,1000c79c <__udivdi3+0x504>
1000c4ec:	3806d63a 	srli	r3,r7,24
1000c4f0:	01000604 	movi	r4,24
1000c4f4:	00840074 	movhi	r2,4097
1000c4f8:	1885883a 	add	r2,r3,r2
1000c4fc:	10cb0643 	ldbu	r3,11289(r2)
1000c500:	05800804 	movi	r22,32
1000c504:	1907883a 	add	r3,r3,r4
1000c508:	b0edc83a 	sub	r22,r22,r3
1000c50c:	b000531e 	bne	r22,zero,1000c65c <__udivdi3+0x3c4>
1000c510:	3c00a536 	bltu	r7,r16,1000c7a8 <__udivdi3+0x510>
1000c514:	a985403a 	cmpgeu	r2,r21,r6
1000c518:	0007883a 	mov	r3,zero
1000c51c:	00000206 	br	1000c528 <__udivdi3+0x290>
1000c520:	0007883a 	mov	r3,zero
1000c524:	0005883a 	mov	r2,zero
1000c528:	dfc00a17 	ldw	ra,40(sp)
1000c52c:	df000917 	ldw	fp,36(sp)
1000c530:	ddc00817 	ldw	r23,32(sp)
1000c534:	dd800717 	ldw	r22,28(sp)
1000c538:	dd400617 	ldw	r21,24(sp)
1000c53c:	dd000517 	ldw	r20,20(sp)
1000c540:	dcc00417 	ldw	r19,16(sp)
1000c544:	dc800317 	ldw	r18,12(sp)
1000c548:	dc400217 	ldw	r17,8(sp)
1000c54c:	dc000117 	ldw	r16,4(sp)
1000c550:	dec00b04 	addi	sp,sp,44
1000c554:	f800283a 	ret
1000c558:	38804030 	cmpltui	r2,r7,256
1000c55c:	1000951e 	bne	r2,zero,1000c7b4 <__udivdi3+0x51c>
1000c560:	3806d23a 	srli	r3,r7,8
1000c564:	01000204 	movi	r4,8
1000c568:	003fe206 	br	1000c4f4 <__udivdi3+0x25c>
1000c56c:	88804030 	cmpltui	r2,r17,256
1000c570:	10009b1e 	bne	r2,zero,1000c7e0 <__udivdi3+0x548>
1000c574:	8806d23a 	srli	r3,r17,8
1000c578:	04c00204 	movi	r19,8
1000c57c:	003fa006 	br	1000c400 <__udivdi3+0x168>
1000c580:	30804030 	cmpltui	r2,r6,256
1000c584:	10008e1e 	bne	r2,zero,1000c7c0 <__udivdi3+0x528>
1000c588:	3006d23a 	srli	r3,r6,8
1000c58c:	04c00204 	movi	r19,8
1000c590:	003f5a06 	br	1000c2fc <__udivdi3+0x64>
1000c594:	88a2983a 	sll	r17,r17,r2
1000c598:	84ecd83a 	srl	r22,r16,r19
1000c59c:	80a0983a 	sll	r16,r16,r2
1000c5a0:	8828d43a 	srli	r20,r17,16
1000c5a4:	b009883a 	mov	r4,r22
1000c5a8:	ace6d83a 	srl	r19,r21,r19
1000c5ac:	a00b883a 	mov	r5,r20
1000c5b0:	a8a4983a 	sll	r18,r21,r2
1000c5b4:	000cecc0 	call	1000cecc <__umodsi3>
1000c5b8:	b009883a 	mov	r4,r22
1000c5bc:	a00b883a 	mov	r5,r20
1000c5c0:	9c26b03a 	or	r19,r19,r16
1000c5c4:	1021883a 	mov	r16,r2
1000c5c8:	000ce680 	call	1000ce68 <__udivsi3>
1000c5cc:	102f883a 	mov	r23,r2
1000c5d0:	8d7fffcc 	andi	r21,r17,65535
1000c5d4:	8020943a 	slli	r16,r16,16
1000c5d8:	9804d43a 	srli	r2,r19,16
1000c5dc:	aded383a 	mul	r22,r21,r23
1000c5e0:	8084b03a 	or	r2,r16,r2
1000c5e4:	1580062e 	bgeu	r2,r22,1000c600 <__udivdi3+0x368>
1000c5e8:	1445883a 	add	r2,r2,r17
1000c5ec:	b8ffffc4 	addi	r3,r23,-1
1000c5f0:	14408336 	bltu	r2,r17,1000c800 <__udivdi3+0x568>
1000c5f4:	1580822e 	bgeu	r2,r22,1000c800 <__udivdi3+0x568>
1000c5f8:	bdffff84 	addi	r23,r23,-2
1000c5fc:	1445883a 	add	r2,r2,r17
1000c600:	15adc83a 	sub	r22,r2,r22
1000c604:	a00b883a 	mov	r5,r20
1000c608:	b009883a 	mov	r4,r22
1000c60c:	000cecc0 	call	1000cecc <__umodsi3>
1000c610:	1021883a 	mov	r16,r2
1000c614:	b009883a 	mov	r4,r22
1000c618:	a00b883a 	mov	r5,r20
1000c61c:	000ce680 	call	1000ce68 <__udivsi3>
1000c620:	8020943a 	slli	r16,r16,16
1000c624:	a889383a 	mul	r4,r21,r2
1000c628:	9cffffcc 	andi	r19,r19,65535
1000c62c:	84e0b03a 	or	r16,r16,r19
1000c630:	8100062e 	bgeu	r16,r4,1000c64c <__udivdi3+0x3b4>
1000c634:	8461883a 	add	r16,r16,r17
1000c638:	10ffffc4 	addi	r3,r2,-1
1000c63c:	84406c36 	bltu	r16,r17,1000c7f0 <__udivdi3+0x558>
1000c640:	81006b2e 	bgeu	r16,r4,1000c7f0 <__udivdi3+0x558>
1000c644:	10bfff84 	addi	r2,r2,-2
1000c648:	8461883a 	add	r16,r16,r17
1000c64c:	b806943a 	slli	r3,r23,16
1000c650:	8121c83a 	sub	r16,r16,r4
1000c654:	1886b03a 	or	r3,r3,r2
1000c658:	003f7406 	br	1000c42c <__udivdi3+0x194>
1000c65c:	30f8d83a 	srl	fp,r6,r3
1000c660:	3d8e983a 	sll	r7,r7,r22
1000c664:	80eed83a 	srl	r23,r16,r3
1000c668:	a8c6d83a 	srl	r3,r21,r3
1000c66c:	e1f8b03a 	or	fp,fp,r7
1000c670:	e024d43a 	srli	r18,fp,16
1000c674:	85a0983a 	sll	r16,r16,r22
1000c678:	b809883a 	mov	r4,r23
1000c67c:	900b883a 	mov	r5,r18
1000c680:	1c22b03a 	or	r17,r3,r16
1000c684:	35a8983a 	sll	r20,r6,r22
1000c688:	000cecc0 	call	1000cecc <__umodsi3>
1000c68c:	b809883a 	mov	r4,r23
1000c690:	900b883a 	mov	r5,r18
1000c694:	1027883a 	mov	r19,r2
1000c698:	000ce680 	call	1000ce68 <__udivsi3>
1000c69c:	1021883a 	mov	r16,r2
1000c6a0:	e0ffffcc 	andi	r3,fp,65535
1000c6a4:	9826943a 	slli	r19,r19,16
1000c6a8:	8804d43a 	srli	r2,r17,16
1000c6ac:	1c09383a 	mul	r4,r3,r16
1000c6b0:	9884b03a 	or	r2,r19,r2
1000c6b4:	1100062e 	bgeu	r2,r4,1000c6d0 <__udivdi3+0x438>
1000c6b8:	1705883a 	add	r2,r2,fp
1000c6bc:	817fffc4 	addi	r5,r16,-1
1000c6c0:	17004d36 	bltu	r2,fp,1000c7f8 <__udivdi3+0x560>
1000c6c4:	11004c2e 	bgeu	r2,r4,1000c7f8 <__udivdi3+0x560>
1000c6c8:	843fff84 	addi	r16,r16,-2
1000c6cc:	1705883a 	add	r2,r2,fp
1000c6d0:	1127c83a 	sub	r19,r2,r4
1000c6d4:	900b883a 	mov	r5,r18
1000c6d8:	9809883a 	mov	r4,r19
1000c6dc:	d8c00015 	stw	r3,0(sp)
1000c6e0:	000cecc0 	call	1000cecc <__umodsi3>
1000c6e4:	9809883a 	mov	r4,r19
1000c6e8:	900b883a 	mov	r5,r18
1000c6ec:	102f883a 	mov	r23,r2
1000c6f0:	000ce680 	call	1000ce68 <__udivsi3>
1000c6f4:	d8c00017 	ldw	r3,0(sp)
1000c6f8:	b82e943a 	slli	r23,r23,16
1000c6fc:	8c7fffcc 	andi	r17,r17,65535
1000c700:	1889383a 	mul	r4,r3,r2
1000c704:	bc62b03a 	or	r17,r23,r17
1000c708:	8900062e 	bgeu	r17,r4,1000c724 <__udivdi3+0x48c>
1000c70c:	8f23883a 	add	r17,r17,fp
1000c710:	10ffffc4 	addi	r3,r2,-1
1000c714:	8f003436 	bltu	r17,fp,1000c7e8 <__udivdi3+0x550>
1000c718:	8900332e 	bgeu	r17,r4,1000c7e8 <__udivdi3+0x550>
1000c71c:	10bfff84 	addi	r2,r2,-2
1000c720:	8f23883a 	add	r17,r17,fp
1000c724:	8020943a 	slli	r16,r16,16
1000c728:	a17fffcc 	andi	r5,r20,65535
1000c72c:	a00cd43a 	srli	r6,r20,16
1000c730:	8084b03a 	or	r2,r16,r2
1000c734:	10ffffcc 	andi	r3,r2,65535
1000c738:	1028d43a 	srli	r20,r2,16
1000c73c:	1951383a 	mul	r8,r3,r5
1000c740:	1987383a 	mul	r3,r3,r6
1000c744:	a14b383a 	mul	r5,r20,r5
1000c748:	400ed43a 	srli	r7,r8,16
1000c74c:	8923c83a 	sub	r17,r17,r4
1000c750:	1947883a 	add	r3,r3,r5
1000c754:	38c7883a 	add	r3,r7,r3
1000c758:	a1a9383a 	mul	r20,r20,r6
1000c75c:	1940022e 	bgeu	r3,r5,1000c768 <__udivdi3+0x4d0>
1000c760:	01000074 	movhi	r4,1
1000c764:	a129883a 	add	r20,r20,r4
1000c768:	180cd43a 	srli	r6,r3,16
1000c76c:	3529883a 	add	r20,r6,r20
1000c770:	8d000836 	bltu	r17,r20,1000c794 <__udivdi3+0x4fc>
1000c774:	8d000226 	beq	r17,r20,1000c780 <__udivdi3+0x4e8>
1000c778:	0007883a 	mov	r3,zero
1000c77c:	003f6a06 	br	1000c528 <__udivdi3+0x290>
1000c780:	1806943a 	slli	r3,r3,16
1000c784:	ad8c983a 	sll	r6,r21,r22
1000c788:	423fffcc 	andi	r8,r8,65535
1000c78c:	1a07883a 	add	r3,r3,r8
1000c790:	30fff92e 	bgeu	r6,r3,1000c778 <__udivdi3+0x4e0>
1000c794:	10bfffc4 	addi	r2,r2,-1
1000c798:	003ff706 	br	1000c778 <__udivdi3+0x4e0>
1000c79c:	3806d43a 	srli	r3,r7,16
1000c7a0:	01000404 	movi	r4,16
1000c7a4:	003f5306 	br	1000c4f4 <__udivdi3+0x25c>
1000c7a8:	0007883a 	mov	r3,zero
1000c7ac:	00800044 	movi	r2,1
1000c7b0:	003f5d06 	br	1000c528 <__udivdi3+0x290>
1000c7b4:	3807883a 	mov	r3,r7
1000c7b8:	0009883a 	mov	r4,zero
1000c7bc:	003f4d06 	br	1000c4f4 <__udivdi3+0x25c>
1000c7c0:	3007883a 	mov	r3,r6
1000c7c4:	003ecd06 	br	1000c2fc <__udivdi3+0x64>
1000c7c8:	8806d43a 	srli	r3,r17,16
1000c7cc:	04c00404 	movi	r19,16
1000c7d0:	003f0b06 	br	1000c400 <__udivdi3+0x168>
1000c7d4:	3006d43a 	srli	r3,r6,16
1000c7d8:	04c00404 	movi	r19,16
1000c7dc:	003ec706 	br	1000c2fc <__udivdi3+0x64>
1000c7e0:	8807883a 	mov	r3,r17
1000c7e4:	003f0606 	br	1000c400 <__udivdi3+0x168>
1000c7e8:	1805883a 	mov	r2,r3
1000c7ec:	003fcd06 	br	1000c724 <__udivdi3+0x48c>
1000c7f0:	1805883a 	mov	r2,r3
1000c7f4:	003f9506 	br	1000c64c <__udivdi3+0x3b4>
1000c7f8:	2821883a 	mov	r16,r5
1000c7fc:	003fb406 	br	1000c6d0 <__udivdi3+0x438>
1000c800:	182f883a 	mov	r23,r3
1000c804:	003f7e06 	br	1000c600 <__udivdi3+0x368>
1000c808:	10bfff84 	addi	r2,r2,-2
1000c80c:	003f2f06 	br	1000c4cc <__udivdi3+0x234>
1000c810:	10bfff84 	addi	r2,r2,-2
1000c814:	003eeb06 	br	1000c3c4 <__udivdi3+0x12c>
1000c818:	843fff84 	addi	r16,r16,-2
1000c81c:	1445883a 	add	r2,r2,r17
1000c820:	003ed606 	br	1000c37c <__udivdi3+0xe4>
1000c824:	843fff84 	addi	r16,r16,-2
1000c828:	1445883a 	add	r2,r2,r17
1000c82c:	003f1306 	br	1000c47c <__udivdi3+0x1e4>

1000c830 <__umoddi3>:
1000c830:	defff404 	addi	sp,sp,-48
1000c834:	dc400315 	stw	r17,12(sp)
1000c838:	dc000215 	stw	r16,8(sp)
1000c83c:	dfc00b15 	stw	ra,44(sp)
1000c840:	df000a15 	stw	fp,40(sp)
1000c844:	ddc00915 	stw	r23,36(sp)
1000c848:	dd800815 	stw	r22,32(sp)
1000c84c:	dd400715 	stw	r21,28(sp)
1000c850:	dd000615 	stw	r20,24(sp)
1000c854:	dcc00515 	stw	r19,20(sp)
1000c858:	dc800415 	stw	r18,16(sp)
1000c85c:	2823883a 	mov	r17,r5
1000c860:	2021883a 	mov	r16,r4
1000c864:	3800701e 	bne	r7,zero,1000ca28 <__umoddi3+0x1f8>
1000c868:	382b883a 	mov	r21,r7
1000c86c:	3027883a 	mov	r19,r6
1000c870:	2029883a 	mov	r20,r4
1000c874:	2980392e 	bgeu	r5,r6,1000c95c <__umoddi3+0x12c>
1000c878:	00bfffd4 	movui	r2,65535
1000c87c:	282f883a 	mov	r23,r5
1000c880:	11809736 	bltu	r2,r6,1000cae0 <__umoddi3+0x2b0>
1000c884:	30804030 	cmpltui	r2,r6,256
1000c888:	1001231e 	bne	r2,zero,1000cd18 <__umoddi3+0x4e8>
1000c88c:	3006d23a 	srli	r3,r6,8
1000c890:	05400204 	movi	r21,8
1000c894:	00840074 	movhi	r2,4097
1000c898:	1885883a 	add	r2,r3,r2
1000c89c:	108b0643 	ldbu	r2,11289(r2)
1000c8a0:	156b883a 	add	r21,r2,r21
1000c8a4:	00800804 	movi	r2,32
1000c8a8:	1565c83a 	sub	r18,r2,r21
1000c8ac:	90000526 	beq	r18,zero,1000c8c4 <__umoddi3+0x94>
1000c8b0:	8ca2983a 	sll	r17,r17,r18
1000c8b4:	856ad83a 	srl	r21,r16,r21
1000c8b8:	34a6983a 	sll	r19,r6,r18
1000c8bc:	84a8983a 	sll	r20,r16,r18
1000c8c0:	ac6eb03a 	or	r23,r21,r17
1000c8c4:	982cd43a 	srli	r22,r19,16
1000c8c8:	b809883a 	mov	r4,r23
1000c8cc:	9c3fffcc 	andi	r16,r19,65535
1000c8d0:	b00b883a 	mov	r5,r22
1000c8d4:	000cecc0 	call	1000cecc <__umodsi3>
1000c8d8:	b00b883a 	mov	r5,r22
1000c8dc:	b809883a 	mov	r4,r23
1000c8e0:	102b883a 	mov	r21,r2
1000c8e4:	000ce680 	call	1000ce68 <__udivsi3>
1000c8e8:	a82a943a 	slli	r21,r21,16
1000c8ec:	a006d43a 	srli	r3,r20,16
1000c8f0:	8085383a 	mul	r2,r16,r2
1000c8f4:	a8c6b03a 	or	r3,r21,r3
1000c8f8:	1880032e 	bgeu	r3,r2,1000c908 <__umoddi3+0xd8>
1000c8fc:	1cc7883a 	add	r3,r3,r19
1000c900:	1cc00136 	bltu	r3,r19,1000c908 <__umoddi3+0xd8>
1000c904:	18811836 	bltu	r3,r2,1000cd68 <__umoddi3+0x538>
1000c908:	18abc83a 	sub	r21,r3,r2
1000c90c:	b00b883a 	mov	r5,r22
1000c910:	a809883a 	mov	r4,r21
1000c914:	000cecc0 	call	1000cecc <__umodsi3>
1000c918:	1023883a 	mov	r17,r2
1000c91c:	b00b883a 	mov	r5,r22
1000c920:	a809883a 	mov	r4,r21
1000c924:	000ce680 	call	1000ce68 <__udivsi3>
1000c928:	8822943a 	slli	r17,r17,16
1000c92c:	8085383a 	mul	r2,r16,r2
1000c930:	a0ffffcc 	andi	r3,r20,65535
1000c934:	88c6b03a 	or	r3,r17,r3
1000c938:	1880042e 	bgeu	r3,r2,1000c94c <__umoddi3+0x11c>
1000c93c:	1cc7883a 	add	r3,r3,r19
1000c940:	1cc00236 	bltu	r3,r19,1000c94c <__umoddi3+0x11c>
1000c944:	1880012e 	bgeu	r3,r2,1000c94c <__umoddi3+0x11c>
1000c948:	1cc7883a 	add	r3,r3,r19
1000c94c:	1885c83a 	sub	r2,r3,r2
1000c950:	1484d83a 	srl	r2,r2,r18
1000c954:	0007883a 	mov	r3,zero
1000c958:	00003606 	br	1000ca34 <__umoddi3+0x204>
1000c95c:	3000041e 	bne	r6,zero,1000c970 <__umoddi3+0x140>
1000c960:	000b883a 	mov	r5,zero
1000c964:	01000044 	movi	r4,1
1000c968:	000ce680 	call	1000ce68 <__udivsi3>
1000c96c:	1027883a 	mov	r19,r2
1000c970:	00bfffd4 	movui	r2,65535
1000c974:	14c0552e 	bgeu	r2,r19,1000cacc <__umoddi3+0x29c>
1000c978:	00804034 	movhi	r2,256
1000c97c:	9880ee36 	bltu	r19,r2,1000cd38 <__umoddi3+0x508>
1000c980:	9806d63a 	srli	r3,r19,24
1000c984:	05400604 	movi	r21,24
1000c988:	00840074 	movhi	r2,4097
1000c98c:	1885883a 	add	r2,r3,r2
1000c990:	108b0643 	ldbu	r2,11289(r2)
1000c994:	156b883a 	add	r21,r2,r21
1000c998:	00800804 	movi	r2,32
1000c99c:	1565c83a 	sub	r18,r2,r21
1000c9a0:	9000ab1e 	bne	r18,zero,1000cc50 <__umoddi3+0x420>
1000c9a4:	982cd43a 	srli	r22,r19,16
1000c9a8:	8ce3c83a 	sub	r17,r17,r19
1000c9ac:	9d7fffcc 	andi	r21,r19,65535
1000c9b0:	b00b883a 	mov	r5,r22
1000c9b4:	8809883a 	mov	r4,r17
1000c9b8:	000cecc0 	call	1000cecc <__umodsi3>
1000c9bc:	b00b883a 	mov	r5,r22
1000c9c0:	8809883a 	mov	r4,r17
1000c9c4:	1021883a 	mov	r16,r2
1000c9c8:	000ce680 	call	1000ce68 <__udivsi3>
1000c9cc:	8020943a 	slli	r16,r16,16
1000c9d0:	a006d43a 	srli	r3,r20,16
1000c9d4:	1545383a 	mul	r2,r2,r21
1000c9d8:	80c6b03a 	or	r3,r16,r3
1000c9dc:	1880042e 	bgeu	r3,r2,1000c9f0 <__umoddi3+0x1c0>
1000c9e0:	1cc7883a 	add	r3,r3,r19
1000c9e4:	1cc00236 	bltu	r3,r19,1000c9f0 <__umoddi3+0x1c0>
1000c9e8:	1880012e 	bgeu	r3,r2,1000c9f0 <__umoddi3+0x1c0>
1000c9ec:	1cc7883a 	add	r3,r3,r19
1000c9f0:	18a1c83a 	sub	r16,r3,r2
1000c9f4:	b00b883a 	mov	r5,r22
1000c9f8:	8009883a 	mov	r4,r16
1000c9fc:	000cecc0 	call	1000cecc <__umodsi3>
1000ca00:	1023883a 	mov	r17,r2
1000ca04:	b00b883a 	mov	r5,r22
1000ca08:	8009883a 	mov	r4,r16
1000ca0c:	000ce680 	call	1000ce68 <__udivsi3>
1000ca10:	8822943a 	slli	r17,r17,16
1000ca14:	1545383a 	mul	r2,r2,r21
1000ca18:	a53fffcc 	andi	r20,r20,65535
1000ca1c:	8d06b03a 	or	r3,r17,r20
1000ca20:	18bfca2e 	bgeu	r3,r2,1000c94c <__umoddi3+0x11c>
1000ca24:	003fc506 	br	1000c93c <__umoddi3+0x10c>
1000ca28:	2005883a 	mov	r2,r4
1000ca2c:	29c00d2e 	bgeu	r5,r7,1000ca64 <__umoddi3+0x234>
1000ca30:	2807883a 	mov	r3,r5
1000ca34:	dfc00b17 	ldw	ra,44(sp)
1000ca38:	df000a17 	ldw	fp,40(sp)
1000ca3c:	ddc00917 	ldw	r23,36(sp)
1000ca40:	dd800817 	ldw	r22,32(sp)
1000ca44:	dd400717 	ldw	r21,28(sp)
1000ca48:	dd000617 	ldw	r20,24(sp)
1000ca4c:	dcc00517 	ldw	r19,20(sp)
1000ca50:	dc800417 	ldw	r18,16(sp)
1000ca54:	dc400317 	ldw	r17,12(sp)
1000ca58:	dc000217 	ldw	r16,8(sp)
1000ca5c:	dec00c04 	addi	sp,sp,48
1000ca60:	f800283a 	ret
1000ca64:	013fffd4 	movui	r4,65535
1000ca68:	2807883a 	mov	r3,r5
1000ca6c:	21c0122e 	bgeu	r4,r7,1000cab8 <__umoddi3+0x288>
1000ca70:	01004034 	movhi	r4,256
1000ca74:	3900ad36 	bltu	r7,r4,1000cd2c <__umoddi3+0x4fc>
1000ca78:	3810d63a 	srli	r8,r7,24
1000ca7c:	01400604 	movi	r5,24
1000ca80:	01040074 	movhi	r4,4097
1000ca84:	4109883a 	add	r4,r8,r4
1000ca88:	250b0643 	ldbu	r20,11289(r4)
1000ca8c:	04c00804 	movi	r19,32
1000ca90:	a169883a 	add	r20,r20,r5
1000ca94:	9d27c83a 	sub	r19,r19,r20
1000ca98:	9800161e 	bne	r19,zero,1000caf4 <__umoddi3+0x2c4>
1000ca9c:	3c400136 	bltu	r7,r17,1000caa4 <__umoddi3+0x274>
1000caa0:	81bfe436 	bltu	r16,r6,1000ca34 <__umoddi3+0x204>
1000caa4:	8185c83a 	sub	r2,r16,r6
1000caa8:	89cfc83a 	sub	r7,r17,r7
1000caac:	8087803a 	cmpltu	r3,r16,r2
1000cab0:	38c7c83a 	sub	r3,r7,r3
1000cab4:	003fdf06 	br	1000ca34 <__umoddi3+0x204>
1000cab8:	39004030 	cmpltui	r4,r7,256
1000cabc:	2000981e 	bne	r4,zero,1000cd20 <__umoddi3+0x4f0>
1000cac0:	3810d23a 	srli	r8,r7,8
1000cac4:	01400204 	movi	r5,8
1000cac8:	003fed06 	br	1000ca80 <__umoddi3+0x250>
1000cacc:	98804030 	cmpltui	r2,r19,256
1000cad0:	10009c1e 	bne	r2,zero,1000cd44 <__umoddi3+0x514>
1000cad4:	9806d23a 	srli	r3,r19,8
1000cad8:	05400204 	movi	r21,8
1000cadc:	003faa06 	br	1000c988 <__umoddi3+0x158>
1000cae0:	00804034 	movhi	r2,256
1000cae4:	30809936 	bltu	r6,r2,1000cd4c <__umoddi3+0x51c>
1000cae8:	3006d63a 	srli	r3,r6,24
1000caec:	05400604 	movi	r21,24
1000caf0:	003f6806 	br	1000c894 <__umoddi3+0x64>
1000caf4:	3504d83a 	srl	r2,r6,r20
1000caf8:	3cce983a 	sll	r7,r7,r19
1000cafc:	8d38d83a 	srl	fp,r17,r20
1000cb00:	8ce2983a 	sll	r17,r17,r19
1000cb04:	11eeb03a 	or	r23,r2,r7
1000cb08:	b82cd43a 	srli	r22,r23,16
1000cb0c:	8504d83a 	srl	r2,r16,r20
1000cb10:	e009883a 	mov	r4,fp
1000cb14:	b00b883a 	mov	r5,r22
1000cb18:	34e4983a 	sll	r18,r6,r19
1000cb1c:	1462b03a 	or	r17,r2,r17
1000cb20:	000cecc0 	call	1000cecc <__umodsi3>
1000cb24:	e009883a 	mov	r4,fp
1000cb28:	b00b883a 	mov	r5,r22
1000cb2c:	102b883a 	mov	r21,r2
1000cb30:	000ce680 	call	1000ce68 <__udivsi3>
1000cb34:	100d883a 	mov	r6,r2
1000cb38:	b8ffffcc 	andi	r3,r23,65535
1000cb3c:	a82a943a 	slli	r21,r21,16
1000cb40:	8804d43a 	srli	r2,r17,16
1000cb44:	1989383a 	mul	r4,r3,r6
1000cb48:	84e0983a 	sll	r16,r16,r19
1000cb4c:	a884b03a 	or	r2,r21,r2
1000cb50:	1100062e 	bgeu	r2,r4,1000cb6c <__umoddi3+0x33c>
1000cb54:	15c5883a 	add	r2,r2,r23
1000cb58:	317fffc4 	addi	r5,r6,-1
1000cb5c:	15c08036 	bltu	r2,r23,1000cd60 <__umoddi3+0x530>
1000cb60:	11007f2e 	bgeu	r2,r4,1000cd60 <__umoddi3+0x530>
1000cb64:	31bfff84 	addi	r6,r6,-2
1000cb68:	15c5883a 	add	r2,r2,r23
1000cb6c:	112bc83a 	sub	r21,r2,r4
1000cb70:	b00b883a 	mov	r5,r22
1000cb74:	a809883a 	mov	r4,r21
1000cb78:	d9800115 	stw	r6,4(sp)
1000cb7c:	d8c00015 	stw	r3,0(sp)
1000cb80:	000cecc0 	call	1000cecc <__umodsi3>
1000cb84:	b00b883a 	mov	r5,r22
1000cb88:	a809883a 	mov	r4,r21
1000cb8c:	1039883a 	mov	fp,r2
1000cb90:	000ce680 	call	1000ce68 <__udivsi3>
1000cb94:	d8c00017 	ldw	r3,0(sp)
1000cb98:	e038943a 	slli	fp,fp,16
1000cb9c:	8c7fffcc 	andi	r17,r17,65535
1000cba0:	1887383a 	mul	r3,r3,r2
1000cba4:	e462b03a 	or	r17,fp,r17
1000cba8:	d9800117 	ldw	r6,4(sp)
1000cbac:	88c0062e 	bgeu	r17,r3,1000cbc8 <__umoddi3+0x398>
1000cbb0:	8de3883a 	add	r17,r17,r23
1000cbb4:	113fffc4 	addi	r4,r2,-1
1000cbb8:	8dc06736 	bltu	r17,r23,1000cd58 <__umoddi3+0x528>
1000cbbc:	88c0662e 	bgeu	r17,r3,1000cd58 <__umoddi3+0x528>
1000cbc0:	10bfff84 	addi	r2,r2,-2
1000cbc4:	8de3883a 	add	r17,r17,r23
1000cbc8:	300a943a 	slli	r5,r6,16
1000cbcc:	9010d43a 	srli	r8,r18,16
1000cbd0:	91bfffcc 	andi	r6,r18,65535
1000cbd4:	2888b03a 	or	r4,r5,r2
1000cbd8:	21ffffcc 	andi	r7,r4,65535
1000cbdc:	2008d43a 	srli	r4,r4,16
1000cbe0:	300b883a 	mov	r5,r6
1000cbe4:	398d383a 	mul	r6,r7,r6
1000cbe8:	214b383a 	mul	r5,r4,r5
1000cbec:	3a0f383a 	mul	r7,r7,r8
1000cbf0:	3004d43a 	srli	r2,r6,16
1000cbf4:	88c7c83a 	sub	r3,r17,r3
1000cbf8:	394f883a 	add	r7,r7,r5
1000cbfc:	11c5883a 	add	r2,r2,r7
1000cc00:	2209383a 	mul	r4,r4,r8
1000cc04:	1140022e 	bgeu	r2,r5,1000cc10 <__umoddi3+0x3e0>
1000cc08:	01400074 	movhi	r5,1
1000cc0c:	2149883a 	add	r4,r4,r5
1000cc10:	100ad43a 	srli	r5,r2,16
1000cc14:	1004943a 	slli	r2,r2,16
1000cc18:	31bfffcc 	andi	r6,r6,65535
1000cc1c:	2909883a 	add	r4,r5,r4
1000cc20:	1185883a 	add	r2,r2,r6
1000cc24:	19003636 	bltu	r3,r4,1000cd00 <__umoddi3+0x4d0>
1000cc28:	19003426 	beq	r3,r4,1000ccfc <__umoddi3+0x4cc>
1000cc2c:	8085c83a 	sub	r2,r16,r2
1000cc30:	80a1803a 	cmpltu	r16,r16,r2
1000cc34:	1907c83a 	sub	r3,r3,r4
1000cc38:	1c07c83a 	sub	r3,r3,r16
1000cc3c:	1d20983a 	sll	r16,r3,r20
1000cc40:	14c4d83a 	srl	r2,r2,r19
1000cc44:	1cc6d83a 	srl	r3,r3,r19
1000cc48:	8084b03a 	or	r2,r16,r2
1000cc4c:	003f7906 	br	1000ca34 <__umoddi3+0x204>
1000cc50:	9ca6983a 	sll	r19,r19,r18
1000cc54:	8d68d83a 	srl	r20,r17,r21
1000cc58:	856ad83a 	srl	r21,r16,r21
1000cc5c:	982cd43a 	srli	r22,r19,16
1000cc60:	a009883a 	mov	r4,r20
1000cc64:	8ca2983a 	sll	r17,r17,r18
1000cc68:	b00b883a 	mov	r5,r22
1000cc6c:	000cecc0 	call	1000cecc <__umodsi3>
1000cc70:	a009883a 	mov	r4,r20
1000cc74:	b00b883a 	mov	r5,r22
1000cc78:	ac6eb03a 	or	r23,r21,r17
1000cc7c:	1023883a 	mov	r17,r2
1000cc80:	000ce680 	call	1000ce68 <__udivsi3>
1000cc84:	9d7fffcc 	andi	r21,r19,65535
1000cc88:	8822943a 	slli	r17,r17,16
1000cc8c:	b806d43a 	srli	r3,r23,16
1000cc90:	a885383a 	mul	r2,r21,r2
1000cc94:	84a8983a 	sll	r20,r16,r18
1000cc98:	88c6b03a 	or	r3,r17,r3
1000cc9c:	1880042e 	bgeu	r3,r2,1000ccb0 <__umoddi3+0x480>
1000cca0:	1cc7883a 	add	r3,r3,r19
1000cca4:	1cc00236 	bltu	r3,r19,1000ccb0 <__umoddi3+0x480>
1000cca8:	1880012e 	bgeu	r3,r2,1000ccb0 <__umoddi3+0x480>
1000ccac:	1cc7883a 	add	r3,r3,r19
1000ccb0:	18a3c83a 	sub	r17,r3,r2
1000ccb4:	8809883a 	mov	r4,r17
1000ccb8:	b00b883a 	mov	r5,r22
1000ccbc:	000cecc0 	call	1000cecc <__umodsi3>
1000ccc0:	1021883a 	mov	r16,r2
1000ccc4:	8809883a 	mov	r4,r17
1000ccc8:	b00b883a 	mov	r5,r22
1000cccc:	000ce680 	call	1000ce68 <__udivsi3>
1000ccd0:	8022943a 	slli	r17,r16,16
1000ccd4:	a885383a 	mul	r2,r21,r2
1000ccd8:	bdffffcc 	andi	r23,r23,65535
1000ccdc:	8de2b03a 	or	r17,r17,r23
1000cce0:	8880042e 	bgeu	r17,r2,1000ccf4 <__umoddi3+0x4c4>
1000cce4:	8ce3883a 	add	r17,r17,r19
1000cce8:	8cc00236 	bltu	r17,r19,1000ccf4 <__umoddi3+0x4c4>
1000ccec:	8880012e 	bgeu	r17,r2,1000ccf4 <__umoddi3+0x4c4>
1000ccf0:	8ce3883a 	add	r17,r17,r19
1000ccf4:	88a3c83a 	sub	r17,r17,r2
1000ccf8:	003f2d06 	br	1000c9b0 <__umoddi3+0x180>
1000ccfc:	80bfcb2e 	bgeu	r16,r2,1000cc2c <__umoddi3+0x3fc>
1000cd00:	14a5c83a 	sub	r18,r2,r18
1000cd04:	1485803a 	cmpltu	r2,r2,r18
1000cd08:	15c5883a 	add	r2,r2,r23
1000cd0c:	2089c83a 	sub	r4,r4,r2
1000cd10:	9005883a 	mov	r2,r18
1000cd14:	003fc506 	br	1000cc2c <__umoddi3+0x3fc>
1000cd18:	3007883a 	mov	r3,r6
1000cd1c:	003edd06 	br	1000c894 <__umoddi3+0x64>
1000cd20:	3811883a 	mov	r8,r7
1000cd24:	000b883a 	mov	r5,zero
1000cd28:	003f5506 	br	1000ca80 <__umoddi3+0x250>
1000cd2c:	3810d43a 	srli	r8,r7,16
1000cd30:	01400404 	movi	r5,16
1000cd34:	003f5206 	br	1000ca80 <__umoddi3+0x250>
1000cd38:	9806d43a 	srli	r3,r19,16
1000cd3c:	05400404 	movi	r21,16
1000cd40:	003f1106 	br	1000c988 <__umoddi3+0x158>
1000cd44:	9807883a 	mov	r3,r19
1000cd48:	003f0f06 	br	1000c988 <__umoddi3+0x158>
1000cd4c:	3006d43a 	srli	r3,r6,16
1000cd50:	05400404 	movi	r21,16
1000cd54:	003ecf06 	br	1000c894 <__umoddi3+0x64>
1000cd58:	2005883a 	mov	r2,r4
1000cd5c:	003f9a06 	br	1000cbc8 <__umoddi3+0x398>
1000cd60:	280d883a 	mov	r6,r5
1000cd64:	003f8106 	br	1000cb6c <__umoddi3+0x33c>
1000cd68:	1cc7883a 	add	r3,r3,r19
1000cd6c:	003ee606 	br	1000c908 <__umoddi3+0xd8>

1000cd70 <__divsi3>:
1000cd70:	20001a16 	blt	r4,zero,1000cddc <__divsi3+0x6c>
1000cd74:	000f883a 	mov	r7,zero
1000cd78:	2800020e 	bge	r5,zero,1000cd84 <__divsi3+0x14>
1000cd7c:	014bc83a 	sub	r5,zero,r5
1000cd80:	39c0005c 	xori	r7,r7,1
1000cd84:	200d883a 	mov	r6,r4
1000cd88:	00c00044 	movi	r3,1
1000cd8c:	2900092e 	bgeu	r5,r4,1000cdb4 <__divsi3+0x44>
1000cd90:	00800804 	movi	r2,32
1000cd94:	00c00044 	movi	r3,1
1000cd98:	00000106 	br	1000cda0 <__divsi3+0x30>
1000cd9c:	10001226 	beq	r2,zero,1000cde8 <__divsi3+0x78>
1000cda0:	294b883a 	add	r5,r5,r5
1000cda4:	10bfffc4 	addi	r2,r2,-1
1000cda8:	18c7883a 	add	r3,r3,r3
1000cdac:	293ffb36 	bltu	r5,r4,1000cd9c <__divsi3+0x2c>
1000cdb0:	18000d26 	beq	r3,zero,1000cde8 <__divsi3+0x78>
1000cdb4:	0005883a 	mov	r2,zero
1000cdb8:	31400236 	bltu	r6,r5,1000cdc4 <__divsi3+0x54>
1000cdbc:	314dc83a 	sub	r6,r6,r5
1000cdc0:	10c4b03a 	or	r2,r2,r3
1000cdc4:	1806d07a 	srli	r3,r3,1
1000cdc8:	280ad07a 	srli	r5,r5,1
1000cdcc:	183ffa1e 	bne	r3,zero,1000cdb8 <__divsi3+0x48>
1000cdd0:	38000126 	beq	r7,zero,1000cdd8 <__divsi3+0x68>
1000cdd4:	0085c83a 	sub	r2,zero,r2
1000cdd8:	f800283a 	ret
1000cddc:	0109c83a 	sub	r4,zero,r4
1000cde0:	01c00044 	movi	r7,1
1000cde4:	003fe406 	br	1000cd78 <__divsi3+0x8>
1000cde8:	0005883a 	mov	r2,zero
1000cdec:	003ff806 	br	1000cdd0 <__divsi3+0x60>

1000cdf0 <__modsi3>:
1000cdf0:	20001a16 	blt	r4,zero,1000ce5c <__modsi3+0x6c>
1000cdf4:	000f883a 	mov	r7,zero
1000cdf8:	2005883a 	mov	r2,r4
1000cdfc:	2800010e 	bge	r5,zero,1000ce04 <__modsi3+0x14>
1000ce00:	014bc83a 	sub	r5,zero,r5
1000ce04:	00c00044 	movi	r3,1
1000ce08:	2900092e 	bgeu	r5,r4,1000ce30 <__modsi3+0x40>
1000ce0c:	01800804 	movi	r6,32
1000ce10:	00c00044 	movi	r3,1
1000ce14:	00000106 	br	1000ce1c <__modsi3+0x2c>
1000ce18:	30000d26 	beq	r6,zero,1000ce50 <__modsi3+0x60>
1000ce1c:	294b883a 	add	r5,r5,r5
1000ce20:	31bfffc4 	addi	r6,r6,-1
1000ce24:	18c7883a 	add	r3,r3,r3
1000ce28:	293ffb36 	bltu	r5,r4,1000ce18 <__modsi3+0x28>
1000ce2c:	18000826 	beq	r3,zero,1000ce50 <__modsi3+0x60>
1000ce30:	1806d07a 	srli	r3,r3,1
1000ce34:	11400136 	bltu	r2,r5,1000ce3c <__modsi3+0x4c>
1000ce38:	1145c83a 	sub	r2,r2,r5
1000ce3c:	280ad07a 	srli	r5,r5,1
1000ce40:	183ffb1e 	bne	r3,zero,1000ce30 <__modsi3+0x40>
1000ce44:	38000126 	beq	r7,zero,1000ce4c <__modsi3+0x5c>
1000ce48:	0085c83a 	sub	r2,zero,r2
1000ce4c:	f800283a 	ret
1000ce50:	2005883a 	mov	r2,r4
1000ce54:	383ffd26 	beq	r7,zero,1000ce4c <__modsi3+0x5c>
1000ce58:	003ffb06 	br	1000ce48 <__modsi3+0x58>
1000ce5c:	0109c83a 	sub	r4,zero,r4
1000ce60:	01c00044 	movi	r7,1
1000ce64:	003fe406 	br	1000cdf8 <__modsi3+0x8>

1000ce68 <__udivsi3>:
1000ce68:	200d883a 	mov	r6,r4
1000ce6c:	2900152e 	bgeu	r5,r4,1000cec4 <__udivsi3+0x5c>
1000ce70:	28001416 	blt	r5,zero,1000cec4 <__udivsi3+0x5c>
1000ce74:	00800804 	movi	r2,32
1000ce78:	00c00044 	movi	r3,1
1000ce7c:	00000206 	br	1000ce88 <__udivsi3+0x20>
1000ce80:	10000e26 	beq	r2,zero,1000cebc <__udivsi3+0x54>
1000ce84:	28000516 	blt	r5,zero,1000ce9c <__udivsi3+0x34>
1000ce88:	294b883a 	add	r5,r5,r5
1000ce8c:	10bfffc4 	addi	r2,r2,-1
1000ce90:	18c7883a 	add	r3,r3,r3
1000ce94:	293ffa36 	bltu	r5,r4,1000ce80 <__udivsi3+0x18>
1000ce98:	18000826 	beq	r3,zero,1000cebc <__udivsi3+0x54>
1000ce9c:	0005883a 	mov	r2,zero
1000cea0:	31400236 	bltu	r6,r5,1000ceac <__udivsi3+0x44>
1000cea4:	314dc83a 	sub	r6,r6,r5
1000cea8:	10c4b03a 	or	r2,r2,r3
1000ceac:	1806d07a 	srli	r3,r3,1
1000ceb0:	280ad07a 	srli	r5,r5,1
1000ceb4:	183ffa1e 	bne	r3,zero,1000cea0 <__udivsi3+0x38>
1000ceb8:	f800283a 	ret
1000cebc:	0005883a 	mov	r2,zero
1000cec0:	f800283a 	ret
1000cec4:	00c00044 	movi	r3,1
1000cec8:	003ff406 	br	1000ce9c <__udivsi3+0x34>

1000cecc <__umodsi3>:
1000cecc:	2005883a 	mov	r2,r4
1000ced0:	2900132e 	bgeu	r5,r4,1000cf20 <__umodsi3+0x54>
1000ced4:	28001216 	blt	r5,zero,1000cf20 <__umodsi3+0x54>
1000ced8:	01800804 	movi	r6,32
1000cedc:	00c00044 	movi	r3,1
1000cee0:	00000206 	br	1000ceec <__umodsi3+0x20>
1000cee4:	30000c26 	beq	r6,zero,1000cf18 <__umodsi3+0x4c>
1000cee8:	28000516 	blt	r5,zero,1000cf00 <__umodsi3+0x34>
1000ceec:	294b883a 	add	r5,r5,r5
1000cef0:	31bfffc4 	addi	r6,r6,-1
1000cef4:	18c7883a 	add	r3,r3,r3
1000cef8:	293ffa36 	bltu	r5,r4,1000cee4 <__umodsi3+0x18>
1000cefc:	18000626 	beq	r3,zero,1000cf18 <__umodsi3+0x4c>
1000cf00:	1806d07a 	srli	r3,r3,1
1000cf04:	11400136 	bltu	r2,r5,1000cf0c <__umodsi3+0x40>
1000cf08:	1145c83a 	sub	r2,r2,r5
1000cf0c:	280ad07a 	srli	r5,r5,1
1000cf10:	183ffb1e 	bne	r3,zero,1000cf00 <__umodsi3+0x34>
1000cf14:	f800283a 	ret
1000cf18:	2005883a 	mov	r2,r4
1000cf1c:	f800283a 	ret
1000cf20:	00c00044 	movi	r3,1
1000cf24:	003ff606 	br	1000cf00 <__umodsi3+0x34>

1000cf28 <__adddf3>:
1000cf28:	02000434 	movhi	r8,16
1000cf2c:	defffb04 	addi	sp,sp,-20
1000cf30:	423fffc4 	addi	r8,r8,-1
1000cf34:	2a12703a 	and	r9,r5,r8
1000cf38:	3a06703a 	and	r3,r7,r8
1000cf3c:	3804d53a 	srli	r2,r7,20
1000cf40:	dc000015 	stw	r16,0(sp)
1000cf44:	2820d53a 	srli	r16,r5,20
1000cf48:	2016d77a 	srli	r11,r4,29
1000cf4c:	3014d77a 	srli	r10,r6,29
1000cf50:	280ad7fa 	srli	r5,r5,31
1000cf54:	481290fa 	slli	r9,r9,3
1000cf58:	180690fa 	slli	r3,r3,3
1000cf5c:	380ed7fa 	srli	r7,r7,31
1000cf60:	dc400115 	stw	r17,4(sp)
1000cf64:	8401ffcc 	andi	r16,r16,2047
1000cf68:	1081ffcc 	andi	r2,r2,2047
1000cf6c:	dfc00415 	stw	ra,16(sp)
1000cf70:	dcc00315 	stw	r19,12(sp)
1000cf74:	dc800215 	stw	r18,8(sp)
1000cf78:	5a52b03a 	or	r9,r11,r9
1000cf7c:	50c6b03a 	or	r3,r10,r3
1000cf80:	2823883a 	mov	r17,r5
1000cf84:	201890fa 	slli	r12,r4,3
1000cf88:	301690fa 	slli	r11,r6,3
1000cf8c:	8095c83a 	sub	r10,r16,r2
1000cf90:	29c06a26 	beq	r5,r7,1000d13c <__adddf3+0x214>
1000cf94:	0280590e 	bge	zero,r10,1000d0fc <__adddf3+0x1d4>
1000cf98:	10007c26 	beq	r2,zero,1000d18c <__adddf3+0x264>
1000cf9c:	8081ffd8 	cmpnei	r2,r16,2047
1000cfa0:	10010726 	beq	r2,zero,1000d3c0 <__adddf3+0x498>
1000cfa4:	18c02034 	orhi	r3,r3,128
1000cfa8:	50800e48 	cmpgei	r2,r10,57
1000cfac:	1000ed1e 	bne	r2,zero,1000d364 <__adddf3+0x43c>
1000cfb0:	50800808 	cmpgei	r2,r10,32
1000cfb4:	1001541e 	bne	r2,zero,1000d508 <__adddf3+0x5e0>
1000cfb8:	01000804 	movi	r4,32
1000cfbc:	2289c83a 	sub	r4,r4,r10
1000cfc0:	1926983a 	sll	r19,r3,r4
1000cfc4:	5a84d83a 	srl	r2,r11,r10
1000cfc8:	5908983a 	sll	r4,r11,r4
1000cfcc:	1a86d83a 	srl	r3,r3,r10
1000cfd0:	98a6b03a 	or	r19,r19,r2
1000cfd4:	2016c03a 	cmpne	r11,r4,zero
1000cfd8:	9ae6b03a 	or	r19,r19,r11
1000cfdc:	48d3c83a 	sub	r9,r9,r3
1000cfe0:	64e7c83a 	sub	r19,r12,r19
1000cfe4:	64c9803a 	cmpltu	r4,r12,r19
1000cfe8:	4909c83a 	sub	r4,r9,r4
1000cfec:	2080202c 	andhi	r2,r4,128
1000cff0:	10008726 	beq	r2,zero,1000d210 <__adddf3+0x2e8>
1000cff4:	02402034 	movhi	r9,128
1000cff8:	4a7fffc4 	addi	r9,r9,-1
1000cffc:	2264703a 	and	r18,r4,r9
1000d000:	9000cf26 	beq	r18,zero,1000d340 <__adddf3+0x418>
1000d004:	9009883a 	mov	r4,r18
1000d008:	000f6000 	call	1000f600 <__clzsi2>
1000d00c:	10fffe04 	addi	r3,r2,-8
1000d010:	01000804 	movi	r4,32
1000d014:	20c9c83a 	sub	r4,r4,r3
1000d018:	990ad83a 	srl	r5,r19,r4
1000d01c:	90c8983a 	sll	r4,r18,r3
1000d020:	98e6983a 	sll	r19,r19,r3
1000d024:	2908b03a 	or	r4,r5,r4
1000d028:	1c00be16 	blt	r3,r16,1000d324 <__adddf3+0x3fc>
1000d02c:	1c21c83a 	sub	r16,r3,r16
1000d030:	81400044 	addi	r5,r16,1
1000d034:	28800808 	cmpgei	r2,r5,32
1000d038:	10011b1e 	bne	r2,zero,1000d4a8 <__adddf3+0x580>
1000d03c:	00800804 	movi	r2,32
1000d040:	1145c83a 	sub	r2,r2,r5
1000d044:	9946d83a 	srl	r3,r19,r5
1000d048:	98a6983a 	sll	r19,r19,r2
1000d04c:	2084983a 	sll	r2,r4,r2
1000d050:	2148d83a 	srl	r4,r4,r5
1000d054:	9826c03a 	cmpne	r19,r19,zero
1000d058:	10c4b03a 	or	r2,r2,r3
1000d05c:	14e6b03a 	or	r19,r2,r19
1000d060:	0021883a 	mov	r16,zero
1000d064:	988001cc 	andi	r2,r19,7
1000d068:	10000726 	beq	r2,zero,1000d088 <__adddf3+0x160>
1000d06c:	988003cc 	andi	r2,r19,15
1000d070:	10800120 	cmpeqi	r2,r2,4
1000d074:	1000041e 	bne	r2,zero,1000d088 <__adddf3+0x160>
1000d078:	99400104 	addi	r5,r19,4
1000d07c:	2ce7803a 	cmpltu	r19,r5,r19
1000d080:	24c9883a 	add	r4,r4,r19
1000d084:	2827883a 	mov	r19,r5
1000d088:	2080202c 	andhi	r2,r4,128
1000d08c:	10006226 	beq	r2,zero,1000d218 <__adddf3+0x2f0>
1000d090:	84000044 	addi	r16,r16,1
1000d094:	8081ffe0 	cmpeqi	r2,r16,2047
1000d098:	8401ffcc 	andi	r16,r16,2047
1000d09c:	1000731e 	bne	r2,zero,1000d26c <__adddf3+0x344>
1000d0a0:	017fe034 	movhi	r5,65408
1000d0a4:	297fffc4 	addi	r5,r5,-1
1000d0a8:	214a703a 	and	r5,r4,r5
1000d0ac:	2804977a 	slli	r2,r5,29
1000d0b0:	280a927a 	slli	r5,r5,9
1000d0b4:	9826d0fa 	srli	r19,r19,3
1000d0b8:	2808d33a 	srli	r4,r5,12
1000d0bc:	14c4b03a 	or	r2,r2,r19
1000d0c0:	8020953a 	slli	r16,r16,20
1000d0c4:	00c00434 	movhi	r3,16
1000d0c8:	8c403fcc 	andi	r17,r17,255
1000d0cc:	882297fa 	slli	r17,r17,31
1000d0d0:	18ffffc4 	addi	r3,r3,-1
1000d0d4:	20c6703a 	and	r3,r4,r3
1000d0d8:	1c06b03a 	or	r3,r3,r16
1000d0dc:	1c46b03a 	or	r3,r3,r17
1000d0e0:	dfc00417 	ldw	ra,16(sp)
1000d0e4:	dcc00317 	ldw	r19,12(sp)
1000d0e8:	dc800217 	ldw	r18,8(sp)
1000d0ec:	dc400117 	ldw	r17,4(sp)
1000d0f0:	dc000017 	ldw	r16,0(sp)
1000d0f4:	dec00504 	addi	sp,sp,20
1000d0f8:	f800283a 	ret
1000d0fc:	50002b1e 	bne	r10,zero,1000d1ac <__adddf3+0x284>
1000d100:	80800044 	addi	r2,r16,1
1000d104:	1081ff8c 	andi	r2,r2,2046
1000d108:	1000a11e 	bne	r2,zero,1000d390 <__adddf3+0x468>
1000d10c:	4b0ab03a 	or	r5,r9,r12
1000d110:	1ac4b03a 	or	r2,r3,r11
1000d114:	80015c1e 	bne	r16,zero,1000d688 <__adddf3+0x760>
1000d118:	28012826 	beq	r5,zero,1000d5bc <__adddf3+0x694>
1000d11c:	1001671e 	bne	r2,zero,1000d6bc <__adddf3+0x794>
1000d120:	4826977a 	slli	r19,r9,29
1000d124:	00c80034 	movhi	r3,8192
1000d128:	18ffffc4 	addi	r3,r3,-1
1000d12c:	20c4703a 	and	r2,r4,r3
1000d130:	9884b03a 	or	r2,r19,r2
1000d134:	4812d0fa 	srli	r9,r9,3
1000d138:	00003d06 	br	1000d230 <__adddf3+0x308>
1000d13c:	02804f0e 	bge	zero,r10,1000d27c <__adddf3+0x354>
1000d140:	10002426 	beq	r2,zero,1000d1d4 <__adddf3+0x2ac>
1000d144:	8081ffd8 	cmpnei	r2,r16,2047
1000d148:	10009d26 	beq	r2,zero,1000d3c0 <__adddf3+0x498>
1000d14c:	18c02034 	orhi	r3,r3,128
1000d150:	50800e48 	cmpgei	r2,r10,57
1000d154:	10003b1e 	bne	r2,zero,1000d244 <__adddf3+0x31c>
1000d158:	50800808 	cmpgei	r2,r10,32
1000d15c:	10010326 	beq	r2,zero,1000d56c <__adddf3+0x644>
1000d160:	54fff804 	addi	r19,r10,-32
1000d164:	51000820 	cmpeqi	r4,r10,32
1000d168:	1cc4d83a 	srl	r2,r3,r19
1000d16c:	2000041e 	bne	r4,zero,1000d180 <__adddf3+0x258>
1000d170:	01001004 	movi	r4,64
1000d174:	2295c83a 	sub	r10,r4,r10
1000d178:	1a86983a 	sll	r3,r3,r10
1000d17c:	58d6b03a 	or	r11,r11,r3
1000d180:	5826c03a 	cmpne	r19,r11,zero
1000d184:	98a6b03a 	or	r19,r19,r2
1000d188:	00003006 	br	1000d24c <__adddf3+0x324>
1000d18c:	1ac4b03a 	or	r2,r3,r11
1000d190:	10007726 	beq	r2,zero,1000d370 <__adddf3+0x448>
1000d194:	50bfffc4 	addi	r2,r10,-1
1000d198:	10011926 	beq	r2,zero,1000d600 <__adddf3+0x6d8>
1000d19c:	5281ffd8 	cmpnei	r10,r10,2047
1000d1a0:	50012026 	beq	r10,zero,1000d624 <__adddf3+0x6fc>
1000d1a4:	1015883a 	mov	r10,r2
1000d1a8:	003f7f06 	br	1000cfa8 <__adddf3+0x80>
1000d1ac:	1409c83a 	sub	r4,r2,r16
1000d1b0:	8000a61e 	bne	r16,zero,1000d44c <__adddf3+0x524>
1000d1b4:	4b0ab03a 	or	r5,r9,r12
1000d1b8:	2800f726 	beq	r5,zero,1000d598 <__adddf3+0x670>
1000d1bc:	217fffc4 	addi	r5,r4,-1
1000d1c0:	28017f26 	beq	r5,zero,1000d7c0 <__adddf3+0x898>
1000d1c4:	2101ffd8 	cmpnei	r4,r4,2047
1000d1c8:	2001a326 	beq	r4,zero,1000d858 <__adddf3+0x930>
1000d1cc:	2809883a 	mov	r4,r5
1000d1d0:	0000a106 	br	1000d458 <__adddf3+0x530>
1000d1d4:	1ac4b03a 	or	r2,r3,r11
1000d1d8:	10006526 	beq	r2,zero,1000d370 <__adddf3+0x448>
1000d1dc:	50bfffc4 	addi	r2,r10,-1
1000d1e0:	10000426 	beq	r2,zero,1000d1f4 <__adddf3+0x2cc>
1000d1e4:	5281ffd8 	cmpnei	r10,r10,2047
1000d1e8:	50014326 	beq	r10,zero,1000d6f8 <__adddf3+0x7d0>
1000d1ec:	1015883a 	mov	r10,r2
1000d1f0:	003fd706 	br	1000d150 <__adddf3+0x228>
1000d1f4:	62e7883a 	add	r19,r12,r11
1000d1f8:	48d3883a 	add	r9,r9,r3
1000d1fc:	9b09803a 	cmpltu	r4,r19,r12
1000d200:	4909883a 	add	r4,r9,r4
1000d204:	2080202c 	andhi	r2,r4,128
1000d208:	1000b41e 	bne	r2,zero,1000d4dc <__adddf3+0x5b4>
1000d20c:	04000044 	movi	r16,1
1000d210:	988001cc 	andi	r2,r19,7
1000d214:	103f951e 	bne	r2,zero,1000d06c <__adddf3+0x144>
1000d218:	9826d0fa 	srli	r19,r19,3
1000d21c:	2004977a 	slli	r2,r4,29
1000d220:	2012d0fa 	srli	r9,r4,3
1000d224:	9884b03a 	or	r2,r19,r2
1000d228:	80c1ffe0 	cmpeqi	r3,r16,2047
1000d22c:	1800351e 	bne	r3,zero,1000d304 <__adddf3+0x3dc>
1000d230:	01000434 	movhi	r4,16
1000d234:	213fffc4 	addi	r4,r4,-1
1000d238:	4908703a 	and	r4,r9,r4
1000d23c:	8401ffcc 	andi	r16,r16,2047
1000d240:	003f9f06 	br	1000d0c0 <__adddf3+0x198>
1000d244:	1ac8b03a 	or	r4,r3,r11
1000d248:	2026c03a 	cmpne	r19,r4,zero
1000d24c:	9b27883a 	add	r19,r19,r12
1000d250:	9b09803a 	cmpltu	r4,r19,r12
1000d254:	2249883a 	add	r4,r4,r9
1000d258:	2080202c 	andhi	r2,r4,128
1000d25c:	103fec26 	beq	r2,zero,1000d210 <__adddf3+0x2e8>
1000d260:	84000044 	addi	r16,r16,1
1000d264:	8081ffe0 	cmpeqi	r2,r16,2047
1000d268:	10009d26 	beq	r2,zero,1000d4e0 <__adddf3+0x5b8>
1000d26c:	0401ffc4 	movi	r16,2047
1000d270:	0009883a 	mov	r4,zero
1000d274:	0005883a 	mov	r2,zero
1000d278:	003f9106 	br	1000d0c0 <__adddf3+0x198>
1000d27c:	5000571e 	bne	r10,zero,1000d3dc <__adddf3+0x4b4>
1000d280:	80800044 	addi	r2,r16,1
1000d284:	1141ff8c 	andi	r5,r2,2046
1000d288:	2800ed1e 	bne	r5,zero,1000d640 <__adddf3+0x718>
1000d28c:	4b04b03a 	or	r2,r9,r12
1000d290:	8000a826 	beq	r16,zero,1000d534 <__adddf3+0x60c>
1000d294:	10010226 	beq	r2,zero,1000d6a0 <__adddf3+0x778>
1000d298:	1ad6b03a 	or	r11,r3,r11
1000d29c:	480a977a 	slli	r5,r9,29
1000d2a0:	4812d0fa 	srli	r9,r9,3
1000d2a4:	58015f26 	beq	r11,zero,1000d824 <__adddf3+0x8fc>
1000d2a8:	02080034 	movhi	r8,8192
1000d2ac:	423fffc4 	addi	r8,r8,-1
1000d2b0:	2204703a 	and	r2,r4,r8
1000d2b4:	4900022c 	andhi	r4,r9,8
1000d2b8:	114ab03a 	or	r5,r2,r5
1000d2bc:	20000826 	beq	r4,zero,1000d2e0 <__adddf3+0x3b8>
1000d2c0:	1808d0fa 	srli	r4,r3,3
1000d2c4:	2080022c 	andhi	r2,r4,8
1000d2c8:	1000051e 	bne	r2,zero,1000d2e0 <__adddf3+0x3b8>
1000d2cc:	1806977a 	slli	r3,r3,29
1000d2d0:	3204703a 	and	r2,r6,r8
1000d2d4:	3823883a 	mov	r17,r7
1000d2d8:	10cab03a 	or	r5,r2,r3
1000d2dc:	2013883a 	mov	r9,r4
1000d2e0:	2804d77a 	srli	r2,r5,29
1000d2e4:	480890fa 	slli	r4,r9,3
1000d2e8:	00c80034 	movhi	r3,8192
1000d2ec:	18ffffc4 	addi	r3,r3,-1
1000d2f0:	1108b03a 	or	r4,r2,r4
1000d2f4:	2004977a 	slli	r2,r4,29
1000d2f8:	2012d0fa 	srli	r9,r4,3
1000d2fc:	28ca703a 	and	r5,r5,r3
1000d300:	1144b03a 	or	r2,r2,r5
1000d304:	4886b03a 	or	r3,r9,r2
1000d308:	18016b26 	beq	r3,zero,1000d8b8 <__adddf3+0x990>
1000d30c:	00c00434 	movhi	r3,16
1000d310:	49000234 	orhi	r4,r9,8
1000d314:	18ffffc4 	addi	r3,r3,-1
1000d318:	20c8703a 	and	r4,r4,r3
1000d31c:	0401ffc4 	movi	r16,2047
1000d320:	003f6706 	br	1000d0c0 <__adddf3+0x198>
1000d324:	017fe034 	movhi	r5,65408
1000d328:	297fffc4 	addi	r5,r5,-1
1000d32c:	988001cc 	andi	r2,r19,7
1000d330:	80e1c83a 	sub	r16,r16,r3
1000d334:	2148703a 	and	r4,r4,r5
1000d338:	103f4c1e 	bne	r2,zero,1000d06c <__adddf3+0x144>
1000d33c:	003fb606 	br	1000d218 <__adddf3+0x2f0>
1000d340:	9809883a 	mov	r4,r19
1000d344:	000f6000 	call	1000f600 <__clzsi2>
1000d348:	10c00604 	addi	r3,r2,24
1000d34c:	19000808 	cmpgei	r4,r3,32
1000d350:	203f2f26 	beq	r4,zero,1000d010 <__adddf3+0xe8>
1000d354:	113ffe04 	addi	r4,r2,-8
1000d358:	9908983a 	sll	r4,r19,r4
1000d35c:	0027883a 	mov	r19,zero
1000d360:	003f3106 	br	1000d028 <__adddf3+0x100>
1000d364:	1ac8b03a 	or	r4,r3,r11
1000d368:	2026c03a 	cmpne	r19,r4,zero
1000d36c:	003f1c06 	br	1000cfe0 <__adddf3+0xb8>
1000d370:	4826977a 	slli	r19,r9,29
1000d374:	00c80034 	movhi	r3,8192
1000d378:	18ffffc4 	addi	r3,r3,-1
1000d37c:	20c4703a 	and	r2,r4,r3
1000d380:	14c4b03a 	or	r2,r2,r19
1000d384:	4812d0fa 	srli	r9,r9,3
1000d388:	5021883a 	mov	r16,r10
1000d38c:	003fa606 	br	1000d228 <__adddf3+0x300>
1000d390:	62e7c83a 	sub	r19,r12,r11
1000d394:	48e5c83a 	sub	r18,r9,r3
1000d398:	64c9803a 	cmpltu	r4,r12,r19
1000d39c:	9125c83a 	sub	r18,r18,r4
1000d3a0:	9080202c 	andhi	r2,r18,128
1000d3a4:	1000b21e 	bne	r2,zero,1000d670 <__adddf3+0x748>
1000d3a8:	9c84b03a 	or	r2,r19,r18
1000d3ac:	103f141e 	bne	r2,zero,1000d000 <__adddf3+0xd8>
1000d3b0:	0013883a 	mov	r9,zero
1000d3b4:	0021883a 	mov	r16,zero
1000d3b8:	0023883a 	mov	r17,zero
1000d3bc:	003f9c06 	br	1000d230 <__adddf3+0x308>
1000d3c0:	4826977a 	slli	r19,r9,29
1000d3c4:	00c80034 	movhi	r3,8192
1000d3c8:	18ffffc4 	addi	r3,r3,-1
1000d3cc:	20c4703a 	and	r2,r4,r3
1000d3d0:	14c4b03a 	or	r2,r2,r19
1000d3d4:	4812d0fa 	srli	r9,r9,3
1000d3d8:	003fca06 	br	1000d304 <__adddf3+0x3dc>
1000d3dc:	1409c83a 	sub	r4,r2,r16
1000d3e0:	80005e1e 	bne	r16,zero,1000d55c <__adddf3+0x634>
1000d3e4:	4b0ab03a 	or	r5,r9,r12
1000d3e8:	28011326 	beq	r5,zero,1000d838 <__adddf3+0x910>
1000d3ec:	217fffc4 	addi	r5,r4,-1
1000d3f0:	28012c26 	beq	r5,zero,1000d8a4 <__adddf3+0x97c>
1000d3f4:	2101ffd8 	cmpnei	r4,r4,2047
1000d3f8:	2000a926 	beq	r4,zero,1000d6a0 <__adddf3+0x778>
1000d3fc:	2809883a 	mov	r4,r5
1000d400:	21400e48 	cmpgei	r5,r4,57
1000d404:	2800b91e 	bne	r5,zero,1000d6ec <__adddf3+0x7c4>
1000d408:	21400808 	cmpgei	r5,r4,32
1000d40c:	28011a1e 	bne	r5,zero,1000d878 <__adddf3+0x950>
1000d410:	01400804 	movi	r5,32
1000d414:	290bc83a 	sub	r5,r5,r4
1000d418:	4966983a 	sll	r19,r9,r5
1000d41c:	610cd83a 	srl	r6,r12,r4
1000d420:	614a983a 	sll	r5,r12,r5
1000d424:	4912d83a 	srl	r9,r9,r4
1000d428:	99a6b03a 	or	r19,r19,r6
1000d42c:	280ac03a 	cmpne	r5,r5,zero
1000d430:	9966b03a 	or	r19,r19,r5
1000d434:	1a47883a 	add	r3,r3,r9
1000d438:	9ae7883a 	add	r19,r19,r11
1000d43c:	9ac9803a 	cmpltu	r4,r19,r11
1000d440:	20c9883a 	add	r4,r4,r3
1000d444:	1021883a 	mov	r16,r2
1000d448:	003f8306 	br	1000d258 <__adddf3+0x330>
1000d44c:	1141ffd8 	cmpnei	r5,r2,2047
1000d450:	28006326 	beq	r5,zero,1000d5e0 <__adddf3+0x6b8>
1000d454:	4a402034 	orhi	r9,r9,128
1000d458:	21400e48 	cmpgei	r5,r4,57
1000d45c:	28006e1e 	bne	r5,zero,1000d618 <__adddf3+0x6f0>
1000d460:	21400808 	cmpgei	r5,r4,32
1000d464:	2800ab1e 	bne	r5,zero,1000d714 <__adddf3+0x7ec>
1000d468:	01400804 	movi	r5,32
1000d46c:	290bc83a 	sub	r5,r5,r4
1000d470:	4966983a 	sll	r19,r9,r5
1000d474:	610cd83a 	srl	r6,r12,r4
1000d478:	614a983a 	sll	r5,r12,r5
1000d47c:	4912d83a 	srl	r9,r9,r4
1000d480:	99a6b03a 	or	r19,r19,r6
1000d484:	280ac03a 	cmpne	r5,r5,zero
1000d488:	9966b03a 	or	r19,r19,r5
1000d48c:	1a47c83a 	sub	r3,r3,r9
1000d490:	5ce7c83a 	sub	r19,r11,r19
1000d494:	5cc9803a 	cmpltu	r4,r11,r19
1000d498:	1909c83a 	sub	r4,r3,r4
1000d49c:	3823883a 	mov	r17,r7
1000d4a0:	1021883a 	mov	r16,r2
1000d4a4:	003ed106 	br	1000cfec <__adddf3+0xc4>
1000d4a8:	843ff844 	addi	r16,r16,-31
1000d4ac:	28800820 	cmpeqi	r2,r5,32
1000d4b0:	2420d83a 	srl	r16,r4,r16
1000d4b4:	1000041e 	bne	r2,zero,1000d4c8 <__adddf3+0x5a0>
1000d4b8:	00801004 	movi	r2,64
1000d4bc:	114bc83a 	sub	r5,r2,r5
1000d4c0:	2148983a 	sll	r4,r4,r5
1000d4c4:	9926b03a 	or	r19,r19,r4
1000d4c8:	9826c03a 	cmpne	r19,r19,zero
1000d4cc:	9c26b03a 	or	r19,r19,r16
1000d4d0:	0009883a 	mov	r4,zero
1000d4d4:	0021883a 	mov	r16,zero
1000d4d8:	003f4d06 	br	1000d210 <__adddf3+0x2e8>
1000d4dc:	04000084 	movi	r16,2
1000d4e0:	00bfe034 	movhi	r2,65408
1000d4e4:	10bfffc4 	addi	r2,r2,-1
1000d4e8:	208a703a 	and	r5,r4,r2
1000d4ec:	9804d07a 	srli	r2,r19,1
1000d4f0:	280697fa 	slli	r3,r5,31
1000d4f4:	9cc0004c 	andi	r19,r19,1
1000d4f8:	14e6b03a 	or	r19,r2,r19
1000d4fc:	2808d07a 	srli	r4,r5,1
1000d500:	1ce6b03a 	or	r19,r3,r19
1000d504:	003ed706 	br	1000d064 <__adddf3+0x13c>
1000d508:	54fff804 	addi	r19,r10,-32
1000d50c:	50800820 	cmpeqi	r2,r10,32
1000d510:	1ce6d83a 	srl	r19,r3,r19
1000d514:	1000041e 	bne	r2,zero,1000d528 <__adddf3+0x600>
1000d518:	00801004 	movi	r2,64
1000d51c:	1295c83a 	sub	r10,r2,r10
1000d520:	1a86983a 	sll	r3,r3,r10
1000d524:	58d6b03a 	or	r11,r11,r3
1000d528:	5808c03a 	cmpne	r4,r11,zero
1000d52c:	24e6b03a 	or	r19,r4,r19
1000d530:	003eab06 	br	1000cfe0 <__adddf3+0xb8>
1000d534:	1000a926 	beq	r2,zero,1000d7dc <__adddf3+0x8b4>
1000d538:	1ac4b03a 	or	r2,r3,r11
1000d53c:	1000ae1e 	bne	r2,zero,1000d7f8 <__adddf3+0x8d0>
1000d540:	4806977a 	slli	r3,r9,29
1000d544:	00880034 	movhi	r2,8192
1000d548:	10bfffc4 	addi	r2,r2,-1
1000d54c:	2084703a 	and	r2,r4,r2
1000d550:	10c4b03a 	or	r2,r2,r3
1000d554:	4812d0fa 	srli	r9,r9,3
1000d558:	003f3506 	br	1000d230 <__adddf3+0x308>
1000d55c:	1141ffd8 	cmpnei	r5,r2,2047
1000d560:	28004f26 	beq	r5,zero,1000d6a0 <__adddf3+0x778>
1000d564:	4a402034 	orhi	r9,r9,128
1000d568:	003fa506 	br	1000d400 <__adddf3+0x4d8>
1000d56c:	01000804 	movi	r4,32
1000d570:	2289c83a 	sub	r4,r4,r10
1000d574:	1926983a 	sll	r19,r3,r4
1000d578:	5a84d83a 	srl	r2,r11,r10
1000d57c:	5908983a 	sll	r4,r11,r4
1000d580:	1a86d83a 	srl	r3,r3,r10
1000d584:	98a6b03a 	or	r19,r19,r2
1000d588:	2016c03a 	cmpne	r11,r4,zero
1000d58c:	9ae6b03a 	or	r19,r19,r11
1000d590:	48d3883a 	add	r9,r9,r3
1000d594:	003f2d06 	br	1000d24c <__adddf3+0x324>
1000d598:	01480034 	movhi	r5,8192
1000d59c:	1826977a 	slli	r19,r3,29
1000d5a0:	297fffc4 	addi	r5,r5,-1
1000d5a4:	3144703a 	and	r2,r6,r5
1000d5a8:	14c4b03a 	or	r2,r2,r19
1000d5ac:	1812d0fa 	srli	r9,r3,3
1000d5b0:	3823883a 	mov	r17,r7
1000d5b4:	2021883a 	mov	r16,r4
1000d5b8:	003f1b06 	br	1000d228 <__adddf3+0x300>
1000d5bc:	10007d26 	beq	r2,zero,1000d7b4 <__adddf3+0x88c>
1000d5c0:	00880034 	movhi	r2,8192
1000d5c4:	1808977a 	slli	r4,r3,29
1000d5c8:	10bfffc4 	addi	r2,r2,-1
1000d5cc:	3084703a 	and	r2,r6,r2
1000d5d0:	1104b03a 	or	r2,r2,r4
1000d5d4:	1812d0fa 	srli	r9,r3,3
1000d5d8:	3823883a 	mov	r17,r7
1000d5dc:	003f1406 	br	1000d230 <__adddf3+0x308>
1000d5e0:	180a977a 	slli	r5,r3,29
1000d5e4:	01080034 	movhi	r4,8192
1000d5e8:	213fffc4 	addi	r4,r4,-1
1000d5ec:	3104703a 	and	r2,r6,r4
1000d5f0:	2884b03a 	or	r2,r5,r2
1000d5f4:	1812d0fa 	srli	r9,r3,3
1000d5f8:	3823883a 	mov	r17,r7
1000d5fc:	003f4106 	br	1000d304 <__adddf3+0x3dc>
1000d600:	62e7c83a 	sub	r19,r12,r11
1000d604:	48d3c83a 	sub	r9,r9,r3
1000d608:	64c9803a 	cmpltu	r4,r12,r19
1000d60c:	4909c83a 	sub	r4,r9,r4
1000d610:	04000044 	movi	r16,1
1000d614:	003e7506 	br	1000cfec <__adddf3+0xc4>
1000d618:	4b12b03a 	or	r9,r9,r12
1000d61c:	4826c03a 	cmpne	r19,r9,zero
1000d620:	003f9b06 	br	1000d490 <__adddf3+0x568>
1000d624:	4826977a 	slli	r19,r9,29
1000d628:	00c80034 	movhi	r3,8192
1000d62c:	18ffffc4 	addi	r3,r3,-1
1000d630:	20c4703a 	and	r2,r4,r3
1000d634:	9884b03a 	or	r2,r19,r2
1000d638:	4812d0fa 	srli	r9,r9,3
1000d63c:	003f3106 	br	1000d304 <__adddf3+0x3dc>
1000d640:	1101ffe0 	cmpeqi	r4,r2,2047
1000d644:	203f091e 	bne	r4,zero,1000d26c <__adddf3+0x344>
1000d648:	62d7883a 	add	r11,r12,r11
1000d64c:	5b09803a 	cmpltu	r4,r11,r12
1000d650:	48d3883a 	add	r9,r9,r3
1000d654:	490b883a 	add	r5,r9,r4
1000d658:	282697fa 	slli	r19,r5,31
1000d65c:	5816d07a 	srli	r11,r11,1
1000d660:	2808d07a 	srli	r4,r5,1
1000d664:	1021883a 	mov	r16,r2
1000d668:	9ae6b03a 	or	r19,r19,r11
1000d66c:	003ee806 	br	1000d210 <__adddf3+0x2e8>
1000d670:	5b27c83a 	sub	r19,r11,r12
1000d674:	1a53c83a 	sub	r9,r3,r9
1000d678:	5cc9803a 	cmpltu	r4,r11,r19
1000d67c:	4925c83a 	sub	r18,r9,r4
1000d680:	3823883a 	mov	r17,r7
1000d684:	003e5e06 	br	1000d000 <__adddf3+0xd8>
1000d688:	28002d1e 	bne	r5,zero,1000d740 <__adddf3+0x818>
1000d68c:	103fd41e 	bne	r2,zero,1000d5e0 <__adddf3+0x6b8>
1000d690:	00bfffc4 	movi	r2,-1
1000d694:	0023883a 	mov	r17,zero
1000d698:	4013883a 	mov	r9,r8
1000d69c:	003f1b06 	br	1000d30c <__adddf3+0x3e4>
1000d6a0:	00880034 	movhi	r2,8192
1000d6a4:	1808977a 	slli	r4,r3,29
1000d6a8:	10bfffc4 	addi	r2,r2,-1
1000d6ac:	3084703a 	and	r2,r6,r2
1000d6b0:	1104b03a 	or	r2,r2,r4
1000d6b4:	1812d0fa 	srli	r9,r3,3
1000d6b8:	003f1206 	br	1000d304 <__adddf3+0x3dc>
1000d6bc:	62e7c83a 	sub	r19,r12,r11
1000d6c0:	48cbc83a 	sub	r5,r9,r3
1000d6c4:	64c9803a 	cmpltu	r4,r12,r19
1000d6c8:	2909c83a 	sub	r4,r5,r4
1000d6cc:	2080202c 	andhi	r2,r4,128
1000d6d0:	10003626 	beq	r2,zero,1000d7ac <__adddf3+0x884>
1000d6d4:	5b27c83a 	sub	r19,r11,r12
1000d6d8:	1a53c83a 	sub	r9,r3,r9
1000d6dc:	5cc9803a 	cmpltu	r4,r11,r19
1000d6e0:	4909c83a 	sub	r4,r9,r4
1000d6e4:	3823883a 	mov	r17,r7
1000d6e8:	003e5e06 	br	1000d064 <__adddf3+0x13c>
1000d6ec:	4b12b03a 	or	r9,r9,r12
1000d6f0:	4826c03a 	cmpne	r19,r9,zero
1000d6f4:	003f5006 	br	1000d438 <__adddf3+0x510>
1000d6f8:	4806977a 	slli	r3,r9,29
1000d6fc:	00880034 	movhi	r2,8192
1000d700:	10bfffc4 	addi	r2,r2,-1
1000d704:	2084703a 	and	r2,r4,r2
1000d708:	10c4b03a 	or	r2,r2,r3
1000d70c:	4812d0fa 	srli	r9,r9,3
1000d710:	003efc06 	br	1000d304 <__adddf3+0x3dc>
1000d714:	217ff804 	addi	r5,r4,-32
1000d718:	21800820 	cmpeqi	r6,r4,32
1000d71c:	494ad83a 	srl	r5,r9,r5
1000d720:	3000041e 	bne	r6,zero,1000d734 <__adddf3+0x80c>
1000d724:	01801004 	movi	r6,64
1000d728:	3109c83a 	sub	r4,r6,r4
1000d72c:	4912983a 	sll	r9,r9,r4
1000d730:	6258b03a 	or	r12,r12,r9
1000d734:	6026c03a 	cmpne	r19,r12,zero
1000d738:	9966b03a 	or	r19,r19,r5
1000d73c:	003f5406 	br	1000d490 <__adddf3+0x568>
1000d740:	480a977a 	slli	r5,r9,29
1000d744:	4812d0fa 	srli	r9,r9,3
1000d748:	10003626 	beq	r2,zero,1000d824 <__adddf3+0x8fc>
1000d74c:	02080034 	movhi	r8,8192
1000d750:	423fffc4 	addi	r8,r8,-1
1000d754:	2204703a 	and	r2,r4,r8
1000d758:	4900022c 	andhi	r4,r9,8
1000d75c:	114ab03a 	or	r5,r2,r5
1000d760:	20000826 	beq	r4,zero,1000d784 <__adddf3+0x85c>
1000d764:	1808d0fa 	srli	r4,r3,3
1000d768:	2080022c 	andhi	r2,r4,8
1000d76c:	1000051e 	bne	r2,zero,1000d784 <__adddf3+0x85c>
1000d770:	1806977a 	slli	r3,r3,29
1000d774:	3204703a 	and	r2,r6,r8
1000d778:	3823883a 	mov	r17,r7
1000d77c:	10cab03a 	or	r5,r2,r3
1000d780:	2013883a 	mov	r9,r4
1000d784:	480890fa 	slli	r4,r9,3
1000d788:	2804d77a 	srli	r2,r5,29
1000d78c:	00c80034 	movhi	r3,8192
1000d790:	18ffffc4 	addi	r3,r3,-1
1000d794:	1108b03a 	or	r4,r2,r4
1000d798:	200c977a 	slli	r6,r4,29
1000d79c:	28c4703a 	and	r2,r5,r3
1000d7a0:	2012d0fa 	srli	r9,r4,3
1000d7a4:	3084b03a 	or	r2,r6,r2
1000d7a8:	003ed606 	br	1000d304 <__adddf3+0x3dc>
1000d7ac:	9904b03a 	or	r2,r19,r4
1000d7b0:	103e971e 	bne	r2,zero,1000d210 <__adddf3+0x2e8>
1000d7b4:	0013883a 	mov	r9,zero
1000d7b8:	0023883a 	mov	r17,zero
1000d7bc:	003e9c06 	br	1000d230 <__adddf3+0x308>
1000d7c0:	5b27c83a 	sub	r19,r11,r12
1000d7c4:	1a53c83a 	sub	r9,r3,r9
1000d7c8:	5cc9803a 	cmpltu	r4,r11,r19
1000d7cc:	4909c83a 	sub	r4,r9,r4
1000d7d0:	3823883a 	mov	r17,r7
1000d7d4:	04000044 	movi	r16,1
1000d7d8:	003e0406 	br	1000cfec <__adddf3+0xc4>
1000d7dc:	180a977a 	slli	r5,r3,29
1000d7e0:	01080034 	movhi	r4,8192
1000d7e4:	213fffc4 	addi	r4,r4,-1
1000d7e8:	3104703a 	and	r2,r6,r4
1000d7ec:	2884b03a 	or	r2,r5,r2
1000d7f0:	1812d0fa 	srli	r9,r3,3
1000d7f4:	003e8e06 	br	1000d230 <__adddf3+0x308>
1000d7f8:	62e7883a 	add	r19,r12,r11
1000d7fc:	48d3883a 	add	r9,r9,r3
1000d800:	9b09803a 	cmpltu	r4,r19,r12
1000d804:	4909883a 	add	r4,r9,r4
1000d808:	2080202c 	andhi	r2,r4,128
1000d80c:	103e8026 	beq	r2,zero,1000d210 <__adddf3+0x2e8>
1000d810:	00bfe034 	movhi	r2,65408
1000d814:	10bfffc4 	addi	r2,r2,-1
1000d818:	2088703a 	and	r4,r4,r2
1000d81c:	04000044 	movi	r16,1
1000d820:	003e7b06 	br	1000d210 <__adddf3+0x2e8>
1000d824:	00880034 	movhi	r2,8192
1000d828:	10bfffc4 	addi	r2,r2,-1
1000d82c:	2084703a 	and	r2,r4,r2
1000d830:	1144b03a 	or	r2,r2,r5
1000d834:	003eb306 	br	1000d304 <__adddf3+0x3dc>
1000d838:	180e977a 	slli	r7,r3,29
1000d83c:	01480034 	movhi	r5,8192
1000d840:	297fffc4 	addi	r5,r5,-1
1000d844:	3144703a 	and	r2,r6,r5
1000d848:	3884b03a 	or	r2,r7,r2
1000d84c:	1812d0fa 	srli	r9,r3,3
1000d850:	2021883a 	mov	r16,r4
1000d854:	003e7406 	br	1000d228 <__adddf3+0x300>
1000d858:	00880034 	movhi	r2,8192
1000d85c:	1808977a 	slli	r4,r3,29
1000d860:	10bfffc4 	addi	r2,r2,-1
1000d864:	3084703a 	and	r2,r6,r2
1000d868:	1104b03a 	or	r2,r2,r4
1000d86c:	1812d0fa 	srli	r9,r3,3
1000d870:	3823883a 	mov	r17,r7
1000d874:	003ea306 	br	1000d304 <__adddf3+0x3dc>
1000d878:	217ff804 	addi	r5,r4,-32
1000d87c:	21800820 	cmpeqi	r6,r4,32
1000d880:	494ad83a 	srl	r5,r9,r5
1000d884:	3000041e 	bne	r6,zero,1000d898 <__adddf3+0x970>
1000d888:	01801004 	movi	r6,64
1000d88c:	3109c83a 	sub	r4,r6,r4
1000d890:	4912983a 	sll	r9,r9,r4
1000d894:	6258b03a 	or	r12,r12,r9
1000d898:	6026c03a 	cmpne	r19,r12,zero
1000d89c:	9966b03a 	or	r19,r19,r5
1000d8a0:	003ee506 	br	1000d438 <__adddf3+0x510>
1000d8a4:	62e7883a 	add	r19,r12,r11
1000d8a8:	48d3883a 	add	r9,r9,r3
1000d8ac:	9ac9803a 	cmpltu	r4,r19,r11
1000d8b0:	4909883a 	add	r4,r9,r4
1000d8b4:	003e5306 	br	1000d204 <__adddf3+0x2dc>
1000d8b8:	0005883a 	mov	r2,zero
1000d8bc:	0401ffc4 	movi	r16,2047
1000d8c0:	0009883a 	mov	r4,zero
1000d8c4:	003dfe06 	br	1000d0c0 <__adddf3+0x198>

1000d8c8 <__divdf3>:
1000d8c8:	defff104 	addi	sp,sp,-60
1000d8cc:	2804d53a 	srli	r2,r5,20
1000d8d0:	dd000915 	stw	r20,36(sp)
1000d8d4:	2828d7fa 	srli	r20,r5,31
1000d8d8:	dc000515 	stw	r16,20(sp)
1000d8dc:	04000434 	movhi	r16,16
1000d8e0:	ddc00c15 	stw	r23,48(sp)
1000d8e4:	dc800715 	stw	r18,28(sp)
1000d8e8:	843fffc4 	addi	r16,r16,-1
1000d8ec:	dfc00e15 	stw	ra,56(sp)
1000d8f0:	df000d15 	stw	fp,52(sp)
1000d8f4:	dd800b15 	stw	r22,44(sp)
1000d8f8:	dd400a15 	stw	r21,40(sp)
1000d8fc:	dcc00815 	stw	r19,32(sp)
1000d900:	dc400615 	stw	r17,24(sp)
1000d904:	1081ffcc 	andi	r2,r2,2047
1000d908:	2025883a 	mov	r18,r4
1000d90c:	2c20703a 	and	r16,r5,r16
1000d910:	a02f883a 	mov	r23,r20
1000d914:	10008926 	beq	r2,zero,1000db3c <__divdf3+0x274>
1000d918:	10c1ffe0 	cmpeqi	r3,r2,2047
1000d91c:	18009f1e 	bne	r3,zero,1000db9c <__divdf3+0x2d4>
1000d920:	800a90fa 	slli	r5,r16,3
1000d924:	2008d77a 	srli	r4,r4,29
1000d928:	902490fa 	slli	r18,r18,3
1000d92c:	157f0044 	addi	r21,r2,-1023
1000d930:	2148b03a 	or	r4,r4,r5
1000d934:	25802034 	orhi	r22,r4,128
1000d938:	0023883a 	mov	r17,zero
1000d93c:	0021883a 	mov	r16,zero
1000d940:	3806d53a 	srli	r3,r7,20
1000d944:	01000434 	movhi	r4,16
1000d948:	213fffc4 	addi	r4,r4,-1
1000d94c:	18c1ffcc 	andi	r3,r3,2047
1000d950:	3926703a 	and	r19,r7,r4
1000d954:	380ed7fa 	srli	r7,r7,31
1000d958:	18006326 	beq	r3,zero,1000dae8 <__divdf3+0x220>
1000d95c:	1881ffe0 	cmpeqi	r2,r3,2047
1000d960:	1000201e 	bne	r2,zero,1000d9e4 <__divdf3+0x11c>
1000d964:	980890fa 	slli	r4,r19,3
1000d968:	300ad77a 	srli	r5,r6,29
1000d96c:	301090fa 	slli	r8,r6,3
1000d970:	18ff0044 	addi	r3,r3,-1023
1000d974:	2908b03a 	or	r4,r5,r4
1000d978:	a8ebc83a 	sub	r21,r21,r3
1000d97c:	24c02034 	orhi	r19,r4,128
1000d980:	0007883a 	mov	r3,zero
1000d984:	89800428 	cmpgeui	r6,r17,16
1000d988:	a1f8f03a 	xor	fp,r20,r7
1000d98c:	3000ad1e 	bne	r6,zero,1000dc44 <__divdf3+0x37c>
1000d990:	882290ba 	slli	r17,r17,2
1000d994:	00840074 	movhi	r2,4097
1000d998:	8885883a 	add	r2,r17,r2
1000d99c:	10b66917 	ldw	r2,-9820(r2)
1000d9a0:	1000683a 	jmp	r2
1000d9a4:	1000dc44 	addi	zero,r2,881
1000d9a8:	1000dad8 	cmpnei	zero,r2,875
1000d9ac:	1000da7c 	xorhi	zero,r2,873
1000d9b0:	1000da00 	call	11000da0 <_gp+0xfe3e70>
1000d9b4:	1000da7c 	xorhi	zero,r2,873
1000d9b8:	1000dc00 	call	11000dc0 <_gp+0xfe3e90>
1000d9bc:	1000da7c 	xorhi	zero,r2,873
1000d9c0:	1000da00 	call	11000da0 <_gp+0xfe3e70>
1000d9c4:	1000dad8 	cmpnei	zero,r2,875
1000d9c8:	1000dad8 	cmpnei	zero,r2,875
1000d9cc:	1000dc00 	call	11000dc0 <_gp+0xfe3e90>
1000d9d0:	1000da00 	call	11000da0 <_gp+0xfe3e70>
1000d9d4:	1000da10 	cmplti	zero,r2,872
1000d9d8:	1000da10 	cmplti	zero,r2,872
1000d9dc:	1000da10 	cmplti	zero,r2,872
1000d9e0:	1000dc18 	cmpnei	zero,r2,880
1000d9e4:	9990b03a 	or	r8,r19,r6
1000d9e8:	ad7e0044 	addi	r21,r21,-2047
1000d9ec:	4000801e 	bne	r8,zero,1000dbf0 <__divdf3+0x328>
1000d9f0:	8c400094 	ori	r17,r17,2
1000d9f4:	0027883a 	mov	r19,zero
1000d9f8:	00c00084 	movi	r3,2
1000d9fc:	003fe106 	br	1000d984 <__divdf3+0xbc>
1000da00:	382f883a 	mov	r23,r7
1000da04:	982d883a 	mov	r22,r19
1000da08:	4025883a 	mov	r18,r8
1000da0c:	1821883a 	mov	r16,r3
1000da10:	808000a0 	cmpeqi	r2,r16,2
1000da14:	10017c1e 	bne	r2,zero,1000e008 <__divdf3+0x740>
1000da18:	808000e0 	cmpeqi	r2,r16,3
1000da1c:	1001ca1e 	bne	r2,zero,1000e148 <__divdf3+0x880>
1000da20:	80800060 	cmpeqi	r2,r16,1
1000da24:	1000141e 	bne	r2,zero,1000da78 <__divdf3+0x1b0>
1000da28:	ac00ffc4 	addi	r16,r21,1023
1000da2c:	b839883a 	mov	fp,r23
1000da30:	0401580e 	bge	zero,r16,1000df94 <__divdf3+0x6cc>
1000da34:	908001cc 	andi	r2,r18,7
1000da38:	1001921e 	bne	r2,zero,1000e084 <__divdf3+0x7bc>
1000da3c:	900ad0fa 	srli	r5,r18,3
1000da40:	b080402c 	andhi	r2,r22,256
1000da44:	10000426 	beq	r2,zero,1000da58 <__divdf3+0x190>
1000da48:	00bfc034 	movhi	r2,65280
1000da4c:	10bfffc4 	addi	r2,r2,-1
1000da50:	b0ac703a 	and	r22,r22,r2
1000da54:	ac010004 	addi	r16,r21,1024
1000da58:	8081ffc8 	cmpgei	r2,r16,2047
1000da5c:	10001e1e 	bne	r2,zero,1000dad8 <__divdf3+0x210>
1000da60:	b024977a 	slli	r18,r22,29
1000da64:	b008927a 	slli	r4,r22,9
1000da68:	8081ffcc 	andi	r2,r16,2047
1000da6c:	9164b03a 	or	r18,r18,r5
1000da70:	2008d33a 	srli	r4,r4,12
1000da74:	00000406 	br	1000da88 <__divdf3+0x1c0>
1000da78:	b839883a 	mov	fp,r23
1000da7c:	0005883a 	mov	r2,zero
1000da80:	0009883a 	mov	r4,zero
1000da84:	0025883a 	mov	r18,zero
1000da88:	1004953a 	slli	r2,r2,20
1000da8c:	00c00434 	movhi	r3,16
1000da90:	e03897fa 	slli	fp,fp,31
1000da94:	18ffffc4 	addi	r3,r3,-1
1000da98:	20c6703a 	and	r3,r4,r3
1000da9c:	1886b03a 	or	r3,r3,r2
1000daa0:	1f06b03a 	or	r3,r3,fp
1000daa4:	9005883a 	mov	r2,r18
1000daa8:	dfc00e17 	ldw	ra,56(sp)
1000daac:	df000d17 	ldw	fp,52(sp)
1000dab0:	ddc00c17 	ldw	r23,48(sp)
1000dab4:	dd800b17 	ldw	r22,44(sp)
1000dab8:	dd400a17 	ldw	r21,40(sp)
1000dabc:	dd000917 	ldw	r20,36(sp)
1000dac0:	dcc00817 	ldw	r19,32(sp)
1000dac4:	dc800717 	ldw	r18,28(sp)
1000dac8:	dc400617 	ldw	r17,24(sp)
1000dacc:	dc000517 	ldw	r16,20(sp)
1000dad0:	dec00f04 	addi	sp,sp,60
1000dad4:	f800283a 	ret
1000dad8:	0081ffc4 	movi	r2,2047
1000dadc:	0009883a 	mov	r4,zero
1000dae0:	0025883a 	mov	r18,zero
1000dae4:	003fe806 	br	1000da88 <__divdf3+0x1c0>
1000dae8:	9990b03a 	or	r8,r19,r6
1000daec:	40003c26 	beq	r8,zero,1000dbe0 <__divdf3+0x318>
1000daf0:	98011826 	beq	r19,zero,1000df54 <__divdf3+0x68c>
1000daf4:	9809883a 	mov	r4,r19
1000daf8:	d9800115 	stw	r6,4(sp)
1000dafc:	d9c00015 	stw	r7,0(sp)
1000db00:	000f6000 	call	1000f600 <__clzsi2>
1000db04:	d9c00017 	ldw	r7,0(sp)
1000db08:	d9800117 	ldw	r6,4(sp)
1000db0c:	117ffd44 	addi	r5,r2,-11
1000db10:	00c00744 	movi	r3,29
1000db14:	123ffe04 	addi	r8,r2,-8
1000db18:	1947c83a 	sub	r3,r3,r5
1000db1c:	9a08983a 	sll	r4,r19,r8
1000db20:	30c6d83a 	srl	r3,r6,r3
1000db24:	3210983a 	sll	r8,r6,r8
1000db28:	1926b03a 	or	r19,r3,r4
1000db2c:	1545883a 	add	r2,r2,r21
1000db30:	1540fcc4 	addi	r21,r2,1011
1000db34:	0007883a 	mov	r3,zero
1000db38:	003f9206 	br	1000d984 <__divdf3+0xbc>
1000db3c:	242cb03a 	or	r22,r4,r16
1000db40:	2023883a 	mov	r17,r4
1000db44:	b0002126 	beq	r22,zero,1000dbcc <__divdf3+0x304>
1000db48:	d9c00115 	stw	r7,4(sp)
1000db4c:	d9800015 	stw	r6,0(sp)
1000db50:	8000f526 	beq	r16,zero,1000df28 <__divdf3+0x660>
1000db54:	8009883a 	mov	r4,r16
1000db58:	000f6000 	call	1000f600 <__clzsi2>
1000db5c:	d9800017 	ldw	r6,0(sp)
1000db60:	d9c00117 	ldw	r7,4(sp)
1000db64:	102b883a 	mov	r21,r2
1000db68:	113ffd44 	addi	r4,r2,-11
1000db6c:	05800744 	movi	r22,29
1000db70:	acbffe04 	addi	r18,r21,-8
1000db74:	b12dc83a 	sub	r22,r22,r4
1000db78:	848a983a 	sll	r5,r16,r18
1000db7c:	8d88d83a 	srl	r4,r17,r22
1000db80:	8ca4983a 	sll	r18,r17,r18
1000db84:	216cb03a 	or	r22,r4,r5
1000db88:	00bf0344 	movi	r2,-1011
1000db8c:	156bc83a 	sub	r21,r2,r21
1000db90:	0023883a 	mov	r17,zero
1000db94:	0021883a 	mov	r16,zero
1000db98:	003f6906 	br	1000d940 <__divdf3+0x78>
1000db9c:	242cb03a 	or	r22,r4,r16
1000dba0:	b000051e 	bne	r22,zero,1000dbb8 <__divdf3+0x2f0>
1000dba4:	0025883a 	mov	r18,zero
1000dba8:	04400204 	movi	r17,8
1000dbac:	0541ffc4 	movi	r21,2047
1000dbb0:	04000084 	movi	r16,2
1000dbb4:	003f6206 	br	1000d940 <__divdf3+0x78>
1000dbb8:	802d883a 	mov	r22,r16
1000dbbc:	04400304 	movi	r17,12
1000dbc0:	0541ffc4 	movi	r21,2047
1000dbc4:	040000c4 	movi	r16,3
1000dbc8:	003f5d06 	br	1000d940 <__divdf3+0x78>
1000dbcc:	0025883a 	mov	r18,zero
1000dbd0:	04400104 	movi	r17,4
1000dbd4:	002b883a 	mov	r21,zero
1000dbd8:	04000044 	movi	r16,1
1000dbdc:	003f5806 	br	1000d940 <__divdf3+0x78>
1000dbe0:	8c400054 	ori	r17,r17,1
1000dbe4:	0027883a 	mov	r19,zero
1000dbe8:	00c00044 	movi	r3,1
1000dbec:	003f6506 	br	1000d984 <__divdf3+0xbc>
1000dbf0:	8c4000d4 	ori	r17,r17,3
1000dbf4:	3011883a 	mov	r8,r6
1000dbf8:	00c000c4 	movi	r3,3
1000dbfc:	003f6106 	br	1000d984 <__divdf3+0xbc>
1000dc00:	01000434 	movhi	r4,16
1000dc04:	0039883a 	mov	fp,zero
1000dc08:	213fffc4 	addi	r4,r4,-1
1000dc0c:	04bfffc4 	movi	r18,-1
1000dc10:	0081ffc4 	movi	r2,2047
1000dc14:	003f9c06 	br	1000da88 <__divdf3+0x1c0>
1000dc18:	b080022c 	andhi	r2,r22,8
1000dc1c:	1000a126 	beq	r2,zero,1000dea4 <__divdf3+0x5dc>
1000dc20:	9880022c 	andhi	r2,r19,8
1000dc24:	10009f1e 	bne	r2,zero,1000dea4 <__divdf3+0x5dc>
1000dc28:	00800434 	movhi	r2,16
1000dc2c:	99000234 	orhi	r4,r19,8
1000dc30:	10bfffc4 	addi	r2,r2,-1
1000dc34:	2088703a 	and	r4,r4,r2
1000dc38:	3839883a 	mov	fp,r7
1000dc3c:	4025883a 	mov	r18,r8
1000dc40:	003ff306 	br	1000dc10 <__divdf3+0x348>
1000dc44:	9d80b236 	bltu	r19,r22,1000df10 <__divdf3+0x648>
1000dc48:	9d80b026 	beq	r19,r22,1000df0c <__divdf3+0x644>
1000dc4c:	ad7fffc4 	addi	r21,r21,-1
1000dc50:	b007883a 	mov	r3,r22
1000dc54:	0021883a 	mov	r16,zero
1000dc58:	400cd63a 	srli	r6,r8,24
1000dc5c:	9826923a 	slli	r19,r19,8
1000dc60:	4004923a 	slli	r2,r8,8
1000dc64:	1809883a 	mov	r4,r3
1000dc68:	34e2b03a 	or	r17,r6,r19
1000dc6c:	8828d43a 	srli	r20,r17,16
1000dc70:	d8c00115 	stw	r3,4(sp)
1000dc74:	d8800015 	stw	r2,0(sp)
1000dc78:	a00b883a 	mov	r5,r20
1000dc7c:	000ce680 	call	1000ce68 <__udivsi3>
1000dc80:	d8c00117 	ldw	r3,4(sp)
1000dc84:	a00b883a 	mov	r5,r20
1000dc88:	102d883a 	mov	r22,r2
1000dc8c:	1809883a 	mov	r4,r3
1000dc90:	000cecc0 	call	1000cecc <__umodsi3>
1000dc94:	1006943a 	slli	r3,r2,16
1000dc98:	8dffffcc 	andi	r23,r17,65535
1000dc9c:	9004d43a 	srli	r2,r18,16
1000dca0:	bda7383a 	mul	r19,r23,r22
1000dca4:	10c4b03a 	or	r2,r2,r3
1000dca8:	14c0042e 	bgeu	r2,r19,1000dcbc <__divdf3+0x3f4>
1000dcac:	1445883a 	add	r2,r2,r17
1000dcb0:	b0ffffc4 	addi	r3,r22,-1
1000dcb4:	1440e12e 	bgeu	r2,r17,1000e03c <__divdf3+0x774>
1000dcb8:	182d883a 	mov	r22,r3
1000dcbc:	14e7c83a 	sub	r19,r2,r19
1000dcc0:	a00b883a 	mov	r5,r20
1000dcc4:	9809883a 	mov	r4,r19
1000dcc8:	000ce680 	call	1000ce68 <__udivsi3>
1000dccc:	a00b883a 	mov	r5,r20
1000dcd0:	9809883a 	mov	r4,r19
1000dcd4:	d8800115 	stw	r2,4(sp)
1000dcd8:	000cecc0 	call	1000cecc <__umodsi3>
1000dcdc:	d8c00117 	ldw	r3,4(sp)
1000dce0:	1004943a 	slli	r2,r2,16
1000dce4:	94bfffcc 	andi	r18,r18,65535
1000dce8:	b8cb383a 	mul	r5,r23,r3
1000dcec:	9084b03a 	or	r2,r18,r2
1000dcf0:	1140042e 	bgeu	r2,r5,1000dd04 <__divdf3+0x43c>
1000dcf4:	1445883a 	add	r2,r2,r17
1000dcf8:	193fffc4 	addi	r4,r3,-1
1000dcfc:	1440cb2e 	bgeu	r2,r17,1000e02c <__divdf3+0x764>
1000dd00:	2007883a 	mov	r3,r4
1000dd04:	b008943a 	slli	r4,r22,16
1000dd08:	d9800017 	ldw	r6,0(sp)
1000dd0c:	1145c83a 	sub	r2,r2,r5
1000dd10:	20ecb03a 	or	r22,r4,r3
1000dd14:	b0ffffcc 	andi	r3,r22,65535
1000dd18:	300ed43a 	srli	r7,r6,16
1000dd1c:	323fffcc 	andi	r8,r6,65535
1000dd20:	b026d43a 	srli	r19,r22,16
1000dd24:	40e5383a 	mul	r18,r8,r3
1000dd28:	38c9383a 	mul	r4,r7,r3
1000dd2c:	9a13383a 	mul	r9,r19,r8
1000dd30:	9006d43a 	srli	r3,r18,16
1000dd34:	2249883a 	add	r4,r4,r9
1000dd38:	1907883a 	add	r3,r3,r4
1000dd3c:	99c9383a 	mul	r4,r19,r7
1000dd40:	1a40022e 	bgeu	r3,r9,1000dd4c <__divdf3+0x484>
1000dd44:	01400074 	movhi	r5,1
1000dd48:	2149883a 	add	r4,r4,r5
1000dd4c:	1826d43a 	srli	r19,r3,16
1000dd50:	1806943a 	slli	r3,r3,16
1000dd54:	94bfffcc 	andi	r18,r18,65535
1000dd58:	9927883a 	add	r19,r19,r4
1000dd5c:	1ca5883a 	add	r18,r3,r18
1000dd60:	14c05f36 	bltu	r2,r19,1000dee0 <__divdf3+0x618>
1000dd64:	14c05d26 	beq	r2,r19,1000dedc <__divdf3+0x614>
1000dd68:	84a5c83a 	sub	r18,r16,r18
1000dd6c:	14c5c83a 	sub	r2,r2,r19
1000dd70:	84a7803a 	cmpltu	r19,r16,r18
1000dd74:	da000215 	stw	r8,8(sp)
1000dd78:	d9c00115 	stw	r7,4(sp)
1000dd7c:	14e7c83a 	sub	r19,r2,r19
1000dd80:	ac00ffc4 	addi	r16,r21,1023
1000dd84:	8cc0b626 	beq	r17,r19,1000e060 <__divdf3+0x798>
1000dd88:	9809883a 	mov	r4,r19
1000dd8c:	a00b883a 	mov	r5,r20
1000dd90:	000ce680 	call	1000ce68 <__udivsi3>
1000dd94:	9809883a 	mov	r4,r19
1000dd98:	a00b883a 	mov	r5,r20
1000dd9c:	d8800315 	stw	r2,12(sp)
1000dda0:	000cecc0 	call	1000cecc <__umodsi3>
1000dda4:	d8c00317 	ldw	r3,12(sp)
1000dda8:	1008943a 	slli	r4,r2,16
1000ddac:	9004d43a 	srli	r2,r18,16
1000ddb0:	b8e7383a 	mul	r19,r23,r3
1000ddb4:	d9c00117 	ldw	r7,4(sp)
1000ddb8:	1104b03a 	or	r2,r2,r4
1000ddbc:	da000217 	ldw	r8,8(sp)
1000ddc0:	14c0062e 	bgeu	r2,r19,1000dddc <__divdf3+0x514>
1000ddc4:	1445883a 	add	r2,r2,r17
1000ddc8:	193fffc4 	addi	r4,r3,-1
1000ddcc:	1440ab36 	bltu	r2,r17,1000e07c <__divdf3+0x7b4>
1000ddd0:	14c0aa2e 	bgeu	r2,r19,1000e07c <__divdf3+0x7b4>
1000ddd4:	18ffff84 	addi	r3,r3,-2
1000ddd8:	1445883a 	add	r2,r2,r17
1000dddc:	14e7c83a 	sub	r19,r2,r19
1000dde0:	a00b883a 	mov	r5,r20
1000dde4:	9809883a 	mov	r4,r19
1000dde8:	da000415 	stw	r8,16(sp)
1000ddec:	d8c00315 	stw	r3,12(sp)
1000ddf0:	d9c00215 	stw	r7,8(sp)
1000ddf4:	000ce680 	call	1000ce68 <__udivsi3>
1000ddf8:	a00b883a 	mov	r5,r20
1000ddfc:	9809883a 	mov	r4,r19
1000de00:	d8800115 	stw	r2,4(sp)
1000de04:	000cecc0 	call	1000cecc <__umodsi3>
1000de08:	da400117 	ldw	r9,4(sp)
1000de0c:	1004943a 	slli	r2,r2,16
1000de10:	94bfffcc 	andi	r18,r18,65535
1000de14:	ba6f383a 	mul	r23,r23,r9
1000de18:	9084b03a 	or	r2,r18,r2
1000de1c:	d9c00217 	ldw	r7,8(sp)
1000de20:	d8c00317 	ldw	r3,12(sp)
1000de24:	da000417 	ldw	r8,16(sp)
1000de28:	15c0062e 	bgeu	r2,r23,1000de44 <__divdf3+0x57c>
1000de2c:	1445883a 	add	r2,r2,r17
1000de30:	493fffc4 	addi	r4,r9,-1
1000de34:	14408f36 	bltu	r2,r17,1000e074 <__divdf3+0x7ac>
1000de38:	15c08e2e 	bgeu	r2,r23,1000e074 <__divdf3+0x7ac>
1000de3c:	4a7fff84 	addi	r9,r9,-2
1000de40:	1445883a 	add	r2,r2,r17
1000de44:	180a943a 	slli	r5,r3,16
1000de48:	15c5c83a 	sub	r2,r2,r23
1000de4c:	2a64b03a 	or	r18,r5,r9
1000de50:	9012d43a 	srli	r9,r18,16
1000de54:	913fffcc 	andi	r4,r18,65535
1000de58:	220b383a 	mul	r5,r4,r8
1000de5c:	3909383a 	mul	r4,r7,r4
1000de60:	4a11383a 	mul	r8,r9,r8
1000de64:	2806d43a 	srli	r3,r5,16
1000de68:	3a4f383a 	mul	r7,r7,r9
1000de6c:	2209883a 	add	r4,r4,r8
1000de70:	1907883a 	add	r3,r3,r4
1000de74:	1a00022e 	bgeu	r3,r8,1000de80 <__divdf3+0x5b8>
1000de78:	01000074 	movhi	r4,1
1000de7c:	390f883a 	add	r7,r7,r4
1000de80:	1808d43a 	srli	r4,r3,16
1000de84:	1806943a 	slli	r3,r3,16
1000de88:	297fffcc 	andi	r5,r5,65535
1000de8c:	21cf883a 	add	r7,r4,r7
1000de90:	1947883a 	add	r3,r3,r5
1000de94:	11c00a36 	bltu	r2,r7,1000dec0 <__divdf3+0x5f8>
1000de98:	11c00826 	beq	r2,r7,1000debc <__divdf3+0x5f4>
1000de9c:	94800054 	ori	r18,r18,1
1000dea0:	003ee306 	br	1000da30 <__divdf3+0x168>
1000dea4:	00800434 	movhi	r2,16
1000dea8:	b1000234 	orhi	r4,r22,8
1000deac:	10bfffc4 	addi	r2,r2,-1
1000deb0:	2088703a 	and	r4,r4,r2
1000deb4:	a039883a 	mov	fp,r20
1000deb8:	003f5506 	br	1000dc10 <__divdf3+0x348>
1000debc:	183edc26 	beq	r3,zero,1000da30 <__divdf3+0x168>
1000dec0:	8885883a 	add	r2,r17,r2
1000dec4:	913fffc4 	addi	r4,r18,-1
1000dec8:	14406036 	bltu	r2,r17,1000e04c <__divdf3+0x784>
1000decc:	11c07d36 	bltu	r2,r7,1000e0c4 <__divdf3+0x7fc>
1000ded0:	11c0a326 	beq	r2,r7,1000e160 <__divdf3+0x898>
1000ded4:	2025883a 	mov	r18,r4
1000ded8:	003ff006 	br	1000de9c <__divdf3+0x5d4>
1000dedc:	84bfa22e 	bgeu	r16,r18,1000dd68 <__divdf3+0x4a0>
1000dee0:	d8c00017 	ldw	r3,0(sp)
1000dee4:	80e1883a 	add	r16,r16,r3
1000dee8:	80c7803a 	cmpltu	r3,r16,r3
1000deec:	1c47883a 	add	r3,r3,r17
1000def0:	10c5883a 	add	r2,r2,r3
1000def4:	b0ffffc4 	addi	r3,r22,-1
1000def8:	8880482e 	bgeu	r17,r2,1000e01c <__divdf3+0x754>
1000defc:	14c06a36 	bltu	r2,r19,1000e0a8 <__divdf3+0x7e0>
1000df00:	98806826 	beq	r19,r2,1000e0a4 <__divdf3+0x7dc>
1000df04:	182d883a 	mov	r22,r3
1000df08:	003f9706 	br	1000dd68 <__divdf3+0x4a0>
1000df0c:	923f4f36 	bltu	r18,r8,1000dc4c <__divdf3+0x384>
1000df10:	b00a97fa 	slli	r5,r22,31
1000df14:	9004d07a 	srli	r2,r18,1
1000df18:	902097fa 	slli	r16,r18,31
1000df1c:	b006d07a 	srli	r3,r22,1
1000df20:	28a4b03a 	or	r18,r5,r2
1000df24:	003f4c06 	br	1000dc58 <__divdf3+0x390>
1000df28:	000f6000 	call	1000f600 <__clzsi2>
1000df2c:	11000544 	addi	r4,r2,21
1000df30:	21400748 	cmpgei	r5,r4,29
1000df34:	15400804 	addi	r21,r2,32
1000df38:	d9800017 	ldw	r6,0(sp)
1000df3c:	d9c00117 	ldw	r7,4(sp)
1000df40:	283f0a26 	beq	r5,zero,1000db6c <__divdf3+0x2a4>
1000df44:	113ffe04 	addi	r4,r2,-8
1000df48:	912c983a 	sll	r22,r18,r4
1000df4c:	0025883a 	mov	r18,zero
1000df50:	003f0d06 	br	1000db88 <__divdf3+0x2c0>
1000df54:	3009883a 	mov	r4,r6
1000df58:	d9c00115 	stw	r7,4(sp)
1000df5c:	d9800015 	stw	r6,0(sp)
1000df60:	000f6000 	call	1000f600 <__clzsi2>
1000df64:	11400544 	addi	r5,r2,21
1000df68:	28c00748 	cmpgei	r3,r5,29
1000df6c:	1009883a 	mov	r4,r2
1000df70:	d9800017 	ldw	r6,0(sp)
1000df74:	10800804 	addi	r2,r2,32
1000df78:	d9c00117 	ldw	r7,4(sp)
1000df7c:	183ee426 	beq	r3,zero,1000db10 <__divdf3+0x248>
1000df80:	213ffe04 	addi	r4,r4,-8
1000df84:	3126983a 	sll	r19,r6,r4
1000df88:	0011883a 	mov	r8,zero
1000df8c:	003ee706 	br	1000db2c <__divdf3+0x264>
1000df90:	04bfffc4 	movi	r18,-1
1000df94:	01000044 	movi	r4,1
1000df98:	2409c83a 	sub	r4,r4,r16
1000df9c:	20800e48 	cmpgei	r2,r4,57
1000dfa0:	103eb61e 	bne	r2,zero,1000da7c <__divdf3+0x1b4>
1000dfa4:	20800808 	cmpgei	r2,r4,32
1000dfa8:	10004e1e 	bne	r2,zero,1000e0e4 <__divdf3+0x81c>
1000dfac:	a8810784 	addi	r2,r21,1054
1000dfb0:	b086983a 	sll	r3,r22,r2
1000dfb4:	910ad83a 	srl	r5,r18,r4
1000dfb8:	9084983a 	sll	r2,r18,r2
1000dfbc:	b108d83a 	srl	r4,r22,r4
1000dfc0:	1964b03a 	or	r18,r3,r5
1000dfc4:	1004c03a 	cmpne	r2,r2,zero
1000dfc8:	90a4b03a 	or	r18,r18,r2
1000dfcc:	908001cc 	andi	r2,r18,7
1000dfd0:	10000726 	beq	r2,zero,1000dff0 <__divdf3+0x728>
1000dfd4:	908003cc 	andi	r2,r18,15
1000dfd8:	10800120 	cmpeqi	r2,r2,4
1000dfdc:	1000041e 	bne	r2,zero,1000dff0 <__divdf3+0x728>
1000dfe0:	90800104 	addi	r2,r18,4
1000dfe4:	14a5803a 	cmpltu	r18,r2,r18
1000dfe8:	2489883a 	add	r4,r4,r18
1000dfec:	1025883a 	mov	r18,r2
1000dff0:	2080202c 	andhi	r2,r4,128
1000dff4:	10005026 	beq	r2,zero,1000e138 <__divdf3+0x870>
1000dff8:	00800044 	movi	r2,1
1000dffc:	0009883a 	mov	r4,zero
1000e000:	0025883a 	mov	r18,zero
1000e004:	003ea006 	br	1000da88 <__divdf3+0x1c0>
1000e008:	b839883a 	mov	fp,r23
1000e00c:	0081ffc4 	movi	r2,2047
1000e010:	0009883a 	mov	r4,zero
1000e014:	0025883a 	mov	r18,zero
1000e018:	003e9b06 	br	1000da88 <__divdf3+0x1c0>
1000e01c:	88bfb91e 	bne	r17,r2,1000df04 <__divdf3+0x63c>
1000e020:	d9000017 	ldw	r4,0(sp)
1000e024:	813fb736 	bltu	r16,r4,1000df04 <__divdf3+0x63c>
1000e028:	003fb406 	br	1000defc <__divdf3+0x634>
1000e02c:	117f342e 	bgeu	r2,r5,1000dd00 <__divdf3+0x438>
1000e030:	18ffff84 	addi	r3,r3,-2
1000e034:	1445883a 	add	r2,r2,r17
1000e038:	003f3206 	br	1000dd04 <__divdf3+0x43c>
1000e03c:	14ff1e2e 	bgeu	r2,r19,1000dcb8 <__divdf3+0x3f0>
1000e040:	b5bfff84 	addi	r22,r22,-2
1000e044:	1445883a 	add	r2,r2,r17
1000e048:	003f1c06 	br	1000dcbc <__divdf3+0x3f4>
1000e04c:	2025883a 	mov	r18,r4
1000e050:	11ff921e 	bne	r2,r7,1000de9c <__divdf3+0x5d4>
1000e054:	d8800017 	ldw	r2,0(sp)
1000e058:	10ff901e 	bne	r2,r3,1000de9c <__divdf3+0x5d4>
1000e05c:	003e7406 	br	1000da30 <__divdf3+0x168>
1000e060:	043fcb0e 	bge	zero,r16,1000df90 <__divdf3+0x6c8>
1000e064:	000b883a 	mov	r5,zero
1000e068:	04800044 	movi	r18,1
1000e06c:	b4ad883a 	add	r22,r22,r18
1000e070:	003e7306 	br	1000da40 <__divdf3+0x178>
1000e074:	2013883a 	mov	r9,r4
1000e078:	003f7206 	br	1000de44 <__divdf3+0x57c>
1000e07c:	2007883a 	mov	r3,r4
1000e080:	003f5606 	br	1000dddc <__divdf3+0x514>
1000e084:	908003cc 	andi	r2,r18,15
1000e088:	10800118 	cmpnei	r2,r2,4
1000e08c:	103e6b26 	beq	r2,zero,1000da3c <__divdf3+0x174>
1000e090:	91400104 	addi	r5,r18,4
1000e094:	00bffec4 	movi	r2,-5
1000e098:	14a5803a 	cmpltu	r18,r2,r18
1000e09c:	280ad0fa 	srli	r5,r5,3
1000e0a0:	003ff206 	br	1000e06c <__divdf3+0x7a4>
1000e0a4:	84bf972e 	bgeu	r16,r18,1000df04 <__divdf3+0x63c>
1000e0a8:	d8c00017 	ldw	r3,0(sp)
1000e0ac:	b5bfff84 	addi	r22,r22,-2
1000e0b0:	80e1883a 	add	r16,r16,r3
1000e0b4:	80c7803a 	cmpltu	r3,r16,r3
1000e0b8:	1c47883a 	add	r3,r3,r17
1000e0bc:	10c5883a 	add	r2,r2,r3
1000e0c0:	003f2906 	br	1000dd68 <__divdf3+0x4a0>
1000e0c4:	d9400017 	ldw	r5,0(sp)
1000e0c8:	94bfff84 	addi	r18,r18,-2
1000e0cc:	2949883a 	add	r4,r5,r5
1000e0d0:	214b803a 	cmpltu	r5,r4,r5
1000e0d4:	2c4d883a 	add	r6,r5,r17
1000e0d8:	1185883a 	add	r2,r2,r6
1000e0dc:	d9000015 	stw	r4,0(sp)
1000e0e0:	003fdb06 	br	1000e050 <__divdf3+0x788>
1000e0e4:	00bff844 	movi	r2,-31
1000e0e8:	1421c83a 	sub	r16,r2,r16
1000e0ec:	21000820 	cmpeqi	r4,r4,32
1000e0f0:	b420d83a 	srl	r16,r22,r16
1000e0f4:	2000031e 	bne	r4,zero,1000e104 <__divdf3+0x83c>
1000e0f8:	a8810f84 	addi	r2,r21,1086
1000e0fc:	b088983a 	sll	r4,r22,r2
1000e100:	9124b03a 	or	r18,r18,r4
1000e104:	9024c03a 	cmpne	r18,r18,zero
1000e108:	9424b03a 	or	r18,r18,r16
1000e10c:	914001cc 	andi	r5,r18,7
1000e110:	2800051e 	bne	r5,zero,1000e128 <__divdf3+0x860>
1000e114:	0009883a 	mov	r4,zero
1000e118:	9024d0fa 	srli	r18,r18,3
1000e11c:	0005883a 	mov	r2,zero
1000e120:	9164b03a 	or	r18,r18,r5
1000e124:	003e5806 	br	1000da88 <__divdf3+0x1c0>
1000e128:	908003cc 	andi	r2,r18,15
1000e12c:	10800118 	cmpnei	r2,r2,4
1000e130:	0009883a 	mov	r4,zero
1000e134:	103faa1e 	bne	r2,zero,1000dfe0 <__divdf3+0x718>
1000e138:	2004927a 	slli	r2,r4,9
1000e13c:	200a977a 	slli	r5,r4,29
1000e140:	1008d33a 	srli	r4,r2,12
1000e144:	003ff406 	br	1000e118 <__divdf3+0x850>
1000e148:	00800434 	movhi	r2,16
1000e14c:	b1000234 	orhi	r4,r22,8
1000e150:	10bfffc4 	addi	r2,r2,-1
1000e154:	2088703a 	and	r4,r4,r2
1000e158:	b839883a 	mov	fp,r23
1000e15c:	003eac06 	br	1000dc10 <__divdf3+0x348>
1000e160:	d9400017 	ldw	r5,0(sp)
1000e164:	28ffd736 	bltu	r5,r3,1000e0c4 <__divdf3+0x7fc>
1000e168:	2025883a 	mov	r18,r4
1000e16c:	003fb906 	br	1000e054 <__divdf3+0x78c>

1000e170 <__eqdf2>:
1000e170:	2810d53a 	srli	r8,r5,20
1000e174:	3806d53a 	srli	r3,r7,20
1000e178:	00800434 	movhi	r2,16
1000e17c:	4201ffcc 	andi	r8,r8,2047
1000e180:	10bfffc4 	addi	r2,r2,-1
1000e184:	4281ffd8 	cmpnei	r10,r8,2047
1000e188:	2892703a 	and	r9,r5,r2
1000e18c:	18c1ffcc 	andi	r3,r3,2047
1000e190:	3884703a 	and	r2,r7,r2
1000e194:	280ad7fa 	srli	r5,r5,31
1000e198:	380ed7fa 	srli	r7,r7,31
1000e19c:	50000626 	beq	r10,zero,1000e1b8 <__eqdf2+0x48>
1000e1a0:	1a81ffe0 	cmpeqi	r10,r3,2047
1000e1a4:	5000021e 	bne	r10,zero,1000e1b0 <__eqdf2+0x40>
1000e1a8:	40c0011e 	bne	r8,r3,1000e1b0 <__eqdf2+0x40>
1000e1ac:	48800826 	beq	r9,r2,1000e1d0 <__eqdf2+0x60>
1000e1b0:	00800044 	movi	r2,1
1000e1b4:	f800283a 	ret
1000e1b8:	4914b03a 	or	r10,r9,r4
1000e1bc:	503ffc1e 	bne	r10,zero,1000e1b0 <__eqdf2+0x40>
1000e1c0:	18c1ffd8 	cmpnei	r3,r3,2047
1000e1c4:	183ffa1e 	bne	r3,zero,1000e1b0 <__eqdf2+0x40>
1000e1c8:	1184b03a 	or	r2,r2,r6
1000e1cc:	103ff81e 	bne	r2,zero,1000e1b0 <__eqdf2+0x40>
1000e1d0:	21bff71e 	bne	r4,r6,1000e1b0 <__eqdf2+0x40>
1000e1d4:	29c00426 	beq	r5,r7,1000e1e8 <__eqdf2+0x78>
1000e1d8:	403ff51e 	bne	r8,zero,1000e1b0 <__eqdf2+0x40>
1000e1dc:	4904b03a 	or	r2,r9,r4
1000e1e0:	1004c03a 	cmpne	r2,r2,zero
1000e1e4:	f800283a 	ret
1000e1e8:	0005883a 	mov	r2,zero
1000e1ec:	f800283a 	ret

1000e1f0 <__gedf2>:
1000e1f0:	2810d53a 	srli	r8,r5,20
1000e1f4:	3812d53a 	srli	r9,r7,20
1000e1f8:	00800434 	movhi	r2,16
1000e1fc:	4201ffcc 	andi	r8,r8,2047
1000e200:	10bfffc4 	addi	r2,r2,-1
1000e204:	4281ffd8 	cmpnei	r10,r8,2047
1000e208:	2896703a 	and	r11,r5,r2
1000e20c:	3886703a 	and	r3,r7,r2
1000e210:	280ad7fa 	srli	r5,r5,31
1000e214:	4a41ffcc 	andi	r9,r9,2047
1000e218:	3804d7fa 	srli	r2,r7,31
1000e21c:	50000b26 	beq	r10,zero,1000e24c <__gedf2+0x5c>
1000e220:	49c1ffd8 	cmpnei	r7,r9,2047
1000e224:	38000d26 	beq	r7,zero,1000e25c <__gedf2+0x6c>
1000e228:	4000191e 	bne	r8,zero,1000e290 <__gedf2+0xa0>
1000e22c:	5914b03a 	or	r10,r11,r4
1000e230:	500f003a 	cmpeq	r7,r10,zero
1000e234:	4800131e 	bne	r9,zero,1000e284 <__gedf2+0x94>
1000e238:	1998b03a 	or	r12,r3,r6
1000e23c:	6000111e 	bne	r12,zero,1000e284 <__gedf2+0x94>
1000e240:	50000a1e 	bne	r10,zero,1000e26c <__gedf2+0x7c>
1000e244:	0005883a 	mov	r2,zero
1000e248:	f800283a 	ret
1000e24c:	590eb03a 	or	r7,r11,r4
1000e250:	38001e1e 	bne	r7,zero,1000e2cc <__gedf2+0xdc>
1000e254:	49c1ffe0 	cmpeqi	r7,r9,2047
1000e258:	38000d26 	beq	r7,zero,1000e290 <__gedf2+0xa0>
1000e25c:	198eb03a 	or	r7,r3,r6
1000e260:	38001a1e 	bne	r7,zero,1000e2cc <__gedf2+0xdc>
1000e264:	40000526 	beq	r8,zero,1000e27c <__gedf2+0x8c>
1000e268:	28800d26 	beq	r5,r2,1000e2a0 <__gedf2+0xb0>
1000e26c:	00800044 	movi	r2,1
1000e270:	28000626 	beq	r5,zero,1000e28c <__gedf2+0x9c>
1000e274:	00bfffc4 	movi	r2,-1
1000e278:	f800283a 	ret
1000e27c:	590eb03a 	or	r7,r11,r4
1000e280:	380f003a 	cmpeq	r7,r7,zero
1000e284:	383ff826 	beq	r7,zero,1000e268 <__gedf2+0x78>
1000e288:	103ffa26 	beq	r2,zero,1000e274 <__gedf2+0x84>
1000e28c:	f800283a 	ret
1000e290:	483ff51e 	bne	r9,zero,1000e268 <__gedf2+0x78>
1000e294:	198eb03a 	or	r7,r3,r6
1000e298:	383ff31e 	bne	r7,zero,1000e268 <__gedf2+0x78>
1000e29c:	003ff306 	br	1000e26c <__gedf2+0x7c>
1000e2a0:	4a000716 	blt	r9,r8,1000e2c0 <__gedf2+0xd0>
1000e2a4:	427ff816 	blt	r8,r9,1000e288 <__gedf2+0x98>
1000e2a8:	1afff036 	bltu	r3,r11,1000e26c <__gedf2+0x7c>
1000e2ac:	58c00926 	beq	r11,r3,1000e2d4 <__gedf2+0xe4>
1000e2b0:	58ffe42e 	bgeu	r11,r3,1000e244 <__gedf2+0x54>
1000e2b4:	283fef26 	beq	r5,zero,1000e274 <__gedf2+0x84>
1000e2b8:	2805883a 	mov	r2,r5
1000e2bc:	f800283a 	ret
1000e2c0:	103fec1e 	bne	r2,zero,1000e274 <__gedf2+0x84>
1000e2c4:	00800044 	movi	r2,1
1000e2c8:	f800283a 	ret
1000e2cc:	00bfff84 	movi	r2,-2
1000e2d0:	f800283a 	ret
1000e2d4:	313fe536 	bltu	r6,r4,1000e26c <__gedf2+0x7c>
1000e2d8:	21bfda2e 	bgeu	r4,r6,1000e244 <__gedf2+0x54>
1000e2dc:	003ff506 	br	1000e2b4 <__gedf2+0xc4>

1000e2e0 <__ledf2>:
1000e2e0:	2810d53a 	srli	r8,r5,20
1000e2e4:	3812d53a 	srli	r9,r7,20
1000e2e8:	00800434 	movhi	r2,16
1000e2ec:	4201ffcc 	andi	r8,r8,2047
1000e2f0:	10bfffc4 	addi	r2,r2,-1
1000e2f4:	4281ffd8 	cmpnei	r10,r8,2047
1000e2f8:	2896703a 	and	r11,r5,r2
1000e2fc:	3886703a 	and	r3,r7,r2
1000e300:	280ad7fa 	srli	r5,r5,31
1000e304:	4a41ffcc 	andi	r9,r9,2047
1000e308:	3804d7fa 	srli	r2,r7,31
1000e30c:	50000b26 	beq	r10,zero,1000e33c <__ledf2+0x5c>
1000e310:	49c1ffd8 	cmpnei	r7,r9,2047
1000e314:	38000d26 	beq	r7,zero,1000e34c <__ledf2+0x6c>
1000e318:	40001b1e 	bne	r8,zero,1000e388 <__ledf2+0xa8>
1000e31c:	5914b03a 	or	r10,r11,r4
1000e320:	500f003a 	cmpeq	r7,r10,zero
1000e324:	48000e1e 	bne	r9,zero,1000e360 <__ledf2+0x80>
1000e328:	1998b03a 	or	r12,r3,r6
1000e32c:	60000c1e 	bne	r12,zero,1000e360 <__ledf2+0x80>
1000e330:	50000d1e 	bne	r10,zero,1000e368 <__ledf2+0x88>
1000e334:	0005883a 	mov	r2,zero
1000e338:	f800283a 	ret
1000e33c:	590eb03a 	or	r7,r11,r4
1000e340:	38000d1e 	bne	r7,zero,1000e378 <__ledf2+0x98>
1000e344:	49c1ffe0 	cmpeqi	r7,r9,2047
1000e348:	38000f26 	beq	r7,zero,1000e388 <__ledf2+0xa8>
1000e34c:	198eb03a 	or	r7,r3,r6
1000e350:	3800091e 	bne	r7,zero,1000e378 <__ledf2+0x98>
1000e354:	4000031e 	bne	r8,zero,1000e364 <__ledf2+0x84>
1000e358:	590eb03a 	or	r7,r11,r4
1000e35c:	380f003a 	cmpeq	r7,r7,zero
1000e360:	3800071e 	bne	r7,zero,1000e380 <__ledf2+0xa0>
1000e364:	28800c26 	beq	r5,r2,1000e398 <__ledf2+0xb8>
1000e368:	00800044 	movi	r2,1
1000e36c:	28000526 	beq	r5,zero,1000e384 <__ledf2+0xa4>
1000e370:	00bfffc4 	movi	r2,-1
1000e374:	f800283a 	ret
1000e378:	00800084 	movi	r2,2
1000e37c:	f800283a 	ret
1000e380:	103ffb26 	beq	r2,zero,1000e370 <__ledf2+0x90>
1000e384:	f800283a 	ret
1000e388:	483ff61e 	bne	r9,zero,1000e364 <__ledf2+0x84>
1000e38c:	198eb03a 	or	r7,r3,r6
1000e390:	383ff41e 	bne	r7,zero,1000e364 <__ledf2+0x84>
1000e394:	003ff406 	br	1000e368 <__ledf2+0x88>
1000e398:	4a00030e 	bge	r9,r8,1000e3a8 <__ledf2+0xc8>
1000e39c:	103ff41e 	bne	r2,zero,1000e370 <__ledf2+0x90>
1000e3a0:	00800044 	movi	r2,1
1000e3a4:	f800283a 	ret
1000e3a8:	427ff516 	blt	r8,r9,1000e380 <__ledf2+0xa0>
1000e3ac:	1affee36 	bltu	r3,r11,1000e368 <__ledf2+0x88>
1000e3b0:	58c00426 	beq	r11,r3,1000e3c4 <__ledf2+0xe4>
1000e3b4:	58ffdf2e 	bgeu	r11,r3,1000e334 <__ledf2+0x54>
1000e3b8:	283fed26 	beq	r5,zero,1000e370 <__ledf2+0x90>
1000e3bc:	2805883a 	mov	r2,r5
1000e3c0:	f800283a 	ret
1000e3c4:	313fe836 	bltu	r6,r4,1000e368 <__ledf2+0x88>
1000e3c8:	21bfda2e 	bgeu	r4,r6,1000e334 <__ledf2+0x54>
1000e3cc:	003ffa06 	br	1000e3b8 <__ledf2+0xd8>

1000e3d0 <__muldf3>:
1000e3d0:	2806d53a 	srli	r3,r5,20
1000e3d4:	defff504 	addi	sp,sp,-44
1000e3d8:	dc000215 	stw	r16,8(sp)
1000e3dc:	04000434 	movhi	r16,16
1000e3e0:	dd000615 	stw	r20,24(sp)
1000e3e4:	dc800415 	stw	r18,16(sp)
1000e3e8:	843fffc4 	addi	r16,r16,-1
1000e3ec:	dfc00a15 	stw	ra,40(sp)
1000e3f0:	ddc00915 	stw	r23,36(sp)
1000e3f4:	dd800815 	stw	r22,32(sp)
1000e3f8:	dd400715 	stw	r21,28(sp)
1000e3fc:	dcc00515 	stw	r19,20(sp)
1000e400:	dc400315 	stw	r17,12(sp)
1000e404:	18c1ffcc 	andi	r3,r3,2047
1000e408:	2025883a 	mov	r18,r4
1000e40c:	2c20703a 	and	r16,r5,r16
1000e410:	2828d7fa 	srli	r20,r5,31
1000e414:	18005c26 	beq	r3,zero,1000e588 <__muldf3+0x1b8>
1000e418:	1881ffe0 	cmpeqi	r2,r3,2047
1000e41c:	1000711e 	bne	r2,zero,1000e5e4 <__muldf3+0x214>
1000e420:	800490fa 	slli	r2,r16,3
1000e424:	2020d77a 	srli	r16,r4,29
1000e428:	202290fa 	slli	r17,r4,3
1000e42c:	1cff0044 	addi	r19,r3,-1023
1000e430:	80a0b03a 	or	r16,r16,r2
1000e434:	84002034 	orhi	r16,r16,128
1000e438:	002d883a 	mov	r22,zero
1000e43c:	002f883a 	mov	r23,zero
1000e440:	3806d53a 	srli	r3,r7,20
1000e444:	01000434 	movhi	r4,16
1000e448:	213fffc4 	addi	r4,r4,-1
1000e44c:	18c1ffcc 	andi	r3,r3,2047
1000e450:	3924703a 	and	r18,r7,r4
1000e454:	382ad7fa 	srli	r21,r7,31
1000e458:	18006926 	beq	r3,zero,1000e600 <__muldf3+0x230>
1000e45c:	1881ffe0 	cmpeqi	r2,r3,2047
1000e460:	1000211e 	bne	r2,zero,1000e4e8 <__muldf3+0x118>
1000e464:	900890fa 	slli	r4,r18,3
1000e468:	300ad77a 	srli	r5,r6,29
1000e46c:	301090fa 	slli	r8,r6,3
1000e470:	18ff0044 	addi	r3,r3,-1023
1000e474:	2908b03a 	or	r4,r5,r4
1000e478:	98e7883a 	add	r19,r19,r3
1000e47c:	24802034 	orhi	r18,r4,128
1000e480:	0007883a 	mov	r3,zero
1000e484:	b1000428 	cmpgeui	r4,r22,16
1000e488:	a54cf03a 	xor	r6,r20,r21
1000e48c:	99400044 	addi	r5,r19,1
1000e490:	2000981e 	bne	r4,zero,1000e6f4 <__muldf3+0x324>
1000e494:	b00890ba 	slli	r4,r22,2
1000e498:	00840074 	movhi	r2,4097
1000e49c:	2085883a 	add	r2,r4,r2
1000e4a0:	10b92a17 	ldw	r2,-7000(r2)
1000e4a4:	1000683a 	jmp	r2
1000e4a8:	1000e6f4 	orhi	zero,r2,923
1000e4ac:	1000e508 	cmpgei	zero,r2,916
1000e4b0:	1000e508 	cmpgei	zero,r2,916
1000e4b4:	1000e504 	addi	zero,r2,916
1000e4b8:	1000e514 	ori	zero,r2,916
1000e4bc:	1000e514 	ori	zero,r2,916
1000e4c0:	1000e6b0 	cmpltui	zero,r2,922
1000e4c4:	1000e504 	addi	zero,r2,916
1000e4c8:	1000e514 	ori	zero,r2,916
1000e4cc:	1000e6b0 	cmpltui	zero,r2,922
1000e4d0:	1000e514 	ori	zero,r2,916
1000e4d4:	1000e504 	addi	zero,r2,916
1000e4d8:	1000e6a8 	cmpgeui	zero,r2,922
1000e4dc:	1000e6a8 	cmpgeui	zero,r2,922
1000e4e0:	1000e6a8 	cmpgeui	zero,r2,922
1000e4e4:	1000e6c8 	cmpgei	zero,r2,923
1000e4e8:	3490b03a 	or	r8,r6,r18
1000e4ec:	9cc1ffc4 	addi	r19,r19,2047
1000e4f0:	4000691e 	bne	r8,zero,1000e698 <__muldf3+0x2c8>
1000e4f4:	b5800094 	ori	r22,r22,2
1000e4f8:	0025883a 	mov	r18,zero
1000e4fc:	00c00084 	movi	r3,2
1000e500:	003fe006 	br	1000e484 <__muldf3+0xb4>
1000e504:	a80d883a 	mov	r6,r21
1000e508:	9021883a 	mov	r16,r18
1000e50c:	4023883a 	mov	r17,r8
1000e510:	182f883a 	mov	r23,r3
1000e514:	b88000a0 	cmpeqi	r2,r23,2
1000e518:	10004d1e 	bne	r2,zero,1000e650 <__muldf3+0x280>
1000e51c:	b88000e0 	cmpeqi	r2,r23,3
1000e520:	1001491e 	bne	r2,zero,1000ea48 <__muldf3+0x678>
1000e524:	b8800060 	cmpeqi	r2,r23,1
1000e528:	1000d826 	beq	r2,zero,1000e88c <__muldf3+0x4bc>
1000e52c:	0007883a 	mov	r3,zero
1000e530:	0021883a 	mov	r16,zero
1000e534:	0023883a 	mov	r17,zero
1000e538:	30803fcc 	andi	r2,r6,255
1000e53c:	01000434 	movhi	r4,16
1000e540:	1806953a 	slli	r3,r3,20
1000e544:	213fffc4 	addi	r4,r4,-1
1000e548:	100497fa 	slli	r2,r2,31
1000e54c:	8120703a 	and	r16,r16,r4
1000e550:	80c6b03a 	or	r3,r16,r3
1000e554:	1886b03a 	or	r3,r3,r2
1000e558:	8805883a 	mov	r2,r17
1000e55c:	dfc00a17 	ldw	ra,40(sp)
1000e560:	ddc00917 	ldw	r23,36(sp)
1000e564:	dd800817 	ldw	r22,32(sp)
1000e568:	dd400717 	ldw	r21,28(sp)
1000e56c:	dd000617 	ldw	r20,24(sp)
1000e570:	dcc00517 	ldw	r19,20(sp)
1000e574:	dc800417 	ldw	r18,16(sp)
1000e578:	dc400317 	ldw	r17,12(sp)
1000e57c:	dc000217 	ldw	r16,8(sp)
1000e580:	dec00b04 	addi	sp,sp,44
1000e584:	f800283a 	ret
1000e588:	8122b03a 	or	r17,r16,r4
1000e58c:	88003d26 	beq	r17,zero,1000e684 <__muldf3+0x2b4>
1000e590:	d9c00115 	stw	r7,4(sp)
1000e594:	d9800015 	stw	r6,0(sp)
1000e598:	8000e826 	beq	r16,zero,1000e93c <__muldf3+0x56c>
1000e59c:	8009883a 	mov	r4,r16
1000e5a0:	000f6000 	call	1000f600 <__clzsi2>
1000e5a4:	d9800017 	ldw	r6,0(sp)
1000e5a8:	d9c00117 	ldw	r7,4(sp)
1000e5ac:	1007883a 	mov	r3,r2
1000e5b0:	117ffd44 	addi	r5,r2,-11
1000e5b4:	01000744 	movi	r4,29
1000e5b8:	1c7ffe04 	addi	r17,r3,-8
1000e5bc:	2149c83a 	sub	r4,r4,r5
1000e5c0:	8460983a 	sll	r16,r16,r17
1000e5c4:	9108d83a 	srl	r4,r18,r4
1000e5c8:	9462983a 	sll	r17,r18,r17
1000e5cc:	2420b03a 	or	r16,r4,r16
1000e5d0:	04ff0344 	movi	r19,-1011
1000e5d4:	98e7c83a 	sub	r19,r19,r3
1000e5d8:	002d883a 	mov	r22,zero
1000e5dc:	002f883a 	mov	r23,zero
1000e5e0:	003f9706 	br	1000e440 <__muldf3+0x70>
1000e5e4:	8122b03a 	or	r17,r16,r4
1000e5e8:	8800211e 	bne	r17,zero,1000e670 <__muldf3+0x2a0>
1000e5ec:	0021883a 	mov	r16,zero
1000e5f0:	05800204 	movi	r22,8
1000e5f4:	04c1ffc4 	movi	r19,2047
1000e5f8:	05c00084 	movi	r23,2
1000e5fc:	003f9006 	br	1000e440 <__muldf3+0x70>
1000e600:	3490b03a 	or	r8,r6,r18
1000e604:	40001626 	beq	r8,zero,1000e660 <__muldf3+0x290>
1000e608:	9000c026 	beq	r18,zero,1000e90c <__muldf3+0x53c>
1000e60c:	9009883a 	mov	r4,r18
1000e610:	d9800015 	stw	r6,0(sp)
1000e614:	000f6000 	call	1000f600 <__clzsi2>
1000e618:	d9800017 	ldw	r6,0(sp)
1000e61c:	1007883a 	mov	r3,r2
1000e620:	113ffd44 	addi	r4,r2,-11
1000e624:	01400744 	movi	r5,29
1000e628:	1a3ffe04 	addi	r8,r3,-8
1000e62c:	290bc83a 	sub	r5,r5,r4
1000e630:	314ad83a 	srl	r5,r6,r5
1000e634:	9208983a 	sll	r4,r18,r8
1000e638:	3210983a 	sll	r8,r6,r8
1000e63c:	2924b03a 	or	r18,r5,r4
1000e640:	98c7c83a 	sub	r3,r19,r3
1000e644:	1cff0344 	addi	r19,r3,-1011
1000e648:	0007883a 	mov	r3,zero
1000e64c:	003f8d06 	br	1000e484 <__muldf3+0xb4>
1000e650:	00c1ffc4 	movi	r3,2047
1000e654:	0021883a 	mov	r16,zero
1000e658:	0023883a 	mov	r17,zero
1000e65c:	003fb606 	br	1000e538 <__muldf3+0x168>
1000e660:	b5800054 	ori	r22,r22,1
1000e664:	0025883a 	mov	r18,zero
1000e668:	00c00044 	movi	r3,1
1000e66c:	003f8506 	br	1000e484 <__muldf3+0xb4>
1000e670:	2023883a 	mov	r17,r4
1000e674:	05800304 	movi	r22,12
1000e678:	04c1ffc4 	movi	r19,2047
1000e67c:	05c000c4 	movi	r23,3
1000e680:	003f6f06 	br	1000e440 <__muldf3+0x70>
1000e684:	0021883a 	mov	r16,zero
1000e688:	05800104 	movi	r22,4
1000e68c:	0027883a 	mov	r19,zero
1000e690:	05c00044 	movi	r23,1
1000e694:	003f6a06 	br	1000e440 <__muldf3+0x70>
1000e698:	b58000d4 	ori	r22,r22,3
1000e69c:	3011883a 	mov	r8,r6
1000e6a0:	00c000c4 	movi	r3,3
1000e6a4:	003f7706 	br	1000e484 <__muldf3+0xb4>
1000e6a8:	a00d883a 	mov	r6,r20
1000e6ac:	003f9906 	br	1000e514 <__muldf3+0x144>
1000e6b0:	04000434 	movhi	r16,16
1000e6b4:	000d883a 	mov	r6,zero
1000e6b8:	843fffc4 	addi	r16,r16,-1
1000e6bc:	047fffc4 	movi	r17,-1
1000e6c0:	00c1ffc4 	movi	r3,2047
1000e6c4:	003f9c06 	br	1000e538 <__muldf3+0x168>
1000e6c8:	8080022c 	andhi	r2,r16,8
1000e6cc:	10008926 	beq	r2,zero,1000e8f4 <__muldf3+0x524>
1000e6d0:	9080022c 	andhi	r2,r18,8
1000e6d4:	1000871e 	bne	r2,zero,1000e8f4 <__muldf3+0x524>
1000e6d8:	00800434 	movhi	r2,16
1000e6dc:	94000234 	orhi	r16,r18,8
1000e6e0:	10bfffc4 	addi	r2,r2,-1
1000e6e4:	80a0703a 	and	r16,r16,r2
1000e6e8:	a80d883a 	mov	r6,r21
1000e6ec:	4023883a 	mov	r17,r8
1000e6f0:	003ff306 	br	1000e6c0 <__muldf3+0x2f0>
1000e6f4:	8818d43a 	srli	r12,r17,16
1000e6f8:	4028d43a 	srli	r20,r8,16
1000e6fc:	42ffffcc 	andi	r11,r8,65535
1000e700:	8c7fffcc 	andi	r17,r17,65535
1000e704:	5c47383a 	mul	r3,r11,r17
1000e708:	62c9383a 	mul	r4,r12,r11
1000e70c:	a445383a 	mul	r2,r20,r17
1000e710:	1810d43a 	srli	r8,r3,16
1000e714:	651d383a 	mul	r14,r12,r20
1000e718:	1105883a 	add	r2,r2,r4
1000e71c:	4091883a 	add	r8,r8,r2
1000e720:	4100022e 	bgeu	r8,r4,1000e72c <__muldf3+0x35c>
1000e724:	00800074 	movhi	r2,1
1000e728:	709d883a 	add	r14,r14,r2
1000e72c:	901ed43a 	srli	r15,r18,16
1000e730:	94bfffcc 	andi	r18,r18,65535
1000e734:	9449383a 	mul	r4,r18,r17
1000e738:	648f383a 	mul	r7,r12,r18
1000e73c:	7c63383a 	mul	r17,r15,r17
1000e740:	201ad43a 	srli	r13,r4,16
1000e744:	4014943a 	slli	r10,r8,16
1000e748:	89e3883a 	add	r17,r17,r7
1000e74c:	1a7fffcc 	andi	r9,r3,65535
1000e750:	6c5b883a 	add	r13,r13,r17
1000e754:	4006d43a 	srli	r3,r8,16
1000e758:	5253883a 	add	r9,r10,r9
1000e75c:	63c5383a 	mul	r2,r12,r15
1000e760:	69c0022e 	bgeu	r13,r7,1000e76c <__muldf3+0x39c>
1000e764:	01c00074 	movhi	r7,1
1000e768:	11c5883a 	add	r2,r2,r7
1000e76c:	802ad43a 	srli	r21,r16,16
1000e770:	823fffcc 	andi	r8,r16,65535
1000e774:	5a2d383a 	mul	r22,r11,r8
1000e778:	a20f383a 	mul	r7,r20,r8
1000e77c:	aad7383a 	mul	r11,r21,r11
1000e780:	6814943a 	slli	r10,r13,16
1000e784:	b018d43a 	srli	r12,r22,16
1000e788:	6822d43a 	srli	r17,r13,16
1000e78c:	213fffcc 	andi	r4,r4,65535
1000e790:	3acf883a 	add	r7,r7,r11
1000e794:	5115883a 	add	r10,r10,r4
1000e798:	61cf883a 	add	r7,r12,r7
1000e79c:	889b883a 	add	r13,r17,r2
1000e7a0:	1a87883a 	add	r3,r3,r10
1000e7a4:	a569383a 	mul	r20,r20,r21
1000e7a8:	3ac0022e 	bgeu	r7,r11,1000e7b4 <__muldf3+0x3e4>
1000e7ac:	00800074 	movhi	r2,1
1000e7b0:	a0a9883a 	add	r20,r20,r2
1000e7b4:	9217383a 	mul	r11,r18,r8
1000e7b8:	aca5383a 	mul	r18,r21,r18
1000e7bc:	7a11383a 	mul	r8,r15,r8
1000e7c0:	5820d43a 	srli	r16,r11,16
1000e7c4:	3808d43a 	srli	r4,r7,16
1000e7c8:	380e943a 	slli	r7,r7,16
1000e7cc:	4491883a 	add	r8,r8,r18
1000e7d0:	b5bfffcc 	andi	r22,r22,65535
1000e7d4:	8211883a 	add	r8,r16,r8
1000e7d8:	2529883a 	add	r20,r4,r20
1000e7dc:	3d8f883a 	add	r7,r7,r22
1000e7e0:	7d59383a 	mul	r12,r15,r21
1000e7e4:	4480022e 	bgeu	r8,r18,1000e7f0 <__muldf3+0x420>
1000e7e8:	00800074 	movhi	r2,1
1000e7ec:	6099883a 	add	r12,r12,r2
1000e7f0:	4004943a 	slli	r2,r8,16
1000e7f4:	5affffcc 	andi	r11,r11,65535
1000e7f8:	1b87883a 	add	r3,r3,r14
1000e7fc:	12c5883a 	add	r2,r2,r11
1000e800:	1a95803a 	cmpltu	r10,r3,r10
1000e804:	1345883a 	add	r2,r2,r13
1000e808:	19c7883a 	add	r3,r3,r7
1000e80c:	129d883a 	add	r14,r2,r10
1000e810:	19cf803a 	cmpltu	r7,r3,r7
1000e814:	7509883a 	add	r4,r14,r20
1000e818:	4010d43a 	srli	r8,r8,16
1000e81c:	21d7883a 	add	r11,r4,r7
1000e820:	1345803a 	cmpltu	r2,r2,r13
1000e824:	72a1803a 	cmpltu	r16,r14,r10
1000e828:	1420b03a 	or	r16,r2,r16
1000e82c:	2509803a 	cmpltu	r4,r4,r20
1000e830:	59cf803a 	cmpltu	r7,r11,r7
1000e834:	21ceb03a 	or	r7,r4,r7
1000e838:	8221883a 	add	r16,r16,r8
1000e83c:	81e1883a 	add	r16,r16,r7
1000e840:	1822927a 	slli	r17,r3,9
1000e844:	8321883a 	add	r16,r16,r12
1000e848:	8020927a 	slli	r16,r16,9
1000e84c:	5808d5fa 	srli	r4,r11,23
1000e850:	1806d5fa 	srli	r3,r3,23
1000e854:	8a62b03a 	or	r17,r17,r9
1000e858:	5804927a 	slli	r2,r11,9
1000e85c:	8120b03a 	or	r16,r16,r4
1000e860:	8822c03a 	cmpne	r17,r17,zero
1000e864:	88e2b03a 	or	r17,r17,r3
1000e868:	80c0402c 	andhi	r3,r16,256
1000e86c:	88a2b03a 	or	r17,r17,r2
1000e870:	18005a26 	beq	r3,zero,1000e9dc <__muldf3+0x60c>
1000e874:	8804d07a 	srli	r2,r17,1
1000e878:	800697fa 	slli	r3,r16,31
1000e87c:	8c40004c 	andi	r17,r17,1
1000e880:	8020d07a 	srli	r16,r16,1
1000e884:	1462b03a 	or	r17,r2,r17
1000e888:	88e2b03a 	or	r17,r17,r3
1000e88c:	28c0ffc4 	addi	r3,r5,1023
1000e890:	00c0350e 	bge	zero,r3,1000e968 <__muldf3+0x598>
1000e894:	888001cc 	andi	r2,r17,7
1000e898:	10000726 	beq	r2,zero,1000e8b8 <__muldf3+0x4e8>
1000e89c:	888003cc 	andi	r2,r17,15
1000e8a0:	10800120 	cmpeqi	r2,r2,4
1000e8a4:	1000041e 	bne	r2,zero,1000e8b8 <__muldf3+0x4e8>
1000e8a8:	88800104 	addi	r2,r17,4
1000e8ac:	1463803a 	cmpltu	r17,r2,r17
1000e8b0:	8461883a 	add	r16,r16,r17
1000e8b4:	1023883a 	mov	r17,r2
1000e8b8:	8080402c 	andhi	r2,r16,256
1000e8bc:	10000426 	beq	r2,zero,1000e8d0 <__muldf3+0x500>
1000e8c0:	00bfc034 	movhi	r2,65280
1000e8c4:	10bfffc4 	addi	r2,r2,-1
1000e8c8:	80a0703a 	and	r16,r16,r2
1000e8cc:	28c10004 	addi	r3,r5,1024
1000e8d0:	1881ffc8 	cmpgei	r2,r3,2047
1000e8d4:	103f5e1e 	bne	r2,zero,1000e650 <__muldf3+0x280>
1000e8d8:	8004977a 	slli	r2,r16,29
1000e8dc:	8822d0fa 	srli	r17,r17,3
1000e8e0:	8020927a 	slli	r16,r16,9
1000e8e4:	18c1ffcc 	andi	r3,r3,2047
1000e8e8:	1462b03a 	or	r17,r2,r17
1000e8ec:	8020d33a 	srli	r16,r16,12
1000e8f0:	003f1106 	br	1000e538 <__muldf3+0x168>
1000e8f4:	00800434 	movhi	r2,16
1000e8f8:	84000234 	orhi	r16,r16,8
1000e8fc:	10bfffc4 	addi	r2,r2,-1
1000e900:	80a0703a 	and	r16,r16,r2
1000e904:	a00d883a 	mov	r6,r20
1000e908:	003f6d06 	br	1000e6c0 <__muldf3+0x2f0>
1000e90c:	3009883a 	mov	r4,r6
1000e910:	d9800015 	stw	r6,0(sp)
1000e914:	000f6000 	call	1000f600 <__clzsi2>
1000e918:	11000544 	addi	r4,r2,21
1000e91c:	21400748 	cmpgei	r5,r4,29
1000e920:	10c00804 	addi	r3,r2,32
1000e924:	d9800017 	ldw	r6,0(sp)
1000e928:	283f3e26 	beq	r5,zero,1000e624 <__muldf3+0x254>
1000e92c:	10bffe04 	addi	r2,r2,-8
1000e930:	30a4983a 	sll	r18,r6,r2
1000e934:	0011883a 	mov	r8,zero
1000e938:	003f4106 	br	1000e640 <__muldf3+0x270>
1000e93c:	000f6000 	call	1000f600 <__clzsi2>
1000e940:	11400544 	addi	r5,r2,21
1000e944:	29000748 	cmpgei	r4,r5,29
1000e948:	10c00804 	addi	r3,r2,32
1000e94c:	d9800017 	ldw	r6,0(sp)
1000e950:	d9c00117 	ldw	r7,4(sp)
1000e954:	203f1726 	beq	r4,zero,1000e5b4 <__muldf3+0x1e4>
1000e958:	10bffe04 	addi	r2,r2,-8
1000e95c:	90a0983a 	sll	r16,r18,r2
1000e960:	0023883a 	mov	r17,zero
1000e964:	003f1a06 	br	1000e5d0 <__muldf3+0x200>
1000e968:	00800044 	movi	r2,1
1000e96c:	10c5c83a 	sub	r2,r2,r3
1000e970:	11000e48 	cmpgei	r4,r2,57
1000e974:	203eed1e 	bne	r4,zero,1000e52c <__muldf3+0x15c>
1000e978:	11000808 	cmpgei	r4,r2,32
1000e97c:	2000191e 	bne	r4,zero,1000e9e4 <__muldf3+0x614>
1000e980:	29410784 	addi	r5,r5,1054
1000e984:	8146983a 	sll	r3,r16,r5
1000e988:	8888d83a 	srl	r4,r17,r2
1000e98c:	894a983a 	sll	r5,r17,r5
1000e990:	80a0d83a 	srl	r16,r16,r2
1000e994:	1904b03a 	or	r2,r3,r4
1000e998:	2822c03a 	cmpne	r17,r5,zero
1000e99c:	1444b03a 	or	r2,r2,r17
1000e9a0:	10c001cc 	andi	r3,r2,7
1000e9a4:	18000726 	beq	r3,zero,1000e9c4 <__muldf3+0x5f4>
1000e9a8:	10c003cc 	andi	r3,r2,15
1000e9ac:	18c00120 	cmpeqi	r3,r3,4
1000e9b0:	1800041e 	bne	r3,zero,1000e9c4 <__muldf3+0x5f4>
1000e9b4:	10c00104 	addi	r3,r2,4
1000e9b8:	1885803a 	cmpltu	r2,r3,r2
1000e9bc:	80a1883a 	add	r16,r16,r2
1000e9c0:	1805883a 	mov	r2,r3
1000e9c4:	80c0202c 	andhi	r3,r16,128
1000e9c8:	18001b26 	beq	r3,zero,1000ea38 <__muldf3+0x668>
1000e9cc:	00c00044 	movi	r3,1
1000e9d0:	0021883a 	mov	r16,zero
1000e9d4:	0023883a 	mov	r17,zero
1000e9d8:	003ed706 	br	1000e538 <__muldf3+0x168>
1000e9dc:	980b883a 	mov	r5,r19
1000e9e0:	003faa06 	br	1000e88c <__muldf3+0x4bc>
1000e9e4:	013ff844 	movi	r4,-31
1000e9e8:	20c7c83a 	sub	r3,r4,r3
1000e9ec:	10800820 	cmpeqi	r2,r2,32
1000e9f0:	80c6d83a 	srl	r3,r16,r3
1000e9f4:	1000031e 	bne	r2,zero,1000ea04 <__muldf3+0x634>
1000e9f8:	28810f84 	addi	r2,r5,1086
1000e9fc:	8084983a 	sll	r2,r16,r2
1000ea00:	88a2b03a 	or	r17,r17,r2
1000ea04:	8822c03a 	cmpne	r17,r17,zero
1000ea08:	88c4b03a 	or	r2,r17,r3
1000ea0c:	144001cc 	andi	r17,r2,7
1000ea10:	8800051e 	bne	r17,zero,1000ea28 <__muldf3+0x658>
1000ea14:	0021883a 	mov	r16,zero
1000ea18:	1004d0fa 	srli	r2,r2,3
1000ea1c:	0007883a 	mov	r3,zero
1000ea20:	1462b03a 	or	r17,r2,r17
1000ea24:	003ec406 	br	1000e538 <__muldf3+0x168>
1000ea28:	10c003cc 	andi	r3,r2,15
1000ea2c:	18c00118 	cmpnei	r3,r3,4
1000ea30:	0021883a 	mov	r16,zero
1000ea34:	183fdf1e 	bne	r3,zero,1000e9b4 <__muldf3+0x5e4>
1000ea38:	8006927a 	slli	r3,r16,9
1000ea3c:	8022977a 	slli	r17,r16,29
1000ea40:	1820d33a 	srli	r16,r3,12
1000ea44:	003ff406 	br	1000ea18 <__muldf3+0x648>
1000ea48:	00800434 	movhi	r2,16
1000ea4c:	84000234 	orhi	r16,r16,8
1000ea50:	10bfffc4 	addi	r2,r2,-1
1000ea54:	80a0703a 	and	r16,r16,r2
1000ea58:	003f1906 	br	1000e6c0 <__muldf3+0x2f0>

1000ea5c <__subdf3>:
1000ea5c:	00800434 	movhi	r2,16
1000ea60:	3812d53a 	srli	r9,r7,20
1000ea64:	10bfffc4 	addi	r2,r2,-1
1000ea68:	defffb04 	addi	sp,sp,-20
1000ea6c:	2890703a 	and	r8,r5,r2
1000ea70:	3884703a 	and	r2,r7,r2
1000ea74:	2806d7fa 	srli	r3,r5,31
1000ea78:	dcc00315 	stw	r19,12(sp)
1000ea7c:	dc400115 	stw	r17,4(sp)
1000ea80:	280ad53a 	srli	r5,r5,20
1000ea84:	401090fa 	slli	r8,r8,3
1000ea88:	2026d77a 	srli	r19,r4,29
1000ea8c:	100490fa 	slli	r2,r2,3
1000ea90:	3022d77a 	srli	r17,r6,29
1000ea94:	4a81ffcc 	andi	r10,r9,2047
1000ea98:	dc800215 	stw	r18,8(sp)
1000ea9c:	dc000015 	stw	r16,0(sp)
1000eaa0:	dfc00415 	stw	ra,16(sp)
1000eaa4:	5241ffe0 	cmpeqi	r9,r10,2047
1000eaa8:	1825883a 	mov	r18,r3
1000eaac:	2c01ffcc 	andi	r16,r5,2047
1000eab0:	18c03fcc 	andi	r3,r3,255
1000eab4:	9a18b03a 	or	r12,r19,r8
1000eab8:	201a90fa 	slli	r13,r4,3
1000eabc:	380ed7fa 	srli	r7,r7,31
1000eac0:	8896b03a 	or	r11,r17,r2
1000eac4:	301c90fa 	slli	r14,r6,3
1000eac8:	4800711e 	bne	r9,zero,1000ec90 <__subdf3+0x234>
1000eacc:	39c0005c 	xori	r7,r7,1
1000ead0:	8291c83a 	sub	r8,r16,r10
1000ead4:	19c05a26 	beq	r3,r7,1000ec40 <__subdf3+0x1e4>
1000ead8:	0200720e 	bge	zero,r8,1000eca4 <__subdf3+0x248>
1000eadc:	50008126 	beq	r10,zero,1000ece4 <__subdf3+0x288>
1000eae0:	8081ffd8 	cmpnei	r2,r16,2047
1000eae4:	10011626 	beq	r2,zero,1000ef40 <__subdf3+0x4e4>
1000eae8:	5ac02034 	orhi	r11,r11,128
1000eaec:	40800e48 	cmpgei	r2,r8,57
1000eaf0:	1000fe1e 	bne	r2,zero,1000eeec <__subdf3+0x490>
1000eaf4:	40800808 	cmpgei	r2,r8,32
1000eaf8:	10015e1e 	bne	r2,zero,1000f074 <__subdf3+0x618>
1000eafc:	00800804 	movi	r2,32
1000eb00:	1205c83a 	sub	r2,r2,r8
1000eb04:	58a2983a 	sll	r17,r11,r2
1000eb08:	7206d83a 	srl	r3,r14,r8
1000eb0c:	709c983a 	sll	r14,r14,r2
1000eb10:	5a04d83a 	srl	r2,r11,r8
1000eb14:	88e2b03a 	or	r17,r17,r3
1000eb18:	701cc03a 	cmpne	r14,r14,zero
1000eb1c:	8ba2b03a 	or	r17,r17,r14
1000eb20:	6099c83a 	sub	r12,r12,r2
1000eb24:	6c63c83a 	sub	r17,r13,r17
1000eb28:	6c49803a 	cmpltu	r4,r13,r17
1000eb2c:	6109c83a 	sub	r4,r12,r4
1000eb30:	2080202c 	andhi	r2,r4,128
1000eb34:	10009f26 	beq	r2,zero,1000edb4 <__subdf3+0x358>
1000eb38:	04c02034 	movhi	r19,128
1000eb3c:	9cffffc4 	addi	r19,r19,-1
1000eb40:	24e6703a 	and	r19,r4,r19
1000eb44:	9800e026 	beq	r19,zero,1000eec8 <__subdf3+0x46c>
1000eb48:	9809883a 	mov	r4,r19
1000eb4c:	000f6000 	call	1000f600 <__clzsi2>
1000eb50:	123ffe04 	addi	r8,r2,-8
1000eb54:	01000804 	movi	r4,32
1000eb58:	2209c83a 	sub	r4,r4,r8
1000eb5c:	8906d83a 	srl	r3,r17,r4
1000eb60:	9a08983a 	sll	r4,r19,r8
1000eb64:	8a22983a 	sll	r17,r17,r8
1000eb68:	1908b03a 	or	r4,r3,r4
1000eb6c:	4400cf16 	blt	r8,r16,1000eeac <__subdf3+0x450>
1000eb70:	4411c83a 	sub	r8,r8,r16
1000eb74:	40800044 	addi	r2,r8,1
1000eb78:	10c00808 	cmpgei	r3,r2,32
1000eb7c:	1801251e 	bne	r3,zero,1000f014 <__subdf3+0x5b8>
1000eb80:	00c00804 	movi	r3,32
1000eb84:	1887c83a 	sub	r3,r3,r2
1000eb88:	888ad83a 	srl	r5,r17,r2
1000eb8c:	88e2983a 	sll	r17,r17,r3
1000eb90:	20c6983a 	sll	r3,r4,r3
1000eb94:	2088d83a 	srl	r4,r4,r2
1000eb98:	8822c03a 	cmpne	r17,r17,zero
1000eb9c:	1946b03a 	or	r3,r3,r5
1000eba0:	1c62b03a 	or	r17,r3,r17
1000eba4:	0021883a 	mov	r16,zero
1000eba8:	888001cc 	andi	r2,r17,7
1000ebac:	10000726 	beq	r2,zero,1000ebcc <__subdf3+0x170>
1000ebb0:	888003cc 	andi	r2,r17,15
1000ebb4:	10800120 	cmpeqi	r2,r2,4
1000ebb8:	1000041e 	bne	r2,zero,1000ebcc <__subdf3+0x170>
1000ebbc:	88c00104 	addi	r3,r17,4
1000ebc0:	1c63803a 	cmpltu	r17,r3,r17
1000ebc4:	2449883a 	add	r4,r4,r17
1000ebc8:	1823883a 	mov	r17,r3
1000ebcc:	2080202c 	andhi	r2,r4,128
1000ebd0:	10007a26 	beq	r2,zero,1000edbc <__subdf3+0x360>
1000ebd4:	82000044 	addi	r8,r16,1
1000ebd8:	4081ffe0 	cmpeqi	r2,r8,2047
1000ebdc:	4201ffcc 	andi	r8,r8,2047
1000ebe0:	10008c1e 	bne	r2,zero,1000ee14 <__subdf3+0x3b8>
1000ebe4:	00bfe034 	movhi	r2,65408
1000ebe8:	10bfffc4 	addi	r2,r2,-1
1000ebec:	2084703a 	and	r2,r4,r2
1000ebf0:	1008927a 	slli	r4,r2,9
1000ebf4:	8822d0fa 	srli	r17,r17,3
1000ebf8:	100c977a 	slli	r6,r2,29
1000ebfc:	2008d33a 	srli	r4,r4,12
1000ec00:	3444b03a 	or	r2,r6,r17
1000ec04:	4010953a 	slli	r8,r8,20
1000ec08:	00c00434 	movhi	r3,16
1000ec0c:	94803fcc 	andi	r18,r18,255
1000ec10:	902497fa 	slli	r18,r18,31
1000ec14:	18ffffc4 	addi	r3,r3,-1
1000ec18:	20c6703a 	and	r3,r4,r3
1000ec1c:	1a06b03a 	or	r3,r3,r8
1000ec20:	1c86b03a 	or	r3,r3,r18
1000ec24:	dfc00417 	ldw	ra,16(sp)
1000ec28:	dcc00317 	ldw	r19,12(sp)
1000ec2c:	dc800217 	ldw	r18,8(sp)
1000ec30:	dc400117 	ldw	r17,4(sp)
1000ec34:	dc000017 	ldw	r16,0(sp)
1000ec38:	dec00504 	addi	sp,sp,20
1000ec3c:	f800283a 	ret
1000ec40:	0200320e 	bge	zero,r8,1000ed0c <__subdf3+0x2b0>
1000ec44:	50004c26 	beq	r10,zero,1000ed78 <__subdf3+0x31c>
1000ec48:	8081ffd8 	cmpnei	r2,r16,2047
1000ec4c:	1000bc26 	beq	r2,zero,1000ef40 <__subdf3+0x4e4>
1000ec50:	5ac02034 	orhi	r11,r11,128
1000ec54:	40800e48 	cmpgei	r2,r8,57
1000ec58:	1000641e 	bne	r2,zero,1000edec <__subdf3+0x390>
1000ec5c:	40800808 	cmpgei	r2,r8,32
1000ec60:	10011726 	beq	r2,zero,1000f0c0 <__subdf3+0x664>
1000ec64:	447ff804 	addi	r17,r8,-32
1000ec68:	40800820 	cmpeqi	r2,r8,32
1000ec6c:	5c46d83a 	srl	r3,r11,r17
1000ec70:	1000041e 	bne	r2,zero,1000ec84 <__subdf3+0x228>
1000ec74:	00801004 	movi	r2,64
1000ec78:	1205c83a 	sub	r2,r2,r8
1000ec7c:	5884983a 	sll	r2,r11,r2
1000ec80:	709cb03a 	or	r14,r14,r2
1000ec84:	7022c03a 	cmpne	r17,r14,zero
1000ec88:	88e2b03a 	or	r17,r17,r3
1000ec8c:	00005906 	br	1000edf4 <__subdf3+0x398>
1000ec90:	5b8ab03a 	or	r5,r11,r14
1000ec94:	823e0044 	addi	r8,r16,-2047
1000ec98:	28001a1e 	bne	r5,zero,1000ed04 <__subdf3+0x2a8>
1000ec9c:	39c0005c 	xori	r7,r7,1
1000eca0:	19c01a26 	beq	r3,r7,1000ed0c <__subdf3+0x2b0>
1000eca4:	4000291e 	bne	r8,zero,1000ed4c <__subdf3+0x2f0>
1000eca8:	80800044 	addi	r2,r16,1
1000ecac:	1081ff8c 	andi	r2,r2,2046
1000ecb0:	1000911e 	bne	r2,zero,1000eef8 <__subdf3+0x49c>
1000ecb4:	6346b03a 	or	r3,r12,r13
1000ecb8:	5b84b03a 	or	r2,r11,r14
1000ecbc:	8001551e 	bne	r16,zero,1000f214 <__subdf3+0x7b8>
1000ecc0:	18011b26 	beq	r3,zero,1000f130 <__subdf3+0x6d4>
1000ecc4:	1001641e 	bne	r2,zero,1000f258 <__subdf3+0x7fc>
1000ecc8:	00880034 	movhi	r2,8192
1000eccc:	6022977a 	slli	r17,r12,29
1000ecd0:	10bfffc4 	addi	r2,r2,-1
1000ecd4:	2088703a 	and	r4,r4,r2
1000ecd8:	2444b03a 	or	r2,r4,r17
1000ecdc:	6026d0fa 	srli	r19,r12,3
1000ece0:	00003d06 	br	1000edd8 <__subdf3+0x37c>
1000ece4:	5b84b03a 	or	r2,r11,r14
1000ece8:	10008e26 	beq	r2,zero,1000ef24 <__subdf3+0x4c8>
1000ecec:	40bfffc4 	addi	r2,r8,-1
1000ecf0:	10011f26 	beq	r2,zero,1000f170 <__subdf3+0x714>
1000ecf4:	4201ffd8 	cmpnei	r8,r8,2047
1000ecf8:	40012d26 	beq	r8,zero,1000f1b0 <__subdf3+0x754>
1000ecfc:	1011883a 	mov	r8,r2
1000ed00:	003f7a06 	br	1000eaec <__subdf3+0x90>
1000ed04:	39c03fcc 	andi	r7,r7,255
1000ed08:	19ffe61e 	bne	r3,r7,1000eca4 <__subdf3+0x248>
1000ed0c:	4000931e 	bne	r8,zero,1000ef5c <__subdf3+0x500>
1000ed10:	80c00044 	addi	r3,r16,1
1000ed14:	1881ff8c 	andi	r2,r3,2046
1000ed18:	10012c1e 	bne	r2,zero,1000f1cc <__subdf3+0x770>
1000ed1c:	6344b03a 	or	r2,r12,r13
1000ed20:	8000f91e 	bne	r16,zero,1000f108 <__subdf3+0x6ac>
1000ed24:	10017326 	beq	r2,zero,1000f2f4 <__subdf3+0x898>
1000ed28:	5b84b03a 	or	r2,r11,r14
1000ed2c:	1001781e 	bne	r2,zero,1000f310 <__subdf3+0x8b4>
1000ed30:	6004977a 	slli	r2,r12,29
1000ed34:	00c80034 	movhi	r3,8192
1000ed38:	18ffffc4 	addi	r3,r3,-1
1000ed3c:	20c6703a 	and	r3,r4,r3
1000ed40:	10c4b03a 	or	r2,r2,r3
1000ed44:	6026d0fa 	srli	r19,r12,3
1000ed48:	00002306 	br	1000edd8 <__subdf3+0x37c>
1000ed4c:	5411c83a 	sub	r8,r10,r16
1000ed50:	3825883a 	mov	r18,r7
1000ed54:	8000991e 	bne	r16,zero,1000efbc <__subdf3+0x560>
1000ed58:	6344b03a 	or	r2,r12,r13
1000ed5c:	1000e326 	beq	r2,zero,1000f0ec <__subdf3+0x690>
1000ed60:	40bfffc4 	addi	r2,r8,-1
1000ed64:	10015d26 	beq	r2,zero,1000f2dc <__subdf3+0x880>
1000ed68:	4201ffd8 	cmpnei	r8,r8,2047
1000ed6c:	4000f926 	beq	r8,zero,1000f154 <__subdf3+0x6f8>
1000ed70:	1011883a 	mov	r8,r2
1000ed74:	00009406 	br	1000efc8 <__subdf3+0x56c>
1000ed78:	5b84b03a 	or	r2,r11,r14
1000ed7c:	10010226 	beq	r2,zero,1000f188 <__subdf3+0x72c>
1000ed80:	40bfffc4 	addi	r2,r8,-1
1000ed84:	10000426 	beq	r2,zero,1000ed98 <__subdf3+0x33c>
1000ed88:	4201ffd8 	cmpnei	r8,r8,2047
1000ed8c:	40014126 	beq	r8,zero,1000f294 <__subdf3+0x838>
1000ed90:	1011883a 	mov	r8,r2
1000ed94:	003faf06 	br	1000ec54 <__subdf3+0x1f8>
1000ed98:	6ba3883a 	add	r17,r13,r14
1000ed9c:	62c9883a 	add	r4,r12,r11
1000eda0:	8b5b803a 	cmpltu	r13,r17,r13
1000eda4:	2349883a 	add	r4,r4,r13
1000eda8:	2080202c 	andhi	r2,r4,128
1000edac:	1000a61e 	bne	r2,zero,1000f048 <__subdf3+0x5ec>
1000edb0:	04000044 	movi	r16,1
1000edb4:	888001cc 	andi	r2,r17,7
1000edb8:	103f7d1e 	bne	r2,zero,1000ebb0 <__subdf3+0x154>
1000edbc:	8822d0fa 	srli	r17,r17,3
1000edc0:	2004977a 	slli	r2,r4,29
1000edc4:	2026d0fa 	srli	r19,r4,3
1000edc8:	8011883a 	mov	r8,r16
1000edcc:	8884b03a 	or	r2,r17,r2
1000edd0:	40c1ffe0 	cmpeqi	r3,r8,2047
1000edd4:	18002d1e 	bne	r3,zero,1000ee8c <__subdf3+0x430>
1000edd8:	01000434 	movhi	r4,16
1000eddc:	213fffc4 	addi	r4,r4,-1
1000ede0:	9908703a 	and	r4,r19,r4
1000ede4:	4201ffcc 	andi	r8,r8,2047
1000ede8:	003f8606 	br	1000ec04 <__subdf3+0x1a8>
1000edec:	5ba2b03a 	or	r17,r11,r14
1000edf0:	8822c03a 	cmpne	r17,r17,zero
1000edf4:	8b63883a 	add	r17,r17,r13
1000edf8:	8b49803a 	cmpltu	r4,r17,r13
1000edfc:	2309883a 	add	r4,r4,r12
1000ee00:	2080202c 	andhi	r2,r4,128
1000ee04:	103feb26 	beq	r2,zero,1000edb4 <__subdf3+0x358>
1000ee08:	84000044 	addi	r16,r16,1
1000ee0c:	8081ffe0 	cmpeqi	r2,r16,2047
1000ee10:	10008e26 	beq	r2,zero,1000f04c <__subdf3+0x5f0>
1000ee14:	0201ffc4 	movi	r8,2047
1000ee18:	0009883a 	mov	r4,zero
1000ee1c:	0005883a 	mov	r2,zero
1000ee20:	003f7806 	br	1000ec04 <__subdf3+0x1a8>
1000ee24:	6010977a 	slli	r8,r12,29
1000ee28:	6026d0fa 	srli	r19,r12,3
1000ee2c:	1000bb26 	beq	r2,zero,1000f11c <__subdf3+0x6c0>
1000ee30:	01480034 	movhi	r5,8192
1000ee34:	297fffc4 	addi	r5,r5,-1
1000ee38:	2146703a 	and	r3,r4,r5
1000ee3c:	9880022c 	andhi	r2,r19,8
1000ee40:	1a06b03a 	or	r3,r3,r8
1000ee44:	10000826 	beq	r2,zero,1000ee68 <__subdf3+0x40c>
1000ee48:	5808d0fa 	srli	r4,r11,3
1000ee4c:	2080022c 	andhi	r2,r4,8
1000ee50:	1000051e 	bne	r2,zero,1000ee68 <__subdf3+0x40c>
1000ee54:	5804977a 	slli	r2,r11,29
1000ee58:	3146703a 	and	r3,r6,r5
1000ee5c:	3825883a 	mov	r18,r7
1000ee60:	1886b03a 	or	r3,r3,r2
1000ee64:	2027883a 	mov	r19,r4
1000ee68:	1804d77a 	srli	r2,r3,29
1000ee6c:	980890fa 	slli	r4,r19,3
1000ee70:	01480034 	movhi	r5,8192
1000ee74:	297fffc4 	addi	r5,r5,-1
1000ee78:	1108b03a 	or	r4,r2,r4
1000ee7c:	2004977a 	slli	r2,r4,29
1000ee80:	2026d0fa 	srli	r19,r4,3
1000ee84:	1946703a 	and	r3,r3,r5
1000ee88:	10c4b03a 	or	r2,r2,r3
1000ee8c:	14c6b03a 	or	r3,r2,r19
1000ee90:	18014926 	beq	r3,zero,1000f3b8 <__subdf3+0x95c>
1000ee94:	00c00434 	movhi	r3,16
1000ee98:	99000234 	orhi	r4,r19,8
1000ee9c:	18ffffc4 	addi	r3,r3,-1
1000eea0:	20c8703a 	and	r4,r4,r3
1000eea4:	0201ffc4 	movi	r8,2047
1000eea8:	003f5606 	br	1000ec04 <__subdf3+0x1a8>
1000eeac:	00bfe034 	movhi	r2,65408
1000eeb0:	10bfffc4 	addi	r2,r2,-1
1000eeb4:	2088703a 	and	r4,r4,r2
1000eeb8:	888001cc 	andi	r2,r17,7
1000eebc:	8221c83a 	sub	r16,r16,r8
1000eec0:	103f3b1e 	bne	r2,zero,1000ebb0 <__subdf3+0x154>
1000eec4:	003fbd06 	br	1000edbc <__subdf3+0x360>
1000eec8:	8809883a 	mov	r4,r17
1000eecc:	000f6000 	call	1000f600 <__clzsi2>
1000eed0:	12000604 	addi	r8,r2,24
1000eed4:	40c00808 	cmpgei	r3,r8,32
1000eed8:	183f1e26 	beq	r3,zero,1000eb54 <__subdf3+0xf8>
1000eedc:	113ffe04 	addi	r4,r2,-8
1000eee0:	8908983a 	sll	r4,r17,r4
1000eee4:	0023883a 	mov	r17,zero
1000eee8:	003f2006 	br	1000eb6c <__subdf3+0x110>
1000eeec:	5ba2b03a 	or	r17,r11,r14
1000eef0:	8822c03a 	cmpne	r17,r17,zero
1000eef4:	003f0b06 	br	1000eb24 <__subdf3+0xc8>
1000eef8:	6ba3c83a 	sub	r17,r13,r14
1000eefc:	62e7c83a 	sub	r19,r12,r11
1000ef00:	6c49803a 	cmpltu	r4,r13,r17
1000ef04:	9927c83a 	sub	r19,r19,r4
1000ef08:	9880202c 	andhi	r2,r19,128
1000ef0c:	1000bb1e 	bne	r2,zero,1000f1fc <__subdf3+0x7a0>
1000ef10:	8cc4b03a 	or	r2,r17,r19
1000ef14:	103f0b1e 	bne	r2,zero,1000eb44 <__subdf3+0xe8>
1000ef18:	0027883a 	mov	r19,zero
1000ef1c:	0025883a 	mov	r18,zero
1000ef20:	003fad06 	br	1000edd8 <__subdf3+0x37c>
1000ef24:	00880034 	movhi	r2,8192
1000ef28:	6022977a 	slli	r17,r12,29
1000ef2c:	10bfffc4 	addi	r2,r2,-1
1000ef30:	2088703a 	and	r4,r4,r2
1000ef34:	2444b03a 	or	r2,r4,r17
1000ef38:	6026d0fa 	srli	r19,r12,3
1000ef3c:	003fa406 	br	1000edd0 <__subdf3+0x374>
1000ef40:	00880034 	movhi	r2,8192
1000ef44:	6022977a 	slli	r17,r12,29
1000ef48:	10bfffc4 	addi	r2,r2,-1
1000ef4c:	2088703a 	and	r4,r4,r2
1000ef50:	2444b03a 	or	r2,r4,r17
1000ef54:	6026d0fa 	srli	r19,r12,3
1000ef58:	003fcc06 	br	1000ee8c <__subdf3+0x430>
1000ef5c:	5411c83a 	sub	r8,r10,r16
1000ef60:	80004f26 	beq	r16,zero,1000f0a0 <__subdf3+0x644>
1000ef64:	5081ffd8 	cmpnei	r2,r10,2047
1000ef68:	1000b426 	beq	r2,zero,1000f23c <__subdf3+0x7e0>
1000ef6c:	63002034 	orhi	r12,r12,128
1000ef70:	40800e48 	cmpgei	r2,r8,57
1000ef74:	1000c41e 	bne	r2,zero,1000f288 <__subdf3+0x82c>
1000ef78:	40800808 	cmpgei	r2,r8,32
1000ef7c:	1000f91e 	bne	r2,zero,1000f364 <__subdf3+0x908>
1000ef80:	00800804 	movi	r2,32
1000ef84:	1205c83a 	sub	r2,r2,r8
1000ef88:	60a2983a 	sll	r17,r12,r2
1000ef8c:	6a06d83a 	srl	r3,r13,r8
1000ef90:	6884983a 	sll	r2,r13,r2
1000ef94:	6210d83a 	srl	r8,r12,r8
1000ef98:	88e2b03a 	or	r17,r17,r3
1000ef9c:	1004c03a 	cmpne	r2,r2,zero
1000efa0:	88a2b03a 	or	r17,r17,r2
1000efa4:	5a17883a 	add	r11,r11,r8
1000efa8:	8ba3883a 	add	r17,r17,r14
1000efac:	8b85803a 	cmpltu	r2,r17,r14
1000efb0:	12c9883a 	add	r4,r2,r11
1000efb4:	5021883a 	mov	r16,r10
1000efb8:	003f9106 	br	1000ee00 <__subdf3+0x3a4>
1000efbc:	5081ffd8 	cmpnei	r2,r10,2047
1000efc0:	10006426 	beq	r2,zero,1000f154 <__subdf3+0x6f8>
1000efc4:	63002034 	orhi	r12,r12,128
1000efc8:	40800e48 	cmpgei	r2,r8,57
1000efcc:	1000751e 	bne	r2,zero,1000f1a4 <__subdf3+0x748>
1000efd0:	40800808 	cmpgei	r2,r8,32
1000efd4:	1000b61e 	bne	r2,zero,1000f2b0 <__subdf3+0x854>
1000efd8:	00800804 	movi	r2,32
1000efdc:	1205c83a 	sub	r2,r2,r8
1000efe0:	60a2983a 	sll	r17,r12,r2
1000efe4:	6a06d83a 	srl	r3,r13,r8
1000efe8:	6884983a 	sll	r2,r13,r2
1000efec:	6210d83a 	srl	r8,r12,r8
1000eff0:	88e2b03a 	or	r17,r17,r3
1000eff4:	1004c03a 	cmpne	r2,r2,zero
1000eff8:	88a2b03a 	or	r17,r17,r2
1000effc:	5a17c83a 	sub	r11,r11,r8
1000f000:	7463c83a 	sub	r17,r14,r17
1000f004:	7445803a 	cmpltu	r2,r14,r17
1000f008:	5889c83a 	sub	r4,r11,r2
1000f00c:	5021883a 	mov	r16,r10
1000f010:	003ec706 	br	1000eb30 <__subdf3+0xd4>
1000f014:	423ff844 	addi	r8,r8,-31
1000f018:	10c00820 	cmpeqi	r3,r2,32
1000f01c:	2210d83a 	srl	r8,r4,r8
1000f020:	1800041e 	bne	r3,zero,1000f034 <__subdf3+0x5d8>
1000f024:	00c01004 	movi	r3,64
1000f028:	1885c83a 	sub	r2,r3,r2
1000f02c:	2088983a 	sll	r4,r4,r2
1000f030:	8922b03a 	or	r17,r17,r4
1000f034:	8822c03a 	cmpne	r17,r17,zero
1000f038:	8a22b03a 	or	r17,r17,r8
1000f03c:	0009883a 	mov	r4,zero
1000f040:	0021883a 	mov	r16,zero
1000f044:	003f5b06 	br	1000edb4 <__subdf3+0x358>
1000f048:	04000084 	movi	r16,2
1000f04c:	00bfe034 	movhi	r2,65408
1000f050:	10bfffc4 	addi	r2,r2,-1
1000f054:	2084703a 	and	r2,r4,r2
1000f058:	8806d07a 	srli	r3,r17,1
1000f05c:	100a97fa 	slli	r5,r2,31
1000f060:	8c40004c 	andi	r17,r17,1
1000f064:	1c62b03a 	or	r17,r3,r17
1000f068:	1008d07a 	srli	r4,r2,1
1000f06c:	2c62b03a 	or	r17,r5,r17
1000f070:	003ecd06 	br	1000eba8 <__subdf3+0x14c>
1000f074:	447ff804 	addi	r17,r8,-32
1000f078:	40800820 	cmpeqi	r2,r8,32
1000f07c:	5c46d83a 	srl	r3,r11,r17
1000f080:	1000041e 	bne	r2,zero,1000f094 <__subdf3+0x638>
1000f084:	00801004 	movi	r2,64
1000f088:	1205c83a 	sub	r2,r2,r8
1000f08c:	5884983a 	sll	r2,r11,r2
1000f090:	709cb03a 	or	r14,r14,r2
1000f094:	7022c03a 	cmpne	r17,r14,zero
1000f098:	88e2b03a 	or	r17,r17,r3
1000f09c:	003ea106 	br	1000eb24 <__subdf3+0xc8>
1000f0a0:	6344b03a 	or	r2,r12,r13
1000f0a4:	1000a526 	beq	r2,zero,1000f33c <__subdf3+0x8e0>
1000f0a8:	40bfffc4 	addi	r2,r8,-1
1000f0ac:	1000bd26 	beq	r2,zero,1000f3a4 <__subdf3+0x948>
1000f0b0:	4201ffd8 	cmpnei	r8,r8,2047
1000f0b4:	40006126 	beq	r8,zero,1000f23c <__subdf3+0x7e0>
1000f0b8:	1011883a 	mov	r8,r2
1000f0bc:	003fac06 	br	1000ef70 <__subdf3+0x514>
1000f0c0:	00800804 	movi	r2,32
1000f0c4:	1205c83a 	sub	r2,r2,r8
1000f0c8:	58a2983a 	sll	r17,r11,r2
1000f0cc:	7206d83a 	srl	r3,r14,r8
1000f0d0:	709c983a 	sll	r14,r14,r2
1000f0d4:	5a04d83a 	srl	r2,r11,r8
1000f0d8:	88e2b03a 	or	r17,r17,r3
1000f0dc:	701cc03a 	cmpne	r14,r14,zero
1000f0e0:	8ba2b03a 	or	r17,r17,r14
1000f0e4:	6099883a 	add	r12,r12,r2
1000f0e8:	003f4206 	br	1000edf4 <__subdf3+0x398>
1000f0ec:	5808977a 	slli	r4,r11,29
1000f0f0:	00c80034 	movhi	r3,8192
1000f0f4:	18ffffc4 	addi	r3,r3,-1
1000f0f8:	30cc703a 	and	r6,r6,r3
1000f0fc:	2184b03a 	or	r2,r4,r6
1000f100:	5826d0fa 	srli	r19,r11,3
1000f104:	003f3206 	br	1000edd0 <__subdf3+0x374>
1000f108:	10004c26 	beq	r2,zero,1000f23c <__subdf3+0x7e0>
1000f10c:	5b9cb03a 	or	r14,r11,r14
1000f110:	6010977a 	slli	r8,r12,29
1000f114:	6026d0fa 	srli	r19,r12,3
1000f118:	703f451e 	bne	r14,zero,1000ee30 <__subdf3+0x3d4>
1000f11c:	00880034 	movhi	r2,8192
1000f120:	10bfffc4 	addi	r2,r2,-1
1000f124:	2084703a 	and	r2,r4,r2
1000f128:	1204b03a 	or	r2,r2,r8
1000f12c:	003f5706 	br	1000ee8c <__subdf3+0x430>
1000f130:	103f7926 	beq	r2,zero,1000ef18 <__subdf3+0x4bc>
1000f134:	5804977a 	slli	r2,r11,29
1000f138:	00c80034 	movhi	r3,8192
1000f13c:	18ffffc4 	addi	r3,r3,-1
1000f140:	30c6703a 	and	r3,r6,r3
1000f144:	10c4b03a 	or	r2,r2,r3
1000f148:	5826d0fa 	srli	r19,r11,3
1000f14c:	3825883a 	mov	r18,r7
1000f150:	003f2106 	br	1000edd8 <__subdf3+0x37c>
1000f154:	5804977a 	slli	r2,r11,29
1000f158:	00c80034 	movhi	r3,8192
1000f15c:	18ffffc4 	addi	r3,r3,-1
1000f160:	30c6703a 	and	r3,r6,r3
1000f164:	10c4b03a 	or	r2,r2,r3
1000f168:	5826d0fa 	srli	r19,r11,3
1000f16c:	003f4706 	br	1000ee8c <__subdf3+0x430>
1000f170:	6ba3c83a 	sub	r17,r13,r14
1000f174:	62c9c83a 	sub	r4,r12,r11
1000f178:	6c5b803a 	cmpltu	r13,r13,r17
1000f17c:	2349c83a 	sub	r4,r4,r13
1000f180:	04000044 	movi	r16,1
1000f184:	003e6a06 	br	1000eb30 <__subdf3+0xd4>
1000f188:	6004977a 	slli	r2,r12,29
1000f18c:	00c80034 	movhi	r3,8192
1000f190:	18ffffc4 	addi	r3,r3,-1
1000f194:	20c8703a 	and	r4,r4,r3
1000f198:	1104b03a 	or	r2,r2,r4
1000f19c:	6026d0fa 	srli	r19,r12,3
1000f1a0:	003f0b06 	br	1000edd0 <__subdf3+0x374>
1000f1a4:	6366b03a 	or	r19,r12,r13
1000f1a8:	9822c03a 	cmpne	r17,r19,zero
1000f1ac:	003f9406 	br	1000f000 <__subdf3+0x5a4>
1000f1b0:	6004977a 	slli	r2,r12,29
1000f1b4:	00c80034 	movhi	r3,8192
1000f1b8:	18ffffc4 	addi	r3,r3,-1
1000f1bc:	20c8703a 	and	r4,r4,r3
1000f1c0:	1104b03a 	or	r2,r2,r4
1000f1c4:	6026d0fa 	srli	r19,r12,3
1000f1c8:	003f3006 	br	1000ee8c <__subdf3+0x430>
1000f1cc:	1881ffe0 	cmpeqi	r2,r3,2047
1000f1d0:	103f101e 	bne	r2,zero,1000ee14 <__subdf3+0x3b8>
1000f1d4:	6b9d883a 	add	r14,r13,r14
1000f1d8:	62c9883a 	add	r4,r12,r11
1000f1dc:	7345803a 	cmpltu	r2,r14,r13
1000f1e0:	2085883a 	add	r2,r4,r2
1000f1e4:	102297fa 	slli	r17,r2,31
1000f1e8:	701cd07a 	srli	r14,r14,1
1000f1ec:	1008d07a 	srli	r4,r2,1
1000f1f0:	1821883a 	mov	r16,r3
1000f1f4:	8ba2b03a 	or	r17,r17,r14
1000f1f8:	003eee06 	br	1000edb4 <__subdf3+0x358>
1000f1fc:	7363c83a 	sub	r17,r14,r13
1000f200:	5b09c83a 	sub	r4,r11,r12
1000f204:	7467803a 	cmpltu	r19,r14,r17
1000f208:	24e7c83a 	sub	r19,r4,r19
1000f20c:	3825883a 	mov	r18,r7
1000f210:	003e4c06 	br	1000eb44 <__subdf3+0xe8>
1000f214:	183f031e 	bne	r3,zero,1000ee24 <__subdf3+0x3c8>
1000f218:	10005d26 	beq	r2,zero,1000f390 <__subdf3+0x934>
1000f21c:	00880034 	movhi	r2,8192
1000f220:	5806977a 	slli	r3,r11,29
1000f224:	10bfffc4 	addi	r2,r2,-1
1000f228:	3084703a 	and	r2,r6,r2
1000f22c:	10c4b03a 	or	r2,r2,r3
1000f230:	5826d0fa 	srli	r19,r11,3
1000f234:	3825883a 	mov	r18,r7
1000f238:	003f1406 	br	1000ee8c <__subdf3+0x430>
1000f23c:	00880034 	movhi	r2,8192
1000f240:	5806977a 	slli	r3,r11,29
1000f244:	10bfffc4 	addi	r2,r2,-1
1000f248:	3084703a 	and	r2,r6,r2
1000f24c:	10c4b03a 	or	r2,r2,r3
1000f250:	5826d0fa 	srli	r19,r11,3
1000f254:	003f0d06 	br	1000ee8c <__subdf3+0x430>
1000f258:	6ba3c83a 	sub	r17,r13,r14
1000f25c:	62c5c83a 	sub	r2,r12,r11
1000f260:	6c49803a 	cmpltu	r4,r13,r17
1000f264:	1109c83a 	sub	r4,r2,r4
1000f268:	2080202c 	andhi	r2,r4,128
1000f26c:	10003a26 	beq	r2,zero,1000f358 <__subdf3+0x8fc>
1000f270:	7363c83a 	sub	r17,r14,r13
1000f274:	5b09c83a 	sub	r4,r11,r12
1000f278:	745d803a 	cmpltu	r14,r14,r17
1000f27c:	2389c83a 	sub	r4,r4,r14
1000f280:	3825883a 	mov	r18,r7
1000f284:	003e4806 	br	1000eba8 <__subdf3+0x14c>
1000f288:	6362b03a 	or	r17,r12,r13
1000f28c:	8822c03a 	cmpne	r17,r17,zero
1000f290:	003f4506 	br	1000efa8 <__subdf3+0x54c>
1000f294:	6004977a 	slli	r2,r12,29
1000f298:	00c80034 	movhi	r3,8192
1000f29c:	18ffffc4 	addi	r3,r3,-1
1000f2a0:	20c6703a 	and	r3,r4,r3
1000f2a4:	10c4b03a 	or	r2,r2,r3
1000f2a8:	6026d0fa 	srli	r19,r12,3
1000f2ac:	003ef706 	br	1000ee8c <__subdf3+0x430>
1000f2b0:	40bff804 	addi	r2,r8,-32
1000f2b4:	40c00820 	cmpeqi	r3,r8,32
1000f2b8:	6084d83a 	srl	r2,r12,r2
1000f2bc:	1800041e 	bne	r3,zero,1000f2d0 <__subdf3+0x874>
1000f2c0:	04c01004 	movi	r19,64
1000f2c4:	9a11c83a 	sub	r8,r19,r8
1000f2c8:	6226983a 	sll	r19,r12,r8
1000f2cc:	6cdab03a 	or	r13,r13,r19
1000f2d0:	6822c03a 	cmpne	r17,r13,zero
1000f2d4:	88a2b03a 	or	r17,r17,r2
1000f2d8:	003f4906 	br	1000f000 <__subdf3+0x5a4>
1000f2dc:	7363c83a 	sub	r17,r14,r13
1000f2e0:	5b09c83a 	sub	r4,r11,r12
1000f2e4:	745d803a 	cmpltu	r14,r14,r17
1000f2e8:	2389c83a 	sub	r4,r4,r14
1000f2ec:	04000044 	movi	r16,1
1000f2f0:	003e0f06 	br	1000eb30 <__subdf3+0xd4>
1000f2f4:	00880034 	movhi	r2,8192
1000f2f8:	5806977a 	slli	r3,r11,29
1000f2fc:	10bfffc4 	addi	r2,r2,-1
1000f300:	3084703a 	and	r2,r6,r2
1000f304:	10c4b03a 	or	r2,r2,r3
1000f308:	5826d0fa 	srli	r19,r11,3
1000f30c:	003eb206 	br	1000edd8 <__subdf3+0x37c>
1000f310:	6ba3883a 	add	r17,r13,r14
1000f314:	62c9883a 	add	r4,r12,r11
1000f318:	8b5b803a 	cmpltu	r13,r17,r13
1000f31c:	2349883a 	add	r4,r4,r13
1000f320:	2080202c 	andhi	r2,r4,128
1000f324:	103ea326 	beq	r2,zero,1000edb4 <__subdf3+0x358>
1000f328:	00bfe034 	movhi	r2,65408
1000f32c:	10bfffc4 	addi	r2,r2,-1
1000f330:	2088703a 	and	r4,r4,r2
1000f334:	04000044 	movi	r16,1
1000f338:	003e9e06 	br	1000edb4 <__subdf3+0x358>
1000f33c:	00880034 	movhi	r2,8192
1000f340:	5806977a 	slli	r3,r11,29
1000f344:	10bfffc4 	addi	r2,r2,-1
1000f348:	3084703a 	and	r2,r6,r2
1000f34c:	10c4b03a 	or	r2,r2,r3
1000f350:	5826d0fa 	srli	r19,r11,3
1000f354:	003e9e06 	br	1000edd0 <__subdf3+0x374>
1000f358:	8904b03a 	or	r2,r17,r4
1000f35c:	103eee26 	beq	r2,zero,1000ef18 <__subdf3+0x4bc>
1000f360:	003e9406 	br	1000edb4 <__subdf3+0x358>
1000f364:	40bff804 	addi	r2,r8,-32
1000f368:	40c00820 	cmpeqi	r3,r8,32
1000f36c:	6084d83a 	srl	r2,r12,r2
1000f370:	1800041e 	bne	r3,zero,1000f384 <__subdf3+0x928>
1000f374:	04c01004 	movi	r19,64
1000f378:	9a11c83a 	sub	r8,r19,r8
1000f37c:	6226983a 	sll	r19,r12,r8
1000f380:	6cdab03a 	or	r13,r13,r19
1000f384:	6822c03a 	cmpne	r17,r13,zero
1000f388:	88a2b03a 	or	r17,r17,r2
1000f38c:	003f0606 	br	1000efa8 <__subdf3+0x54c>
1000f390:	04c00434 	movhi	r19,16
1000f394:	9cffffc4 	addi	r19,r19,-1
1000f398:	0025883a 	mov	r18,zero
1000f39c:	00bfffc4 	movi	r2,-1
1000f3a0:	003ebc06 	br	1000ee94 <__subdf3+0x438>
1000f3a4:	6ba3883a 	add	r17,r13,r14
1000f3a8:	62c9883a 	add	r4,r12,r11
1000f3ac:	8b9d803a 	cmpltu	r14,r17,r14
1000f3b0:	2389883a 	add	r4,r4,r14
1000f3b4:	003e7c06 	br	1000eda8 <__subdf3+0x34c>
1000f3b8:	0005883a 	mov	r2,zero
1000f3bc:	0201ffc4 	movi	r8,2047
1000f3c0:	0009883a 	mov	r4,zero
1000f3c4:	003e0f06 	br	1000ec04 <__subdf3+0x1a8>

1000f3c8 <__unorddf2>:
1000f3c8:	2806d53a 	srli	r3,r5,20
1000f3cc:	3810d53a 	srli	r8,r7,20
1000f3d0:	00800434 	movhi	r2,16
1000f3d4:	18c1ffcc 	andi	r3,r3,2047
1000f3d8:	10bfffc4 	addi	r2,r2,-1
1000f3dc:	18c1ffd8 	cmpnei	r3,r3,2047
1000f3e0:	288a703a 	and	r5,r5,r2
1000f3e4:	388e703a 	and	r7,r7,r2
1000f3e8:	4201ffcc 	andi	r8,r8,2047
1000f3ec:	18000426 	beq	r3,zero,1000f400 <__unorddf2+0x38>
1000f3f0:	4201ffd8 	cmpnei	r8,r8,2047
1000f3f4:	40000626 	beq	r8,zero,1000f410 <__unorddf2+0x48>
1000f3f8:	0005883a 	mov	r2,zero
1000f3fc:	f800283a 	ret
1000f400:	214ab03a 	or	r5,r4,r5
1000f404:	283ffa26 	beq	r5,zero,1000f3f0 <__unorddf2+0x28>
1000f408:	00800044 	movi	r2,1
1000f40c:	f800283a 	ret
1000f410:	398eb03a 	or	r7,r7,r6
1000f414:	3804c03a 	cmpne	r2,r7,zero
1000f418:	f800283a 	ret

1000f41c <__fixdfsi>:
1000f41c:	280cd53a 	srli	r6,r5,20
1000f420:	00c00434 	movhi	r3,16
1000f424:	18ffffc4 	addi	r3,r3,-1
1000f428:	3181ffcc 	andi	r6,r6,2047
1000f42c:	31c0ffd0 	cmplti	r7,r6,1023
1000f430:	28c6703a 	and	r3,r5,r3
1000f434:	280ad7fa 	srli	r5,r5,31
1000f438:	3800061e 	bne	r7,zero,1000f454 <__fixdfsi+0x38>
1000f43c:	30810790 	cmplti	r2,r6,1054
1000f440:	1000061e 	bne	r2,zero,1000f45c <__fixdfsi+0x40>
1000f444:	00a00034 	movhi	r2,32768
1000f448:	10bfffc4 	addi	r2,r2,-1
1000f44c:	2885883a 	add	r2,r5,r2
1000f450:	f800283a 	ret
1000f454:	0005883a 	mov	r2,zero
1000f458:	f800283a 	ret
1000f45c:	00810cc4 	movi	r2,1075
1000f460:	118fc83a 	sub	r7,r2,r6
1000f464:	38800808 	cmpgei	r2,r7,32
1000f468:	18c00434 	orhi	r3,r3,16
1000f46c:	1000071e 	bne	r2,zero,1000f48c <__fixdfsi+0x70>
1000f470:	30befb44 	addi	r2,r6,-1043
1000f474:	1886983a 	sll	r3,r3,r2
1000f478:	21c4d83a 	srl	r2,r4,r7
1000f47c:	1884b03a 	or	r2,r3,r2
1000f480:	283ff526 	beq	r5,zero,1000f458 <__fixdfsi+0x3c>
1000f484:	0085c83a 	sub	r2,zero,r2
1000f488:	f800283a 	ret
1000f48c:	008104c4 	movi	r2,1043
1000f490:	1185c83a 	sub	r2,r2,r6
1000f494:	1884d83a 	srl	r2,r3,r2
1000f498:	003ff906 	br	1000f480 <__fixdfsi+0x64>

1000f49c <__floatsidf>:
1000f49c:	defffd04 	addi	sp,sp,-12
1000f4a0:	dfc00215 	stw	ra,8(sp)
1000f4a4:	dc400115 	stw	r17,4(sp)
1000f4a8:	dc000015 	stw	r16,0(sp)
1000f4ac:	20001326 	beq	r4,zero,1000f4fc <__floatsidf+0x60>
1000f4b0:	2021883a 	mov	r16,r4
1000f4b4:	2022d7fa 	srli	r17,r4,31
1000f4b8:	20002116 	blt	r4,zero,1000f540 <__floatsidf+0xa4>
1000f4bc:	8009883a 	mov	r4,r16
1000f4c0:	000f6000 	call	1000f600 <__clzsi2>
1000f4c4:	01010784 	movi	r4,1054
1000f4c8:	2089c83a 	sub	r4,r4,r2
1000f4cc:	10c002c8 	cmpgei	r3,r2,11
1000f4d0:	2101ffcc 	andi	r4,r4,2047
1000f4d4:	18001c1e 	bne	r3,zero,1000f548 <__floatsidf+0xac>
1000f4d8:	018002c4 	movi	r6,11
1000f4dc:	308dc83a 	sub	r6,r6,r2
1000f4e0:	818ad83a 	srl	r5,r16,r6
1000f4e4:	00c00434 	movhi	r3,16
1000f4e8:	10800544 	addi	r2,r2,21
1000f4ec:	18ffffc4 	addi	r3,r3,-1
1000f4f0:	8084983a 	sll	r2,r16,r2
1000f4f4:	28ca703a 	and	r5,r5,r3
1000f4f8:	00000406 	br	1000f50c <__floatsidf+0x70>
1000f4fc:	0023883a 	mov	r17,zero
1000f500:	0009883a 	mov	r4,zero
1000f504:	000b883a 	mov	r5,zero
1000f508:	0005883a 	mov	r2,zero
1000f50c:	2008953a 	slli	r4,r4,20
1000f510:	8c403fcc 	andi	r17,r17,255
1000f514:	01800434 	movhi	r6,16
1000f518:	31bfffc4 	addi	r6,r6,-1
1000f51c:	880697fa 	slli	r3,r17,31
1000f520:	298a703a 	and	r5,r5,r6
1000f524:	290ab03a 	or	r5,r5,r4
1000f528:	28c6b03a 	or	r3,r5,r3
1000f52c:	dfc00217 	ldw	ra,8(sp)
1000f530:	dc400117 	ldw	r17,4(sp)
1000f534:	dc000017 	ldw	r16,0(sp)
1000f538:	dec00304 	addi	sp,sp,12
1000f53c:	f800283a 	ret
1000f540:	0121c83a 	sub	r16,zero,r4
1000f544:	003fdd06 	br	1000f4bc <__floatsidf+0x20>
1000f548:	10bffd44 	addi	r2,r2,-11
1000f54c:	808a983a 	sll	r5,r16,r2
1000f550:	00800434 	movhi	r2,16
1000f554:	10bfffc4 	addi	r2,r2,-1
1000f558:	288a703a 	and	r5,r5,r2
1000f55c:	0005883a 	mov	r2,zero
1000f560:	003fea06 	br	1000f50c <__floatsidf+0x70>

1000f564 <__floatunsidf>:
1000f564:	defffe04 	addi	sp,sp,-8
1000f568:	dc000015 	stw	r16,0(sp)
1000f56c:	dfc00115 	stw	ra,4(sp)
1000f570:	2021883a 	mov	r16,r4
1000f574:	20000f26 	beq	r4,zero,1000f5b4 <__floatunsidf+0x50>
1000f578:	000f6000 	call	1000f600 <__clzsi2>
1000f57c:	01010784 	movi	r4,1054
1000f580:	2089c83a 	sub	r4,r4,r2
1000f584:	10c002c8 	cmpgei	r3,r2,11
1000f588:	2101ffcc 	andi	r4,r4,2047
1000f58c:	1800151e 	bne	r3,zero,1000f5e4 <__floatunsidf+0x80>
1000f590:	00c002c4 	movi	r3,11
1000f594:	1887c83a 	sub	r3,r3,r2
1000f598:	80c6d83a 	srl	r3,r16,r3
1000f59c:	01400434 	movhi	r5,16
1000f5a0:	10800544 	addi	r2,r2,21
1000f5a4:	297fffc4 	addi	r5,r5,-1
1000f5a8:	80a0983a 	sll	r16,r16,r2
1000f5ac:	1944703a 	and	r2,r3,r5
1000f5b0:	00000206 	br	1000f5bc <__floatunsidf+0x58>
1000f5b4:	0009883a 	mov	r4,zero
1000f5b8:	0005883a 	mov	r2,zero
1000f5bc:	2008953a 	slli	r4,r4,20
1000f5c0:	00c00434 	movhi	r3,16
1000f5c4:	18ffffc4 	addi	r3,r3,-1
1000f5c8:	10c6703a 	and	r3,r2,r3
1000f5cc:	1906b03a 	or	r3,r3,r4
1000f5d0:	8005883a 	mov	r2,r16
1000f5d4:	dfc00117 	ldw	ra,4(sp)
1000f5d8:	dc000017 	ldw	r16,0(sp)
1000f5dc:	dec00204 	addi	sp,sp,8
1000f5e0:	f800283a 	ret
1000f5e4:	10bffd44 	addi	r2,r2,-11
1000f5e8:	8084983a 	sll	r2,r16,r2
1000f5ec:	00c00434 	movhi	r3,16
1000f5f0:	18ffffc4 	addi	r3,r3,-1
1000f5f4:	10c4703a 	and	r2,r2,r3
1000f5f8:	0021883a 	mov	r16,zero
1000f5fc:	003fef06 	br	1000f5bc <__floatunsidf+0x58>

1000f600 <__clzsi2>:
1000f600:	00bfffd4 	movui	r2,65535
1000f604:	11000b36 	bltu	r2,r4,1000f634 <__clzsi2+0x34>
1000f608:	20804030 	cmpltui	r2,r4,256
1000f60c:	1000071e 	bne	r2,zero,1000f62c <__clzsi2+0x2c>
1000f610:	2008d23a 	srli	r4,r4,8
1000f614:	01400604 	movi	r5,24
1000f618:	00c40074 	movhi	r3,4097
1000f61c:	20c7883a 	add	r3,r4,r3
1000f620:	188b0643 	ldbu	r2,11289(r3)
1000f624:	2885c83a 	sub	r2,r5,r2
1000f628:	f800283a 	ret
1000f62c:	01400804 	movi	r5,32
1000f630:	003ff906 	br	1000f618 <__clzsi2+0x18>
1000f634:	00804034 	movhi	r2,256
1000f638:	20800336 	bltu	r4,r2,1000f648 <__clzsi2+0x48>
1000f63c:	2008d63a 	srli	r4,r4,24
1000f640:	01400204 	movi	r5,8
1000f644:	003ff406 	br	1000f618 <__clzsi2+0x18>
1000f648:	2008d43a 	srli	r4,r4,16
1000f64c:	01400404 	movi	r5,16
1000f650:	003ff106 	br	1000f618 <__clzsi2+0x18>

1000f654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f654:	defffe04 	addi	sp,sp,-8
1000f658:	dfc00115 	stw	ra,4(sp)
1000f65c:	df000015 	stw	fp,0(sp)
1000f660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f664:	d0a00a17 	ldw	r2,-32728(gp)
1000f668:	10000326 	beq	r2,zero,1000f678 <alt_get_errno+0x24>
1000f66c:	d0a00a17 	ldw	r2,-32728(gp)
1000f670:	103ee83a 	callr	r2
1000f674:	00000106 	br	1000f67c <alt_get_errno+0x28>
1000f678:	d0a89a04 	addi	r2,gp,-23960
}
1000f67c:	e037883a 	mov	sp,fp
1000f680:	dfc00117 	ldw	ra,4(sp)
1000f684:	df000017 	ldw	fp,0(sp)
1000f688:	dec00204 	addi	sp,sp,8
1000f68c:	f800283a 	ret

1000f690 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f690:	defffb04 	addi	sp,sp,-20
1000f694:	dfc00415 	stw	ra,16(sp)
1000f698:	df000315 	stw	fp,12(sp)
1000f69c:	df000304 	addi	fp,sp,12
1000f6a0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f6a4:	e0bffd17 	ldw	r2,-12(fp)
1000f6a8:	10000616 	blt	r2,zero,1000f6c4 <close+0x34>
1000f6ac:	e0bffd17 	ldw	r2,-12(fp)
1000f6b0:	10c00324 	muli	r3,r2,12
1000f6b4:	00840074 	movhi	r2,4097
1000f6b8:	108f5404 	addi	r2,r2,15696
1000f6bc:	1885883a 	add	r2,r3,r2
1000f6c0:	00000106 	br	1000f6c8 <close+0x38>
1000f6c4:	0005883a 	mov	r2,zero
1000f6c8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
1000f6cc:	e0bfff17 	ldw	r2,-4(fp)
1000f6d0:	10001926 	beq	r2,zero,1000f738 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f6d4:	e0bfff17 	ldw	r2,-4(fp)
1000f6d8:	10800017 	ldw	r2,0(r2)
1000f6dc:	10800417 	ldw	r2,16(r2)
1000f6e0:	10000626 	beq	r2,zero,1000f6fc <close+0x6c>
1000f6e4:	e0bfff17 	ldw	r2,-4(fp)
1000f6e8:	10800017 	ldw	r2,0(r2)
1000f6ec:	10800417 	ldw	r2,16(r2)
1000f6f0:	e13fff17 	ldw	r4,-4(fp)
1000f6f4:	103ee83a 	callr	r2
1000f6f8:	00000106 	br	1000f700 <close+0x70>
1000f6fc:	0005883a 	mov	r2,zero
1000f700:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f704:	e13ffd17 	ldw	r4,-12(fp)
1000f708:	000fd500 	call	1000fd50 <alt_release_fd>
    if (rval < 0)
1000f70c:	e0bffe17 	ldw	r2,-8(fp)
1000f710:	1000070e 	bge	r2,zero,1000f730 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000f714:	000f6540 	call	1000f654 <alt_get_errno>
1000f718:	1007883a 	mov	r3,r2
1000f71c:	e0bffe17 	ldw	r2,-8(fp)
1000f720:	0085c83a 	sub	r2,zero,r2
1000f724:	18800015 	stw	r2,0(r3)
      return -1;
1000f728:	00bfffc4 	movi	r2,-1
1000f72c:	00000706 	br	1000f74c <close+0xbc>
    }
    return 0;
1000f730:	0005883a 	mov	r2,zero
1000f734:	00000506 	br	1000f74c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f738:	000f6540 	call	1000f654 <alt_get_errno>
1000f73c:	1007883a 	mov	r3,r2
1000f740:	00801444 	movi	r2,81
1000f744:	18800015 	stw	r2,0(r3)
    return -1;
1000f748:	00bfffc4 	movi	r2,-1
  }
}
1000f74c:	e037883a 	mov	sp,fp
1000f750:	dfc00117 	ldw	ra,4(sp)
1000f754:	df000017 	ldw	fp,0(sp)
1000f758:	dec00204 	addi	sp,sp,8
1000f75c:	f800283a 	ret

1000f760 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f760:	defffc04 	addi	sp,sp,-16
1000f764:	df000315 	stw	fp,12(sp)
1000f768:	df000304 	addi	fp,sp,12
1000f76c:	e13fff15 	stw	r4,-4(fp)
1000f770:	e17ffe15 	stw	r5,-8(fp)
1000f774:	e1bffd15 	stw	r6,-12(fp)
  return len;
1000f778:	e0bffd17 	ldw	r2,-12(fp)
}
1000f77c:	e037883a 	mov	sp,fp
1000f780:	df000017 	ldw	fp,0(sp)
1000f784:	dec00104 	addi	sp,sp,4
1000f788:	f800283a 	ret

1000f78c <alt_get_errno>:
{
1000f78c:	defffe04 	addi	sp,sp,-8
1000f790:	dfc00115 	stw	ra,4(sp)
1000f794:	df000015 	stw	fp,0(sp)
1000f798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f79c:	d0a00a17 	ldw	r2,-32728(gp)
1000f7a0:	10000326 	beq	r2,zero,1000f7b0 <alt_get_errno+0x24>
1000f7a4:	d0a00a17 	ldw	r2,-32728(gp)
1000f7a8:	103ee83a 	callr	r2
1000f7ac:	00000106 	br	1000f7b4 <alt_get_errno+0x28>
1000f7b0:	d0a89a04 	addi	r2,gp,-23960
}
1000f7b4:	e037883a 	mov	sp,fp
1000f7b8:	dfc00117 	ldw	ra,4(sp)
1000f7bc:	df000017 	ldw	fp,0(sp)
1000f7c0:	dec00204 	addi	sp,sp,8
1000f7c4:	f800283a 	ret

1000f7c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f7c8:	defffb04 	addi	sp,sp,-20
1000f7cc:	dfc00415 	stw	ra,16(sp)
1000f7d0:	df000315 	stw	fp,12(sp)
1000f7d4:	df000304 	addi	fp,sp,12
1000f7d8:	e13ffe15 	stw	r4,-8(fp)
1000f7dc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f7e0:	e0bffe17 	ldw	r2,-8(fp)
1000f7e4:	10000616 	blt	r2,zero,1000f800 <fstat+0x38>
1000f7e8:	e0bffe17 	ldw	r2,-8(fp)
1000f7ec:	10c00324 	muli	r3,r2,12
1000f7f0:	00840074 	movhi	r2,4097
1000f7f4:	108f5404 	addi	r2,r2,15696
1000f7f8:	1885883a 	add	r2,r3,r2
1000f7fc:	00000106 	br	1000f804 <fstat+0x3c>
1000f800:	0005883a 	mov	r2,zero
1000f804:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f808:	e0bfff17 	ldw	r2,-4(fp)
1000f80c:	10001026 	beq	r2,zero,1000f850 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f810:	e0bfff17 	ldw	r2,-4(fp)
1000f814:	10800017 	ldw	r2,0(r2)
1000f818:	10800817 	ldw	r2,32(r2)
1000f81c:	10000726 	beq	r2,zero,1000f83c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000f820:	e0bfff17 	ldw	r2,-4(fp)
1000f824:	10800017 	ldw	r2,0(r2)
1000f828:	10800817 	ldw	r2,32(r2)
1000f82c:	e17ffd17 	ldw	r5,-12(fp)
1000f830:	e13fff17 	ldw	r4,-4(fp)
1000f834:	103ee83a 	callr	r2
1000f838:	00000a06 	br	1000f864 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f83c:	e0bffd17 	ldw	r2,-12(fp)
1000f840:	00c80004 	movi	r3,8192
1000f844:	10c00115 	stw	r3,4(r2)
      return 0;
1000f848:	0005883a 	mov	r2,zero
1000f84c:	00000506 	br	1000f864 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f850:	000f78c0 	call	1000f78c <alt_get_errno>
1000f854:	1007883a 	mov	r3,r2
1000f858:	00801444 	movi	r2,81
1000f85c:	18800015 	stw	r2,0(r3)
    return -1;
1000f860:	00bfffc4 	movi	r2,-1
  }
}
1000f864:	e037883a 	mov	sp,fp
1000f868:	dfc00117 	ldw	ra,4(sp)
1000f86c:	df000017 	ldw	fp,0(sp)
1000f870:	dec00204 	addi	sp,sp,8
1000f874:	f800283a 	ret

1000f878 <alt_get_errno>:
{
1000f878:	defffe04 	addi	sp,sp,-8
1000f87c:	dfc00115 	stw	ra,4(sp)
1000f880:	df000015 	stw	fp,0(sp)
1000f884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f888:	d0a00a17 	ldw	r2,-32728(gp)
1000f88c:	10000326 	beq	r2,zero,1000f89c <alt_get_errno+0x24>
1000f890:	d0a00a17 	ldw	r2,-32728(gp)
1000f894:	103ee83a 	callr	r2
1000f898:	00000106 	br	1000f8a0 <alt_get_errno+0x28>
1000f89c:	d0a89a04 	addi	r2,gp,-23960
}
1000f8a0:	e037883a 	mov	sp,fp
1000f8a4:	dfc00117 	ldw	ra,4(sp)
1000f8a8:	df000017 	ldw	fp,0(sp)
1000f8ac:	dec00204 	addi	sp,sp,8
1000f8b0:	f800283a 	ret

1000f8b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f8b4:	deffea04 	addi	sp,sp,-88
1000f8b8:	dfc01515 	stw	ra,84(sp)
1000f8bc:	df001415 	stw	fp,80(sp)
1000f8c0:	df001404 	addi	fp,sp,80
1000f8c4:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f8c8:	e0bfec17 	ldw	r2,-80(fp)
1000f8cc:	10000616 	blt	r2,zero,1000f8e8 <isatty+0x34>
1000f8d0:	e0bfec17 	ldw	r2,-80(fp)
1000f8d4:	10c00324 	muli	r3,r2,12
1000f8d8:	00840074 	movhi	r2,4097
1000f8dc:	108f5404 	addi	r2,r2,15696
1000f8e0:	1885883a 	add	r2,r3,r2
1000f8e4:	00000106 	br	1000f8ec <isatty+0x38>
1000f8e8:	0005883a 	mov	r2,zero
1000f8ec:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f8f0:	e0bfff17 	ldw	r2,-4(fp)
1000f8f4:	10000e26 	beq	r2,zero,1000f930 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f8f8:	e0bfff17 	ldw	r2,-4(fp)
1000f8fc:	10800017 	ldw	r2,0(r2)
1000f900:	10800817 	ldw	r2,32(r2)
1000f904:	1000021e 	bne	r2,zero,1000f910 <isatty+0x5c>
    {
      return 1;
1000f908:	00800044 	movi	r2,1
1000f90c:	00000d06 	br	1000f944 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f910:	e0bfed04 	addi	r2,fp,-76
1000f914:	100b883a 	mov	r5,r2
1000f918:	e13fec17 	ldw	r4,-80(fp)
1000f91c:	000f7c80 	call	1000f7c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f920:	e0bfee17 	ldw	r2,-72(fp)
1000f924:	10880020 	cmpeqi	r2,r2,8192
1000f928:	10803fcc 	andi	r2,r2,255
1000f92c:	00000506 	br	1000f944 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f930:	000f8780 	call	1000f878 <alt_get_errno>
1000f934:	1007883a 	mov	r3,r2
1000f938:	00801444 	movi	r2,81
1000f93c:	18800015 	stw	r2,0(r3)
    return 0;
1000f940:	0005883a 	mov	r2,zero
  }
}
1000f944:	e037883a 	mov	sp,fp
1000f948:	dfc00117 	ldw	ra,4(sp)
1000f94c:	df000017 	ldw	fp,0(sp)
1000f950:	dec00204 	addi	sp,sp,8
1000f954:	f800283a 	ret

1000f958 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f958:	defffc04 	addi	sp,sp,-16
1000f95c:	df000315 	stw	fp,12(sp)
1000f960:	df000304 	addi	fp,sp,12
1000f964:	e13fff15 	stw	r4,-4(fp)
1000f968:	e17ffe15 	stw	r5,-8(fp)
1000f96c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
1000f970:	e0fffe17 	ldw	r3,-8(fp)
1000f974:	e0bfff17 	ldw	r2,-4(fp)
1000f978:	18800c26 	beq	r3,r2,1000f9ac <alt_load_section+0x54>
  {
    while( to != end )
1000f97c:	00000806 	br	1000f9a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f980:	e0ffff17 	ldw	r3,-4(fp)
1000f984:	18800104 	addi	r2,r3,4
1000f988:	e0bfff15 	stw	r2,-4(fp)
1000f98c:	e0bffe17 	ldw	r2,-8(fp)
1000f990:	11000104 	addi	r4,r2,4
1000f994:	e13ffe15 	stw	r4,-8(fp)
1000f998:	18c00017 	ldw	r3,0(r3)
1000f99c:	10c00015 	stw	r3,0(r2)
    while( to != end )
1000f9a0:	e0fffe17 	ldw	r3,-8(fp)
1000f9a4:	e0bffd17 	ldw	r2,-12(fp)
1000f9a8:	18bff51e 	bne	r3,r2,1000f980 <alt_load_section+0x28>
    }
  }
}
1000f9ac:	0001883a 	nop
1000f9b0:	e037883a 	mov	sp,fp
1000f9b4:	df000017 	ldw	fp,0(sp)
1000f9b8:	dec00104 	addi	sp,sp,4
1000f9bc:	f800283a 	ret

1000f9c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f9c0:	defffe04 	addi	sp,sp,-8
1000f9c4:	dfc00115 	stw	ra,4(sp)
1000f9c8:	df000015 	stw	fp,0(sp)
1000f9cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f9d0:	01840074 	movhi	r6,4097
1000f9d4:	3193db04 	addi	r6,r6,20332
1000f9d8:	01440074 	movhi	r5,4097
1000f9dc:	294b5404 	addi	r5,r5,11600
1000f9e0:	01040074 	movhi	r4,4097
1000f9e4:	2113db04 	addi	r4,r4,20332
1000f9e8:	000f9580 	call	1000f958 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f9ec:	01840034 	movhi	r6,4096
1000f9f0:	31808e04 	addi	r6,r6,568
1000f9f4:	01440034 	movhi	r5,4096
1000f9f8:	29400804 	addi	r5,r5,32
1000f9fc:	01040034 	movhi	r4,4096
1000fa00:	21000804 	addi	r4,r4,32
1000fa04:	000f9580 	call	1000f958 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fa08:	01840074 	movhi	r6,4097
1000fa0c:	318b5404 	addi	r6,r6,11600
1000fa10:	01440074 	movhi	r5,4097
1000fa14:	29478c04 	addi	r5,r5,7728
1000fa18:	01040074 	movhi	r4,4097
1000fa1c:	21078c04 	addi	r4,r4,7728
1000fa20:	000f9580 	call	1000f958 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fa24:	0010e340 	call	10010e34 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fa28:	001101c0 	call	1001101c <alt_icache_flush_all>
}
1000fa2c:	0001883a 	nop
1000fa30:	e037883a 	mov	sp,fp
1000fa34:	dfc00117 	ldw	ra,4(sp)
1000fa38:	df000017 	ldw	fp,0(sp)
1000fa3c:	dec00204 	addi	sp,sp,8
1000fa40:	f800283a 	ret

1000fa44 <alt_get_errno>:
{
1000fa44:	defffe04 	addi	sp,sp,-8
1000fa48:	dfc00115 	stw	ra,4(sp)
1000fa4c:	df000015 	stw	fp,0(sp)
1000fa50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa54:	d0a00a17 	ldw	r2,-32728(gp)
1000fa58:	10000326 	beq	r2,zero,1000fa68 <alt_get_errno+0x24>
1000fa5c:	d0a00a17 	ldw	r2,-32728(gp)
1000fa60:	103ee83a 	callr	r2
1000fa64:	00000106 	br	1000fa6c <alt_get_errno+0x28>
1000fa68:	d0a89a04 	addi	r2,gp,-23960
}
1000fa6c:	e037883a 	mov	sp,fp
1000fa70:	dfc00117 	ldw	ra,4(sp)
1000fa74:	df000017 	ldw	fp,0(sp)
1000fa78:	dec00204 	addi	sp,sp,8
1000fa7c:	f800283a 	ret

1000fa80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000fa80:	defff904 	addi	sp,sp,-28
1000fa84:	dfc00615 	stw	ra,24(sp)
1000fa88:	df000515 	stw	fp,20(sp)
1000fa8c:	df000504 	addi	fp,sp,20
1000fa90:	e13ffd15 	stw	r4,-12(fp)
1000fa94:	e17ffc15 	stw	r5,-16(fp)
1000fa98:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fa9c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000faa0:	e0bffd17 	ldw	r2,-12(fp)
1000faa4:	10000616 	blt	r2,zero,1000fac0 <lseek+0x40>
1000faa8:	e0bffd17 	ldw	r2,-12(fp)
1000faac:	10c00324 	muli	r3,r2,12
1000fab0:	00840074 	movhi	r2,4097
1000fab4:	108f5404 	addi	r2,r2,15696
1000fab8:	1885883a 	add	r2,r3,r2
1000fabc:	00000106 	br	1000fac4 <lseek+0x44>
1000fac0:	0005883a 	mov	r2,zero
1000fac4:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
1000fac8:	e0bffe17 	ldw	r2,-8(fp)
1000facc:	10001026 	beq	r2,zero,1000fb10 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fad0:	e0bffe17 	ldw	r2,-8(fp)
1000fad4:	10800017 	ldw	r2,0(r2)
1000fad8:	10800717 	ldw	r2,28(r2)
1000fadc:	10000926 	beq	r2,zero,1000fb04 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fae0:	e0bffe17 	ldw	r2,-8(fp)
1000fae4:	10800017 	ldw	r2,0(r2)
1000fae8:	10800717 	ldw	r2,28(r2)
1000faec:	e1bffb17 	ldw	r6,-20(fp)
1000faf0:	e17ffc17 	ldw	r5,-16(fp)
1000faf4:	e13ffe17 	ldw	r4,-8(fp)
1000faf8:	103ee83a 	callr	r2
1000fafc:	e0bfff15 	stw	r2,-4(fp)
1000fb00:	00000506 	br	1000fb18 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fb04:	00bfde84 	movi	r2,-134
1000fb08:	e0bfff15 	stw	r2,-4(fp)
1000fb0c:	00000206 	br	1000fb18 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fb10:	00bfebc4 	movi	r2,-81
1000fb14:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
1000fb18:	e0bfff17 	ldw	r2,-4(fp)
1000fb1c:	1000070e 	bge	r2,zero,1000fb3c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000fb20:	000fa440 	call	1000fa44 <alt_get_errno>
1000fb24:	1007883a 	mov	r3,r2
1000fb28:	e0bfff17 	ldw	r2,-4(fp)
1000fb2c:	0085c83a 	sub	r2,zero,r2
1000fb30:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fb34:	00bfffc4 	movi	r2,-1
1000fb38:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
1000fb3c:	e0bfff17 	ldw	r2,-4(fp)
}
1000fb40:	e037883a 	mov	sp,fp
1000fb44:	dfc00117 	ldw	ra,4(sp)
1000fb48:	df000017 	ldw	fp,0(sp)
1000fb4c:	dec00204 	addi	sp,sp,8
1000fb50:	f800283a 	ret

1000fb54 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fb54:	defffd04 	addi	sp,sp,-12
1000fb58:	dfc00215 	stw	ra,8(sp)
1000fb5c:	df000115 	stw	fp,4(sp)
1000fb60:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fb64:	0009883a 	mov	r4,zero
1000fb68:	000fff00 	call	1000fff0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fb6c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fb70:	00100280 	call	10010028 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fb74:	01840074 	movhi	r6,4097
1000fb78:	318b4a04 	addi	r6,r6,11560
1000fb7c:	01440074 	movhi	r5,4097
1000fb80:	294b4a04 	addi	r5,r5,11560
1000fb84:	01040074 	movhi	r4,4097
1000fb88:	210b4a04 	addi	r4,r4,11560
1000fb8c:	00113940 	call	10011394 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fb90:	0010f5c0 	call	10010f5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fb94:	01040074 	movhi	r4,4097
1000fb98:	2103ef04 	addi	r4,r4,4028
1000fb9c:	0011b800 	call	10011b80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000fba0:	d0a89c17 	ldw	r2,-23952(gp)
1000fba4:	d0e89d17 	ldw	r3,-23948(gp)
1000fba8:	d1289e17 	ldw	r4,-23944(gp)
1000fbac:	200d883a 	mov	r6,r4
1000fbb0:	180b883a 	mov	r5,r3
1000fbb4:	1009883a 	mov	r4,r2
1000fbb8:	000108c0 	call	1000108c <main>
1000fbbc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fbc0:	01000044 	movi	r4,1
1000fbc4:	000f6900 	call	1000f690 <close>
  exit (result);
1000fbc8:	e13fff17 	ldw	r4,-4(fp)
1000fbcc:	0011b940 	call	10011b94 <exit>

1000fbd0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000fbd0:	defffe04 	addi	sp,sp,-8
1000fbd4:	df000115 	stw	fp,4(sp)
1000fbd8:	df000104 	addi	fp,sp,4
1000fbdc:	e13fff15 	stw	r4,-4(fp)
}
1000fbe0:	0001883a 	nop
1000fbe4:	e037883a 	mov	sp,fp
1000fbe8:	df000017 	ldw	fp,0(sp)
1000fbec:	dec00104 	addi	sp,sp,4
1000fbf0:	f800283a 	ret

1000fbf4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000fbf4:	defffe04 	addi	sp,sp,-8
1000fbf8:	df000115 	stw	fp,4(sp)
1000fbfc:	df000104 	addi	fp,sp,4
1000fc00:	e13fff15 	stw	r4,-4(fp)
}
1000fc04:	0001883a 	nop
1000fc08:	e037883a 	mov	sp,fp
1000fc0c:	df000017 	ldw	fp,0(sp)
1000fc10:	dec00104 	addi	sp,sp,4
1000fc14:	f800283a 	ret

1000fc18 <alt_get_errno>:
{
1000fc18:	defffe04 	addi	sp,sp,-8
1000fc1c:	dfc00115 	stw	ra,4(sp)
1000fc20:	df000015 	stw	fp,0(sp)
1000fc24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fc28:	d0a00a17 	ldw	r2,-32728(gp)
1000fc2c:	10000326 	beq	r2,zero,1000fc3c <alt_get_errno+0x24>
1000fc30:	d0a00a17 	ldw	r2,-32728(gp)
1000fc34:	103ee83a 	callr	r2
1000fc38:	00000106 	br	1000fc40 <alt_get_errno+0x28>
1000fc3c:	d0a89a04 	addi	r2,gp,-23960
}
1000fc40:	e037883a 	mov	sp,fp
1000fc44:	dfc00117 	ldw	ra,4(sp)
1000fc48:	df000017 	ldw	fp,0(sp)
1000fc4c:	dec00204 	addi	sp,sp,8
1000fc50:	f800283a 	ret

1000fc54 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fc54:	defff904 	addi	sp,sp,-28
1000fc58:	dfc00615 	stw	ra,24(sp)
1000fc5c:	df000515 	stw	fp,20(sp)
1000fc60:	df000504 	addi	fp,sp,20
1000fc64:	e13ffd15 	stw	r4,-12(fp)
1000fc68:	e17ffc15 	stw	r5,-16(fp)
1000fc6c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fc70:	e0bffd17 	ldw	r2,-12(fp)
1000fc74:	10000616 	blt	r2,zero,1000fc90 <read+0x3c>
1000fc78:	e0bffd17 	ldw	r2,-12(fp)
1000fc7c:	10c00324 	muli	r3,r2,12
1000fc80:	00840074 	movhi	r2,4097
1000fc84:	108f5404 	addi	r2,r2,15696
1000fc88:	1885883a 	add	r2,r3,r2
1000fc8c:	00000106 	br	1000fc94 <read+0x40>
1000fc90:	0005883a 	mov	r2,zero
1000fc94:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000fc98:	e0bfff17 	ldw	r2,-4(fp)
1000fc9c:	10002226 	beq	r2,zero,1000fd28 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fca0:	e0bfff17 	ldw	r2,-4(fp)
1000fca4:	10800217 	ldw	r2,8(r2)
1000fca8:	108000cc 	andi	r2,r2,3
1000fcac:	10800060 	cmpeqi	r2,r2,1
1000fcb0:	1000181e 	bne	r2,zero,1000fd14 <read+0xc0>
        (fd->dev->read))
1000fcb4:	e0bfff17 	ldw	r2,-4(fp)
1000fcb8:	10800017 	ldw	r2,0(r2)
1000fcbc:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fcc0:	10001426 	beq	r2,zero,1000fd14 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fcc4:	e0bfff17 	ldw	r2,-4(fp)
1000fcc8:	10800017 	ldw	r2,0(r2)
1000fccc:	10800517 	ldw	r2,20(r2)
1000fcd0:	e0fffb17 	ldw	r3,-20(fp)
1000fcd4:	180d883a 	mov	r6,r3
1000fcd8:	e17ffc17 	ldw	r5,-16(fp)
1000fcdc:	e13fff17 	ldw	r4,-4(fp)
1000fce0:	103ee83a 	callr	r2
1000fce4:	e0bffe15 	stw	r2,-8(fp)
1000fce8:	e0bffe17 	ldw	r2,-8(fp)
1000fcec:	1000070e 	bge	r2,zero,1000fd0c <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000fcf0:	000fc180 	call	1000fc18 <alt_get_errno>
1000fcf4:	1007883a 	mov	r3,r2
1000fcf8:	e0bffe17 	ldw	r2,-8(fp)
1000fcfc:	0085c83a 	sub	r2,zero,r2
1000fd00:	18800015 	stw	r2,0(r3)
          return -1;
1000fd04:	00bfffc4 	movi	r2,-1
1000fd08:	00000c06 	br	1000fd3c <read+0xe8>
        }
        return rval;
1000fd0c:	e0bffe17 	ldw	r2,-8(fp)
1000fd10:	00000a06 	br	1000fd3c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fd14:	000fc180 	call	1000fc18 <alt_get_errno>
1000fd18:	1007883a 	mov	r3,r2
1000fd1c:	00800344 	movi	r2,13
1000fd20:	18800015 	stw	r2,0(r3)
1000fd24:	00000406 	br	1000fd38 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fd28:	000fc180 	call	1000fc18 <alt_get_errno>
1000fd2c:	1007883a 	mov	r3,r2
1000fd30:	00801444 	movi	r2,81
1000fd34:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fd38:	00bfffc4 	movi	r2,-1
}
1000fd3c:	e037883a 	mov	sp,fp
1000fd40:	dfc00117 	ldw	ra,4(sp)
1000fd44:	df000017 	ldw	fp,0(sp)
1000fd48:	dec00204 	addi	sp,sp,8
1000fd4c:	f800283a 	ret

1000fd50 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fd50:	defffe04 	addi	sp,sp,-8
1000fd54:	df000115 	stw	fp,4(sp)
1000fd58:	df000104 	addi	fp,sp,4
1000fd5c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000fd60:	e0bfff17 	ldw	r2,-4(fp)
1000fd64:	108000d0 	cmplti	r2,r2,3
1000fd68:	10000a1e 	bne	r2,zero,1000fd94 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fd6c:	e0bfff17 	ldw	r2,-4(fp)
1000fd70:	10c00324 	muli	r3,r2,12
1000fd74:	00840074 	movhi	r2,4097
1000fd78:	1885883a 	add	r2,r3,r2
1000fd7c:	100f5615 	stw	zero,15704(r2)
    alt_fd_list[fd].dev      = 0;
1000fd80:	e0bfff17 	ldw	r2,-4(fp)
1000fd84:	10c00324 	muli	r3,r2,12
1000fd88:	00840074 	movhi	r2,4097
1000fd8c:	1885883a 	add	r2,r3,r2
1000fd90:	100f5415 	stw	zero,15696(r2)
  }
}
1000fd94:	0001883a 	nop
1000fd98:	e037883a 	mov	sp,fp
1000fd9c:	df000017 	ldw	fp,0(sp)
1000fda0:	dec00104 	addi	sp,sp,4
1000fda4:	f800283a 	ret

1000fda8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fda8:	defff904 	addi	sp,sp,-28
1000fdac:	df000615 	stw	fp,24(sp)
1000fdb0:	df000604 	addi	fp,sp,24
1000fdb4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
1000fdb8:	0005303a 	rdctl	r2,status
1000fdbc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fdc0:	e0fffd17 	ldw	r3,-12(fp)
1000fdc4:	00bfff84 	movi	r2,-2
1000fdc8:	1884703a 	and	r2,r3,r2
1000fdcc:	1001703a 	wrctl	status,r2
  return context;
1000fdd0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000fdd4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000fdd8:	d0a00b17 	ldw	r2,-32724(gp)
1000fddc:	10c000c4 	addi	r3,r2,3
1000fde0:	00bfff04 	movi	r2,-4
1000fde4:	1884703a 	and	r2,r3,r2
1000fde8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fdec:	d0e00b17 	ldw	r3,-32724(gp)
1000fdf0:	e0bffa17 	ldw	r2,-24(fp)
1000fdf4:	1887883a 	add	r3,r3,r2
1000fdf8:	00860034 	movhi	r2,6144
1000fdfc:	10800004 	addi	r2,r2,0
1000fe00:	10c0062e 	bgeu	r2,r3,1000fe1c <sbrk+0x74>
1000fe04:	e0bfff17 	ldw	r2,-4(fp)
1000fe08:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
1000fe0c:	e0bffc17 	ldw	r2,-16(fp)
1000fe10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fe14:	00bfffc4 	movi	r2,-1
1000fe18:	00000b06 	br	1000fe48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000fe1c:	d0a00b17 	ldw	r2,-32724(gp)
1000fe20:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
1000fe24:	d0e00b17 	ldw	r3,-32724(gp)
1000fe28:	e0bffa17 	ldw	r2,-24(fp)
1000fe2c:	1885883a 	add	r2,r3,r2
1000fe30:	d0a00b15 	stw	r2,-32724(gp)
1000fe34:	e0bfff17 	ldw	r2,-4(fp)
1000fe38:	e0bffb15 	stw	r2,-20(fp)
1000fe3c:	e0bffb17 	ldw	r2,-20(fp)
1000fe40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fe44:	e0bffe17 	ldw	r2,-8(fp)
} 
1000fe48:	e037883a 	mov	sp,fp
1000fe4c:	df000017 	ldw	fp,0(sp)
1000fe50:	dec00104 	addi	sp,sp,4
1000fe54:	f800283a 	ret

1000fe58 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000fe58:	defffd04 	addi	sp,sp,-12
1000fe5c:	dfc00215 	stw	ra,8(sp)
1000fe60:	df000115 	stw	fp,4(sp)
1000fe64:	df000104 	addi	fp,sp,4
1000fe68:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000fe6c:	e13fff17 	ldw	r4,-4(fp)
1000fe70:	0010d0c0 	call	10010d0c <alt_busy_sleep>
}
1000fe74:	e037883a 	mov	sp,fp
1000fe78:	dfc00117 	ldw	ra,4(sp)
1000fe7c:	df000017 	ldw	fp,0(sp)
1000fe80:	dec00204 	addi	sp,sp,8
1000fe84:	f800283a 	ret

1000fe88 <alt_get_errno>:
{
1000fe88:	defffe04 	addi	sp,sp,-8
1000fe8c:	dfc00115 	stw	ra,4(sp)
1000fe90:	df000015 	stw	fp,0(sp)
1000fe94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fe98:	d0a00a17 	ldw	r2,-32728(gp)
1000fe9c:	10000326 	beq	r2,zero,1000feac <alt_get_errno+0x24>
1000fea0:	d0a00a17 	ldw	r2,-32728(gp)
1000fea4:	103ee83a 	callr	r2
1000fea8:	00000106 	br	1000feb0 <alt_get_errno+0x28>
1000feac:	d0a89a04 	addi	r2,gp,-23960
}
1000feb0:	e037883a 	mov	sp,fp
1000feb4:	dfc00117 	ldw	ra,4(sp)
1000feb8:	df000017 	ldw	fp,0(sp)
1000febc:	dec00204 	addi	sp,sp,8
1000fec0:	f800283a 	ret

1000fec4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fec4:	defff904 	addi	sp,sp,-28
1000fec8:	dfc00615 	stw	ra,24(sp)
1000fecc:	df000515 	stw	fp,20(sp)
1000fed0:	df000504 	addi	fp,sp,20
1000fed4:	e13ffd15 	stw	r4,-12(fp)
1000fed8:	e17ffc15 	stw	r5,-16(fp)
1000fedc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fee0:	e0bffd17 	ldw	r2,-12(fp)
1000fee4:	10000616 	blt	r2,zero,1000ff00 <write+0x3c>
1000fee8:	e0bffd17 	ldw	r2,-12(fp)
1000feec:	10c00324 	muli	r3,r2,12
1000fef0:	00840074 	movhi	r2,4097
1000fef4:	108f5404 	addi	r2,r2,15696
1000fef8:	1885883a 	add	r2,r3,r2
1000fefc:	00000106 	br	1000ff04 <write+0x40>
1000ff00:	0005883a 	mov	r2,zero
1000ff04:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000ff08:	e0bfff17 	ldw	r2,-4(fp)
1000ff0c:	10002126 	beq	r2,zero,1000ff94 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000ff10:	e0bfff17 	ldw	r2,-4(fp)
1000ff14:	10800217 	ldw	r2,8(r2)
1000ff18:	108000cc 	andi	r2,r2,3
1000ff1c:	10001826 	beq	r2,zero,1000ff80 <write+0xbc>
1000ff20:	e0bfff17 	ldw	r2,-4(fp)
1000ff24:	10800017 	ldw	r2,0(r2)
1000ff28:	10800617 	ldw	r2,24(r2)
1000ff2c:	10001426 	beq	r2,zero,1000ff80 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000ff30:	e0bfff17 	ldw	r2,-4(fp)
1000ff34:	10800017 	ldw	r2,0(r2)
1000ff38:	10800617 	ldw	r2,24(r2)
1000ff3c:	e0fffb17 	ldw	r3,-20(fp)
1000ff40:	180d883a 	mov	r6,r3
1000ff44:	e17ffc17 	ldw	r5,-16(fp)
1000ff48:	e13fff17 	ldw	r4,-4(fp)
1000ff4c:	103ee83a 	callr	r2
1000ff50:	e0bffe15 	stw	r2,-8(fp)
1000ff54:	e0bffe17 	ldw	r2,-8(fp)
1000ff58:	1000070e 	bge	r2,zero,1000ff78 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000ff5c:	000fe880 	call	1000fe88 <alt_get_errno>
1000ff60:	1007883a 	mov	r3,r2
1000ff64:	e0bffe17 	ldw	r2,-8(fp)
1000ff68:	0085c83a 	sub	r2,zero,r2
1000ff6c:	18800015 	stw	r2,0(r3)
        return -1;
1000ff70:	00bfffc4 	movi	r2,-1
1000ff74:	00000c06 	br	1000ffa8 <write+0xe4>
      }
      return rval;
1000ff78:	e0bffe17 	ldw	r2,-8(fp)
1000ff7c:	00000a06 	br	1000ffa8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000ff80:	000fe880 	call	1000fe88 <alt_get_errno>
1000ff84:	1007883a 	mov	r3,r2
1000ff88:	00800344 	movi	r2,13
1000ff8c:	18800015 	stw	r2,0(r3)
1000ff90:	00000406 	br	1000ffa4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000ff94:	000fe880 	call	1000fe88 <alt_get_errno>
1000ff98:	1007883a 	mov	r3,r2
1000ff9c:	00801444 	movi	r2,81
1000ffa0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000ffa4:	00bfffc4 	movi	r2,-1
}
1000ffa8:	e037883a 	mov	sp,fp
1000ffac:	dfc00117 	ldw	ra,4(sp)
1000ffb0:	df000017 	ldw	fp,0(sp)
1000ffb4:	dec00204 	addi	sp,sp,8
1000ffb8:	f800283a 	ret

1000ffbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000ffbc:	defffd04 	addi	sp,sp,-12
1000ffc0:	dfc00215 	stw	ra,8(sp)
1000ffc4:	df000115 	stw	fp,4(sp)
1000ffc8:	df000104 	addi	fp,sp,4
1000ffcc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000ffd0:	d1600704 	addi	r5,gp,-32740
1000ffd4:	e13fff17 	ldw	r4,-4(fp)
1000ffd8:	0010eb80 	call	10010eb8 <alt_dev_llist_insert>
}
1000ffdc:	e037883a 	mov	sp,fp
1000ffe0:	dfc00117 	ldw	ra,4(sp)
1000ffe4:	df000017 	ldw	fp,0(sp)
1000ffe8:	dec00204 	addi	sp,sp,8
1000ffec:	f800283a 	ret

1000fff0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fff0:	defffd04 	addi	sp,sp,-12
1000fff4:	dfc00215 	stw	ra,8(sp)
1000fff8:	df000115 	stw	fp,4(sp)
1000fffc:	df000104 	addi	fp,sp,4
10010000:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010004:	00117fc0 	call	100117fc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010008:	00800044 	movi	r2,1
1001000c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010010:	0001883a 	nop
10010014:	e037883a 	mov	sp,fp
10010018:	dfc00117 	ldw	ra,4(sp)
1001001c:	df000017 	ldw	fp,0(sp)
10010020:	dec00204 	addi	sp,sp,8
10010024:	f800283a 	ret

10010028 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010028:	defffe04 	addi	sp,sp,-8
1001002c:	dfc00115 	stw	ra,4(sp)
10010030:	df000015 	stw	fp,0(sp)
10010034:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
10010038:	01c0fa04 	movi	r7,1000
1001003c:	01800044 	movi	r6,1
10010040:	000b883a 	mov	r5,zero
10010044:	01000804 	movi	r4,32
10010048:	0010b640 	call	10010b64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1001004c:	01800144 	movi	r6,5
10010050:	000b883a 	mov	r5,zero
10010054:	01040074 	movhi	r4,4097
10010058:	210fbe04 	addi	r4,r4,16120
1001005c:	00101ec0 	call	100101ec <altera_avalon_jtag_uart_init>
10010060:	01040074 	movhi	r4,4097
10010064:	210fb404 	addi	r4,r4,16080
10010068:	000ffbc0 	call	1000ffbc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1001006c:	0001883a 	nop
}
10010070:	0001883a 	nop
10010074:	e037883a 	mov	sp,fp
10010078:	dfc00117 	ldw	ra,4(sp)
1001007c:	df000017 	ldw	fp,0(sp)
10010080:	dec00204 	addi	sp,sp,8
10010084:	f800283a 	ret

10010088 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010088:	defffa04 	addi	sp,sp,-24
1001008c:	dfc00515 	stw	ra,20(sp)
10010090:	df000415 	stw	fp,16(sp)
10010094:	df000404 	addi	fp,sp,16
10010098:	e13ffe15 	stw	r4,-8(fp)
1001009c:	e17ffd15 	stw	r5,-12(fp)
100100a0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100100a4:	e0bffe17 	ldw	r2,-8(fp)
100100a8:	10800017 	ldw	r2,0(r2)
100100ac:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100100b0:	e0bfff17 	ldw	r2,-4(fp)
100100b4:	10c00a04 	addi	r3,r2,40
100100b8:	e0bffe17 	ldw	r2,-8(fp)
100100bc:	10800217 	ldw	r2,8(r2)
100100c0:	100f883a 	mov	r7,r2
100100c4:	e1bffc17 	ldw	r6,-16(fp)
100100c8:	e17ffd17 	ldw	r5,-12(fp)
100100cc:	1809883a 	mov	r4,r3
100100d0:	00106ac0 	call	100106ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100100d4:	e037883a 	mov	sp,fp
100100d8:	dfc00117 	ldw	ra,4(sp)
100100dc:	df000017 	ldw	fp,0(sp)
100100e0:	dec00204 	addi	sp,sp,8
100100e4:	f800283a 	ret

100100e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100100e8:	defffa04 	addi	sp,sp,-24
100100ec:	dfc00515 	stw	ra,20(sp)
100100f0:	df000415 	stw	fp,16(sp)
100100f4:	df000404 	addi	fp,sp,16
100100f8:	e13ffe15 	stw	r4,-8(fp)
100100fc:	e17ffd15 	stw	r5,-12(fp)
10010100:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010104:	e0bffe17 	ldw	r2,-8(fp)
10010108:	10800017 	ldw	r2,0(r2)
1001010c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010110:	e0bfff17 	ldw	r2,-4(fp)
10010114:	10c00a04 	addi	r3,r2,40
10010118:	e0bffe17 	ldw	r2,-8(fp)
1001011c:	10800217 	ldw	r2,8(r2)
10010120:	100f883a 	mov	r7,r2
10010124:	e1bffc17 	ldw	r6,-16(fp)
10010128:	e17ffd17 	ldw	r5,-12(fp)
1001012c:	1809883a 	mov	r4,r3
10010130:	00108c80 	call	100108c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010134:	e037883a 	mov	sp,fp
10010138:	dfc00117 	ldw	ra,4(sp)
1001013c:	df000017 	ldw	fp,0(sp)
10010140:	dec00204 	addi	sp,sp,8
10010144:	f800283a 	ret

10010148 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010148:	defffc04 	addi	sp,sp,-16
1001014c:	dfc00315 	stw	ra,12(sp)
10010150:	df000215 	stw	fp,8(sp)
10010154:	df000204 	addi	fp,sp,8
10010158:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001015c:	e0bffe17 	ldw	r2,-8(fp)
10010160:	10800017 	ldw	r2,0(r2)
10010164:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010168:	e0bfff17 	ldw	r2,-4(fp)
1001016c:	10c00a04 	addi	r3,r2,40
10010170:	e0bffe17 	ldw	r2,-8(fp)
10010174:	10800217 	ldw	r2,8(r2)
10010178:	100b883a 	mov	r5,r2
1001017c:	1809883a 	mov	r4,r3
10010180:	00105500 	call	10010550 <altera_avalon_jtag_uart_close>
}
10010184:	e037883a 	mov	sp,fp
10010188:	dfc00117 	ldw	ra,4(sp)
1001018c:	df000017 	ldw	fp,0(sp)
10010190:	dec00204 	addi	sp,sp,8
10010194:	f800283a 	ret

10010198 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010198:	defffa04 	addi	sp,sp,-24
1001019c:	dfc00515 	stw	ra,20(sp)
100101a0:	df000415 	stw	fp,16(sp)
100101a4:	df000404 	addi	fp,sp,16
100101a8:	e13ffe15 	stw	r4,-8(fp)
100101ac:	e17ffd15 	stw	r5,-12(fp)
100101b0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100101b4:	e0bffe17 	ldw	r2,-8(fp)
100101b8:	10800017 	ldw	r2,0(r2)
100101bc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100101c0:	e0bfff17 	ldw	r2,-4(fp)
100101c4:	10800a04 	addi	r2,r2,40
100101c8:	e1bffc17 	ldw	r6,-16(fp)
100101cc:	e17ffd17 	ldw	r5,-12(fp)
100101d0:	1009883a 	mov	r4,r2
100101d4:	00105b80 	call	100105b8 <altera_avalon_jtag_uart_ioctl>
}
100101d8:	e037883a 	mov	sp,fp
100101dc:	dfc00117 	ldw	ra,4(sp)
100101e0:	df000017 	ldw	fp,0(sp)
100101e4:	dec00204 	addi	sp,sp,8
100101e8:	f800283a 	ret

100101ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100101ec:	defffa04 	addi	sp,sp,-24
100101f0:	dfc00515 	stw	ra,20(sp)
100101f4:	df000415 	stw	fp,16(sp)
100101f8:	df000404 	addi	fp,sp,16
100101fc:	e13fff15 	stw	r4,-4(fp)
10010200:	e17ffe15 	stw	r5,-8(fp)
10010204:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010208:	e0bfff17 	ldw	r2,-4(fp)
1001020c:	00c00044 	movi	r3,1
10010210:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010214:	e0bfff17 	ldw	r2,-4(fp)
10010218:	10800017 	ldw	r2,0(r2)
1001021c:	10800104 	addi	r2,r2,4
10010220:	1007883a 	mov	r3,r2
10010224:	e0bfff17 	ldw	r2,-4(fp)
10010228:	10800817 	ldw	r2,32(r2)
1001022c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010230:	e0bffe17 	ldw	r2,-8(fp)
10010234:	e0fffd17 	ldw	r3,-12(fp)
10010238:	d8000015 	stw	zero,0(sp)
1001023c:	e1ffff17 	ldw	r7,-4(fp)
10010240:	01840074 	movhi	r6,4097
10010244:	3180ab04 	addi	r6,r6,684
10010248:	180b883a 	mov	r5,r3
1001024c:	1009883a 	mov	r4,r2
10010250:	00110500 	call	10011050 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010254:	e0bfff17 	ldw	r2,-4(fp)
10010258:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1001025c:	e0bfff17 	ldw	r2,-4(fp)
10010260:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010264:	d0e8a017 	ldw	r3,-23936(gp)
10010268:	e1ffff17 	ldw	r7,-4(fp)
1001026c:	01840074 	movhi	r6,4097
10010270:	31812c04 	addi	r6,r6,1200
10010274:	180b883a 	mov	r5,r3
10010278:	1009883a 	mov	r4,r2
1001027c:	0010be00 	call	10010be0 <alt_alarm_start>
10010280:	1000040e 	bge	r2,zero,10010294 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010284:	e0ffff17 	ldw	r3,-4(fp)
10010288:	00a00034 	movhi	r2,32768
1001028c:	10bfffc4 	addi	r2,r2,-1
10010290:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010294:	0001883a 	nop
10010298:	e037883a 	mov	sp,fp
1001029c:	dfc00117 	ldw	ra,4(sp)
100102a0:	df000017 	ldw	fp,0(sp)
100102a4:	dec00204 	addi	sp,sp,8
100102a8:	f800283a 	ret

100102ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100102ac:	defff804 	addi	sp,sp,-32
100102b0:	df000715 	stw	fp,28(sp)
100102b4:	df000704 	addi	fp,sp,28
100102b8:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100102bc:	e0bff917 	ldw	r2,-28(fp)
100102c0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
100102c4:	e0bffd17 	ldw	r2,-12(fp)
100102c8:	10800017 	ldw	r2,0(r2)
100102cc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100102d0:	e0bffc17 	ldw	r2,-16(fp)
100102d4:	10800104 	addi	r2,r2,4
100102d8:	10800037 	ldwio	r2,0(r2)
100102dc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100102e0:	e0bffb17 	ldw	r2,-20(fp)
100102e4:	1080c00c 	andi	r2,r2,768
100102e8:	10006b26 	beq	r2,zero,10010498 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100102ec:	e0bffb17 	ldw	r2,-20(fp)
100102f0:	1080400c 	andi	r2,r2,256
100102f4:	10003426 	beq	r2,zero,100103c8 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100102f8:	00800074 	movhi	r2,1
100102fc:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010300:	e0bffd17 	ldw	r2,-12(fp)
10010304:	10800a17 	ldw	r2,40(r2)
10010308:	10800044 	addi	r2,r2,1
1001030c:	1081ffcc 	andi	r2,r2,2047
10010310:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
10010314:	e0bffd17 	ldw	r2,-12(fp)
10010318:	10800b17 	ldw	r2,44(r2)
1001031c:	e0fffa17 	ldw	r3,-24(fp)
10010320:	18801426 	beq	r3,r2,10010374 <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010324:	e0bffc17 	ldw	r2,-16(fp)
10010328:	10800037 	ldwio	r2,0(r2)
1001032c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010330:	e0bfff17 	ldw	r2,-4(fp)
10010334:	10a0000c 	andi	r2,r2,32768
10010338:	10001026 	beq	r2,zero,1001037c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1001033c:	e0bffd17 	ldw	r2,-12(fp)
10010340:	10800a17 	ldw	r2,40(r2)
10010344:	e0ffff17 	ldw	r3,-4(fp)
10010348:	1809883a 	mov	r4,r3
1001034c:	e0fffd17 	ldw	r3,-12(fp)
10010350:	1885883a 	add	r2,r3,r2
10010354:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010358:	e0bffd17 	ldw	r2,-12(fp)
1001035c:	10800a17 	ldw	r2,40(r2)
10010360:	10800044 	addi	r2,r2,1
10010364:	10c1ffcc 	andi	r3,r2,2047
10010368:	e0bffd17 	ldw	r2,-12(fp)
1001036c:	10c00a15 	stw	r3,40(r2)
      {
10010370:	003fe306 	br	10010300 <altera_avalon_jtag_uart_irq+0x54>
          break;
10010374:	0001883a 	nop
10010378:	00000106 	br	10010380 <altera_avalon_jtag_uart_irq+0xd4>
          break;
1001037c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010380:	e0bfff17 	ldw	r2,-4(fp)
10010384:	10bfffec 	andhi	r2,r2,65535
10010388:	10000f26 	beq	r2,zero,100103c8 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001038c:	e0bffd17 	ldw	r2,-12(fp)
10010390:	10c00817 	ldw	r3,32(r2)
10010394:	00bfff84 	movi	r2,-2
10010398:	1886703a 	and	r3,r3,r2
1001039c:	e0bffd17 	ldw	r2,-12(fp)
100103a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100103a4:	e0bffc17 	ldw	r2,-16(fp)
100103a8:	10800104 	addi	r2,r2,4
100103ac:	1007883a 	mov	r3,r2
100103b0:	e0bffd17 	ldw	r2,-12(fp)
100103b4:	10800817 	ldw	r2,32(r2)
100103b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100103bc:	e0bffc17 	ldw	r2,-16(fp)
100103c0:	10800104 	addi	r2,r2,4
100103c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100103c8:	e0bffb17 	ldw	r2,-20(fp)
100103cc:	1080800c 	andi	r2,r2,512
100103d0:	103fbf26 	beq	r2,zero,100102d0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100103d4:	e0bffb17 	ldw	r2,-20(fp)
100103d8:	1004d43a 	srli	r2,r2,16
100103dc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100103e0:	00001306 	br	10010430 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100103e4:	e0bffc17 	ldw	r2,-16(fp)
100103e8:	e0fffd17 	ldw	r3,-12(fp)
100103ec:	18c00d17 	ldw	r3,52(r3)
100103f0:	e13ffd17 	ldw	r4,-12(fp)
100103f4:	20c7883a 	add	r3,r4,r3
100103f8:	18c20e03 	ldbu	r3,2104(r3)
100103fc:	18c03fcc 	andi	r3,r3,255
10010400:	18c0201c 	xori	r3,r3,128
10010404:	18ffe004 	addi	r3,r3,-128
10010408:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001040c:	e0bffd17 	ldw	r2,-12(fp)
10010410:	10800d17 	ldw	r2,52(r2)
10010414:	10800044 	addi	r2,r2,1
10010418:	10c1ffcc 	andi	r3,r2,2047
1001041c:	e0bffd17 	ldw	r2,-12(fp)
10010420:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010424:	e0bffe17 	ldw	r2,-8(fp)
10010428:	10bfffc4 	addi	r2,r2,-1
1001042c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
10010430:	e0bffe17 	ldw	r2,-8(fp)
10010434:	10000526 	beq	r2,zero,1001044c <altera_avalon_jtag_uart_irq+0x1a0>
10010438:	e0bffd17 	ldw	r2,-12(fp)
1001043c:	10c00d17 	ldw	r3,52(r2)
10010440:	e0bffd17 	ldw	r2,-12(fp)
10010444:	10800c17 	ldw	r2,48(r2)
10010448:	18bfe61e 	bne	r3,r2,100103e4 <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
1001044c:	e0bffe17 	ldw	r2,-8(fp)
10010450:	103f9f26 	beq	r2,zero,100102d0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010454:	e0bffd17 	ldw	r2,-12(fp)
10010458:	10c00817 	ldw	r3,32(r2)
1001045c:	00bfff44 	movi	r2,-3
10010460:	1886703a 	and	r3,r3,r2
10010464:	e0bffd17 	ldw	r2,-12(fp)
10010468:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001046c:	e0bffd17 	ldw	r2,-12(fp)
10010470:	10800017 	ldw	r2,0(r2)
10010474:	10800104 	addi	r2,r2,4
10010478:	1007883a 	mov	r3,r2
1001047c:	e0bffd17 	ldw	r2,-12(fp)
10010480:	10800817 	ldw	r2,32(r2)
10010484:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010488:	e0bffc17 	ldw	r2,-16(fp)
1001048c:	10800104 	addi	r2,r2,4
10010490:	10800037 	ldwio	r2,0(r2)
  {
10010494:	003f8e06 	br	100102d0 <altera_avalon_jtag_uart_irq+0x24>
      break;
10010498:	0001883a 	nop
      }
    }
  }
}
1001049c:	0001883a 	nop
100104a0:	e037883a 	mov	sp,fp
100104a4:	df000017 	ldw	fp,0(sp)
100104a8:	dec00104 	addi	sp,sp,4
100104ac:	f800283a 	ret

100104b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100104b0:	defffc04 	addi	sp,sp,-16
100104b4:	df000315 	stw	fp,12(sp)
100104b8:	df000304 	addi	fp,sp,12
100104bc:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100104c0:	e0bffd17 	ldw	r2,-12(fp)
100104c4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100104c8:	e0bfff17 	ldw	r2,-4(fp)
100104cc:	10800017 	ldw	r2,0(r2)
100104d0:	10800104 	addi	r2,r2,4
100104d4:	10800037 	ldwio	r2,0(r2)
100104d8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100104dc:	e0bffe17 	ldw	r2,-8(fp)
100104e0:	1081000c 	andi	r2,r2,1024
100104e4:	10000b26 	beq	r2,zero,10010514 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100104e8:	e0bfff17 	ldw	r2,-4(fp)
100104ec:	10800017 	ldw	r2,0(r2)
100104f0:	10800104 	addi	r2,r2,4
100104f4:	1007883a 	mov	r3,r2
100104f8:	e0bfff17 	ldw	r2,-4(fp)
100104fc:	10800817 	ldw	r2,32(r2)
10010500:	10810014 	ori	r2,r2,1024
10010504:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010508:	e0bfff17 	ldw	r2,-4(fp)
1001050c:	10000915 	stw	zero,36(r2)
10010510:	00000a06 	br	1001053c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010514:	e0bfff17 	ldw	r2,-4(fp)
10010518:	10c00917 	ldw	r3,36(r2)
1001051c:	00a00034 	movhi	r2,32768
10010520:	10bfff04 	addi	r2,r2,-4
10010524:	10c00536 	bltu	r2,r3,1001053c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010528:	e0bfff17 	ldw	r2,-4(fp)
1001052c:	10800917 	ldw	r2,36(r2)
10010530:	10c00044 	addi	r3,r2,1
10010534:	e0bfff17 	ldw	r2,-4(fp)
10010538:	10c00915 	stw	r3,36(r2)
1001053c:	d0a8a017 	ldw	r2,-23936(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010540:	e037883a 	mov	sp,fp
10010544:	df000017 	ldw	fp,0(sp)
10010548:	dec00104 	addi	sp,sp,4
1001054c:	f800283a 	ret

10010550 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010550:	defffd04 	addi	sp,sp,-12
10010554:	df000215 	stw	fp,8(sp)
10010558:	df000204 	addi	fp,sp,8
1001055c:	e13fff15 	stw	r4,-4(fp)
10010560:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010564:	00000506 	br	1001057c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010568:	e0bffe17 	ldw	r2,-8(fp)
1001056c:	1090000c 	andi	r2,r2,16384
10010570:	10000226 	beq	r2,zero,1001057c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010574:	00bffd44 	movi	r2,-11
10010578:	00000b06 	br	100105a8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001057c:	e0bfff17 	ldw	r2,-4(fp)
10010580:	10c00d17 	ldw	r3,52(r2)
10010584:	e0bfff17 	ldw	r2,-4(fp)
10010588:	10800c17 	ldw	r2,48(r2)
1001058c:	18800526 	beq	r3,r2,100105a4 <altera_avalon_jtag_uart_close+0x54>
10010590:	e0bfff17 	ldw	r2,-4(fp)
10010594:	10c00917 	ldw	r3,36(r2)
10010598:	e0bfff17 	ldw	r2,-4(fp)
1001059c:	10800117 	ldw	r2,4(r2)
100105a0:	18bff136 	bltu	r3,r2,10010568 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
100105a4:	0005883a 	mov	r2,zero
}
100105a8:	e037883a 	mov	sp,fp
100105ac:	df000017 	ldw	fp,0(sp)
100105b0:	dec00104 	addi	sp,sp,4
100105b4:	f800283a 	ret

100105b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100105b8:	defffa04 	addi	sp,sp,-24
100105bc:	df000515 	stw	fp,20(sp)
100105c0:	df000504 	addi	fp,sp,20
100105c4:	e13ffd15 	stw	r4,-12(fp)
100105c8:	e17ffc15 	stw	r5,-16(fp)
100105cc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
100105d0:	00bff9c4 	movi	r2,-25
100105d4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
100105d8:	e0bffc17 	ldw	r2,-16(fp)
100105dc:	109a8060 	cmpeqi	r2,r2,27137
100105e0:	1000041e 	bne	r2,zero,100105f4 <altera_avalon_jtag_uart_ioctl+0x3c>
100105e4:	e0bffc17 	ldw	r2,-16(fp)
100105e8:	109a80a0 	cmpeqi	r2,r2,27138
100105ec:	1000181e 	bne	r2,zero,10010650 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100105f0:	00002906 	br	10010698 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
100105f4:	e0bffd17 	ldw	r2,-12(fp)
100105f8:	10c00117 	ldw	r3,4(r2)
100105fc:	00a00034 	movhi	r2,32768
10010600:	10bfffc4 	addi	r2,r2,-1
10010604:	18802126 	beq	r3,r2,1001068c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
10010608:	e0bffb17 	ldw	r2,-20(fp)
1001060c:	10800017 	ldw	r2,0(r2)
10010610:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010614:	e0bffe17 	ldw	r2,-8(fp)
10010618:	10800090 	cmplti	r2,r2,2
1001061c:	1000061e 	bne	r2,zero,10010638 <altera_avalon_jtag_uart_ioctl+0x80>
10010620:	e0fffe17 	ldw	r3,-8(fp)
10010624:	00a00034 	movhi	r2,32768
10010628:	10bfffc4 	addi	r2,r2,-1
1001062c:	18800226 	beq	r3,r2,10010638 <altera_avalon_jtag_uart_ioctl+0x80>
10010630:	e0bffe17 	ldw	r2,-8(fp)
10010634:	00000206 	br	10010640 <altera_avalon_jtag_uart_ioctl+0x88>
10010638:	00a00034 	movhi	r2,32768
1001063c:	10bfff84 	addi	r2,r2,-2
10010640:	e0fffd17 	ldw	r3,-12(fp)
10010644:	18800115 	stw	r2,4(r3)
      rc = 0;
10010648:	e03fff15 	stw	zero,-4(fp)
    break;
1001064c:	00000f06 	br	1001068c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
10010650:	e0bffd17 	ldw	r2,-12(fp)
10010654:	10c00117 	ldw	r3,4(r2)
10010658:	00a00034 	movhi	r2,32768
1001065c:	10bfffc4 	addi	r2,r2,-1
10010660:	18800c26 	beq	r3,r2,10010694 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010664:	e0bffd17 	ldw	r2,-12(fp)
10010668:	10c00917 	ldw	r3,36(r2)
1001066c:	e0bffd17 	ldw	r2,-12(fp)
10010670:	10800117 	ldw	r2,4(r2)
10010674:	1885803a 	cmpltu	r2,r3,r2
10010678:	10c03fcc 	andi	r3,r2,255
1001067c:	e0bffb17 	ldw	r2,-20(fp)
10010680:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010684:	e03fff15 	stw	zero,-4(fp)
    break;
10010688:	00000206 	br	10010694 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
1001068c:	0001883a 	nop
10010690:	00000106 	br	10010698 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
10010694:	0001883a 	nop
  }

  return rc;
10010698:	e0bfff17 	ldw	r2,-4(fp)
}
1001069c:	e037883a 	mov	sp,fp
100106a0:	df000017 	ldw	fp,0(sp)
100106a4:	dec00104 	addi	sp,sp,4
100106a8:	f800283a 	ret

100106ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100106ac:	defff304 	addi	sp,sp,-52
100106b0:	dfc00c15 	stw	ra,48(sp)
100106b4:	df000b15 	stw	fp,44(sp)
100106b8:	df000b04 	addi	fp,sp,44
100106bc:	e13ff815 	stw	r4,-32(fp)
100106c0:	e17ff715 	stw	r5,-36(fp)
100106c4:	e1bff615 	stw	r6,-40(fp)
100106c8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
100106cc:	e0bff717 	ldw	r2,-36(fp)
100106d0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100106d4:	00004706 	br	100107f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100106d8:	e0bff817 	ldw	r2,-32(fp)
100106dc:	10800a17 	ldw	r2,40(r2)
100106e0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
100106e4:	e0bff817 	ldw	r2,-32(fp)
100106e8:	10800b17 	ldw	r2,44(r2)
100106ec:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
100106f0:	e0fffd17 	ldw	r3,-12(fp)
100106f4:	e0bffc17 	ldw	r2,-16(fp)
100106f8:	18800536 	bltu	r3,r2,10010710 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100106fc:	e0fffd17 	ldw	r3,-12(fp)
10010700:	e0bffc17 	ldw	r2,-16(fp)
10010704:	1885c83a 	sub	r2,r3,r2
10010708:	e0bffe15 	stw	r2,-8(fp)
1001070c:	00000406 	br	10010720 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010710:	00c20004 	movi	r3,2048
10010714:	e0bffc17 	ldw	r2,-16(fp)
10010718:	1885c83a 	sub	r2,r3,r2
1001071c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010720:	e0bffe17 	ldw	r2,-8(fp)
10010724:	10001e26 	beq	r2,zero,100107a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010728:	e0fff617 	ldw	r3,-40(fp)
1001072c:	e0bffe17 	ldw	r2,-8(fp)
10010730:	1880022e 	bgeu	r3,r2,1001073c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010734:	e0bff617 	ldw	r2,-40(fp)
10010738:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1001073c:	e0bff817 	ldw	r2,-32(fp)
10010740:	10c00e04 	addi	r3,r2,56
10010744:	e0bffc17 	ldw	r2,-16(fp)
10010748:	1885883a 	add	r2,r3,r2
1001074c:	e1bffe17 	ldw	r6,-8(fp)
10010750:	100b883a 	mov	r5,r2
10010754:	e13fff17 	ldw	r4,-4(fp)
10010758:	0002ffc0 	call	10002ffc <memcpy>
      ptr   += n;
1001075c:	e0ffff17 	ldw	r3,-4(fp)
10010760:	e0bffe17 	ldw	r2,-8(fp)
10010764:	1885883a 	add	r2,r3,r2
10010768:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
1001076c:	e0fff617 	ldw	r3,-40(fp)
10010770:	e0bffe17 	ldw	r2,-8(fp)
10010774:	1885c83a 	sub	r2,r3,r2
10010778:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001077c:	e0fffc17 	ldw	r3,-16(fp)
10010780:	e0bffe17 	ldw	r2,-8(fp)
10010784:	1885883a 	add	r2,r3,r2
10010788:	10c1ffcc 	andi	r3,r2,2047
1001078c:	e0bff817 	ldw	r2,-32(fp)
10010790:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010794:	e0bff617 	ldw	r2,-40(fp)
10010798:	00bfcf16 	blt	zero,r2,100106d8 <altera_avalon_jtag_uart_read+0x2c>
1001079c:	00000106 	br	100107a4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
100107a0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
100107a4:	e0ffff17 	ldw	r3,-4(fp)
100107a8:	e0bff717 	ldw	r2,-36(fp)
100107ac:	1880141e 	bne	r3,r2,10010800 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100107b0:	e0bff517 	ldw	r2,-44(fp)
100107b4:	1090000c 	andi	r2,r2,16384
100107b8:	1000131e 	bne	r2,zero,10010808 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100107bc:	0001883a 	nop
100107c0:	e0bff817 	ldw	r2,-32(fp)
100107c4:	10800a17 	ldw	r2,40(r2)
100107c8:	e0fffd17 	ldw	r3,-12(fp)
100107cc:	1880051e 	bne	r3,r2,100107e4 <altera_avalon_jtag_uart_read+0x138>
100107d0:	e0bff817 	ldw	r2,-32(fp)
100107d4:	10c00917 	ldw	r3,36(r2)
100107d8:	e0bff817 	ldw	r2,-32(fp)
100107dc:	10800117 	ldw	r2,4(r2)
100107e0:	18bff736 	bltu	r3,r2,100107c0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100107e4:	e0bff817 	ldw	r2,-32(fp)
100107e8:	10800a17 	ldw	r2,40(r2)
100107ec:	e0fffd17 	ldw	r3,-12(fp)
100107f0:	18800726 	beq	r3,r2,10010810 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
100107f4:	e0bff617 	ldw	r2,-40(fp)
100107f8:	00bfb716 	blt	zero,r2,100106d8 <altera_avalon_jtag_uart_read+0x2c>
100107fc:	00000506 	br	10010814 <altera_avalon_jtag_uart_read+0x168>
      break;
10010800:	0001883a 	nop
10010804:	00000306 	br	10010814 <altera_avalon_jtag_uart_read+0x168>
      break;
10010808:	0001883a 	nop
1001080c:	00000106 	br	10010814 <altera_avalon_jtag_uart_read+0x168>
      break;
10010810:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010814:	e0ffff17 	ldw	r3,-4(fp)
10010818:	e0bff717 	ldw	r2,-36(fp)
1001081c:	18801826 	beq	r3,r2,10010880 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
10010820:	0005303a 	rdctl	r2,status
10010824:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010828:	e0fff917 	ldw	r3,-28(fp)
1001082c:	00bfff84 	movi	r2,-2
10010830:	1884703a 	and	r2,r3,r2
10010834:	1001703a 	wrctl	status,r2
  return context;
10010838:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001083c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010840:	e0bff817 	ldw	r2,-32(fp)
10010844:	10800817 	ldw	r2,32(r2)
10010848:	10c00054 	ori	r3,r2,1
1001084c:	e0bff817 	ldw	r2,-32(fp)
10010850:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010854:	e0bff817 	ldw	r2,-32(fp)
10010858:	10800017 	ldw	r2,0(r2)
1001085c:	10800104 	addi	r2,r2,4
10010860:	1007883a 	mov	r3,r2
10010864:	e0bff817 	ldw	r2,-32(fp)
10010868:	10800817 	ldw	r2,32(r2)
1001086c:	18800035 	stwio	r2,0(r3)
10010870:	e0bffb17 	ldw	r2,-20(fp)
10010874:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010878:	e0bffa17 	ldw	r2,-24(fp)
1001087c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010880:	e0ffff17 	ldw	r3,-4(fp)
10010884:	e0bff717 	ldw	r2,-36(fp)
10010888:	18800426 	beq	r3,r2,1001089c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1001088c:	e0ffff17 	ldw	r3,-4(fp)
10010890:	e0bff717 	ldw	r2,-36(fp)
10010894:	1885c83a 	sub	r2,r3,r2
10010898:	00000606 	br	100108b4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1001089c:	e0bff517 	ldw	r2,-44(fp)
100108a0:	1090000c 	andi	r2,r2,16384
100108a4:	10000226 	beq	r2,zero,100108b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100108a8:	00bffd44 	movi	r2,-11
100108ac:	00000106 	br	100108b4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100108b0:	00bffec4 	movi	r2,-5
}
100108b4:	e037883a 	mov	sp,fp
100108b8:	dfc00117 	ldw	ra,4(sp)
100108bc:	df000017 	ldw	fp,0(sp)
100108c0:	dec00204 	addi	sp,sp,8
100108c4:	f800283a 	ret

100108c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100108c8:	defff304 	addi	sp,sp,-52
100108cc:	dfc00c15 	stw	ra,48(sp)
100108d0:	df000b15 	stw	fp,44(sp)
100108d4:	df000b04 	addi	fp,sp,44
100108d8:	e13ff815 	stw	r4,-32(fp)
100108dc:	e17ff715 	stw	r5,-36(fp)
100108e0:	e1bff615 	stw	r6,-40(fp)
100108e4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100108e8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100108ec:	e0bff717 	ldw	r2,-36(fp)
100108f0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100108f4:	00003706 	br	100109d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100108f8:	e0bff817 	ldw	r2,-32(fp)
100108fc:	10800c17 	ldw	r2,48(r2)
10010900:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
10010904:	e0bff817 	ldw	r2,-32(fp)
10010908:	10800d17 	ldw	r2,52(r2)
1001090c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
10010910:	e0fffc17 	ldw	r3,-16(fp)
10010914:	e0bfff17 	ldw	r2,-4(fp)
10010918:	1880062e 	bgeu	r3,r2,10010934 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001091c:	e0ffff17 	ldw	r3,-4(fp)
10010920:	e0bffc17 	ldw	r2,-16(fp)
10010924:	1885c83a 	sub	r2,r3,r2
10010928:	10bfffc4 	addi	r2,r2,-1
1001092c:	e0bffe15 	stw	r2,-8(fp)
10010930:	00000b06 	br	10010960 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010934:	e0bfff17 	ldw	r2,-4(fp)
10010938:	10000526 	beq	r2,zero,10010950 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001093c:	00c20004 	movi	r3,2048
10010940:	e0bffc17 	ldw	r2,-16(fp)
10010944:	1885c83a 	sub	r2,r3,r2
10010948:	e0bffe15 	stw	r2,-8(fp)
1001094c:	00000406 	br	10010960 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010950:	00c1ffc4 	movi	r3,2047
10010954:	e0bffc17 	ldw	r2,-16(fp)
10010958:	1885c83a 	sub	r2,r3,r2
1001095c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010960:	e0bffe17 	ldw	r2,-8(fp)
10010964:	10001e26 	beq	r2,zero,100109e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010968:	e0fff617 	ldw	r3,-40(fp)
1001096c:	e0bffe17 	ldw	r2,-8(fp)
10010970:	1880022e 	bgeu	r3,r2,1001097c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010974:	e0bff617 	ldw	r2,-40(fp)
10010978:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1001097c:	e0bff817 	ldw	r2,-32(fp)
10010980:	10c20e04 	addi	r3,r2,2104
10010984:	e0bffc17 	ldw	r2,-16(fp)
10010988:	1885883a 	add	r2,r3,r2
1001098c:	e1bffe17 	ldw	r6,-8(fp)
10010990:	e17ff717 	ldw	r5,-36(fp)
10010994:	1009883a 	mov	r4,r2
10010998:	0002ffc0 	call	10002ffc <memcpy>
      ptr   += n;
1001099c:	e0fff717 	ldw	r3,-36(fp)
100109a0:	e0bffe17 	ldw	r2,-8(fp)
100109a4:	1885883a 	add	r2,r3,r2
100109a8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
100109ac:	e0fff617 	ldw	r3,-40(fp)
100109b0:	e0bffe17 	ldw	r2,-8(fp)
100109b4:	1885c83a 	sub	r2,r3,r2
100109b8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100109bc:	e0fffc17 	ldw	r3,-16(fp)
100109c0:	e0bffe17 	ldw	r2,-8(fp)
100109c4:	1885883a 	add	r2,r3,r2
100109c8:	10c1ffcc 	andi	r3,r2,2047
100109cc:	e0bff817 	ldw	r2,-32(fp)
100109d0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
100109d4:	e0bff617 	ldw	r2,-40(fp)
100109d8:	00bfc716 	blt	zero,r2,100108f8 <altera_avalon_jtag_uart_write+0x30>
100109dc:	00000106 	br	100109e4 <altera_avalon_jtag_uart_write+0x11c>
        break;
100109e0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
100109e4:	0005303a 	rdctl	r2,status
100109e8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100109ec:	e0fff917 	ldw	r3,-28(fp)
100109f0:	00bfff84 	movi	r2,-2
100109f4:	1884703a 	and	r2,r3,r2
100109f8:	1001703a 	wrctl	status,r2
  return context;
100109fc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010a00:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010a04:	e0bff817 	ldw	r2,-32(fp)
10010a08:	10800817 	ldw	r2,32(r2)
10010a0c:	10c00094 	ori	r3,r2,2
10010a10:	e0bff817 	ldw	r2,-32(fp)
10010a14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010a18:	e0bff817 	ldw	r2,-32(fp)
10010a1c:	10800017 	ldw	r2,0(r2)
10010a20:	10800104 	addi	r2,r2,4
10010a24:	1007883a 	mov	r3,r2
10010a28:	e0bff817 	ldw	r2,-32(fp)
10010a2c:	10800817 	ldw	r2,32(r2)
10010a30:	18800035 	stwio	r2,0(r3)
10010a34:	e0bffb17 	ldw	r2,-20(fp)
10010a38:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010a3c:	e0bffa17 	ldw	r2,-24(fp)
10010a40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010a44:	e0bff617 	ldw	r2,-40(fp)
10010a48:	0080100e 	bge	zero,r2,10010a8c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010a4c:	e0bff517 	ldw	r2,-44(fp)
10010a50:	1090000c 	andi	r2,r2,16384
10010a54:	1000101e 	bne	r2,zero,10010a98 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010a58:	0001883a 	nop
10010a5c:	e0bff817 	ldw	r2,-32(fp)
10010a60:	10800d17 	ldw	r2,52(r2)
10010a64:	e0ffff17 	ldw	r3,-4(fp)
10010a68:	1880051e 	bne	r3,r2,10010a80 <altera_avalon_jtag_uart_write+0x1b8>
10010a6c:	e0bff817 	ldw	r2,-32(fp)
10010a70:	10c00917 	ldw	r3,36(r2)
10010a74:	e0bff817 	ldw	r2,-32(fp)
10010a78:	10800117 	ldw	r2,4(r2)
10010a7c:	18bff736 	bltu	r3,r2,10010a5c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010a80:	e0bff817 	ldw	r2,-32(fp)
10010a84:	10800917 	ldw	r2,36(r2)
10010a88:	1000051e 	bne	r2,zero,10010aa0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010a8c:	e0bff617 	ldw	r2,-40(fp)
10010a90:	00bfd016 	blt	zero,r2,100109d4 <altera_avalon_jtag_uart_write+0x10c>
10010a94:	00000306 	br	10010aa4 <altera_avalon_jtag_uart_write+0x1dc>
        break;
10010a98:	0001883a 	nop
10010a9c:	00000106 	br	10010aa4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
10010aa0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010aa4:	e0fff717 	ldw	r3,-36(fp)
10010aa8:	e0bffd17 	ldw	r2,-12(fp)
10010aac:	18800426 	beq	r3,r2,10010ac0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010ab0:	e0fff717 	ldw	r3,-36(fp)
10010ab4:	e0bffd17 	ldw	r2,-12(fp)
10010ab8:	1885c83a 	sub	r2,r3,r2
10010abc:	00000606 	br	10010ad8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010ac0:	e0bff517 	ldw	r2,-44(fp)
10010ac4:	1090000c 	andi	r2,r2,16384
10010ac8:	10000226 	beq	r2,zero,10010ad4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010acc:	00bffd44 	movi	r2,-11
10010ad0:	00000106 	br	10010ad8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010ad4:	00bffec4 	movi	r2,-5
}
10010ad8:	e037883a 	mov	sp,fp
10010adc:	dfc00117 	ldw	ra,4(sp)
10010ae0:	df000017 	ldw	fp,0(sp)
10010ae4:	dec00204 	addi	sp,sp,8
10010ae8:	f800283a 	ret

10010aec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
10010aec:	defffa04 	addi	sp,sp,-24
10010af0:	dfc00515 	stw	ra,20(sp)
10010af4:	df000415 	stw	fp,16(sp)
10010af8:	df000404 	addi	fp,sp,16
10010afc:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10010b00:	0007883a 	mov	r3,zero
10010b04:	e0bffc17 	ldw	r2,-16(fp)
10010b08:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
10010b0c:	e0bffc17 	ldw	r2,-16(fp)
10010b10:	10800104 	addi	r2,r2,4
10010b14:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
10010b18:	0005303a 	rdctl	r2,status
10010b1c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b20:	e0fffd17 	ldw	r3,-12(fp)
10010b24:	00bfff84 	movi	r2,-2
10010b28:	1884703a 	and	r2,r3,r2
10010b2c:	1001703a 	wrctl	status,r2
  return context;
10010b30:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10010b34:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
10010b38:	00116f40 	call	100116f4 <alt_tick>
10010b3c:	e0bfff17 	ldw	r2,-4(fp)
10010b40:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10010b44:	e0bffe17 	ldw	r2,-8(fp)
10010b48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
10010b4c:	0001883a 	nop
10010b50:	e037883a 	mov	sp,fp
10010b54:	dfc00117 	ldw	ra,4(sp)
10010b58:	df000017 	ldw	fp,0(sp)
10010b5c:	dec00204 	addi	sp,sp,8
10010b60:	f800283a 	ret

10010b64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
10010b64:	defff804 	addi	sp,sp,-32
10010b68:	dfc00715 	stw	ra,28(sp)
10010b6c:	df000615 	stw	fp,24(sp)
10010b70:	df000604 	addi	fp,sp,24
10010b74:	e13ffe15 	stw	r4,-8(fp)
10010b78:	e17ffd15 	stw	r5,-12(fp)
10010b7c:	e1bffc15 	stw	r6,-16(fp)
10010b80:	e1fffb15 	stw	r7,-20(fp)
10010b84:	e0bffb17 	ldw	r2,-20(fp)
10010b88:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
10010b8c:	d0a8a017 	ldw	r2,-23936(gp)
10010b90:	1000021e 	bne	r2,zero,10010b9c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
10010b94:	e0bfff17 	ldw	r2,-4(fp)
10010b98:	d0a8a015 	stw	r2,-23936(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
10010b9c:	e0bffe17 	ldw	r2,-8(fp)
10010ba0:	10800104 	addi	r2,r2,4
10010ba4:	00c001c4 	movi	r3,7
10010ba8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10010bac:	d8000015 	stw	zero,0(sp)
10010bb0:	e1fffe17 	ldw	r7,-8(fp)
10010bb4:	01840074 	movhi	r6,4097
10010bb8:	3182bb04 	addi	r6,r6,2796
10010bbc:	e17ffc17 	ldw	r5,-16(fp)
10010bc0:	e13ffd17 	ldw	r4,-12(fp)
10010bc4:	00110500 	call	10011050 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10010bc8:	0001883a 	nop
10010bcc:	e037883a 	mov	sp,fp
10010bd0:	dfc00117 	ldw	ra,4(sp)
10010bd4:	df000017 	ldw	fp,0(sp)
10010bd8:	dec00204 	addi	sp,sp,8
10010bdc:	f800283a 	ret

10010be0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010be0:	defff504 	addi	sp,sp,-44
10010be4:	df000a15 	stw	fp,40(sp)
10010be8:	df000a04 	addi	fp,sp,40
10010bec:	e13ff915 	stw	r4,-28(fp)
10010bf0:	e17ff815 	stw	r5,-32(fp)
10010bf4:	e1bff715 	stw	r6,-36(fp)
10010bf8:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010bfc:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
10010c00:	d0a8a017 	ldw	r2,-23936(gp)
  
  if (alt_ticks_per_second ())
10010c04:	10003c26 	beq	r2,zero,10010cf8 <alt_alarm_start+0x118>
  {
    if (alarm)
10010c08:	e0bff917 	ldw	r2,-28(fp)
10010c0c:	10003826 	beq	r2,zero,10010cf0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010c10:	e0bff917 	ldw	r2,-28(fp)
10010c14:	e0fff717 	ldw	r3,-36(fp)
10010c18:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010c1c:	e0bff917 	ldw	r2,-28(fp)
10010c20:	e0fff617 	ldw	r3,-40(fp)
10010c24:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
10010c28:	0005303a 	rdctl	r2,status
10010c2c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c30:	e0fffd17 	ldw	r3,-12(fp)
10010c34:	00bfff84 	movi	r2,-2
10010c38:	1884703a 	and	r2,r3,r2
10010c3c:	1001703a 	wrctl	status,r2
  return context;
10010c40:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
10010c44:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010c48:	d0a8a117 	ldw	r2,-23932(gp)
      
      current_nticks = alt_nticks();
10010c4c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010c50:	e0fff817 	ldw	r3,-32(fp)
10010c54:	e0bfff17 	ldw	r2,-4(fp)
10010c58:	1885883a 	add	r2,r3,r2
10010c5c:	10c00044 	addi	r3,r2,1
10010c60:	e0bff917 	ldw	r2,-28(fp)
10010c64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010c68:	e0bff917 	ldw	r2,-28(fp)
10010c6c:	10c00217 	ldw	r3,8(r2)
10010c70:	e0bfff17 	ldw	r2,-4(fp)
10010c74:	1880042e 	bgeu	r3,r2,10010c88 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010c78:	e0bff917 	ldw	r2,-28(fp)
10010c7c:	00c00044 	movi	r3,1
10010c80:	10c00405 	stb	r3,16(r2)
10010c84:	00000206 	br	10010c90 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010c88:	e0bff917 	ldw	r2,-28(fp)
10010c8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010c90:	e0bff917 	ldw	r2,-28(fp)
10010c94:	d0e00d04 	addi	r3,gp,-32716
10010c98:	e0fffb15 	stw	r3,-20(fp)
10010c9c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010ca0:	e0bffa17 	ldw	r2,-24(fp)
10010ca4:	e0fffb17 	ldw	r3,-20(fp)
10010ca8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010cac:	e0bffb17 	ldw	r2,-20(fp)
10010cb0:	10c00017 	ldw	r3,0(r2)
10010cb4:	e0bffa17 	ldw	r2,-24(fp)
10010cb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010cbc:	e0bffb17 	ldw	r2,-20(fp)
10010cc0:	10800017 	ldw	r2,0(r2)
10010cc4:	e0fffa17 	ldw	r3,-24(fp)
10010cc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010ccc:	e0bffb17 	ldw	r2,-20(fp)
10010cd0:	e0fffa17 	ldw	r3,-24(fp)
10010cd4:	10c00015 	stw	r3,0(r2)
10010cd8:	e0bffe17 	ldw	r2,-8(fp)
10010cdc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10010ce0:	e0bffc17 	ldw	r2,-16(fp)
10010ce4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010ce8:	0005883a 	mov	r2,zero
10010cec:	00000306 	br	10010cfc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010cf0:	00bffa84 	movi	r2,-22
10010cf4:	00000106 	br	10010cfc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010cf8:	00bfde84 	movi	r2,-134
  }
}
10010cfc:	e037883a 	mov	sp,fp
10010d00:	df000017 	ldw	fp,0(sp)
10010d04:	dec00104 	addi	sp,sp,4
10010d08:	f800283a 	ret

10010d0c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010d0c:	defffb04 	addi	sp,sp,-20
10010d10:	df000415 	stw	fp,16(sp)
10010d14:	df000404 	addi	fp,sp,16
10010d18:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10010d1c:	008000c4 	movi	r2,3
10010d20:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010d24:	e0fffe17 	ldw	r3,-8(fp)
10010d28:	008003f4 	movhi	r2,15
10010d2c:	10909004 	addi	r2,r2,16960
10010d30:	1887383a 	mul	r3,r3,r2
10010d34:	00817db4 	movhi	r2,1526
10010d38:	10b84004 	addi	r2,r2,-7936
10010d3c:	10c7203a 	divu	r3,r2,r3
  big_loops = us / (INT_MAX/
10010d40:	00a00034 	movhi	r2,32768
10010d44:	10bfffc4 	addi	r2,r2,-1
10010d48:	10c5203a 	divu	r2,r2,r3
10010d4c:	e0fffc17 	ldw	r3,-16(fp)
10010d50:	1885203a 	divu	r2,r3,r2
10010d54:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
10010d58:	e0bffd17 	ldw	r2,-12(fp)
10010d5c:	10002526 	beq	r2,zero,10010df4 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
10010d60:	e03fff15 	stw	zero,-4(fp)
10010d64:	00001406 	br	10010db8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010d68:	00a00034 	movhi	r2,32768
10010d6c:	10bfffc4 	addi	r2,r2,-1
10010d70:	10bfffc4 	addi	r2,r2,-1
10010d74:	103ffe1e 	bne	r2,zero,10010d70 <alt_busy_sleep+0x64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010d78:	e0fffe17 	ldw	r3,-8(fp)
10010d7c:	008003f4 	movhi	r2,15
10010d80:	10909004 	addi	r2,r2,16960
10010d84:	1887383a 	mul	r3,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010d88:	00817db4 	movhi	r2,1526
10010d8c:	10b84004 	addi	r2,r2,-7936
10010d90:	10c7203a 	divu	r3,r2,r3
10010d94:	00a00034 	movhi	r2,32768
10010d98:	10bfffc4 	addi	r2,r2,-1
10010d9c:	10c5203a 	divu	r2,r2,r3
10010da0:	e0fffc17 	ldw	r3,-16(fp)
10010da4:	1885c83a 	sub	r2,r3,r2
10010da8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
10010dac:	e0bfff17 	ldw	r2,-4(fp)
10010db0:	10800044 	addi	r2,r2,1
10010db4:	e0bfff15 	stw	r2,-4(fp)
10010db8:	e0ffff17 	ldw	r3,-4(fp)
10010dbc:	e0bffd17 	ldw	r2,-12(fp)
10010dc0:	18bfe916 	blt	r3,r2,10010d68 <alt_busy_sleep+0x5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010dc4:	e0fffe17 	ldw	r3,-8(fp)
10010dc8:	008003f4 	movhi	r2,15
10010dcc:	10909004 	addi	r2,r2,16960
10010dd0:	1887383a 	mul	r3,r3,r2
10010dd4:	00817db4 	movhi	r2,1526
10010dd8:	10b84004 	addi	r2,r2,-7936
10010ddc:	10c7203a 	divu	r3,r2,r3
10010de0:	e0bffc17 	ldw	r2,-16(fp)
10010de4:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10010de8:	10bfffc4 	addi	r2,r2,-1
10010dec:	103ffe1e 	bne	r2,zero,10010de8 <alt_busy_sleep+0xdc>
10010df0:	00000b06 	br	10010e20 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010df4:	e0fffe17 	ldw	r3,-8(fp)
10010df8:	008003f4 	movhi	r2,15
10010dfc:	10909004 	addi	r2,r2,16960
10010e00:	1887383a 	mul	r3,r3,r2
10010e04:	00817db4 	movhi	r2,1526
10010e08:	10b84004 	addi	r2,r2,-7936
10010e0c:	10c7203a 	divu	r3,r2,r3
10010e10:	e0bffc17 	ldw	r2,-16(fp)
10010e14:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10010e18:	10bfffc4 	addi	r2,r2,-1
10010e1c:	00bffe16 	blt	zero,r2,10010e18 <alt_busy_sleep+0x10c>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010e20:	0005883a 	mov	r2,zero
}
10010e24:	e037883a 	mov	sp,fp
10010e28:	df000017 	ldw	fp,0(sp)
10010e2c:	dec00104 	addi	sp,sp,4
10010e30:	f800283a 	ret

10010e34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010e34:	defffe04 	addi	sp,sp,-8
10010e38:	df000115 	stw	fp,4(sp)
10010e3c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10010e40:	e03fff15 	stw	zero,-4(fp)
10010e44:	00000506 	br	10010e5c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10010e48:	e0bfff17 	ldw	r2,-4(fp)
10010e4c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10010e50:	e0bfff17 	ldw	r2,-4(fp)
10010e54:	10800804 	addi	r2,r2,32
10010e58:	e0bfff15 	stw	r2,-4(fp)
10010e5c:	e0bfff17 	ldw	r2,-4(fp)
10010e60:	10820030 	cmpltui	r2,r2,2048
10010e64:	103ff81e 	bne	r2,zero,10010e48 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010e68:	0001883a 	nop
10010e6c:	e037883a 	mov	sp,fp
10010e70:	df000017 	ldw	fp,0(sp)
10010e74:	dec00104 	addi	sp,sp,4
10010e78:	f800283a 	ret

10010e7c <alt_get_errno>:
{
10010e7c:	defffe04 	addi	sp,sp,-8
10010e80:	dfc00115 	stw	ra,4(sp)
10010e84:	df000015 	stw	fp,0(sp)
10010e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010e8c:	d0a00a17 	ldw	r2,-32728(gp)
10010e90:	10000326 	beq	r2,zero,10010ea0 <alt_get_errno+0x24>
10010e94:	d0a00a17 	ldw	r2,-32728(gp)
10010e98:	103ee83a 	callr	r2
10010e9c:	00000106 	br	10010ea4 <alt_get_errno+0x28>
10010ea0:	d0a89a04 	addi	r2,gp,-23960
}
10010ea4:	e037883a 	mov	sp,fp
10010ea8:	dfc00117 	ldw	ra,4(sp)
10010eac:	df000017 	ldw	fp,0(sp)
10010eb0:	dec00204 	addi	sp,sp,8
10010eb4:	f800283a 	ret

10010eb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010eb8:	defffa04 	addi	sp,sp,-24
10010ebc:	dfc00515 	stw	ra,20(sp)
10010ec0:	df000415 	stw	fp,16(sp)
10010ec4:	df000404 	addi	fp,sp,16
10010ec8:	e13ffd15 	stw	r4,-12(fp)
10010ecc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010ed0:	e0bffd17 	ldw	r2,-12(fp)
10010ed4:	10000326 	beq	r2,zero,10010ee4 <alt_dev_llist_insert+0x2c>
10010ed8:	e0bffd17 	ldw	r2,-12(fp)
10010edc:	10800217 	ldw	r2,8(r2)
10010ee0:	1000061e 	bne	r2,zero,10010efc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010ee4:	0010e7c0 	call	10010e7c <alt_get_errno>
10010ee8:	1007883a 	mov	r3,r2
10010eec:	00800584 	movi	r2,22
10010ef0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010ef4:	00bffa84 	movi	r2,-22
10010ef8:	00001306 	br	10010f48 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010efc:	e0bffd17 	ldw	r2,-12(fp)
10010f00:	e0fffc17 	ldw	r3,-16(fp)
10010f04:	e0ffff15 	stw	r3,-4(fp)
10010f08:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
10010f0c:	e0bffe17 	ldw	r2,-8(fp)
10010f10:	e0ffff17 	ldw	r3,-4(fp)
10010f14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010f18:	e0bfff17 	ldw	r2,-4(fp)
10010f1c:	10c00017 	ldw	r3,0(r2)
10010f20:	e0bffe17 	ldw	r2,-8(fp)
10010f24:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
10010f28:	e0bfff17 	ldw	r2,-4(fp)
10010f2c:	10800017 	ldw	r2,0(r2)
10010f30:	e0fffe17 	ldw	r3,-8(fp)
10010f34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010f38:	e0bfff17 	ldw	r2,-4(fp)
10010f3c:	e0fffe17 	ldw	r3,-8(fp)
10010f40:	10c00015 	stw	r3,0(r2)

  return 0;  
10010f44:	0005883a 	mov	r2,zero
}
10010f48:	e037883a 	mov	sp,fp
10010f4c:	dfc00117 	ldw	ra,4(sp)
10010f50:	df000017 	ldw	fp,0(sp)
10010f54:	dec00204 	addi	sp,sp,8
10010f58:	f800283a 	ret

10010f5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010f5c:	defffd04 	addi	sp,sp,-12
10010f60:	dfc00215 	stw	ra,8(sp)
10010f64:	df000115 	stw	fp,4(sp)
10010f68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010f6c:	00840074 	movhi	r2,4097
10010f70:	10878b04 	addi	r2,r2,7724
10010f74:	e0bfff15 	stw	r2,-4(fp)
10010f78:	00000606 	br	10010f94 <_do_ctors+0x38>
        (*ctor) (); 
10010f7c:	e0bfff17 	ldw	r2,-4(fp)
10010f80:	10800017 	ldw	r2,0(r2)
10010f84:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010f88:	e0bfff17 	ldw	r2,-4(fp)
10010f8c:	10bfff04 	addi	r2,r2,-4
10010f90:	e0bfff15 	stw	r2,-4(fp)
10010f94:	e0ffff17 	ldw	r3,-4(fp)
10010f98:	00840074 	movhi	r2,4097
10010f9c:	10878c04 	addi	r2,r2,7728
10010fa0:	18bff62e 	bgeu	r3,r2,10010f7c <_do_ctors+0x20>
}
10010fa4:	0001883a 	nop
10010fa8:	e037883a 	mov	sp,fp
10010fac:	dfc00117 	ldw	ra,4(sp)
10010fb0:	df000017 	ldw	fp,0(sp)
10010fb4:	dec00204 	addi	sp,sp,8
10010fb8:	f800283a 	ret

10010fbc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010fbc:	defffd04 	addi	sp,sp,-12
10010fc0:	dfc00215 	stw	ra,8(sp)
10010fc4:	df000115 	stw	fp,4(sp)
10010fc8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010fcc:	00840074 	movhi	r2,4097
10010fd0:	10878b04 	addi	r2,r2,7724
10010fd4:	e0bfff15 	stw	r2,-4(fp)
10010fd8:	00000606 	br	10010ff4 <_do_dtors+0x38>
        (*dtor) (); 
10010fdc:	e0bfff17 	ldw	r2,-4(fp)
10010fe0:	10800017 	ldw	r2,0(r2)
10010fe4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010fe8:	e0bfff17 	ldw	r2,-4(fp)
10010fec:	10bfff04 	addi	r2,r2,-4
10010ff0:	e0bfff15 	stw	r2,-4(fp)
10010ff4:	e0ffff17 	ldw	r3,-4(fp)
10010ff8:	00840074 	movhi	r2,4097
10010ffc:	10878c04 	addi	r2,r2,7728
10011000:	18bff62e 	bgeu	r3,r2,10010fdc <_do_dtors+0x20>
}
10011004:	0001883a 	nop
10011008:	e037883a 	mov	sp,fp
1001100c:	dfc00117 	ldw	ra,4(sp)
10011010:	df000017 	ldw	fp,0(sp)
10011014:	dec00204 	addi	sp,sp,8
10011018:	f800283a 	ret

1001101c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1001101c:	defffe04 	addi	sp,sp,-8
10011020:	dfc00115 	stw	ra,4(sp)
10011024:	df000015 	stw	fp,0(sp)
10011028:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1001102c:	01440004 	movi	r5,4096
10011030:	0009883a 	mov	r4,zero
10011034:	0011a580 	call	10011a58 <alt_icache_flush>
#endif
}
10011038:	0001883a 	nop
1001103c:	e037883a 	mov	sp,fp
10011040:	dfc00117 	ldw	ra,4(sp)
10011044:	df000017 	ldw	fp,0(sp)
10011048:	dec00204 	addi	sp,sp,8
1001104c:	f800283a 	ret

10011050 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011050:	defff904 	addi	sp,sp,-28
10011054:	dfc00615 	stw	ra,24(sp)
10011058:	df000515 	stw	fp,20(sp)
1001105c:	df000504 	addi	fp,sp,20
10011060:	e13fff15 	stw	r4,-4(fp)
10011064:	e17ffe15 	stw	r5,-8(fp)
10011068:	e1bffd15 	stw	r6,-12(fp)
1001106c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011070:	e0800217 	ldw	r2,8(fp)
10011074:	d8800015 	stw	r2,0(sp)
10011078:	e1fffc17 	ldw	r7,-16(fp)
1001107c:	e1bffd17 	ldw	r6,-12(fp)
10011080:	e17ffe17 	ldw	r5,-8(fp)
10011084:	e13fff17 	ldw	r4,-4(fp)
10011088:	00112000 	call	10011200 <alt_iic_isr_register>
}  
1001108c:	e037883a 	mov	sp,fp
10011090:	dfc00117 	ldw	ra,4(sp)
10011094:	df000017 	ldw	fp,0(sp)
10011098:	dec00204 	addi	sp,sp,8
1001109c:	f800283a 	ret

100110a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100110a0:	defff904 	addi	sp,sp,-28
100110a4:	df000615 	stw	fp,24(sp)
100110a8:	df000604 	addi	fp,sp,24
100110ac:	e13ffb15 	stw	r4,-20(fp)
100110b0:	e17ffa15 	stw	r5,-24(fp)
100110b4:	e0bffa17 	ldw	r2,-24(fp)
100110b8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
100110bc:	0005303a 	rdctl	r2,status
100110c0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100110c4:	e0fffe17 	ldw	r3,-8(fp)
100110c8:	00bfff84 	movi	r2,-2
100110cc:	1884703a 	and	r2,r3,r2
100110d0:	1001703a 	wrctl	status,r2
  return context;
100110d4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100110d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
100110dc:	00c00044 	movi	r3,1
100110e0:	e0bfff17 	ldw	r2,-4(fp)
100110e4:	1884983a 	sll	r2,r3,r2
100110e8:	1007883a 	mov	r3,r2
100110ec:	d0a89f17 	ldw	r2,-23940(gp)
100110f0:	1884b03a 	or	r2,r3,r2
100110f4:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100110f8:	d0a89f17 	ldw	r2,-23940(gp)
100110fc:	100170fa 	wrctl	ienable,r2
10011100:	e0bffd17 	ldw	r2,-12(fp)
10011104:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011108:	e0bffc17 	ldw	r2,-16(fp)
1001110c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011110:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011114:	0001883a 	nop
}
10011118:	e037883a 	mov	sp,fp
1001111c:	df000017 	ldw	fp,0(sp)
10011120:	dec00104 	addi	sp,sp,4
10011124:	f800283a 	ret

10011128 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011128:	defff904 	addi	sp,sp,-28
1001112c:	df000615 	stw	fp,24(sp)
10011130:	df000604 	addi	fp,sp,24
10011134:	e13ffb15 	stw	r4,-20(fp)
10011138:	e17ffa15 	stw	r5,-24(fp)
1001113c:	e0bffa17 	ldw	r2,-24(fp)
10011140:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
10011144:	0005303a 	rdctl	r2,status
10011148:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001114c:	e0fffe17 	ldw	r3,-8(fp)
10011150:	00bfff84 	movi	r2,-2
10011154:	1884703a 	and	r2,r3,r2
10011158:	1001703a 	wrctl	status,r2
  return context;
1001115c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
10011160:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
10011164:	00c00044 	movi	r3,1
10011168:	e0bfff17 	ldw	r2,-4(fp)
1001116c:	1884983a 	sll	r2,r3,r2
10011170:	0084303a 	nor	r2,zero,r2
10011174:	1007883a 	mov	r3,r2
10011178:	d0a89f17 	ldw	r2,-23940(gp)
1001117c:	1884703a 	and	r2,r3,r2
10011180:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011184:	d0a89f17 	ldw	r2,-23940(gp)
10011188:	100170fa 	wrctl	ienable,r2
1001118c:	e0bffd17 	ldw	r2,-12(fp)
10011190:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011194:	e0bffc17 	ldw	r2,-16(fp)
10011198:	1001703a 	wrctl	status,r2
  return 0;
1001119c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100111a0:	0001883a 	nop
}
100111a4:	e037883a 	mov	sp,fp
100111a8:	df000017 	ldw	fp,0(sp)
100111ac:	dec00104 	addi	sp,sp,4
100111b0:	f800283a 	ret

100111b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100111b4:	defffc04 	addi	sp,sp,-16
100111b8:	df000315 	stw	fp,12(sp)
100111bc:	df000304 	addi	fp,sp,12
100111c0:	e13ffe15 	stw	r4,-8(fp)
100111c4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100111c8:	000530fa 	rdctl	r2,ienable
100111cc:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100111d0:	00c00044 	movi	r3,1
100111d4:	e0bffd17 	ldw	r2,-12(fp)
100111d8:	1884983a 	sll	r2,r3,r2
100111dc:	1007883a 	mov	r3,r2
100111e0:	e0bfff17 	ldw	r2,-4(fp)
100111e4:	1884703a 	and	r2,r3,r2
100111e8:	1004c03a 	cmpne	r2,r2,zero
100111ec:	10803fcc 	andi	r2,r2,255
}
100111f0:	e037883a 	mov	sp,fp
100111f4:	df000017 	ldw	fp,0(sp)
100111f8:	dec00104 	addi	sp,sp,4
100111fc:	f800283a 	ret

10011200 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011200:	defff504 	addi	sp,sp,-44
10011204:	dfc00a15 	stw	ra,40(sp)
10011208:	df000915 	stw	fp,36(sp)
1001120c:	df000904 	addi	fp,sp,36
10011210:	e13ffa15 	stw	r4,-24(fp)
10011214:	e17ff915 	stw	r5,-28(fp)
10011218:	e1bff815 	stw	r6,-32(fp)
1001121c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
10011220:	00bffa84 	movi	r2,-22
10011224:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011228:	e0bff917 	ldw	r2,-28(fp)
1001122c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011230:	e0bffe17 	ldw	r2,-8(fp)
10011234:	10800808 	cmpgei	r2,r2,32
10011238:	1000241e 	bne	r2,zero,100112cc <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
1001123c:	0005303a 	rdctl	r2,status
10011240:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011244:	e0fffc17 	ldw	r3,-16(fp)
10011248:	00bfff84 	movi	r2,-2
1001124c:	1884703a 	and	r2,r3,r2
10011250:	1001703a 	wrctl	status,r2
  return context;
10011254:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011258:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
1001125c:	e0bffe17 	ldw	r2,-8(fp)
10011260:	100890fa 	slli	r4,r2,3
10011264:	e0fff817 	ldw	r3,-32(fp)
10011268:	00840074 	movhi	r2,4097
1001126c:	2085883a 	add	r2,r4,r2
10011270:	10dc7915 	stw	r3,29156(r2)
    alt_irq[id].context = isr_context;
10011274:	e0bffe17 	ldw	r2,-8(fp)
10011278:	100890fa 	slli	r4,r2,3
1001127c:	e0fff717 	ldw	r3,-36(fp)
10011280:	00840074 	movhi	r2,4097
10011284:	2085883a 	add	r2,r4,r2
10011288:	10dc7a15 	stw	r3,29160(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1001128c:	e0bff817 	ldw	r2,-32(fp)
10011290:	10000526 	beq	r2,zero,100112a8 <alt_iic_isr_register+0xa8>
10011294:	e0bffe17 	ldw	r2,-8(fp)
10011298:	100b883a 	mov	r5,r2
1001129c:	e13ffa17 	ldw	r4,-24(fp)
100112a0:	00110a00 	call	100110a0 <alt_ic_irq_enable>
100112a4:	00000406 	br	100112b8 <alt_iic_isr_register+0xb8>
100112a8:	e0bffe17 	ldw	r2,-8(fp)
100112ac:	100b883a 	mov	r5,r2
100112b0:	e13ffa17 	ldw	r4,-24(fp)
100112b4:	00111280 	call	10011128 <alt_ic_irq_disable>
100112b8:	e0bfff15 	stw	r2,-4(fp)
100112bc:	e0bffd17 	ldw	r2,-12(fp)
100112c0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
100112c4:	e0bffb17 	ldw	r2,-20(fp)
100112c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100112cc:	e0bfff17 	ldw	r2,-4(fp)
}
100112d0:	e037883a 	mov	sp,fp
100112d4:	dfc00117 	ldw	ra,4(sp)
100112d8:	df000017 	ldw	fp,0(sp)
100112dc:	dec00204 	addi	sp,sp,8
100112e0:	f800283a 	ret

100112e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100112e4:	defff904 	addi	sp,sp,-28
100112e8:	dfc00615 	stw	ra,24(sp)
100112ec:	df000515 	stw	fp,20(sp)
100112f0:	df000504 	addi	fp,sp,20
100112f4:	e13ffe15 	stw	r4,-8(fp)
100112f8:	e17ffd15 	stw	r5,-12(fp)
100112fc:	e1bffc15 	stw	r6,-16(fp)
10011300:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
10011304:	e1bffb17 	ldw	r6,-20(fp)
10011308:	e17ffc17 	ldw	r5,-16(fp)
1001130c:	e13ffd17 	ldw	r4,-12(fp)
10011310:	00115040 	call	10011504 <open>
10011314:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
10011318:	e0bfff17 	ldw	r2,-4(fp)
1001131c:	10001716 	blt	r2,zero,1001137c <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
10011320:	e0bfff17 	ldw	r2,-4(fp)
10011324:	10c00324 	muli	r3,r2,12
10011328:	00840074 	movhi	r2,4097
1001132c:	1885883a 	add	r2,r3,r2
10011330:	10cf5417 	ldw	r3,15696(r2)
10011334:	e0bffe17 	ldw	r2,-8(fp)
10011338:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1001133c:	e0bfff17 	ldw	r2,-4(fp)
10011340:	10c00324 	muli	r3,r2,12
10011344:	00840074 	movhi	r2,4097
10011348:	1885883a 	add	r2,r3,r2
1001134c:	10cf5517 	ldw	r3,15700(r2)
10011350:	e0bffe17 	ldw	r2,-8(fp)
10011354:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011358:	e0bfff17 	ldw	r2,-4(fp)
1001135c:	10c00324 	muli	r3,r2,12
10011360:	00840074 	movhi	r2,4097
10011364:	1885883a 	add	r2,r3,r2
10011368:	10cf5617 	ldw	r3,15704(r2)
1001136c:	e0bffe17 	ldw	r2,-8(fp)
10011370:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011374:	e13fff17 	ldw	r4,-4(fp)
10011378:	000fd500 	call	1000fd50 <alt_release_fd>
  }
} 
1001137c:	0001883a 	nop
10011380:	e037883a 	mov	sp,fp
10011384:	dfc00117 	ldw	ra,4(sp)
10011388:	df000017 	ldw	fp,0(sp)
1001138c:	dec00204 	addi	sp,sp,8
10011390:	f800283a 	ret

10011394 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011394:	defffb04 	addi	sp,sp,-20
10011398:	dfc00415 	stw	ra,16(sp)
1001139c:	df000315 	stw	fp,12(sp)
100113a0:	df000304 	addi	fp,sp,12
100113a4:	e13fff15 	stw	r4,-4(fp)
100113a8:	e17ffe15 	stw	r5,-8(fp)
100113ac:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100113b0:	01c07fc4 	movi	r7,511
100113b4:	01800044 	movi	r6,1
100113b8:	e17fff17 	ldw	r5,-4(fp)
100113bc:	01040074 	movhi	r4,4097
100113c0:	210f5704 	addi	r4,r4,15708
100113c4:	00112e40 	call	100112e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100113c8:	01c07fc4 	movi	r7,511
100113cc:	000d883a 	mov	r6,zero
100113d0:	e17ffe17 	ldw	r5,-8(fp)
100113d4:	01040074 	movhi	r4,4097
100113d8:	210f5404 	addi	r4,r4,15696
100113dc:	00112e40 	call	100112e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100113e0:	01c07fc4 	movi	r7,511
100113e4:	01800044 	movi	r6,1
100113e8:	e17ffd17 	ldw	r5,-12(fp)
100113ec:	01040074 	movhi	r4,4097
100113f0:	210f5a04 	addi	r4,r4,15720
100113f4:	00112e40 	call	100112e4 <alt_open_fd>
}  
100113f8:	0001883a 	nop
100113fc:	e037883a 	mov	sp,fp
10011400:	dfc00117 	ldw	ra,4(sp)
10011404:	df000017 	ldw	fp,0(sp)
10011408:	dec00204 	addi	sp,sp,8
1001140c:	f800283a 	ret

10011410 <alt_get_errno>:
{
10011410:	defffe04 	addi	sp,sp,-8
10011414:	dfc00115 	stw	ra,4(sp)
10011418:	df000015 	stw	fp,0(sp)
1001141c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011420:	d0a00a17 	ldw	r2,-32728(gp)
10011424:	10000326 	beq	r2,zero,10011434 <alt_get_errno+0x24>
10011428:	d0a00a17 	ldw	r2,-32728(gp)
1001142c:	103ee83a 	callr	r2
10011430:	00000106 	br	10011438 <alt_get_errno+0x28>
10011434:	d0a89a04 	addi	r2,gp,-23960
}
10011438:	e037883a 	mov	sp,fp
1001143c:	dfc00117 	ldw	ra,4(sp)
10011440:	df000017 	ldw	fp,0(sp)
10011444:	dec00204 	addi	sp,sp,8
10011448:	f800283a 	ret

1001144c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001144c:	defffd04 	addi	sp,sp,-12
10011450:	df000215 	stw	fp,8(sp)
10011454:	df000204 	addi	fp,sp,8
10011458:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1001145c:	e0bffe17 	ldw	r2,-8(fp)
10011460:	10800217 	ldw	r2,8(r2)
10011464:	10d00034 	orhi	r3,r2,16384
10011468:	e0bffe17 	ldw	r2,-8(fp)
1001146c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011470:	e03fff15 	stw	zero,-4(fp)
10011474:	00001a06 	br	100114e0 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011478:	e0bfff17 	ldw	r2,-4(fp)
1001147c:	10c00324 	muli	r3,r2,12
10011480:	00840074 	movhi	r2,4097
10011484:	1885883a 	add	r2,r3,r2
10011488:	10cf5417 	ldw	r3,15696(r2)
1001148c:	e0bffe17 	ldw	r2,-8(fp)
10011490:	10800017 	ldw	r2,0(r2)
10011494:	18800f1e 	bne	r3,r2,100114d4 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011498:	e0bfff17 	ldw	r2,-4(fp)
1001149c:	10c00324 	muli	r3,r2,12
100114a0:	00840074 	movhi	r2,4097
100114a4:	1885883a 	add	r2,r3,r2
100114a8:	108f5617 	ldw	r2,15704(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
100114ac:	1000090e 	bge	r2,zero,100114d4 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
100114b0:	e0bfff17 	ldw	r2,-4(fp)
100114b4:	10c00324 	muli	r3,r2,12
100114b8:	00840074 	movhi	r2,4097
100114bc:	108f5404 	addi	r2,r2,15696
100114c0:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100114c4:	e0fffe17 	ldw	r3,-8(fp)
100114c8:	18800226 	beq	r3,r2,100114d4 <alt_file_locked+0x88>
    {
      return -EACCES;
100114cc:	00bffcc4 	movi	r2,-13
100114d0:	00000806 	br	100114f4 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
100114d4:	e0bfff17 	ldw	r2,-4(fp)
100114d8:	10800044 	addi	r2,r2,1
100114dc:	e0bfff15 	stw	r2,-4(fp)
100114e0:	d0a00917 	ldw	r2,-32732(gp)
100114e4:	1007883a 	mov	r3,r2
100114e8:	e0bfff17 	ldw	r2,-4(fp)
100114ec:	18bfe22e 	bgeu	r3,r2,10011478 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100114f0:	0005883a 	mov	r2,zero
}
100114f4:	e037883a 	mov	sp,fp
100114f8:	df000017 	ldw	fp,0(sp)
100114fc:	dec00104 	addi	sp,sp,4
10011500:	f800283a 	ret

10011504 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011504:	defff604 	addi	sp,sp,-40
10011508:	dfc00915 	stw	ra,36(sp)
1001150c:	df000815 	stw	fp,32(sp)
10011510:	df000804 	addi	fp,sp,32
10011514:	e13ffa15 	stw	r4,-24(fp)
10011518:	e17ff915 	stw	r5,-28(fp)
1001151c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011520:	00bfffc4 	movi	r2,-1
10011524:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
10011528:	00bffb44 	movi	r2,-19
1001152c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
10011530:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011534:	d1600704 	addi	r5,gp,-32740
10011538:	e13ffa17 	ldw	r4,-24(fp)
1001153c:	00118200 	call	10011820 <alt_find_dev>
10011540:	e0bfff15 	stw	r2,-4(fp)
10011544:	e0bfff17 	ldw	r2,-4(fp)
10011548:	1000051e 	bne	r2,zero,10011560 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001154c:	e13ffa17 	ldw	r4,-24(fp)
10011550:	00118b00 	call	100118b0 <alt_find_file>
10011554:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
10011558:	00800044 	movi	r2,1
1001155c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011560:	e0bfff17 	ldw	r2,-4(fp)
10011564:	10002926 	beq	r2,zero,1001160c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011568:	e13fff17 	ldw	r4,-4(fp)
1001156c:	00119b80 	call	100119b8 <alt_get_fd>
10011570:	e0bffe15 	stw	r2,-8(fp)
10011574:	e0bffe17 	ldw	r2,-8(fp)
10011578:	1000030e 	bge	r2,zero,10011588 <open+0x84>
    {
      status = index;
1001157c:	e0bffe17 	ldw	r2,-8(fp)
10011580:	e0bffd15 	stw	r2,-12(fp)
10011584:	00002306 	br	10011614 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10011588:	e0bffe17 	ldw	r2,-8(fp)
1001158c:	10c00324 	muli	r3,r2,12
10011590:	00840074 	movhi	r2,4097
10011594:	108f5404 	addi	r2,r2,15696
10011598:	1885883a 	add	r2,r3,r2
1001159c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100115a0:	e0fff917 	ldw	r3,-28(fp)
100115a4:	00900034 	movhi	r2,16384
100115a8:	10bfffc4 	addi	r2,r2,-1
100115ac:	1886703a 	and	r3,r3,r2
100115b0:	e0bffb17 	ldw	r2,-20(fp)
100115b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100115b8:	e0bffc17 	ldw	r2,-16(fp)
100115bc:	1000051e 	bne	r2,zero,100115d4 <open+0xd0>
100115c0:	e13ffb17 	ldw	r4,-20(fp)
100115c4:	001144c0 	call	1001144c <alt_file_locked>
100115c8:	e0bffd15 	stw	r2,-12(fp)
100115cc:	e0bffd17 	ldw	r2,-12(fp)
100115d0:	10001016 	blt	r2,zero,10011614 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100115d4:	e0bfff17 	ldw	r2,-4(fp)
100115d8:	10800317 	ldw	r2,12(r2)
100115dc:	10000826 	beq	r2,zero,10011600 <open+0xfc>
100115e0:	e0bfff17 	ldw	r2,-4(fp)
100115e4:	10800317 	ldw	r2,12(r2)
100115e8:	e1fff817 	ldw	r7,-32(fp)
100115ec:	e1bff917 	ldw	r6,-28(fp)
100115f0:	e17ffa17 	ldw	r5,-24(fp)
100115f4:	e13ffb17 	ldw	r4,-20(fp)
100115f8:	103ee83a 	callr	r2
100115fc:	00000106 	br	10011604 <open+0x100>
10011600:	0005883a 	mov	r2,zero
10011604:	e0bffd15 	stw	r2,-12(fp)
10011608:	00000206 	br	10011614 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1001160c:	00bffb44 	movi	r2,-19
10011610:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011614:	e0bffd17 	ldw	r2,-12(fp)
10011618:	1000090e 	bge	r2,zero,10011640 <open+0x13c>
  {
    alt_release_fd (index);  
1001161c:	e13ffe17 	ldw	r4,-8(fp)
10011620:	000fd500 	call	1000fd50 <alt_release_fd>
    ALT_ERRNO = -status;
10011624:	00114100 	call	10011410 <alt_get_errno>
10011628:	1007883a 	mov	r3,r2
1001162c:	e0bffd17 	ldw	r2,-12(fp)
10011630:	0085c83a 	sub	r2,zero,r2
10011634:	18800015 	stw	r2,0(r3)
    return -1;
10011638:	00bfffc4 	movi	r2,-1
1001163c:	00000106 	br	10011644 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10011640:	e0bffe17 	ldw	r2,-8(fp)
}
10011644:	e037883a 	mov	sp,fp
10011648:	dfc00117 	ldw	ra,4(sp)
1001164c:	df000017 	ldw	fp,0(sp)
10011650:	dec00204 	addi	sp,sp,8
10011654:	f800283a 	ret

10011658 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011658:	defffa04 	addi	sp,sp,-24
1001165c:	df000515 	stw	fp,20(sp)
10011660:	df000504 	addi	fp,sp,20
10011664:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
10011668:	0005303a 	rdctl	r2,status
1001166c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011670:	e0fffc17 	ldw	r3,-16(fp)
10011674:	00bfff84 	movi	r2,-2
10011678:	1884703a 	and	r2,r3,r2
1001167c:	1001703a 	wrctl	status,r2
  return context;
10011680:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011684:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
10011688:	e0bffb17 	ldw	r2,-20(fp)
1001168c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011690:	e0bffd17 	ldw	r2,-12(fp)
10011694:	10800017 	ldw	r2,0(r2)
10011698:	e0fffd17 	ldw	r3,-12(fp)
1001169c:	18c00117 	ldw	r3,4(r3)
100116a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100116a4:	e0bffd17 	ldw	r2,-12(fp)
100116a8:	10800117 	ldw	r2,4(r2)
100116ac:	e0fffd17 	ldw	r3,-12(fp)
100116b0:	18c00017 	ldw	r3,0(r3)
100116b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100116b8:	e0bffd17 	ldw	r2,-12(fp)
100116bc:	e0fffd17 	ldw	r3,-12(fp)
100116c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100116c4:	e0bffd17 	ldw	r2,-12(fp)
100116c8:	e0fffd17 	ldw	r3,-12(fp)
100116cc:	10c00015 	stw	r3,0(r2)
100116d0:	e0bfff17 	ldw	r2,-4(fp)
100116d4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
100116d8:	e0bffe17 	ldw	r2,-8(fp)
100116dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100116e0:	0001883a 	nop
100116e4:	e037883a 	mov	sp,fp
100116e8:	df000017 	ldw	fp,0(sp)
100116ec:	dec00104 	addi	sp,sp,4
100116f0:	f800283a 	ret

100116f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100116f4:	defffb04 	addi	sp,sp,-20
100116f8:	dfc00415 	stw	ra,16(sp)
100116fc:	df000315 	stw	fp,12(sp)
10011700:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011704:	d0a00d17 	ldw	r2,-32716(gp)
10011708:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1001170c:	d0a8a117 	ldw	r2,-23932(gp)
10011710:	10800044 	addi	r2,r2,1
10011714:	d0a8a115 	stw	r2,-23932(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011718:	00002e06 	br	100117d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1001171c:	e0bfff17 	ldw	r2,-4(fp)
10011720:	10800017 	ldw	r2,0(r2)
10011724:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011728:	e0bfff17 	ldw	r2,-4(fp)
1001172c:	10800403 	ldbu	r2,16(r2)
10011730:	10803fcc 	andi	r2,r2,255
10011734:	10000426 	beq	r2,zero,10011748 <alt_tick+0x54>
10011738:	d0a8a117 	ldw	r2,-23932(gp)
1001173c:	1000021e 	bne	r2,zero,10011748 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011740:	e0bfff17 	ldw	r2,-4(fp)
10011744:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011748:	e0bfff17 	ldw	r2,-4(fp)
1001174c:	10800217 	ldw	r2,8(r2)
10011750:	d0e8a117 	ldw	r3,-23932(gp)
10011754:	18801d36 	bltu	r3,r2,100117cc <alt_tick+0xd8>
10011758:	e0bfff17 	ldw	r2,-4(fp)
1001175c:	10800403 	ldbu	r2,16(r2)
10011760:	10803fcc 	andi	r2,r2,255
10011764:	1000191e 	bne	r2,zero,100117cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011768:	e0bfff17 	ldw	r2,-4(fp)
1001176c:	10800317 	ldw	r2,12(r2)
10011770:	e0ffff17 	ldw	r3,-4(fp)
10011774:	18c00517 	ldw	r3,20(r3)
10011778:	1809883a 	mov	r4,r3
1001177c:	103ee83a 	callr	r2
10011780:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011784:	e0bffd17 	ldw	r2,-12(fp)
10011788:	1000031e 	bne	r2,zero,10011798 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1001178c:	e13fff17 	ldw	r4,-4(fp)
10011790:	00116580 	call	10011658 <alt_alarm_stop>
10011794:	00000d06 	br	100117cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011798:	e0bfff17 	ldw	r2,-4(fp)
1001179c:	10c00217 	ldw	r3,8(r2)
100117a0:	e0bffd17 	ldw	r2,-12(fp)
100117a4:	1887883a 	add	r3,r3,r2
100117a8:	e0bfff17 	ldw	r2,-4(fp)
100117ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100117b0:	e0bfff17 	ldw	r2,-4(fp)
100117b4:	10c00217 	ldw	r3,8(r2)
100117b8:	d0a8a117 	ldw	r2,-23932(gp)
100117bc:	1880032e 	bgeu	r3,r2,100117cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100117c0:	e0bfff17 	ldw	r2,-4(fp)
100117c4:	00c00044 	movi	r3,1
100117c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100117cc:	e0bffe17 	ldw	r2,-8(fp)
100117d0:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
100117d4:	e0ffff17 	ldw	r3,-4(fp)
100117d8:	d0a00d04 	addi	r2,gp,-32716
100117dc:	18bfcf1e 	bne	r3,r2,1001171c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100117e0:	0001883a 	nop
}
100117e4:	0001883a 	nop
100117e8:	e037883a 	mov	sp,fp
100117ec:	dfc00117 	ldw	ra,4(sp)
100117f0:	df000017 	ldw	fp,0(sp)
100117f4:	dec00204 	addi	sp,sp,8
100117f8:	f800283a 	ret

100117fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100117fc:	deffff04 	addi	sp,sp,-4
10011800:	df000015 	stw	fp,0(sp)
10011804:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011808:	000170fa 	wrctl	ienable,zero
}
1001180c:	0001883a 	nop
10011810:	e037883a 	mov	sp,fp
10011814:	df000017 	ldw	fp,0(sp)
10011818:	dec00104 	addi	sp,sp,4
1001181c:	f800283a 	ret

10011820 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011820:	defffa04 	addi	sp,sp,-24
10011824:	dfc00515 	stw	ra,20(sp)
10011828:	df000415 	stw	fp,16(sp)
1001182c:	df000404 	addi	fp,sp,16
10011830:	e13ffd15 	stw	r4,-12(fp)
10011834:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011838:	e0bffc17 	ldw	r2,-16(fp)
1001183c:	10800017 	ldw	r2,0(r2)
10011840:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011844:	e13ffd17 	ldw	r4,-12(fp)
10011848:	00032400 	call	10003240 <strlen>
1001184c:	10800044 	addi	r2,r2,1
10011850:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011854:	00000d06 	br	1001188c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011858:	e0bfff17 	ldw	r2,-4(fp)
1001185c:	10800217 	ldw	r2,8(r2)
10011860:	e0fffe17 	ldw	r3,-8(fp)
10011864:	180d883a 	mov	r6,r3
10011868:	e17ffd17 	ldw	r5,-12(fp)
1001186c:	1009883a 	mov	r4,r2
10011870:	0011bc80 	call	10011bc8 <memcmp>
10011874:	1000021e 	bne	r2,zero,10011880 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011878:	e0bfff17 	ldw	r2,-4(fp)
1001187c:	00000706 	br	1001189c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011880:	e0bfff17 	ldw	r2,-4(fp)
10011884:	10800017 	ldw	r2,0(r2)
10011888:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
1001188c:	e0ffff17 	ldw	r3,-4(fp)
10011890:	e0bffc17 	ldw	r2,-16(fp)
10011894:	18bff01e 	bne	r3,r2,10011858 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
10011898:	0005883a 	mov	r2,zero
}
1001189c:	e037883a 	mov	sp,fp
100118a0:	dfc00117 	ldw	ra,4(sp)
100118a4:	df000017 	ldw	fp,0(sp)
100118a8:	dec00204 	addi	sp,sp,8
100118ac:	f800283a 	ret

100118b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100118b0:	defffb04 	addi	sp,sp,-20
100118b4:	dfc00415 	stw	ra,16(sp)
100118b8:	df000315 	stw	fp,12(sp)
100118bc:	df000304 	addi	fp,sp,12
100118c0:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100118c4:	d0a00517 	ldw	r2,-32748(gp)
100118c8:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100118cc:	00003106 	br	10011994 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100118d0:	e0bfff17 	ldw	r2,-4(fp)
100118d4:	10800217 	ldw	r2,8(r2)
100118d8:	1009883a 	mov	r4,r2
100118dc:	00032400 	call	10003240 <strlen>
100118e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100118e4:	e0bfff17 	ldw	r2,-4(fp)
100118e8:	10c00217 	ldw	r3,8(r2)
100118ec:	e0bffe17 	ldw	r2,-8(fp)
100118f0:	10bfffc4 	addi	r2,r2,-1
100118f4:	1885883a 	add	r2,r3,r2
100118f8:	10800003 	ldbu	r2,0(r2)
100118fc:	10803fcc 	andi	r2,r2,255
10011900:	1080201c 	xori	r2,r2,128
10011904:	10bfe004 	addi	r2,r2,-128
10011908:	10800bd8 	cmpnei	r2,r2,47
1001190c:	1000031e 	bne	r2,zero,1001191c <alt_find_file+0x6c>
    {
      len -= 1;
10011910:	e0bffe17 	ldw	r2,-8(fp)
10011914:	10bfffc4 	addi	r2,r2,-1
10011918:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001191c:	e0bffe17 	ldw	r2,-8(fp)
10011920:	e0fffd17 	ldw	r3,-12(fp)
10011924:	1885883a 	add	r2,r3,r2
10011928:	10800003 	ldbu	r2,0(r2)
1001192c:	10803fcc 	andi	r2,r2,255
10011930:	1080201c 	xori	r2,r2,128
10011934:	10bfe004 	addi	r2,r2,-128
10011938:	10800be0 	cmpeqi	r2,r2,47
1001193c:	1000081e 	bne	r2,zero,10011960 <alt_find_file+0xb0>
10011940:	e0bffe17 	ldw	r2,-8(fp)
10011944:	e0fffd17 	ldw	r3,-12(fp)
10011948:	1885883a 	add	r2,r3,r2
1001194c:	10800003 	ldbu	r2,0(r2)
10011950:	10803fcc 	andi	r2,r2,255
10011954:	1080201c 	xori	r2,r2,128
10011958:	10bfe004 	addi	r2,r2,-128
1001195c:	10000a1e 	bne	r2,zero,10011988 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011960:	e0bfff17 	ldw	r2,-4(fp)
10011964:	10800217 	ldw	r2,8(r2)
10011968:	e0fffe17 	ldw	r3,-8(fp)
1001196c:	180d883a 	mov	r6,r3
10011970:	e17ffd17 	ldw	r5,-12(fp)
10011974:	1009883a 	mov	r4,r2
10011978:	0011bc80 	call	10011bc8 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
1001197c:	1000021e 	bne	r2,zero,10011988 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
10011980:	e0bfff17 	ldw	r2,-4(fp)
10011984:	00000706 	br	100119a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011988:	e0bfff17 	ldw	r2,-4(fp)
1001198c:	10800017 	ldw	r2,0(r2)
10011990:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
10011994:	e0ffff17 	ldw	r3,-4(fp)
10011998:	d0a00504 	addi	r2,gp,-32748
1001199c:	18bfcc1e 	bne	r3,r2,100118d0 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
100119a0:	0005883a 	mov	r2,zero
}
100119a4:	e037883a 	mov	sp,fp
100119a8:	dfc00117 	ldw	ra,4(sp)
100119ac:	df000017 	ldw	fp,0(sp)
100119b0:	dec00204 	addi	sp,sp,8
100119b4:	f800283a 	ret

100119b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100119b8:	defffc04 	addi	sp,sp,-16
100119bc:	df000315 	stw	fp,12(sp)
100119c0:	df000304 	addi	fp,sp,12
100119c4:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
100119c8:	00bffa04 	movi	r2,-24
100119cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100119d0:	e03fff15 	stw	zero,-4(fp)
100119d4:	00001706 	br	10011a34 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
100119d8:	e0bfff17 	ldw	r2,-4(fp)
100119dc:	10c00324 	muli	r3,r2,12
100119e0:	00840074 	movhi	r2,4097
100119e4:	1885883a 	add	r2,r3,r2
100119e8:	108f5417 	ldw	r2,15696(r2)
100119ec:	10000e1e 	bne	r2,zero,10011a28 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
100119f0:	e0bfff17 	ldw	r2,-4(fp)
100119f4:	11000324 	muli	r4,r2,12
100119f8:	e0fffd17 	ldw	r3,-12(fp)
100119fc:	00840074 	movhi	r2,4097
10011a00:	2085883a 	add	r2,r4,r2
10011a04:	10cf5415 	stw	r3,15696(r2)
      if (i > alt_max_fd)
10011a08:	d0e00917 	ldw	r3,-32732(gp)
10011a0c:	e0bfff17 	ldw	r2,-4(fp)
10011a10:	1880020e 	bge	r3,r2,10011a1c <alt_get_fd+0x64>
      {
        alt_max_fd = i;
10011a14:	e0bfff17 	ldw	r2,-4(fp)
10011a18:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
10011a1c:	e0bfff17 	ldw	r2,-4(fp)
10011a20:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10011a24:	00000706 	br	10011a44 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
10011a28:	e0bfff17 	ldw	r2,-4(fp)
10011a2c:	10800044 	addi	r2,r2,1
10011a30:	e0bfff15 	stw	r2,-4(fp)
10011a34:	e0bfff17 	ldw	r2,-4(fp)
10011a38:	10800810 	cmplti	r2,r2,32
10011a3c:	103fe61e 	bne	r2,zero,100119d8 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
10011a40:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011a44:	e0bffe17 	ldw	r2,-8(fp)
}
10011a48:	e037883a 	mov	sp,fp
10011a4c:	df000017 	ldw	fp,0(sp)
10011a50:	dec00104 	addi	sp,sp,4
10011a54:	f800283a 	ret

10011a58 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10011a58:	defffb04 	addi	sp,sp,-20
10011a5c:	df000415 	stw	fp,16(sp)
10011a60:	df000404 	addi	fp,sp,16
10011a64:	e13ffd15 	stw	r4,-12(fp)
10011a68:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10011a6c:	e0bffc17 	ldw	r2,-16(fp)
10011a70:	10840070 	cmpltui	r2,r2,4097
10011a74:	1000021e 	bne	r2,zero,10011a80 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10011a78:	00840004 	movi	r2,4096
10011a7c:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
10011a80:	e0fffd17 	ldw	r3,-12(fp)
10011a84:	e0bffc17 	ldw	r2,-16(fp)
10011a88:	1885883a 	add	r2,r3,r2
10011a8c:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011a90:	e0bffd17 	ldw	r2,-12(fp)
10011a94:	e0bfff15 	stw	r2,-4(fp)
10011a98:	00000506 	br	10011ab0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10011a9c:	e0bfff17 	ldw	r2,-4(fp)
10011aa0:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011aa4:	e0bfff17 	ldw	r2,-4(fp)
10011aa8:	10800804 	addi	r2,r2,32
10011aac:	e0bfff15 	stw	r2,-4(fp)
10011ab0:	e0ffff17 	ldw	r3,-4(fp)
10011ab4:	e0bffe17 	ldw	r2,-8(fp)
10011ab8:	18bff836 	bltu	r3,r2,10011a9c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10011abc:	e0bffd17 	ldw	r2,-12(fp)
10011ac0:	108007cc 	andi	r2,r2,31
10011ac4:	10000226 	beq	r2,zero,10011ad0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10011ac8:	e0bfff17 	ldw	r2,-4(fp)
10011acc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10011ad0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10011ad4:	0001883a 	nop
10011ad8:	e037883a 	mov	sp,fp
10011adc:	df000017 	ldw	fp,0(sp)
10011ae0:	dec00104 	addi	sp,sp,4
10011ae4:	f800283a 	ret

10011ae8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011ae8:	defffe04 	addi	sp,sp,-8
10011aec:	df000115 	stw	fp,4(sp)
10011af0:	df000104 	addi	fp,sp,4
10011af4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011af8:	e0bfff17 	ldw	r2,-4(fp)
10011afc:	10bffe84 	addi	r2,r2,-6
10011b00:	10c00428 	cmpgeui	r3,r2,16
10011b04:	1800191e 	bne	r3,zero,10011b6c <alt_exception_cause_generated_bad_addr+0x84>
10011b08:	100690ba 	slli	r3,r2,2
10011b0c:	00840074 	movhi	r2,4097
10011b10:	1885883a 	add	r2,r3,r2
10011b14:	1086c717 	ldw	r2,6940(r2)
10011b18:	1000683a 	jmp	r2
10011b1c:	10011b5c 	xori	zero,r2,1133
10011b20:	10011b5c 	xori	zero,r2,1133
10011b24:	10011b6c 	andhi	zero,r2,1133
10011b28:	10011b6c 	andhi	zero,r2,1133
10011b2c:	10011b6c 	andhi	zero,r2,1133
10011b30:	10011b5c 	xori	zero,r2,1133
10011b34:	10011b64 	muli	zero,r2,1133
10011b38:	10011b6c 	andhi	zero,r2,1133
10011b3c:	10011b5c 	xori	zero,r2,1133
10011b40:	10011b5c 	xori	zero,r2,1133
10011b44:	10011b6c 	andhi	zero,r2,1133
10011b48:	10011b5c 	xori	zero,r2,1133
10011b4c:	10011b64 	muli	zero,r2,1133
10011b50:	10011b6c 	andhi	zero,r2,1133
10011b54:	10011b6c 	andhi	zero,r2,1133
10011b58:	10011b5c 	xori	zero,r2,1133
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011b5c:	00800044 	movi	r2,1
10011b60:	00000306 	br	10011b70 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011b64:	0005883a 	mov	r2,zero
10011b68:	00000106 	br	10011b70 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
10011b6c:	0005883a 	mov	r2,zero
  }
}
10011b70:	e037883a 	mov	sp,fp
10011b74:	df000017 	ldw	fp,0(sp)
10011b78:	dec00104 	addi	sp,sp,4
10011b7c:	f800283a 	ret

10011b80 <atexit>:
10011b80:	200b883a 	mov	r5,r4
10011b84:	000f883a 	mov	r7,zero
10011b88:	000d883a 	mov	r6,zero
10011b8c:	0009883a 	mov	r4,zero
10011b90:	0011c541 	jmpi	10011c54 <__register_exitproc>

10011b94 <exit>:
10011b94:	defffe04 	addi	sp,sp,-8
10011b98:	000b883a 	mov	r5,zero
10011b9c:	dc000015 	stw	r16,0(sp)
10011ba0:	dfc00115 	stw	ra,4(sp)
10011ba4:	2021883a 	mov	r16,r4
10011ba8:	0011ce40 	call	10011ce4 <__call_exitprocs>
10011bac:	00840074 	movhi	r2,4097
10011bb0:	1113cd17 	ldw	r4,20276(r2)
10011bb4:	20800f17 	ldw	r2,60(r4)
10011bb8:	10000126 	beq	r2,zero,10011bc0 <exit+0x2c>
10011bbc:	103ee83a 	callr	r2
10011bc0:	8009883a 	mov	r4,r16
10011bc4:	0011dfc0 	call	10011dfc <_exit>

10011bc8 <memcmp>:
10011bc8:	30800130 	cmpltui	r2,r6,4
10011bcc:	10000b1e 	bne	r2,zero,10011bfc <memcmp+0x34>
10011bd0:	2144b03a 	or	r2,r4,r5
10011bd4:	108000cc 	andi	r2,r2,3
10011bd8:	10001a1e 	bne	r2,zero,10011c44 <memcmp+0x7c>
10011bdc:	20c00017 	ldw	r3,0(r4)
10011be0:	28800017 	ldw	r2,0(r5)
10011be4:	1880171e 	bne	r3,r2,10011c44 <memcmp+0x7c>
10011be8:	31bfff04 	addi	r6,r6,-4
10011bec:	30800128 	cmpgeui	r2,r6,4
10011bf0:	21000104 	addi	r4,r4,4
10011bf4:	29400104 	addi	r5,r5,4
10011bf8:	103ff81e 	bne	r2,zero,10011bdc <memcmp+0x14>
10011bfc:	30ffffc4 	addi	r3,r6,-1
10011c00:	30000e26 	beq	r6,zero,10011c3c <memcmp+0x74>
10011c04:	29800003 	ldbu	r6,0(r5)
10011c08:	20800003 	ldbu	r2,0(r4)
10011c0c:	30800f1e 	bne	r6,r2,10011c4c <memcmp+0x84>
10011c10:	18800044 	addi	r2,r3,1
10011c14:	20c00044 	addi	r3,r4,1
10011c18:	2089883a 	add	r4,r4,r2
10011c1c:	00000506 	br	10011c34 <memcmp+0x6c>
10011c20:	18800003 	ldbu	r2,0(r3)
10011c24:	29800003 	ldbu	r6,0(r5)
10011c28:	18c00044 	addi	r3,r3,1
10011c2c:	10803fcc 	andi	r2,r2,255
10011c30:	1180061e 	bne	r2,r6,10011c4c <memcmp+0x84>
10011c34:	29400044 	addi	r5,r5,1
10011c38:	193ff91e 	bne	r3,r4,10011c20 <memcmp+0x58>
10011c3c:	0005883a 	mov	r2,zero
10011c40:	f800283a 	ret
10011c44:	30ffffc4 	addi	r3,r6,-1
10011c48:	003fee06 	br	10011c04 <memcmp+0x3c>
10011c4c:	1185c83a 	sub	r2,r2,r6
10011c50:	f800283a 	ret

10011c54 <__register_exitproc>:
10011c54:	00840074 	movhi	r2,4097
10011c58:	10d3cd17 	ldw	r3,20276(r2)
10011c5c:	18805217 	ldw	r2,328(r3)
10011c60:	10001726 	beq	r2,zero,10011cc0 <__register_exitproc+0x6c>
10011c64:	10c00117 	ldw	r3,4(r2)
10011c68:	1a000808 	cmpgei	r8,r3,32
10011c6c:	40001b1e 	bne	r8,zero,10011cdc <__register_exitproc+0x88>
10011c70:	20000b26 	beq	r4,zero,10011ca0 <__register_exitproc+0x4c>
10011c74:	181090ba 	slli	r8,r3,2
10011c78:	02400044 	movi	r9,1
10011c7c:	48d2983a 	sll	r9,r9,r3
10011c80:	1211883a 	add	r8,r2,r8
10011c84:	41802215 	stw	r6,136(r8)
10011c88:	11806217 	ldw	r6,392(r2)
10011c8c:	21000098 	cmpnei	r4,r4,2
10011c90:	324cb03a 	or	r6,r6,r9
10011c94:	11806215 	stw	r6,392(r2)
10011c98:	41c04215 	stw	r7,264(r8)
10011c9c:	20000b26 	beq	r4,zero,10011ccc <__register_exitproc+0x78>
10011ca0:	19000084 	addi	r4,r3,2
10011ca4:	200890ba 	slli	r4,r4,2
10011ca8:	18c00044 	addi	r3,r3,1
10011cac:	10c00115 	stw	r3,4(r2)
10011cb0:	1105883a 	add	r2,r2,r4
10011cb4:	11400015 	stw	r5,0(r2)
10011cb8:	0005883a 	mov	r2,zero
10011cbc:	f800283a 	ret
10011cc0:	18805304 	addi	r2,r3,332
10011cc4:	18805215 	stw	r2,328(r3)
10011cc8:	003fe606 	br	10011c64 <__register_exitproc+0x10>
10011ccc:	11006317 	ldw	r4,396(r2)
10011cd0:	2252b03a 	or	r9,r4,r9
10011cd4:	12406315 	stw	r9,396(r2)
10011cd8:	003ff106 	br	10011ca0 <__register_exitproc+0x4c>
10011cdc:	00bfffc4 	movi	r2,-1
10011ce0:	f800283a 	ret

10011ce4 <__call_exitprocs>:
10011ce4:	defff704 	addi	sp,sp,-36
10011ce8:	00840074 	movhi	r2,4097
10011cec:	ddc00715 	stw	r23,28(sp)
10011cf0:	15d3cd17 	ldw	r23,20276(r2)
10011cf4:	dd400515 	stw	r21,20(sp)
10011cf8:	dd000415 	stw	r20,16(sp)
10011cfc:	dcc00315 	stw	r19,12(sp)
10011d00:	dfc00815 	stw	ra,32(sp)
10011d04:	dd800615 	stw	r22,24(sp)
10011d08:	dc800215 	stw	r18,8(sp)
10011d0c:	dc400115 	stw	r17,4(sp)
10011d10:	dc000015 	stw	r16,0(sp)
10011d14:	2029883a 	mov	r20,r4
10011d18:	282b883a 	mov	r21,r5
10011d1c:	04c00044 	movi	r19,1
10011d20:	bc805217 	ldw	r18,328(r23)
10011d24:	90000d26 	beq	r18,zero,10011d5c <__call_exitprocs+0x78>
10011d28:	94000117 	ldw	r16,4(r18)
10011d2c:	847fffc4 	addi	r17,r16,-1
10011d30:	88000a16 	blt	r17,zero,10011d5c <__call_exitprocs+0x78>
10011d34:	84000044 	addi	r16,r16,1
10011d38:	802090ba 	slli	r16,r16,2
10011d3c:	9421883a 	add	r16,r18,r16
10011d40:	a8001126 	beq	r21,zero,10011d88 <__call_exitprocs+0xa4>
10011d44:	80804017 	ldw	r2,256(r16)
10011d48:	15400f26 	beq	r2,r21,10011d88 <__call_exitprocs+0xa4>
10011d4c:	8c7fffc4 	addi	r17,r17,-1
10011d50:	88bfffd8 	cmpnei	r2,r17,-1
10011d54:	843fff04 	addi	r16,r16,-4
10011d58:	103ff91e 	bne	r2,zero,10011d40 <__call_exitprocs+0x5c>
10011d5c:	dfc00817 	ldw	ra,32(sp)
10011d60:	ddc00717 	ldw	r23,28(sp)
10011d64:	dd800617 	ldw	r22,24(sp)
10011d68:	dd400517 	ldw	r21,20(sp)
10011d6c:	dd000417 	ldw	r20,16(sp)
10011d70:	dcc00317 	ldw	r19,12(sp)
10011d74:	dc800217 	ldw	r18,8(sp)
10011d78:	dc400117 	ldw	r17,4(sp)
10011d7c:	dc000017 	ldw	r16,0(sp)
10011d80:	dec00904 	addi	sp,sp,36
10011d84:	f800283a 	ret
10011d88:	90800117 	ldw	r2,4(r18)
10011d8c:	81800017 	ldw	r6,0(r16)
10011d90:	10bfffc4 	addi	r2,r2,-1
10011d94:	14401526 	beq	r2,r17,10011dec <__call_exitprocs+0x108>
10011d98:	80000015 	stw	zero,0(r16)
10011d9c:	303feb26 	beq	r6,zero,10011d4c <__call_exitprocs+0x68>
10011da0:	9c46983a 	sll	r3,r19,r17
10011da4:	90806217 	ldw	r2,392(r18)
10011da8:	95800117 	ldw	r22,4(r18)
10011dac:	1884703a 	and	r2,r3,r2
10011db0:	1000061e 	bne	r2,zero,10011dcc <__call_exitprocs+0xe8>
10011db4:	303ee83a 	callr	r6
10011db8:	90800117 	ldw	r2,4(r18)
10011dbc:	15bfd81e 	bne	r2,r22,10011d20 <__call_exitprocs+0x3c>
10011dc0:	b8805217 	ldw	r2,328(r23)
10011dc4:	14bfe126 	beq	r2,r18,10011d4c <__call_exitprocs+0x68>
10011dc8:	003fd506 	br	10011d20 <__call_exitprocs+0x3c>
10011dcc:	90806317 	ldw	r2,396(r18)
10011dd0:	81002017 	ldw	r4,128(r16)
10011dd4:	1886703a 	and	r3,r3,r2
10011dd8:	1800061e 	bne	r3,zero,10011df4 <__call_exitprocs+0x110>
10011ddc:	200b883a 	mov	r5,r4
10011de0:	a009883a 	mov	r4,r20
10011de4:	303ee83a 	callr	r6
10011de8:	003ff306 	br	10011db8 <__call_exitprocs+0xd4>
10011dec:	94400115 	stw	r17,4(r18)
10011df0:	003fea06 	br	10011d9c <__call_exitprocs+0xb8>
10011df4:	303ee83a 	callr	r6
10011df8:	003fef06 	br	10011db8 <__call_exitprocs+0xd4>

10011dfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011dfc:	defffd04 	addi	sp,sp,-12
10011e00:	df000215 	stw	fp,8(sp)
10011e04:	df000204 	addi	fp,sp,8
10011e08:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011e0c:	0001883a 	nop
10011e10:	e0bffe17 	ldw	r2,-8(fp)
10011e14:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011e18:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011e1c:	10000226 	beq	r2,zero,10011e28 <_exit+0x2c>
    ALT_SIM_FAIL();
10011e20:	002af070 	cmpltui	zero,zero,43969
10011e24:	00000106 	br	10011e2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011e28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011e2c:	003fff06 	br	10011e2c <_exit+0x30>
