
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000238

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011f8c memsz 0x00011f8c flags r-x
    LOAD off    0x00012fac vaddr 0x10011fac paddr 0x100141c8 align 2**12
         filesz 0x0000221c memsz 0x0000221c flags rw-
    LOAD off    0x000153e4 vaddr 0x100163e4 paddr 0x100163e4 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000114e0  10000238  10000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000894  10011718  10011718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000221c  10011fac  100141c8  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  100163e4  100163e4  000153e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000151c8  2**0
                  CONTENTS
  7 .sdram        00000000  10016540  10016540  000151c8  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  000151c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001008  00000000  00000000  000151f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004b3db  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f4fe  00000000  00000000  000615db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018b4c  00000000  00000000  00070ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002688  00000000  00000000  00089628  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004278  00000000  00000000  0008bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c27c  00000000  00000000  0008ff28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000ac1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c58  00000000  00000000  000ac208  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b1558  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b155b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b1567  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b1568  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b1569  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b156d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b1571  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b1575  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b1580  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b158b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000b1596  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  000b15a7  2**0
                  CONTENTS, READONLY
 30 .jdi          00006d60  00000000  00000000  000b15bc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000238 l    d  .text	00000000 .text
10011718 l    d  .rodata	00000000 .rodata
10011fac l    d  .rwdata	00000000 .rwdata
100163e4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016540 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Lab7/final_project/software/final_project_bsp/obj/HAL/src/crt0.o
10000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 aesop.c
1001418c l     O .rwdata	00000001 CNST_AES_NB
1001418d l     O .rwdata	00000001 CNST_AES_NR
1001418e l     O .rwdata	00000001 CNST_AES_NK
00000000 l    df *ABS*	00000000 core.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100163e4 l     O .bss	00000002 no_device.3793
100163e6 l     O .bss	00000002 ctl_reg.3792
00000000 l    df *ABS*	00000000 tile_eng_driver.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10004d38 l     F .text	000000c0 __sbprintf
10011a7e l     O .rodata	00000010 blanks.5226
10011a6e l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004f58 l     F .text	00000210 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006ae0 l     F .text	00000008 __fp_lock
10006af4 l     F .text	00000168 __sinit.part.0
10006c5c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100125ec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011aa0 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009c44 l     F .text	000000f4 __sprint_r.part.0
1000b094 l     F .text	000000c0 __sbprintf
10011bd4 l     O .rodata	00000010 blanks.5203
10011bc4 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000ef3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f048 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f240 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f32c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f500 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100141b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f8a4 l     F .text	00000034 alt_dev_reg
1001312c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fb94 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000fd98 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
100103d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010764 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010bcc l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010cf8 l     F .text	0000003c alt_get_errno
10010d34 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10016414 g     O .bss	00000004 alt_instruction_exception_handler
1000932c g     F .text	00000074 _mprec_log10
10001638 g     F .text	000000d4 writeSprite
1000940c g     F .text	00000074 __any_on
1000b620 g     F .text	00000058 _isatty_r
10011aac g     O .rodata	00000028 __mprec_tinytens
1000f43c g     F .text	0000007c alt_main
10002a4c g     F .text	000000cc _puts_r
10016440 g     O .bss	00000100 alt_irq
1000b708 g     F .text	00000064 _lseek_r
100141c8 g       *ABS*	00000000 __flash_rwdata_start
10000f28 g     F .text	0000027c game_tick
1000da58 g     F .text	00000080 .hidden __eqdf2
10016540 g       *ABS*	00000000 __alt_heap_start
10002a14 g     F .text	00000038 printf
1000ba54 g     F .text	0000006c _wcrtomb_r
10009be0 g     F .text	0000005c __sseek
10006ddc g     F .text	00000010 __sinit
1000b8f8 g     F .text	00000148 __swbuf_r
1000b678 g     F .text	00000070 _setlocale_r
10006c64 g     F .text	00000068 __sfmoreglue
1000f4dc g     F .text	00000024 __malloc_unlock
10002784 g     F .text	00000080 UsbGetRetryCnt
10008328 g     F .text	0000012c memmove
100011a4 g     F .text	00000088 IO_init
10006dc8 g     F .text	00000014 _cleanup
10001430 g     F .text	000000a8 writePalette
10008544 g     F .text	000000a4 _Balloc
1000dad8 g     F .text	000000f0 .hidden __gtdf2
100110e4 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000001c __reset
10007858 g     F .text	00000008 __localeconv_l
10000020 g       *ABS*	00000000 __flash_exceptions_start
10011718 g     O .rodata	00000100 aes_sbox
1000b5c0 g     F .text	00000060 _fstat_r
100163f4 g     O .bss	00000004 errno
10000e80 g     F .text	000000a8 transpose
10009b58 g     F .text	00000008 __seofread
10016400 g     O .bss	00000004 alt_argv
10011fac g     O .rwdata	00000600 gf_mul
1001c18c g       *ABS*	00000000 _gp
1000f740 g     F .text	00000030 usleep
10012fac g     O .rwdata	00000180 alt_fd_list
10011108 g     F .text	00000090 alt_find_dev
100028e4 g     F .text	00000100 memcpy
10006ae8 g     F .text	0000000c _cleanup_r
1000ed84 g     F .text	000000c8 .hidden __floatsidf
10010c7c g     F .text	0000007c alt_io_redirect
1000dbc8 g     F .text	000000f0 .hidden __ltdf2
10011718 g       *ABS*	00000000 __DTOR_END__
10002b18 g     F .text	00000010 puts
100113d0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
10009284 g     F .text	000000a8 __ratio
1000b07c g     F .text	00000018 __vfiprintf_internal
1000ff94 g     F .text	0000021c altera_avalon_jtag_uart_read
100029e4 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c750 g     F .text	00000064 .hidden __udivsi3
1000f19c g     F .text	000000a4 isatty
10011afc g     O .rodata	000000c8 __mprec_tens
10011340 g     F .text	00000090 alt_icache_flush
100163f0 g     O .bss	00000004 __malloc_top_pad
10001e10 g     F .text	00000268 UsbGetConfigDesc2
10007860 g     F .text	0000000c _localeconv_r
10008944 g     F .text	00000034 __i2b
1000723c g     F .text	000004c4 __sfvwrite_r
10009aac g     F .text	00000058 _sbrk_r
1000b7bc g     F .text	00000064 _read_r
100141b0 g     O .rwdata	00000004 alt_max_fd
1000b2c8 g     F .text	000000f8 _fclose_r
10006ab8 g     F .text	00000028 fflush
100163ec g     O .bss	00000004 __malloc_max_sbrked_mem
1000c810 g     F .text	000009a0 .hidden __adddf3
10009038 g     F .text	00000104 __b2d
1000c118 g     F .text	00000540 .hidden __umoddi3
1000f368 g     F .text	000000d4 lseek
10014190 g     O .rwdata	00000004 _global_impure_ptr
10009480 g     F .text	0000062c _realloc_r
10016540 g       *ABS*	00000000 __bss_end
10010ae8 g     F .text	000000e4 alt_iic_isr_register
10010fdc g     F .text	00000108 alt_tick
1000bb80 g     F .text	00000598 .hidden __udivdi3
1000b520 g     F .text	00000024 _fputwc_r
10011ad4 g     O .rodata	00000028 __mprec_bigtens
10008720 g     F .text	00000110 __s2b
1000ee4c g     F .text	0000009c .hidden __floatunsidf
10008dc8 g     F .text	00000058 __mcmp
10001860 g     F .text	00000100 UsbSetAddress
10006dfc g     F .text	00000014 __fp_lock_all
10010a9c g     F .text	0000004c alt_ic_irq_enabled
10000dc0 g     F .text	000000c0 add_round_key
10010f40 g     F .text	0000009c alt_alarm_stop
10016408 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000c8 alt_irq_handler
10012f84 g     O .rwdata	00000028 alt_dev_null
1001071c g     F .text	00000048 alt_dcache_flush_all
10008830 g     F .text	00000064 __hi0bits
100012a0 g     F .text	00000068 IO_read
1000ed04 g     F .text	00000080 .hidden __fixdfsi
100141c8 g       *ABS*	00000000 __ram_rwdata_end
100141a8 g     O .rwdata	00000008 alt_dev_list
1000f7ac g     F .text	000000f8 write
10011fac g       *ABS*	00000000 __ram_rodata_end
1000f0b0 g     F .text	000000b0 fstat
1000dbc8 g     F .text	000000f0 .hidden __ledf2
10002804 g     F .text	00000080 UsbPrintMem
10008b64 g     F .text	00000128 __pow5mult
10009d50 g     F .text	0000132c ___vfiprintf_internal_r
1000c7b4 g     F .text	0000005c .hidden __umodsi3
10016540 g       *ABS*	00000000 end
1000fad4 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
10011718 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1001044c g     F .text	0000007c alt_avalon_timer_sc_init
1000eee8 g     F .text	00000054 .hidden __clzsi2
100101b0 g     F .text	00000224 altera_avalon_jtag_uart_write
10006dec g     F .text	00000004 __sfp_lock_acquire
10008240 g     F .text	000000e8 memchr
10002bc0 g     F .text	00002160 ___vfprintf_internal_r
10002178 g     F .text	00000100 UsbClassRequest
10006f40 g     F .text	000002fc _free_r
10011cf5 g     O .rodata	00000180 _ctype_b
1000b6e8 g     F .text	0000000c __locale_mb_cur_max
1000096c g     F .text	000000ac sub_word32
100115cc g     F .text	00000118 __call_exitprocs
10000658 g     F .text	000001f0 key_expansion
10014198 g     O .rwdata	00000004 __malloc_sbrk_base
10000238 g     F .text	0000004c _start
1001640c g     O .bss	00000004 _alt_tick_rate
10000848 g     F .text	000000d8 shift_rows
10008c8c g     F .text	0000013c __lshift
10016410 g     O .bss	00000004 _alt_nticks
1000f53c g     F .text	000000fc read
1000f910 g     F .text	00000060 alt_sys_init
1001153c g     F .text	00000090 __register_exitproc
100015c0 g     F .text	00000078 parseSprite
10008978 g     F .text	000001ec __multiply
1000fe38 g     F .text	00000068 altera_avalon_jtag_uart_close
10011fac g       *ABS*	00000000 __ram_rwdata_start
10011718 g       *ABS*	00000000 __ram_rodata_start
10016418 g     O .bss	00000028 __malloc_current_mallinfo
1000913c g     F .text	00000148 __d2b
10001960 g     F .text	00000148 UsbGetDeviceDesc1
1000f970 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011818 g     O .rodata	00000100 aes_invsbox
100112a0 g     F .text	000000a0 alt_get_fd
100105f4 g     F .text	00000128 alt_busy_sleep
1000b1b8 g     F .text	00000058 _close_r
100114b0 g     F .text	0000008c memcmp
1000fa30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016540 g       *ABS*	00000000 __alt_stack_base
1000fa80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004df8 g     F .text	00000160 __swsetup_r
1000d1b0 g     F .text	000008a8 .hidden __divdf3
10006ccc g     F .text	000000fc __sfp
100093a0 g     F .text	0000006c __copybits
10012a10 g     O .rwdata	00000408 __malloc_av_
10006df8 g     F .text	00000004 __sinit_lock_release
1000dcb8 g     F .text	0000068c .hidden __muldf3
10009b04 g     F .text	00000054 __sread
10000adc g     F .text	00000028 rot_word
10002700 g     F .text	00000084 UsbWaitTDListDone
10011198 g     F .text	00000108 alt_find_file
10000b04 g     F .text	000002bc mix_columns
100107a0 g     F .text	000000a4 alt_dev_llist_insert
1000f4b8 g     F .text	00000024 __malloc_lock
1000f690 g     F .text	000000b0 sbrk
10006a58 g     F .text	00000060 _fflush_r
1000b210 g     F .text	000000b8 _calloc_r
100014d8 g     F .text	000000e8 parseSpriteLine
100163e4 g       *ABS*	00000000 __bss_start
10008454 g     F .text	000000f0 memset
10001308 g     F .text	0000002c main
100013b8 g     F .text	00000078 writePaletteHelper
10016404 g     O .bss	00000004 alt_envp
100163e8 g     O .bss	00000004 __malloc_max_total_mem
1000f9d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002078 g     F .text	00000100 UsbSetConfig
1000ba40 g     F .text	00000014 __swbuf
10009c3c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b3c0 g     F .text	00000010 fclose
10000a18 g     F .text	000000c4 sub_word
10005168 g     F .text	000016c8 _dtoa_r
10007a4c g     F .text	000007f4 _malloc_r
1000bb50 g     F .text	00000030 __ascii_wctomb
100141b4 g     O .rwdata	00000004 alt_errno
10007700 g     F .text	000000a4 _fwalk
1000b76c g     F .text	0000000c _mbtowc_r
1000c658 g     F .text	00000080 .hidden __divsi3
10006e24 g     F .text	0000011c _malloc_trim_r
10002278 g     F .text	00000148 UsbGetHidDesc
10011718 g       *ABS*	00000000 __CTOR_END__
1000b820 g     F .text	000000d8 strcmp
10011718 g       *ABS*	00000000 __flash_rodata_start
10011718 g       *ABS*	00000000 __DTOR_LIST__
1000da58 g     F .text	00000080 .hidden __nedf2
10001768 g     F .text	00000044 UsbRead
10001334 g     F .text	00000084 drawTile
1000f8d8 g     F .text	00000038 alt_irq_init
1000f638 g     F .text	00000058 alt_release_fd
10011e75 g     O .rodata	00000100 .hidden __clz_tab
100163f8 g     O .bss	00000004 _PathLocale
10011468 g     F .text	00000014 atexit
1000b154 g     F .text	00000064 _write_r
1000b6f4 g     F .text	00000014 setlocale
10014194 g     O .rwdata	00000004 _impure_ptr
100163fc g     O .bss	00000004 alt_argc
10006830 g     F .text	00000228 __sflush_r
100108a4 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000b778 g     F .text	00000044 __ascii_mbtowc
10008fdc g     F .text	0000005c __ulp
10006e10 g     F .text	00000014 __fp_unlock_all
100141a0 g     O .rwdata	00000008 alt_fs_list
100125ac g     O .rwdata	00000040 Rcon
100023c0 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000786c g     F .text	0000000c localeconv
10007878 g     F .text	00000098 __swhatbuf_r
10010938 g     F .text	00000050 alt_ic_isr_register
100141c8 g       *ABS*	00000000 _edata
10016540 g       *ABS*	00000000 _end
1000170c g     F .text	0000005c UsbWrite
1000b3d0 g     F .text	00000150 __fputwc
10000238 g       *ABS*	00000000 __ram_exceptions_end
1000fea0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
10010a10 g     F .text	0000008c alt_ic_irq_disable
10009b60 g     F .text	00000080 __swrite
1001419c g     O .rwdata	00000004 __malloc_trim_threshold
1001147c g     F .text	00000034 exit
100077a4 g     F .text	000000b4 _fwalk_reent
10008e20 g     F .text	000001bc __mdiff
1000c6d8 g     F .text	00000078 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006df0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000122c g     F .text	00000074 IO_write
10011bf4 g     O .rodata	00000101 _ctype_
1000ecb0 g     F .text	00000054 .hidden __unorddf2
100116e4 g     F .text	00000034 _exit
100104c8 g     F .text	0000012c alt_alarm_start
10002884 g     F .text	00000060 .hidden __muldi3
10007910 g     F .text	0000013c __smakebuf_r
10002b28 g     F .text	00000098 strlen
10010dec g     F .text	00000154 open
1000dad8 g     F .text	000000f0 .hidden __gedf2
10009d38 g     F .text	00000018 __sprint_r
10010904 g     F .text	00000034 alt_icache_flush_all
100141bc g     O .rwdata	00000004 alt_priority_mask
10010988 g     F .text	00000088 alt_ic_irq_enable
10004d20 g     F .text	00000018 __vfprintf_internal
1000bb44 g     F .text	0000000c _wctomb_r
1000e344 g     F .text	0000096c .hidden __subdf3
10008894 g     F .text	000000b0 __lo0bits
10001c80 g     F .text	00000190 UsbGetConfigDesc1
100141c0 g     O .rwdata	00000008 alt_alarm_list
10010844 g     F .text	00000060 _do_ctors
100017ac g     F .text	000000b4 UsbSoftReset
1000bac0 g     F .text	00000084 wcrtomb
1000ef78 g     F .text	000000d0 close
10001aa8 g     F .text	000001d8 UsbGetDeviceDesc2
10012e18 g     O .rwdata	0000016c __global_locale
1000f2a8 g     F .text	00000084 alt_load
10000920 g     F .text	0000004c sub_byte
1000b544 g     F .text	0000007c fputwc
10006df4 g     F .text	00000004 __sinit_lock_acquire
1000860c g     F .text	00000114 __multadd
100085e8 g     F .text	00000024 _Bfree
10000284 g     F .text	000003d4 aes_encrypt



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08408e14 	ori	at,at,568
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001c40 	call	100001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
10000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0ffff17 	ldw	r3,-4(fp)
10000130:	e0bffe17 	ldw	r2,-8(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001126 	beq	r2,zero,10000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	e0bffd17 	ldw	r2,-12(fp)
10000140:	100690fa 	slli	r3,r2,3
10000144:	00840074 	movhi	r2,4097
10000148:	1885883a 	add	r2,r3,r2
1000014c:	10d91017 	ldw	r3,25664(r2)
10000150:	e0bffd17 	ldw	r2,-12(fp)
10000154:	100890fa 	slli	r4,r2,3
10000158:	00840074 	movhi	r2,4097
1000015c:	2085883a 	add	r2,r4,r2
10000160:	10991117 	ldw	r2,25668(r2)
10000164:	1009883a 	mov	r4,r2
10000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
1000016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
10000170:	0005313a 	rdctl	r2,ipending
10000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
10000178:	e0bffb17 	ldw	r2,-20(fp)
1000017c:	00000706 	br	1000019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
10000180:	e0bffe17 	ldw	r2,-8(fp)
10000184:	1085883a 	add	r2,r2,r2
10000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
1000018c:	e0bffd17 	ldw	r2,-12(fp)
10000190:	10800044 	addi	r2,r2,1
10000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
10000198:	003fe406 	br	1000012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
1000019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
100001a0:	e0bfff17 	ldw	r2,-4(fp)
100001a4:	103fde1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a8:	0001883a 	nop
}
100001ac:	0001883a 	nop
100001b0:	e037883a 	mov	sp,fp
100001b4:	dfc00117 	ldw	ra,4(sp)
100001b8:	df000017 	ldw	fp,0(sp)
100001bc:	dec00204 	addi	sp,sp,8
100001c0:	f800283a 	ret

100001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001c4:	defffb04 	addi	sp,sp,-20
100001c8:	dfc00415 	stw	ra,16(sp)
100001cc:	df000315 	stw	fp,12(sp)
100001d0:	df000304 	addi	fp,sp,12
100001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001d8:	000531fa 	rdctl	r2,exception
100001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001e0:	e0bfff17 	ldw	r2,-4(fp)
100001e4:	1004d0ba 	srli	r2,r2,2
100001e8:	108007cc 	andi	r2,r2,31
100001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001f0:	0005333a 	rdctl	r2,badaddr
100001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f8:	d0a8a217 	ldw	r2,-23928(gp)
100001fc:	10000726 	beq	r2,zero,1000021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10000200:	d0a8a217 	ldw	r2,-23928(gp)
10000204:	e0ffff17 	ldw	r3,-4(fp)
10000208:	e1bffe17 	ldw	r6,-8(fp)
1000020c:	e17ffd17 	ldw	r5,-12(fp)
10000210:	1809883a 	mov	r4,r3
10000214:	103ee83a 	callr	r2
10000218:	00000206 	br	10000224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
1000021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000220:	0005883a 	mov	r2,zero
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

Disassembly of section .text:

10000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
1000023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000244:	00bffd16 	blt	zero,r2,1000023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000248:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
1000024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000250:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000254:	d6b06314 	ori	gp,gp,49548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000258:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
1000025c:	1098f914 	ori	r2,r2,25572

    movhi r3, %hi(__bss_end)
10000260:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000264:	18d95014 	ori	r3,r3,25920

    beq r2, r3, 1f
10000268:	10c00326 	beq	r2,r3,10000278 <_start+0x40>

0:
    stw zero, (r2)
1000026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000274:	10fffd36 	bltu	r2,r3,1000026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000278:	000f2a80 	call	1000f2a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
1000027c:	000f43c0 	call	1000f43c <alt_main>

10000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000280:	003fff06 	br	10000280 <alt_after_alt_main>

10000284 <aes_encrypt>:
[0 1]  [1 1] ...
[0 2]  ...
[0 3] ...
*/

void aes_encrypt(uint8_t* data_in, uint32_t* data_out, uint32_t* keyarr) {
10000284:	deffd404 	addi	sp,sp,-176
10000288:	dfc02b15 	stw	ra,172(sp)
1000028c:	df002a15 	stw	fp,168(sp)
10000290:	ddc02915 	stw	r23,164(sp)
10000294:	dd802815 	stw	r22,160(sp)
10000298:	dd402715 	stw	r21,156(sp)
1000029c:	dd002615 	stw	r20,152(sp)
100002a0:	dcc02515 	stw	r19,148(sp)
100002a4:	dc802415 	stw	r18,144(sp)
100002a8:	dc402315 	stw	r17,140(sp)
100002ac:	dc002215 	stw	r16,136(sp)
100002b0:	df002a04 	addi	fp,sp,168
100002b4:	e13fdb15 	stw	r4,-148(fp)
100002b8:	e17fda15 	stw	r5,-152(fp)
100002bc:	e1bfd915 	stw	r6,-156(fp)
100002c0:	d809883a 	mov	r4,sp
100002c4:	202f883a 	mov	r23,r4
	aes_state state; // = malloc(sizeof(uint32_t) * 4); //Flattened.
	aes_state state_in; // = malloc(sizeof(uint32_t) * 4); //Temporary.
	// Generate round keys.
	
	uint32_t key_out[(CNST_AES_NR+1)][CNST_AES_NB];
100002c8:	01000104 	movi	r4,4
100002cc:	21003fcc 	andi	r4,r4,255
100002d0:	213fffc4 	addi	r4,r4,-1
100002d4:	e13ff615 	stw	r4,-40(fp)
100002d8:	01000104 	movi	r4,4
100002dc:	21003fcc 	andi	r4,r4,255
100002e0:	200f883a 	mov	r7,r4
100002e4:	0011883a 	mov	r8,zero
100002e8:	3808d6fa 	srli	r4,r7,27
100002ec:	4006917a 	slli	r3,r8,5
100002f0:	20c6b03a 	or	r3,r4,r3
100002f4:	3804917a 	slli	r2,r7,5
100002f8:	00800104 	movi	r2,4
100002fc:	10803fcc 	andi	r2,r2,255
10000300:	102890ba 	slli	r20,r2,2
10000304:	00800284 	movi	r2,10
10000308:	10803fcc 	andi	r2,r2,255
1000030c:	e0bff515 	stw	r2,-44(fp)
10000310:	00800104 	movi	r2,4
10000314:	10803fcc 	andi	r2,r2,255
10000318:	1013883a 	mov	r9,r2
1000031c:	0015883a 	mov	r10,zero
10000320:	00800284 	movi	r2,10
10000324:	10803fcc 	andi	r2,r2,255
10000328:	10800044 	addi	r2,r2,1
1000032c:	1017883a 	mov	r11,r2
10000330:	0019883a 	mov	r12,zero
10000334:	580d883a 	mov	r6,r11
10000338:	600f883a 	mov	r7,r12
1000033c:	4809883a 	mov	r4,r9
10000340:	500b883a 	mov	r5,r10
10000344:	00028840 	call	10002884 <__muldi3>
10000348:	1009883a 	mov	r4,r2
1000034c:	180b883a 	mov	r5,r3
10000350:	2005883a 	mov	r2,r4
10000354:	2807883a 	mov	r3,r5
10000358:	1008d6fa 	srli	r4,r2,27
1000035c:	1826917a 	slli	r19,r3,5
10000360:	24e6b03a 	or	r19,r4,r19
10000364:	1024917a 	slli	r18,r2,5
10000368:	00800104 	movi	r2,4
1000036c:	10803fcc 	andi	r2,r2,255
10000370:	102b883a 	mov	r21,r2
10000374:	002d883a 	mov	r22,zero
10000378:	00800284 	movi	r2,10
1000037c:	10803fcc 	andi	r2,r2,255
10000380:	10800044 	addi	r2,r2,1
10000384:	e0bfd715 	stw	r2,-164(fp)
10000388:	e03fd815 	stw	zero,-160(fp)
1000038c:	e1bfd717 	ldw	r6,-164(fp)
10000390:	e1ffd817 	ldw	r7,-160(fp)
10000394:	a809883a 	mov	r4,r21
10000398:	b00b883a 	mov	r5,r22
1000039c:	00028840 	call	10002884 <__muldi3>
100003a0:	1009883a 	mov	r4,r2
100003a4:	180b883a 	mov	r5,r3
100003a8:	2005883a 	mov	r2,r4
100003ac:	2807883a 	mov	r3,r5
100003b0:	1008d6fa 	srli	r4,r2,27
100003b4:	1822917a 	slli	r17,r3,5
100003b8:	2462b03a 	or	r17,r4,r17
100003bc:	1020917a 	slli	r16,r2,5
100003c0:	00800284 	movi	r2,10
100003c4:	10803fcc 	andi	r2,r2,255
100003c8:	10c00044 	addi	r3,r2,1
100003cc:	00800104 	movi	r2,4
100003d0:	10803fcc 	andi	r2,r2,255
100003d4:	1885383a 	mul	r2,r3,r2
100003d8:	100490ba 	slli	r2,r2,2
100003dc:	108000c4 	addi	r2,r2,3
100003e0:	1004d0ba 	srli	r2,r2,2
100003e4:	100490ba 	slli	r2,r2,2
100003e8:	d8b7c83a 	sub	sp,sp,r2
100003ec:	d8800104 	addi	r2,sp,4
100003f0:	108000c4 	addi	r2,r2,3
100003f4:	1004d0ba 	srli	r2,r2,2
100003f8:	100490ba 	slli	r2,r2,2
100003fc:	e0bff415 	stw	r2,-48(fp)
	key_expansion(&keyarr[0], &key_out[0][0], CNST_AES_NK, CNST_AES_NB, CNST_AES_NR);
10000400:	e0fff417 	ldw	r3,-48(fp)
10000404:	00800104 	movi	r2,4
10000408:	11003fcc 	andi	r4,r2,255
1000040c:	00800104 	movi	r2,4
10000410:	11403fcc 	andi	r5,r2,255
10000414:	00800284 	movi	r2,10
10000418:	10803fcc 	andi	r2,r2,255
1000041c:	d8800015 	stw	r2,0(sp)
10000420:	280f883a 	mov	r7,r5
10000424:	200d883a 	mov	r6,r4
10000428:	180b883a 	mov	r5,r3
1000042c:	e13fd917 	ldw	r4,-156(fp)
10000430:	00006580 	call	10000658 <key_expansion>

	memcpy(state.state8, data_in, sizeof(state));
10000434:	e0ffdb17 	ldw	r3,-148(fp)
10000438:	e0bff004 	addi	r2,fp,-64
1000043c:	1809883a 	mov	r4,r3
10000440:	00c00404 	movi	r3,16
10000444:	180d883a 	mov	r6,r3
10000448:	200b883a 	mov	r5,r4
1000044c:	1009883a 	mov	r4,r2
10000450:	00028e40 	call	100028e4 <memcpy>
	
	add_round_key(state.state32, key_out[0], state_in.state32);
10000454:	e0fff417 	ldw	r3,-48(fp)
10000458:	e13fec04 	addi	r4,fp,-80
1000045c:	e0bff004 	addi	r2,fp,-64
10000460:	200d883a 	mov	r6,r4
10000464:	180b883a 	mov	r5,r3
10000468:	1009883a 	mov	r4,r2
1000046c:	0000dc00 	call	10000dc0 <add_round_key>
	memcpy(&state, &state_in, sizeof(state_in));
10000470:	e0bfec17 	ldw	r2,-80(fp)
10000474:	e0bff015 	stw	r2,-64(fp)
10000478:	e0bfed17 	ldw	r2,-76(fp)
1000047c:	e0bff115 	stw	r2,-60(fp)
10000480:	e0bfee17 	ldw	r2,-72(fp)
10000484:	e0bff215 	stw	r2,-56(fp)
10000488:	e0bfef17 	ldw	r2,-68(fp)
1000048c:	e0bff315 	stw	r2,-52(fp)
	
	aes_state state_in0, state_in1, state_in2, state_in3;
	
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
10000490:	00800044 	movi	r2,1
10000494:	e0bff745 	stb	r2,-35(fp)
10000498:	00003306 	br	10000568 <aes_encrypt+0x2e4>
		// Sub words.
		for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
1000049c:	e03ff785 	stb	zero,-34(fp)
100004a0:	00000d06 	br	100004d8 <aes_encrypt+0x254>
100004a4:	e0bff783 	ldbu	r2,-34(fp)
100004a8:	e0fff004 	addi	r3,fp,-64
100004ac:	100490ba 	slli	r2,r2,2
100004b0:	1889883a 	add	r4,r3,r2
100004b4:	e0bff783 	ldbu	r2,-34(fp)
100004b8:	e0ffe804 	addi	r3,fp,-96
100004bc:	100490ba 	slli	r2,r2,2
100004c0:	1885883a 	add	r2,r3,r2
100004c4:	100b883a 	mov	r5,r2
100004c8:	0000a180 	call	10000a18 <sub_word>
100004cc:	e0bff783 	ldbu	r2,-34(fp)
100004d0:	10800044 	addi	r2,r2,1
100004d4:	e0bff785 	stb	r2,-34(fp)
100004d8:	e0bff783 	ldbu	r2,-34(fp)
100004dc:	10800130 	cmpltui	r2,r2,4
100004e0:	103ff01e 	bne	r2,zero,100004a4 <aes_encrypt+0x220>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Shift Rows.
		shift_rows(state_in0.state8, state_in1.state8);
100004e4:	e0ffe404 	addi	r3,fp,-112
100004e8:	e0bfe804 	addi	r2,fp,-96
100004ec:	180b883a 	mov	r5,r3
100004f0:	1009883a 	mov	r4,r2
100004f4:	00008480 	call	10000848 <shift_rows>
		// memcpy(&state, &state_in, sizeof(state_in));
		
		// Mix Columns.
		mix_columns(state_in1.state8, state_in2.state8);
100004f8:	e0ffe004 	addi	r3,fp,-128
100004fc:	e0bfe404 	addi	r2,fp,-112
10000500:	180b883a 	mov	r5,r3
10000504:	1009883a 	mov	r4,r2
10000508:	0000b040 	call	10000b04 <mix_columns>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Add Round Key
		add_round_key(state_in2.state32, key_out[round], state_in3.state32);
1000050c:	a006d0ba 	srli	r3,r20,2
10000510:	e0bff743 	ldbu	r2,-35(fp)
10000514:	1885383a 	mul	r2,r3,r2
10000518:	100490ba 	slli	r2,r2,2
1000051c:	e0fff417 	ldw	r3,-48(fp)
10000520:	1887883a 	add	r3,r3,r2
10000524:	e13fdc04 	addi	r4,fp,-144
10000528:	e0bfe004 	addi	r2,fp,-128
1000052c:	200d883a 	mov	r6,r4
10000530:	180b883a 	mov	r5,r3
10000534:	1009883a 	mov	r4,r2
10000538:	0000dc00 	call	10000dc0 <add_round_key>
		memcpy(&state, &state_in3, sizeof(state_in3));
1000053c:	e0bfdc17 	ldw	r2,-144(fp)
10000540:	e0bff015 	stw	r2,-64(fp)
10000544:	e0bfdd17 	ldw	r2,-140(fp)
10000548:	e0bff115 	stw	r2,-60(fp)
1000054c:	e0bfde17 	ldw	r2,-136(fp)
10000550:	e0bff215 	stw	r2,-56(fp)
10000554:	e0bfdf17 	ldw	r2,-132(fp)
10000558:	e0bff315 	stw	r2,-52(fp)
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
1000055c:	e0bff743 	ldbu	r2,-35(fp)
10000560:	10800044 	addi	r2,r2,1
10000564:	e0bff745 	stb	r2,-35(fp)
10000568:	00800284 	movi	r2,10
1000056c:	e0fff743 	ldbu	r3,-35(fp)
10000570:	10803fcc 	andi	r2,r2,255
10000574:	18bfc936 	bltu	r3,r2,1000049c <aes_encrypt+0x218>
	}
	
	// Sub words.
	for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
10000578:	e03ff7c5 	stb	zero,-33(fp)
1000057c:	00000d06 	br	100005b4 <aes_encrypt+0x330>
10000580:	e0bff7c3 	ldbu	r2,-33(fp)
10000584:	e0fff004 	addi	r3,fp,-64
10000588:	100490ba 	slli	r2,r2,2
1000058c:	1889883a 	add	r4,r3,r2
10000590:	e0bff7c3 	ldbu	r2,-33(fp)
10000594:	e0ffe804 	addi	r3,fp,-96
10000598:	100490ba 	slli	r2,r2,2
1000059c:	1885883a 	add	r2,r3,r2
100005a0:	100b883a 	mov	r5,r2
100005a4:	0000a180 	call	10000a18 <sub_word>
100005a8:	e0bff7c3 	ldbu	r2,-33(fp)
100005ac:	10800044 	addi	r2,r2,1
100005b0:	e0bff7c5 	stb	r2,-33(fp)
100005b4:	e0bff7c3 	ldbu	r2,-33(fp)
100005b8:	10800130 	cmpltui	r2,r2,4
100005bc:	103ff01e 	bne	r2,zero,10000580 <aes_encrypt+0x2fc>
	//memcpy(&state, &state_in, sizeof(state_in));
	
	// Shift Rows.
	shift_rows(&state_in0.state8, &state_in1.state8);
100005c0:	e0ffe404 	addi	r3,fp,-112
100005c4:	e0bfe804 	addi	r2,fp,-96
100005c8:	180b883a 	mov	r5,r3
100005cc:	1009883a 	mov	r4,r2
100005d0:	00008480 	call	10000848 <shift_rows>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Add Round Key
	add_round_key(&state_in1.state32, &key_out[CNST_AES_NR], &state_in2.state32);
100005d4:	a006d0ba 	srli	r3,r20,2
100005d8:	00800284 	movi	r2,10
100005dc:	10803fcc 	andi	r2,r2,255
100005e0:	1885383a 	mul	r2,r3,r2
100005e4:	100490ba 	slli	r2,r2,2
100005e8:	e0fff417 	ldw	r3,-48(fp)
100005ec:	1887883a 	add	r3,r3,r2
100005f0:	e13fe004 	addi	r4,fp,-128
100005f4:	e0bfe404 	addi	r2,fp,-112
100005f8:	200d883a 	mov	r6,r4
100005fc:	180b883a 	mov	r5,r3
10000600:	1009883a 	mov	r4,r2
10000604:	0000dc00 	call	10000dc0 <add_round_key>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Now everything is ready.
	memcpy(data_out, state_in2.state32, sizeof(state_in2.state32));
10000608:	e0bfe004 	addi	r2,fp,-128
1000060c:	01800404 	movi	r6,16
10000610:	100b883a 	mov	r5,r2
10000614:	e13fda17 	ldw	r4,-152(fp)
10000618:	00028e40 	call	100028e4 <memcpy>
1000061c:	b837883a 	mov	sp,r23
}
10000620:	0001883a 	nop
10000624:	e6fff804 	addi	sp,fp,-32
10000628:	dfc00917 	ldw	ra,36(sp)
1000062c:	df000817 	ldw	fp,32(sp)
10000630:	ddc00717 	ldw	r23,28(sp)
10000634:	dd800617 	ldw	r22,24(sp)
10000638:	dd400517 	ldw	r21,20(sp)
1000063c:	dd000417 	ldw	r20,16(sp)
10000640:	dcc00317 	ldw	r19,12(sp)
10000644:	dc800217 	ldw	r18,8(sp)
10000648:	dc400117 	ldw	r17,4(sp)
1000064c:	dc000017 	ldw	r16,0(sp)
10000650:	dec00a04 	addi	sp,sp,40
10000654:	f800283a 	ret

10000658 <key_expansion>:

// Verified working.
void key_expansion(uint8_t* key_in, uint32_t* key_out, uint8_t Nk, uint8_t Nb, uint8_t Nr) {
10000658:	defff704 	addi	sp,sp,-36
1000065c:	dfc00815 	stw	ra,32(sp)
10000660:	df000715 	stw	fp,28(sp)
10000664:	df000704 	addi	fp,sp,28
10000668:	e13ffd15 	stw	r4,-12(fp)
1000066c:	e17ffc15 	stw	r5,-16(fp)
10000670:	3007883a 	mov	r3,r6
10000674:	3809883a 	mov	r4,r7
10000678:	e0800217 	ldw	r2,8(fp)
1000067c:	e0fffb05 	stb	r3,-20(fp)
10000680:	2007883a 	mov	r3,r4
10000684:	e0fffa05 	stb	r3,-24(fp)
10000688:	e0bff905 	stb	r2,-28(fp)
	uint32_t temp;
	for(uint8_t i=0; i<Nk; i++) {
1000068c:	e03ffec5 	stb	zero,-5(fp)
10000690:	00002b06 	br	10000740 <key_expansion+0xe8>
		key_out[i] = key_in[4*i+3] | (key_in[4*i+2] << 8) | (key_in[4*i+1] << 16) | (key_in[4*i] << 24);
10000694:	e0bffec3 	ldbu	r2,-5(fp)
10000698:	100490ba 	slli	r2,r2,2
1000069c:	108000c4 	addi	r2,r2,3
100006a0:	e0fffd17 	ldw	r3,-12(fp)
100006a4:	1885883a 	add	r2,r3,r2
100006a8:	10800003 	ldbu	r2,0(r2)
100006ac:	10c03fcc 	andi	r3,r2,255
100006b0:	e0bffec3 	ldbu	r2,-5(fp)
100006b4:	100490ba 	slli	r2,r2,2
100006b8:	10800084 	addi	r2,r2,2
100006bc:	e13ffd17 	ldw	r4,-12(fp)
100006c0:	2085883a 	add	r2,r4,r2
100006c4:	10800003 	ldbu	r2,0(r2)
100006c8:	10803fcc 	andi	r2,r2,255
100006cc:	1004923a 	slli	r2,r2,8
100006d0:	1886b03a 	or	r3,r3,r2
100006d4:	e0bffec3 	ldbu	r2,-5(fp)
100006d8:	100490ba 	slli	r2,r2,2
100006dc:	10800044 	addi	r2,r2,1
100006e0:	e13ffd17 	ldw	r4,-12(fp)
100006e4:	2085883a 	add	r2,r4,r2
100006e8:	10800003 	ldbu	r2,0(r2)
100006ec:	10803fcc 	andi	r2,r2,255
100006f0:	1004943a 	slli	r2,r2,16
100006f4:	1886b03a 	or	r3,r3,r2
100006f8:	e0bffec3 	ldbu	r2,-5(fp)
100006fc:	100490ba 	slli	r2,r2,2
10000700:	1009883a 	mov	r4,r2
10000704:	e0bffd17 	ldw	r2,-12(fp)
10000708:	1105883a 	add	r2,r2,r4
1000070c:	10800003 	ldbu	r2,0(r2)
10000710:	10803fcc 	andi	r2,r2,255
10000714:	1004963a 	slli	r2,r2,24
10000718:	1888b03a 	or	r4,r3,r2
1000071c:	e0bffec3 	ldbu	r2,-5(fp)
10000720:	100490ba 	slli	r2,r2,2
10000724:	e0fffc17 	ldw	r3,-16(fp)
10000728:	1885883a 	add	r2,r3,r2
1000072c:	2007883a 	mov	r3,r4
10000730:	10c00015 	stw	r3,0(r2)
	for(uint8_t i=0; i<Nk; i++) {
10000734:	e0bffec3 	ldbu	r2,-5(fp)
10000738:	10800044 	addi	r2,r2,1
1000073c:	e0bffec5 	stb	r2,-5(fp)
10000740:	e0fffec3 	ldbu	r3,-5(fp)
10000744:	e0bffb03 	ldbu	r2,-20(fp)
10000748:	18bfd236 	bltu	r3,r2,10000694 <key_expansion+0x3c>
	}
	uint8_t i = Nk;
1000074c:	e0bffb03 	ldbu	r2,-20(fp)
10000750:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000754:	00003006 	br	10000818 <key_expansion+0x1c0>
		temp = key_out[i-1];
10000758:	e0fffe83 	ldbu	r3,-6(fp)
1000075c:	00900034 	movhi	r2,16384
10000760:	10bfffc4 	addi	r2,r2,-1
10000764:	1885883a 	add	r2,r3,r2
10000768:	100490ba 	slli	r2,r2,2
1000076c:	e0fffc17 	ldw	r3,-16(fp)
10000770:	1885883a 	add	r2,r3,r2
10000774:	10800017 	ldw	r2,0(r2)
10000778:	e0bfff15 	stw	r2,-4(fp)
		if(i % Nk == 0) {
1000077c:	e0bffe83 	ldbu	r2,-6(fp)
10000780:	e0fffb03 	ldbu	r3,-20(fp)
10000784:	10c9203a 	divu	r4,r2,r3
10000788:	20c7383a 	mul	r3,r4,r3
1000078c:	10c5c83a 	sub	r2,r2,r3
10000790:	10803fcc 	andi	r2,r2,255
10000794:	10000f1e 	bne	r2,zero,100007d4 <key_expansion+0x17c>
			temp = sub_word32(rot_word(temp)) ^ Rcon[i/Nk];
10000798:	e13fff17 	ldw	r4,-4(fp)
1000079c:	0000adc0 	call	10000adc <rot_word>
100007a0:	1009883a 	mov	r4,r2
100007a4:	000096c0 	call	1000096c <sub_word32>
100007a8:	1009883a 	mov	r4,r2
100007ac:	e0fffe83 	ldbu	r3,-6(fp)
100007b0:	e0bffb03 	ldbu	r2,-20(fp)
100007b4:	1885203a 	divu	r2,r3,r2
100007b8:	10803fcc 	andi	r2,r2,255
100007bc:	100690ba 	slli	r3,r2,2
100007c0:	00840074 	movhi	r2,4097
100007c4:	1885883a 	add	r2,r3,r2
100007c8:	10896b17 	ldw	r2,9644(r2)
100007cc:	2084f03a 	xor	r2,r4,r2
100007d0:	e0bfff15 	stw	r2,-4(fp)
		}
		key_out[i] = key_out[i-Nk] ^ temp;
100007d4:	e0fffe83 	ldbu	r3,-6(fp)
100007d8:	e0bffb03 	ldbu	r2,-20(fp)
100007dc:	1885c83a 	sub	r2,r3,r2
100007e0:	100490ba 	slli	r2,r2,2
100007e4:	e0fffc17 	ldw	r3,-16(fp)
100007e8:	1885883a 	add	r2,r3,r2
100007ec:	11000017 	ldw	r4,0(r2)
100007f0:	e0bffe83 	ldbu	r2,-6(fp)
100007f4:	100490ba 	slli	r2,r2,2
100007f8:	e0fffc17 	ldw	r3,-16(fp)
100007fc:	1885883a 	add	r2,r3,r2
10000800:	e0ffff17 	ldw	r3,-4(fp)
10000804:	20c6f03a 	xor	r3,r4,r3
10000808:	10c00015 	stw	r3,0(r2)
		++i;
1000080c:	e0bffe83 	ldbu	r2,-6(fp)
10000810:	10800044 	addi	r2,r2,1
10000814:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000818:	e0fffe83 	ldbu	r3,-6(fp)
1000081c:	e13ffa03 	ldbu	r4,-24(fp)
10000820:	e0bff903 	ldbu	r2,-28(fp)
10000824:	10800044 	addi	r2,r2,1
10000828:	2085383a 	mul	r2,r4,r2
1000082c:	18bfca16 	blt	r3,r2,10000758 <key_expansion+0x100>
	}
}
10000830:	0001883a 	nop
10000834:	e037883a 	mov	sp,fp
10000838:	dfc00117 	ldw	ra,4(sp)
1000083c:	df000017 	ldw	fp,0(sp)
10000840:	dec00204 	addi	sp,sp,8
10000844:	f800283a 	ret

10000848 <shift_rows>:

// Verified working.
void shift_rows(uint8_t* in, uint8_t* result) {
10000848:	defffb04 	addi	sp,sp,-20
1000084c:	df000415 	stw	fp,16(sp)
10000850:	df000404 	addi	fp,sp,16
10000854:	e13ffd15 	stw	r4,-12(fp)
10000858:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
1000085c:	e03fff15 	stw	zero,-4(fp)
10000860:	00002706 	br	10000900 <shift_rows+0xb8>
		for(int j=0; j<4; j++) {
10000864:	e03ffe15 	stw	zero,-8(fp)
10000868:	00001f06 	br	100008e8 <shift_rows+0xa0>
			result[j*4+i] = in[((-i+3+j)%4)*4+i];
1000086c:	00c000c4 	movi	r3,3
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	1887c83a 	sub	r3,r3,r2
10000878:	e0bffe17 	ldw	r2,-8(fp)
1000087c:	1887883a 	add	r3,r3,r2
10000880:	00a00034 	movhi	r2,32768
10000884:	108000c4 	addi	r2,r2,3
10000888:	1884703a 	and	r2,r3,r2
1000088c:	1000040e 	bge	r2,zero,100008a0 <shift_rows+0x58>
10000890:	10bfffc4 	addi	r2,r2,-1
10000894:	00ffff04 	movi	r3,-4
10000898:	10c4b03a 	or	r2,r2,r3
1000089c:	10800044 	addi	r2,r2,1
100008a0:	100690ba 	slli	r3,r2,2
100008a4:	e0bfff17 	ldw	r2,-4(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	1007883a 	mov	r3,r2
100008b0:	e0bffd17 	ldw	r2,-12(fp)
100008b4:	10c7883a 	add	r3,r2,r3
100008b8:	e0bffe17 	ldw	r2,-8(fp)
100008bc:	100890ba 	slli	r4,r2,2
100008c0:	e0bfff17 	ldw	r2,-4(fp)
100008c4:	2085883a 	add	r2,r4,r2
100008c8:	1009883a 	mov	r4,r2
100008cc:	e0bffc17 	ldw	r2,-16(fp)
100008d0:	1105883a 	add	r2,r2,r4
100008d4:	18c00003 	ldbu	r3,0(r3)
100008d8:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
100008dc:	e0bffe17 	ldw	r2,-8(fp)
100008e0:	10800044 	addi	r2,r2,1
100008e4:	e0bffe15 	stw	r2,-8(fp)
100008e8:	e0bffe17 	ldw	r2,-8(fp)
100008ec:	10800110 	cmplti	r2,r2,4
100008f0:	103fde1e 	bne	r2,zero,1000086c <shift_rows+0x24>
	for(int i=0; i<4; i++) {
100008f4:	e0bfff17 	ldw	r2,-4(fp)
100008f8:	10800044 	addi	r2,r2,1
100008fc:	e0bfff15 	stw	r2,-4(fp)
10000900:	e0bfff17 	ldw	r2,-4(fp)
10000904:	10800110 	cmplti	r2,r2,4
10000908:	103fd61e 	bne	r2,zero,10000864 <shift_rows+0x1c>
		}
	}
}
1000090c:	0001883a 	nop
10000910:	e037883a 	mov	sp,fp
10000914:	df000017 	ldw	fp,0(sp)
10000918:	dec00104 	addi	sp,sp,4
1000091c:	f800283a 	ret

10000920 <sub_byte>:

uint8_t sub_byte(uint8_t byte_in) {
10000920:	defffe04 	addi	sp,sp,-8
10000924:	df000115 	stw	fp,4(sp)
10000928:	df000104 	addi	fp,sp,4
1000092c:	2005883a 	mov	r2,r4
10000930:	e0bfff05 	stb	r2,-4(fp)
	return aes_sbox[(((byte_in & 0xF0) >> 4) * 16) + (byte_in & 0x0F)];
10000934:	e0bfff03 	ldbu	r2,-4(fp)
10000938:	1004d13a 	srli	r2,r2,4
1000093c:	10803fcc 	andi	r2,r2,255
10000940:	1006913a 	slli	r3,r2,4
10000944:	e0bfff03 	ldbu	r2,-4(fp)
10000948:	108003cc 	andi	r2,r2,15
1000094c:	1887883a 	add	r3,r3,r2
10000950:	00840074 	movhi	r2,4097
10000954:	1885883a 	add	r2,r3,r2
10000958:	1085c603 	ldbu	r2,5912(r2)
}
1000095c:	e037883a 	mov	sp,fp
10000960:	df000017 	ldw	fp,0(sp)
10000964:	dec00104 	addi	sp,sp,4
10000968:	f800283a 	ret

1000096c <sub_word32>:

uint32_t sub_word32(uint32_t word_in) {
1000096c:	defffc04 	addi	sp,sp,-16
10000970:	dfc00315 	stw	ra,12(sp)
10000974:	df000215 	stw	fp,8(sp)
10000978:	df000204 	addi	fp,sp,8
1000097c:	e13ffe15 	stw	r4,-8(fp)
	uint8_t bo_3 = sub_byte((word_in & 0xFF000000) >> 24);
10000980:	e0bffe17 	ldw	r2,-8(fp)
10000984:	1004d63a 	srli	r2,r2,24
10000988:	10803fcc 	andi	r2,r2,255
1000098c:	1009883a 	mov	r4,r2
10000990:	00009200 	call	10000920 <sub_byte>
10000994:	e0bfffc5 	stb	r2,-1(fp)
	uint8_t bo_2 = sub_byte((word_in & 0x00FF0000) >> 16);
10000998:	e0bffe17 	ldw	r2,-8(fp)
1000099c:	1004d43a 	srli	r2,r2,16
100009a0:	10803fcc 	andi	r2,r2,255
100009a4:	1009883a 	mov	r4,r2
100009a8:	00009200 	call	10000920 <sub_byte>
100009ac:	e0bfff85 	stb	r2,-2(fp)
	uint8_t bo_1 = sub_byte((word_in & 0x0000FF00) >> 8);
100009b0:	e0bffe17 	ldw	r2,-8(fp)
100009b4:	1004d23a 	srli	r2,r2,8
100009b8:	10803fcc 	andi	r2,r2,255
100009bc:	1009883a 	mov	r4,r2
100009c0:	00009200 	call	10000920 <sub_byte>
100009c4:	e0bfff45 	stb	r2,-3(fp)
	uint8_t bo_0 = sub_byte((word_in & 0x000000FF));
100009c8:	e0bffe17 	ldw	r2,-8(fp)
100009cc:	10803fcc 	andi	r2,r2,255
100009d0:	1009883a 	mov	r4,r2
100009d4:	00009200 	call	10000920 <sub_byte>
100009d8:	e0bfff05 	stb	r2,-4(fp)

	return (bo_3 << 24) | (bo_2 << 16) | (bo_1 << 8) | bo_0;
100009dc:	e0bfffc3 	ldbu	r2,-1(fp)
100009e0:	1006963a 	slli	r3,r2,24
100009e4:	e0bfff83 	ldbu	r2,-2(fp)
100009e8:	1004943a 	slli	r2,r2,16
100009ec:	1886b03a 	or	r3,r3,r2
100009f0:	e0bfff43 	ldbu	r2,-3(fp)
100009f4:	1004923a 	slli	r2,r2,8
100009f8:	1886b03a 	or	r3,r3,r2
100009fc:	e0bfff03 	ldbu	r2,-4(fp)
10000a00:	1884b03a 	or	r2,r3,r2
}
10000a04:	e037883a 	mov	sp,fp
10000a08:	dfc00117 	ldw	ra,4(sp)
10000a0c:	df000017 	ldw	fp,0(sp)
10000a10:	dec00204 	addi	sp,sp,8
10000a14:	f800283a 	ret

10000a18 <sub_word>:

void sub_word(uint8_t* word_in, uint8_t* word_out) {
10000a18:	defffb04 	addi	sp,sp,-20
10000a1c:	dfc00415 	stw	ra,16(sp)
10000a20:	df000315 	stw	fp,12(sp)
10000a24:	dc000215 	stw	r16,8(sp)
10000a28:	df000304 	addi	fp,sp,12
10000a2c:	e13ffe15 	stw	r4,-8(fp)
10000a30:	e17ffd15 	stw	r5,-12(fp)
	word_out[3] = sub_byte(word_in[3]);
10000a34:	e0bffe17 	ldw	r2,-8(fp)
10000a38:	108000c4 	addi	r2,r2,3
10000a3c:	10800003 	ldbu	r2,0(r2)
10000a40:	10c03fcc 	andi	r3,r2,255
10000a44:	e0bffd17 	ldw	r2,-12(fp)
10000a48:	140000c4 	addi	r16,r2,3
10000a4c:	1809883a 	mov	r4,r3
10000a50:	00009200 	call	10000920 <sub_byte>
10000a54:	80800005 	stb	r2,0(r16)
	word_out[2] = sub_byte(word_in[2]);
10000a58:	e0bffe17 	ldw	r2,-8(fp)
10000a5c:	10800084 	addi	r2,r2,2
10000a60:	10800003 	ldbu	r2,0(r2)
10000a64:	10c03fcc 	andi	r3,r2,255
10000a68:	e0bffd17 	ldw	r2,-12(fp)
10000a6c:	14000084 	addi	r16,r2,2
10000a70:	1809883a 	mov	r4,r3
10000a74:	00009200 	call	10000920 <sub_byte>
10000a78:	80800005 	stb	r2,0(r16)
	word_out[1] = sub_byte(word_in[1]);
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10800044 	addi	r2,r2,1
10000a84:	10800003 	ldbu	r2,0(r2)
10000a88:	10c03fcc 	andi	r3,r2,255
10000a8c:	e0bffd17 	ldw	r2,-12(fp)
10000a90:	14000044 	addi	r16,r2,1
10000a94:	1809883a 	mov	r4,r3
10000a98:	00009200 	call	10000920 <sub_byte>
10000a9c:	80800005 	stb	r2,0(r16)
	word_out[0] = sub_byte(word_in[0]);
10000aa0:	e0bffe17 	ldw	r2,-8(fp)
10000aa4:	10800003 	ldbu	r2,0(r2)
10000aa8:	10803fcc 	andi	r2,r2,255
10000aac:	1009883a 	mov	r4,r2
10000ab0:	00009200 	call	10000920 <sub_byte>
10000ab4:	1007883a 	mov	r3,r2
10000ab8:	e0bffd17 	ldw	r2,-12(fp)
10000abc:	10c00005 	stb	r3,0(r2)
}
10000ac0:	0001883a 	nop
10000ac4:	e6ffff04 	addi	sp,fp,-4
10000ac8:	dfc00217 	ldw	ra,8(sp)
10000acc:	df000117 	ldw	fp,4(sp)
10000ad0:	dc000017 	ldw	r16,0(sp)
10000ad4:	dec00304 	addi	sp,sp,12
10000ad8:	f800283a 	ret

10000adc <rot_word>:

uint32_t rot_word(uint32_t word_in) {
10000adc:	defffe04 	addi	sp,sp,-8
10000ae0:	df000115 	stw	fp,4(sp)
10000ae4:	df000104 	addi	fp,sp,4
10000ae8:	e13fff15 	stw	r4,-4(fp)
	return (((word_in & 0x00FFFFFF) << 8) & 0xFFFFFF00) | ((word_in & 0xFF000000) >> 24);
10000aec:	e0bfff17 	ldw	r2,-4(fp)
10000af0:	1004123a 	roli	r2,r2,8
}
10000af4:	e037883a 	mov	sp,fp
10000af8:	df000017 	ldw	fp,0(sp)
10000afc:	dec00104 	addi	sp,sp,4
10000b00:	f800283a 	ret

10000b04 <mix_columns>:

void mix_columns(uint8_t* mat_in, uint8_t* result) {
10000b04:	defff304 	addi	sp,sp,-52
10000b08:	dfc00c15 	stw	ra,48(sp)
10000b0c:	df000b15 	stw	fp,44(sp)
10000b10:	df000b04 	addi	fp,sp,44
10000b14:	e13ff615 	stw	r4,-40(fp)
10000b18:	e17ff515 	stw	r5,-44(fp)
	uint8_t state_deasm[4][4];	// State_disassembled.
	uint8_t result_deasm[4][4];	// Result disassembled.
	
	memcpy(&state_deasm, mat_in, sizeof(state_deasm));
10000b1c:	e0fff617 	ldw	r3,-40(fp)
10000b20:	e0bffbc4 	addi	r2,fp,-17
10000b24:	1809883a 	mov	r4,r3
10000b28:	00c00404 	movi	r3,16
10000b2c:	180d883a 	mov	r6,r3
10000b30:	200b883a 	mov	r5,r4
10000b34:	1009883a 	mov	r4,r2
10000b38:	00028e40 	call	100028e4 <memcpy>
		
	// Calculate.
	for(uint8_t i=0; i<4; i++) {
10000b3c:	e03fffc5 	stb	zero,-1(fp)
10000b40:	00008f06 	br	10000d80 <mix_columns+0x27c>
		result_deasm[i][3] = 
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b44:	e0bfffc3 	ldbu	r2,-1(fp)
10000b48:	100490ba 	slli	r2,r2,2
10000b4c:	e085883a 	add	r2,fp,r2
10000b50:	10bffc83 	ldbu	r2,-14(r2)
10000b54:	10803fcc 	andi	r2,r2,255
10000b58:	10c001a4 	muli	r3,r2,6
10000b5c:	00840074 	movhi	r2,4097
10000b60:	1885883a 	add	r2,r3,r2
10000b64:	10c7eb03 	ldbu	r3,8108(r2)
10000b68:	e0bfffc3 	ldbu	r2,-1(fp)
10000b6c:	100490ba 	slli	r2,r2,2
10000b70:	e085883a 	add	r2,fp,r2
10000b74:	10bffc43 	ldbu	r2,-15(r2)
10000b78:	10803fcc 	andi	r2,r2,255
10000b7c:	110001a4 	muli	r4,r2,6
10000b80:	00840074 	movhi	r2,4097
10000b84:	2085883a 	add	r2,r4,r2
10000b88:	1087eb43 	ldbu	r2,8109(r2)
		result_deasm[i][3] = 
10000b8c:	1884f03a 	xor	r2,r3,r2
10000b90:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b94:	e0bfffc3 	ldbu	r2,-1(fp)
10000b98:	100490ba 	slli	r2,r2,2
10000b9c:	e085883a 	add	r2,fp,r2
10000ba0:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][3] = 
10000ba4:	1884f03a 	xor	r2,r3,r2
10000ba8:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000bac:	e0bfffc3 	ldbu	r2,-1(fp)
10000bb0:	100490ba 	slli	r2,r2,2
10000bb4:	e085883a 	add	r2,fp,r2
10000bb8:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][3] = 
10000bbc:	e0bfffc3 	ldbu	r2,-1(fp)
10000bc0:	20c6f03a 	xor	r3,r4,r3
10000bc4:	100490ba 	slli	r2,r2,2
10000bc8:	e085883a 	add	r2,fp,r2
10000bcc:	10fff885 	stb	r3,-30(r2)
		result_deasm[i][2] = 
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000bd0:	e0bfffc3 	ldbu	r2,-1(fp)
10000bd4:	100490ba 	slli	r2,r2,2
10000bd8:	e085883a 	add	r2,fp,r2
10000bdc:	10fffc83 	ldbu	r3,-14(r2)
10000be0:	e0bfffc3 	ldbu	r2,-1(fp)
10000be4:	100490ba 	slli	r2,r2,2
10000be8:	e085883a 	add	r2,fp,r2
10000bec:	10bffc43 	ldbu	r2,-15(r2)
10000bf0:	10803fcc 	andi	r2,r2,255
10000bf4:	110001a4 	muli	r4,r2,6
10000bf8:	00840074 	movhi	r2,4097
10000bfc:	2085883a 	add	r2,r4,r2
10000c00:	1087eb03 	ldbu	r2,8108(r2)
		result_deasm[i][2] = 
10000c04:	1884f03a 	xor	r2,r3,r2
10000c08:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c10:	100490ba 	slli	r2,r2,2
10000c14:	e085883a 	add	r2,fp,r2
10000c18:	10bffc03 	ldbu	r2,-16(r2)
10000c1c:	10803fcc 	andi	r2,r2,255
10000c20:	10c001a4 	muli	r3,r2,6
10000c24:	00840074 	movhi	r2,4097
10000c28:	1885883a 	add	r2,r3,r2
10000c2c:	1087eb43 	ldbu	r2,8109(r2)
		result_deasm[i][2] = 
10000c30:	2084f03a 	xor	r2,r4,r2
10000c34:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c38:	e0bfffc3 	ldbu	r2,-1(fp)
10000c3c:	100490ba 	slli	r2,r2,2
10000c40:	e085883a 	add	r2,fp,r2
10000c44:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][2] = 
10000c48:	e0bfffc3 	ldbu	r2,-1(fp)
10000c4c:	20c6f03a 	xor	r3,r4,r3
10000c50:	100490ba 	slli	r2,r2,2
10000c54:	e085883a 	add	r2,fp,r2
10000c58:	10fff845 	stb	r3,-31(r2)
		result_deasm[i][1] = 
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c5c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c60:	100490ba 	slli	r2,r2,2
10000c64:	e085883a 	add	r2,fp,r2
10000c68:	10fffc83 	ldbu	r3,-14(r2)
10000c6c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c70:	100490ba 	slli	r2,r2,2
10000c74:	e085883a 	add	r2,fp,r2
10000c78:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][1] = 
10000c7c:	1884f03a 	xor	r2,r3,r2
10000c80:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c84:	e0bfffc3 	ldbu	r2,-1(fp)
10000c88:	100490ba 	slli	r2,r2,2
10000c8c:	e085883a 	add	r2,fp,r2
10000c90:	10bffc03 	ldbu	r2,-16(r2)
10000c94:	10803fcc 	andi	r2,r2,255
10000c98:	10c001a4 	muli	r3,r2,6
10000c9c:	00840074 	movhi	r2,4097
10000ca0:	1885883a 	add	r2,r3,r2
10000ca4:	1087eb03 	ldbu	r2,8108(r2)
		result_deasm[i][1] = 
10000ca8:	2084f03a 	xor	r2,r4,r2
10000cac:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000cb0:	e0bfffc3 	ldbu	r2,-1(fp)
10000cb4:	100490ba 	slli	r2,r2,2
10000cb8:	e085883a 	add	r2,fp,r2
10000cbc:	10bffbc3 	ldbu	r2,-17(r2)
10000cc0:	10803fcc 	andi	r2,r2,255
10000cc4:	10c001a4 	muli	r3,r2,6
10000cc8:	00840074 	movhi	r2,4097
10000ccc:	1885883a 	add	r2,r3,r2
10000cd0:	10c7eb43 	ldbu	r3,8109(r2)
		result_deasm[i][1] = 
10000cd4:	e0bfffc3 	ldbu	r2,-1(fp)
10000cd8:	20c6f03a 	xor	r3,r4,r3
10000cdc:	100490ba 	slli	r2,r2,2
10000ce0:	e085883a 	add	r2,fp,r2
10000ce4:	10fff805 	stb	r3,-32(r2)
		result_deasm[i][0] = 
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000ce8:	e0bfffc3 	ldbu	r2,-1(fp)
10000cec:	100490ba 	slli	r2,r2,2
10000cf0:	e085883a 	add	r2,fp,r2
10000cf4:	10bffc83 	ldbu	r2,-14(r2)
10000cf8:	10803fcc 	andi	r2,r2,255
10000cfc:	10c001a4 	muli	r3,r2,6
10000d00:	00840074 	movhi	r2,4097
10000d04:	1885883a 	add	r2,r3,r2
10000d08:	10c7eb43 	ldbu	r3,8109(r2)
10000d0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d10:	100490ba 	slli	r2,r2,2
10000d14:	e085883a 	add	r2,fp,r2
10000d18:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][0] = 
10000d1c:	1884f03a 	xor	r2,r3,r2
10000d20:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d24:	e0bfffc3 	ldbu	r2,-1(fp)
10000d28:	100490ba 	slli	r2,r2,2
10000d2c:	e085883a 	add	r2,fp,r2
10000d30:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][0] = 
10000d34:	1884f03a 	xor	r2,r3,r2
10000d38:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d3c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d40:	100490ba 	slli	r2,r2,2
10000d44:	e085883a 	add	r2,fp,r2
10000d48:	10bffbc3 	ldbu	r2,-17(r2)
10000d4c:	10803fcc 	andi	r2,r2,255
10000d50:	10c001a4 	muli	r3,r2,6
10000d54:	00840074 	movhi	r2,4097
10000d58:	1885883a 	add	r2,r3,r2
10000d5c:	10c7eb03 	ldbu	r3,8108(r2)
		result_deasm[i][0] = 
10000d60:	e0bfffc3 	ldbu	r2,-1(fp)
10000d64:	20c6f03a 	xor	r3,r4,r3
10000d68:	100490ba 	slli	r2,r2,2
10000d6c:	e085883a 	add	r2,fp,r2
10000d70:	10fff7c5 	stb	r3,-33(r2)
	for(uint8_t i=0; i<4; i++) {
10000d74:	e0bfffc3 	ldbu	r2,-1(fp)
10000d78:	10800044 	addi	r2,r2,1
10000d7c:	e0bfffc5 	stb	r2,-1(fp)
10000d80:	e0bfffc3 	ldbu	r2,-1(fp)
10000d84:	10800130 	cmpltui	r2,r2,4
10000d88:	103f6e1e 	bne	r2,zero,10000b44 <mix_columns+0x40>
	}
	
	memcpy(result, &result_deasm, sizeof(state_deasm));
10000d8c:	e0bff517 	ldw	r2,-44(fp)
10000d90:	1009883a 	mov	r4,r2
10000d94:	e0bff7c4 	addi	r2,fp,-33
10000d98:	00c00404 	movi	r3,16
10000d9c:	180d883a 	mov	r6,r3
10000da0:	100b883a 	mov	r5,r2
10000da4:	00028e40 	call	100028e4 <memcpy>
}
10000da8:	0001883a 	nop
10000dac:	e037883a 	mov	sp,fp
10000db0:	dfc00117 	ldw	ra,4(sp)
10000db4:	df000017 	ldw	fp,0(sp)
10000db8:	dec00204 	addi	sp,sp,8
10000dbc:	f800283a 	ret

10000dc0 <add_round_key>:

// Each have a shape of uint32_t[4]
void add_round_key(uint32_t* state, uint32_t* round_key, uint32_t* result) {
10000dc0:	defffc04 	addi	sp,sp,-16
10000dc4:	df000315 	stw	fp,12(sp)
10000dc8:	df000304 	addi	fp,sp,12
10000dcc:	e13fff15 	stw	r4,-4(fp)
10000dd0:	e17ffe15 	stw	r5,-8(fp)
10000dd4:	e1bffd15 	stw	r6,-12(fp)
	result[0] = state[0] ^ round_key[0];
10000dd8:	e0bfff17 	ldw	r2,-4(fp)
10000ddc:	10c00017 	ldw	r3,0(r2)
10000de0:	e0bffe17 	ldw	r2,-8(fp)
10000de4:	10800017 	ldw	r2,0(r2)
10000de8:	1886f03a 	xor	r3,r3,r2
10000dec:	e0bffd17 	ldw	r2,-12(fp)
10000df0:	10c00015 	stw	r3,0(r2)
	result[1] = state[1] ^ round_key[1];
10000df4:	e0bfff17 	ldw	r2,-4(fp)
10000df8:	10800104 	addi	r2,r2,4
10000dfc:	11000017 	ldw	r4,0(r2)
10000e00:	e0bffe17 	ldw	r2,-8(fp)
10000e04:	10800104 	addi	r2,r2,4
10000e08:	10c00017 	ldw	r3,0(r2)
10000e0c:	e0bffd17 	ldw	r2,-12(fp)
10000e10:	10800104 	addi	r2,r2,4
10000e14:	20c6f03a 	xor	r3,r4,r3
10000e18:	10c00015 	stw	r3,0(r2)
	result[2] = state[2] ^ round_key[2];
10000e1c:	e0bfff17 	ldw	r2,-4(fp)
10000e20:	10800204 	addi	r2,r2,8
10000e24:	11000017 	ldw	r4,0(r2)
10000e28:	e0bffe17 	ldw	r2,-8(fp)
10000e2c:	10800204 	addi	r2,r2,8
10000e30:	10c00017 	ldw	r3,0(r2)
10000e34:	e0bffd17 	ldw	r2,-12(fp)
10000e38:	10800204 	addi	r2,r2,8
10000e3c:	20c6f03a 	xor	r3,r4,r3
10000e40:	10c00015 	stw	r3,0(r2)
	result[3] = state[3] ^ round_key[3];
10000e44:	e0bfff17 	ldw	r2,-4(fp)
10000e48:	10800304 	addi	r2,r2,12
10000e4c:	11000017 	ldw	r4,0(r2)
10000e50:	e0bffe17 	ldw	r2,-8(fp)
10000e54:	10800304 	addi	r2,r2,12
10000e58:	10c00017 	ldw	r3,0(r2)
10000e5c:	e0bffd17 	ldw	r2,-12(fp)
10000e60:	10800304 	addi	r2,r2,12
10000e64:	20c6f03a 	xor	r3,r4,r3
10000e68:	10c00015 	stw	r3,0(r2)
}
10000e6c:	0001883a 	nop
10000e70:	e037883a 	mov	sp,fp
10000e74:	df000017 	ldw	fp,0(sp)
10000e78:	dec00104 	addi	sp,sp,4
10000e7c:	f800283a 	ret

10000e80 <transpose>:

void transpose(uint8_t* arr_in, uint8_t* arr_out) {
10000e80:	defffb04 	addi	sp,sp,-20
10000e84:	df000415 	stw	fp,16(sp)
10000e88:	df000404 	addi	fp,sp,16
10000e8c:	e13ffd15 	stw	r4,-12(fp)
10000e90:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
10000e94:	e03fff15 	stw	zero,-4(fp)
10000e98:	00001b06 	br	10000f08 <transpose+0x88>
		for(int j=0; j<4; j++) {
10000e9c:	e03ffe15 	stw	zero,-8(fp)
10000ea0:	00001306 	br	10000ef0 <transpose+0x70>
			arr_out[j*4+i] = arr_in[i*4+j];
10000ea4:	e0bfff17 	ldw	r2,-4(fp)
10000ea8:	100690ba 	slli	r3,r2,2
10000eac:	e0bffe17 	ldw	r2,-8(fp)
10000eb0:	1885883a 	add	r2,r3,r2
10000eb4:	1007883a 	mov	r3,r2
10000eb8:	e0bffd17 	ldw	r2,-12(fp)
10000ebc:	10c7883a 	add	r3,r2,r3
10000ec0:	e0bffe17 	ldw	r2,-8(fp)
10000ec4:	100890ba 	slli	r4,r2,2
10000ec8:	e0bfff17 	ldw	r2,-4(fp)
10000ecc:	2085883a 	add	r2,r4,r2
10000ed0:	1009883a 	mov	r4,r2
10000ed4:	e0bffc17 	ldw	r2,-16(fp)
10000ed8:	1105883a 	add	r2,r2,r4
10000edc:	18c00003 	ldbu	r3,0(r3)
10000ee0:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
10000ee4:	e0bffe17 	ldw	r2,-8(fp)
10000ee8:	10800044 	addi	r2,r2,1
10000eec:	e0bffe15 	stw	r2,-8(fp)
10000ef0:	e0bffe17 	ldw	r2,-8(fp)
10000ef4:	10800110 	cmplti	r2,r2,4
10000ef8:	103fea1e 	bne	r2,zero,10000ea4 <transpose+0x24>
	for(int i=0; i<4; i++) {
10000efc:	e0bfff17 	ldw	r2,-4(fp)
10000f00:	10800044 	addi	r2,r2,1
10000f04:	e0bfff15 	stw	r2,-4(fp)
10000f08:	e0bfff17 	ldw	r2,-4(fp)
10000f0c:	10800110 	cmplti	r2,r2,4
10000f10:	103fe21e 	bne	r2,zero,10000e9c <transpose+0x1c>
		}
	}
}
10000f14:	0001883a 	nop
10000f18:	e037883a 	mov	sp,fp
10000f1c:	df000017 	ldw	fp,0(sp)
10000f20:	dec00104 	addi	sp,sp,4
10000f24:	f800283a 	ret

10000f28 <game_tick>:
#include "core.h"
#include "hardware.h"
#include "tile_eng_driver.h"
#include <stdint.h>

void game_tick() {
10000f28:	deffc004 	addi	sp,sp,-256
10000f2c:	dfc03f15 	stw	ra,252(sp)
10000f30:	df003e15 	stw	fp,248(sp)
10000f34:	df003e04 	addi	fp,sp,248
	palette_ptr[0b00000] = 0x117180;
10000f38:	00c02004 	movi	r3,128
10000f3c:	00800474 	movhi	r2,17
10000f40:	109c6004 	addi	r2,r2,29056
10000f44:	18800015 	stw	r2,0(r3)
	palette_ptr[0b00001] = 0x6EECFF;
10000f48:	00c02104 	movi	r3,132
10000f4c:	00801bf4 	movhi	r2,111
10000f50:	10bb3fc4 	addi	r2,r2,-4865
10000f54:	18800015 	stw	r2,0(r3)
	palette_ptr[0b00010] = 0x1BB4CC;
10000f58:	00c02204 	movi	r3,136
10000f5c:	00800734 	movhi	r2,28
10000f60:	10ad3304 	addi	r2,r2,-19252
10000f64:	18800015 	stw	r2,0(r3)
	palette_ptr[0b00011] = 0x21E3FF;
10000f68:	00c02304 	movi	r3,140
10000f6c:	008008b4 	movhi	r2,34
10000f70:	10b8ffc4 	addi	r2,r2,-7169
10000f74:	18800015 	stw	r2,0(r3)

	Palette newPalette;
	newPalette.paletteId = 1;
10000f78:	00800044 	movi	r2,1
10000f7c:	e0bff605 	stb	r2,-40(fp)
	newPalette.colors[0] = 0x723E80;
10000f80:	00801cb4 	movhi	r2,114
10000f84:	108fa004 	addi	r2,r2,16000
10000f88:	e0bff715 	stw	r2,-36(fp)
	newPalette.colors[1] = 0xF3C7FF;
10000f8c:	00803d34 	movhi	r2,244
10000f90:	10b1ffc4 	addi	r2,r2,-14337
10000f94:	e0bff815 	stw	r2,-32(fp)
	newPalette.colors[2] = 0x796380;
10000f98:	00801e74 	movhi	r2,121
10000f9c:	1098e004 	addi	r2,r2,25472
10000fa0:	e0bff915 	stw	r2,-28(fp)
	newPalette.colors[3] = 0xE57DFF;
10000fa4:	00803974 	movhi	r2,229
10000fa8:	109f7fc4 	addi	r2,r2,32255
10000fac:	e0bffa15 	stw	r2,-24(fp)
	writePalette(newPalette);
10000fb0:	e0bffa17 	ldw	r2,-24(fp)
10000fb4:	d8800015 	stw	r2,0(sp)
10000fb8:	e13ff617 	ldw	r4,-40(fp)
10000fbc:	e17ff717 	ldw	r5,-36(fp)
10000fc0:	e1bff817 	ldw	r6,-32(fp)
10000fc4:	e1fff917 	ldw	r7,-28(fp)
10000fc8:	00014300 	call	10001430 <writePalette>

	Palette newPalette2;
	newPalette2.paletteId = 2;
10000fcc:	00800084 	movi	r2,2
10000fd0:	e0bff105 	stb	r2,-60(fp)
	newPalette2.colors[0] = 0x2F802E;
10000fd4:	00800c34 	movhi	r2,48
10000fd8:	10a00b84 	addi	r2,r2,-32722
10000fdc:	e0bff215 	stw	r2,-56(fp)
	newPalette2.colors[3] = 0x5EFF5B;
10000fe0:	008017f4 	movhi	r2,95
10000fe4:	10bfd6c4 	addi	r2,r2,-165
10000fe8:	e0bff515 	stw	r2,-44(fp)
	writePalette(newPalette2);
10000fec:	e0bff517 	ldw	r2,-44(fp)
10000ff0:	d8800015 	stw	r2,0(sp)
10000ff4:	e13ff117 	ldw	r4,-60(fp)
10000ff8:	e17ff217 	ldw	r5,-56(fp)
10000ffc:	e1bff317 	ldw	r6,-52(fp)
10001000:	e1fff417 	ldw	r7,-48(fp)
10001004:	00014300 	call	10001430 <writePalette>

	Palette newPalette3;
	newPalette3.paletteId = 3;
10001008:	008000c4 	movi	r2,3
1000100c:	e0bfec05 	stb	r2,-80(fp)
	newPalette3.colors[0] = 0x805E1B;
10001010:	00802034 	movhi	r2,128
10001014:	109786c4 	addi	r2,r2,24091
10001018:	e0bfed15 	stw	r2,-76(fp)
	newPalette3.colors[3] = 0xFFBC36;
1000101c:	00804034 	movhi	r2,256
10001020:	10af0d84 	addi	r2,r2,-17354
10001024:	e0bff015 	stw	r2,-64(fp)
	writePalette(newPalette3);
10001028:	e0bff017 	ldw	r2,-64(fp)
1000102c:	d8800015 	stw	r2,0(sp)
10001030:	e13fec17 	ldw	r4,-80(fp)
10001034:	e17fed17 	ldw	r5,-76(fp)
10001038:	e1bfee17 	ldw	r6,-72(fp)
1000103c:	e1ffef17 	ldw	r7,-68(fp)
10001040:	00014300 	call	10001430 <writePalette>

	Sprite wavey;
	wavey.sprite_id = 0;
10001044:	e03fe38d 	sth	zero,-114(fp)
	char wavey_mat[16][8] = {
10001048:	e0ffc384 	addi	r3,fp,-242
1000104c:	00840074 	movhi	r2,4097
10001050:	10864a84 	addi	r2,r2,6442
10001054:	01002004 	movi	r4,128
10001058:	200d883a 	mov	r6,r4
1000105c:	100b883a 	mov	r5,r2
10001060:	1809883a 	mov	r4,r3
10001064:	00028e40 	call	100028e4 <memcpy>
			"#       ",
			"        ",
			"        ",
	};

	parseSprite(&wavey, wavey_mat);
10001068:	e0ffc384 	addi	r3,fp,-242
1000106c:	e0bfe384 	addi	r2,fp,-114
10001070:	180b883a 	mov	r5,r3
10001074:	1009883a 	mov	r4,r2
10001078:	00015c00 	call	100015c0 <parseSprite>
	for(int i=0;i<15;i++) {
1000107c:	e03fff15 	stw	zero,-4(fp)
10001080:	00000c06 	br	100010b4 <game_tick+0x18c>
		printf("%04x\n",wavey.lines[i]);
10001084:	e0bfff17 	ldw	r2,-4(fp)
10001088:	1085883a 	add	r2,r2,r2
1000108c:	e085883a 	add	r2,fp,r2
10001090:	10bfe40b 	ldhu	r2,-112(r2)
10001094:	10bfffcc 	andi	r2,r2,65535
10001098:	100b883a 	mov	r5,r2
1000109c:	01040074 	movhi	r4,4097
100010a0:	21064604 	addi	r4,r4,6424
100010a4:	0002a140 	call	10002a14 <printf>
	for(int i=0;i<15;i++) {
100010a8:	e0bfff17 	ldw	r2,-4(fp)
100010ac:	10800044 	addi	r2,r2,1
100010b0:	e0bfff15 	stw	r2,-4(fp)
100010b4:	e0bfff17 	ldw	r2,-4(fp)
100010b8:	108003d0 	cmplti	r2,r2,15
100010bc:	103ff11e 	bne	r2,zero,10001084 <game_tick+0x15c>
	}
	printf("\n\n");
100010c0:	01040074 	movhi	r4,4097
100010c4:	21064804 	addi	r4,r4,6432
100010c8:	0002b180 	call	10002b18 <puts>

	writeSprite(&wavey);
100010cc:	e0bfe384 	addi	r2,fp,-114
100010d0:	1009883a 	mov	r4,r2
100010d4:	00016380 	call	10001638 <writeSprite>
	printf("\n\n");
100010d8:	01040074 	movhi	r4,4097
100010dc:	21064804 	addi	r4,r4,6432
100010e0:	0002b180 	call	10002b18 <puts>

	for(int i=0;i<8;i++) {
100010e4:	e03ffe15 	stw	zero,-8(fp)
100010e8:	00000b06 	br	10001118 <game_tick+0x1f0>
		printf("%08x\n",spriteram_ptr[i]);
100010ec:	e0bffe17 	ldw	r2,-8(fp)
100010f0:	100490ba 	slli	r2,r2,2
100010f4:	10860004 	addi	r2,r2,6144
100010f8:	10800017 	ldw	r2,0(r2)
100010fc:	100b883a 	mov	r5,r2
10001100:	01040074 	movhi	r4,4097
10001104:	21064904 	addi	r4,r4,6436
10001108:	0002a140 	call	10002a14 <printf>
	for(int i=0;i<8;i++) {
1000110c:	e0bffe17 	ldw	r2,-8(fp)
10001110:	10800044 	addi	r2,r2,1
10001114:	e0bffe15 	stw	r2,-8(fp)
10001118:	e0bffe17 	ldw	r2,-8(fp)
1000111c:	10800210 	cmplti	r2,r2,8
10001120:	103ff21e 	bne	r2,zero,100010ec <game_tick+0x1c4>
	}

	// spriteram_ptr[0] = 0xFFFFFFFF;
	// spriteram_ptr[1] = 0xAAAAAAAA;
	uint8_t counter = 0;
10001124:	e03ffdc5 	stb	zero,-9(fp)
	for(int i=0; i<80; i++) {
10001128:	e03ffc15 	stw	zero,-16(fp)
1000112c:	00001406 	br	10001180 <game_tick+0x258>
		for(int j=0; j<30; j++) {
10001130:	e03ffb15 	stw	zero,-20(fp)
10001134:	00000c06 	br	10001168 <game_tick+0x240>
			drawTile(i,j,0,128);
10001138:	01c02004 	movi	r7,128
1000113c:	000d883a 	mov	r6,zero
10001140:	e17ffb17 	ldw	r5,-20(fp)
10001144:	e13ffc17 	ldw	r4,-16(fp)
10001148:	00013340 	call	10001334 <drawTile>
			counter = (counter+1) & 0x7F;
1000114c:	e0bffdc3 	ldbu	r2,-9(fp)
10001150:	10800044 	addi	r2,r2,1
10001154:	10801fcc 	andi	r2,r2,127
10001158:	e0bffdc5 	stb	r2,-9(fp)
		for(int j=0; j<30; j++) {
1000115c:	e0bffb17 	ldw	r2,-20(fp)
10001160:	10800044 	addi	r2,r2,1
10001164:	e0bffb15 	stw	r2,-20(fp)
10001168:	e0bffb17 	ldw	r2,-20(fp)
1000116c:	10800790 	cmplti	r2,r2,30
10001170:	103ff11e 	bne	r2,zero,10001138 <game_tick+0x210>
	for(int i=0; i<80; i++) {
10001174:	e0bffc17 	ldw	r2,-16(fp)
10001178:	10800044 	addi	r2,r2,1
1000117c:	e0bffc15 	stw	r2,-16(fp)
10001180:	e0bffc17 	ldw	r2,-16(fp)
10001184:	10801410 	cmplti	r2,r2,80
10001188:	103fe91e 	bne	r2,zero,10001130 <game_tick+0x208>
		}
	}
}
1000118c:	0001883a 	nop
10001190:	e037883a 	mov	sp,fp
10001194:	dfc00117 	ldw	ra,4(sp)
10001198:	df000017 	ldw	fp,0(sp)
1000119c:	dec00204 	addi	sp,sp,8
100011a0:	f800283a 	ret

100011a4 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
100011a4:	deffff04 	addi	sp,sp,-4
100011a8:	df000015 	stw	fp,0(sp)
100011ac:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100011b0:	00801404 	movi	r2,80
100011b4:	00c00044 	movi	r3,1
100011b8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100011bc:	00801804 	movi	r2,96
100011c0:	00c00044 	movi	r3,1
100011c4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100011c8:	00804004 	movi	r2,256
100011cc:	00c00044 	movi	r3,1
100011d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100011d4:	00801c04 	movi	r2,112
100011d8:	00c00044 	movi	r3,1
100011dc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100011e0:	00801004 	movi	r2,64
100011e4:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100011e8:	00804404 	movi	r2,272
100011ec:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100011f0:	00801804 	movi	r2,96
100011f4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100011f8:	00801404 	movi	r2,80
100011fc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10001200:	00801404 	movi	r2,80
10001204:	00c00044 	movi	r3,1
10001208:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000120c:	00801804 	movi	r2,96
10001210:	00c00044 	movi	r3,1
10001214:	10c00005 	stb	r3,0(r2)
}
10001218:	0001883a 	nop
1000121c:	e037883a 	mov	sp,fp
10001220:	df000017 	ldw	fp,0(sp)
10001224:	dec00104 	addi	sp,sp,4
10001228:	f800283a 	ret

1000122c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
1000122c:	defffd04 	addi	sp,sp,-12
10001230:	df000215 	stw	fp,8(sp)
10001234:	df000204 	addi	fp,sp,8
10001238:	2005883a 	mov	r2,r4
1000123c:	2807883a 	mov	r3,r5
10001240:	e0bfff05 	stb	r2,-4(fp)
10001244:	1805883a 	mov	r2,r3
10001248:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
1000124c:	00801004 	movi	r2,64
10001250:	e0ffff03 	ldbu	r3,-4(fp)
10001254:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10001258:	00804404 	movi	r2,272
1000125c:	e0fffe0b 	ldhu	r3,-8(fp)
10001260:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10001264:	00801804 	movi	r2,96
10001268:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
1000126c:	00801c04 	movi	r2,112
10001270:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10001274:	00801c04 	movi	r2,112
10001278:	00c00044 	movi	r3,1
1000127c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001280:	00801804 	movi	r2,96
10001284:	00c00044 	movi	r3,1
10001288:	10c00005 	stb	r3,0(r2)
	//printf("Wrote %x to HPI %d\n", Data, Address);
}
1000128c:	0001883a 	nop
10001290:	e037883a 	mov	sp,fp
10001294:	df000017 	ldw	fp,0(sp)
10001298:	dec00104 	addi	sp,sp,4
1000129c:	f800283a 	ret

100012a0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100012a0:	defffd04 	addi	sp,sp,-12
100012a4:	df000215 	stw	fp,8(sp)
100012a8:	df000204 	addi	fp,sp,8
100012ac:	2005883a 	mov	r2,r4
100012b0:	e0bffe05 	stb	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
100012b4:	00801004 	movi	r2,64
100012b8:	e0fffe03 	ldbu	r3,-8(fp)
100012bc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100012c0:	00801804 	movi	r2,96
100012c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100012c8:	00804004 	movi	r2,256
100012cc:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100012d0:	00804404 	movi	r2,272
100012d4:	10800017 	ldw	r2,0(r2)
100012d8:	e0bfff8d 	sth	r2,-2(fp)
	*otg_hpi_r = 1;
100012dc:	00804004 	movi	r2,256
100012e0:	00c00044 	movi	r3,1
100012e4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100012e8:	00801804 	movi	r2,96
100012ec:	00c00044 	movi	r3,1
100012f0:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	//printf("Read %x from HPI %d\n", temp, Address);
	return temp;
100012f4:	e0bfff8b 	ldhu	r2,-2(fp)
}
100012f8:	e037883a 	mov	sp,fp
100012fc:	df000017 	ldw	fp,0(sp)
10001300:	dec00104 	addi	sp,sp,4
10001304:	f800283a 	ret

10001308 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10001308:	defffe04 	addi	sp,sp,-8
1000130c:	dfc00115 	stw	ra,4(sp)
10001310:	df000015 	stw	fp,0(sp)
10001314:	d839883a 	mov	fp,sp
	game_tick();
10001318:	0000f280 	call	10000f28 <game_tick>
	return 0;
1000131c:	0005883a 	mov	r2,zero
		}

	}//end while

	return 0;
}
10001320:	e037883a 	mov	sp,fp
10001324:	dfc00117 	ldw	ra,4(sp)
10001328:	df000017 	ldw	fp,0(sp)
1000132c:	dec00204 	addi	sp,sp,8
10001330:	f800283a 	ret

10001334 <drawTile>:

#include "hardware.h"
#include "tile_eng_driver.h"
#include <stdint.h>

void drawTile(int x, int y, int paletteId, int spriteId) {
10001334:	defffa04 	addi	sp,sp,-24
10001338:	df000515 	stw	fp,20(sp)
1000133c:	df000504 	addi	fp,sp,20
10001340:	e13ffe15 	stw	r4,-8(fp)
10001344:	e17ffd15 	stw	r5,-12(fp)
10001348:	e1bffc15 	stw	r6,-16(fp)
1000134c:	e1fffb15 	stw	r7,-20(fp)
	uint16_t tt_addr = ((y & 0xFF)<<8) | (x & 0xFF);
10001350:	e0bffd17 	ldw	r2,-12(fp)
10001354:	1004923a 	slli	r2,r2,8
10001358:	1007883a 	mov	r3,r2
1000135c:	e0bffe17 	ldw	r2,-8(fp)
10001360:	10803fcc 	andi	r2,r2,255
10001364:	1884b03a 	or	r2,r3,r2
10001368:	e0bfff8d 	sth	r2,-2(fp)
	uint16_t tt_data = ((paletteId & 0x7)<<8) | (spriteId & 0xFF);
1000136c:	e0bffc17 	ldw	r2,-16(fp)
10001370:	1004923a 	slli	r2,r2,8
10001374:	1081c00c 	andi	r2,r2,1792
10001378:	1007883a 	mov	r3,r2
1000137c:	e0bffb17 	ldw	r2,-20(fp)
10001380:	10803fcc 	andi	r2,r2,255
10001384:	1884b03a 	or	r2,r3,r2
10001388:	e0bfff0d 	sth	r2,-4(fp)
	tiletable_ptr[tt_addr] = tt_data;
1000138c:	e0bfff8b 	ldhu	r2,-2(fp)
10001390:	100690ba 	slli	r3,r2,2
10001394:	00a00014 	movui	r2,32768
10001398:	1885883a 	add	r2,r3,r2
1000139c:	e0ffff0b 	ldhu	r3,-4(fp)
100013a0:	10c00015 	stw	r3,0(r2)
}
100013a4:	0001883a 	nop
100013a8:	e037883a 	mov	sp,fp
100013ac:	df000017 	ldw	fp,0(sp)
100013b0:	dec00104 	addi	sp,sp,4
100013b4:	f800283a 	ret

100013b8 <writePaletteHelper>:

// Internal function. Can be used but no need.
void writePaletteHelper(uint8_t paletteId, uint8_t colorIndex, int rgbColor) {
100013b8:	defffb04 	addi	sp,sp,-20
100013bc:	df000415 	stw	fp,16(sp)
100013c0:	df000404 	addi	fp,sp,16
100013c4:	2005883a 	mov	r2,r4
100013c8:	2807883a 	mov	r3,r5
100013cc:	e1bffc15 	stw	r6,-16(fp)
100013d0:	e0bffe05 	stb	r2,-8(fp)
100013d4:	1805883a 	mov	r2,r3
100013d8:	e0bffd05 	stb	r2,-12(fp)
	uint8_t paletteAddr = ((paletteId & 0x7) << 2) | (colorIndex & 0x3);
100013dc:	e0bffe03 	ldbu	r2,-8(fp)
100013e0:	100490ba 	slli	r2,r2,2
100013e4:	1080070c 	andi	r2,r2,28
100013e8:	1007883a 	mov	r3,r2
100013ec:	e0bffd03 	ldbu	r2,-12(fp)
100013f0:	108000cc 	andi	r2,r2,3
100013f4:	1884b03a 	or	r2,r3,r2
100013f8:	e0bfffc5 	stb	r2,-1(fp)
	palette_ptr[paletteAddr] = rgbColor & 0x00FFFFFF;
100013fc:	e0bfffc3 	ldbu	r2,-1(fp)
10001400:	100490ba 	slli	r2,r2,2
10001404:	10c02004 	addi	r3,r2,128
10001408:	e13ffc17 	ldw	r4,-16(fp)
1000140c:	00804034 	movhi	r2,256
10001410:	10bfffc4 	addi	r2,r2,-1
10001414:	2084703a 	and	r2,r4,r2
10001418:	18800015 	stw	r2,0(r3)
}
1000141c:	0001883a 	nop
10001420:	e037883a 	mov	sp,fp
10001424:	df000017 	ldw	fp,0(sp)
10001428:	dec00104 	addi	sp,sp,4
1000142c:	f800283a 	ret

10001430 <writePalette>:

// Write an entire palette to the palette storage.
void writePalette(Palette toWrite) {
10001430:	defffa04 	addi	sp,sp,-24
10001434:	dfc00115 	stw	ra,4(sp)
10001438:	df000015 	stw	fp,0(sp)
1000143c:	d839883a 	mov	fp,sp
10001440:	e1000215 	stw	r4,8(fp)
10001444:	e1400315 	stw	r5,12(fp)
10001448:	e1800415 	stw	r6,16(fp)
1000144c:	e1c00515 	stw	r7,20(fp)
	writePaletteHelper(toWrite.paletteId, 0, toWrite.colors[0]);
10001450:	e0800203 	ldbu	r2,8(fp)
10001454:	10803fcc 	andi	r2,r2,255
10001458:	e0c00317 	ldw	r3,12(fp)
1000145c:	180d883a 	mov	r6,r3
10001460:	000b883a 	mov	r5,zero
10001464:	1009883a 	mov	r4,r2
10001468:	00013b80 	call	100013b8 <writePaletteHelper>
	writePaletteHelper(toWrite.paletteId, 1, toWrite.colors[1]);
1000146c:	e0800203 	ldbu	r2,8(fp)
10001470:	10803fcc 	andi	r2,r2,255
10001474:	e0c00417 	ldw	r3,16(fp)
10001478:	180d883a 	mov	r6,r3
1000147c:	01400044 	movi	r5,1
10001480:	1009883a 	mov	r4,r2
10001484:	00013b80 	call	100013b8 <writePaletteHelper>
	writePaletteHelper(toWrite.paletteId, 2, toWrite.colors[2]);
10001488:	e0800203 	ldbu	r2,8(fp)
1000148c:	10803fcc 	andi	r2,r2,255
10001490:	e0c00517 	ldw	r3,20(fp)
10001494:	180d883a 	mov	r6,r3
10001498:	01400084 	movi	r5,2
1000149c:	1009883a 	mov	r4,r2
100014a0:	00013b80 	call	100013b8 <writePaletteHelper>
	writePaletteHelper(toWrite.paletteId, 3, toWrite.colors[3]);
100014a4:	e0800203 	ldbu	r2,8(fp)
100014a8:	10803fcc 	andi	r2,r2,255
100014ac:	e0c00617 	ldw	r3,24(fp)
100014b0:	180d883a 	mov	r6,r3
100014b4:	014000c4 	movi	r5,3
100014b8:	1009883a 	mov	r4,r2
100014bc:	00013b80 	call	100013b8 <writePaletteHelper>
}
100014c0:	0001883a 	nop
100014c4:	e037883a 	mov	sp,fp
100014c8:	dfc00117 	ldw	ra,4(sp)
100014cc:	df000017 	ldw	fp,0(sp)
100014d0:	dec00604 	addi	sp,sp,24
100014d4:	f800283a 	ret

100014d8 <parseSpriteLine>:

// " " - 00, "@" - 01. "#" - 10, "*" - 11.
void parseSpriteLine(Sprite *sprite, uint8_t linenum, char data[8]) {
100014d8:	defffb04 	addi	sp,sp,-20
100014dc:	df000415 	stw	fp,16(sp)
100014e0:	df000404 	addi	fp,sp,16
100014e4:	e13ffe15 	stw	r4,-8(fp)
100014e8:	2805883a 	mov	r2,r5
100014ec:	e1bffc15 	stw	r6,-16(fp)
100014f0:	e0bffd05 	stb	r2,-12(fp)
	uint16_t result_line;
	for(uint8_t i=0; i<8; i++) {
100014f4:	e03fff45 	stb	zero,-3(fp)
100014f8:	00002306 	br	10001588 <parseSpriteLine+0xb0>
		switch(data[i]) {
100014fc:	e0bfff43 	ldbu	r2,-3(fp)
10001500:	e0fffc17 	ldw	r3,-16(fp)
10001504:	1885883a 	add	r2,r3,r2
10001508:	10800003 	ldbu	r2,0(r2)
1000150c:	10803fcc 	andi	r2,r2,255
10001510:	1080201c 	xori	r2,r2,128
10001514:	10bfe004 	addi	r2,r2,-128
10001518:	10c00aa0 	cmpeqi	r3,r2,42
1000151c:	1800051e 	bne	r3,zero,10001534 <parseSpriteLine+0x5c>
10001520:	10c01020 	cmpeqi	r3,r2,64
10001524:	18000d1e 	bne	r3,zero,1000155c <parseSpriteLine+0x84>
10001528:	108008e0 	cmpeqi	r2,r2,35
1000152c:	1000061e 	bne	r2,zero,10001548 <parseSpriteLine+0x70>
10001530:	00000f06 	br	10001570 <parseSpriteLine+0x98>
			case '*': {
				result_line = (result_line<<2) | 0b11;
10001534:	e0bfff8b 	ldhu	r2,-2(fp)
10001538:	100490ba 	slli	r2,r2,2
1000153c:	108000d4 	ori	r2,r2,3
10001540:	e0bfff8d 	sth	r2,-2(fp)
				break;
10001544:	00000d06 	br	1000157c <parseSpriteLine+0xa4>
			}
			case '#': {
				result_line = (result_line<<2) | 0b10;
10001548:	e0bfff8b 	ldhu	r2,-2(fp)
1000154c:	100490ba 	slli	r2,r2,2
10001550:	10800094 	ori	r2,r2,2
10001554:	e0bfff8d 	sth	r2,-2(fp)
				break;
10001558:	00000806 	br	1000157c <parseSpriteLine+0xa4>
			}
			case '@': {
				result_line = (result_line<<2) | 0b01;
1000155c:	e0bfff8b 	ldhu	r2,-2(fp)
10001560:	100490ba 	slli	r2,r2,2
10001564:	10800054 	ori	r2,r2,1
10001568:	e0bfff8d 	sth	r2,-2(fp)
				break;
1000156c:	00000306 	br	1000157c <parseSpriteLine+0xa4>
			}
			default: {
				result_line = (result_line<<2) | 0b00;
10001570:	e0bfff8b 	ldhu	r2,-2(fp)
10001574:	100490ba 	slli	r2,r2,2
10001578:	e0bfff8d 	sth	r2,-2(fp)
	for(uint8_t i=0; i<8; i++) {
1000157c:	e0bfff43 	ldbu	r2,-3(fp)
10001580:	10800044 	addi	r2,r2,1
10001584:	e0bfff45 	stb	r2,-3(fp)
10001588:	e0bfff43 	ldbu	r2,-3(fp)
1000158c:	10800230 	cmpltui	r2,r2,8
10001590:	103fda1e 	bne	r2,zero,100014fc <parseSpriteLine+0x24>
			}
		}
	}
	sprite -> lines[linenum] = result_line;
10001594:	e0bffd03 	ldbu	r2,-12(fp)
10001598:	e0fffe17 	ldw	r3,-8(fp)
1000159c:	1085883a 	add	r2,r2,r2
100015a0:	1885883a 	add	r2,r3,r2
100015a4:	e0ffff8b 	ldhu	r3,-2(fp)
100015a8:	10c0008d 	sth	r3,2(r2)
}
100015ac:	0001883a 	nop
100015b0:	e037883a 	mov	sp,fp
100015b4:	df000017 	ldw	fp,0(sp)
100015b8:	dec00104 	addi	sp,sp,4
100015bc:	f800283a 	ret

100015c0 <parseSprite>:

// Parses all 128 characters in a custom sprite
void parseSprite(Sprite *target, char datas[16][8]) {
100015c0:	defffb04 	addi	sp,sp,-20
100015c4:	dfc00415 	stw	ra,16(sp)
100015c8:	df000315 	stw	fp,12(sp)
100015cc:	df000304 	addi	fp,sp,12
100015d0:	e13ffe15 	stw	r4,-8(fp)
100015d4:	e17ffd15 	stw	r5,-12(fp)
	for(int i=0; i<16; i++) {
100015d8:	e03fff15 	stw	zero,-4(fp)
100015dc:	00000d06 	br	10001614 <parseSprite+0x54>
		parseSpriteLine(target,i,datas[i]);
100015e0:	e0bfff17 	ldw	r2,-4(fp)
100015e4:	11003fcc 	andi	r4,r2,255
100015e8:	e0bfff17 	ldw	r2,-4(fp)
100015ec:	100490fa 	slli	r2,r2,3
100015f0:	e0fffd17 	ldw	r3,-12(fp)
100015f4:	1885883a 	add	r2,r3,r2
100015f8:	100d883a 	mov	r6,r2
100015fc:	200b883a 	mov	r5,r4
10001600:	e13ffe17 	ldw	r4,-8(fp)
10001604:	00014d80 	call	100014d8 <parseSpriteLine>
	for(int i=0; i<16; i++) {
10001608:	e0bfff17 	ldw	r2,-4(fp)
1000160c:	10800044 	addi	r2,r2,1
10001610:	e0bfff15 	stw	r2,-4(fp)
10001614:	e0bfff17 	ldw	r2,-4(fp)
10001618:	10800410 	cmplti	r2,r2,16
1000161c:	103ff01e 	bne	r2,zero,100015e0 <parseSprite+0x20>
	}
}
10001620:	0001883a 	nop
10001624:	e037883a 	mov	sp,fp
10001628:	dfc00117 	ldw	ra,4(sp)
1000162c:	df000017 	ldw	fp,0(sp)
10001630:	dec00204 	addi	sp,sp,8
10001634:	f800283a 	ret

10001638 <writeSprite>:

void writeSprite(Sprite* target) {
10001638:	defffb04 	addi	sp,sp,-20
1000163c:	dfc00415 	stw	ra,16(sp)
10001640:	df000315 	stw	fp,12(sp)
10001644:	df000304 	addi	fp,sp,12
10001648:	e13ffd15 	stw	r4,-12(fp)
	for(int i=0; i<8; i+=1) {
1000164c:	e03fff15 	stw	zero,-4(fp)
10001650:	00002506 	br	100016e8 <writeSprite+0xb0>
		int prepare_dualine = (((int)(target->lines[2*i]) & 0xFFFF)<< 16) | (((int)(target->lines[2*i+1]) & 0xFFFF));
10001654:	e0bfff17 	ldw	r2,-4(fp)
10001658:	1085883a 	add	r2,r2,r2
1000165c:	e0fffd17 	ldw	r3,-12(fp)
10001660:	1085883a 	add	r2,r2,r2
10001664:	1885883a 	add	r2,r3,r2
10001668:	1080008b 	ldhu	r2,2(r2)
1000166c:	10bfffcc 	andi	r2,r2,65535
10001670:	1006943a 	slli	r3,r2,16
10001674:	e0bfff17 	ldw	r2,-4(fp)
10001678:	1085883a 	add	r2,r2,r2
1000167c:	10800044 	addi	r2,r2,1
10001680:	e13ffd17 	ldw	r4,-12(fp)
10001684:	1085883a 	add	r2,r2,r2
10001688:	2085883a 	add	r2,r4,r2
1000168c:	1080008b 	ldhu	r2,2(r2)
10001690:	10bfffcc 	andi	r2,r2,65535
10001694:	1884b03a 	or	r2,r3,r2
10001698:	e0bffe15 	stw	r2,-8(fp)
		printf("%08x\n",prepare_dualine);
1000169c:	e17ffe17 	ldw	r5,-8(fp)
100016a0:	01040074 	movhi	r4,4097
100016a4:	21066b04 	addi	r4,r4,6572
100016a8:	0002a140 	call	10002a14 <printf>
		spriteram_ptr[((target->sprite_id & 0x3F) << 3) | (i&0x7)] = prepare_dualine;
100016ac:	e0bffd17 	ldw	r2,-12(fp)
100016b0:	1080000b 	ldhu	r2,0(r2)
100016b4:	10bfffcc 	andi	r2,r2,65535
100016b8:	100490fa 	slli	r2,r2,3
100016bc:	10c07e0c 	andi	r3,r2,504
100016c0:	e0bfff17 	ldw	r2,-4(fp)
100016c4:	108001cc 	andi	r2,r2,7
100016c8:	1884b03a 	or	r2,r3,r2
100016cc:	100490ba 	slli	r2,r2,2
100016d0:	10860004 	addi	r2,r2,6144
100016d4:	e0fffe17 	ldw	r3,-8(fp)
100016d8:	10c00015 	stw	r3,0(r2)
	for(int i=0; i<8; i+=1) {
100016dc:	e0bfff17 	ldw	r2,-4(fp)
100016e0:	10800044 	addi	r2,r2,1
100016e4:	e0bfff15 	stw	r2,-4(fp)
100016e8:	e0bfff17 	ldw	r2,-4(fp)
100016ec:	10800210 	cmplti	r2,r2,8
100016f0:	103fd81e 	bne	r2,zero,10001654 <writeSprite+0x1c>
	}
}
100016f4:	0001883a 	nop
100016f8:	e037883a 	mov	sp,fp
100016fc:	dfc00117 	ldw	ra,4(sp)
10001700:	df000017 	ldw	fp,0(sp)
10001704:	dec00204 	addi	sp,sp,8
10001708:	f800283a 	ret

1000170c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000170c:	defffc04 	addi	sp,sp,-16
10001710:	dfc00315 	stw	ra,12(sp)
10001714:	df000215 	stw	fp,8(sp)
10001718:	df000204 	addi	fp,sp,8
1000171c:	2005883a 	mov	r2,r4
10001720:	2807883a 	mov	r3,r5
10001724:	e0bfff0d 	sth	r2,-4(fp)
10001728:	1805883a 	mov	r2,r3
1000172c:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001730:	e0bfff0b 	ldhu	r2,-4(fp)
10001734:	100b883a 	mov	r5,r2
10001738:	01000084 	movi	r4,2
1000173c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA, Data);
10001740:	e0bffe0b 	ldhu	r2,-8(fp)
10001744:	100b883a 	mov	r5,r2
10001748:	0009883a 	mov	r4,zero
1000174c:	000122c0 	call	1000122c <IO_write>
}
10001750:	0001883a 	nop
10001754:	e037883a 	mov	sp,fp
10001758:	dfc00117 	ldw	ra,4(sp)
1000175c:	df000017 	ldw	fp,0(sp)
10001760:	dec00204 	addi	sp,sp,8
10001764:	f800283a 	ret

10001768 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001768:	defffd04 	addi	sp,sp,-12
1000176c:	dfc00215 	stw	ra,8(sp)
10001770:	df000115 	stw	fp,4(sp)
10001774:	df000104 	addi	fp,sp,4
10001778:	2005883a 	mov	r2,r4
1000177c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001780:	e0bfff0b 	ldhu	r2,-4(fp)
10001784:	100b883a 	mov	r5,r2
10001788:	01000084 	movi	r4,2
1000178c:	000122c0 	call	1000122c <IO_write>
	return IO_read(HPI_DATA);
10001790:	0009883a 	mov	r4,zero
10001794:	00012a00 	call	100012a0 <IO_read>
}
10001798:	e037883a 	mov	sp,fp
1000179c:	dfc00117 	ldw	ra,4(sp)
100017a0:	df000017 	ldw	fp,0(sp)
100017a4:	dec00204 	addi	sp,sp,8
100017a8:	f800283a 	ret

100017ac <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100017ac:	defffe04 	addi	sp,sp,-8
100017b0:	dfc00115 	stw	ra,4(sp)
100017b4:	df000015 	stw	fp,0(sp)
100017b8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100017bc:	017e9414 	movui	r5,64080
100017c0:	01000044 	movi	r4,1
100017c4:	000122c0 	call	1000122c <IO_write>
	usleep(100000);
100017c8:	010000b4 	movhi	r4,2
100017cc:	2121a804 	addi	r4,r4,-31072
100017d0:	000f7400 	call	1000f740 <usleep>
	printf("[USB INIT]:reset finished!\n");
100017d4:	01040074 	movhi	r4,4097
100017d8:	21066d04 	addi	r4,r4,6580
100017dc:	0002b180 	call	10002b18 <puts>

	usleep(500000);
100017e0:	01000234 	movhi	r4,8
100017e4:	21284804 	addi	r4,r4,-24288
100017e8:	000f7400 	call	1000f740 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100017ec:	01040074 	movhi	r4,4097
100017f0:	21067404 	addi	r4,r4,6608
100017f4:	0002b180 	call	10002b18 <puts>
	IO_read(HPI_MAILBOX);
100017f8:	01000044 	movi	r4,1
100017fc:	00012a00 	call	100012a0 <IO_read>
	IO_read(HPI_STATUS);
10001800:	010000c4 	movi	r4,3
10001804:	00012a00 	call	100012a0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001808:	01005104 	movi	r4,324
1000180c:	00017680 	call	10001768 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001810:	000b883a 	mov	r5,zero
10001814:	01005104 	movi	r4,324
10001818:	000170c0 	call	1000170c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
1000181c:	01005204 	movi	r4,328
10001820:	00017680 	call	10001768 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001824:	000b883a 	mov	r5,zero
10001828:	01005204 	movi	r4,328
1000182c:	000170c0 	call	1000170c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001830:	017fffd4 	movui	r5,65535
10001834:	01302414 	movui	r4,49296
10001838:	000170c0 	call	1000170c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
1000183c:	017fffd4 	movui	r5,65535
10001840:	01302c14 	movui	r4,49328
10001844:	000170c0 	call	1000170c <UsbWrite>
}
10001848:	0001883a 	nop
1000184c:	e037883a 	mov	sp,fp
10001850:	dfc00117 	ldw	ra,4(sp)
10001854:	df000017 	ldw	fp,0(sp)
10001858:	dec00204 	addi	sp,sp,8
1000185c:	f800283a 	ret

10001860 <UsbSetAddress>:


void UsbSetAddress()
{
10001860:	defffe04 	addi	sp,sp,-8
10001864:	dfc00115 	stw	ra,4(sp)
10001868:	df000015 	stw	fp,0(sp)
1000186c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001870:	01414004 	movi	r5,1280
10001874:	01000084 	movi	r4,2
10001878:	000122c0 	call	1000122c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
1000187c:	01414304 	movi	r5,1292
10001880:	0009883a 	mov	r4,zero
10001884:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001888:	01400204 	movi	r5,8
1000188c:	0009883a 	mov	r4,zero
10001890:	000122c0 	call	1000122c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001894:	01403404 	movi	r5,208
10001898:	0009883a 	mov	r4,zero
1000189c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
100018a0:	01400044 	movi	r5,1
100018a4:	0009883a 	mov	r4,zero
100018a8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
100018ac:	014004c4 	movi	r5,19
100018b0:	0009883a 	mov	r4,zero
100018b4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
100018b8:	01414504 	movi	r5,1300
100018bc:	0009883a 	mov	r4,zero
100018c0:	000122c0 	call	1000122c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100018c4:	01414004 	movi	r5,1280
100018c8:	0009883a 	mov	r4,zero
100018cc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0002);
100018d0:	01400084 	movi	r5,2
100018d4:	0009883a 	mov	r4,zero
100018d8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
100018dc:	000b883a 	mov	r5,zero
100018e0:	0009883a 	mov	r4,zero
100018e4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
100018e8:	000b883a 	mov	r5,zero
100018ec:	0009883a 	mov	r4,zero
100018f0:	000122c0 	call	1000122c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100018f4:	000b883a 	mov	r5,zero
100018f8:	0009883a 	mov	r4,zero
100018fc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001900:	000b883a 	mov	r5,zero
10001904:	0009883a 	mov	r4,zero
10001908:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0090);//
1000190c:	01402404 	movi	r5,144
10001910:	0009883a 	mov	r4,zero
10001914:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);
10001918:	01401044 	movi	r5,65
1000191c:	0009883a 	mov	r4,zero
10001920:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001924:	014004c4 	movi	r5,19
10001928:	0009883a 	mov	r4,zero
1000192c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001930:	000b883a 	mov	r5,zero
10001934:	0009883a 	mov	r4,zero
10001938:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000193c:	01414004 	movi	r5,1280
10001940:	01006c04 	movi	r4,432
10001944:	000170c0 	call	1000170c <UsbWrite>
}
10001948:	0001883a 	nop
1000194c:	e037883a 	mov	sp,fp
10001950:	dfc00117 	ldw	ra,4(sp)
10001954:	df000017 	ldw	fp,0(sp)
10001958:	dec00204 	addi	sp,sp,8
1000195c:	f800283a 	ret

10001960 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001960:	defffe04 	addi	sp,sp,-8
10001964:	dfc00115 	stw	ra,4(sp)
10001968:	df000015 	stw	fp,0(sp)
1000196c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001970:	01414004 	movi	r5,1280
10001974:	01000084 	movi	r4,2
10001978:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
1000197c:	01414304 	movi	r5,1292
10001980:	0009883a 	mov	r4,zero
10001984:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001988:	01400204 	movi	r5,8
1000198c:	0009883a 	mov	r4,zero
10001990:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001994:	0140b404 	movi	r5,720
10001998:	0009883a 	mov	r4,zero
1000199c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
100019a0:	01400044 	movi	r5,1
100019a4:	0009883a 	mov	r4,zero
100019a8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
100019ac:	014004c4 	movi	r5,19
100019b0:	0009883a 	mov	r4,zero
100019b4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
100019b8:	01414504 	movi	r5,1300
100019bc:	0009883a 	mov	r4,zero
100019c0:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100019c4:	0141a004 	movi	r5,1664
100019c8:	0009883a 	mov	r4,zero
100019cc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100019d0:	01404004 	movi	r5,256
100019d4:	0009883a 	mov	r4,zero
100019d8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
100019dc:	000b883a 	mov	r5,zero
100019e0:	0009883a 	mov	r4,zero
100019e4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);
100019e8:	01400204 	movi	r5,8
100019ec:	0009883a 	mov	r4,zero
100019f0:	000122c0 	call	1000122c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100019f4:	01414b04 	movi	r5,1324
100019f8:	0009883a 	mov	r4,zero
100019fc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001a00:	01400204 	movi	r5,8
10001a04:	0009883a 	mov	r4,zero
10001a08:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001a0c:	0140a404 	movi	r5,656
10001a10:	0009883a 	mov	r4,zero
10001a14:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);
10001a18:	01401044 	movi	r5,65
10001a1c:	0009883a 	mov	r4,zero
10001a20:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a24:	014004c4 	movi	r5,19
10001a28:	0009883a 	mov	r4,zero
10001a2c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0520);
10001a30:	01414804 	movi	r5,1312
10001a34:	0009883a 	mov	r4,zero
10001a38:	000122c0 	call	1000122c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001a3c:	000b883a 	mov	r5,zero
10001a40:	0009883a 	mov	r4,zero
10001a44:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001a48:	000b883a 	mov	r5,zero
10001a4c:	0009883a 	mov	r4,zero
10001a50:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001a54:	01408404 	movi	r5,528
10001a58:	0009883a 	mov	r4,zero
10001a5c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);
10001a60:	01401044 	movi	r5,65
10001a64:	0009883a 	mov	r4,zero
10001a68:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a6c:	014004c4 	movi	r5,19
10001a70:	0009883a 	mov	r4,zero
10001a74:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a78:	000b883a 	mov	r5,zero
10001a7c:	0009883a 	mov	r4,zero
10001a80:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a84:	01414004 	movi	r5,1280
10001a88:	01006c04 	movi	r4,432
10001a8c:	000170c0 	call	1000170c <UsbWrite>
}
10001a90:	0001883a 	nop
10001a94:	e037883a 	mov	sp,fp
10001a98:	dfc00117 	ldw	ra,4(sp)
10001a9c:	df000017 	ldw	fp,0(sp)
10001aa0:	dec00204 	addi	sp,sp,8
10001aa4:	f800283a 	ret

10001aa8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001aa8:	defffe04 	addi	sp,sp,-8
10001aac:	dfc00115 	stw	ra,4(sp)
10001ab0:	df000015 	stw	fp,0(sp)
10001ab4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001ab8:	01414004 	movi	r5,1280
10001abc:	01000084 	movi	r4,2
10001ac0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ac4:	01414304 	movi	r5,1292
10001ac8:	0009883a 	mov	r4,zero
10001acc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001ad0:	01400204 	movi	r5,8
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001adc:	0140b404 	movi	r5,720
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ae8:	01400044 	movi	r5,1
10001aec:	0009883a 	mov	r4,zero
10001af0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001af4:	014004c4 	movi	r5,19
10001af8:	0009883a 	mov	r4,zero
10001afc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b00:	01414504 	movi	r5,1300
10001b04:	0009883a 	mov	r4,zero
10001b08:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001b0c:	0141a004 	movi	r5,1664
10001b10:	0009883a 	mov	r4,zero
10001b14:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001b18:	01404004 	movi	r5,256
10001b1c:	0009883a 	mov	r4,zero
10001b20:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001b24:	000b883a 	mov	r5,zero
10001b28:	0009883a 	mov	r4,zero
10001b2c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001b30:	01400484 	movi	r5,18
10001b34:	0009883a 	mov	r4,zero
10001b38:	000122c0 	call	1000122c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001b3c:	01415104 	movi	r5,1348
10001b40:	0009883a 	mov	r4,zero
10001b44:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001b48:	01400204 	movi	r5,8
10001b4c:	0009883a 	mov	r4,zero
10001b50:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001b54:	0140a404 	movi	r5,656
10001b58:	0009883a 	mov	r4,zero
10001b5c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001b60:	01401044 	movi	r5,65
10001b64:	0009883a 	mov	r4,zero
10001b68:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001b6c:	014004c4 	movi	r5,19
10001b70:	0009883a 	mov	r4,zero
10001b74:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001b78:	01414804 	movi	r5,1312
10001b7c:	0009883a 	mov	r4,zero
10001b80:	000122c0 	call	1000122c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001b84:	01415304 	movi	r5,1356
10001b88:	0009883a 	mov	r4,zero
10001b8c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001b90:	01400204 	movi	r5,8
10001b94:	0009883a 	mov	r4,zero
10001b98:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001b9c:	0140a404 	movi	r5,656
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001ba8:	01400044 	movi	r5,1
10001bac:	0009883a 	mov	r4,zero
10001bb0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001bb4:	014004c4 	movi	r5,19
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001bc0:	01414b04 	movi	r5,1324
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	000122c0 	call	1000122c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10001bcc:	01415504 	movi	r5,1364
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001bd8:	01400084 	movi	r5,2
10001bdc:	0009883a 	mov	r4,zero
10001be0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001be4:	0140a404 	movi	r5,656
10001be8:	0009883a 	mov	r4,zero
10001bec:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001bf0:	01401044 	movi	r5,65
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001bfc:	014004c4 	movi	r5,19
10001c00:	0009883a 	mov	r4,zero
10001c04:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001c08:	01414e04 	movi	r5,1336
10001c0c:	0009883a 	mov	r4,zero
10001c10:	000122c0 	call	1000122c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001c14:	000b883a 	mov	r5,zero
10001c18:	0009883a 	mov	r4,zero
10001c1c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001c20:	000b883a 	mov	r5,zero
10001c24:	0009883a 	mov	r4,zero
10001c28:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001c2c:	01408404 	movi	r5,528
10001c30:	0009883a 	mov	r4,zero
10001c34:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001c38:	01401044 	movi	r5,65
10001c3c:	0009883a 	mov	r4,zero
10001c40:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001c44:	014004c4 	movi	r5,19
10001c48:	0009883a 	mov	r4,zero
10001c4c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001c50:	000b883a 	mov	r5,zero
10001c54:	0009883a 	mov	r4,zero
10001c58:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c5c:	01414004 	movi	r5,1280
10001c60:	01006c04 	movi	r4,432
10001c64:	000170c0 	call	1000170c <UsbWrite>
}
10001c68:	0001883a 	nop
10001c6c:	e037883a 	mov	sp,fp
10001c70:	dfc00117 	ldw	ra,4(sp)
10001c74:	df000017 	ldw	fp,0(sp)
10001c78:	dec00204 	addi	sp,sp,8
10001c7c:	f800283a 	ret

10001c80 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001c80:	defffe04 	addi	sp,sp,-8
10001c84:	dfc00115 	stw	ra,4(sp)
10001c88:	df000015 	stw	fp,0(sp)
10001c8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c90:	01414004 	movi	r5,1280
10001c94:	01000084 	movi	r4,2
10001c98:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c9c:	01414304 	movi	r5,1292
10001ca0:	0009883a 	mov	r4,zero
10001ca4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001ca8:	01400204 	movi	r5,8
10001cac:	0009883a 	mov	r4,zero
10001cb0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001cb4:	0140b404 	movi	r5,720
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001cc0:	01400044 	movi	r5,1
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001ccc:	014004c4 	movi	r5,19
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001cd8:	01414504 	movi	r5,1300
10001cdc:	0009883a 	mov	r4,zero
10001ce0:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001ce4:	0141a004 	movi	r5,1664
10001ce8:	0009883a 	mov	r4,zero
10001cec:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001cf0:	01408004 	movi	r5,512
10001cf4:	0009883a 	mov	r4,zero
10001cf8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001cfc:	000b883a 	mov	r5,zero
10001d00:	0009883a 	mov	r4,zero
10001d04:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001d08:	01400244 	movi	r5,9
10001d0c:	0009883a 	mov	r4,zero
10001d10:	000122c0 	call	1000122c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001d14:	01415104 	movi	r5,1348
10001d18:	0009883a 	mov	r4,zero
10001d1c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001d20:	01400204 	movi	r5,8
10001d24:	0009883a 	mov	r4,zero
10001d28:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001d2c:	0140a404 	movi	r5,656
10001d30:	0009883a 	mov	r4,zero
10001d34:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001d38:	01401044 	movi	r5,65
10001d3c:	0009883a 	mov	r4,zero
10001d40:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001d44:	014004c4 	movi	r5,19
10001d48:	0009883a 	mov	r4,zero
10001d4c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001d50:	01414804 	movi	r5,1312
10001d54:	0009883a 	mov	r4,zero
10001d58:	000122c0 	call	1000122c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001d5c:	01415304 	movi	r5,1356
10001d60:	0009883a 	mov	r4,zero
10001d64:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001d68:	01400044 	movi	r5,1
10001d6c:	0009883a 	mov	r4,zero
10001d70:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001d74:	0140a404 	movi	r5,656
10001d78:	0009883a 	mov	r4,zero
10001d7c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001d80:	01400044 	movi	r5,1
10001d84:	0009883a 	mov	r4,zero
10001d88:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001d8c:	014004c4 	movi	r5,19
10001d90:	0009883a 	mov	r4,zero
10001d94:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001d98:	01414b04 	movi	r5,1324
10001d9c:	0009883a 	mov	r4,zero
10001da0:	000122c0 	call	1000122c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001da4:	000b883a 	mov	r5,zero
10001da8:	0009883a 	mov	r4,zero
10001dac:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001db0:	000b883a 	mov	r5,zero
10001db4:	0009883a 	mov	r4,zero
10001db8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001dbc:	01408404 	movi	r5,528
10001dc0:	0009883a 	mov	r4,zero
10001dc4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001dc8:	01401044 	movi	r5,65
10001dcc:	0009883a 	mov	r4,zero
10001dd0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001dd4:	014004c4 	movi	r5,19
10001dd8:	0009883a 	mov	r4,zero
10001ddc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001de0:	000b883a 	mov	r5,zero
10001de4:	0009883a 	mov	r4,zero
10001de8:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001dec:	01414004 	movi	r5,1280
10001df0:	01006c04 	movi	r4,432
10001df4:	000170c0 	call	1000170c <UsbWrite>
}
10001df8:	0001883a 	nop
10001dfc:	e037883a 	mov	sp,fp
10001e00:	dfc00117 	ldw	ra,4(sp)
10001e04:	df000017 	ldw	fp,0(sp)
10001e08:	dec00204 	addi	sp,sp,8
10001e0c:	f800283a 	ret

10001e10 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001e10:	defffe04 	addi	sp,sp,-8
10001e14:	dfc00115 	stw	ra,4(sp)
10001e18:	df000015 	stw	fp,0(sp)
10001e1c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e20:	01414004 	movi	r5,1280
10001e24:	01000084 	movi	r4,2
10001e28:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001e2c:	01414304 	movi	r5,1292
10001e30:	0009883a 	mov	r4,zero
10001e34:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001e38:	01400204 	movi	r5,8
10001e3c:	0009883a 	mov	r4,zero
10001e40:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001e44:	0140b404 	movi	r5,720
10001e48:	0009883a 	mov	r4,zero
10001e4c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001e50:	01400044 	movi	r5,1
10001e54:	0009883a 	mov	r4,zero
10001e58:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e5c:	014004c4 	movi	r5,19
10001e60:	0009883a 	mov	r4,zero
10001e64:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001e68:	01414504 	movi	r5,1300
10001e6c:	0009883a 	mov	r4,zero
10001e70:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001e74:	0141a004 	movi	r5,1664
10001e78:	0009883a 	mov	r4,zero
10001e7c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001e80:	01408004 	movi	r5,512
10001e84:	0009883a 	mov	r4,zero
10001e88:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001e8c:	000b883a 	mov	r5,zero
10001e90:	0009883a 	mov	r4,zero
10001e94:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001e98:	01403fc4 	movi	r5,255
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	000122c0 	call	1000122c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001ea4:	01415704 	movi	r5,1372
10001ea8:	0009883a 	mov	r4,zero
10001eac:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001eb0:	01400204 	movi	r5,8
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ebc:	0140a404 	movi	r5,656
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001ec8:	01401044 	movi	r5,65
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ed4:	014004c4 	movi	r5,19
10001ed8:	0009883a 	mov	r4,zero
10001edc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001ee0:	01414804 	movi	r5,1312
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	000122c0 	call	1000122c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001eec:	01415904 	movi	r5,1380
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001ef8:	01400204 	movi	r5,8
10001efc:	0009883a 	mov	r4,zero
10001f00:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f04:	0140a404 	movi	r5,656
10001f08:	0009883a 	mov	r4,zero
10001f0c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f10:	01400044 	movi	r5,1
10001f14:	0009883a 	mov	r4,zero
10001f18:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f1c:	014004c4 	movi	r5,19
10001f20:	0009883a 	mov	r4,zero
10001f24:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001f28:	01414b04 	movi	r5,1324
10001f2c:	0009883a 	mov	r4,zero
10001f30:	000122c0 	call	1000122c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001f34:	01415b04 	movi	r5,1388
10001f38:	0009883a 	mov	r4,zero
10001f3c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001f40:	01400204 	movi	r5,8
10001f44:	0009883a 	mov	r4,zero
10001f48:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001f4c:	0140a404 	movi	r5,656
10001f50:	0009883a 	mov	r4,zero
10001f54:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001f58:	01401044 	movi	r5,65
10001f5c:	0009883a 	mov	r4,zero
10001f60:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f64:	014004c4 	movi	r5,19
10001f68:	0009883a 	mov	r4,zero
10001f6c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001f70:	01414e04 	movi	r5,1336
10001f74:	0009883a 	mov	r4,zero
10001f78:	000122c0 	call	1000122c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001f7c:	01415d04 	movi	r5,1396
10001f80:	0009883a 	mov	r4,zero
10001f84:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001f88:	01400204 	movi	r5,8
10001f8c:	0009883a 	mov	r4,zero
10001f90:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001f94:	0140a404 	movi	r5,656
10001f98:	0009883a 	mov	r4,zero
10001f9c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001fa0:	01400044 	movi	r5,1
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001fac:	014004c4 	movi	r5,19
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001fb8:	01415104 	movi	r5,1348
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	000122c0 	call	1000122c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001fc4:	01415f04 	movi	r5,1404
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001fd0:	01400084 	movi	r5,2
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001fdc:	0140a404 	movi	r5,656
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001fe8:	01401044 	movi	r5,65
10001fec:	0009883a 	mov	r4,zero
10001ff0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ff4:	014004c4 	movi	r5,19
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002000:	01415404 	movi	r5,1360
10002004:	0009883a 	mov	r4,zero
10002008:	000122c0 	call	1000122c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
1000200c:	000b883a 	mov	r5,zero
10002010:	0009883a 	mov	r4,zero
10002014:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002018:	000b883a 	mov	r5,zero
1000201c:	0009883a 	mov	r4,zero
10002020:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002024:	01408404 	movi	r5,528
10002028:	0009883a 	mov	r4,zero
1000202c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002030:	01401044 	movi	r5,65
10002034:	0009883a 	mov	r4,zero
10002038:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000203c:	014004c4 	movi	r5,19
10002040:	0009883a 	mov	r4,zero
10002044:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002048:	000b883a 	mov	r5,zero
1000204c:	0009883a 	mov	r4,zero
10002050:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002054:	01414004 	movi	r5,1280
10002058:	01006c04 	movi	r4,432
1000205c:	000170c0 	call	1000170c <UsbWrite>
}
10002060:	0001883a 	nop
10002064:	e037883a 	mov	sp,fp
10002068:	dfc00117 	ldw	ra,4(sp)
1000206c:	df000017 	ldw	fp,0(sp)
10002070:	dec00204 	addi	sp,sp,8
10002074:	f800283a 	ret

10002078 <UsbSetConfig>:

void UsbSetConfig()
{
10002078:	defffe04 	addi	sp,sp,-8
1000207c:	dfc00115 	stw	ra,4(sp)
10002080:	df000015 	stw	fp,0(sp)
10002084:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002088:	01414004 	movi	r5,1280
1000208c:	01000084 	movi	r4,2
10002090:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
10002094:	01414304 	movi	r5,1292
10002098:	0009883a 	mov	r4,zero
1000209c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020a0:	01400204 	movi	r5,8
100020a4:	0009883a 	mov	r4,zero
100020a8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100020ac:	0140b404 	movi	r5,720
100020b0:	0009883a 	mov	r4,zero
100020b4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
100020b8:	01400044 	movi	r5,1
100020bc:	0009883a 	mov	r4,zero
100020c0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
100020c4:	014004c4 	movi	r5,19
100020c8:	0009883a 	mov	r4,zero
100020cc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
100020d0:	01414504 	movi	r5,1300
100020d4:	0009883a 	mov	r4,zero
100020d8:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
100020dc:	01424004 	movi	r5,2304
100020e0:	0009883a 	mov	r4,zero
100020e4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100020e8:	01400044 	movi	r5,1
100020ec:	0009883a 	mov	r4,zero
100020f0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
100020f4:	000b883a 	mov	r5,zero
100020f8:	0009883a 	mov	r4,zero
100020fc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
10002100:	000b883a 	mov	r5,zero
10002104:	0009883a 	mov	r4,zero
10002108:	000122c0 	call	1000122c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000210c:	000b883a 	mov	r5,zero
10002110:	0009883a 	mov	r4,zero
10002114:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002118:	000b883a 	mov	r5,zero
1000211c:	0009883a 	mov	r4,zero
10002120:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002124:	0140a404 	movi	r5,656
10002128:	0009883a 	mov	r4,zero
1000212c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002130:	01401044 	movi	r5,65
10002134:	0009883a 	mov	r4,zero
10002138:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
1000213c:	014004c4 	movi	r5,19
10002140:	0009883a 	mov	r4,zero
10002144:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
10002148:	000b883a 	mov	r5,zero
1000214c:	0009883a 	mov	r4,zero
10002150:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002154:	01414004 	movi	r5,1280
10002158:	01006c04 	movi	r4,432
1000215c:	000170c0 	call	1000170c <UsbWrite>

}
10002160:	0001883a 	nop
10002164:	e037883a 	mov	sp,fp
10002168:	dfc00117 	ldw	ra,4(sp)
1000216c:	df000017 	ldw	fp,0(sp)
10002170:	dec00204 	addi	sp,sp,8
10002174:	f800283a 	ret

10002178 <UsbClassRequest>:

void UsbClassRequest()
{
10002178:	defffe04 	addi	sp,sp,-8
1000217c:	dfc00115 	stw	ra,4(sp)
10002180:	df000015 	stw	fp,0(sp)
10002184:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002188:	01414004 	movi	r5,1280
1000218c:	01000084 	movi	r4,2
10002190:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
10002194:	01414304 	movi	r5,1292
10002198:	0009883a 	mov	r4,zero
1000219c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100021a0:	01400204 	movi	r5,8
100021a4:	0009883a 	mov	r4,zero
100021a8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100021ac:	0140b404 	movi	r5,720
100021b0:	0009883a 	mov	r4,zero
100021b4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
100021b8:	01400044 	movi	r5,1
100021bc:	0009883a 	mov	r4,zero
100021c0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
100021c4:	014004c4 	movi	r5,19
100021c8:	0009883a 	mov	r4,zero
100021cc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
100021d0:	01414504 	movi	r5,1300
100021d4:	0009883a 	mov	r4,zero
100021d8:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100021dc:	01428844 	movi	r5,2593
100021e0:	0009883a 	mov	r4,zero
100021e4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100021e8:	000b883a 	mov	r5,zero
100021ec:	0009883a 	mov	r4,zero
100021f0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
100021f4:	000b883a 	mov	r5,zero
100021f8:	0009883a 	mov	r4,zero
100021fc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
10002200:	000b883a 	mov	r5,zero
10002204:	0009883a 	mov	r4,zero
10002208:	000122c0 	call	1000122c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000220c:	000b883a 	mov	r5,zero
10002210:	0009883a 	mov	r4,zero
10002214:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002218:	000b883a 	mov	r5,zero
1000221c:	0009883a 	mov	r4,zero
10002220:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002224:	0140a404 	movi	r5,656
10002228:	0009883a 	mov	r4,zero
1000222c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002230:	01401044 	movi	r5,65
10002234:	0009883a 	mov	r4,zero
10002238:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
1000223c:	014004c4 	movi	r5,19
10002240:	0009883a 	mov	r4,zero
10002244:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);
10002248:	000b883a 	mov	r5,zero
1000224c:	0009883a 	mov	r4,zero
10002250:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002254:	01414004 	movi	r5,1280
10002258:	01006c04 	movi	r4,432
1000225c:	000170c0 	call	1000170c <UsbWrite>
}
10002260:	0001883a 	nop
10002264:	e037883a 	mov	sp,fp
10002268:	dfc00117 	ldw	ra,4(sp)
1000226c:	df000017 	ldw	fp,0(sp)
10002270:	dec00204 	addi	sp,sp,8
10002274:	f800283a 	ret

10002278 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002278:	defffe04 	addi	sp,sp,-8
1000227c:	dfc00115 	stw	ra,4(sp)
10002280:	df000015 	stw	fp,0(sp)
10002284:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002288:	01414004 	movi	r5,1280
1000228c:	01000084 	movi	r4,2
10002290:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
10002294:	01414304 	movi	r5,1292
10002298:	0009883a 	mov	r4,zero
1000229c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100022a0:	01400204 	movi	r5,8
100022a4:	0009883a 	mov	r4,zero
100022a8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100022ac:	0140b404 	movi	r5,720
100022b0:	0009883a 	mov	r4,zero
100022b4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
100022b8:	01400044 	movi	r5,1
100022bc:	0009883a 	mov	r4,zero
100022c0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
100022c4:	014004c4 	movi	r5,19
100022c8:	0009883a 	mov	r4,zero
100022cc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
100022d0:	01414504 	movi	r5,1300
100022d4:	0009883a 	mov	r4,zero
100022d8:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100022dc:	0141a044 	movi	r5,1665
100022e0:	0009883a 	mov	r4,zero
100022e4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100022e8:	01484004 	movi	r5,8448
100022ec:	0009883a 	mov	r4,zero
100022f0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100022f4:	000b883a 	mov	r5,zero
100022f8:	0009883a 	mov	r4,zero
100022fc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002300:	01401ec4 	movi	r5,123
10002304:	0009883a 	mov	r4,zero
10002308:	000122c0 	call	1000122c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000230c:	01415104 	movi	r5,1348
10002310:	0009883a 	mov	r4,zero
10002314:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002318:	01400204 	movi	r5,8
1000231c:	0009883a 	mov	r4,zero
10002320:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002324:	0140a404 	movi	r5,656
10002328:	0009883a 	mov	r4,zero
1000232c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002330:	01401044 	movi	r5,65
10002334:	0009883a 	mov	r4,zero
10002338:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000233c:	014004c4 	movi	r5,19
10002340:	0009883a 	mov	r4,zero
10002344:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002348:	01414804 	movi	r5,1312
1000234c:	0009883a 	mov	r4,zero
10002350:	000122c0 	call	1000122c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002354:	000b883a 	mov	r5,zero
10002358:	0009883a 	mov	r4,zero
1000235c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002360:	000b883a 	mov	r5,zero
10002364:	0009883a 	mov	r4,zero
10002368:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000236c:	01408404 	movi	r5,528
10002370:	0009883a 	mov	r4,zero
10002374:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002378:	01401044 	movi	r5,65
1000237c:	0009883a 	mov	r4,zero
10002380:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002384:	014004c4 	movi	r5,19
10002388:	0009883a 	mov	r4,zero
1000238c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002390:	000b883a 	mov	r5,zero
10002394:	0009883a 	mov	r4,zero
10002398:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000239c:	01414004 	movi	r5,1280
100023a0:	01006c04 	movi	r4,432
100023a4:	000170c0 	call	1000170c <UsbWrite>

}
100023a8:	0001883a 	nop
100023ac:	e037883a 	mov	sp,fp
100023b0:	dfc00117 	ldw	ra,4(sp)
100023b4:	df000017 	ldw	fp,0(sp)
100023b8:	dec00204 	addi	sp,sp,8
100023bc:	f800283a 	ret

100023c0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
100023c0:	defffe04 	addi	sp,sp,-8
100023c4:	dfc00115 	stw	ra,4(sp)
100023c8:	df000015 	stw	fp,0(sp)
100023cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100023d0:	01414004 	movi	r5,1280
100023d4:	01000084 	movi	r4,2
100023d8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x050C);
100023dc:	01414304 	movi	r5,1292
100023e0:	0009883a 	mov	r4,zero
100023e4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100023e8:	01400204 	movi	r5,8
100023ec:	0009883a 	mov	r4,zero
100023f0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100023f4:	0140b404 	movi	r5,720
100023f8:	0009883a 	mov	r4,zero
100023fc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);
10002400:	01400044 	movi	r5,1
10002404:	0009883a 	mov	r4,zero
10002408:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);
1000240c:	014004c4 	movi	r5,19
10002410:	0009883a 	mov	r4,zero
10002414:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0514);
10002418:	01414504 	movi	r5,1300
1000241c:	0009883a 	mov	r4,zero
10002420:	000122c0 	call	1000122c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002424:	0141a044 	movi	r5,1665
10002428:	0009883a 	mov	r4,zero
1000242c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002430:	01488004 	movi	r5,8704
10002434:	0009883a 	mov	r4,zero
10002438:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000243c:	000b883a 	mov	r5,zero
10002440:	0009883a 	mov	r4,zero
10002444:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002448:	01401ec4 	movi	r5,123
1000244c:	0009883a 	mov	r4,zero
10002450:	000122c0 	call	1000122c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002454:	01416004 	movi	r5,1408
10002458:	0009883a 	mov	r4,zero
1000245c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002460:	01400204 	movi	r5,8
10002464:	0009883a 	mov	r4,zero
10002468:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000246c:	0140a404 	movi	r5,656
10002470:	0009883a 	mov	r4,zero
10002474:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002478:	01401044 	movi	r5,65
1000247c:	0009883a 	mov	r4,zero
10002480:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002484:	014004c4 	movi	r5,19
10002488:	0009883a 	mov	r4,zero
1000248c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002490:	01414804 	movi	r5,1312
10002494:	0009883a 	mov	r4,zero
10002498:	000122c0 	call	1000122c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
1000249c:	01416204 	movi	r5,1416
100024a0:	0009883a 	mov	r4,zero
100024a4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100024a8:	01400204 	movi	r5,8
100024ac:	0009883a 	mov	r4,zero
100024b0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100024b4:	0140a404 	movi	r5,656
100024b8:	0009883a 	mov	r4,zero
100024bc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100024c0:	01400044 	movi	r5,1
100024c4:	0009883a 	mov	r4,zero
100024c8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100024cc:	014004c4 	movi	r5,19
100024d0:	0009883a 	mov	r4,zero
100024d4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100024d8:	01414b04 	movi	r5,1324
100024dc:	0009883a 	mov	r4,zero
100024e0:	000122c0 	call	1000122c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100024e4:	01416404 	movi	r5,1424
100024e8:	0009883a 	mov	r4,zero
100024ec:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100024f0:	01400204 	movi	r5,8
100024f4:	0009883a 	mov	r4,zero
100024f8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100024fc:	0140a404 	movi	r5,656
10002500:	0009883a 	mov	r4,zero
10002504:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002508:	01401044 	movi	r5,65
1000250c:	0009883a 	mov	r4,zero
10002510:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002514:	014004c4 	movi	r5,19
10002518:	0009883a 	mov	r4,zero
1000251c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002520:	01414e04 	movi	r5,1336
10002524:	0009883a 	mov	r4,zero
10002528:	000122c0 	call	1000122c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
1000252c:	01416604 	movi	r5,1432
10002530:	0009883a 	mov	r4,zero
10002534:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002538:	01400204 	movi	r5,8
1000253c:	0009883a 	mov	r4,zero
10002540:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002544:	0140a404 	movi	r5,656
10002548:	0009883a 	mov	r4,zero
1000254c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002550:	01400044 	movi	r5,1
10002554:	0009883a 	mov	r4,zero
10002558:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000255c:	014004c4 	movi	r5,19
10002560:	0009883a 	mov	r4,zero
10002564:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002568:	01415104 	movi	r5,1348
1000256c:	0009883a 	mov	r4,zero
10002570:	000122c0 	call	1000122c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002574:	01416804 	movi	r5,1440
10002578:	0009883a 	mov	r4,zero
1000257c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002580:	01400204 	movi	r5,8
10002584:	0009883a 	mov	r4,zero
10002588:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000258c:	0140a404 	movi	r5,656
10002590:	0009883a 	mov	r4,zero
10002594:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002598:	01401044 	movi	r5,65
1000259c:	0009883a 	mov	r4,zero
100025a0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100025a4:	014004c4 	movi	r5,19
100025a8:	0009883a 	mov	r4,zero
100025ac:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100025b0:	01415404 	movi	r5,1360
100025b4:	0009883a 	mov	r4,zero
100025b8:	000122c0 	call	1000122c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100025bc:	01416a04 	movi	r5,1448
100025c0:	0009883a 	mov	r4,zero
100025c4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100025c8:	01400204 	movi	r5,8
100025cc:	0009883a 	mov	r4,zero
100025d0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100025d4:	0140a404 	movi	r5,656
100025d8:	0009883a 	mov	r4,zero
100025dc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100025e0:	01400044 	movi	r5,1
100025e4:	0009883a 	mov	r4,zero
100025e8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100025ec:	014004c4 	movi	r5,19
100025f0:	0009883a 	mov	r4,zero
100025f4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100025f8:	01415704 	movi	r5,1372
100025fc:	0009883a 	mov	r4,zero
10002600:	000122c0 	call	1000122c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002604:	01416c04 	movi	r5,1456
10002608:	0009883a 	mov	r4,zero
1000260c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002610:	01400204 	movi	r5,8
10002614:	0009883a 	mov	r4,zero
10002618:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
1000261c:	0140a404 	movi	r5,656
10002620:	0009883a 	mov	r4,zero
10002624:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002628:	01401044 	movi	r5,65
1000262c:	0009883a 	mov	r4,zero
10002630:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002634:	014004c4 	movi	r5,19
10002638:	0009883a 	mov	r4,zero
1000263c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002640:	01415a04 	movi	r5,1384
10002644:	0009883a 	mov	r4,zero
10002648:	000122c0 	call	1000122c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
1000264c:	01416e04 	movi	r5,1464
10002650:	0009883a 	mov	r4,zero
10002654:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002658:	014000c4 	movi	r5,3
1000265c:	0009883a 	mov	r4,zero
10002660:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002664:	0140a404 	movi	r5,656
10002668:	0009883a 	mov	r4,zero
1000266c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002670:	01400044 	movi	r5,1
10002674:	0009883a 	mov	r4,zero
10002678:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
1000267c:	014004c4 	movi	r5,19
10002680:	0009883a 	mov	r4,zero
10002684:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002688:	01415d04 	movi	r5,1396
1000268c:	0009883a 	mov	r4,zero
10002690:	000122c0 	call	1000122c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002694:	000b883a 	mov	r5,zero
10002698:	0009883a 	mov	r4,zero
1000269c:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100026a0:	000b883a 	mov	r5,zero
100026a4:	0009883a 	mov	r4,zero
100026a8:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100026ac:	01408404 	movi	r5,528
100026b0:	0009883a 	mov	r4,zero
100026b4:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100026b8:	01401044 	movi	r5,65
100026bc:	0009883a 	mov	r4,zero
100026c0:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100026c4:	014004c4 	movi	r5,19
100026c8:	0009883a 	mov	r4,zero
100026cc:	000122c0 	call	1000122c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100026d0:	000b883a 	mov	r5,zero
100026d4:	0009883a 	mov	r4,zero
100026d8:	000122c0 	call	1000122c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100026dc:	01414004 	movi	r5,1280
100026e0:	01006c04 	movi	r4,432
100026e4:	000170c0 	call	1000170c <UsbWrite>

}
100026e8:	0001883a 	nop
100026ec:	e037883a 	mov	sp,fp
100026f0:	dfc00117 	ldw	ra,4(sp)
100026f4:	df000017 	ldw	fp,0(sp)
100026f8:	dec00204 	addi	sp,sp,8
100026fc:	f800283a 	ret

10002700 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002700:	defffd04 	addi	sp,sp,-12
10002704:	dfc00215 	stw	ra,8(sp)
10002708:	df000115 	stw	fp,4(sp)
1000270c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002710:	01005104 	movi	r4,324
10002714:	00017680 	call	10001768 <UsbRead>
10002718:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000271c:	000b883a 	mov	r5,zero
10002720:	01005104 	movi	r4,324
10002724:	000170c0 	call	1000170c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002728:	00000d06 	br	10002760 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
1000272c:	e0bfff8b 	ldhu	r2,-2(fp)
10002730:	10000526 	beq	r2,zero,10002748 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002734:	e0bfff8b 	ldhu	r2,-2(fp)
10002738:	100b883a 	mov	r5,r2
1000273c:	01040074 	movhi	r4,4097
10002740:	21067d04 	addi	r4,r4,6644
10002744:	0002a140 	call	10002a14 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002748:	01005104 	movi	r4,324
1000274c:	00017680 	call	10001768 <UsbRead>
10002750:	e0bfff8d 	sth	r2,-2(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002754:	000b883a 	mov	r5,zero
10002758:	01005104 	movi	r4,324
1000275c:	000170c0 	call	1000170c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002760:	e0bfff8b 	ldhu	r2,-2(fp)
10002764:	10840018 	cmpnei	r2,r2,4096
10002768:	103ff01e 	bne	r2,zero,1000272c <UsbWaitTDListDone+0x2c>
	}

	return usb_ctl_val;
1000276c:	e0bfff8b 	ldhu	r2,-2(fp)
}
10002770:	e037883a 	mov	sp,fp
10002774:	dfc00117 	ldw	ra,4(sp)
10002778:	df000017 	ldw	fp,0(sp)
1000277c:	dec00204 	addi	sp,sp,8
10002780:	f800283a 	ret

10002784 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002784:	defffd04 	addi	sp,sp,-12
10002788:	dfc00215 	stw	ra,8(sp)
1000278c:	df000115 	stw	fp,4(sp)
10002790:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002794:	010000c4 	movi	r4,3
10002798:	00012a00 	call	100012a0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
1000279c:	01005104 	movi	r4,324
100027a0:	00017680 	call	10001768 <UsbRead>
100027a4:	10bfffcc 	andi	r2,r2,65535
100027a8:	10840018 	cmpnei	r2,r2,4096
100027ac:	1000091e 	bne	r2,zero,100027d4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100027b0:	000b883a 	mov	r5,zero
100027b4:	01005104 	movi	r4,324
100027b8:	000170c0 	call	1000170c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100027bc:	0001883a 	nop
100027c0:	010000c4 	movi	r4,3
100027c4:	00012a00 	call	100012a0 <IO_read>
100027c8:	10bfffcc 	andi	r2,r2,65535
100027cc:	1080040c 	andi	r2,r2,16
100027d0:	103ffb26 	beq	r2,zero,100027c0 <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100027d4:	01414204 	movi	r5,1288
100027d8:	01000084 	movi	r4,2
100027dc:	000122c0 	call	1000122c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100027e0:	0009883a 	mov	r4,zero
100027e4:	00012a00 	call	100012a0 <IO_read>
100027e8:	e0bfff8d 	sth	r2,-2(fp)

	return usb_ctl_val;
100027ec:	e0bfff8b 	ldhu	r2,-2(fp)
}
100027f0:	e037883a 	mov	sp,fp
100027f4:	dfc00117 	ldw	ra,4(sp)
100027f8:	df000017 	ldw	fp,0(sp)
100027fc:	dec00204 	addi	sp,sp,8
10002800:	f800283a 	ret

10002804 <UsbPrintMem>:


void UsbPrintMem()
{
10002804:	defffc04 	addi	sp,sp,-16
10002808:	dfc00315 	stw	ra,12(sp)
1000280c:	df000215 	stw	fp,8(sp)
10002810:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002814:	01414004 	movi	r5,1280
10002818:	01000084 	movi	r4,2
1000281c:	000122c0 	call	1000122c <IO_write>
	for (i = 0; i <= 200; i += 2)
10002820:	e03fff15 	stw	zero,-4(fp)
10002824:	00000e06 	br	10002860 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002828:	0009883a 	mov	r4,zero
1000282c:	00012a00 	call	100012a0 <IO_read>
10002830:	10bfffcc 	andi	r2,r2,65535
10002834:	e0bffe15 	stw	r2,-8(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002838:	e0bfff17 	ldw	r2,-4(fp)
1000283c:	10814004 	addi	r2,r2,1280
10002840:	e1bffe17 	ldw	r6,-8(fp)
10002844:	100b883a 	mov	r5,r2
10002848:	01040074 	movhi	r4,4097
1000284c:	21068504 	addi	r4,r4,6676
10002850:	0002a140 	call	10002a14 <printf>
	for (i = 0; i <= 200; i += 2)
10002854:	e0bfff17 	ldw	r2,-4(fp)
10002858:	10800084 	addi	r2,r2,2
1000285c:	e0bfff15 	stw	r2,-4(fp)
10002860:	e0bfff17 	ldw	r2,-4(fp)
10002864:	10803250 	cmplti	r2,r2,201
10002868:	103fef1e 	bne	r2,zero,10002828 <UsbPrintMem+0x24>
	}
}
1000286c:	0001883a 	nop
10002870:	e037883a 	mov	sp,fp
10002874:	dfc00117 	ldw	ra,4(sp)
10002878:	df000017 	ldw	fp,0(sp)
1000287c:	dec00204 	addi	sp,sp,8
10002880:	f800283a 	ret

10002884 <__muldi3>:
10002884:	20bfffcc 	andi	r2,r4,65535
10002888:	2012d43a 	srli	r9,r4,16
1000288c:	32bfffcc 	andi	r10,r6,65535
10002890:	3018d43a 	srli	r12,r6,16
10002894:	1297383a 	mul	r11,r2,r10
10002898:	4a95383a 	mul	r10,r9,r10
1000289c:	1311383a 	mul	r8,r2,r12
100028a0:	5804d43a 	srli	r2,r11,16
100028a4:	4b13383a 	mul	r9,r9,r12
100028a8:	4291883a 	add	r8,r8,r10
100028ac:	1205883a 	add	r2,r2,r8
100028b0:	1280022e 	bgeu	r2,r10,100028bc <__muldi3+0x38>
100028b4:	00c00074 	movhi	r3,1
100028b8:	48d3883a 	add	r9,r9,r3
100028bc:	1010d43a 	srli	r8,r2,16
100028c0:	21c9383a 	mul	r4,r4,r7
100028c4:	314d383a 	mul	r6,r6,r5
100028c8:	1004943a 	slli	r2,r2,16
100028cc:	4253883a 	add	r9,r8,r9
100028d0:	5affffcc 	andi	r11,r11,65535
100028d4:	2249883a 	add	r4,r4,r9
100028d8:	12c5883a 	add	r2,r2,r11
100028dc:	2187883a 	add	r3,r4,r6
100028e0:	f800283a 	ret

100028e4 <memcpy>:
100028e4:	30c00430 	cmpltui	r3,r6,16
100028e8:	2005883a 	mov	r2,r4
100028ec:	18002d1e 	bne	r3,zero,100029a4 <memcpy+0xc0>
100028f0:	2906b03a 	or	r3,r5,r4
100028f4:	18c000cc 	andi	r3,r3,3
100028f8:	1800351e 	bne	r3,zero,100029d0 <memcpy+0xec>
100028fc:	32fffc04 	addi	r11,r6,-16
10002900:	5816d13a 	srli	r11,r11,4
10002904:	2007883a 	mov	r3,r4
10002908:	280f883a 	mov	r7,r5
1000290c:	5ac00044 	addi	r11,r11,1
10002910:	5816913a 	slli	r11,r11,4
10002914:	22c9883a 	add	r4,r4,r11
10002918:	3a000017 	ldw	r8,0(r7)
1000291c:	3a800117 	ldw	r10,4(r7)
10002920:	3a400217 	ldw	r9,8(r7)
10002924:	39c00404 	addi	r7,r7,16
10002928:	1a000015 	stw	r8,0(r3)
1000292c:	3a3fff17 	ldw	r8,-4(r7)
10002930:	1a800115 	stw	r10,4(r3)
10002934:	1a400215 	stw	r9,8(r3)
10002938:	18c00404 	addi	r3,r3,16
1000293c:	1a3fff15 	stw	r8,-4(r3)
10002940:	20fff51e 	bne	r4,r3,10002918 <memcpy+0x34>
10002944:	3100030c 	andi	r4,r6,12
10002948:	2acb883a 	add	r5,r5,r11
1000294c:	320003cc 	andi	r8,r6,15
10002950:	20002226 	beq	r4,zero,100029dc <memcpy+0xf8>
10002954:	2809883a 	mov	r4,r5
10002958:	1813883a 	mov	r9,r3
1000295c:	21000104 	addi	r4,r4,4
10002960:	22bfff17 	ldw	r10,-4(r4)
10002964:	410fc83a 	sub	r7,r8,r4
10002968:	4a400104 	addi	r9,r9,4
1000296c:	29cf883a 	add	r7,r5,r7
10002970:	4abfff15 	stw	r10,-4(r9)
10002974:	39c00128 	cmpgeui	r7,r7,4
10002978:	383ff81e 	bne	r7,zero,1000295c <memcpy+0x78>
1000297c:	413fff04 	addi	r4,r8,-4
10002980:	2008d0ba 	srli	r4,r4,2
10002984:	318000cc 	andi	r6,r6,3
10002988:	31ffffc4 	addi	r7,r6,-1
1000298c:	21000044 	addi	r4,r4,1
10002990:	200890ba 	slli	r4,r4,2
10002994:	1907883a 	add	r3,r3,r4
10002998:	290b883a 	add	r5,r5,r4
1000299c:	3000041e 	bne	r6,zero,100029b0 <memcpy+0xcc>
100029a0:	f800283a 	ret
100029a4:	2007883a 	mov	r3,r4
100029a8:	31ffffc4 	addi	r7,r6,-1
100029ac:	303ffc26 	beq	r6,zero,100029a0 <memcpy+0xbc>
100029b0:	39c00044 	addi	r7,r7,1
100029b4:	19cf883a 	add	r7,r3,r7
100029b8:	29400044 	addi	r5,r5,1
100029bc:	29bfffc3 	ldbu	r6,-1(r5)
100029c0:	18c00044 	addi	r3,r3,1
100029c4:	19bfffc5 	stb	r6,-1(r3)
100029c8:	19fffb1e 	bne	r3,r7,100029b8 <memcpy+0xd4>
100029cc:	f800283a 	ret
100029d0:	31ffffc4 	addi	r7,r6,-1
100029d4:	2007883a 	mov	r3,r4
100029d8:	003ff506 	br	100029b0 <memcpy+0xcc>
100029dc:	400d883a 	mov	r6,r8
100029e0:	003ff106 	br	100029a8 <memcpy+0xc4>

100029e4 <_printf_r>:
100029e4:	defffd04 	addi	sp,sp,-12
100029e8:	2805883a 	mov	r2,r5
100029ec:	dfc00015 	stw	ra,0(sp)
100029f0:	d9800115 	stw	r6,4(sp)
100029f4:	d9c00215 	stw	r7,8(sp)
100029f8:	21400217 	ldw	r5,8(r4)
100029fc:	d9c00104 	addi	r7,sp,4
10002a00:	100d883a 	mov	r6,r2
10002a04:	0002bc00 	call	10002bc0 <___vfprintf_internal_r>
10002a08:	dfc00017 	ldw	ra,0(sp)
10002a0c:	dec00304 	addi	sp,sp,12
10002a10:	f800283a 	ret

10002a14 <printf>:
10002a14:	defffc04 	addi	sp,sp,-16
10002a18:	dfc00015 	stw	ra,0(sp)
10002a1c:	d9400115 	stw	r5,4(sp)
10002a20:	d9800215 	stw	r6,8(sp)
10002a24:	d9c00315 	stw	r7,12(sp)
10002a28:	00840074 	movhi	r2,4097
10002a2c:	10906517 	ldw	r2,16788(r2)
10002a30:	200b883a 	mov	r5,r4
10002a34:	d9800104 	addi	r6,sp,4
10002a38:	11000217 	ldw	r4,8(r2)
10002a3c:	0004d200 	call	10004d20 <__vfprintf_internal>
10002a40:	dfc00017 	ldw	ra,0(sp)
10002a44:	dec00404 	addi	sp,sp,16
10002a48:	f800283a 	ret

10002a4c <_puts_r>:
10002a4c:	defff504 	addi	sp,sp,-44
10002a50:	dc000815 	stw	r16,32(sp)
10002a54:	2021883a 	mov	r16,r4
10002a58:	2809883a 	mov	r4,r5
10002a5c:	dc400915 	stw	r17,36(sp)
10002a60:	dfc00a15 	stw	ra,40(sp)
10002a64:	2823883a 	mov	r17,r5
10002a68:	0002b280 	call	10002b28 <strlen>
10002a6c:	11000044 	addi	r4,r2,1
10002a70:	d8800515 	stw	r2,20(sp)
10002a74:	00800044 	movi	r2,1
10002a78:	00c40074 	movhi	r3,4097
10002a7c:	d8800715 	stw	r2,28(sp)
10002a80:	d8800404 	addi	r2,sp,16
10002a84:	18c68a04 	addi	r3,r3,6696
10002a88:	d8800115 	stw	r2,4(sp)
10002a8c:	00800084 	movi	r2,2
10002a90:	dc400415 	stw	r17,16(sp)
10002a94:	d8c00615 	stw	r3,24(sp)
10002a98:	d9000315 	stw	r4,12(sp)
10002a9c:	d8800215 	stw	r2,8(sp)
10002aa0:	81400217 	ldw	r5,8(r16)
10002aa4:	80000226 	beq	r16,zero,10002ab0 <_puts_r+0x64>
10002aa8:	80800e17 	ldw	r2,56(r16)
10002aac:	10001326 	beq	r2,zero,10002afc <_puts_r+0xb0>
10002ab0:	2880030b 	ldhu	r2,12(r5)
10002ab4:	10c8000c 	andi	r3,r2,8192
10002ab8:	1800061e 	bne	r3,zero,10002ad4 <_puts_r+0x88>
10002abc:	28c01917 	ldw	r3,100(r5)
10002ac0:	0137ffc4 	movi	r4,-8193
10002ac4:	10880014 	ori	r2,r2,8192
10002ac8:	1906703a 	and	r3,r3,r4
10002acc:	2880030d 	sth	r2,12(r5)
10002ad0:	28c01915 	stw	r3,100(r5)
10002ad4:	d9800104 	addi	r6,sp,4
10002ad8:	8009883a 	mov	r4,r16
10002adc:	000723c0 	call	1000723c <__sfvwrite_r>
10002ae0:	10000b1e 	bne	r2,zero,10002b10 <_puts_r+0xc4>
10002ae4:	00800284 	movi	r2,10
10002ae8:	dfc00a17 	ldw	ra,40(sp)
10002aec:	dc400917 	ldw	r17,36(sp)
10002af0:	dc000817 	ldw	r16,32(sp)
10002af4:	dec00b04 	addi	sp,sp,44
10002af8:	f800283a 	ret
10002afc:	8009883a 	mov	r4,r16
10002b00:	d9400015 	stw	r5,0(sp)
10002b04:	0006ddc0 	call	10006ddc <__sinit>
10002b08:	d9400017 	ldw	r5,0(sp)
10002b0c:	003fe806 	br	10002ab0 <_puts_r+0x64>
10002b10:	00bfffc4 	movi	r2,-1
10002b14:	003ff406 	br	10002ae8 <_puts_r+0x9c>

10002b18 <puts>:
10002b18:	00840074 	movhi	r2,4097
10002b1c:	200b883a 	mov	r5,r4
10002b20:	11106517 	ldw	r4,16788(r2)
10002b24:	0002a4c1 	jmpi	10002a4c <_puts_r>

10002b28 <strlen>:
10002b28:	208000cc 	andi	r2,r4,3
10002b2c:	10002026 	beq	r2,zero,10002bb0 <strlen+0x88>
10002b30:	20800007 	ldb	r2,0(r4)
10002b34:	10002026 	beq	r2,zero,10002bb8 <strlen+0x90>
10002b38:	2005883a 	mov	r2,r4
10002b3c:	00000206 	br	10002b48 <strlen+0x20>
10002b40:	10c00007 	ldb	r3,0(r2)
10002b44:	18001826 	beq	r3,zero,10002ba8 <strlen+0x80>
10002b48:	10800044 	addi	r2,r2,1
10002b4c:	10c000cc 	andi	r3,r2,3
10002b50:	183ffb1e 	bne	r3,zero,10002b40 <strlen+0x18>
10002b54:	11400017 	ldw	r5,0(r2)
10002b58:	01ffbff4 	movhi	r7,65279
10002b5c:	39ffbfc4 	addi	r7,r7,-257
10002b60:	29c7883a 	add	r3,r5,r7
10002b64:	01a02074 	movhi	r6,32897
10002b68:	014a303a 	nor	r5,zero,r5
10002b6c:	1946703a 	and	r3,r3,r5
10002b70:	31a02004 	addi	r6,r6,-32640
10002b74:	1986703a 	and	r3,r3,r6
10002b78:	1800091e 	bne	r3,zero,10002ba0 <strlen+0x78>
10002b7c:	10800104 	addi	r2,r2,4
10002b80:	11400017 	ldw	r5,0(r2)
10002b84:	29c7883a 	add	r3,r5,r7
10002b88:	014a303a 	nor	r5,zero,r5
10002b8c:	1946703a 	and	r3,r3,r5
10002b90:	1986703a 	and	r3,r3,r6
10002b94:	183ff926 	beq	r3,zero,10002b7c <strlen+0x54>
10002b98:	00000106 	br	10002ba0 <strlen+0x78>
10002b9c:	10800044 	addi	r2,r2,1
10002ba0:	10c00007 	ldb	r3,0(r2)
10002ba4:	183ffd1e 	bne	r3,zero,10002b9c <strlen+0x74>
10002ba8:	1105c83a 	sub	r2,r2,r4
10002bac:	f800283a 	ret
10002bb0:	2005883a 	mov	r2,r4
10002bb4:	003fe706 	br	10002b54 <strlen+0x2c>
10002bb8:	0005883a 	mov	r2,zero
10002bbc:	f800283a 	ret

10002bc0 <___vfprintf_internal_r>:
10002bc0:	deffbd04 	addi	sp,sp,-268
10002bc4:	dfc04215 	stw	ra,264(sp)
10002bc8:	dd003d15 	stw	r20,244(sp)
10002bcc:	dcc03c15 	stw	r19,240(sp)
10002bd0:	dc003915 	stw	r16,228(sp)
10002bd4:	d9000515 	stw	r4,20(sp)
10002bd8:	2021883a 	mov	r16,r4
10002bdc:	2827883a 	mov	r19,r5
10002be0:	3029883a 	mov	r20,r6
10002be4:	d9c00615 	stw	r7,24(sp)
10002be8:	df004115 	stw	fp,260(sp)
10002bec:	ddc04015 	stw	r23,256(sp)
10002bf0:	dd803f15 	stw	r22,252(sp)
10002bf4:	dd403e15 	stw	r21,248(sp)
10002bf8:	dc803b15 	stw	r18,236(sp)
10002bfc:	dc403a15 	stw	r17,232(sp)
10002c00:	00078600 	call	10007860 <_localeconv_r>
10002c04:	10800017 	ldw	r2,0(r2)
10002c08:	1009883a 	mov	r4,r2
10002c0c:	d8800d15 	stw	r2,52(sp)
10002c10:	0002b280 	call	10002b28 <strlen>
10002c14:	d8800b15 	stw	r2,44(sp)
10002c18:	80000226 	beq	r16,zero,10002c24 <___vfprintf_internal_r+0x64>
10002c1c:	80800e17 	ldw	r2,56(r16)
10002c20:	1002da26 	beq	r2,zero,1000378c <___vfprintf_internal_r+0xbcc>
10002c24:	9880030b 	ldhu	r2,12(r19)
10002c28:	10c8000c 	andi	r3,r2,8192
10002c2c:	1800061e 	bne	r3,zero,10002c48 <___vfprintf_internal_r+0x88>
10002c30:	98c01917 	ldw	r3,100(r19)
10002c34:	0137ffc4 	movi	r4,-8193
10002c38:	10880014 	ori	r2,r2,8192
10002c3c:	1906703a 	and	r3,r3,r4
10002c40:	9880030d 	sth	r2,12(r19)
10002c44:	98c01915 	stw	r3,100(r19)
10002c48:	10c0020c 	andi	r3,r2,8
10002c4c:	18009a26 	beq	r3,zero,10002eb8 <___vfprintf_internal_r+0x2f8>
10002c50:	98c00417 	ldw	r3,16(r19)
10002c54:	18009826 	beq	r3,zero,10002eb8 <___vfprintf_internal_r+0x2f8>
10002c58:	1080068c 	andi	r2,r2,26
10002c5c:	10800298 	cmpnei	r2,r2,10
10002c60:	10009d26 	beq	r2,zero,10002ed8 <___vfprintf_internal_r+0x318>
10002c64:	ddc02904 	addi	r23,sp,164
10002c68:	ddc01c15 	stw	r23,112(sp)
10002c6c:	d8001e15 	stw	zero,120(sp)
10002c70:	d8001d15 	stw	zero,116(sp)
10002c74:	d8000815 	stw	zero,32(sp)
10002c78:	d8000915 	stw	zero,36(sp)
10002c7c:	d8000a15 	stw	zero,40(sp)
10002c80:	b811883a 	mov	r8,r23
10002c84:	d8000c15 	stw	zero,48(sp)
10002c88:	d8001115 	stw	zero,68(sp)
10002c8c:	d8000415 	stw	zero,16(sp)
10002c90:	a02d883a 	mov	r22,r20
10002c94:	b0800007 	ldb	r2,0(r22)
10002c98:	1000a226 	beq	r2,zero,10002f24 <___vfprintf_internal_r+0x364>
10002c9c:	10800960 	cmpeqi	r2,r2,37
10002ca0:	10052e1e 	bne	r2,zero,1000415c <___vfprintf_internal_r+0x159c>
10002ca4:	b021883a 	mov	r16,r22
10002ca8:	00000206 	br	10002cb4 <___vfprintf_internal_r+0xf4>
10002cac:	18009326 	beq	r3,zero,10002efc <___vfprintf_internal_r+0x33c>
10002cb0:	9021883a 	mov	r16,r18
10002cb4:	80800047 	ldb	r2,1(r16)
10002cb8:	84800044 	addi	r18,r16,1
10002cbc:	10c00958 	cmpnei	r3,r2,37
10002cc0:	103ffa1e 	bne	r2,zero,10002cac <___vfprintf_internal_r+0xec>
10002cc4:	95a3c83a 	sub	r17,r18,r22
10002cc8:	88009626 	beq	r17,zero,10002f24 <___vfprintf_internal_r+0x364>
10002ccc:	d8c01e17 	ldw	r3,120(sp)
10002cd0:	d8801d17 	ldw	r2,116(sp)
10002cd4:	45800015 	stw	r22,0(r8)
10002cd8:	1c47883a 	add	r3,r3,r17
10002cdc:	10800044 	addi	r2,r2,1
10002ce0:	d8801d15 	stw	r2,116(sp)
10002ce4:	44400115 	stw	r17,4(r8)
10002ce8:	d8c01e15 	stw	r3,120(sp)
10002cec:	10800208 	cmpgei	r2,r2,8
10002cf0:	1000851e 	bne	r2,zero,10002f08 <___vfprintf_internal_r+0x348>
10002cf4:	42000204 	addi	r8,r8,8
10002cf8:	d8c00417 	ldw	r3,16(sp)
10002cfc:	80800047 	ldb	r2,1(r16)
10002d00:	1c47883a 	add	r3,r3,r17
10002d04:	d8c00415 	stw	r3,16(sp)
10002d08:	10008626 	beq	r2,zero,10002f24 <___vfprintf_internal_r+0x364>
10002d0c:	92800047 	ldb	r10,1(r18)
10002d10:	95800044 	addi	r22,r18,1
10002d14:	d8001545 	stb	zero,85(sp)
10002d18:	0009883a 	mov	r4,zero
10002d1c:	000b883a 	mov	r5,zero
10002d20:	02ffffc4 	movi	r11,-1
10002d24:	0023883a 	mov	r17,zero
10002d28:	0019883a 	mov	r12,zero
10002d2c:	b5800044 	addi	r22,r22,1
10002d30:	5039883a 	mov	fp,r10
10002d34:	e0bff804 	addi	r2,fp,-32
10002d38:	10c01668 	cmpgeui	r3,r2,89
10002d3c:	18009b1e 	bne	r3,zero,10002fac <___vfprintf_internal_r+0x3ec>
10002d40:	100490ba 	slli	r2,r2,2
10002d44:	00c40034 	movhi	r3,4096
10002d48:	10c7883a 	add	r3,r2,r3
10002d4c:	188b5517 	ldw	r2,11604(r3)
10002d50:	1000683a 	jmp	r2
10002d54:	1000307c 	xorhi	zero,r2,193
10002d58:	10002fac 	andhi	zero,r2,190
10002d5c:	10002fac 	andhi	zero,r2,190
10002d60:	10003070 	cmpltui	zero,r2,193
10002d64:	10002fac 	andhi	zero,r2,190
10002d68:	10002fac 	andhi	zero,r2,190
10002d6c:	10002fac 	andhi	zero,r2,190
10002d70:	10002fac 	andhi	zero,r2,190
10002d74:	10002fac 	andhi	zero,r2,190
10002d78:	10002fac 	andhi	zero,r2,190
10002d7c:	10003048 	cmpgei	zero,r2,193
10002d80:	10003038 	rdprs	zero,r2,192
10002d84:	10002fac 	andhi	zero,r2,190
10002d88:	10003020 	cmpeqi	zero,r2,192
10002d8c:	10002fdc 	xori	zero,r2,191
10002d90:	10002fac 	andhi	zero,r2,190
10002d94:	10002fd0 	cmplti	zero,r2,191
10002d98:	10002f7c 	xorhi	zero,r2,189
10002d9c:	10002f7c 	xorhi	zero,r2,189
10002da0:	10002f7c 	xorhi	zero,r2,189
10002da4:	10002f7c 	xorhi	zero,r2,189
10002da8:	10002f7c 	xorhi	zero,r2,189
10002dac:	10002f7c 	xorhi	zero,r2,189
10002db0:	10002f7c 	xorhi	zero,r2,189
10002db4:	10002f7c 	xorhi	zero,r2,189
10002db8:	10002f7c 	xorhi	zero,r2,189
10002dbc:	10002fac 	andhi	zero,r2,190
10002dc0:	10002fac 	andhi	zero,r2,190
10002dc4:	10002fac 	andhi	zero,r2,190
10002dc8:	10002fac 	andhi	zero,r2,190
10002dcc:	10002fac 	andhi	zero,r2,190
10002dd0:	10002fac 	andhi	zero,r2,190
10002dd4:	10002fac 	andhi	zero,r2,190
10002dd8:	10002fac 	andhi	zero,r2,190
10002ddc:	10002fac 	andhi	zero,r2,190
10002de0:	10002fac 	andhi	zero,r2,190
10002de4:	10003590 	cmplti	zero,r2,214
10002de8:	100034b0 	cmpltui	zero,r2,210
10002dec:	10002fac 	andhi	zero,r2,190
10002df0:	100034b0 	cmpltui	zero,r2,210
10002df4:	10002fac 	andhi	zero,r2,190
10002df8:	10002fac 	andhi	zero,r2,190
10002dfc:	10002fac 	andhi	zero,r2,190
10002e00:	10002fac 	andhi	zero,r2,190
10002e04:	100034a4 	muli	zero,r2,210
10002e08:	10002fac 	andhi	zero,r2,190
10002e0c:	10002fac 	andhi	zero,r2,190
10002e10:	10003470 	cmpltui	zero,r2,209
10002e14:	10002fac 	andhi	zero,r2,190
10002e18:	10002fac 	andhi	zero,r2,190
10002e1c:	10002fac 	andhi	zero,r2,190
10002e20:	10002fac 	andhi	zero,r2,190
10002e24:	10002fac 	andhi	zero,r2,190
10002e28:	100036b0 	cmpltui	zero,r2,218
10002e2c:	10002fac 	andhi	zero,r2,190
10002e30:	10002fac 	andhi	zero,r2,190
10002e34:	10003668 	cmpgeui	zero,r2,217
10002e38:	10002fac 	andhi	zero,r2,190
10002e3c:	10002fac 	andhi	zero,r2,190
10002e40:	10002fac 	andhi	zero,r2,190
10002e44:	10002fac 	andhi	zero,r2,190
10002e48:	10002fac 	andhi	zero,r2,190
10002e4c:	10002fac 	andhi	zero,r2,190
10002e50:	10002fac 	andhi	zero,r2,190
10002e54:	10002fac 	andhi	zero,r2,190
10002e58:	10002fac 	andhi	zero,r2,190
10002e5c:	10002fac 	andhi	zero,r2,190
10002e60:	10003200 	call	11000320 <_gp+0xfe4194>
10002e64:	1000318c 	andi	zero,r2,198
10002e68:	100034b0 	cmpltui	zero,r2,210
10002e6c:	100034b0 	cmpltui	zero,r2,210
10002e70:	100034b0 	cmpltui	zero,r2,210
10002e74:	10003780 	call	11000378 <_gp+0xfe41ec>
10002e78:	1000318c 	andi	zero,r2,198
10002e7c:	10002fac 	andhi	zero,r2,190
10002e80:	10002fac 	andhi	zero,r2,190
10002e84:	1000376c 	andhi	zero,r2,221
10002e88:	10002fac 	andhi	zero,r2,190
10002e8c:	10003430 	cmpltui	zero,r2,208
10002e90:	100033f0 	cmpltui	zero,r2,207
10002e94:	100036f0 	cmpltui	zero,r2,219
10002e98:	100036e4 	muli	zero,r2,219
10002e9c:	10002fac 	andhi	zero,r2,190
10002ea0:	10003130 	cmpltui	zero,r2,196
10002ea4:	10002fac 	andhi	zero,r2,190
10002ea8:	100030f0 	cmpltui	zero,r2,195
10002eac:	10002fac 	andhi	zero,r2,190
10002eb0:	10002fac 	andhi	zero,r2,190
10002eb4:	100030a8 	cmpgeui	zero,r2,194
10002eb8:	d9000517 	ldw	r4,20(sp)
10002ebc:	980b883a 	mov	r5,r19
10002ec0:	0004df80 	call	10004df8 <__swsetup_r>
10002ec4:	10074c1e 	bne	r2,zero,10004bf8 <___vfprintf_internal_r+0x2038>
10002ec8:	9880030b 	ldhu	r2,12(r19)
10002ecc:	1080068c 	andi	r2,r2,26
10002ed0:	10800298 	cmpnei	r2,r2,10
10002ed4:	103f631e 	bne	r2,zero,10002c64 <___vfprintf_internal_r+0xa4>
10002ed8:	9880038f 	ldh	r2,14(r19)
10002edc:	103f6116 	blt	r2,zero,10002c64 <___vfprintf_internal_r+0xa4>
10002ee0:	d9c00617 	ldw	r7,24(sp)
10002ee4:	d9000517 	ldw	r4,20(sp)
10002ee8:	a00d883a 	mov	r6,r20
10002eec:	980b883a 	mov	r5,r19
10002ef0:	0004d380 	call	10004d38 <__sbprintf>
10002ef4:	d8800415 	stw	r2,16(sp)
10002ef8:	00001306 	br	10002f48 <___vfprintf_internal_r+0x388>
10002efc:	95a3c83a 	sub	r17,r18,r22
10002f00:	883f8226 	beq	r17,zero,10002d0c <___vfprintf_internal_r+0x14c>
10002f04:	003f7106 	br	10002ccc <___vfprintf_internal_r+0x10c>
10002f08:	d9000517 	ldw	r4,20(sp)
10002f0c:	d9801c04 	addi	r6,sp,112
10002f10:	980b883a 	mov	r5,r19
10002f14:	0009d380 	call	10009d38 <__sprint_r>
10002f18:	1000081e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10002f1c:	b811883a 	mov	r8,r23
10002f20:	003f7506 	br	10002cf8 <___vfprintf_internal_r+0x138>
10002f24:	d8801e17 	ldw	r2,120(sp)
10002f28:	10000426 	beq	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10002f2c:	d9000517 	ldw	r4,20(sp)
10002f30:	d9801c04 	addi	r6,sp,112
10002f34:	980b883a 	mov	r5,r19
10002f38:	0009d380 	call	10009d38 <__sprint_r>
10002f3c:	9880030b 	ldhu	r2,12(r19)
10002f40:	1080100c 	andi	r2,r2,64
10002f44:	10072c1e 	bne	r2,zero,10004bf8 <___vfprintf_internal_r+0x2038>
10002f48:	d8800417 	ldw	r2,16(sp)
10002f4c:	dfc04217 	ldw	ra,264(sp)
10002f50:	df004117 	ldw	fp,260(sp)
10002f54:	ddc04017 	ldw	r23,256(sp)
10002f58:	dd803f17 	ldw	r22,252(sp)
10002f5c:	dd403e17 	ldw	r21,248(sp)
10002f60:	dd003d17 	ldw	r20,244(sp)
10002f64:	dcc03c17 	ldw	r19,240(sp)
10002f68:	dc803b17 	ldw	r18,236(sp)
10002f6c:	dc403a17 	ldw	r17,232(sp)
10002f70:	dc003917 	ldw	r16,228(sp)
10002f74:	dec04304 	addi	sp,sp,268
10002f78:	f800283a 	ret
10002f7c:	0023883a 	mov	r17,zero
10002f80:	e0bff404 	addi	r2,fp,-48
10002f84:	b5800044 	addi	r22,r22,1
10002f88:	8c4002a4 	muli	r17,r17,10
10002f8c:	b73fffc7 	ldb	fp,-1(r22)
10002f90:	1463883a 	add	r17,r2,r17
10002f94:	e0bff404 	addi	r2,fp,-48
10002f98:	10c002b0 	cmpltui	r3,r2,10
10002f9c:	183ff91e 	bne	r3,zero,10002f84 <___vfprintf_internal_r+0x3c4>
10002fa0:	e0bff804 	addi	r2,fp,-32
10002fa4:	10c01668 	cmpgeui	r3,r2,89
10002fa8:	183f6526 	beq	r3,zero,10002d40 <___vfprintf_internal_r+0x180>
10002fac:	21003fcc 	andi	r4,r4,255
10002fb0:	20066d1e 	bne	r4,zero,10004968 <___vfprintf_internal_r+0x1da8>
10002fb4:	e03fdb26 	beq	fp,zero,10002f24 <___vfprintf_internal_r+0x364>
10002fb8:	df001f05 	stb	fp,124(sp)
10002fbc:	d8001545 	stb	zero,85(sp)
10002fc0:	05400044 	movi	r21,1
10002fc4:	05000044 	movi	r20,1
10002fc8:	dc001f04 	addi	r16,sp,124
10002fcc:	00009506 	br	10003224 <___vfprintf_internal_r+0x664>
10002fd0:	63002014 	ori	r12,r12,128
10002fd4:	b2800007 	ldb	r10,0(r22)
10002fd8:	003f5406 	br	10002d2c <___vfprintf_internal_r+0x16c>
10002fdc:	b7000007 	ldb	fp,0(r22)
10002fe0:	b0c00044 	addi	r3,r22,1
10002fe4:	e0800aa0 	cmpeqi	r2,fp,42
10002fe8:	1007411e 	bne	r2,zero,10004cf0 <___vfprintf_internal_r+0x2130>
10002fec:	e0bff404 	addi	r2,fp,-48
10002ff0:	118002b0 	cmpltui	r6,r2,10
10002ff4:	182d883a 	mov	r22,r3
10002ff8:	0017883a 	mov	r11,zero
10002ffc:	303f4d26 	beq	r6,zero,10002d34 <___vfprintf_internal_r+0x174>
10003000:	b5800044 	addi	r22,r22,1
10003004:	5ac002a4 	muli	r11,r11,10
10003008:	b73fffc7 	ldb	fp,-1(r22)
1000300c:	5897883a 	add	r11,r11,r2
10003010:	e0bff404 	addi	r2,fp,-48
10003014:	10c002b0 	cmpltui	r3,r2,10
10003018:	183ff91e 	bne	r3,zero,10003000 <___vfprintf_internal_r+0x440>
1000301c:	003f4506 	br	10002d34 <___vfprintf_internal_r+0x174>
10003020:	b7000003 	ldbu	fp,0(r22)
10003024:	e2803fcc 	andi	r10,fp,255
10003028:	5280201c 	xori	r10,r10,128
1000302c:	63000114 	ori	r12,r12,4
10003030:	52bfe004 	addi	r10,r10,-128
10003034:	003f3d06 	br	10002d2c <___vfprintf_internal_r+0x16c>
10003038:	01000044 	movi	r4,1
1000303c:	01400ac4 	movi	r5,43
10003040:	b2800007 	ldb	r10,0(r22)
10003044:	003f3906 	br	10002d2c <___vfprintf_internal_r+0x16c>
10003048:	d8800617 	ldw	r2,24(sp)
1000304c:	b7000003 	ldbu	fp,0(r22)
10003050:	14400017 	ldw	r17,0(r2)
10003054:	10800104 	addi	r2,r2,4
10003058:	8804d716 	blt	r17,zero,100043b8 <___vfprintf_internal_r+0x17f8>
1000305c:	d8800615 	stw	r2,24(sp)
10003060:	e2803fcc 	andi	r10,fp,255
10003064:	5280201c 	xori	r10,r10,128
10003068:	52bfe004 	addi	r10,r10,-128
1000306c:	003f2f06 	br	10002d2c <___vfprintf_internal_r+0x16c>
10003070:	63000054 	ori	r12,r12,1
10003074:	b2800007 	ldb	r10,0(r22)
10003078:	003f2c06 	br	10002d2c <___vfprintf_internal_r+0x16c>
1000307c:	28803fcc 	andi	r2,r5,255
10003080:	1080201c 	xori	r2,r2,128
10003084:	10bfe004 	addi	r2,r2,-128
10003088:	b7000003 	ldbu	fp,0(r22)
1000308c:	103ff41e 	bne	r2,zero,10003060 <___vfprintf_internal_r+0x4a0>
10003090:	e2803fcc 	andi	r10,fp,255
10003094:	5280201c 	xori	r10,r10,128
10003098:	01000044 	movi	r4,1
1000309c:	01400804 	movi	r5,32
100030a0:	52bfe004 	addi	r10,r10,-128
100030a4:	003f2106 	br	10002d2c <___vfprintf_internal_r+0x16c>
100030a8:	21003fcc 	andi	r4,r4,255
100030ac:	2006b31e 	bne	r4,zero,10004b7c <___vfprintf_internal_r+0x1fbc>
100030b0:	00840074 	movhi	r2,4097
100030b4:	10869404 	addi	r2,r2,6736
100030b8:	d8800c15 	stw	r2,48(sp)
100030bc:	6080080c 	andi	r2,r12,32
100030c0:	10017026 	beq	r2,zero,10003684 <___vfprintf_internal_r+0xac4>
100030c4:	d8800617 	ldw	r2,24(sp)
100030c8:	15400017 	ldw	r21,0(r2)
100030cc:	15000117 	ldw	r20,4(r2)
100030d0:	10800204 	addi	r2,r2,8
100030d4:	d8800615 	stw	r2,24(sp)
100030d8:	6080004c 	andi	r2,r12,1
100030dc:	10000226 	beq	r2,zero,100030e8 <___vfprintf_internal_r+0x528>
100030e0:	ad04b03a 	or	r2,r21,r20
100030e4:	1004a71e 	bne	r2,zero,10004384 <___vfprintf_internal_r+0x17c4>
100030e8:	00800084 	movi	r2,2
100030ec:	00018f06 	br	1000372c <___vfprintf_internal_r+0xb6c>
100030f0:	21003fcc 	andi	r4,r4,255
100030f4:	20069f1e 	bne	r4,zero,10004b74 <___vfprintf_internal_r+0x1fb4>
100030f8:	6080080c 	andi	r2,r12,32
100030fc:	1001b41e 	bne	r2,zero,100037d0 <___vfprintf_internal_r+0xc10>
10003100:	d8800617 	ldw	r2,24(sp)
10003104:	60c0040c 	andi	r3,r12,16
10003108:	15400017 	ldw	r21,0(r2)
1000310c:	10800104 	addi	r2,r2,4
10003110:	18016e1e 	bne	r3,zero,100036cc <___vfprintf_internal_r+0xb0c>
10003114:	60c0100c 	andi	r3,r12,64
10003118:	18059f26 	beq	r3,zero,10004798 <___vfprintf_internal_r+0x1bd8>
1000311c:	d8800615 	stw	r2,24(sp)
10003120:	ad7fffcc 	andi	r21,r21,65535
10003124:	0029883a 	mov	r20,zero
10003128:	00800044 	movi	r2,1
1000312c:	00017f06 	br	1000372c <___vfprintf_internal_r+0xb6c>
10003130:	d8800617 	ldw	r2,24(sp)
10003134:	d8001545 	stb	zero,85(sp)
10003138:	14000017 	ldw	r16,0(r2)
1000313c:	14800104 	addi	r18,r2,4
10003140:	8004c726 	beq	r16,zero,10004460 <___vfprintf_internal_r+0x18a0>
10003144:	da000e15 	stw	r8,56(sp)
10003148:	db000715 	stw	r12,28(sp)
1000314c:	58bfffe0 	cmpeqi	r2,r11,-1
10003150:	1005691e 	bne	r2,zero,100046f8 <___vfprintf_internal_r+0x1b38>
10003154:	580d883a 	mov	r6,r11
10003158:	000b883a 	mov	r5,zero
1000315c:	8009883a 	mov	r4,r16
10003160:	dac00615 	stw	r11,24(sp)
10003164:	00082400 	call	10008240 <memchr>
10003168:	dac00617 	ldw	r11,24(sp)
1000316c:	db000717 	ldw	r12,28(sp)
10003170:	da000e17 	ldw	r8,56(sp)
10003174:	10066726 	beq	r2,zero,10004b14 <___vfprintf_internal_r+0x1f54>
10003178:	1429c83a 	sub	r20,r2,r16
1000317c:	a02b883a 	mov	r21,r20
10003180:	a005f716 	blt	r20,zero,10004960 <___vfprintf_internal_r+0x1da0>
10003184:	dc800615 	stw	r18,24(sp)
10003188:	00002606 	br	10003224 <___vfprintf_internal_r+0x664>
1000318c:	21003fcc 	andi	r4,r4,255
10003190:	2006761e 	bne	r4,zero,10004b6c <___vfprintf_internal_r+0x1fac>
10003194:	6080080c 	andi	r2,r12,32
10003198:	10017f1e 	bne	r2,zero,10003798 <___vfprintf_internal_r+0xbd8>
1000319c:	d8800617 	ldw	r2,24(sp)
100031a0:	60c0040c 	andi	r3,r12,16
100031a4:	10800104 	addi	r2,r2,4
100031a8:	1801001e 	bne	r3,zero,100035ac <___vfprintf_internal_r+0x9ec>
100031ac:	60c0100c 	andi	r3,r12,64
100031b0:	1800fe26 	beq	r3,zero,100035ac <___vfprintf_internal_r+0x9ec>
100031b4:	d8c00617 	ldw	r3,24(sp)
100031b8:	d8800615 	stw	r2,24(sp)
100031bc:	1d40000f 	ldh	r21,0(r3)
100031c0:	a829d7fa 	srai	r20,r21,31
100031c4:	a005883a 	mov	r2,r20
100031c8:	1000fe16 	blt	r2,zero,100035c4 <___vfprintf_internal_r+0xa04>
100031cc:	58bfffd8 	cmpnei	r2,r11,-1
100031d0:	db401543 	ldbu	r13,85(sp)
100031d4:	10018526 	beq	r2,zero,100037ec <___vfprintf_internal_r+0xc2c>
100031d8:	00ffdfc4 	movi	r3,-129
100031dc:	ad04b03a 	or	r2,r21,r20
100031e0:	60d8703a 	and	r12,r12,r3
100031e4:	1001811e 	bne	r2,zero,100037ec <___vfprintf_internal_r+0xc2c>
100031e8:	5801831e 	bne	r11,zero,100037f8 <___vfprintf_internal_r+0xc38>
100031ec:	6025883a 	mov	r18,r12
100031f0:	0017883a 	mov	r11,zero
100031f4:	0029883a 	mov	r20,zero
100031f8:	b821883a 	mov	r16,r23
100031fc:	00018306 	br	1000380c <___vfprintf_internal_r+0xc4c>
10003200:	d8c00617 	ldw	r3,24(sp)
10003204:	d8001545 	stb	zero,85(sp)
10003208:	05400044 	movi	r21,1
1000320c:	18800017 	ldw	r2,0(r3)
10003210:	18c00104 	addi	r3,r3,4
10003214:	d8c00615 	stw	r3,24(sp)
10003218:	d8801f05 	stb	r2,124(sp)
1000321c:	05000044 	movi	r20,1
10003220:	dc001f04 	addi	r16,sp,124
10003224:	6025883a 	mov	r18,r12
10003228:	0017883a 	mov	r11,zero
1000322c:	d8000715 	stw	zero,28(sp)
10003230:	9380008c 	andi	r14,r18,2
10003234:	70000126 	beq	r14,zero,1000323c <___vfprintf_internal_r+0x67c>
10003238:	ad400084 	addi	r21,r21,2
1000323c:	9340210c 	andi	r13,r18,132
10003240:	d8c01e17 	ldw	r3,120(sp)
10003244:	6800021e 	bne	r13,zero,10003250 <___vfprintf_internal_r+0x690>
10003248:	8d4fc83a 	sub	r7,r17,r21
1000324c:	01c2ce16 	blt	zero,r7,10003d88 <___vfprintf_internal_r+0x11c8>
10003250:	d8801547 	ldb	r2,85(sp)
10003254:	10000c26 	beq	r2,zero,10003288 <___vfprintf_internal_r+0x6c8>
10003258:	d8801d17 	ldw	r2,116(sp)
1000325c:	d9001544 	addi	r4,sp,85
10003260:	18c00044 	addi	r3,r3,1
10003264:	10800044 	addi	r2,r2,1
10003268:	41000015 	stw	r4,0(r8)
1000326c:	01000044 	movi	r4,1
10003270:	d8801d15 	stw	r2,116(sp)
10003274:	41000115 	stw	r4,4(r8)
10003278:	d8c01e15 	stw	r3,120(sp)
1000327c:	10800208 	cmpgei	r2,r2,8
10003280:	1002fb1e 	bne	r2,zero,10003e70 <___vfprintf_internal_r+0x12b0>
10003284:	42000204 	addi	r8,r8,8
10003288:	70000c26 	beq	r14,zero,100032bc <___vfprintf_internal_r+0x6fc>
1000328c:	d8801d17 	ldw	r2,116(sp)
10003290:	d9001584 	addi	r4,sp,86
10003294:	18c00084 	addi	r3,r3,2
10003298:	10800044 	addi	r2,r2,1
1000329c:	41000015 	stw	r4,0(r8)
100032a0:	01000084 	movi	r4,2
100032a4:	d8801d15 	stw	r2,116(sp)
100032a8:	41000115 	stw	r4,4(r8)
100032ac:	d8c01e15 	stw	r3,120(sp)
100032b0:	10800208 	cmpgei	r2,r2,8
100032b4:	1002fc1e 	bne	r2,zero,10003ea8 <___vfprintf_internal_r+0x12e8>
100032b8:	42000204 	addi	r8,r8,8
100032bc:	6b402018 	cmpnei	r13,r13,128
100032c0:	6801cf26 	beq	r13,zero,10003a00 <___vfprintf_internal_r+0xe40>
100032c4:	5d0fc83a 	sub	r7,r11,r20
100032c8:	01c20616 	blt	zero,r7,10003ae4 <___vfprintf_internal_r+0xf24>
100032cc:	9080400c 	andi	r2,r18,256
100032d0:	10017c1e 	bne	r2,zero,100038c4 <___vfprintf_internal_r+0xd04>
100032d4:	d8801d17 	ldw	r2,116(sp)
100032d8:	1d07883a 	add	r3,r3,r20
100032dc:	44000015 	stw	r16,0(r8)
100032e0:	10800044 	addi	r2,r2,1
100032e4:	d8801d15 	stw	r2,116(sp)
100032e8:	45000115 	stw	r20,4(r8)
100032ec:	d8c01e15 	stw	r3,120(sp)
100032f0:	10800208 	cmpgei	r2,r2,8
100032f4:	1002571e 	bne	r2,zero,10003c54 <___vfprintf_internal_r+0x1094>
100032f8:	42000204 	addi	r8,r8,8
100032fc:	9480010c 	andi	r18,r18,4
10003300:	90000226 	beq	r18,zero,1000330c <___vfprintf_internal_r+0x74c>
10003304:	8d61c83a 	sub	r16,r17,r21
10003308:	04000916 	blt	zero,r16,10003330 <___vfprintf_internal_r+0x770>
1000330c:	8d40010e 	bge	r17,r21,10003314 <___vfprintf_internal_r+0x754>
10003310:	a823883a 	mov	r17,r21
10003314:	d8800417 	ldw	r2,16(sp)
10003318:	1445883a 	add	r2,r2,r17
1000331c:	d8800415 	stw	r2,16(sp)
10003320:	1802241e 	bne	r3,zero,10003bb4 <___vfprintf_internal_r+0xff4>
10003324:	d8001d15 	stw	zero,116(sp)
10003328:	b811883a 	mov	r8,r23
1000332c:	003e5906 	br	10002c94 <___vfprintf_internal_r+0xd4>
10003330:	03040074 	movhi	r12,4097
10003334:	81000450 	cmplti	r4,r16,17
10003338:	63069f84 	addi	r12,r12,6782
1000333c:	d8801d17 	ldw	r2,116(sp)
10003340:	20001c1e 	bne	r4,zero,100033b4 <___vfprintf_internal_r+0x7f4>
10003344:	04800404 	movi	r18,16
10003348:	dd000517 	ldw	r20,20(sp)
1000334c:	6039883a 	mov	fp,r12
10003350:	00000406 	br	10003364 <___vfprintf_internal_r+0x7a4>
10003354:	843ffc04 	addi	r16,r16,-16
10003358:	81000448 	cmpgei	r4,r16,17
1000335c:	42000204 	addi	r8,r8,8
10003360:	20001326 	beq	r4,zero,100033b0 <___vfprintf_internal_r+0x7f0>
10003364:	10800044 	addi	r2,r2,1
10003368:	18c00404 	addi	r3,r3,16
1000336c:	47000015 	stw	fp,0(r8)
10003370:	44800115 	stw	r18,4(r8)
10003374:	d8c01e15 	stw	r3,120(sp)
10003378:	d8801d15 	stw	r2,116(sp)
1000337c:	11000208 	cmpgei	r4,r2,8
10003380:	203ff426 	beq	r4,zero,10003354 <___vfprintf_internal_r+0x794>
10003384:	d9801c04 	addi	r6,sp,112
10003388:	980b883a 	mov	r5,r19
1000338c:	a009883a 	mov	r4,r20
10003390:	0009d380 	call	10009d38 <__sprint_r>
10003394:	103ee91e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003398:	843ffc04 	addi	r16,r16,-16
1000339c:	81000448 	cmpgei	r4,r16,17
100033a0:	d8c01e17 	ldw	r3,120(sp)
100033a4:	d8801d17 	ldw	r2,116(sp)
100033a8:	b811883a 	mov	r8,r23
100033ac:	203fed1e 	bne	r4,zero,10003364 <___vfprintf_internal_r+0x7a4>
100033b0:	e019883a 	mov	r12,fp
100033b4:	10800044 	addi	r2,r2,1
100033b8:	1c07883a 	add	r3,r3,r16
100033bc:	d8801d15 	stw	r2,116(sp)
100033c0:	43000015 	stw	r12,0(r8)
100033c4:	44000115 	stw	r16,4(r8)
100033c8:	d8c01e15 	stw	r3,120(sp)
100033cc:	10800210 	cmplti	r2,r2,8
100033d0:	103fce1e 	bne	r2,zero,1000330c <___vfprintf_internal_r+0x74c>
100033d4:	d9000517 	ldw	r4,20(sp)
100033d8:	d9801c04 	addi	r6,sp,112
100033dc:	980b883a 	mov	r5,r19
100033e0:	0009d380 	call	10009d38 <__sprint_r>
100033e4:	103ed51e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
100033e8:	d8c01e17 	ldw	r3,120(sp)
100033ec:	003fc706 	br	1000330c <___vfprintf_internal_r+0x74c>
100033f0:	21003fcc 	andi	r4,r4,255
100033f4:	2005d91e 	bne	r4,zero,10004b5c <___vfprintf_internal_r+0x1f9c>
100033f8:	6080080c 	andi	r2,r12,32
100033fc:	1000ed1e 	bne	r2,zero,100037b4 <___vfprintf_internal_r+0xbf4>
10003400:	d8800617 	ldw	r2,24(sp)
10003404:	60c0040c 	andi	r3,r12,16
10003408:	15400017 	ldw	r21,0(r2)
1000340c:	10800104 	addi	r2,r2,4
10003410:	18001e1e 	bne	r3,zero,1000348c <___vfprintf_internal_r+0x8cc>
10003414:	60c0100c 	andi	r3,r12,64
10003418:	1804db26 	beq	r3,zero,10004788 <___vfprintf_internal_r+0x1bc8>
1000341c:	d8800615 	stw	r2,24(sp)
10003420:	ad7fffcc 	andi	r21,r21,65535
10003424:	0029883a 	mov	r20,zero
10003428:	0005883a 	mov	r2,zero
1000342c:	0000bf06 	br	1000372c <___vfprintf_internal_r+0xb6c>
10003430:	21003fcc 	andi	r4,r4,255
10003434:	2005cb1e 	bne	r4,zero,10004b64 <___vfprintf_internal_r+0x1fa4>
10003438:	d9000617 	ldw	r4,24(sp)
1000343c:	6080080c 	andi	r2,r12,32
10003440:	20c00104 	addi	r3,r4,4
10003444:	1003d51e 	bne	r2,zero,1000439c <___vfprintf_internal_r+0x17dc>
10003448:	6080040c 	andi	r2,r12,16
1000344c:	1004301e 	bne	r2,zero,10004510 <___vfprintf_internal_r+0x1950>
10003450:	6300100c 	andi	r12,r12,64
10003454:	60042e26 	beq	r12,zero,10004510 <___vfprintf_internal_r+0x1950>
10003458:	d8800617 	ldw	r2,24(sp)
1000345c:	d8c00615 	stw	r3,24(sp)
10003460:	d8c00417 	ldw	r3,16(sp)
10003464:	10800017 	ldw	r2,0(r2)
10003468:	10c0000d 	sth	r3,0(r2)
1000346c:	003e0906 	br	10002c94 <___vfprintf_internal_r+0xd4>
10003470:	21003fcc 	andi	r4,r4,255
10003474:	2005c31e 	bne	r4,zero,10004b84 <___vfprintf_internal_r+0x1fc4>
10003478:	6080080c 	andi	r2,r12,32
1000347c:	63000414 	ori	r12,r12,16
10003480:	1000cc1e 	bne	r2,zero,100037b4 <___vfprintf_internal_r+0xbf4>
10003484:	d8800617 	ldw	r2,24(sp)
10003488:	10800104 	addi	r2,r2,4
1000348c:	d8c00617 	ldw	r3,24(sp)
10003490:	0029883a 	mov	r20,zero
10003494:	d8800615 	stw	r2,24(sp)
10003498:	1d400017 	ldw	r21,0(r3)
1000349c:	0005883a 	mov	r2,zero
100034a0:	0000a206 	br	1000372c <___vfprintf_internal_r+0xb6c>
100034a4:	63000214 	ori	r12,r12,8
100034a8:	b2800007 	ldb	r10,0(r22)
100034ac:	003e1f06 	br	10002d2c <___vfprintf_internal_r+0x16c>
100034b0:	21003fcc 	andi	r4,r4,255
100034b4:	2005b71e 	bne	r4,zero,10004b94 <___vfprintf_internal_r+0x1fd4>
100034b8:	d8c00617 	ldw	r3,24(sp)
100034bc:	00a00034 	movhi	r2,32768
100034c0:	10bfffc4 	addi	r2,r2,-1
100034c4:	1d000117 	ldw	r20,4(r3)
100034c8:	1c800017 	ldw	r18,0(r3)
100034cc:	01dffc34 	movhi	r7,32752
100034d0:	a0a0703a 	and	r16,r20,r2
100034d4:	01bfffc4 	movi	r6,-1
100034d8:	18800204 	addi	r2,r3,8
100034dc:	39ffffc4 	addi	r7,r7,-1
100034e0:	9009883a 	mov	r4,r18
100034e4:	800b883a 	mov	r5,r16
100034e8:	da000f15 	stw	r8,60(sp)
100034ec:	dac00e15 	stw	r11,56(sp)
100034f0:	db000715 	stw	r12,28(sp)
100034f4:	dd000a15 	stw	r20,40(sp)
100034f8:	dc800915 	stw	r18,36(sp)
100034fc:	d8800615 	stw	r2,24(sp)
10003500:	000ecb00 	call	1000ecb0 <__unorddf2>
10003504:	db000717 	ldw	r12,28(sp)
10003508:	dac00e17 	ldw	r11,56(sp)
1000350c:	da000f17 	ldw	r8,60(sp)
10003510:	1003161e 	bne	r2,zero,1000416c <___vfprintf_internal_r+0x15ac>
10003514:	01dffc34 	movhi	r7,32752
10003518:	01bfffc4 	movi	r6,-1
1000351c:	39ffffc4 	addi	r7,r7,-1
10003520:	9009883a 	mov	r4,r18
10003524:	800b883a 	mov	r5,r16
10003528:	000dbc80 	call	1000dbc8 <__ledf2>
1000352c:	db000717 	ldw	r12,28(sp)
10003530:	dac00e17 	ldw	r11,56(sp)
10003534:	da000f17 	ldw	r8,60(sp)
10003538:	00830c0e 	bge	zero,r2,1000416c <___vfprintf_internal_r+0x15ac>
1000353c:	000d883a 	mov	r6,zero
10003540:	000f883a 	mov	r7,zero
10003544:	9009883a 	mov	r4,r18
10003548:	a00b883a 	mov	r5,r20
1000354c:	da000e15 	stw	r8,56(sp)
10003550:	000dbc80 	call	1000dbc8 <__ledf2>
10003554:	db000717 	ldw	r12,28(sp)
10003558:	da000e17 	ldw	r8,56(sp)
1000355c:	1004e216 	blt	r2,zero,100048e8 <___vfprintf_internal_r+0x1d28>
10003560:	db401543 	ldbu	r13,85(sp)
10003564:	e0801210 	cmplti	r2,fp,72
10003568:	1004cb1e 	bne	r2,zero,10004898 <___vfprintf_internal_r+0x1cd8>
1000356c:	04040074 	movhi	r16,4097
10003570:	84068c04 	addi	r16,r16,6704
10003574:	04bfdfc4 	movi	r18,-129
10003578:	64a4703a 	and	r18,r12,r18
1000357c:	054000c4 	movi	r21,3
10003580:	050000c4 	movi	r20,3
10003584:	0017883a 	mov	r11,zero
10003588:	d8000715 	stw	zero,28(sp)
1000358c:	0000a306 	br	1000381c <___vfprintf_internal_r+0xc5c>
10003590:	21003fcc 	andi	r4,r4,255
10003594:	20057d1e 	bne	r4,zero,10004b8c <___vfprintf_internal_r+0x1fcc>
10003598:	6080080c 	andi	r2,r12,32
1000359c:	63000414 	ori	r12,r12,16
100035a0:	10007d1e 	bne	r2,zero,10003798 <___vfprintf_internal_r+0xbd8>
100035a4:	d8800617 	ldw	r2,24(sp)
100035a8:	10800104 	addi	r2,r2,4
100035ac:	d8c00617 	ldw	r3,24(sp)
100035b0:	1d400017 	ldw	r21,0(r3)
100035b4:	d8800615 	stw	r2,24(sp)
100035b8:	a829d7fa 	srai	r20,r21,31
100035bc:	a005883a 	mov	r2,r20
100035c0:	103f020e 	bge	r2,zero,100031cc <___vfprintf_internal_r+0x60c>
100035c4:	056bc83a 	sub	r21,zero,r21
100035c8:	a804c03a 	cmpne	r2,r21,zero
100035cc:	0529c83a 	sub	r20,zero,r20
100035d0:	a0a9c83a 	sub	r20,r20,r2
100035d4:	00800b44 	movi	r2,45
100035d8:	d8801545 	stb	r2,85(sp)
100035dc:	58ffffe0 	cmpeqi	r3,r11,-1
100035e0:	03400b44 	movi	r13,45
100035e4:	00800044 	movi	r2,1
100035e8:	18005426 	beq	r3,zero,1000373c <___vfprintf_internal_r+0xb7c>
100035ec:	10c00060 	cmpeqi	r3,r2,1
100035f0:	18007e1e 	bne	r3,zero,100037ec <___vfprintf_internal_r+0xc2c>
100035f4:	108000a0 	cmpeqi	r2,r2,2
100035f8:	1002371e 	bne	r2,zero,10003ed8 <___vfprintf_internal_r+0x1318>
100035fc:	b807883a 	mov	r3,r23
10003600:	00000106 	br	10003608 <___vfprintf_internal_r+0xa48>
10003604:	8007883a 	mov	r3,r16
10003608:	a808d0fa 	srli	r4,r21,3
1000360c:	a00a977a 	slli	r5,r20,29
10003610:	a028d0fa 	srli	r20,r20,3
10003614:	ad4001cc 	andi	r21,r21,7
10003618:	a8800c04 	addi	r2,r21,48
1000361c:	292ab03a 	or	r21,r5,r4
10003620:	18bfffc5 	stb	r2,-1(r3)
10003624:	ad08b03a 	or	r4,r21,r20
10003628:	1c3fffc4 	addi	r16,r3,-1
1000362c:	203ff51e 	bne	r4,zero,10003604 <___vfprintf_internal_r+0xa44>
10003630:	6100004c 	andi	r4,r12,1
10003634:	2000a026 	beq	r4,zero,100038b8 <___vfprintf_internal_r+0xcf8>
10003638:	10803fcc 	andi	r2,r2,255
1000363c:	1080201c 	xori	r2,r2,128
10003640:	10bfe004 	addi	r2,r2,-128
10003644:	10800c18 	cmpnei	r2,r2,48
10003648:	10009b26 	beq	r2,zero,100038b8 <___vfprintf_internal_r+0xcf8>
1000364c:	18ffff84 	addi	r3,r3,-2
10003650:	00800c04 	movi	r2,48
10003654:	80bfffc5 	stb	r2,-1(r16)
10003658:	b8e9c83a 	sub	r20,r23,r3
1000365c:	6025883a 	mov	r18,r12
10003660:	1821883a 	mov	r16,r3
10003664:	00006906 	br	1000380c <___vfprintf_internal_r+0xc4c>
10003668:	21003fcc 	andi	r4,r4,255
1000366c:	2005391e 	bne	r4,zero,10004b54 <___vfprintf_internal_r+0x1f94>
10003670:	00840074 	movhi	r2,4097
10003674:	10868f04 	addi	r2,r2,6716
10003678:	d8800c15 	stw	r2,48(sp)
1000367c:	6080080c 	andi	r2,r12,32
10003680:	103e901e 	bne	r2,zero,100030c4 <___vfprintf_internal_r+0x504>
10003684:	d8c00617 	ldw	r3,24(sp)
10003688:	6080040c 	andi	r2,r12,16
1000368c:	1d400017 	ldw	r21,0(r3)
10003690:	18c00104 	addi	r3,r3,4
10003694:	d8c00615 	stw	r3,24(sp)
10003698:	1002ae1e 	bne	r2,zero,10004154 <___vfprintf_internal_r+0x1594>
1000369c:	6080100c 	andi	r2,r12,64
100036a0:	1002ac26 	beq	r2,zero,10004154 <___vfprintf_internal_r+0x1594>
100036a4:	ad7fffcc 	andi	r21,r21,65535
100036a8:	0029883a 	mov	r20,zero
100036ac:	003e8a06 	br	100030d8 <___vfprintf_internal_r+0x518>
100036b0:	21003fcc 	andi	r4,r4,255
100036b4:	2005391e 	bne	r4,zero,10004b9c <___vfprintf_internal_r+0x1fdc>
100036b8:	6080080c 	andi	r2,r12,32
100036bc:	63000414 	ori	r12,r12,16
100036c0:	1000431e 	bne	r2,zero,100037d0 <___vfprintf_internal_r+0xc10>
100036c4:	d8800617 	ldw	r2,24(sp)
100036c8:	10800104 	addi	r2,r2,4
100036cc:	d8c00617 	ldw	r3,24(sp)
100036d0:	0029883a 	mov	r20,zero
100036d4:	d8800615 	stw	r2,24(sp)
100036d8:	1d400017 	ldw	r21,0(r3)
100036dc:	00800044 	movi	r2,1
100036e0:	00001206 	br	1000372c <___vfprintf_internal_r+0xb6c>
100036e4:	63000814 	ori	r12,r12,32
100036e8:	b2800007 	ldb	r10,0(r22)
100036ec:	003d8f06 	br	10002d2c <___vfprintf_internal_r+0x16c>
100036f0:	d8c00617 	ldw	r3,24(sp)
100036f4:	00800c04 	movi	r2,48
100036f8:	d8801585 	stb	r2,86(sp)
100036fc:	00801e04 	movi	r2,120
10003700:	01040074 	movhi	r4,4097
10003704:	d88015c5 	stb	r2,87(sp)
10003708:	1d400017 	ldw	r21,0(r3)
1000370c:	18800104 	addi	r2,r3,4
10003710:	d8800615 	stw	r2,24(sp)
10003714:	20869404 	addi	r2,r4,6736
10003718:	d8800c15 	stw	r2,48(sp)
1000371c:	0029883a 	mov	r20,zero
10003720:	63000094 	ori	r12,r12,2
10003724:	00800084 	movi	r2,2
10003728:	07001e04 	movi	fp,120
1000372c:	d8001545 	stb	zero,85(sp)
10003730:	58ffffe0 	cmpeqi	r3,r11,-1
10003734:	001b883a 	mov	r13,zero
10003738:	183fac1e 	bne	r3,zero,100035ec <___vfprintf_internal_r+0xa2c>
1000373c:	04bfdfc4 	movi	r18,-129
10003740:	ad06b03a 	or	r3,r21,r20
10003744:	64a4703a 	and	r18,r12,r18
10003748:	18018d1e 	bne	r3,zero,10003d80 <___vfprintf_internal_r+0x11c0>
1000374c:	5803b91e 	bne	r11,zero,10004634 <___vfprintf_internal_r+0x1a74>
10003750:	103ea71e 	bne	r2,zero,100031f0 <___vfprintf_internal_r+0x630>
10003754:	6500004c 	andi	r20,r12,1
10003758:	a0028226 	beq	r20,zero,10004164 <___vfprintf_internal_r+0x15a4>
1000375c:	00800c04 	movi	r2,48
10003760:	d88028c5 	stb	r2,163(sp)
10003764:	dc0028c4 	addi	r16,sp,163
10003768:	00002806 	br	1000380c <___vfprintf_internal_r+0xc4c>
1000376c:	b2800007 	ldb	r10,0(r22)
10003770:	50801b18 	cmpnei	r2,r10,108
10003774:	10032926 	beq	r2,zero,1000441c <___vfprintf_internal_r+0x185c>
10003778:	63000414 	ori	r12,r12,16
1000377c:	003d6b06 	br	10002d2c <___vfprintf_internal_r+0x16c>
10003780:	63001014 	ori	r12,r12,64
10003784:	b2800007 	ldb	r10,0(r22)
10003788:	003d6806 	br	10002d2c <___vfprintf_internal_r+0x16c>
1000378c:	d9000517 	ldw	r4,20(sp)
10003790:	0006ddc0 	call	10006ddc <__sinit>
10003794:	003d2306 	br	10002c24 <___vfprintf_internal_r+0x64>
10003798:	d8c00617 	ldw	r3,24(sp)
1000379c:	18800117 	ldw	r2,4(r3)
100037a0:	1d400017 	ldw	r21,0(r3)
100037a4:	18c00204 	addi	r3,r3,8
100037a8:	d8c00615 	stw	r3,24(sp)
100037ac:	1029883a 	mov	r20,r2
100037b0:	003e8506 	br	100031c8 <___vfprintf_internal_r+0x608>
100037b4:	d8c00617 	ldw	r3,24(sp)
100037b8:	0005883a 	mov	r2,zero
100037bc:	1d400017 	ldw	r21,0(r3)
100037c0:	1d000117 	ldw	r20,4(r3)
100037c4:	18c00204 	addi	r3,r3,8
100037c8:	d8c00615 	stw	r3,24(sp)
100037cc:	003fd706 	br	1000372c <___vfprintf_internal_r+0xb6c>
100037d0:	d8c00617 	ldw	r3,24(sp)
100037d4:	00800044 	movi	r2,1
100037d8:	1d400017 	ldw	r21,0(r3)
100037dc:	1d000117 	ldw	r20,4(r3)
100037e0:	18c00204 	addi	r3,r3,8
100037e4:	d8c00615 	stw	r3,24(sp)
100037e8:	003fd006 	br	1000372c <___vfprintf_internal_r+0xb6c>
100037ec:	a000111e 	bne	r20,zero,10003834 <___vfprintf_internal_r+0xc74>
100037f0:	a88002a8 	cmpgeui	r2,r21,10
100037f4:	10000f1e 	bne	r2,zero,10003834 <___vfprintf_internal_r+0xc74>
100037f8:	ad400c04 	addi	r21,r21,48
100037fc:	dd4028c5 	stb	r21,163(sp)
10003800:	6025883a 	mov	r18,r12
10003804:	05000044 	movi	r20,1
10003808:	dc0028c4 	addi	r16,sp,163
1000380c:	582b883a 	mov	r21,r11
10003810:	5d00010e 	bge	r11,r20,10003818 <___vfprintf_internal_r+0xc58>
10003814:	a02b883a 	mov	r21,r20
10003818:	d8000715 	stw	zero,28(sp)
1000381c:	6b403fcc 	andi	r13,r13,255
10003820:	6b40201c 	xori	r13,r13,128
10003824:	6b7fe004 	addi	r13,r13,-128
10003828:	683e8126 	beq	r13,zero,10003230 <___vfprintf_internal_r+0x670>
1000382c:	ad400044 	addi	r21,r21,1
10003830:	003e7f06 	br	10003230 <___vfprintf_internal_r+0x670>
10003834:	dc400e15 	stw	r17,56(sp)
10003838:	b821883a 	mov	r16,r23
1000383c:	a023883a 	mov	r17,r20
10003840:	db000715 	stw	r12,28(sp)
10003844:	9829883a 	mov	r20,r19
10003848:	dac00f15 	stw	r11,60(sp)
1000384c:	4025883a 	mov	r18,r8
10003850:	6827883a 	mov	r19,r13
10003854:	00000206 	br	10003860 <___vfprintf_internal_r+0xca0>
10003858:	102b883a 	mov	r21,r2
1000385c:	1823883a 	mov	r17,r3
10003860:	a809883a 	mov	r4,r21
10003864:	880b883a 	mov	r5,r17
10003868:	01800284 	movi	r6,10
1000386c:	000f883a 	mov	r7,zero
10003870:	000c1180 	call	1000c118 <__umoddi3>
10003874:	10800c04 	addi	r2,r2,48
10003878:	843fffc4 	addi	r16,r16,-1
1000387c:	a809883a 	mov	r4,r21
10003880:	880b883a 	mov	r5,r17
10003884:	80800005 	stb	r2,0(r16)
10003888:	01800284 	movi	r6,10
1000388c:	000f883a 	mov	r7,zero
10003890:	000bb800 	call	1000bb80 <__udivdi3>
10003894:	883ff01e 	bne	r17,zero,10003858 <___vfprintf_internal_r+0xc98>
10003898:	ad4002a8 	cmpgeui	r21,r21,10
1000389c:	a83fee1e 	bne	r21,zero,10003858 <___vfprintf_internal_r+0xc98>
100038a0:	db000717 	ldw	r12,28(sp)
100038a4:	dc400e17 	ldw	r17,56(sp)
100038a8:	dac00f17 	ldw	r11,60(sp)
100038ac:	981b883a 	mov	r13,r19
100038b0:	9011883a 	mov	r8,r18
100038b4:	a027883a 	mov	r19,r20
100038b8:	bc29c83a 	sub	r20,r23,r16
100038bc:	6025883a 	mov	r18,r12
100038c0:	003fd206 	br	1000380c <___vfprintf_internal_r+0xc4c>
100038c4:	e2801990 	cmplti	r10,fp,102
100038c8:	5000ea1e 	bne	r10,zero,10003c74 <___vfprintf_internal_r+0x10b4>
100038cc:	d9000917 	ldw	r4,36(sp)
100038d0:	d9400a17 	ldw	r5,40(sp)
100038d4:	000d883a 	mov	r6,zero
100038d8:	000f883a 	mov	r7,zero
100038dc:	da000f15 	stw	r8,60(sp)
100038e0:	d8c00e15 	stw	r3,56(sp)
100038e4:	000da580 	call	1000da58 <__eqdf2>
100038e8:	d8c00e17 	ldw	r3,56(sp)
100038ec:	da000f17 	ldw	r8,60(sp)
100038f0:	1001891e 	bne	r2,zero,10003f18 <___vfprintf_internal_r+0x1358>
100038f4:	d8801d17 	ldw	r2,116(sp)
100038f8:	01040074 	movhi	r4,4097
100038fc:	21069b04 	addi	r4,r4,6764
10003900:	10800044 	addi	r2,r2,1
10003904:	18c00044 	addi	r3,r3,1
10003908:	41000015 	stw	r4,0(r8)
1000390c:	01000044 	movi	r4,1
10003910:	d8801d15 	stw	r2,116(sp)
10003914:	41000115 	stw	r4,4(r8)
10003918:	d8c01e15 	stw	r3,120(sp)
1000391c:	10800208 	cmpgei	r2,r2,8
10003920:	1003331e 	bne	r2,zero,100045f0 <___vfprintf_internal_r+0x1a30>
10003924:	42000204 	addi	r8,r8,8
10003928:	d8801617 	ldw	r2,88(sp)
1000392c:	d8c00817 	ldw	r3,32(sp)
10003930:	10c00416 	blt	r2,r3,10003944 <___vfprintf_internal_r+0xd84>
10003934:	9080004c 	andi	r2,r18,1
10003938:	1000021e 	bne	r2,zero,10003944 <___vfprintf_internal_r+0xd84>
1000393c:	d8c01e17 	ldw	r3,120(sp)
10003940:	003e6e06 	br	100032fc <___vfprintf_internal_r+0x73c>
10003944:	d8800d17 	ldw	r2,52(sp)
10003948:	d8c01e17 	ldw	r3,120(sp)
1000394c:	d9000b17 	ldw	r4,44(sp)
10003950:	40800015 	stw	r2,0(r8)
10003954:	d8801d17 	ldw	r2,116(sp)
10003958:	20c7883a 	add	r3,r4,r3
1000395c:	41000115 	stw	r4,4(r8)
10003960:	10800044 	addi	r2,r2,1
10003964:	d8801d15 	stw	r2,116(sp)
10003968:	d8c01e15 	stw	r3,120(sp)
1000396c:	10800208 	cmpgei	r2,r2,8
10003970:	1002b11e 	bne	r2,zero,10004438 <___vfprintf_internal_r+0x1878>
10003974:	42000204 	addi	r8,r8,8
10003978:	d8800817 	ldw	r2,32(sp)
1000397c:	143fffc4 	addi	r16,r2,-1
10003980:	043e5e0e 	bge	zero,r16,100032fc <___vfprintf_internal_r+0x73c>
10003984:	03040074 	movhi	r12,4097
10003988:	81000450 	cmplti	r4,r16,17
1000398c:	63069b84 	addi	r12,r12,6766
10003990:	d8801d17 	ldw	r2,116(sp)
10003994:	2003731e 	bne	r4,zero,10004764 <___vfprintf_internal_r+0x1ba4>
10003998:	dc400715 	stw	r17,28(sp)
1000399c:	05000404 	movi	r20,16
100039a0:	df000517 	ldw	fp,20(sp)
100039a4:	6023883a 	mov	r17,r12
100039a8:	00000406 	br	100039bc <___vfprintf_internal_r+0xdfc>
100039ac:	42000204 	addi	r8,r8,8
100039b0:	843ffc04 	addi	r16,r16,-16
100039b4:	81000448 	cmpgei	r4,r16,17
100039b8:	20036826 	beq	r4,zero,1000475c <___vfprintf_internal_r+0x1b9c>
100039bc:	10800044 	addi	r2,r2,1
100039c0:	18c00404 	addi	r3,r3,16
100039c4:	44400015 	stw	r17,0(r8)
100039c8:	45000115 	stw	r20,4(r8)
100039cc:	d8c01e15 	stw	r3,120(sp)
100039d0:	d8801d15 	stw	r2,116(sp)
100039d4:	11000208 	cmpgei	r4,r2,8
100039d8:	203ff426 	beq	r4,zero,100039ac <___vfprintf_internal_r+0xdec>
100039dc:	d9801c04 	addi	r6,sp,112
100039e0:	980b883a 	mov	r5,r19
100039e4:	e009883a 	mov	r4,fp
100039e8:	0009d380 	call	10009d38 <__sprint_r>
100039ec:	103d531e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
100039f0:	d8c01e17 	ldw	r3,120(sp)
100039f4:	d8801d17 	ldw	r2,116(sp)
100039f8:	b811883a 	mov	r8,r23
100039fc:	003fec06 	br	100039b0 <___vfprintf_internal_r+0xdf0>
10003a00:	8d4fc83a 	sub	r7,r17,r21
10003a04:	01fe2f0e 	bge	zero,r7,100032c4 <___vfprintf_internal_r+0x704>
10003a08:	03040074 	movhi	r12,4097
10003a0c:	39000450 	cmplti	r4,r7,17
10003a10:	63069b84 	addi	r12,r12,6766
10003a14:	d8801d17 	ldw	r2,116(sp)
10003a18:	2000271e 	bne	r4,zero,10003ab8 <___vfprintf_internal_r+0xef8>
10003a1c:	dc000e15 	stw	r16,56(sp)
10003a20:	dc800f15 	stw	r18,60(sp)
10003a24:	dc401015 	stw	r17,64(sp)
10003a28:	03400404 	movi	r13,16
10003a2c:	3821883a 	mov	r16,r7
10003a30:	dac01215 	stw	r11,72(sp)
10003a34:	dc400517 	ldw	r17,20(sp)
10003a38:	6025883a 	mov	r18,r12
10003a3c:	00000406 	br	10003a50 <___vfprintf_internal_r+0xe90>
10003a40:	843ffc04 	addi	r16,r16,-16
10003a44:	81000448 	cmpgei	r4,r16,17
10003a48:	42000204 	addi	r8,r8,8
10003a4c:	20001426 	beq	r4,zero,10003aa0 <___vfprintf_internal_r+0xee0>
10003a50:	10800044 	addi	r2,r2,1
10003a54:	18c00404 	addi	r3,r3,16
10003a58:	44800015 	stw	r18,0(r8)
10003a5c:	43400115 	stw	r13,4(r8)
10003a60:	d8c01e15 	stw	r3,120(sp)
10003a64:	d8801d15 	stw	r2,116(sp)
10003a68:	11000208 	cmpgei	r4,r2,8
10003a6c:	203ff426 	beq	r4,zero,10003a40 <___vfprintf_internal_r+0xe80>
10003a70:	d9801c04 	addi	r6,sp,112
10003a74:	980b883a 	mov	r5,r19
10003a78:	8809883a 	mov	r4,r17
10003a7c:	0009d380 	call	10009d38 <__sprint_r>
10003a80:	103d2e1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003a84:	843ffc04 	addi	r16,r16,-16
10003a88:	81000448 	cmpgei	r4,r16,17
10003a8c:	d8c01e17 	ldw	r3,120(sp)
10003a90:	d8801d17 	ldw	r2,116(sp)
10003a94:	b811883a 	mov	r8,r23
10003a98:	03400404 	movi	r13,16
10003a9c:	203fec1e 	bne	r4,zero,10003a50 <___vfprintf_internal_r+0xe90>
10003aa0:	800f883a 	mov	r7,r16
10003aa4:	9019883a 	mov	r12,r18
10003aa8:	dc000e17 	ldw	r16,56(sp)
10003aac:	dc401017 	ldw	r17,64(sp)
10003ab0:	dac01217 	ldw	r11,72(sp)
10003ab4:	dc800f17 	ldw	r18,60(sp)
10003ab8:	10800044 	addi	r2,r2,1
10003abc:	19c7883a 	add	r3,r3,r7
10003ac0:	d8801d15 	stw	r2,116(sp)
10003ac4:	43000015 	stw	r12,0(r8)
10003ac8:	41c00115 	stw	r7,4(r8)
10003acc:	d8c01e15 	stw	r3,120(sp)
10003ad0:	10800208 	cmpgei	r2,r2,8
10003ad4:	1002cd1e 	bne	r2,zero,1000460c <___vfprintf_internal_r+0x1a4c>
10003ad8:	5d0fc83a 	sub	r7,r11,r20
10003adc:	42000204 	addi	r8,r8,8
10003ae0:	01fdfa0e 	bge	zero,r7,100032cc <___vfprintf_internal_r+0x70c>
10003ae4:	03040074 	movhi	r12,4097
10003ae8:	39000450 	cmplti	r4,r7,17
10003aec:	63069b84 	addi	r12,r12,6766
10003af0:	d8801d17 	ldw	r2,116(sp)
10003af4:	2000251e 	bne	r4,zero,10003b8c <___vfprintf_internal_r+0xfcc>
10003af8:	dc000e15 	stw	r16,56(sp)
10003afc:	dc800f15 	stw	r18,60(sp)
10003b00:	dc401015 	stw	r17,64(sp)
10003b04:	02c00404 	movi	r11,16
10003b08:	3821883a 	mov	r16,r7
10003b0c:	dc400517 	ldw	r17,20(sp)
10003b10:	6025883a 	mov	r18,r12
10003b14:	00000406 	br	10003b28 <___vfprintf_internal_r+0xf68>
10003b18:	843ffc04 	addi	r16,r16,-16
10003b1c:	81000448 	cmpgei	r4,r16,17
10003b20:	42000204 	addi	r8,r8,8
10003b24:	20001426 	beq	r4,zero,10003b78 <___vfprintf_internal_r+0xfb8>
10003b28:	10800044 	addi	r2,r2,1
10003b2c:	18c00404 	addi	r3,r3,16
10003b30:	44800015 	stw	r18,0(r8)
10003b34:	42c00115 	stw	r11,4(r8)
10003b38:	d8c01e15 	stw	r3,120(sp)
10003b3c:	d8801d15 	stw	r2,116(sp)
10003b40:	11000208 	cmpgei	r4,r2,8
10003b44:	203ff426 	beq	r4,zero,10003b18 <___vfprintf_internal_r+0xf58>
10003b48:	d9801c04 	addi	r6,sp,112
10003b4c:	980b883a 	mov	r5,r19
10003b50:	8809883a 	mov	r4,r17
10003b54:	0009d380 	call	10009d38 <__sprint_r>
10003b58:	103cf81e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003b5c:	843ffc04 	addi	r16,r16,-16
10003b60:	81000448 	cmpgei	r4,r16,17
10003b64:	d8c01e17 	ldw	r3,120(sp)
10003b68:	d8801d17 	ldw	r2,116(sp)
10003b6c:	b811883a 	mov	r8,r23
10003b70:	02c00404 	movi	r11,16
10003b74:	203fec1e 	bne	r4,zero,10003b28 <___vfprintf_internal_r+0xf68>
10003b78:	800f883a 	mov	r7,r16
10003b7c:	9019883a 	mov	r12,r18
10003b80:	dc401017 	ldw	r17,64(sp)
10003b84:	dc000e17 	ldw	r16,56(sp)
10003b88:	dc800f17 	ldw	r18,60(sp)
10003b8c:	10800044 	addi	r2,r2,1
10003b90:	19c7883a 	add	r3,r3,r7
10003b94:	d8801d15 	stw	r2,116(sp)
10003b98:	43000015 	stw	r12,0(r8)
10003b9c:	41c00115 	stw	r7,4(r8)
10003ba0:	d8c01e15 	stw	r3,120(sp)
10003ba4:	10800208 	cmpgei	r2,r2,8
10003ba8:	1001621e 	bne	r2,zero,10004134 <___vfprintf_internal_r+0x1574>
10003bac:	42000204 	addi	r8,r8,8
10003bb0:	003dc606 	br	100032cc <___vfprintf_internal_r+0x70c>
10003bb4:	d9000517 	ldw	r4,20(sp)
10003bb8:	d9801c04 	addi	r6,sp,112
10003bbc:	980b883a 	mov	r5,r19
10003bc0:	0009d380 	call	10009d38 <__sprint_r>
10003bc4:	103dd726 	beq	r2,zero,10003324 <___vfprintf_internal_r+0x764>
10003bc8:	003cdc06 	br	10002f3c <___vfprintf_internal_r+0x37c>
10003bcc:	d9000517 	ldw	r4,20(sp)
10003bd0:	d9801c04 	addi	r6,sp,112
10003bd4:	980b883a 	mov	r5,r19
10003bd8:	0009d380 	call	10009d38 <__sprint_r>
10003bdc:	103cd71e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003be0:	d9001617 	ldw	r4,88(sp)
10003be4:	d8c01e17 	ldw	r3,120(sp)
10003be8:	b811883a 	mov	r8,r23
10003bec:	2002951e 	bne	r4,zero,10004644 <___vfprintf_internal_r+0x1a84>
10003bf0:	d9000817 	ldw	r4,32(sp)
10003bf4:	9080004c 	andi	r2,r18,1
10003bf8:	1104b03a 	or	r2,r2,r4
10003bfc:	103dbf26 	beq	r2,zero,100032fc <___vfprintf_internal_r+0x73c>
10003c00:	d8800d17 	ldw	r2,52(sp)
10003c04:	d9000b17 	ldw	r4,44(sp)
10003c08:	40800015 	stw	r2,0(r8)
10003c0c:	d8801d17 	ldw	r2,116(sp)
10003c10:	20c7883a 	add	r3,r4,r3
10003c14:	41000115 	stw	r4,4(r8)
10003c18:	10800044 	addi	r2,r2,1
10003c1c:	d8c01e15 	stw	r3,120(sp)
10003c20:	d8801d15 	stw	r2,116(sp)
10003c24:	11000208 	cmpgei	r4,r2,8
10003c28:	2003641e 	bne	r4,zero,100049bc <___vfprintf_internal_r+0x1dfc>
10003c2c:	42000204 	addi	r8,r8,8
10003c30:	d9000817 	ldw	r4,32(sp)
10003c34:	10800044 	addi	r2,r2,1
10003c38:	d8801d15 	stw	r2,116(sp)
10003c3c:	20c7883a 	add	r3,r4,r3
10003c40:	44000015 	stw	r16,0(r8)
10003c44:	41000115 	stw	r4,4(r8)
10003c48:	d8c01e15 	stw	r3,120(sp)
10003c4c:	10800208 	cmpgei	r2,r2,8
10003c50:	103da926 	beq	r2,zero,100032f8 <___vfprintf_internal_r+0x738>
10003c54:	d9000517 	ldw	r4,20(sp)
10003c58:	d9801c04 	addi	r6,sp,112
10003c5c:	980b883a 	mov	r5,r19
10003c60:	0009d380 	call	10009d38 <__sprint_r>
10003c64:	103cb51e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003c68:	d8c01e17 	ldw	r3,120(sp)
10003c6c:	b811883a 	mov	r8,r23
10003c70:	003da206 	br	100032fc <___vfprintf_internal_r+0x73c>
10003c74:	d8800817 	ldw	r2,32(sp)
10003c78:	df001d17 	ldw	fp,116(sp)
10003c7c:	18c00044 	addi	r3,r3,1
10003c80:	10800088 	cmpgei	r2,r2,2
10003c84:	e5000044 	addi	r20,fp,1
10003c88:	42800204 	addi	r10,r8,8
10003c8c:	1000fb26 	beq	r2,zero,1000407c <___vfprintf_internal_r+0x14bc>
10003c90:	00800044 	movi	r2,1
10003c94:	40800115 	stw	r2,4(r8)
10003c98:	44000015 	stw	r16,0(r8)
10003c9c:	d8c01e15 	stw	r3,120(sp)
10003ca0:	dd001d15 	stw	r20,116(sp)
10003ca4:	a0800210 	cmplti	r2,r20,8
10003ca8:	10022c26 	beq	r2,zero,1000455c <___vfprintf_internal_r+0x199c>
10003cac:	d8800b17 	ldw	r2,44(sp)
10003cb0:	d9000d17 	ldw	r4,52(sp)
10003cb4:	a5000044 	addi	r20,r20,1
10003cb8:	1887883a 	add	r3,r3,r2
10003cbc:	50800115 	stw	r2,4(r10)
10003cc0:	51000015 	stw	r4,0(r10)
10003cc4:	d8c01e15 	stw	r3,120(sp)
10003cc8:	dd001d15 	stw	r20,116(sp)
10003ccc:	a0800208 	cmpgei	r2,r20,8
10003cd0:	1002191e 	bne	r2,zero,10004538 <___vfprintf_internal_r+0x1978>
10003cd4:	52800204 	addi	r10,r10,8
10003cd8:	d8800817 	ldw	r2,32(sp)
10003cdc:	d9000917 	ldw	r4,36(sp)
10003ce0:	d9400a17 	ldw	r5,40(sp)
10003ce4:	52000204 	addi	r8,r10,8
10003ce8:	12ffffc4 	addi	r11,r2,-1
10003cec:	a7000044 	addi	fp,r20,1
10003cf0:	000d883a 	mov	r6,zero
10003cf4:	000f883a 	mov	r7,zero
10003cf8:	d8c01215 	stw	r3,72(sp)
10003cfc:	da800f15 	stw	r10,60(sp)
10003d00:	da000e15 	stw	r8,56(sp)
10003d04:	dac00715 	stw	r11,28(sp)
10003d08:	df001015 	stw	fp,64(sp)
10003d0c:	000da580 	call	1000da58 <__eqdf2>
10003d10:	dac00717 	ldw	r11,28(sp)
10003d14:	da000e17 	ldw	r8,56(sp)
10003d18:	da800f17 	ldw	r10,60(sp)
10003d1c:	db401017 	ldw	r13,64(sp)
10003d20:	d8c01217 	ldw	r3,72(sp)
10003d24:	1000e126 	beq	r2,zero,100040ac <___vfprintf_internal_r+0x14ec>
10003d28:	84000044 	addi	r16,r16,1
10003d2c:	1ac7883a 	add	r3,r3,r11
10003d30:	df001d15 	stw	fp,116(sp)
10003d34:	54000015 	stw	r16,0(r10)
10003d38:	52c00115 	stw	r11,4(r10)
10003d3c:	d8c01e15 	stw	r3,120(sp)
10003d40:	e7000208 	cmpgei	fp,fp,8
10003d44:	e001aa1e 	bne	fp,zero,100043f0 <___vfprintf_internal_r+0x1830>
10003d48:	50800404 	addi	r2,r10,16
10003d4c:	a7000084 	addi	fp,r20,2
10003d50:	4015883a 	mov	r10,r8
10003d54:	1011883a 	mov	r8,r2
10003d58:	d9001117 	ldw	r4,68(sp)
10003d5c:	d8801844 	addi	r2,sp,97
10003d60:	df001d15 	stw	fp,116(sp)
10003d64:	20c7883a 	add	r3,r4,r3
10003d68:	50800015 	stw	r2,0(r10)
10003d6c:	51000115 	stw	r4,4(r10)
10003d70:	d8c01e15 	stw	r3,120(sp)
10003d74:	e7000210 	cmplti	fp,fp,8
10003d78:	e03d601e 	bne	fp,zero,100032fc <___vfprintf_internal_r+0x73c>
10003d7c:	003fb506 	br	10003c54 <___vfprintf_internal_r+0x1094>
10003d80:	9019883a 	mov	r12,r18
10003d84:	003e1906 	br	100035ec <___vfprintf_internal_r+0xa2c>
10003d88:	03040074 	movhi	r12,4097
10003d8c:	39000450 	cmplti	r4,r7,17
10003d90:	63069f84 	addi	r12,r12,6782
10003d94:	d8801d17 	ldw	r2,116(sp)
10003d98:	20002b1e 	bne	r4,zero,10003e48 <___vfprintf_internal_r+0x1288>
10003d9c:	dc001015 	stw	r16,64(sp)
10003da0:	dc801215 	stw	r18,72(sp)
10003da4:	dc401315 	stw	r17,76(sp)
10003da8:	03c00404 	movi	r15,16
10003dac:	db800e15 	stw	r14,56(sp)
10003db0:	db400f15 	stw	r13,60(sp)
10003db4:	dac01415 	stw	r11,80(sp)
10003db8:	3821883a 	mov	r16,r7
10003dbc:	dc400517 	ldw	r17,20(sp)
10003dc0:	6025883a 	mov	r18,r12
10003dc4:	00000406 	br	10003dd8 <___vfprintf_internal_r+0x1218>
10003dc8:	843ffc04 	addi	r16,r16,-16
10003dcc:	81000448 	cmpgei	r4,r16,17
10003dd0:	42000204 	addi	r8,r8,8
10003dd4:	20001426 	beq	r4,zero,10003e28 <___vfprintf_internal_r+0x1268>
10003dd8:	10800044 	addi	r2,r2,1
10003ddc:	18c00404 	addi	r3,r3,16
10003de0:	44800015 	stw	r18,0(r8)
10003de4:	43c00115 	stw	r15,4(r8)
10003de8:	d8c01e15 	stw	r3,120(sp)
10003dec:	d8801d15 	stw	r2,116(sp)
10003df0:	11000208 	cmpgei	r4,r2,8
10003df4:	203ff426 	beq	r4,zero,10003dc8 <___vfprintf_internal_r+0x1208>
10003df8:	d9801c04 	addi	r6,sp,112
10003dfc:	980b883a 	mov	r5,r19
10003e00:	8809883a 	mov	r4,r17
10003e04:	0009d380 	call	10009d38 <__sprint_r>
10003e08:	103c4c1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003e0c:	843ffc04 	addi	r16,r16,-16
10003e10:	81000448 	cmpgei	r4,r16,17
10003e14:	d8c01e17 	ldw	r3,120(sp)
10003e18:	d8801d17 	ldw	r2,116(sp)
10003e1c:	b811883a 	mov	r8,r23
10003e20:	03c00404 	movi	r15,16
10003e24:	203fec1e 	bne	r4,zero,10003dd8 <___vfprintf_internal_r+0x1218>
10003e28:	800f883a 	mov	r7,r16
10003e2c:	9019883a 	mov	r12,r18
10003e30:	db800e17 	ldw	r14,56(sp)
10003e34:	db400f17 	ldw	r13,60(sp)
10003e38:	dc401317 	ldw	r17,76(sp)
10003e3c:	dac01417 	ldw	r11,80(sp)
10003e40:	dc001017 	ldw	r16,64(sp)
10003e44:	dc801217 	ldw	r18,72(sp)
10003e48:	10800044 	addi	r2,r2,1
10003e4c:	19c7883a 	add	r3,r3,r7
10003e50:	d8801d15 	stw	r2,116(sp)
10003e54:	43000015 	stw	r12,0(r8)
10003e58:	41c00115 	stw	r7,4(r8)
10003e5c:	d8c01e15 	stw	r3,120(sp)
10003e60:	10800208 	cmpgei	r2,r2,8
10003e64:	1001d41e 	bne	r2,zero,100045b8 <___vfprintf_internal_r+0x19f8>
10003e68:	42000204 	addi	r8,r8,8
10003e6c:	003cf806 	br	10003250 <___vfprintf_internal_r+0x690>
10003e70:	d9000517 	ldw	r4,20(sp)
10003e74:	d9801c04 	addi	r6,sp,112
10003e78:	980b883a 	mov	r5,r19
10003e7c:	dac01015 	stw	r11,64(sp)
10003e80:	db400f15 	stw	r13,60(sp)
10003e84:	db800e15 	stw	r14,56(sp)
10003e88:	0009d380 	call	10009d38 <__sprint_r>
10003e8c:	103c2b1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003e90:	d8c01e17 	ldw	r3,120(sp)
10003e94:	b811883a 	mov	r8,r23
10003e98:	dac01017 	ldw	r11,64(sp)
10003e9c:	db400f17 	ldw	r13,60(sp)
10003ea0:	db800e17 	ldw	r14,56(sp)
10003ea4:	003cf806 	br	10003288 <___vfprintf_internal_r+0x6c8>
10003ea8:	d9000517 	ldw	r4,20(sp)
10003eac:	d9801c04 	addi	r6,sp,112
10003eb0:	980b883a 	mov	r5,r19
10003eb4:	dac00f15 	stw	r11,60(sp)
10003eb8:	db400e15 	stw	r13,56(sp)
10003ebc:	0009d380 	call	10009d38 <__sprint_r>
10003ec0:	103c1e1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10003ec4:	d8c01e17 	ldw	r3,120(sp)
10003ec8:	b811883a 	mov	r8,r23
10003ecc:	dac00f17 	ldw	r11,60(sp)
10003ed0:	db400e17 	ldw	r13,56(sp)
10003ed4:	003cf906 	br	100032bc <___vfprintf_internal_r+0x6fc>
10003ed8:	d9000c17 	ldw	r4,48(sp)
10003edc:	b821883a 	mov	r16,r23
10003ee0:	a88003cc 	andi	r2,r21,15
10003ee4:	a006973a 	slli	r3,r20,28
10003ee8:	2085883a 	add	r2,r4,r2
10003eec:	a82ad13a 	srli	r21,r21,4
10003ef0:	10800003 	ldbu	r2,0(r2)
10003ef4:	a028d13a 	srli	r20,r20,4
10003ef8:	843fffc4 	addi	r16,r16,-1
10003efc:	1d6ab03a 	or	r21,r3,r21
10003f00:	80800005 	stb	r2,0(r16)
10003f04:	ad04b03a 	or	r2,r21,r20
10003f08:	103ff51e 	bne	r2,zero,10003ee0 <___vfprintf_internal_r+0x1320>
10003f0c:	bc29c83a 	sub	r20,r23,r16
10003f10:	6025883a 	mov	r18,r12
10003f14:	003e3d06 	br	1000380c <___vfprintf_internal_r+0xc4c>
10003f18:	d9001617 	ldw	r4,88(sp)
10003f1c:	0101980e 	bge	zero,r4,10004580 <___vfprintf_internal_r+0x19c0>
10003f20:	d8800717 	ldw	r2,28(sp)
10003f24:	d9000817 	ldw	r4,32(sp)
10003f28:	1039883a 	mov	fp,r2
10003f2c:	20812516 	blt	r4,r2,100043c4 <___vfprintf_internal_r+0x1804>
10003f30:	07000a0e 	bge	zero,fp,10003f5c <___vfprintf_internal_r+0x139c>
10003f34:	d8801d17 	ldw	r2,116(sp)
10003f38:	1f07883a 	add	r3,r3,fp
10003f3c:	44000015 	stw	r16,0(r8)
10003f40:	10800044 	addi	r2,r2,1
10003f44:	d8801d15 	stw	r2,116(sp)
10003f48:	47000115 	stw	fp,4(r8)
10003f4c:	d8c01e15 	stw	r3,120(sp)
10003f50:	10800208 	cmpgei	r2,r2,8
10003f54:	1002d91e 	bne	r2,zero,10004abc <___vfprintf_internal_r+0x1efc>
10003f58:	42000204 	addi	r8,r8,8
10003f5c:	e0013e16 	blt	fp,zero,10004458 <___vfprintf_internal_r+0x1898>
10003f60:	d8800717 	ldw	r2,28(sp)
10003f64:	1739c83a 	sub	fp,r2,fp
10003f68:	07014516 	blt	zero,fp,10004480 <___vfprintf_internal_r+0x18c0>
10003f6c:	d9001617 	ldw	r4,88(sp)
10003f70:	d8800817 	ldw	r2,32(sp)
10003f74:	2081160e 	bge	r4,r2,100043d0 <___vfprintf_internal_r+0x1810>
10003f78:	d8800d17 	ldw	r2,52(sp)
10003f7c:	d9400b17 	ldw	r5,44(sp)
10003f80:	40800015 	stw	r2,0(r8)
10003f84:	d8801d17 	ldw	r2,116(sp)
10003f88:	1947883a 	add	r3,r3,r5
10003f8c:	41400115 	stw	r5,4(r8)
10003f90:	10800044 	addi	r2,r2,1
10003f94:	d8801d15 	stw	r2,116(sp)
10003f98:	d8c01e15 	stw	r3,120(sp)
10003f9c:	10800208 	cmpgei	r2,r2,8
10003fa0:	1002601e 	bne	r2,zero,10004924 <___vfprintf_internal_r+0x1d64>
10003fa4:	42000204 	addi	r8,r8,8
10003fa8:	d8800817 	ldw	r2,32(sp)
10003fac:	d9400717 	ldw	r5,28(sp)
10003fb0:	1105c83a 	sub	r2,r2,r4
10003fb4:	29015c0e 	bge	r5,r4,10004528 <___vfprintf_internal_r+0x1968>
10003fb8:	1039883a 	mov	fp,r2
10003fbc:	07000c0e 	bge	zero,fp,10003ff0 <___vfprintf_internal_r+0x1430>
10003fc0:	d9000717 	ldw	r4,28(sp)
10003fc4:	1f07883a 	add	r3,r3,fp
10003fc8:	47000115 	stw	fp,4(r8)
10003fcc:	8121883a 	add	r16,r16,r4
10003fd0:	d9001d17 	ldw	r4,116(sp)
10003fd4:	44000015 	stw	r16,0(r8)
10003fd8:	d8c01e15 	stw	r3,120(sp)
10003fdc:	21000044 	addi	r4,r4,1
10003fe0:	d9001d15 	stw	r4,116(sp)
10003fe4:	21000208 	cmpgei	r4,r4,8
10003fe8:	2002bf1e 	bne	r4,zero,10004ae8 <___vfprintf_internal_r+0x1f28>
10003fec:	42000204 	addi	r8,r8,8
10003ff0:	e000010e 	bge	fp,zero,10003ff8 <___vfprintf_internal_r+0x1438>
10003ff4:	0039883a 	mov	fp,zero
10003ff8:	1739c83a 	sub	fp,r2,fp
10003ffc:	073cbf0e 	bge	zero,fp,100032fc <___vfprintf_internal_r+0x73c>
10004000:	03040074 	movhi	r12,4097
10004004:	e1000450 	cmplti	r4,fp,17
10004008:	63069b84 	addi	r12,r12,6766
1000400c:	d8801d17 	ldw	r2,116(sp)
10004010:	20023b1e 	bne	r4,zero,10004900 <___vfprintf_internal_r+0x1d40>
10004014:	dc400715 	stw	r17,28(sp)
10004018:	05000404 	movi	r20,16
1000401c:	dc000517 	ldw	r16,20(sp)
10004020:	6023883a 	mov	r17,r12
10004024:	00000406 	br	10004038 <___vfprintf_internal_r+0x1478>
10004028:	42000204 	addi	r8,r8,8
1000402c:	e73ffc04 	addi	fp,fp,-16
10004030:	e1000448 	cmpgei	r4,fp,17
10004034:	20023026 	beq	r4,zero,100048f8 <___vfprintf_internal_r+0x1d38>
10004038:	10800044 	addi	r2,r2,1
1000403c:	18c00404 	addi	r3,r3,16
10004040:	44400015 	stw	r17,0(r8)
10004044:	45000115 	stw	r20,4(r8)
10004048:	d8c01e15 	stw	r3,120(sp)
1000404c:	d8801d15 	stw	r2,116(sp)
10004050:	11000208 	cmpgei	r4,r2,8
10004054:	203ff426 	beq	r4,zero,10004028 <___vfprintf_internal_r+0x1468>
10004058:	d9801c04 	addi	r6,sp,112
1000405c:	980b883a 	mov	r5,r19
10004060:	8009883a 	mov	r4,r16
10004064:	0009d380 	call	10009d38 <__sprint_r>
10004068:	103bb41e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
1000406c:	d8c01e17 	ldw	r3,120(sp)
10004070:	d8801d17 	ldw	r2,116(sp)
10004074:	b811883a 	mov	r8,r23
10004078:	003fec06 	br	1000402c <___vfprintf_internal_r+0x146c>
1000407c:	9080004c 	andi	r2,r18,1
10004080:	103f031e 	bne	r2,zero,10003c90 <___vfprintf_internal_r+0x10d0>
10004084:	00800044 	movi	r2,1
10004088:	dd001d15 	stw	r20,116(sp)
1000408c:	44000015 	stw	r16,0(r8)
10004090:	40800115 	stw	r2,4(r8)
10004094:	d8c01e15 	stw	r3,120(sp)
10004098:	a5000208 	cmpgei	r20,r20,8
1000409c:	a000d41e 	bne	r20,zero,100043f0 <___vfprintf_internal_r+0x1830>
100040a0:	e7000084 	addi	fp,fp,2
100040a4:	42000404 	addi	r8,r8,16
100040a8:	003f2b06 	br	10003d58 <___vfprintf_internal_r+0x1198>
100040ac:	02ff2a0e 	bge	zero,r11,10003d58 <___vfprintf_internal_r+0x1198>
100040b0:	58800450 	cmplti	r2,r11,17
100040b4:	03040074 	movhi	r12,4097
100040b8:	1002f81e 	bne	r2,zero,10004c9c <___vfprintf_internal_r+0x20dc>
100040bc:	63069b84 	addi	r12,r12,6766
100040c0:	dc800715 	stw	r18,28(sp)
100040c4:	dc400e15 	stw	r17,56(sp)
100040c8:	04000404 	movi	r16,16
100040cc:	5823883a 	mov	r17,r11
100040d0:	df000517 	ldw	fp,20(sp)
100040d4:	6025883a 	mov	r18,r12
100040d8:	6829883a 	mov	r20,r13
100040dc:	00000506 	br	100040f4 <___vfprintf_internal_r+0x1534>
100040e0:	52800204 	addi	r10,r10,8
100040e4:	8c7ffc04 	addi	r17,r17,-16
100040e8:	88800448 	cmpgei	r2,r17,17
100040ec:	10018a26 	beq	r2,zero,10004718 <___vfprintf_internal_r+0x1b58>
100040f0:	a5000044 	addi	r20,r20,1
100040f4:	18c00404 	addi	r3,r3,16
100040f8:	54800015 	stw	r18,0(r10)
100040fc:	54000115 	stw	r16,4(r10)
10004100:	d8c01e15 	stw	r3,120(sp)
10004104:	dd001d15 	stw	r20,116(sp)
10004108:	a0800208 	cmpgei	r2,r20,8
1000410c:	103ff426 	beq	r2,zero,100040e0 <___vfprintf_internal_r+0x1520>
10004110:	d9801c04 	addi	r6,sp,112
10004114:	980b883a 	mov	r5,r19
10004118:	e009883a 	mov	r4,fp
1000411c:	0009d380 	call	10009d38 <__sprint_r>
10004120:	103b861e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004124:	dd001d17 	ldw	r20,116(sp)
10004128:	d8c01e17 	ldw	r3,120(sp)
1000412c:	b815883a 	mov	r10,r23
10004130:	003fec06 	br	100040e4 <___vfprintf_internal_r+0x1524>
10004134:	d9000517 	ldw	r4,20(sp)
10004138:	d9801c04 	addi	r6,sp,112
1000413c:	980b883a 	mov	r5,r19
10004140:	0009d380 	call	10009d38 <__sprint_r>
10004144:	103b7d1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004148:	d8c01e17 	ldw	r3,120(sp)
1000414c:	b811883a 	mov	r8,r23
10004150:	003c5e06 	br	100032cc <___vfprintf_internal_r+0x70c>
10004154:	0029883a 	mov	r20,zero
10004158:	003bdf06 	br	100030d8 <___vfprintf_internal_r+0x518>
1000415c:	b025883a 	mov	r18,r22
10004160:	003aea06 	br	10002d0c <___vfprintf_internal_r+0x14c>
10004164:	b821883a 	mov	r16,r23
10004168:	003da806 	br	1000380c <___vfprintf_internal_r+0xc4c>
1000416c:	d9000917 	ldw	r4,36(sp)
10004170:	d9400a17 	ldw	r5,40(sp)
10004174:	da000f15 	stw	r8,60(sp)
10004178:	200d883a 	mov	r6,r4
1000417c:	280f883a 	mov	r7,r5
10004180:	dac00e15 	stw	r11,56(sp)
10004184:	db000715 	stw	r12,28(sp)
10004188:	000ecb00 	call	1000ecb0 <__unorddf2>
1000418c:	db000717 	ldw	r12,28(sp)
10004190:	dac00e17 	ldw	r11,56(sp)
10004194:	da000f17 	ldw	r8,60(sp)
10004198:	1002af1e 	bne	r2,zero,10004c58 <___vfprintf_internal_r+0x2098>
1000419c:	00fff7c4 	movi	r3,-33
100041a0:	e0c6703a 	and	r3,fp,r3
100041a4:	58bfffe0 	cmpeqi	r2,r11,-1
100041a8:	d8c00715 	stw	r3,28(sp)
100041ac:	10024c1e 	bne	r2,zero,10004ae0 <___vfprintf_internal_r+0x1f20>
100041b0:	188011d8 	cmpnei	r2,r3,71
100041b4:	1001fe26 	beq	r2,zero,100049b0 <___vfprintf_internal_r+0x1df0>
100041b8:	d8800a17 	ldw	r2,40(sp)
100041bc:	64804014 	ori	r18,r12,256
100041c0:	1001e116 	blt	r2,zero,10004948 <___vfprintf_internal_r+0x1d88>
100041c4:	dd400a17 	ldw	r21,40(sp)
100041c8:	d8000e05 	stb	zero,56(sp)
100041cc:	e08019a0 	cmpeqi	r2,fp,102
100041d0:	d8800f15 	stw	r2,60(sp)
100041d4:	1001741e 	bne	r2,zero,100047a8 <___vfprintf_internal_r+0x1be8>
100041d8:	e08011a0 	cmpeqi	r2,fp,70
100041dc:	1001721e 	bne	r2,zero,100047a8 <___vfprintf_internal_r+0x1be8>
100041e0:	d8800717 	ldw	r2,28(sp)
100041e4:	da001215 	stw	r8,72(sp)
100041e8:	db001015 	stw	r12,64(sp)
100041ec:	10801158 	cmpnei	r2,r2,69
100041f0:	10020526 	beq	r2,zero,10004a08 <___vfprintf_internal_r+0x1e48>
100041f4:	d8801a04 	addi	r2,sp,104
100041f8:	d8800315 	stw	r2,12(sp)
100041fc:	d9400917 	ldw	r5,36(sp)
10004200:	d8801704 	addi	r2,sp,92
10004204:	d9000517 	ldw	r4,20(sp)
10004208:	d8800215 	stw	r2,8(sp)
1000420c:	d8801604 	addi	r2,sp,88
10004210:	dac00015 	stw	r11,0(sp)
10004214:	d8800115 	stw	r2,4(sp)
10004218:	01c00084 	movi	r7,2
1000421c:	a80d883a 	mov	r6,r21
10004220:	dac00815 	stw	r11,32(sp)
10004224:	00051680 	call	10005168 <_dtoa_r>
10004228:	dac00817 	ldw	r11,32(sp)
1000422c:	1021883a 	mov	r16,r2
10004230:	e08019d8 	cmpnei	r2,fp,103
10004234:	db001017 	ldw	r12,64(sp)
10004238:	da001217 	ldw	r8,72(sp)
1000423c:	5829883a 	mov	r20,r11
10004240:	1002031e 	bne	r2,zero,10004a50 <___vfprintf_internal_r+0x1e90>
10004244:	6080004c 	andi	r2,r12,1
10004248:	1002031e 	bne	r2,zero,10004a58 <___vfprintf_internal_r+0x1e98>
1000424c:	d8c01617 	ldw	r3,88(sp)
10004250:	d8800717 	ldw	r2,28(sp)
10004254:	d8c00715 	stw	r3,28(sp)
10004258:	d8c01a17 	ldw	r3,104(sp)
1000425c:	108011e0 	cmpeqi	r2,r2,71
10004260:	1c07c83a 	sub	r3,r3,r16
10004264:	d8c00815 	stw	r3,32(sp)
10004268:	10000526 	beq	r2,zero,10004280 <___vfprintf_internal_r+0x16c0>
1000426c:	d8c00717 	ldw	r3,28(sp)
10004270:	18bfff50 	cmplti	r2,r3,-3
10004274:	1000011e 	bne	r2,zero,1000427c <___vfprintf_internal_r+0x16bc>
10004278:	58c2050e 	bge	r11,r3,10004a90 <___vfprintf_internal_r+0x1ed0>
1000427c:	e73fff84 	addi	fp,fp,-2
10004280:	d8800717 	ldw	r2,28(sp)
10004284:	df001845 	stb	fp,97(sp)
10004288:	153fffc4 	addi	r20,r2,-1
1000428c:	dd001615 	stw	r20,88(sp)
10004290:	a0027916 	blt	r20,zero,10004c78 <___vfprintf_internal_r+0x20b8>
10004294:	00800ac4 	movi	r2,43
10004298:	d8801885 	stb	r2,98(sp)
1000429c:	a0800290 	cmplti	r2,r20,10
100042a0:	1002581e 	bne	r2,zero,10004c04 <___vfprintf_internal_r+0x2044>
100042a4:	dc000715 	stw	r16,28(sp)
100042a8:	dd401bc4 	addi	r21,sp,111
100042ac:	a021883a 	mov	r16,r20
100042b0:	db000f15 	stw	r12,60(sp)
100042b4:	9829883a 	mov	r20,r19
100042b8:	4027883a 	mov	r19,r8
100042bc:	00000206 	br	100042c8 <___vfprintf_internal_r+0x1708>
100042c0:	202b883a 	mov	r21,r4
100042c4:	1021883a 	mov	r16,r2
100042c8:	8009883a 	mov	r4,r16
100042cc:	01400284 	movi	r5,10
100042d0:	000c6d80 	call	1000c6d8 <__modsi3>
100042d4:	10800c04 	addi	r2,r2,48
100042d8:	8009883a 	mov	r4,r16
100042dc:	a8bfffc5 	stb	r2,-1(r21)
100042e0:	01400284 	movi	r5,10
100042e4:	000c6580 	call	1000c658 <__divsi3>
100042e8:	80c01908 	cmpgei	r3,r16,100
100042ec:	a93fffc4 	addi	r4,r21,-1
100042f0:	183ff31e 	bne	r3,zero,100042c0 <___vfprintf_internal_r+0x1700>
100042f4:	10800c04 	addi	r2,r2,48
100042f8:	20bfffc5 	stb	r2,-1(r4)
100042fc:	a8ffff84 	addi	r3,r21,-2
10004300:	d9001bc4 	addi	r4,sp,111
10004304:	9811883a 	mov	r8,r19
10004308:	dc000717 	ldw	r16,28(sp)
1000430c:	db000f17 	ldw	r12,60(sp)
10004310:	a027883a 	mov	r19,r20
10004314:	1902732e 	bgeu	r3,r4,10004ce4 <___vfprintf_internal_r+0x2124>
10004318:	d90018c4 	addi	r4,sp,99
1000431c:	00000106 	br	10004324 <___vfprintf_internal_r+0x1764>
10004320:	18800003 	ldbu	r2,0(r3)
10004324:	21000044 	addi	r4,r4,1
10004328:	20bfffc5 	stb	r2,-1(r4)
1000432c:	18c00044 	addi	r3,r3,1
10004330:	d8801bc4 	addi	r2,sp,111
10004334:	18bffa1e 	bne	r3,r2,10004320 <___vfprintf_internal_r+0x1760>
10004338:	d8801c44 	addi	r2,sp,113
1000433c:	d8c018c4 	addi	r3,sp,99
10004340:	1545c83a 	sub	r2,r2,r21
10004344:	1885883a 	add	r2,r3,r2
10004348:	d8c01844 	addi	r3,sp,97
1000434c:	10c5c83a 	sub	r2,r2,r3
10004350:	d8801115 	stw	r2,68(sp)
10004354:	d8c00817 	ldw	r3,32(sp)
10004358:	d9001117 	ldw	r4,68(sp)
1000435c:	18800088 	cmpgei	r2,r3,2
10004360:	1929883a 	add	r20,r3,r4
10004364:	10024926 	beq	r2,zero,10004c8c <___vfprintf_internal_r+0x20cc>
10004368:	d8800b17 	ldw	r2,44(sp)
1000436c:	a0a9883a 	add	r20,r20,r2
10004370:	a02b883a 	mov	r21,r20
10004374:	a000010e 	bge	r20,zero,1000437c <___vfprintf_internal_r+0x17bc>
10004378:	002b883a 	mov	r21,zero
1000437c:	d8000715 	stw	zero,28(sp)
10004380:	00013f06 	br	10004880 <___vfprintf_internal_r+0x1cc0>
10004384:	00800c04 	movi	r2,48
10004388:	d8801585 	stb	r2,86(sp)
1000438c:	df0015c5 	stb	fp,87(sp)
10004390:	63000094 	ori	r12,r12,2
10004394:	00800084 	movi	r2,2
10004398:	003ce406 	br	1000372c <___vfprintf_internal_r+0xb6c>
1000439c:	d9400417 	ldw	r5,16(sp)
100043a0:	20800017 	ldw	r2,0(r4)
100043a4:	d8c00615 	stw	r3,24(sp)
100043a8:	2809d7fa 	srai	r4,r5,31
100043ac:	11400015 	stw	r5,0(r2)
100043b0:	11000115 	stw	r4,4(r2)
100043b4:	003a3706 	br	10002c94 <___vfprintf_internal_r+0xd4>
100043b8:	0463c83a 	sub	r17,zero,r17
100043bc:	d8800615 	stw	r2,24(sp)
100043c0:	003b1806 	br	10003024 <___vfprintf_internal_r+0x464>
100043c4:	2039883a 	mov	fp,r4
100043c8:	073eda16 	blt	zero,fp,10003f34 <___vfprintf_internal_r+0x1374>
100043cc:	003ee306 	br	10003f5c <___vfprintf_internal_r+0x139c>
100043d0:	9080004c 	andi	r2,r18,1
100043d4:	103ee81e 	bne	r2,zero,10003f78 <___vfprintf_internal_r+0x13b8>
100043d8:	d8800817 	ldw	r2,32(sp)
100043dc:	d9400717 	ldw	r5,28(sp)
100043e0:	1105c83a 	sub	r2,r2,r4
100043e4:	2900500e 	bge	r5,r4,10004528 <___vfprintf_internal_r+0x1968>
100043e8:	1039883a 	mov	fp,r2
100043ec:	003f0006 	br	10003ff0 <___vfprintf_internal_r+0x1430>
100043f0:	d9000517 	ldw	r4,20(sp)
100043f4:	d9801c04 	addi	r6,sp,112
100043f8:	980b883a 	mov	r5,r19
100043fc:	0009d380 	call	10009d38 <__sprint_r>
10004400:	103ace1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004404:	df001d17 	ldw	fp,116(sp)
10004408:	d8c01e17 	ldw	r3,120(sp)
1000440c:	da002b04 	addi	r8,sp,172
10004410:	e7000044 	addi	fp,fp,1
10004414:	b815883a 	mov	r10,r23
10004418:	003e4f06 	br	10003d58 <___vfprintf_internal_r+0x1198>
1000441c:	b7000043 	ldbu	fp,1(r22)
10004420:	63000814 	ori	r12,r12,32
10004424:	b5800044 	addi	r22,r22,1
10004428:	e2803fcc 	andi	r10,fp,255
1000442c:	5280201c 	xori	r10,r10,128
10004430:	52bfe004 	addi	r10,r10,-128
10004434:	003a3d06 	br	10002d2c <___vfprintf_internal_r+0x16c>
10004438:	d9000517 	ldw	r4,20(sp)
1000443c:	d9801c04 	addi	r6,sp,112
10004440:	980b883a 	mov	r5,r19
10004444:	0009d380 	call	10009d38 <__sprint_r>
10004448:	103abc1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
1000444c:	d8c01e17 	ldw	r3,120(sp)
10004450:	b811883a 	mov	r8,r23
10004454:	003d4806 	br	10003978 <___vfprintf_internal_r+0xdb8>
10004458:	0039883a 	mov	fp,zero
1000445c:	003ec006 	br	10003f60 <___vfprintf_internal_r+0x13a0>
10004460:	588001f0 	cmpltui	r2,r11,7
10004464:	5829883a 	mov	r20,r11
10004468:	10013b26 	beq	r2,zero,10004958 <___vfprintf_internal_r+0x1d98>
1000446c:	04040074 	movhi	r16,4097
10004470:	a02b883a 	mov	r21,r20
10004474:	dc800615 	stw	r18,24(sp)
10004478:	84069904 	addi	r16,r16,6756
1000447c:	003b6906 	br	10003224 <___vfprintf_internal_r+0x664>
10004480:	03040074 	movhi	r12,4097
10004484:	e1000450 	cmplti	r4,fp,17
10004488:	63069b84 	addi	r12,r12,6766
1000448c:	d8801d17 	ldw	r2,116(sp)
10004490:	20010b1e 	bne	r4,zero,100048c0 <___vfprintf_internal_r+0x1d00>
10004494:	b009883a 	mov	r4,r22
10004498:	dc000e15 	stw	r16,56(sp)
1000449c:	dc800f15 	stw	r18,60(sp)
100044a0:	882d883a 	mov	r22,r17
100044a4:	05000404 	movi	r20,16
100044a8:	e023883a 	mov	r17,fp
100044ac:	dc000517 	ldw	r16,20(sp)
100044b0:	6025883a 	mov	r18,r12
100044b4:	2039883a 	mov	fp,r4
100044b8:	00000406 	br	100044cc <___vfprintf_internal_r+0x190c>
100044bc:	42000204 	addi	r8,r8,8
100044c0:	8c7ffc04 	addi	r17,r17,-16
100044c4:	89000448 	cmpgei	r4,r17,17
100044c8:	2000f626 	beq	r4,zero,100048a4 <___vfprintf_internal_r+0x1ce4>
100044cc:	10800044 	addi	r2,r2,1
100044d0:	18c00404 	addi	r3,r3,16
100044d4:	44800015 	stw	r18,0(r8)
100044d8:	45000115 	stw	r20,4(r8)
100044dc:	d8c01e15 	stw	r3,120(sp)
100044e0:	d8801d15 	stw	r2,116(sp)
100044e4:	11000208 	cmpgei	r4,r2,8
100044e8:	203ff426 	beq	r4,zero,100044bc <___vfprintf_internal_r+0x18fc>
100044ec:	d9801c04 	addi	r6,sp,112
100044f0:	980b883a 	mov	r5,r19
100044f4:	8009883a 	mov	r4,r16
100044f8:	0009d380 	call	10009d38 <__sprint_r>
100044fc:	103a8f1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004500:	d8c01e17 	ldw	r3,120(sp)
10004504:	d8801d17 	ldw	r2,116(sp)
10004508:	b811883a 	mov	r8,r23
1000450c:	003fec06 	br	100044c0 <___vfprintf_internal_r+0x1900>
10004510:	d8800617 	ldw	r2,24(sp)
10004514:	10800017 	ldw	r2,0(r2)
10004518:	d8c00615 	stw	r3,24(sp)
1000451c:	d8c00417 	ldw	r3,16(sp)
10004520:	10c00015 	stw	r3,0(r2)
10004524:	0039db06 	br	10002c94 <___vfprintf_internal_r+0xd4>
10004528:	d9000817 	ldw	r4,32(sp)
1000452c:	d9400717 	ldw	r5,28(sp)
10004530:	2179c83a 	sub	fp,r4,r5
10004534:	003ea106 	br	10003fbc <___vfprintf_internal_r+0x13fc>
10004538:	d9000517 	ldw	r4,20(sp)
1000453c:	d9801c04 	addi	r6,sp,112
10004540:	980b883a 	mov	r5,r19
10004544:	0009d380 	call	10009d38 <__sprint_r>
10004548:	103a7c1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
1000454c:	d8c01e17 	ldw	r3,120(sp)
10004550:	dd001d17 	ldw	r20,116(sp)
10004554:	b815883a 	mov	r10,r23
10004558:	003ddf06 	br	10003cd8 <___vfprintf_internal_r+0x1118>
1000455c:	d9000517 	ldw	r4,20(sp)
10004560:	d9801c04 	addi	r6,sp,112
10004564:	980b883a 	mov	r5,r19
10004568:	0009d380 	call	10009d38 <__sprint_r>
1000456c:	103a731e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004570:	d8c01e17 	ldw	r3,120(sp)
10004574:	dd001d17 	ldw	r20,116(sp)
10004578:	b815883a 	mov	r10,r23
1000457c:	003dcb06 	br	10003cac <___vfprintf_internal_r+0x10ec>
10004580:	d8801d17 	ldw	r2,116(sp)
10004584:	01440074 	movhi	r5,4097
10004588:	29469b04 	addi	r5,r5,6764
1000458c:	10800044 	addi	r2,r2,1
10004590:	18c00044 	addi	r3,r3,1
10004594:	41400015 	stw	r5,0(r8)
10004598:	01400044 	movi	r5,1
1000459c:	d8801d15 	stw	r2,116(sp)
100045a0:	41400115 	stw	r5,4(r8)
100045a4:	d8c01e15 	stw	r3,120(sp)
100045a8:	10800208 	cmpgei	r2,r2,8
100045ac:	103d871e 	bne	r2,zero,10003bcc <___vfprintf_internal_r+0x100c>
100045b0:	42000204 	addi	r8,r8,8
100045b4:	003d8d06 	br	10003bec <___vfprintf_internal_r+0x102c>
100045b8:	d9000517 	ldw	r4,20(sp)
100045bc:	d9801c04 	addi	r6,sp,112
100045c0:	980b883a 	mov	r5,r19
100045c4:	dac01015 	stw	r11,64(sp)
100045c8:	db400f15 	stw	r13,60(sp)
100045cc:	db800e15 	stw	r14,56(sp)
100045d0:	0009d380 	call	10009d38 <__sprint_r>
100045d4:	103a591e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
100045d8:	d8c01e17 	ldw	r3,120(sp)
100045dc:	b811883a 	mov	r8,r23
100045e0:	dac01017 	ldw	r11,64(sp)
100045e4:	db400f17 	ldw	r13,60(sp)
100045e8:	db800e17 	ldw	r14,56(sp)
100045ec:	003b1806 	br	10003250 <___vfprintf_internal_r+0x690>
100045f0:	d9000517 	ldw	r4,20(sp)
100045f4:	d9801c04 	addi	r6,sp,112
100045f8:	980b883a 	mov	r5,r19
100045fc:	0009d380 	call	10009d38 <__sprint_r>
10004600:	103a4e1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004604:	b811883a 	mov	r8,r23
10004608:	003cc706 	br	10003928 <___vfprintf_internal_r+0xd68>
1000460c:	d9000517 	ldw	r4,20(sp)
10004610:	d9801c04 	addi	r6,sp,112
10004614:	980b883a 	mov	r5,r19
10004618:	dac00e15 	stw	r11,56(sp)
1000461c:	0009d380 	call	10009d38 <__sprint_r>
10004620:	103a461e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004624:	d8c01e17 	ldw	r3,120(sp)
10004628:	b811883a 	mov	r8,r23
1000462c:	dac00e17 	ldw	r11,56(sp)
10004630:	003b2406 	br	100032c4 <___vfprintf_internal_r+0x704>
10004634:	10c00060 	cmpeqi	r3,r2,1
10004638:	9019883a 	mov	r12,r18
1000463c:	183bed26 	beq	r3,zero,100035f4 <___vfprintf_internal_r+0xa34>
10004640:	003c6d06 	br	100037f8 <___vfprintf_internal_r+0xc38>
10004644:	d8800d17 	ldw	r2,52(sp)
10004648:	d9400b17 	ldw	r5,44(sp)
1000464c:	40800015 	stw	r2,0(r8)
10004650:	d8801d17 	ldw	r2,116(sp)
10004654:	28c7883a 	add	r3,r5,r3
10004658:	41400115 	stw	r5,4(r8)
1000465c:	10800044 	addi	r2,r2,1
10004660:	d8c01e15 	stw	r3,120(sp)
10004664:	d8801d15 	stw	r2,116(sp)
10004668:	11400208 	cmpgei	r5,r2,8
1000466c:	2800d31e 	bne	r5,zero,100049bc <___vfprintf_internal_r+0x1dfc>
10004670:	42000204 	addi	r8,r8,8
10004674:	203d6e0e 	bge	r4,zero,10003c30 <___vfprintf_internal_r+0x1070>
10004678:	03040074 	movhi	r12,4097
1000467c:	217ffc08 	cmpgei	r5,r4,-16
10004680:	63069b84 	addi	r12,r12,6766
10004684:	0129c83a 	sub	r20,zero,r4
10004688:	28014a1e 	bne	r5,zero,10004bb4 <___vfprintf_internal_r+0x1ff4>
1000468c:	dc000715 	stw	r16,28(sp)
10004690:	07000404 	movi	fp,16
10004694:	a021883a 	mov	r16,r20
10004698:	8829883a 	mov	r20,r17
1000469c:	6023883a 	mov	r17,r12
100046a0:	00000406 	br	100046b4 <___vfprintf_internal_r+0x1af4>
100046a4:	42000204 	addi	r8,r8,8
100046a8:	843ffc04 	addi	r16,r16,-16
100046ac:	81000448 	cmpgei	r4,r16,17
100046b0:	20013c26 	beq	r4,zero,10004ba4 <___vfprintf_internal_r+0x1fe4>
100046b4:	10800044 	addi	r2,r2,1
100046b8:	18c00404 	addi	r3,r3,16
100046bc:	44400015 	stw	r17,0(r8)
100046c0:	47000115 	stw	fp,4(r8)
100046c4:	d8c01e15 	stw	r3,120(sp)
100046c8:	d8801d15 	stw	r2,116(sp)
100046cc:	11000208 	cmpgei	r4,r2,8
100046d0:	203ff426 	beq	r4,zero,100046a4 <___vfprintf_internal_r+0x1ae4>
100046d4:	d9000517 	ldw	r4,20(sp)
100046d8:	d9801c04 	addi	r6,sp,112
100046dc:	980b883a 	mov	r5,r19
100046e0:	0009d380 	call	10009d38 <__sprint_r>
100046e4:	103a151e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
100046e8:	d8c01e17 	ldw	r3,120(sp)
100046ec:	d8801d17 	ldw	r2,116(sp)
100046f0:	b811883a 	mov	r8,r23
100046f4:	003fec06 	br	100046a8 <___vfprintf_internal_r+0x1ae8>
100046f8:	8009883a 	mov	r4,r16
100046fc:	0002b280 	call	10002b28 <strlen>
10004700:	1029883a 	mov	r20,r2
10004704:	102b883a 	mov	r21,r2
10004708:	dc800615 	stw	r18,24(sp)
1000470c:	db000717 	ldw	r12,28(sp)
10004710:	da000e17 	ldw	r8,56(sp)
10004714:	003ac306 	br	10003224 <___vfprintf_internal_r+0x664>
10004718:	8817883a 	mov	r11,r17
1000471c:	9019883a 	mov	r12,r18
10004720:	dc400e17 	ldw	r17,56(sp)
10004724:	dc800717 	ldw	r18,28(sp)
10004728:	a7000044 	addi	fp,r20,1
1000472c:	50800204 	addi	r2,r10,8
10004730:	1ac7883a 	add	r3,r3,r11
10004734:	53000015 	stw	r12,0(r10)
10004738:	52c00115 	stw	r11,4(r10)
1000473c:	d8c01e15 	stw	r3,120(sp)
10004740:	df001d15 	stw	fp,116(sp)
10004744:	e1000208 	cmpgei	r4,fp,8
10004748:	203f291e 	bne	r4,zero,100043f0 <___vfprintf_internal_r+0x1830>
1000474c:	e7000044 	addi	fp,fp,1
10004750:	12000204 	addi	r8,r2,8
10004754:	1015883a 	mov	r10,r2
10004758:	003d7f06 	br	10003d58 <___vfprintf_internal_r+0x1198>
1000475c:	8819883a 	mov	r12,r17
10004760:	dc400717 	ldw	r17,28(sp)
10004764:	10800044 	addi	r2,r2,1
10004768:	1c07883a 	add	r3,r3,r16
1000476c:	d8801d15 	stw	r2,116(sp)
10004770:	43000015 	stw	r12,0(r8)
10004774:	44000115 	stw	r16,4(r8)
10004778:	d8c01e15 	stw	r3,120(sp)
1000477c:	10800208 	cmpgei	r2,r2,8
10004780:	103add26 	beq	r2,zero,100032f8 <___vfprintf_internal_r+0x738>
10004784:	003d3306 	br	10003c54 <___vfprintf_internal_r+0x1094>
10004788:	d8800615 	stw	r2,24(sp)
1000478c:	0029883a 	mov	r20,zero
10004790:	0005883a 	mov	r2,zero
10004794:	003be506 	br	1000372c <___vfprintf_internal_r+0xb6c>
10004798:	d8800615 	stw	r2,24(sp)
1000479c:	0029883a 	mov	r20,zero
100047a0:	00800044 	movi	r2,1
100047a4:	003be106 	br	1000372c <___vfprintf_internal_r+0xb6c>
100047a8:	d8801a04 	addi	r2,sp,104
100047ac:	d8800315 	stw	r2,12(sp)
100047b0:	d9400917 	ldw	r5,36(sp)
100047b4:	d8801704 	addi	r2,sp,92
100047b8:	d9000517 	ldw	r4,20(sp)
100047bc:	d8800215 	stw	r2,8(sp)
100047c0:	d8801604 	addi	r2,sp,88
100047c4:	dac00015 	stw	r11,0(sp)
100047c8:	d8800115 	stw	r2,4(sp)
100047cc:	01c000c4 	movi	r7,3
100047d0:	a80d883a 	mov	r6,r21
100047d4:	da001215 	stw	r8,72(sp)
100047d8:	db001015 	stw	r12,64(sp)
100047dc:	dac00815 	stw	r11,32(sp)
100047e0:	00051680 	call	10005168 <_dtoa_r>
100047e4:	dac00817 	ldw	r11,32(sp)
100047e8:	1021883a 	mov	r16,r2
100047ec:	db001017 	ldw	r12,64(sp)
100047f0:	12e9883a 	add	r20,r2,r11
100047f4:	80800007 	ldb	r2,0(r16)
100047f8:	da001217 	ldw	r8,72(sp)
100047fc:	10800c20 	cmpeqi	r2,r2,48
10004800:	10005b1e 	bne	r2,zero,10004970 <___vfprintf_internal_r+0x1db0>
10004804:	d8801617 	ldw	r2,88(sp)
10004808:	a0a9883a 	add	r20,r20,r2
1000480c:	d9000917 	ldw	r4,36(sp)
10004810:	000d883a 	mov	r6,zero
10004814:	000f883a 	mov	r7,zero
10004818:	a80b883a 	mov	r5,r21
1000481c:	da001215 	stw	r8,72(sp)
10004820:	dac01015 	stw	r11,64(sp)
10004824:	db000815 	stw	r12,32(sp)
10004828:	000da580 	call	1000da58 <__eqdf2>
1000482c:	db000817 	ldw	r12,32(sp)
10004830:	dac01017 	ldw	r11,64(sp)
10004834:	da001217 	ldw	r8,72(sp)
10004838:	1000891e 	bne	r2,zero,10004a60 <___vfprintf_internal_r+0x1ea0>
1000483c:	a005883a 	mov	r2,r20
10004840:	1405c83a 	sub	r2,r2,r16
10004844:	d8c00717 	ldw	r3,28(sp)
10004848:	d8800815 	stw	r2,32(sp)
1000484c:	d8801617 	ldw	r2,88(sp)
10004850:	18c011d8 	cmpnei	r3,r3,71
10004854:	d8800715 	stw	r2,28(sp)
10004858:	183e8426 	beq	r3,zero,1000426c <___vfprintf_internal_r+0x16ac>
1000485c:	d8800f17 	ldw	r2,60(sp)
10004860:	103e8726 	beq	r2,zero,10004280 <___vfprintf_internal_r+0x16c0>
10004864:	d8c00717 	ldw	r3,28(sp)
10004868:	6080004c 	andi	r2,r12,1
1000486c:	12c4b03a 	or	r2,r2,r11
10004870:	00c10d0e 	bge	zero,r3,10004ca8 <___vfprintf_internal_r+0x20e8>
10004874:	1000f11e 	bne	r2,zero,10004c3c <___vfprintf_internal_r+0x207c>
10004878:	dd000717 	ldw	r20,28(sp)
1000487c:	a02b883a 	mov	r21,r20
10004880:	d8800e07 	ldb	r2,56(sp)
10004884:	10007f26 	beq	r2,zero,10004a84 <___vfprintf_internal_r+0x1ec4>
10004888:	00800b44 	movi	r2,45
1000488c:	d8801545 	stb	r2,85(sp)
10004890:	0017883a 	mov	r11,zero
10004894:	003be506 	br	1000382c <___vfprintf_internal_r+0xc6c>
10004898:	04040074 	movhi	r16,4097
1000489c:	84068b04 	addi	r16,r16,6700
100048a0:	003b3406 	br	10003574 <___vfprintf_internal_r+0x9b4>
100048a4:	9019883a 	mov	r12,r18
100048a8:	dc000e17 	ldw	r16,56(sp)
100048ac:	dc800f17 	ldw	r18,60(sp)
100048b0:	e009883a 	mov	r4,fp
100048b4:	8839883a 	mov	fp,r17
100048b8:	b023883a 	mov	r17,r22
100048bc:	202d883a 	mov	r22,r4
100048c0:	10800044 	addi	r2,r2,1
100048c4:	1f07883a 	add	r3,r3,fp
100048c8:	d8801d15 	stw	r2,116(sp)
100048cc:	43000015 	stw	r12,0(r8)
100048d0:	47000115 	stw	fp,4(r8)
100048d4:	d8c01e15 	stw	r3,120(sp)
100048d8:	10800208 	cmpgei	r2,r2,8
100048dc:	1000421e 	bne	r2,zero,100049e8 <___vfprintf_internal_r+0x1e28>
100048e0:	42000204 	addi	r8,r8,8
100048e4:	003da106 	br	10003f6c <___vfprintf_internal_r+0x13ac>
100048e8:	00800b44 	movi	r2,45
100048ec:	d8801545 	stb	r2,85(sp)
100048f0:	03400b44 	movi	r13,45
100048f4:	003b1b06 	br	10003564 <___vfprintf_internal_r+0x9a4>
100048f8:	8819883a 	mov	r12,r17
100048fc:	dc400717 	ldw	r17,28(sp)
10004900:	10800044 	addi	r2,r2,1
10004904:	1f07883a 	add	r3,r3,fp
10004908:	d8801d15 	stw	r2,116(sp)
1000490c:	43000015 	stw	r12,0(r8)
10004910:	47000115 	stw	fp,4(r8)
10004914:	d8c01e15 	stw	r3,120(sp)
10004918:	10800208 	cmpgei	r2,r2,8
1000491c:	103a7626 	beq	r2,zero,100032f8 <___vfprintf_internal_r+0x738>
10004920:	003ccc06 	br	10003c54 <___vfprintf_internal_r+0x1094>
10004924:	d9000517 	ldw	r4,20(sp)
10004928:	d9801c04 	addi	r6,sp,112
1000492c:	980b883a 	mov	r5,r19
10004930:	0009d380 	call	10009d38 <__sprint_r>
10004934:	1039811e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004938:	d9001617 	ldw	r4,88(sp)
1000493c:	d8c01e17 	ldw	r3,120(sp)
10004940:	b811883a 	mov	r8,r23
10004944:	003d9806 	br	10003fa8 <___vfprintf_internal_r+0x13e8>
10004948:	1560003c 	xorhi	r21,r2,32768
1000494c:	00800b44 	movi	r2,45
10004950:	d8800e05 	stb	r2,56(sp)
10004954:	003e1d06 	br	100041cc <___vfprintf_internal_r+0x160c>
10004958:	05000184 	movi	r20,6
1000495c:	003ec306 	br	1000446c <___vfprintf_internal_r+0x18ac>
10004960:	002b883a 	mov	r21,zero
10004964:	003a0706 	br	10003184 <___vfprintf_internal_r+0x5c4>
10004968:	d9401545 	stb	r5,85(sp)
1000496c:	00399106 	br	10002fb4 <___vfprintf_internal_r+0x3f4>
10004970:	d9000917 	ldw	r4,36(sp)
10004974:	000d883a 	mov	r6,zero
10004978:	000f883a 	mov	r7,zero
1000497c:	a80b883a 	mov	r5,r21
10004980:	da001215 	stw	r8,72(sp)
10004984:	dac01015 	stw	r11,64(sp)
10004988:	db000815 	stw	r12,32(sp)
1000498c:	000da580 	call	1000da58 <__eqdf2>
10004990:	db000817 	ldw	r12,32(sp)
10004994:	dac01017 	ldw	r11,64(sp)
10004998:	da001217 	ldw	r8,72(sp)
1000499c:	103f9926 	beq	r2,zero,10004804 <___vfprintf_internal_r+0x1c44>
100049a0:	00800044 	movi	r2,1
100049a4:	12c5c83a 	sub	r2,r2,r11
100049a8:	d8801615 	stw	r2,88(sp)
100049ac:	003f9606 	br	10004808 <___vfprintf_internal_r+0x1c48>
100049b0:	583e011e 	bne	r11,zero,100041b8 <___vfprintf_internal_r+0x15f8>
100049b4:	02c00044 	movi	r11,1
100049b8:	003dff06 	br	100041b8 <___vfprintf_internal_r+0x15f8>
100049bc:	d9000517 	ldw	r4,20(sp)
100049c0:	d9801c04 	addi	r6,sp,112
100049c4:	980b883a 	mov	r5,r19
100049c8:	0009d380 	call	10009d38 <__sprint_r>
100049cc:	10395b1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
100049d0:	d9001617 	ldw	r4,88(sp)
100049d4:	d8c01e17 	ldw	r3,120(sp)
100049d8:	d8801d17 	ldw	r2,116(sp)
100049dc:	b811883a 	mov	r8,r23
100049e0:	203c930e 	bge	r4,zero,10003c30 <___vfprintf_internal_r+0x1070>
100049e4:	003f2406 	br	10004678 <___vfprintf_internal_r+0x1ab8>
100049e8:	d9000517 	ldw	r4,20(sp)
100049ec:	d9801c04 	addi	r6,sp,112
100049f0:	980b883a 	mov	r5,r19
100049f4:	0009d380 	call	10009d38 <__sprint_r>
100049f8:	1039501e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
100049fc:	d8c01e17 	ldw	r3,120(sp)
10004a00:	b811883a 	mov	r8,r23
10004a04:	003d5906 	br	10003f6c <___vfprintf_internal_r+0x13ac>
10004a08:	d8801a04 	addi	r2,sp,104
10004a0c:	d8800315 	stw	r2,12(sp)
10004a10:	d9400917 	ldw	r5,36(sp)
10004a14:	d8801704 	addi	r2,sp,92
10004a18:	d9000517 	ldw	r4,20(sp)
10004a1c:	5d000044 	addi	r20,r11,1
10004a20:	d8800215 	stw	r2,8(sp)
10004a24:	d8801604 	addi	r2,sp,88
10004a28:	d8800115 	stw	r2,4(sp)
10004a2c:	dd000015 	stw	r20,0(sp)
10004a30:	01c00084 	movi	r7,2
10004a34:	a80d883a 	mov	r6,r21
10004a38:	dac00815 	stw	r11,32(sp)
10004a3c:	00051680 	call	10005168 <_dtoa_r>
10004a40:	dac00817 	ldw	r11,32(sp)
10004a44:	db001017 	ldw	r12,64(sp)
10004a48:	da001217 	ldw	r8,72(sp)
10004a4c:	1021883a 	mov	r16,r2
10004a50:	e08011d8 	cmpnei	r2,fp,71
10004a54:	103dfb26 	beq	r2,zero,10004244 <___vfprintf_internal_r+0x1684>
10004a58:	8529883a 	add	r20,r16,r20
10004a5c:	003f6b06 	br	1000480c <___vfprintf_internal_r+0x1c4c>
10004a60:	d8801a17 	ldw	r2,104(sp)
10004a64:	01000c04 	movi	r4,48
10004a68:	153f752e 	bgeu	r2,r20,10004840 <___vfprintf_internal_r+0x1c80>
10004a6c:	10c00044 	addi	r3,r2,1
10004a70:	d8c01a15 	stw	r3,104(sp)
10004a74:	11000005 	stb	r4,0(r2)
10004a78:	d8801a17 	ldw	r2,104(sp)
10004a7c:	153ffb36 	bltu	r2,r20,10004a6c <___vfprintf_internal_r+0x1eac>
10004a80:	003f6f06 	br	10004840 <___vfprintf_internal_r+0x1c80>
10004a84:	db401543 	ldbu	r13,85(sp)
10004a88:	0017883a 	mov	r11,zero
10004a8c:	003b6306 	br	1000381c <___vfprintf_internal_r+0xc5c>
10004a90:	d8800717 	ldw	r2,28(sp)
10004a94:	d8c00817 	ldw	r3,32(sp)
10004a98:	10c02216 	blt	r2,r3,10004b24 <___vfprintf_internal_r+0x1f64>
10004a9c:	6300004c 	andi	r12,r12,1
10004aa0:	60005f1e 	bne	r12,zero,10004c20 <___vfprintf_internal_r+0x2060>
10004aa4:	102b883a 	mov	r21,r2
10004aa8:	1000010e 	bge	r2,zero,10004ab0 <___vfprintf_internal_r+0x1ef0>
10004aac:	002b883a 	mov	r21,zero
10004ab0:	dd000717 	ldw	r20,28(sp)
10004ab4:	070019c4 	movi	fp,103
10004ab8:	003f7106 	br	10004880 <___vfprintf_internal_r+0x1cc0>
10004abc:	d9000517 	ldw	r4,20(sp)
10004ac0:	d9801c04 	addi	r6,sp,112
10004ac4:	980b883a 	mov	r5,r19
10004ac8:	0009d380 	call	10009d38 <__sprint_r>
10004acc:	10391b1e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004ad0:	d8c01e17 	ldw	r3,120(sp)
10004ad4:	b811883a 	mov	r8,r23
10004ad8:	e03d210e 	bge	fp,zero,10003f60 <___vfprintf_internal_r+0x13a0>
10004adc:	003e5e06 	br	10004458 <___vfprintf_internal_r+0x1898>
10004ae0:	02c00184 	movi	r11,6
10004ae4:	003db406 	br	100041b8 <___vfprintf_internal_r+0x15f8>
10004ae8:	d9000517 	ldw	r4,20(sp)
10004aec:	d9801c04 	addi	r6,sp,112
10004af0:	980b883a 	mov	r5,r19
10004af4:	0009d380 	call	10009d38 <__sprint_r>
10004af8:	1039101e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004afc:	d8801617 	ldw	r2,88(sp)
10004b00:	d9000817 	ldw	r4,32(sp)
10004b04:	d8c01e17 	ldw	r3,120(sp)
10004b08:	b811883a 	mov	r8,r23
10004b0c:	2085c83a 	sub	r2,r4,r2
10004b10:	003d3706 	br	10003ff0 <___vfprintf_internal_r+0x1430>
10004b14:	582b883a 	mov	r21,r11
10004b18:	dc800615 	stw	r18,24(sp)
10004b1c:	5829883a 	mov	r20,r11
10004b20:	0039c006 	br	10003224 <___vfprintf_internal_r+0x664>
10004b24:	d8800817 	ldw	r2,32(sp)
10004b28:	d8c00b17 	ldw	r3,44(sp)
10004b2c:	10e9883a 	add	r20,r2,r3
10004b30:	d8800717 	ldw	r2,28(sp)
10004b34:	00800316 	blt	zero,r2,10004b44 <___vfprintf_internal_r+0x1f84>
10004b38:	d8800717 	ldw	r2,28(sp)
10004b3c:	a0b9c83a 	sub	fp,r20,r2
10004b40:	e5000044 	addi	r20,fp,1
10004b44:	a02b883a 	mov	r21,r20
10004b48:	a0003a16 	blt	r20,zero,10004c34 <___vfprintf_internal_r+0x2074>
10004b4c:	070019c4 	movi	fp,103
10004b50:	003f4b06 	br	10004880 <___vfprintf_internal_r+0x1cc0>
10004b54:	d9401545 	stb	r5,85(sp)
10004b58:	003ac506 	br	10003670 <___vfprintf_internal_r+0xab0>
10004b5c:	d9401545 	stb	r5,85(sp)
10004b60:	003a2506 	br	100033f8 <___vfprintf_internal_r+0x838>
10004b64:	d9401545 	stb	r5,85(sp)
10004b68:	003a3306 	br	10003438 <___vfprintf_internal_r+0x878>
10004b6c:	d9401545 	stb	r5,85(sp)
10004b70:	00398806 	br	10003194 <___vfprintf_internal_r+0x5d4>
10004b74:	d9401545 	stb	r5,85(sp)
10004b78:	00395f06 	br	100030f8 <___vfprintf_internal_r+0x538>
10004b7c:	d9401545 	stb	r5,85(sp)
10004b80:	00394b06 	br	100030b0 <___vfprintf_internal_r+0x4f0>
10004b84:	d9401545 	stb	r5,85(sp)
10004b88:	003a3b06 	br	10003478 <___vfprintf_internal_r+0x8b8>
10004b8c:	d9401545 	stb	r5,85(sp)
10004b90:	003a8106 	br	10003598 <___vfprintf_internal_r+0x9d8>
10004b94:	d9401545 	stb	r5,85(sp)
10004b98:	003a4706 	br	100034b8 <___vfprintf_internal_r+0x8f8>
10004b9c:	d9401545 	stb	r5,85(sp)
10004ba0:	003ac506 	br	100036b8 <___vfprintf_internal_r+0xaf8>
10004ba4:	8819883a 	mov	r12,r17
10004ba8:	a023883a 	mov	r17,r20
10004bac:	8029883a 	mov	r20,r16
10004bb0:	dc000717 	ldw	r16,28(sp)
10004bb4:	10800044 	addi	r2,r2,1
10004bb8:	1d07883a 	add	r3,r3,r20
10004bbc:	43000015 	stw	r12,0(r8)
10004bc0:	45000115 	stw	r20,4(r8)
10004bc4:	d8c01e15 	stw	r3,120(sp)
10004bc8:	d8801d15 	stw	r2,116(sp)
10004bcc:	11000208 	cmpgei	r4,r2,8
10004bd0:	203c1626 	beq	r4,zero,10003c2c <___vfprintf_internal_r+0x106c>
10004bd4:	d9000517 	ldw	r4,20(sp)
10004bd8:	d9801c04 	addi	r6,sp,112
10004bdc:	980b883a 	mov	r5,r19
10004be0:	0009d380 	call	10009d38 <__sprint_r>
10004be4:	1038d51e 	bne	r2,zero,10002f3c <___vfprintf_internal_r+0x37c>
10004be8:	d8c01e17 	ldw	r3,120(sp)
10004bec:	d8801d17 	ldw	r2,116(sp)
10004bf0:	b811883a 	mov	r8,r23
10004bf4:	003c0e06 	br	10003c30 <___vfprintf_internal_r+0x1070>
10004bf8:	00bfffc4 	movi	r2,-1
10004bfc:	d8800415 	stw	r2,16(sp)
10004c00:	0038d106 	br	10002f48 <___vfprintf_internal_r+0x388>
10004c04:	00800c04 	movi	r2,48
10004c08:	a0c00c04 	addi	r3,r20,48
10004c0c:	d88018c5 	stb	r2,99(sp)
10004c10:	00800104 	movi	r2,4
10004c14:	d8c01905 	stb	r3,100(sp)
10004c18:	d8801115 	stw	r2,68(sp)
10004c1c:	003dcd06 	br	10004354 <___vfprintf_internal_r+0x1794>
10004c20:	d8800717 	ldw	r2,28(sp)
10004c24:	d8c00b17 	ldw	r3,44(sp)
10004c28:	10e9883a 	add	r20,r2,r3
10004c2c:	a02b883a 	mov	r21,r20
10004c30:	a03fc60e 	bge	r20,zero,10004b4c <___vfprintf_internal_r+0x1f8c>
10004c34:	002b883a 	mov	r21,zero
10004c38:	003fc406 	br	10004b4c <___vfprintf_internal_r+0x1f8c>
10004c3c:	d8800b17 	ldw	r2,44(sp)
10004c40:	1885883a 	add	r2,r3,r2
10004c44:	12e9883a 	add	r20,r2,r11
10004c48:	a02b883a 	mov	r21,r20
10004c4c:	a03f0c0e 	bge	r20,zero,10004880 <___vfprintf_internal_r+0x1cc0>
10004c50:	002b883a 	mov	r21,zero
10004c54:	003f0a06 	br	10004880 <___vfprintf_internal_r+0x1cc0>
10004c58:	d8800a17 	ldw	r2,40(sp)
10004c5c:	10001d16 	blt	r2,zero,10004cd4 <___vfprintf_internal_r+0x2114>
10004c60:	db401543 	ldbu	r13,85(sp)
10004c64:	e0801210 	cmplti	r2,fp,72
10004c68:	1000171e 	bne	r2,zero,10004cc8 <___vfprintf_internal_r+0x2108>
10004c6c:	04040074 	movhi	r16,4097
10004c70:	84068e04 	addi	r16,r16,6712
10004c74:	003a3f06 	br	10003574 <___vfprintf_internal_r+0x9b4>
10004c78:	00c00044 	movi	r3,1
10004c7c:	18a9c83a 	sub	r20,r3,r2
10004c80:	00800b44 	movi	r2,45
10004c84:	d8801885 	stb	r2,98(sp)
10004c88:	003d8406 	br	1000429c <___vfprintf_internal_r+0x16dc>
10004c8c:	6080004c 	andi	r2,r12,1
10004c90:	d8800715 	stw	r2,28(sp)
10004c94:	103db41e 	bne	r2,zero,10004368 <___vfprintf_internal_r+0x17a8>
10004c98:	003feb06 	br	10004c48 <___vfprintf_internal_r+0x2088>
10004c9c:	4005883a 	mov	r2,r8
10004ca0:	63069b84 	addi	r12,r12,6766
10004ca4:	003ea206 	br	10004730 <___vfprintf_internal_r+0x1b70>
10004ca8:	1000031e 	bne	r2,zero,10004cb8 <___vfprintf_internal_r+0x20f8>
10004cac:	05400044 	movi	r21,1
10004cb0:	05000044 	movi	r20,1
10004cb4:	003ef206 	br	10004880 <___vfprintf_internal_r+0x1cc0>
10004cb8:	d8800b17 	ldw	r2,44(sp)
10004cbc:	10800044 	addi	r2,r2,1
10004cc0:	12e9883a 	add	r20,r2,r11
10004cc4:	003fe006 	br	10004c48 <___vfprintf_internal_r+0x2088>
10004cc8:	04040074 	movhi	r16,4097
10004ccc:	84068d04 	addi	r16,r16,6708
10004cd0:	003a2806 	br	10003574 <___vfprintf_internal_r+0x9b4>
10004cd4:	00800b44 	movi	r2,45
10004cd8:	d8801545 	stb	r2,85(sp)
10004cdc:	03400b44 	movi	r13,45
10004ce0:	003fe006 	br	10004c64 <___vfprintf_internal_r+0x20a4>
10004ce4:	00800084 	movi	r2,2
10004ce8:	d8801115 	stw	r2,68(sp)
10004cec:	003d9906 	br	10004354 <___vfprintf_internal_r+0x1794>
10004cf0:	d8800617 	ldw	r2,24(sp)
10004cf4:	12c00017 	ldw	r11,0(r2)
10004cf8:	10800104 	addi	r2,r2,4
10004cfc:	5800010e 	bge	r11,zero,10004d04 <___vfprintf_internal_r+0x2144>
10004d00:	02ffffc4 	movi	r11,-1
10004d04:	b7000043 	ldbu	fp,1(r22)
10004d08:	d8800615 	stw	r2,24(sp)
10004d0c:	182d883a 	mov	r22,r3
10004d10:	e2803fcc 	andi	r10,fp,255
10004d14:	5280201c 	xori	r10,r10,128
10004d18:	52bfe004 	addi	r10,r10,-128
10004d1c:	00380306 	br	10002d2c <___vfprintf_internal_r+0x16c>

10004d20 <__vfprintf_internal>:
10004d20:	00840074 	movhi	r2,4097
10004d24:	300f883a 	mov	r7,r6
10004d28:	280d883a 	mov	r6,r5
10004d2c:	200b883a 	mov	r5,r4
10004d30:	11106517 	ldw	r4,16788(r2)
10004d34:	0002bc01 	jmpi	10002bc0 <___vfprintf_internal_r>

10004d38 <__sbprintf>:
10004d38:	2880030b 	ldhu	r2,12(r5)
10004d3c:	2b001917 	ldw	r12,100(r5)
10004d40:	2ac0038b 	ldhu	r11,14(r5)
10004d44:	2a800717 	ldw	r10,28(r5)
10004d48:	2a400917 	ldw	r9,36(r5)
10004d4c:	defee204 	addi	sp,sp,-1144
10004d50:	da001a04 	addi	r8,sp,104
10004d54:	00c10004 	movi	r3,1024
10004d58:	dc011a15 	stw	r16,1128(sp)
10004d5c:	10bfff4c 	andi	r2,r2,65533
10004d60:	2821883a 	mov	r16,r5
10004d64:	d80b883a 	mov	r5,sp
10004d68:	dc811c15 	stw	r18,1136(sp)
10004d6c:	dc411b15 	stw	r17,1132(sp)
10004d70:	dfc11d15 	stw	ra,1140(sp)
10004d74:	2025883a 	mov	r18,r4
10004d78:	d880030d 	sth	r2,12(sp)
10004d7c:	db001915 	stw	r12,100(sp)
10004d80:	dac0038d 	sth	r11,14(sp)
10004d84:	da800715 	stw	r10,28(sp)
10004d88:	da400915 	stw	r9,36(sp)
10004d8c:	da000015 	stw	r8,0(sp)
10004d90:	da000415 	stw	r8,16(sp)
10004d94:	d8c00215 	stw	r3,8(sp)
10004d98:	d8c00515 	stw	r3,20(sp)
10004d9c:	d8000615 	stw	zero,24(sp)
10004da0:	0002bc00 	call	10002bc0 <___vfprintf_internal_r>
10004da4:	1023883a 	mov	r17,r2
10004da8:	10000d0e 	bge	r2,zero,10004de0 <__sbprintf+0xa8>
10004dac:	d880030b 	ldhu	r2,12(sp)
10004db0:	1080100c 	andi	r2,r2,64
10004db4:	10000326 	beq	r2,zero,10004dc4 <__sbprintf+0x8c>
10004db8:	8080030b 	ldhu	r2,12(r16)
10004dbc:	10801014 	ori	r2,r2,64
10004dc0:	8080030d 	sth	r2,12(r16)
10004dc4:	8805883a 	mov	r2,r17
10004dc8:	dfc11d17 	ldw	ra,1140(sp)
10004dcc:	dc811c17 	ldw	r18,1136(sp)
10004dd0:	dc411b17 	ldw	r17,1132(sp)
10004dd4:	dc011a17 	ldw	r16,1128(sp)
10004dd8:	dec11e04 	addi	sp,sp,1144
10004ddc:	f800283a 	ret
10004de0:	d80b883a 	mov	r5,sp
10004de4:	9009883a 	mov	r4,r18
10004de8:	0006a580 	call	10006a58 <_fflush_r>
10004dec:	103fef26 	beq	r2,zero,10004dac <__sbprintf+0x74>
10004df0:	047fffc4 	movi	r17,-1
10004df4:	003fed06 	br	10004dac <__sbprintf+0x74>

10004df8 <__swsetup_r>:
10004df8:	00840074 	movhi	r2,4097
10004dfc:	10906517 	ldw	r2,16788(r2)
10004e00:	defffd04 	addi	sp,sp,-12
10004e04:	dc400115 	stw	r17,4(sp)
10004e08:	dc000015 	stw	r16,0(sp)
10004e0c:	dfc00215 	stw	ra,8(sp)
10004e10:	2023883a 	mov	r17,r4
10004e14:	2821883a 	mov	r16,r5
10004e18:	10000226 	beq	r2,zero,10004e24 <__swsetup_r+0x2c>
10004e1c:	10c00e17 	ldw	r3,56(r2)
10004e20:	18002026 	beq	r3,zero,10004ea4 <__swsetup_r+0xac>
10004e24:	8080030b 	ldhu	r2,12(r16)
10004e28:	10c0020c 	andi	r3,r2,8
10004e2c:	1009883a 	mov	r4,r2
10004e30:	18002226 	beq	r3,zero,10004ebc <__swsetup_r+0xc4>
10004e34:	80c00417 	ldw	r3,16(r16)
10004e38:	18002826 	beq	r3,zero,10004edc <__swsetup_r+0xe4>
10004e3c:	1100004c 	andi	r4,r2,1
10004e40:	20000b1e 	bne	r4,zero,10004e70 <__swsetup_r+0x78>
10004e44:	1080008c 	andi	r2,r2,2
10004e48:	10002d1e 	bne	r2,zero,10004f00 <__swsetup_r+0x108>
10004e4c:	80800517 	ldw	r2,20(r16)
10004e50:	80800215 	stw	r2,8(r16)
10004e54:	18000b26 	beq	r3,zero,10004e84 <__swsetup_r+0x8c>
10004e58:	0005883a 	mov	r2,zero
10004e5c:	dfc00217 	ldw	ra,8(sp)
10004e60:	dc400117 	ldw	r17,4(sp)
10004e64:	dc000017 	ldw	r16,0(sp)
10004e68:	dec00304 	addi	sp,sp,12
10004e6c:	f800283a 	ret
10004e70:	80800517 	ldw	r2,20(r16)
10004e74:	80000215 	stw	zero,8(r16)
10004e78:	0085c83a 	sub	r2,zero,r2
10004e7c:	80800615 	stw	r2,24(r16)
10004e80:	183ff51e 	bne	r3,zero,10004e58 <__swsetup_r+0x60>
10004e84:	80c0030b 	ldhu	r3,12(r16)
10004e88:	0005883a 	mov	r2,zero
10004e8c:	1900200c 	andi	r4,r3,128
10004e90:	203ff226 	beq	r4,zero,10004e5c <__swsetup_r+0x64>
10004e94:	18c01014 	ori	r3,r3,64
10004e98:	80c0030d 	sth	r3,12(r16)
10004e9c:	00bfffc4 	movi	r2,-1
10004ea0:	003fee06 	br	10004e5c <__swsetup_r+0x64>
10004ea4:	1009883a 	mov	r4,r2
10004ea8:	0006ddc0 	call	10006ddc <__sinit>
10004eac:	8080030b 	ldhu	r2,12(r16)
10004eb0:	10c0020c 	andi	r3,r2,8
10004eb4:	1009883a 	mov	r4,r2
10004eb8:	183fde1e 	bne	r3,zero,10004e34 <__swsetup_r+0x3c>
10004ebc:	2080040c 	andi	r2,r4,16
10004ec0:	10001f26 	beq	r2,zero,10004f40 <__swsetup_r+0x148>
10004ec4:	2080010c 	andi	r2,r4,4
10004ec8:	10000f1e 	bne	r2,zero,10004f08 <__swsetup_r+0x110>
10004ecc:	80c00417 	ldw	r3,16(r16)
10004ed0:	20800214 	ori	r2,r4,8
10004ed4:	8080030d 	sth	r2,12(r16)
10004ed8:	183fd81e 	bne	r3,zero,10004e3c <__swsetup_r+0x44>
10004edc:	1100a00c 	andi	r4,r2,640
10004ee0:	21008020 	cmpeqi	r4,r4,512
10004ee4:	203fd51e 	bne	r4,zero,10004e3c <__swsetup_r+0x44>
10004ee8:	800b883a 	mov	r5,r16
10004eec:	8809883a 	mov	r4,r17
10004ef0:	00079100 	call	10007910 <__smakebuf_r>
10004ef4:	8080030b 	ldhu	r2,12(r16)
10004ef8:	80c00417 	ldw	r3,16(r16)
10004efc:	003fcf06 	br	10004e3c <__swsetup_r+0x44>
10004f00:	0005883a 	mov	r2,zero
10004f04:	003fd206 	br	10004e50 <__swsetup_r+0x58>
10004f08:	81400c17 	ldw	r5,48(r16)
10004f0c:	28000626 	beq	r5,zero,10004f28 <__swsetup_r+0x130>
10004f10:	80801004 	addi	r2,r16,64
10004f14:	28800326 	beq	r5,r2,10004f24 <__swsetup_r+0x12c>
10004f18:	8809883a 	mov	r4,r17
10004f1c:	0006f400 	call	10006f40 <_free_r>
10004f20:	8100030b 	ldhu	r4,12(r16)
10004f24:	80000c15 	stw	zero,48(r16)
10004f28:	80c00417 	ldw	r3,16(r16)
10004f2c:	00bff6c4 	movi	r2,-37
10004f30:	1108703a 	and	r4,r2,r4
10004f34:	80000115 	stw	zero,4(r16)
10004f38:	80c00015 	stw	r3,0(r16)
10004f3c:	003fe406 	br	10004ed0 <__swsetup_r+0xd8>
10004f40:	00800244 	movi	r2,9
10004f44:	88800015 	stw	r2,0(r17)
10004f48:	20801014 	ori	r2,r4,64
10004f4c:	8080030d 	sth	r2,12(r16)
10004f50:	00bfffc4 	movi	r2,-1
10004f54:	003fc106 	br	10004e5c <__swsetup_r+0x64>

10004f58 <quorem>:
10004f58:	defff504 	addi	sp,sp,-44
10004f5c:	dc800315 	stw	r18,12(sp)
10004f60:	20800417 	ldw	r2,16(r4)
10004f64:	2c800417 	ldw	r18,16(r5)
10004f68:	dfc00a15 	stw	ra,40(sp)
10004f6c:	df000915 	stw	fp,36(sp)
10004f70:	ddc00815 	stw	r23,32(sp)
10004f74:	dd800715 	stw	r22,28(sp)
10004f78:	dd400615 	stw	r21,24(sp)
10004f7c:	dd000515 	stw	r20,20(sp)
10004f80:	dcc00415 	stw	r19,16(sp)
10004f84:	dc400215 	stw	r17,8(sp)
10004f88:	dc000115 	stw	r16,4(sp)
10004f8c:	14807416 	blt	r2,r18,10005160 <quorem+0x208>
10004f90:	94bfffc4 	addi	r18,r18,-1
10004f94:	902e90ba 	slli	r23,r18,2
10004f98:	2c400504 	addi	r17,r5,20
10004f9c:	25400504 	addi	r21,r4,20
10004fa0:	8de9883a 	add	r20,r17,r23
10004fa4:	a7000017 	ldw	fp,0(r20)
10004fa8:	adef883a 	add	r23,r21,r23
10004fac:	b8c00017 	ldw	r3,0(r23)
10004fb0:	e7000044 	addi	fp,fp,1
10004fb4:	282d883a 	mov	r22,r5
10004fb8:	2021883a 	mov	r16,r4
10004fbc:	e00b883a 	mov	r5,fp
10004fc0:	1809883a 	mov	r4,r3
10004fc4:	d8c00015 	stw	r3,0(sp)
10004fc8:	000c7500 	call	1000c750 <__udivsi3>
10004fcc:	d8c00017 	ldw	r3,0(sp)
10004fd0:	1027883a 	mov	r19,r2
10004fd4:	1f002c36 	bltu	r3,fp,10005088 <quorem+0x130>
10004fd8:	8811883a 	mov	r8,r17
10004fdc:	a80b883a 	mov	r5,r21
10004fe0:	0013883a 	mov	r9,zero
10004fe4:	0007883a 	mov	r3,zero
10004fe8:	42000104 	addi	r8,r8,4
10004fec:	41ffff17 	ldw	r7,-4(r8)
10004ff0:	29800017 	ldw	r6,0(r5)
10004ff4:	29400104 	addi	r5,r5,4
10004ff8:	38bfffcc 	andi	r2,r7,65535
10004ffc:	14c5383a 	mul	r2,r2,r19
10005000:	3808d43a 	srli	r4,r7,16
10005004:	32bfffcc 	andi	r10,r6,65535
10005008:	1245883a 	add	r2,r2,r9
1000500c:	1012d43a 	srli	r9,r2,16
10005010:	11ffffcc 	andi	r7,r2,65535
10005014:	24c9383a 	mul	r4,r4,r19
10005018:	19c7c83a 	sub	r3,r3,r7
1000501c:	1a8f883a 	add	r7,r3,r10
10005020:	3006d43a 	srli	r3,r6,16
10005024:	2249883a 	add	r4,r4,r9
10005028:	3805d43a 	srai	r2,r7,16
1000502c:	21bfffcc 	andi	r6,r4,65535
10005030:	1987c83a 	sub	r3,r3,r6
10005034:	1887883a 	add	r3,r3,r2
10005038:	180c943a 	slli	r6,r3,16
1000503c:	39ffffcc 	andi	r7,r7,65535
10005040:	2012d43a 	srli	r9,r4,16
10005044:	31ceb03a 	or	r7,r6,r7
10005048:	29ffff15 	stw	r7,-4(r5)
1000504c:	1807d43a 	srai	r3,r3,16
10005050:	a23fe52e 	bgeu	r20,r8,10004fe8 <quorem+0x90>
10005054:	b8800017 	ldw	r2,0(r23)
10005058:	10000b1e 	bne	r2,zero,10005088 <quorem+0x130>
1000505c:	b8bfff04 	addi	r2,r23,-4
10005060:	a880082e 	bgeu	r21,r2,10005084 <quorem+0x12c>
10005064:	b8ffff17 	ldw	r3,-4(r23)
10005068:	18000326 	beq	r3,zero,10005078 <quorem+0x120>
1000506c:	00000506 	br	10005084 <quorem+0x12c>
10005070:	10c00017 	ldw	r3,0(r2)
10005074:	1800031e 	bne	r3,zero,10005084 <quorem+0x12c>
10005078:	10bfff04 	addi	r2,r2,-4
1000507c:	94bfffc4 	addi	r18,r18,-1
10005080:	a8bffb36 	bltu	r21,r2,10005070 <quorem+0x118>
10005084:	84800415 	stw	r18,16(r16)
10005088:	b00b883a 	mov	r5,r22
1000508c:	8009883a 	mov	r4,r16
10005090:	0008dc80 	call	10008dc8 <__mcmp>
10005094:	10002516 	blt	r2,zero,1000512c <quorem+0x1d4>
10005098:	9cc00044 	addi	r19,r19,1
1000509c:	a80d883a 	mov	r6,r21
100050a0:	0007883a 	mov	r3,zero
100050a4:	8c400104 	addi	r17,r17,4
100050a8:	893fff17 	ldw	r4,-4(r17)
100050ac:	31400017 	ldw	r5,0(r6)
100050b0:	31800104 	addi	r6,r6,4
100050b4:	20bfffcc 	andi	r2,r4,65535
100050b8:	1887c83a 	sub	r3,r3,r2
100050bc:	28bfffcc 	andi	r2,r5,65535
100050c0:	1885883a 	add	r2,r3,r2
100050c4:	2008d43a 	srli	r4,r4,16
100050c8:	2806d43a 	srli	r3,r5,16
100050cc:	100fd43a 	srai	r7,r2,16
100050d0:	117fffcc 	andi	r5,r2,65535
100050d4:	1907c83a 	sub	r3,r3,r4
100050d8:	19c7883a 	add	r3,r3,r7
100050dc:	1804943a 	slli	r2,r3,16
100050e0:	1807d43a 	srai	r3,r3,16
100050e4:	1144b03a 	or	r2,r2,r5
100050e8:	30bfff15 	stw	r2,-4(r6)
100050ec:	a47fed2e 	bgeu	r20,r17,100050a4 <quorem+0x14c>
100050f0:	900690ba 	slli	r3,r18,2
100050f4:	a8c7883a 	add	r3,r21,r3
100050f8:	18800017 	ldw	r2,0(r3)
100050fc:	10000b1e 	bne	r2,zero,1000512c <quorem+0x1d4>
10005100:	18bfff04 	addi	r2,r3,-4
10005104:	a880082e 	bgeu	r21,r2,10005128 <quorem+0x1d0>
10005108:	18ffff17 	ldw	r3,-4(r3)
1000510c:	18000326 	beq	r3,zero,1000511c <quorem+0x1c4>
10005110:	00000506 	br	10005128 <quorem+0x1d0>
10005114:	10c00017 	ldw	r3,0(r2)
10005118:	1800031e 	bne	r3,zero,10005128 <quorem+0x1d0>
1000511c:	10bfff04 	addi	r2,r2,-4
10005120:	94bfffc4 	addi	r18,r18,-1
10005124:	a8bffb36 	bltu	r21,r2,10005114 <quorem+0x1bc>
10005128:	84800415 	stw	r18,16(r16)
1000512c:	9805883a 	mov	r2,r19
10005130:	dfc00a17 	ldw	ra,40(sp)
10005134:	df000917 	ldw	fp,36(sp)
10005138:	ddc00817 	ldw	r23,32(sp)
1000513c:	dd800717 	ldw	r22,28(sp)
10005140:	dd400617 	ldw	r21,24(sp)
10005144:	dd000517 	ldw	r20,20(sp)
10005148:	dcc00417 	ldw	r19,16(sp)
1000514c:	dc800317 	ldw	r18,12(sp)
10005150:	dc400217 	ldw	r17,8(sp)
10005154:	dc000117 	ldw	r16,4(sp)
10005158:	dec00b04 	addi	sp,sp,44
1000515c:	f800283a 	ret
10005160:	0005883a 	mov	r2,zero
10005164:	003ff206 	br	10005130 <quorem+0x1d8>

10005168 <_dtoa_r>:
10005168:	20801017 	ldw	r2,64(r4)
1000516c:	deffe204 	addi	sp,sp,-120
10005170:	df001c15 	stw	fp,112(sp)
10005174:	dcc01715 	stw	r19,92(sp)
10005178:	dc401515 	stw	r17,84(sp)
1000517c:	dc001415 	stw	r16,80(sp)
10005180:	dfc01d15 	stw	ra,116(sp)
10005184:	ddc01b15 	stw	r23,108(sp)
10005188:	dd801a15 	stw	r22,104(sp)
1000518c:	dd401915 	stw	r21,100(sp)
10005190:	dd001815 	stw	r20,96(sp)
10005194:	dc801615 	stw	r18,88(sp)
10005198:	d9400115 	stw	r5,4(sp)
1000519c:	d9c00215 	stw	r7,8(sp)
100051a0:	2039883a 	mov	fp,r4
100051a4:	3027883a 	mov	r19,r6
100051a8:	dc002017 	ldw	r16,128(sp)
100051ac:	3023883a 	mov	r17,r6
100051b0:	10000826 	beq	r2,zero,100051d4 <_dtoa_r+0x6c>
100051b4:	21801117 	ldw	r6,68(r4)
100051b8:	00c00044 	movi	r3,1
100051bc:	100b883a 	mov	r5,r2
100051c0:	1986983a 	sll	r3,r3,r6
100051c4:	11800115 	stw	r6,4(r2)
100051c8:	10c00215 	stw	r3,8(r2)
100051cc:	00085e80 	call	100085e8 <_Bfree>
100051d0:	e0001015 	stw	zero,64(fp)
100051d4:	98018116 	blt	r19,zero,100057dc <_dtoa_r+0x674>
100051d8:	80000015 	stw	zero,0(r16)
100051dc:	989ffc2c 	andhi	r2,r19,32752
100051e0:	00dffc34 	movhi	r3,32752
100051e4:	10c18626 	beq	r2,r3,10005800 <_dtoa_r+0x698>
100051e8:	d9000117 	ldw	r4,4(sp)
100051ec:	000d883a 	mov	r6,zero
100051f0:	000f883a 	mov	r7,zero
100051f4:	880b883a 	mov	r5,r17
100051f8:	000da580 	call	1000da58 <__eqdf2>
100051fc:	1000191e 	bne	r2,zero,10005264 <_dtoa_r+0xfc>
10005200:	d8c01f17 	ldw	r3,124(sp)
10005204:	00800044 	movi	r2,1
10005208:	18800015 	stw	r2,0(r3)
1000520c:	d8802117 	ldw	r2,132(sp)
10005210:	10032426 	beq	r2,zero,10005ea4 <_dtoa_r+0xd3c>
10005214:	d9002117 	ldw	r4,132(sp)
10005218:	00840074 	movhi	r2,4097
1000521c:	10869b44 	addi	r2,r2,6765
10005220:	00c40074 	movhi	r3,4097
10005224:	20800015 	stw	r2,0(r4)
10005228:	18869b04 	addi	r2,r3,6764
1000522c:	d8800315 	stw	r2,12(sp)
10005230:	d8800317 	ldw	r2,12(sp)
10005234:	dfc01d17 	ldw	ra,116(sp)
10005238:	df001c17 	ldw	fp,112(sp)
1000523c:	ddc01b17 	ldw	r23,108(sp)
10005240:	dd801a17 	ldw	r22,104(sp)
10005244:	dd401917 	ldw	r21,100(sp)
10005248:	dd001817 	ldw	r20,96(sp)
1000524c:	dcc01717 	ldw	r19,92(sp)
10005250:	dc801617 	ldw	r18,88(sp)
10005254:	dc401517 	ldw	r17,84(sp)
10005258:	dc001417 	ldw	r16,80(sp)
1000525c:	dec01e04 	addi	sp,sp,120
10005260:	f800283a 	ret
10005264:	dc800117 	ldw	r18,4(sp)
10005268:	d8801204 	addi	r2,sp,72
1000526c:	9820d53a 	srli	r16,r19,20
10005270:	d8800015 	stw	r2,0(sp)
10005274:	d9c01304 	addi	r7,sp,76
10005278:	900b883a 	mov	r5,r18
1000527c:	880d883a 	mov	r6,r17
10005280:	e009883a 	mov	r4,fp
10005284:	000913c0 	call	1000913c <__d2b>
10005288:	102b883a 	mov	r21,r2
1000528c:	8001701e 	bne	r16,zero,10005850 <_dtoa_r+0x6e8>
10005290:	dc801217 	ldw	r18,72(sp)
10005294:	dc001317 	ldw	r16,76(sp)
10005298:	9421883a 	add	r16,r18,r16
1000529c:	80810c84 	addi	r2,r16,1074
100052a0:	10c00850 	cmplti	r3,r2,33
100052a4:	18030f1e 	bne	r3,zero,10005ee4 <_dtoa_r+0xd7c>
100052a8:	01001004 	movi	r4,64
100052ac:	2085c83a 	sub	r2,r4,r2
100052b0:	98a6983a 	sll	r19,r19,r2
100052b4:	d8800117 	ldw	r2,4(sp)
100052b8:	81010484 	addi	r4,r16,1042
100052bc:	1108d83a 	srl	r4,r2,r4
100052c0:	9908b03a 	or	r4,r19,r4
100052c4:	000ee4c0 	call	1000ee4c <__floatunsidf>
100052c8:	1009883a 	mov	r4,r2
100052cc:	017f8434 	movhi	r5,65040
100052d0:	00800044 	movi	r2,1
100052d4:	194b883a 	add	r5,r3,r5
100052d8:	843fffc4 	addi	r16,r16,-1
100052dc:	d8800a15 	stw	r2,40(sp)
100052e0:	000d883a 	mov	r6,zero
100052e4:	01cffe34 	movhi	r7,16376
100052e8:	000e3440 	call	1000e344 <__subdf3>
100052ec:	0198dbf4 	movhi	r6,25455
100052f0:	01cff4f4 	movhi	r7,16339
100052f4:	3190d844 	addi	r6,r6,17249
100052f8:	39e1e9c4 	addi	r7,r7,-30809
100052fc:	1009883a 	mov	r4,r2
10005300:	180b883a 	mov	r5,r3
10005304:	000dcb80 	call	1000dcb8 <__muldf3>
10005308:	01a2d874 	movhi	r6,35681
1000530c:	01cff1f4 	movhi	r7,16327
10005310:	31b22cc4 	addi	r6,r6,-14157
10005314:	39e28a04 	addi	r7,r7,-30168
10005318:	180b883a 	mov	r5,r3
1000531c:	1009883a 	mov	r4,r2
10005320:	000c8100 	call	1000c810 <__adddf3>
10005324:	8009883a 	mov	r4,r16
10005328:	1029883a 	mov	r20,r2
1000532c:	1827883a 	mov	r19,r3
10005330:	000ed840 	call	1000ed84 <__floatsidf>
10005334:	019427f4 	movhi	r6,20639
10005338:	01cff4f4 	movhi	r7,16339
1000533c:	319e7ec4 	addi	r6,r6,31227
10005340:	39d104c4 	addi	r7,r7,17427
10005344:	1009883a 	mov	r4,r2
10005348:	180b883a 	mov	r5,r3
1000534c:	000dcb80 	call	1000dcb8 <__muldf3>
10005350:	100d883a 	mov	r6,r2
10005354:	180f883a 	mov	r7,r3
10005358:	a009883a 	mov	r4,r20
1000535c:	980b883a 	mov	r5,r19
10005360:	000c8100 	call	1000c810 <__adddf3>
10005364:	1009883a 	mov	r4,r2
10005368:	180b883a 	mov	r5,r3
1000536c:	1029883a 	mov	r20,r2
10005370:	1827883a 	mov	r19,r3
10005374:	000ed040 	call	1000ed04 <__fixdfsi>
10005378:	000d883a 	mov	r6,zero
1000537c:	000f883a 	mov	r7,zero
10005380:	a009883a 	mov	r4,r20
10005384:	980b883a 	mov	r5,r19
10005388:	102d883a 	mov	r22,r2
1000538c:	000dbc80 	call	1000dbc8 <__ledf2>
10005390:	1002ba16 	blt	r2,zero,10005e7c <_dtoa_r+0xd14>
10005394:	9421c83a 	sub	r16,r18,r16
10005398:	b08005e8 	cmpgeui	r2,r22,23
1000539c:	853fffc4 	addi	r20,r16,-1
100053a0:	1002ae1e 	bne	r2,zero,10005e5c <_dtoa_r+0xcf4>
100053a4:	b00690fa 	slli	r3,r22,3
100053a8:	00840074 	movhi	r2,4097
100053ac:	1086bf04 	addi	r2,r2,6908
100053b0:	10c5883a 	add	r2,r2,r3
100053b4:	11800017 	ldw	r6,0(r2)
100053b8:	11c00117 	ldw	r7,4(r2)
100053bc:	d9000117 	ldw	r4,4(sp)
100053c0:	880b883a 	mov	r5,r17
100053c4:	000dbc80 	call	1000dbc8 <__ledf2>
100053c8:	10026f0e 	bge	r2,zero,10005d88 <_dtoa_r+0xc20>
100053cc:	d8000915 	stw	zero,36(sp)
100053d0:	b5bfffc4 	addi	r22,r22,-1
100053d4:	a002a416 	blt	r20,zero,10005e68 <_dtoa_r+0xd00>
100053d8:	d8000515 	stw	zero,20(sp)
100053dc:	b0026d0e 	bge	r22,zero,10005d94 <_dtoa_r+0xc2c>
100053e0:	d8800517 	ldw	r2,20(sp)
100053e4:	d8c00217 	ldw	r3,8(sp)
100053e8:	dd800415 	stw	r22,16(sp)
100053ec:	1585c83a 	sub	r2,r2,r22
100053f0:	d8800515 	stw	r2,20(sp)
100053f4:	0585c83a 	sub	r2,zero,r22
100053f8:	d8800815 	stw	r2,32(sp)
100053fc:	188002a8 	cmpgeui	r2,r3,10
10005400:	002d883a 	mov	r22,zero
10005404:	1002691e 	bne	r2,zero,10005dac <_dtoa_r+0xc44>
10005408:	18800190 	cmplti	r2,r3,6
1000540c:	1002ba1e 	bne	r2,zero,10005ef8 <_dtoa_r+0xd90>
10005410:	18bfff04 	addi	r2,r3,-4
10005414:	d8800215 	stw	r2,8(sp)
10005418:	0021883a 	mov	r16,zero
1000541c:	d8c00217 	ldw	r3,8(sp)
10005420:	188000e0 	cmpeqi	r2,r3,3
10005424:	10039d1e 	bne	r2,zero,1000629c <_dtoa_r+0x1134>
10005428:	18800108 	cmpgei	r2,r3,4
1000542c:	10027a26 	beq	r2,zero,10005e18 <_dtoa_r+0xcb0>
10005430:	d8c00217 	ldw	r3,8(sp)
10005434:	18800120 	cmpeqi	r2,r3,4
10005438:	10026926 	beq	r2,zero,10005de0 <_dtoa_r+0xc78>
1000543c:	00800044 	movi	r2,1
10005440:	d8800715 	stw	r2,28(sp)
10005444:	d8801e17 	ldw	r2,120(sp)
10005448:	0083670e 	bge	zero,r2,100061e8 <_dtoa_r+0x1080>
1000544c:	d8800b15 	stw	r2,44(sp)
10005450:	d8800615 	stw	r2,24(sp)
10005454:	100d883a 	mov	r6,r2
10005458:	e0001115 	stw	zero,68(fp)
1000545c:	30800610 	cmplti	r2,r6,24
10005460:	dc800617 	ldw	r18,24(sp)
10005464:	1004eb1e 	bne	r2,zero,10006814 <_dtoa_r+0x16ac>
10005468:	00c00044 	movi	r3,1
1000546c:	00800104 	movi	r2,4
10005470:	1085883a 	add	r2,r2,r2
10005474:	11000504 	addi	r4,r2,20
10005478:	180b883a 	mov	r5,r3
1000547c:	18c00044 	addi	r3,r3,1
10005480:	313ffb2e 	bgeu	r6,r4,10005470 <_dtoa_r+0x308>
10005484:	e1401115 	stw	r5,68(fp)
10005488:	e009883a 	mov	r4,fp
1000548c:	00085440 	call	10008544 <_Balloc>
10005490:	d8800315 	stw	r2,12(sp)
10005494:	e0801015 	stw	r2,64(fp)
10005498:	948003e8 	cmpgeui	r18,r18,15
1000549c:	9000fe1e 	bne	r18,zero,10005898 <_dtoa_r+0x730>
100054a0:	8000fd26 	beq	r16,zero,10005898 <_dtoa_r+0x730>
100054a4:	d9000417 	ldw	r4,16(sp)
100054a8:	0103c60e 	bge	zero,r4,100063c4 <_dtoa_r+0x125c>
100054ac:	208003cc 	andi	r2,r4,15
100054b0:	100690fa 	slli	r3,r2,3
100054b4:	202fd13a 	srai	r23,r4,4
100054b8:	00840074 	movhi	r2,4097
100054bc:	1086bf04 	addi	r2,r2,6908
100054c0:	10c5883a 	add	r2,r2,r3
100054c4:	b8c0040c 	andi	r3,r23,16
100054c8:	12800017 	ldw	r10,0(r2)
100054cc:	12400117 	ldw	r9,4(r2)
100054d0:	1803621e 	bne	r3,zero,1000625c <_dtoa_r+0x10f4>
100054d4:	d8800117 	ldw	r2,4(sp)
100054d8:	8827883a 	mov	r19,r17
100054dc:	04000084 	movi	r16,2
100054e0:	d8800c15 	stw	r2,48(sp)
100054e4:	04840074 	movhi	r18,4097
100054e8:	9486b504 	addi	r18,r18,6868
100054ec:	b8000f26 	beq	r23,zero,1000552c <_dtoa_r+0x3c4>
100054f0:	5005883a 	mov	r2,r10
100054f4:	4807883a 	mov	r3,r9
100054f8:	b980004c 	andi	r6,r23,1
100054fc:	1009883a 	mov	r4,r2
10005500:	b82fd07a 	srai	r23,r23,1
10005504:	180b883a 	mov	r5,r3
10005508:	30000426 	beq	r6,zero,1000551c <_dtoa_r+0x3b4>
1000550c:	91800017 	ldw	r6,0(r18)
10005510:	91c00117 	ldw	r7,4(r18)
10005514:	84000044 	addi	r16,r16,1
10005518:	000dcb80 	call	1000dcb8 <__muldf3>
1000551c:	94800204 	addi	r18,r18,8
10005520:	b83ff51e 	bne	r23,zero,100054f8 <_dtoa_r+0x390>
10005524:	1015883a 	mov	r10,r2
10005528:	1813883a 	mov	r9,r3
1000552c:	d9000c17 	ldw	r4,48(sp)
10005530:	980b883a 	mov	r5,r19
10005534:	500d883a 	mov	r6,r10
10005538:	480f883a 	mov	r7,r9
1000553c:	000d1b00 	call	1000d1b0 <__divdf3>
10005540:	1025883a 	mov	r18,r2
10005544:	1827883a 	mov	r19,r3
10005548:	d8800917 	ldw	r2,36(sp)
1000554c:	10000626 	beq	r2,zero,10005568 <_dtoa_r+0x400>
10005550:	000d883a 	mov	r6,zero
10005554:	01cffc34 	movhi	r7,16368
10005558:	9009883a 	mov	r4,r18
1000555c:	980b883a 	mov	r5,r19
10005560:	000dbc80 	call	1000dbc8 <__ledf2>
10005564:	10042616 	blt	r2,zero,10006600 <_dtoa_r+0x1498>
10005568:	8009883a 	mov	r4,r16
1000556c:	000ed840 	call	1000ed84 <__floatsidf>
10005570:	900d883a 	mov	r6,r18
10005574:	980f883a 	mov	r7,r19
10005578:	1009883a 	mov	r4,r2
1000557c:	180b883a 	mov	r5,r3
10005580:	000dcb80 	call	1000dcb8 <__muldf3>
10005584:	000d883a 	mov	r6,zero
10005588:	01d00734 	movhi	r7,16412
1000558c:	1009883a 	mov	r4,r2
10005590:	180b883a 	mov	r5,r3
10005594:	000c8100 	call	1000c810 <__adddf3>
10005598:	d8800c15 	stw	r2,48(sp)
1000559c:	00bf3034 	movhi	r2,64704
100055a0:	1885883a 	add	r2,r3,r2
100055a4:	d8800d15 	stw	r2,52(sp)
100055a8:	d8800617 	ldw	r2,24(sp)
100055ac:	10036d26 	beq	r2,zero,10006364 <_dtoa_r+0x11fc>
100055b0:	d8800417 	ldw	r2,16(sp)
100055b4:	d8800f15 	stw	r2,60(sp)
100055b8:	d8800617 	ldw	r2,24(sp)
100055bc:	d8800e15 	stw	r2,56(sp)
100055c0:	980b883a 	mov	r5,r19
100055c4:	9009883a 	mov	r4,r18
100055c8:	000ed040 	call	1000ed04 <__fixdfsi>
100055cc:	1009883a 	mov	r4,r2
100055d0:	102f883a 	mov	r23,r2
100055d4:	000ed840 	call	1000ed84 <__floatsidf>
100055d8:	100d883a 	mov	r6,r2
100055dc:	180f883a 	mov	r7,r3
100055e0:	9009883a 	mov	r4,r18
100055e4:	980b883a 	mov	r5,r19
100055e8:	000e3440 	call	1000e344 <__subdf3>
100055ec:	1025883a 	mov	r18,r2
100055f0:	d8800e17 	ldw	r2,56(sp)
100055f4:	1821883a 	mov	r16,r3
100055f8:	ba400c04 	addi	r9,r23,48
100055fc:	10bfffc4 	addi	r2,r2,-1
10005600:	100690fa 	slli	r3,r2,3
10005604:	00840074 	movhi	r2,4097
10005608:	1086bf04 	addi	r2,r2,6908
1000560c:	10c5883a 	add	r2,r2,r3
10005610:	11800017 	ldw	r6,0(r2)
10005614:	d8c00317 	ldw	r3,12(sp)
10005618:	11c00117 	ldw	r7,4(r2)
1000561c:	d8800717 	ldw	r2,28(sp)
10005620:	4811883a 	mov	r8,r9
10005624:	da001015 	stw	r8,64(sp)
10005628:	1dc00044 	addi	r23,r3,1
1000562c:	1003a226 	beq	r2,zero,100064b8 <_dtoa_r+0x1350>
10005630:	0009883a 	mov	r4,zero
10005634:	014ff834 	movhi	r5,16352
10005638:	da401115 	stw	r9,68(sp)
1000563c:	000d1b00 	call	1000d1b0 <__divdf3>
10005640:	d9800c17 	ldw	r6,48(sp)
10005644:	d9c00d17 	ldw	r7,52(sp)
10005648:	1009883a 	mov	r4,r2
1000564c:	180b883a 	mov	r5,r3
10005650:	000e3440 	call	1000e344 <__subdf3>
10005654:	1827883a 	mov	r19,r3
10005658:	da401117 	ldw	r9,68(sp)
1000565c:	d8c00317 	ldw	r3,12(sp)
10005660:	900d883a 	mov	r6,r18
10005664:	800f883a 	mov	r7,r16
10005668:	1a400005 	stb	r9,0(r3)
1000566c:	1009883a 	mov	r4,r2
10005670:	980b883a 	mov	r5,r19
10005674:	d8800c15 	stw	r2,48(sp)
10005678:	000dad80 	call	1000dad8 <__gedf2>
1000567c:	da001017 	ldw	r8,64(sp)
10005680:	00804816 	blt	zero,r2,100057a4 <_dtoa_r+0x63c>
10005684:	900d883a 	mov	r6,r18
10005688:	800f883a 	mov	r7,r16
1000568c:	0009883a 	mov	r4,zero
10005690:	014ffc34 	movhi	r5,16368
10005694:	da000d15 	stw	r8,52(sp)
10005698:	000e3440 	call	1000e344 <__subdf3>
1000569c:	d9000c17 	ldw	r4,48(sp)
100056a0:	100d883a 	mov	r6,r2
100056a4:	180f883a 	mov	r7,r3
100056a8:	980b883a 	mov	r5,r19
100056ac:	000dad80 	call	1000dad8 <__gedf2>
100056b0:	da000d17 	ldw	r8,52(sp)
100056b4:	00844e16 	blt	zero,r2,100067f0 <_dtoa_r+0x1688>
100056b8:	d8c00e17 	ldw	r3,56(sp)
100056bc:	18800060 	cmpeqi	r2,r3,1
100056c0:	1000751e 	bne	r2,zero,10005898 <_dtoa_r+0x730>
100056c4:	d8800317 	ldw	r2,12(sp)
100056c8:	dd800d15 	stw	r22,52(sp)
100056cc:	dd000e15 	stw	r20,56(sp)
100056d0:	10c5883a 	add	r2,r2,r3
100056d4:	dd000c17 	ldw	r20,48(sp)
100056d8:	102d883a 	mov	r22,r2
100056dc:	dc400c15 	stw	r17,48(sp)
100056e0:	00000806 	br	10005704 <_dtoa_r+0x59c>
100056e4:	000e3440 	call	1000e344 <__subdf3>
100056e8:	a00d883a 	mov	r6,r20
100056ec:	980f883a 	mov	r7,r19
100056f0:	1009883a 	mov	r4,r2
100056f4:	180b883a 	mov	r5,r3
100056f8:	000dbc80 	call	1000dbc8 <__ledf2>
100056fc:	10042316 	blt	r2,zero,1000678c <_dtoa_r+0x1624>
10005700:	bd806226 	beq	r23,r22,1000588c <_dtoa_r+0x724>
10005704:	a009883a 	mov	r4,r20
10005708:	980b883a 	mov	r5,r19
1000570c:	000d883a 	mov	r6,zero
10005710:	01d00934 	movhi	r7,16420
10005714:	000dcb80 	call	1000dcb8 <__muldf3>
10005718:	000d883a 	mov	r6,zero
1000571c:	01d00934 	movhi	r7,16420
10005720:	9009883a 	mov	r4,r18
10005724:	800b883a 	mov	r5,r16
10005728:	1029883a 	mov	r20,r2
1000572c:	1827883a 	mov	r19,r3
10005730:	000dcb80 	call	1000dcb8 <__muldf3>
10005734:	180b883a 	mov	r5,r3
10005738:	1009883a 	mov	r4,r2
1000573c:	1821883a 	mov	r16,r3
10005740:	1025883a 	mov	r18,r2
10005744:	000ed040 	call	1000ed04 <__fixdfsi>
10005748:	1009883a 	mov	r4,r2
1000574c:	1023883a 	mov	r17,r2
10005750:	000ed840 	call	1000ed84 <__floatsidf>
10005754:	9009883a 	mov	r4,r18
10005758:	800b883a 	mov	r5,r16
1000575c:	100d883a 	mov	r6,r2
10005760:	180f883a 	mov	r7,r3
10005764:	000e3440 	call	1000e344 <__subdf3>
10005768:	bdc00044 	addi	r23,r23,1
1000576c:	8c400c04 	addi	r17,r17,48
10005770:	a00d883a 	mov	r6,r20
10005774:	980f883a 	mov	r7,r19
10005778:	1009883a 	mov	r4,r2
1000577c:	180b883a 	mov	r5,r3
10005780:	bc7fffc5 	stb	r17,-1(r23)
10005784:	1025883a 	mov	r18,r2
10005788:	1821883a 	mov	r16,r3
1000578c:	000dbc80 	call	1000dbc8 <__ledf2>
10005790:	900d883a 	mov	r6,r18
10005794:	800f883a 	mov	r7,r16
10005798:	0009883a 	mov	r4,zero
1000579c:	014ffc34 	movhi	r5,16368
100057a0:	103fd00e 	bge	r2,zero,100056e4 <_dtoa_r+0x57c>
100057a4:	d8800f17 	ldw	r2,60(sp)
100057a8:	10800044 	addi	r2,r2,1
100057ac:	d8800415 	stw	r2,16(sp)
100057b0:	a80b883a 	mov	r5,r21
100057b4:	e009883a 	mov	r4,fp
100057b8:	00085e80 	call	100085e8 <_Bfree>
100057bc:	d8801f17 	ldw	r2,124(sp)
100057c0:	d8c00417 	ldw	r3,16(sp)
100057c4:	b8000005 	stb	zero,0(r23)
100057c8:	10c00015 	stw	r3,0(r2)
100057cc:	d8802117 	ldw	r2,132(sp)
100057d0:	103e9726 	beq	r2,zero,10005230 <_dtoa_r+0xc8>
100057d4:	15c00015 	stw	r23,0(r2)
100057d8:	003e9506 	br	10005230 <_dtoa_r+0xc8>
100057dc:	04600034 	movhi	r17,32768
100057e0:	8c7fffc4 	addi	r17,r17,-1
100057e4:	9c62703a 	and	r17,r19,r17
100057e8:	00800044 	movi	r2,1
100057ec:	8827883a 	mov	r19,r17
100057f0:	80800015 	stw	r2,0(r16)
100057f4:	00dffc34 	movhi	r3,32752
100057f8:	989ffc2c 	andhi	r2,r19,32752
100057fc:	10fe7a1e 	bne	r2,r3,100051e8 <_dtoa_r+0x80>
10005800:	00800434 	movhi	r2,16
10005804:	d8c01f17 	ldw	r3,124(sp)
10005808:	10bfffc4 	addi	r2,r2,-1
1000580c:	98a6703a 	and	r19,r19,r2
10005810:	0089c3c4 	movi	r2,9999
10005814:	18800015 	stw	r2,0(r3)
10005818:	d8800117 	ldw	r2,4(sp)
1000581c:	98aab03a 	or	r21,r19,r2
10005820:	a800141e 	bne	r21,zero,10005874 <_dtoa_r+0x70c>
10005824:	d8802117 	ldw	r2,132(sp)
10005828:	1003f626 	beq	r2,zero,10006804 <_dtoa_r+0x169c>
1000582c:	00840074 	movhi	r2,4097
10005830:	1007883a 	mov	r3,r2
10005834:	18c6a504 	addi	r3,r3,6804
10005838:	00840074 	movhi	r2,4097
1000583c:	d8c00315 	stw	r3,12(sp)
10005840:	1086a704 	addi	r2,r2,6812
10005844:	d8c02117 	ldw	r3,132(sp)
10005848:	18800015 	stw	r2,0(r3)
1000584c:	003e7806 	br	10005230 <_dtoa_r+0xc8>
10005850:	01400434 	movhi	r5,16
10005854:	297fffc4 	addi	r5,r5,-1
10005858:	894a703a 	and	r5,r17,r5
1000585c:	9009883a 	mov	r4,r18
10005860:	294ffc34 	orhi	r5,r5,16368
10005864:	843f0044 	addi	r16,r16,-1023
10005868:	dc801217 	ldw	r18,72(sp)
1000586c:	d8000a15 	stw	zero,40(sp)
10005870:	003e9b06 	br	100052e0 <_dtoa_r+0x178>
10005874:	d8802117 	ldw	r2,132(sp)
10005878:	1002461e 	bne	r2,zero,10006194 <_dtoa_r+0x102c>
1000587c:	00840074 	movhi	r2,4097
10005880:	1086a404 	addi	r2,r2,6800
10005884:	d8800315 	stw	r2,12(sp)
10005888:	003e6906 	br	10005230 <_dtoa_r+0xc8>
1000588c:	dd800d17 	ldw	r22,52(sp)
10005890:	dd000e17 	ldw	r20,56(sp)
10005894:	dc400c17 	ldw	r17,48(sp)
10005898:	d8801317 	ldw	r2,76(sp)
1000589c:	10009f16 	blt	r2,zero,10005b1c <_dtoa_r+0x9b4>
100058a0:	d9000417 	ldw	r4,16(sp)
100058a4:	20c003c8 	cmpgei	r3,r4,15
100058a8:	18009c1e 	bne	r3,zero,10005b1c <_dtoa_r+0x9b4>
100058ac:	200690fa 	slli	r3,r4,3
100058b0:	00840074 	movhi	r2,4097
100058b4:	1086bf04 	addi	r2,r2,6908
100058b8:	10c5883a 	add	r2,r2,r3
100058bc:	14000017 	ldw	r16,0(r2)
100058c0:	14800117 	ldw	r18,4(r2)
100058c4:	d8801e17 	ldw	r2,120(sp)
100058c8:	1000140e 	bge	r2,zero,1000591c <_dtoa_r+0x7b4>
100058cc:	d8800617 	ldw	r2,24(sp)
100058d0:	00801216 	blt	zero,r2,1000591c <_dtoa_r+0x7b4>
100058d4:	1002b81e 	bne	r2,zero,100063b8 <_dtoa_r+0x1250>
100058d8:	8009883a 	mov	r4,r16
100058dc:	900b883a 	mov	r5,r18
100058e0:	000d883a 	mov	r6,zero
100058e4:	01d00534 	movhi	r7,16404
100058e8:	000dcb80 	call	1000dcb8 <__muldf3>
100058ec:	d9800117 	ldw	r6,4(sp)
100058f0:	880f883a 	mov	r7,r17
100058f4:	1009883a 	mov	r4,r2
100058f8:	180b883a 	mov	r5,r3
100058fc:	000dad80 	call	1000dad8 <__gedf2>
10005900:	0025883a 	mov	r18,zero
10005904:	0021883a 	mov	r16,zero
10005908:	1001fd16 	blt	r2,zero,10006100 <_dtoa_r+0xf98>
1000590c:	d8801e17 	ldw	r2,120(sp)
10005910:	ddc00317 	ldw	r23,12(sp)
10005914:	00a2303a 	nor	r17,zero,r2
10005918:	0001ff06 	br	10006118 <_dtoa_r+0xfb0>
1000591c:	dcc00117 	ldw	r19,4(sp)
10005920:	800d883a 	mov	r6,r16
10005924:	900f883a 	mov	r7,r18
10005928:	880b883a 	mov	r5,r17
1000592c:	9809883a 	mov	r4,r19
10005930:	000d1b00 	call	1000d1b0 <__divdf3>
10005934:	180b883a 	mov	r5,r3
10005938:	1009883a 	mov	r4,r2
1000593c:	000ed040 	call	1000ed04 <__fixdfsi>
10005940:	1009883a 	mov	r4,r2
10005944:	102d883a 	mov	r22,r2
10005948:	000ed840 	call	1000ed84 <__floatsidf>
1000594c:	800d883a 	mov	r6,r16
10005950:	900f883a 	mov	r7,r18
10005954:	1009883a 	mov	r4,r2
10005958:	180b883a 	mov	r5,r3
1000595c:	000dcb80 	call	1000dcb8 <__muldf3>
10005960:	880b883a 	mov	r5,r17
10005964:	100d883a 	mov	r6,r2
10005968:	180f883a 	mov	r7,r3
1000596c:	9809883a 	mov	r4,r19
10005970:	000e3440 	call	1000e344 <__subdf3>
10005974:	dc400317 	ldw	r17,12(sp)
10005978:	1009883a 	mov	r4,r2
1000597c:	d9c00417 	ldw	r7,16(sp)
10005980:	b0800c04 	addi	r2,r22,48
10005984:	88800005 	stb	r2,0(r17)
10005988:	d8800617 	ldw	r2,24(sp)
1000598c:	39c00044 	addi	r7,r7,1
10005990:	d9c00415 	stw	r7,16(sp)
10005994:	11800060 	cmpeqi	r6,r2,1
10005998:	180b883a 	mov	r5,r3
1000599c:	2005883a 	mov	r2,r4
100059a0:	8dc00044 	addi	r23,r17,1
100059a4:	3000391e 	bne	r6,zero,10005a8c <_dtoa_r+0x924>
100059a8:	01d00934 	movhi	r7,16420
100059ac:	000dcb80 	call	1000dcb8 <__muldf3>
100059b0:	000d883a 	mov	r6,zero
100059b4:	000f883a 	mov	r7,zero
100059b8:	1009883a 	mov	r4,r2
100059bc:	180b883a 	mov	r5,r3
100059c0:	1027883a 	mov	r19,r2
100059c4:	1829883a 	mov	r20,r3
100059c8:	000da580 	call	1000da58 <__eqdf2>
100059cc:	103f7826 	beq	r2,zero,100057b0 <_dtoa_r+0x648>
100059d0:	d8c00617 	ldw	r3,24(sp)
100059d4:	8805883a 	mov	r2,r17
100059d8:	dd400115 	stw	r21,4(sp)
100059dc:	8c400084 	addi	r17,r17,2
100059e0:	10ed883a 	add	r22,r2,r3
100059e4:	00000a06 	br	10005a10 <_dtoa_r+0x8a8>
100059e8:	000dcb80 	call	1000dcb8 <__muldf3>
100059ec:	000d883a 	mov	r6,zero
100059f0:	000f883a 	mov	r7,zero
100059f4:	1009883a 	mov	r4,r2
100059f8:	180b883a 	mov	r5,r3
100059fc:	1027883a 	mov	r19,r2
10005a00:	1829883a 	mov	r20,r3
10005a04:	8c400044 	addi	r17,r17,1
10005a08:	000da580 	call	1000da58 <__eqdf2>
10005a0c:	10029d26 	beq	r2,zero,10006484 <_dtoa_r+0x131c>
10005a10:	800d883a 	mov	r6,r16
10005a14:	900f883a 	mov	r7,r18
10005a18:	9809883a 	mov	r4,r19
10005a1c:	a00b883a 	mov	r5,r20
10005a20:	000d1b00 	call	1000d1b0 <__divdf3>
10005a24:	180b883a 	mov	r5,r3
10005a28:	1009883a 	mov	r4,r2
10005a2c:	000ed040 	call	1000ed04 <__fixdfsi>
10005a30:	1009883a 	mov	r4,r2
10005a34:	102b883a 	mov	r21,r2
10005a38:	000ed840 	call	1000ed84 <__floatsidf>
10005a3c:	800d883a 	mov	r6,r16
10005a40:	900f883a 	mov	r7,r18
10005a44:	1009883a 	mov	r4,r2
10005a48:	180b883a 	mov	r5,r3
10005a4c:	000dcb80 	call	1000dcb8 <__muldf3>
10005a50:	100d883a 	mov	r6,r2
10005a54:	180f883a 	mov	r7,r3
10005a58:	9809883a 	mov	r4,r19
10005a5c:	a00b883a 	mov	r5,r20
10005a60:	000e3440 	call	1000e344 <__subdf3>
10005a64:	aa400c04 	addi	r9,r21,48
10005a68:	8a7fffc5 	stb	r9,-1(r17)
10005a6c:	000d883a 	mov	r6,zero
10005a70:	01d00934 	movhi	r7,16420
10005a74:	1009883a 	mov	r4,r2
10005a78:	180b883a 	mov	r5,r3
10005a7c:	882f883a 	mov	r23,r17
10005a80:	b47fd91e 	bne	r22,r17,100059e8 <_dtoa_r+0x880>
10005a84:	a82d883a 	mov	r22,r21
10005a88:	dd400117 	ldw	r21,4(sp)
10005a8c:	100d883a 	mov	r6,r2
10005a90:	180f883a 	mov	r7,r3
10005a94:	1009883a 	mov	r4,r2
10005a98:	180b883a 	mov	r5,r3
10005a9c:	000c8100 	call	1000c810 <__adddf3>
10005aa0:	800d883a 	mov	r6,r16
10005aa4:	900f883a 	mov	r7,r18
10005aa8:	1009883a 	mov	r4,r2
10005aac:	180b883a 	mov	r5,r3
10005ab0:	1027883a 	mov	r19,r2
10005ab4:	1823883a 	mov	r17,r3
10005ab8:	000dad80 	call	1000dad8 <__gedf2>
10005abc:	00800816 	blt	zero,r2,10005ae0 <_dtoa_r+0x978>
10005ac0:	800d883a 	mov	r6,r16
10005ac4:	900f883a 	mov	r7,r18
10005ac8:	9809883a 	mov	r4,r19
10005acc:	880b883a 	mov	r5,r17
10005ad0:	000da580 	call	1000da58 <__eqdf2>
10005ad4:	103f361e 	bne	r2,zero,100057b0 <_dtoa_r+0x648>
10005ad8:	b580004c 	andi	r22,r22,1
10005adc:	b03f3426 	beq	r22,zero,100057b0 <_dtoa_r+0x648>
10005ae0:	ba3fffc3 	ldbu	r8,-1(r23)
10005ae4:	d9000317 	ldw	r4,12(sp)
10005ae8:	00000306 	br	10005af8 <_dtoa_r+0x990>
10005aec:	20c30e26 	beq	r4,r3,10006728 <_dtoa_r+0x15c0>
10005af0:	1a3fffc3 	ldbu	r8,-1(r3)
10005af4:	182f883a 	mov	r23,r3
10005af8:	40803fcc 	andi	r2,r8,255
10005afc:	1080201c 	xori	r2,r2,128
10005b00:	10bfe004 	addi	r2,r2,-128
10005b04:	10800e60 	cmpeqi	r2,r2,57
10005b08:	b8ffffc4 	addi	r3,r23,-1
10005b0c:	103ff71e 	bne	r2,zero,10005aec <_dtoa_r+0x984>
10005b10:	42000044 	addi	r8,r8,1
10005b14:	1a000005 	stb	r8,0(r3)
10005b18:	003f2506 	br	100057b0 <_dtoa_r+0x648>
10005b1c:	d8c00717 	ldw	r3,28(sp)
10005b20:	1800e426 	beq	r3,zero,10005eb4 <_dtoa_r+0xd4c>
10005b24:	d8c00217 	ldw	r3,8(sp)
10005b28:	18c00088 	cmpgei	r3,r3,2
10005b2c:	1801ec26 	beq	r3,zero,100062e0 <_dtoa_r+0x1178>
10005b30:	d8800617 	ldw	r2,24(sp)
10005b34:	14bfffc4 	addi	r18,r2,-1
10005b38:	d8800817 	ldw	r2,32(sp)
10005b3c:	1481c50e 	bge	r2,r18,10006254 <_dtoa_r+0x10ec>
10005b40:	d8800817 	ldw	r2,32(sp)
10005b44:	dc800815 	stw	r18,32(sp)
10005b48:	9085c83a 	sub	r2,r18,r2
10005b4c:	b0ad883a 	add	r22,r22,r2
10005b50:	0025883a 	mov	r18,zero
10005b54:	d8800617 	ldw	r2,24(sp)
10005b58:	10024c16 	blt	r2,zero,1000648c <_dtoa_r+0x1324>
10005b5c:	d8c00517 	ldw	r3,20(sp)
10005b60:	a0a9883a 	add	r20,r20,r2
10005b64:	1885883a 	add	r2,r3,r2
10005b68:	1827883a 	mov	r19,r3
10005b6c:	d8800515 	stw	r2,20(sp)
10005b70:	01400044 	movi	r5,1
10005b74:	e009883a 	mov	r4,fp
10005b78:	00089440 	call	10008944 <__i2b>
10005b7c:	1021883a 	mov	r16,r2
10005b80:	04c0080e 	bge	zero,r19,10005ba4 <_dtoa_r+0xa3c>
10005b84:	0500070e 	bge	zero,r20,10005ba4 <_dtoa_r+0xa3c>
10005b88:	9805883a 	mov	r2,r19
10005b8c:	a4c1a916 	blt	r20,r19,10006234 <_dtoa_r+0x10cc>
10005b90:	d8c00517 	ldw	r3,20(sp)
10005b94:	98a7c83a 	sub	r19,r19,r2
10005b98:	a0a9c83a 	sub	r20,r20,r2
10005b9c:	1887c83a 	sub	r3,r3,r2
10005ba0:	d8c00515 	stw	r3,20(sp)
10005ba4:	d8800817 	ldw	r2,32(sp)
10005ba8:	10001426 	beq	r2,zero,10005bfc <_dtoa_r+0xa94>
10005bac:	d8800717 	ldw	r2,28(sp)
10005bb0:	10017226 	beq	r2,zero,1000617c <_dtoa_r+0x1014>
10005bb4:	04800e0e 	bge	zero,r18,10005bf0 <_dtoa_r+0xa88>
10005bb8:	800b883a 	mov	r5,r16
10005bbc:	900d883a 	mov	r6,r18
10005bc0:	e009883a 	mov	r4,fp
10005bc4:	0008b640 	call	10008b64 <__pow5mult>
10005bc8:	a80d883a 	mov	r6,r21
10005bcc:	100b883a 	mov	r5,r2
10005bd0:	e009883a 	mov	r4,fp
10005bd4:	1021883a 	mov	r16,r2
10005bd8:	00089780 	call	10008978 <__multiply>
10005bdc:	102f883a 	mov	r23,r2
10005be0:	a80b883a 	mov	r5,r21
10005be4:	e009883a 	mov	r4,fp
10005be8:	00085e80 	call	100085e8 <_Bfree>
10005bec:	b82b883a 	mov	r21,r23
10005bf0:	d8800817 	ldw	r2,32(sp)
10005bf4:	148dc83a 	sub	r6,r2,r18
10005bf8:	3001611e 	bne	r6,zero,10006180 <_dtoa_r+0x1018>
10005bfc:	01400044 	movi	r5,1
10005c00:	e009883a 	mov	r4,fp
10005c04:	00089440 	call	10008944 <__i2b>
10005c08:	1025883a 	mov	r18,r2
10005c0c:	0580bc16 	blt	zero,r22,10005f00 <_dtoa_r+0xd98>
10005c10:	d8800217 	ldw	r2,8(sp)
10005c14:	10800088 	cmpgei	r2,r2,2
10005c18:	10016526 	beq	r2,zero,100061b0 <_dtoa_r+0x1048>
10005c1c:	0023883a 	mov	r17,zero
10005c20:	00800044 	movi	r2,1
10005c24:	b000bf1e 	bne	r22,zero,10005f24 <_dtoa_r+0xdbc>
10005c28:	1505883a 	add	r2,r2,r20
10005c2c:	108007cc 	andi	r2,r2,31
10005c30:	1000aa26 	beq	r2,zero,10005edc <_dtoa_r+0xd74>
10005c34:	00c00804 	movi	r3,32
10005c38:	1887c83a 	sub	r3,r3,r2
10005c3c:	19000150 	cmplti	r4,r3,5
10005c40:	2002f61e 	bne	r4,zero,1000681c <_dtoa_r+0x16b4>
10005c44:	00c00704 	movi	r3,28
10005c48:	1885c83a 	sub	r2,r3,r2
10005c4c:	d8c00517 	ldw	r3,20(sp)
10005c50:	98a7883a 	add	r19,r19,r2
10005c54:	a0a9883a 	add	r20,r20,r2
10005c58:	1887883a 	add	r3,r3,r2
10005c5c:	d8c00515 	stw	r3,20(sp)
10005c60:	d8800517 	ldw	r2,20(sp)
10005c64:	00809716 	blt	zero,r2,10005ec4 <_dtoa_r+0xd5c>
10005c68:	0500050e 	bge	zero,r20,10005c80 <_dtoa_r+0xb18>
10005c6c:	900b883a 	mov	r5,r18
10005c70:	a00d883a 	mov	r6,r20
10005c74:	e009883a 	mov	r4,fp
10005c78:	0008c8c0 	call	10008c8c <__lshift>
10005c7c:	1025883a 	mov	r18,r2
10005c80:	d8800917 	ldw	r2,36(sp)
10005c84:	10012b1e 	bne	r2,zero,10006134 <_dtoa_r+0xfcc>
10005c88:	d8800617 	ldw	r2,24(sp)
10005c8c:	00810d0e 	bge	zero,r2,100060c4 <_dtoa_r+0xf5c>
10005c90:	d8800417 	ldw	r2,16(sp)
10005c94:	10800044 	addi	r2,r2,1
10005c98:	d8800415 	stw	r2,16(sp)
10005c9c:	d8800717 	ldw	r2,28(sp)
10005ca0:	1000b21e 	bne	r2,zero,10005f6c <_dtoa_r+0xe04>
10005ca4:	ddc00317 	ldw	r23,12(sp)
10005ca8:	04400044 	movi	r17,1
10005cac:	dcc00617 	ldw	r19,24(sp)
10005cb0:	00000306 	br	10005cc0 <_dtoa_r+0xb58>
10005cb4:	000860c0 	call	1000860c <__multadd>
10005cb8:	102b883a 	mov	r21,r2
10005cbc:	8c400044 	addi	r17,r17,1
10005cc0:	900b883a 	mov	r5,r18
10005cc4:	a809883a 	mov	r4,r21
10005cc8:	0004f580 	call	10004f58 <quorem>
10005ccc:	10800c04 	addi	r2,r2,48
10005cd0:	bdc00044 	addi	r23,r23,1
10005cd4:	b8bfffc5 	stb	r2,-1(r23)
10005cd8:	000f883a 	mov	r7,zero
10005cdc:	01800284 	movi	r6,10
10005ce0:	a80b883a 	mov	r5,r21
10005ce4:	e009883a 	mov	r4,fp
10005ce8:	8cfff216 	blt	r17,r19,10005cb4 <_dtoa_r+0xb4c>
10005cec:	1011883a 	mov	r8,r2
10005cf0:	0029883a 	mov	r20,zero
10005cf4:	a80b883a 	mov	r5,r21
10005cf8:	01800044 	movi	r6,1
10005cfc:	e009883a 	mov	r4,fp
10005d00:	da000115 	stw	r8,4(sp)
10005d04:	0008c8c0 	call	10008c8c <__lshift>
10005d08:	900b883a 	mov	r5,r18
10005d0c:	1009883a 	mov	r4,r2
10005d10:	102b883a 	mov	r21,r2
10005d14:	0008dc80 	call	10008dc8 <__mcmp>
10005d18:	b8ffffc3 	ldbu	r3,-1(r23)
10005d1c:	0081610e 	bge	zero,r2,100062a4 <_dtoa_r+0x113c>
10005d20:	d9400317 	ldw	r5,12(sp)
10005d24:	00000306 	br	10005d34 <_dtoa_r+0xbcc>
10005d28:	29017726 	beq	r5,r4,10006308 <_dtoa_r+0x11a0>
10005d2c:	20ffffc3 	ldbu	r3,-1(r4)
10005d30:	202f883a 	mov	r23,r4
10005d34:	18803fcc 	andi	r2,r3,255
10005d38:	1080201c 	xori	r2,r2,128
10005d3c:	10bfe004 	addi	r2,r2,-128
10005d40:	10800e60 	cmpeqi	r2,r2,57
10005d44:	b93fffc4 	addi	r4,r23,-1
10005d48:	103ff71e 	bne	r2,zero,10005d28 <_dtoa_r+0xbc0>
10005d4c:	18c00044 	addi	r3,r3,1
10005d50:	20c00005 	stb	r3,0(r4)
10005d54:	900b883a 	mov	r5,r18
10005d58:	e009883a 	mov	r4,fp
10005d5c:	00085e80 	call	100085e8 <_Bfree>
10005d60:	803e9326 	beq	r16,zero,100057b0 <_dtoa_r+0x648>
10005d64:	a0000426 	beq	r20,zero,10005d78 <_dtoa_r+0xc10>
10005d68:	a4000326 	beq	r20,r16,10005d78 <_dtoa_r+0xc10>
10005d6c:	a00b883a 	mov	r5,r20
10005d70:	e009883a 	mov	r4,fp
10005d74:	00085e80 	call	100085e8 <_Bfree>
10005d78:	800b883a 	mov	r5,r16
10005d7c:	e009883a 	mov	r4,fp
10005d80:	00085e80 	call	100085e8 <_Bfree>
10005d84:	003e8a06 	br	100057b0 <_dtoa_r+0x648>
10005d88:	d8000915 	stw	zero,36(sp)
10005d8c:	a0003616 	blt	r20,zero,10005e68 <_dtoa_r+0xd00>
10005d90:	d8000515 	stw	zero,20(sp)
10005d94:	d8c00217 	ldw	r3,8(sp)
10005d98:	dd800415 	stw	r22,16(sp)
10005d9c:	d8000815 	stw	zero,32(sp)
10005da0:	188002a8 	cmpgeui	r2,r3,10
10005da4:	a5a9883a 	add	r20,r20,r22
10005da8:	103d9726 	beq	r2,zero,10005408 <_dtoa_r+0x2a0>
10005dac:	00800044 	movi	r2,1
10005db0:	d8800715 	stw	r2,28(sp)
10005db4:	00bfffc4 	movi	r2,-1
10005db8:	04bfffc4 	movi	r18,-1
10005dbc:	04000044 	movi	r16,1
10005dc0:	d8000215 	stw	zero,8(sp)
10005dc4:	d8800615 	stw	r2,24(sp)
10005dc8:	d8001e15 	stw	zero,120(sp)
10005dcc:	d8800617 	ldw	r2,24(sp)
10005dd0:	e0001115 	stw	zero,68(fp)
10005dd4:	000b883a 	mov	r5,zero
10005dd8:	d8800b15 	stw	r2,44(sp)
10005ddc:	003daa06 	br	10005488 <_dtoa_r+0x320>
10005de0:	18800160 	cmpeqi	r2,r3,5
10005de4:	00c00044 	movi	r3,1
10005de8:	d8c00715 	stw	r3,28(sp)
10005dec:	10000d26 	beq	r2,zero,10005e24 <_dtoa_r+0xcbc>
10005df0:	d8801e17 	ldw	r2,120(sp)
10005df4:	d8c00417 	ldw	r3,16(sp)
10005df8:	10c5883a 	add	r2,r2,r3
10005dfc:	d8800b15 	stw	r2,44(sp)
10005e00:	10800044 	addi	r2,r2,1
10005e04:	d8800615 	stw	r2,24(sp)
10005e08:	100d883a 	mov	r6,r2
10005e0c:	00bd9216 	blt	zero,r2,10005458 <_dtoa_r+0x2f0>
10005e10:	01800044 	movi	r6,1
10005e14:	003d9006 	br	10005458 <_dtoa_r+0x2f0>
10005e18:	188000a0 	cmpeqi	r2,r3,2
10005e1c:	d8000715 	stw	zero,28(sp)
10005e20:	103d881e 	bne	r2,zero,10005444 <_dtoa_r+0x2dc>
10005e24:	e0001115 	stw	zero,68(fp)
10005e28:	000b883a 	mov	r5,zero
10005e2c:	e009883a 	mov	r4,fp
10005e30:	00085440 	call	10008544 <_Balloc>
10005e34:	d8800315 	stw	r2,12(sp)
10005e38:	e0801015 	stw	r2,64(fp)
10005e3c:	00bfffc4 	movi	r2,-1
10005e40:	d8800b15 	stw	r2,44(sp)
10005e44:	00800044 	movi	r2,1
10005e48:	d8800715 	stw	r2,28(sp)
10005e4c:	00bfffc4 	movi	r2,-1
10005e50:	d8001e15 	stw	zero,120(sp)
10005e54:	d8800615 	stw	r2,24(sp)
10005e58:	003e8f06 	br	10005898 <_dtoa_r+0x730>
10005e5c:	00800044 	movi	r2,1
10005e60:	d8800915 	stw	r2,36(sp)
10005e64:	a03d5c0e 	bge	r20,zero,100053d8 <_dtoa_r+0x270>
10005e68:	04800044 	movi	r18,1
10005e6c:	9405c83a 	sub	r2,r18,r16
10005e70:	d8800515 	stw	r2,20(sp)
10005e74:	0029883a 	mov	r20,zero
10005e78:	003d5806 	br	100053dc <_dtoa_r+0x274>
10005e7c:	b009883a 	mov	r4,r22
10005e80:	000ed840 	call	1000ed84 <__floatsidf>
10005e84:	a00d883a 	mov	r6,r20
10005e88:	980f883a 	mov	r7,r19
10005e8c:	1009883a 	mov	r4,r2
10005e90:	180b883a 	mov	r5,r3
10005e94:	000da580 	call	1000da58 <__eqdf2>
10005e98:	103d3e26 	beq	r2,zero,10005394 <_dtoa_r+0x22c>
10005e9c:	b5bfffc4 	addi	r22,r22,-1
10005ea0:	003d3c06 	br	10005394 <_dtoa_r+0x22c>
10005ea4:	00840074 	movhi	r2,4097
10005ea8:	10869b04 	addi	r2,r2,6764
10005eac:	d8800315 	stw	r2,12(sp)
10005eb0:	003cdf06 	br	10005230 <_dtoa_r+0xc8>
10005eb4:	dc800817 	ldw	r18,32(sp)
10005eb8:	dcc00517 	ldw	r19,20(sp)
10005ebc:	0021883a 	mov	r16,zero
10005ec0:	003f2f06 	br	10005b80 <_dtoa_r+0xa18>
10005ec4:	a80b883a 	mov	r5,r21
10005ec8:	100d883a 	mov	r6,r2
10005ecc:	e009883a 	mov	r4,fp
10005ed0:	0008c8c0 	call	10008c8c <__lshift>
10005ed4:	102b883a 	mov	r21,r2
10005ed8:	003f6306 	br	10005c68 <_dtoa_r+0xb00>
10005edc:	00800704 	movi	r2,28
10005ee0:	003f5a06 	br	10005c4c <_dtoa_r+0xae4>
10005ee4:	01000804 	movi	r4,32
10005ee8:	2089c83a 	sub	r4,r4,r2
10005eec:	d8800117 	ldw	r2,4(sp)
10005ef0:	1108983a 	sll	r4,r2,r4
10005ef4:	003cf306 	br	100052c4 <_dtoa_r+0x15c>
10005ef8:	04000044 	movi	r16,1
10005efc:	003d4706 	br	1000541c <_dtoa_r+0x2b4>
10005f00:	b00d883a 	mov	r6,r22
10005f04:	100b883a 	mov	r5,r2
10005f08:	e009883a 	mov	r4,fp
10005f0c:	0008b640 	call	10008b64 <__pow5mult>
10005f10:	1025883a 	mov	r18,r2
10005f14:	d8800217 	ldw	r2,8(sp)
10005f18:	10800090 	cmplti	r2,r2,2
10005f1c:	10012f1e 	bne	r2,zero,100063dc <_dtoa_r+0x1274>
10005f20:	0023883a 	mov	r17,zero
10005f24:	90800417 	ldw	r2,16(r18)
10005f28:	10800104 	addi	r2,r2,4
10005f2c:	100490ba 	slli	r2,r2,2
10005f30:	9085883a 	add	r2,r18,r2
10005f34:	11000017 	ldw	r4,0(r2)
10005f38:	00088300 	call	10008830 <__hi0bits>
10005f3c:	00c00804 	movi	r3,32
10005f40:	1885c83a 	sub	r2,r3,r2
10005f44:	003f3806 	br	10005c28 <_dtoa_r+0xac0>
10005f48:	800b883a 	mov	r5,r16
10005f4c:	000f883a 	mov	r7,zero
10005f50:	01800284 	movi	r6,10
10005f54:	e009883a 	mov	r4,fp
10005f58:	000860c0 	call	1000860c <__multadd>
10005f5c:	1021883a 	mov	r16,r2
10005f60:	d8800b17 	ldw	r2,44(sp)
10005f64:	00821b0e 	bge	zero,r2,100067d4 <_dtoa_r+0x166c>
10005f68:	d8800615 	stw	r2,24(sp)
10005f6c:	04c0b316 	blt	zero,r19,1000623c <_dtoa_r+0x10d4>
10005f70:	8801341e 	bne	r17,zero,10006444 <_dtoa_r+0x12dc>
10005f74:	8027883a 	mov	r19,r16
10005f78:	dc400317 	ldw	r17,12(sp)
10005f7c:	d8c00617 	ldw	r3,24(sp)
10005f80:	d8800117 	ldw	r2,4(sp)
10005f84:	8dffffc4 	addi	r23,r17,-1
10005f88:	b8c7883a 	add	r3,r23,r3
10005f8c:	d8c00615 	stw	r3,24(sp)
10005f90:	d8c00217 	ldw	r3,8(sp)
10005f94:	1080004c 	andi	r2,r2,1
10005f98:	d8800815 	stw	r2,32(sp)
10005f9c:	10c4b03a 	or	r2,r2,r3
10005fa0:	d8800715 	stw	r2,28(sp)
10005fa4:	00002c06 	br	10006058 <_dtoa_r+0xef0>
10005fa8:	b80b883a 	mov	r5,r23
10005fac:	a809883a 	mov	r4,r21
10005fb0:	da000515 	stw	r8,20(sp)
10005fb4:	0008dc80 	call	10008dc8 <__mcmp>
10005fb8:	b80b883a 	mov	r5,r23
10005fbc:	e009883a 	mov	r4,fp
10005fc0:	d8800115 	stw	r2,4(sp)
10005fc4:	00085e80 	call	100085e8 <_Bfree>
10005fc8:	d8800117 	ldw	r2,4(sp)
10005fcc:	da000517 	ldw	r8,20(sp)
10005fd0:	1000021e 	bne	r2,zero,10005fdc <_dtoa_r+0xe74>
10005fd4:	d8c00717 	ldw	r3,28(sp)
10005fd8:	1801f226 	beq	r3,zero,100067a4 <_dtoa_r+0x163c>
10005fdc:	8dc00044 	addi	r23,r17,1
10005fe0:	a0010516 	blt	r20,zero,100063f8 <_dtoa_r+0x1290>
10005fe4:	d8c00217 	ldw	r3,8(sp)
10005fe8:	a0e8b03a 	or	r20,r20,r3
10005fec:	d8c00817 	ldw	r3,32(sp)
10005ff0:	1d28b03a 	or	r20,r3,r20
10005ff4:	a0010026 	beq	r20,zero,100063f8 <_dtoa_r+0x1290>
10005ff8:	00812816 	blt	zero,r2,1000649c <_dtoa_r+0x1334>
10005ffc:	d8800617 	ldw	r2,24(sp)
10006000:	8a000005 	stb	r8,0(r17)
10006004:	14412926 	beq	r2,r17,100064ac <_dtoa_r+0x1344>
10006008:	a80b883a 	mov	r5,r21
1000600c:	000f883a 	mov	r7,zero
10006010:	01800284 	movi	r6,10
10006014:	e009883a 	mov	r4,fp
10006018:	000860c0 	call	1000860c <__multadd>
1000601c:	102b883a 	mov	r21,r2
10006020:	000f883a 	mov	r7,zero
10006024:	01800284 	movi	r6,10
10006028:	800b883a 	mov	r5,r16
1000602c:	e009883a 	mov	r4,fp
10006030:	84c02026 	beq	r16,r19,100060b4 <_dtoa_r+0xf4c>
10006034:	000860c0 	call	1000860c <__multadd>
10006038:	980b883a 	mov	r5,r19
1000603c:	000f883a 	mov	r7,zero
10006040:	01800284 	movi	r6,10
10006044:	e009883a 	mov	r4,fp
10006048:	1021883a 	mov	r16,r2
1000604c:	000860c0 	call	1000860c <__multadd>
10006050:	1027883a 	mov	r19,r2
10006054:	b823883a 	mov	r17,r23
10006058:	900b883a 	mov	r5,r18
1000605c:	a809883a 	mov	r4,r21
10006060:	0004f580 	call	10004f58 <quorem>
10006064:	800b883a 	mov	r5,r16
10006068:	a809883a 	mov	r4,r21
1000606c:	102d883a 	mov	r22,r2
10006070:	0008dc80 	call	10008dc8 <__mcmp>
10006074:	980d883a 	mov	r6,r19
10006078:	900b883a 	mov	r5,r18
1000607c:	e009883a 	mov	r4,fp
10006080:	1029883a 	mov	r20,r2
10006084:	0008e200 	call	10008e20 <__mdiff>
10006088:	102f883a 	mov	r23,r2
1000608c:	10800317 	ldw	r2,12(r2)
10006090:	b2000c04 	addi	r8,r22,48
10006094:	103fc426 	beq	r2,zero,10005fa8 <_dtoa_r+0xe40>
10006098:	b80b883a 	mov	r5,r23
1000609c:	e009883a 	mov	r4,fp
100060a0:	da000115 	stw	r8,4(sp)
100060a4:	00085e80 	call	100085e8 <_Bfree>
100060a8:	00800044 	movi	r2,1
100060ac:	da000117 	ldw	r8,4(sp)
100060b0:	003fca06 	br	10005fdc <_dtoa_r+0xe74>
100060b4:	000860c0 	call	1000860c <__multadd>
100060b8:	1021883a 	mov	r16,r2
100060bc:	1027883a 	mov	r19,r2
100060c0:	003fe406 	br	10006054 <_dtoa_r+0xeec>
100060c4:	d8800217 	ldw	r2,8(sp)
100060c8:	108000d0 	cmplti	r2,r2,3
100060cc:	10004b1e 	bne	r2,zero,100061fc <_dtoa_r+0x1094>
100060d0:	d8800617 	ldw	r2,24(sp)
100060d4:	103e0d1e 	bne	r2,zero,1000590c <_dtoa_r+0x7a4>
100060d8:	900b883a 	mov	r5,r18
100060dc:	e009883a 	mov	r4,fp
100060e0:	000f883a 	mov	r7,zero
100060e4:	01800144 	movi	r6,5
100060e8:	000860c0 	call	1000860c <__multadd>
100060ec:	100b883a 	mov	r5,r2
100060f0:	a809883a 	mov	r4,r21
100060f4:	1025883a 	mov	r18,r2
100060f8:	0008dc80 	call	10008dc8 <__mcmp>
100060fc:	00be030e 	bge	zero,r2,1000590c <_dtoa_r+0x7a4>
10006100:	d8c00317 	ldw	r3,12(sp)
10006104:	00800c44 	movi	r2,49
10006108:	18800005 	stb	r2,0(r3)
1000610c:	d8800417 	ldw	r2,16(sp)
10006110:	1dc00044 	addi	r23,r3,1
10006114:	14400044 	addi	r17,r2,1
10006118:	900b883a 	mov	r5,r18
1000611c:	e009883a 	mov	r4,fp
10006120:	00085e80 	call	100085e8 <_Bfree>
10006124:	88800044 	addi	r2,r17,1
10006128:	d8800415 	stw	r2,16(sp)
1000612c:	803f121e 	bne	r16,zero,10005d78 <_dtoa_r+0xc10>
10006130:	003d9f06 	br	100057b0 <_dtoa_r+0x648>
10006134:	900b883a 	mov	r5,r18
10006138:	a809883a 	mov	r4,r21
1000613c:	0008dc80 	call	10008dc8 <__mcmp>
10006140:	103ed10e 	bge	r2,zero,10005c88 <_dtoa_r+0xb20>
10006144:	a80b883a 	mov	r5,r21
10006148:	000f883a 	mov	r7,zero
1000614c:	01800284 	movi	r6,10
10006150:	e009883a 	mov	r4,fp
10006154:	000860c0 	call	1000860c <__multadd>
10006158:	102b883a 	mov	r21,r2
1000615c:	d8800417 	ldw	r2,16(sp)
10006160:	153fffc4 	addi	r20,r2,-1
10006164:	d8800717 	ldw	r2,28(sp)
10006168:	103f771e 	bne	r2,zero,10005f48 <_dtoa_r+0xde0>
1000616c:	d8800b17 	ldw	r2,44(sp)
10006170:	0081910e 	bge	zero,r2,100067b8 <_dtoa_r+0x1650>
10006174:	d8800615 	stw	r2,24(sp)
10006178:	003eca06 	br	10005ca4 <_dtoa_r+0xb3c>
1000617c:	d9800817 	ldw	r6,32(sp)
10006180:	a80b883a 	mov	r5,r21
10006184:	e009883a 	mov	r4,fp
10006188:	0008b640 	call	10008b64 <__pow5mult>
1000618c:	102b883a 	mov	r21,r2
10006190:	003e9a06 	br	10005bfc <_dtoa_r+0xa94>
10006194:	00840074 	movhi	r2,4097
10006198:	1007883a 	mov	r3,r2
1000619c:	18c6a404 	addi	r3,r3,6800
100061a0:	00840074 	movhi	r2,4097
100061a4:	d8c00315 	stw	r3,12(sp)
100061a8:	1086a4c4 	addi	r2,r2,6803
100061ac:	003da506 	br	10005844 <_dtoa_r+0x6dc>
100061b0:	d8800117 	ldw	r2,4(sp)
100061b4:	103e991e 	bne	r2,zero,10005c1c <_dtoa_r+0xab4>
100061b8:	00800434 	movhi	r2,16
100061bc:	10bfffc4 	addi	r2,r2,-1
100061c0:	8884703a 	and	r2,r17,r2
100061c4:	103e951e 	bne	r2,zero,10005c1c <_dtoa_r+0xab4>
100061c8:	8c5ffc2c 	andhi	r17,r17,32752
100061cc:	883e9326 	beq	r17,zero,10005c1c <_dtoa_r+0xab4>
100061d0:	d8800517 	ldw	r2,20(sp)
100061d4:	a5000044 	addi	r20,r20,1
100061d8:	04400044 	movi	r17,1
100061dc:	10800044 	addi	r2,r2,1
100061e0:	d8800515 	stw	r2,20(sp)
100061e4:	003e8e06 	br	10005c20 <_dtoa_r+0xab8>
100061e8:	00800044 	movi	r2,1
100061ec:	04800044 	movi	r18,1
100061f0:	d8800615 	stw	r2,24(sp)
100061f4:	d8801e15 	stw	r2,120(sp)
100061f8:	003ef406 	br	10005dcc <_dtoa_r+0xc64>
100061fc:	d8800417 	ldw	r2,16(sp)
10006200:	10800044 	addi	r2,r2,1
10006204:	d8800415 	stw	r2,16(sp)
10006208:	d8800717 	ldw	r2,28(sp)
1000620c:	103f571e 	bne	r2,zero,10005f6c <_dtoa_r+0xe04>
10006210:	900b883a 	mov	r5,r18
10006214:	a809883a 	mov	r4,r21
10006218:	0004f580 	call	10004f58 <quorem>
1000621c:	12000c04 	addi	r8,r2,48
10006220:	d8800317 	ldw	r2,12(sp)
10006224:	0029883a 	mov	r20,zero
10006228:	15c00044 	addi	r23,r2,1
1000622c:	12000005 	stb	r8,0(r2)
10006230:	003eb006 	br	10005cf4 <_dtoa_r+0xb8c>
10006234:	a005883a 	mov	r2,r20
10006238:	003e5506 	br	10005b90 <_dtoa_r+0xa28>
1000623c:	800b883a 	mov	r5,r16
10006240:	980d883a 	mov	r6,r19
10006244:	e009883a 	mov	r4,fp
10006248:	0008c8c0 	call	10008c8c <__lshift>
1000624c:	1021883a 	mov	r16,r2
10006250:	003f4706 	br	10005f70 <_dtoa_r+0xe08>
10006254:	14a5c83a 	sub	r18,r2,r18
10006258:	003e3e06 	br	10005b54 <_dtoa_r+0x9ec>
1000625c:	00840074 	movhi	r2,4097
10006260:	1086b504 	addi	r2,r2,6868
10006264:	11800817 	ldw	r6,32(r2)
10006268:	11c00917 	ldw	r7,36(r2)
1000626c:	d9000117 	ldw	r4,4(sp)
10006270:	880b883a 	mov	r5,r17
10006274:	da400e15 	stw	r9,56(sp)
10006278:	da800d15 	stw	r10,52(sp)
1000627c:	000d1b00 	call	1000d1b0 <__divdf3>
10006280:	d8800c15 	stw	r2,48(sp)
10006284:	1827883a 	mov	r19,r3
10006288:	bdc003cc 	andi	r23,r23,15
1000628c:	040000c4 	movi	r16,3
10006290:	da800d17 	ldw	r10,52(sp)
10006294:	da400e17 	ldw	r9,56(sp)
10006298:	003c9206 	br	100054e4 <_dtoa_r+0x37c>
1000629c:	d8000715 	stw	zero,28(sp)
100062a0:	003ed306 	br	10005df0 <_dtoa_r+0xc88>
100062a4:	1000031e 	bne	r2,zero,100062b4 <_dtoa_r+0x114c>
100062a8:	da000117 	ldw	r8,4(sp)
100062ac:	4200004c 	andi	r8,r8,1
100062b0:	403e9b1e 	bne	r8,zero,10005d20 <_dtoa_r+0xbb8>
100062b4:	1805883a 	mov	r2,r3
100062b8:	00000206 	br	100062c4 <_dtoa_r+0x115c>
100062bc:	b8bfff83 	ldbu	r2,-2(r23)
100062c0:	182f883a 	mov	r23,r3
100062c4:	10803fcc 	andi	r2,r2,255
100062c8:	1080201c 	xori	r2,r2,128
100062cc:	10bfe004 	addi	r2,r2,-128
100062d0:	10800c18 	cmpnei	r2,r2,48
100062d4:	b8ffffc4 	addi	r3,r23,-1
100062d8:	103ff826 	beq	r2,zero,100062bc <_dtoa_r+0x1154>
100062dc:	003e9d06 	br	10005d54 <_dtoa_r+0xbec>
100062e0:	d8c00a17 	ldw	r3,40(sp)
100062e4:	1800bc26 	beq	r3,zero,100065d8 <_dtoa_r+0x1470>
100062e8:	d8c00517 	ldw	r3,20(sp)
100062ec:	10810cc4 	addi	r2,r2,1075
100062f0:	a0a9883a 	add	r20,r20,r2
100062f4:	1885883a 	add	r2,r3,r2
100062f8:	1827883a 	mov	r19,r3
100062fc:	dc800817 	ldw	r18,32(sp)
10006300:	d8800515 	stw	r2,20(sp)
10006304:	003e1a06 	br	10005b70 <_dtoa_r+0xa08>
10006308:	d8c00317 	ldw	r3,12(sp)
1000630c:	00800c44 	movi	r2,49
10006310:	18800005 	stb	r2,0(r3)
10006314:	d8800417 	ldw	r2,16(sp)
10006318:	10800044 	addi	r2,r2,1
1000631c:	d8800415 	stw	r2,16(sp)
10006320:	003e8c06 	br	10005d54 <_dtoa_r+0xbec>
10006324:	8009883a 	mov	r4,r16
10006328:	000ed840 	call	1000ed84 <__floatsidf>
1000632c:	900d883a 	mov	r6,r18
10006330:	980f883a 	mov	r7,r19
10006334:	1009883a 	mov	r4,r2
10006338:	180b883a 	mov	r5,r3
1000633c:	000dcb80 	call	1000dcb8 <__muldf3>
10006340:	000d883a 	mov	r6,zero
10006344:	01d00734 	movhi	r7,16412
10006348:	1009883a 	mov	r4,r2
1000634c:	180b883a 	mov	r5,r3
10006350:	000c8100 	call	1000c810 <__adddf3>
10006354:	d8800c15 	stw	r2,48(sp)
10006358:	00bf3034 	movhi	r2,64704
1000635c:	1885883a 	add	r2,r3,r2
10006360:	d8800d15 	stw	r2,52(sp)
10006364:	9009883a 	mov	r4,r18
10006368:	980b883a 	mov	r5,r19
1000636c:	000d883a 	mov	r6,zero
10006370:	01d00534 	movhi	r7,16404
10006374:	000e3440 	call	1000e344 <__subdf3>
10006378:	ddc00c17 	ldw	r23,48(sp)
1000637c:	dcc00d17 	ldw	r19,52(sp)
10006380:	1009883a 	mov	r4,r2
10006384:	b80d883a 	mov	r6,r23
10006388:	980f883a 	mov	r7,r19
1000638c:	180b883a 	mov	r5,r3
10006390:	1025883a 	mov	r18,r2
10006394:	1821883a 	mov	r16,r3
10006398:	000dad80 	call	1000dad8 <__gedf2>
1000639c:	0080ee16 	blt	zero,r2,10006758 <_dtoa_r+0x15f0>
100063a0:	99e0003c 	xorhi	r7,r19,32768
100063a4:	b80d883a 	mov	r6,r23
100063a8:	9009883a 	mov	r4,r18
100063ac:	800b883a 	mov	r5,r16
100063b0:	000dbc80 	call	1000dbc8 <__ledf2>
100063b4:	103d380e 	bge	r2,zero,10005898 <_dtoa_r+0x730>
100063b8:	0025883a 	mov	r18,zero
100063bc:	0021883a 	mov	r16,zero
100063c0:	003d5206 	br	1000590c <_dtoa_r+0x7a4>
100063c4:	d8800417 	ldw	r2,16(sp)
100063c8:	1000ad1e 	bne	r2,zero,10006680 <_dtoa_r+0x1518>
100063cc:	dc800117 	ldw	r18,4(sp)
100063d0:	8827883a 	mov	r19,r17
100063d4:	04000084 	movi	r16,2
100063d8:	003c5b06 	br	10005548 <_dtoa_r+0x3e0>
100063dc:	d8800117 	ldw	r2,4(sp)
100063e0:	103ecf1e 	bne	r2,zero,10005f20 <_dtoa_r+0xdb8>
100063e4:	00800434 	movhi	r2,16
100063e8:	10bfffc4 	addi	r2,r2,-1
100063ec:	8884703a 	and	r2,r17,r2
100063f0:	103f7526 	beq	r2,zero,100061c8 <_dtoa_r+0x1060>
100063f4:	003eca06 	br	10005f20 <_dtoa_r+0xdb8>
100063f8:	00800e0e 	bge	zero,r2,10006434 <_dtoa_r+0x12cc>
100063fc:	a80b883a 	mov	r5,r21
10006400:	01800044 	movi	r6,1
10006404:	e009883a 	mov	r4,fp
10006408:	da000115 	stw	r8,4(sp)
1000640c:	0008c8c0 	call	10008c8c <__lshift>
10006410:	900b883a 	mov	r5,r18
10006414:	1009883a 	mov	r4,r2
10006418:	102b883a 	mov	r21,r2
1000641c:	0008dc80 	call	10008dc8 <__mcmp>
10006420:	da000117 	ldw	r8,4(sp)
10006424:	0080d50e 	bge	zero,r2,1000677c <_dtoa_r+0x1614>
10006428:	42000e60 	cmpeqi	r8,r8,57
1000642c:	4000c31e 	bne	r8,zero,1000673c <_dtoa_r+0x15d4>
10006430:	b2000c44 	addi	r8,r22,49
10006434:	8029883a 	mov	r20,r16
10006438:	8a000005 	stb	r8,0(r17)
1000643c:	9821883a 	mov	r16,r19
10006440:	003e4406 	br	10005d54 <_dtoa_r+0xbec>
10006444:	81400117 	ldw	r5,4(r16)
10006448:	e009883a 	mov	r4,fp
1000644c:	00085440 	call	10008544 <_Balloc>
10006450:	81800417 	ldw	r6,16(r16)
10006454:	81400304 	addi	r5,r16,12
10006458:	11000304 	addi	r4,r2,12
1000645c:	31800084 	addi	r6,r6,2
10006460:	300c90ba 	slli	r6,r6,2
10006464:	1023883a 	mov	r17,r2
10006468:	00028e40 	call	100028e4 <memcpy>
1000646c:	01800044 	movi	r6,1
10006470:	880b883a 	mov	r5,r17
10006474:	e009883a 	mov	r4,fp
10006478:	0008c8c0 	call	10008c8c <__lshift>
1000647c:	1027883a 	mov	r19,r2
10006480:	003ebd06 	br	10005f78 <_dtoa_r+0xe10>
10006484:	dd400117 	ldw	r21,4(sp)
10006488:	003cc906 	br	100057b0 <_dtoa_r+0x648>
1000648c:	d8800517 	ldw	r2,20(sp)
10006490:	d8c00617 	ldw	r3,24(sp)
10006494:	10e7c83a 	sub	r19,r2,r3
10006498:	003db506 	br	10005b70 <_dtoa_r+0xa08>
1000649c:	40800e58 	cmpnei	r2,r8,57
100064a0:	1000a626 	beq	r2,zero,1000673c <_dtoa_r+0x15d4>
100064a4:	42000044 	addi	r8,r8,1
100064a8:	003fe206 	br	10006434 <_dtoa_r+0x12cc>
100064ac:	8029883a 	mov	r20,r16
100064b0:	9821883a 	mov	r16,r19
100064b4:	003e0f06 	br	10005cf4 <_dtoa_r+0xb8c>
100064b8:	d9000c17 	ldw	r4,48(sp)
100064bc:	d9400d17 	ldw	r5,52(sp)
100064c0:	da401015 	stw	r9,64(sp)
100064c4:	000dcb80 	call	1000dcb8 <__muldf3>
100064c8:	d9000e17 	ldw	r4,56(sp)
100064cc:	d8c00d15 	stw	r3,52(sp)
100064d0:	da401017 	ldw	r9,64(sp)
100064d4:	d8c00317 	ldw	r3,12(sp)
100064d8:	d8800c15 	stw	r2,48(sp)
100064dc:	20800058 	cmpnei	r2,r4,1
100064e0:	1a400005 	stb	r9,0(r3)
100064e4:	1907883a 	add	r3,r3,r4
100064e8:	1809883a 	mov	r4,r3
100064ec:	10001d26 	beq	r2,zero,10006564 <_dtoa_r+0x13fc>
100064f0:	8007883a 	mov	r3,r16
100064f4:	9005883a 	mov	r2,r18
100064f8:	dc400e15 	stw	r17,56(sp)
100064fc:	2021883a 	mov	r16,r4
10006500:	000d883a 	mov	r6,zero
10006504:	01d00934 	movhi	r7,16420
10006508:	1009883a 	mov	r4,r2
1000650c:	180b883a 	mov	r5,r3
10006510:	000dcb80 	call	1000dcb8 <__muldf3>
10006514:	180b883a 	mov	r5,r3
10006518:	1009883a 	mov	r4,r2
1000651c:	1825883a 	mov	r18,r3
10006520:	1023883a 	mov	r17,r2
10006524:	000ed040 	call	1000ed04 <__fixdfsi>
10006528:	1009883a 	mov	r4,r2
1000652c:	1027883a 	mov	r19,r2
10006530:	000ed840 	call	1000ed84 <__floatsidf>
10006534:	100d883a 	mov	r6,r2
10006538:	180f883a 	mov	r7,r3
1000653c:	8809883a 	mov	r4,r17
10006540:	900b883a 	mov	r5,r18
10006544:	bdc00044 	addi	r23,r23,1
10006548:	9cc00c04 	addi	r19,r19,48
1000654c:	000e3440 	call	1000e344 <__subdf3>
10006550:	bcffffc5 	stb	r19,-1(r23)
10006554:	bc3fea1e 	bne	r23,r16,10006500 <_dtoa_r+0x1398>
10006558:	dc400e17 	ldw	r17,56(sp)
1000655c:	1025883a 	mov	r18,r2
10006560:	1821883a 	mov	r16,r3
10006564:	d9000c17 	ldw	r4,48(sp)
10006568:	d9400d17 	ldw	r5,52(sp)
1000656c:	000d883a 	mov	r6,zero
10006570:	01cff834 	movhi	r7,16352
10006574:	000c8100 	call	1000c810 <__adddf3>
10006578:	100d883a 	mov	r6,r2
1000657c:	180f883a 	mov	r7,r3
10006580:	9009883a 	mov	r4,r18
10006584:	800b883a 	mov	r5,r16
10006588:	000dad80 	call	1000dad8 <__gedf2>
1000658c:	00807516 	blt	zero,r2,10006764 <_dtoa_r+0x15fc>
10006590:	d9800c17 	ldw	r6,48(sp)
10006594:	d9c00d17 	ldw	r7,52(sp)
10006598:	0009883a 	mov	r4,zero
1000659c:	014ff834 	movhi	r5,16352
100065a0:	000e3440 	call	1000e344 <__subdf3>
100065a4:	100d883a 	mov	r6,r2
100065a8:	180f883a 	mov	r7,r3
100065ac:	9009883a 	mov	r4,r18
100065b0:	800b883a 	mov	r5,r16
100065b4:	000dbc80 	call	1000dbc8 <__ledf2>
100065b8:	103cb70e 	bge	r2,zero,10005898 <_dtoa_r+0x730>
100065bc:	00000106 	br	100065c4 <_dtoa_r+0x145c>
100065c0:	182f883a 	mov	r23,r3
100065c4:	b8bfffc7 	ldb	r2,-1(r23)
100065c8:	b8ffffc4 	addi	r3,r23,-1
100065cc:	10800c20 	cmpeqi	r2,r2,48
100065d0:	103ffb1e 	bne	r2,zero,100065c0 <_dtoa_r+0x1458>
100065d4:	003c7306 	br	100057a4 <_dtoa_r+0x63c>
100065d8:	d8c01217 	ldw	r3,72(sp)
100065dc:	d9000517 	ldw	r4,20(sp)
100065e0:	00800d84 	movi	r2,54
100065e4:	10c5c83a 	sub	r2,r2,r3
100065e8:	a0a9883a 	add	r20,r20,r2
100065ec:	2085883a 	add	r2,r4,r2
100065f0:	2027883a 	mov	r19,r4
100065f4:	dc800817 	ldw	r18,32(sp)
100065f8:	d8800515 	stw	r2,20(sp)
100065fc:	003d5c06 	br	10005b70 <_dtoa_r+0xa08>
10006600:	d8800617 	ldw	r2,24(sp)
10006604:	103f4726 	beq	r2,zero,10006324 <_dtoa_r+0x11bc>
10006608:	ddc00b17 	ldw	r23,44(sp)
1000660c:	05fca20e 	bge	zero,r23,10005898 <_dtoa_r+0x730>
10006610:	980b883a 	mov	r5,r19
10006614:	000d883a 	mov	r6,zero
10006618:	01d00934 	movhi	r7,16420
1000661c:	9009883a 	mov	r4,r18
10006620:	000dcb80 	call	1000dcb8 <__muldf3>
10006624:	81000044 	addi	r4,r16,1
10006628:	1025883a 	mov	r18,r2
1000662c:	1827883a 	mov	r19,r3
10006630:	000ed840 	call	1000ed84 <__floatsidf>
10006634:	900d883a 	mov	r6,r18
10006638:	980f883a 	mov	r7,r19
1000663c:	1009883a 	mov	r4,r2
10006640:	180b883a 	mov	r5,r3
10006644:	000dcb80 	call	1000dcb8 <__muldf3>
10006648:	000d883a 	mov	r6,zero
1000664c:	01d00734 	movhi	r7,16412
10006650:	1009883a 	mov	r4,r2
10006654:	180b883a 	mov	r5,r3
10006658:	000c8100 	call	1000c810 <__adddf3>
1000665c:	d8800c15 	stw	r2,48(sp)
10006660:	d8800417 	ldw	r2,16(sp)
10006664:	ddc00e15 	stw	r23,56(sp)
10006668:	10bfffc4 	addi	r2,r2,-1
1000666c:	d8800f15 	stw	r2,60(sp)
10006670:	00bf3034 	movhi	r2,64704
10006674:	1885883a 	add	r2,r3,r2
10006678:	d8800d15 	stw	r2,52(sp)
1000667c:	003bd006 	br	100055c0 <_dtoa_r+0x458>
10006680:	d8800417 	ldw	r2,16(sp)
10006684:	d9000117 	ldw	r4,4(sp)
10006688:	880b883a 	mov	r5,r17
1000668c:	00afc83a 	sub	r23,zero,r2
10006690:	b88003cc 	andi	r2,r23,15
10006694:	100690fa 	slli	r3,r2,3
10006698:	00840074 	movhi	r2,4097
1000669c:	1086bf04 	addi	r2,r2,6908
100066a0:	10c5883a 	add	r2,r2,r3
100066a4:	11800017 	ldw	r6,0(r2)
100066a8:	11c00117 	ldw	r7,4(r2)
100066ac:	b82fd13a 	srai	r23,r23,4
100066b0:	000dcb80 	call	1000dcb8 <__muldf3>
100066b4:	1025883a 	mov	r18,r2
100066b8:	1827883a 	mov	r19,r3
100066bc:	b8004a26 	beq	r23,zero,100067e8 <_dtoa_r+0x1680>
100066c0:	02040074 	movhi	r8,4097
100066c4:	04000084 	movi	r16,2
100066c8:	4206b504 	addi	r8,r8,6868
100066cc:	dc400c15 	stw	r17,48(sp)
100066d0:	000f883a 	mov	r7,zero
100066d4:	8023883a 	mov	r17,r16
100066d8:	4021883a 	mov	r16,r8
100066dc:	b980004c 	andi	r6,r23,1
100066e0:	1009883a 	mov	r4,r2
100066e4:	b82fd07a 	srai	r23,r23,1
100066e8:	180b883a 	mov	r5,r3
100066ec:	30000526 	beq	r6,zero,10006704 <_dtoa_r+0x159c>
100066f0:	81c00117 	ldw	r7,4(r16)
100066f4:	81800017 	ldw	r6,0(r16)
100066f8:	8c400044 	addi	r17,r17,1
100066fc:	000dcb80 	call	1000dcb8 <__muldf3>
10006700:	01c00044 	movi	r7,1
10006704:	84000204 	addi	r16,r16,8
10006708:	b83ff41e 	bne	r23,zero,100066dc <_dtoa_r+0x1574>
1000670c:	39c03fcc 	andi	r7,r7,255
10006710:	8821883a 	mov	r16,r17
10006714:	dc400c17 	ldw	r17,48(sp)
10006718:	383b8b26 	beq	r7,zero,10005548 <_dtoa_r+0x3e0>
1000671c:	1025883a 	mov	r18,r2
10006720:	1827883a 	mov	r19,r3
10006724:	003b8806 	br	10005548 <_dtoa_r+0x3e0>
10006728:	d8800417 	ldw	r2,16(sp)
1000672c:	02000c44 	movi	r8,49
10006730:	10800044 	addi	r2,r2,1
10006734:	d8800415 	stw	r2,16(sp)
10006738:	003cf606 	br	10005b14 <_dtoa_r+0x9ac>
1000673c:	00800e44 	movi	r2,57
10006740:	8029883a 	mov	r20,r16
10006744:	88800005 	stb	r2,0(r17)
10006748:	9821883a 	mov	r16,r19
1000674c:	00c00e44 	movi	r3,57
10006750:	d9400317 	ldw	r5,12(sp)
10006754:	003d7706 	br	10005d34 <_dtoa_r+0xbcc>
10006758:	0025883a 	mov	r18,zero
1000675c:	0021883a 	mov	r16,zero
10006760:	003e6706 	br	10006100 <_dtoa_r+0xf98>
10006764:	d8800f17 	ldw	r2,60(sp)
10006768:	ba3fffc3 	ldbu	r8,-1(r23)
1000676c:	d9000317 	ldw	r4,12(sp)
10006770:	10800044 	addi	r2,r2,1
10006774:	d8800415 	stw	r2,16(sp)
10006778:	003cdf06 	br	10005af8 <_dtoa_r+0x990>
1000677c:	103f2d1e 	bne	r2,zero,10006434 <_dtoa_r+0x12cc>
10006780:	4080004c 	andi	r2,r8,1
10006784:	103f281e 	bne	r2,zero,10006428 <_dtoa_r+0x12c0>
10006788:	003f2a06 	br	10006434 <_dtoa_r+0x12cc>
1000678c:	d8800f17 	ldw	r2,60(sp)
10006790:	8811883a 	mov	r8,r17
10006794:	d9000317 	ldw	r4,12(sp)
10006798:	10800044 	addi	r2,r2,1
1000679c:	d8800415 	stw	r2,16(sp)
100067a0:	003cd506 	br	10005af8 <_dtoa_r+0x990>
100067a4:	40800e60 	cmpeqi	r2,r8,57
100067a8:	8dc00044 	addi	r23,r17,1
100067ac:	103fe31e 	bne	r2,zero,1000673c <_dtoa_r+0x15d4>
100067b0:	053f1f16 	blt	zero,r20,10006430 <_dtoa_r+0x12c8>
100067b4:	003f1f06 	br	10006434 <_dtoa_r+0x12cc>
100067b8:	d8800217 	ldw	r2,8(sp)
100067bc:	108000c8 	cmpgei	r2,r2,3
100067c0:	103e9326 	beq	r2,zero,10006210 <_dtoa_r+0x10a8>
100067c4:	d8800b17 	ldw	r2,44(sp)
100067c8:	dd000415 	stw	r20,16(sp)
100067cc:	d8800615 	stw	r2,24(sp)
100067d0:	003e3f06 	br	100060d0 <_dtoa_r+0xf68>
100067d4:	d8800217 	ldw	r2,8(sp)
100067d8:	108000c8 	cmpgei	r2,r2,3
100067dc:	103ff91e 	bne	r2,zero,100067c4 <_dtoa_r+0x165c>
100067e0:	d8800b17 	ldw	r2,44(sp)
100067e4:	003de006 	br	10005f68 <_dtoa_r+0xe00>
100067e8:	04000084 	movi	r16,2
100067ec:	003b5606 	br	10005548 <_dtoa_r+0x3e0>
100067f0:	d8800f17 	ldw	r2,60(sp)
100067f4:	d9000317 	ldw	r4,12(sp)
100067f8:	10800044 	addi	r2,r2,1
100067fc:	d8800415 	stw	r2,16(sp)
10006800:	003cbd06 	br	10005af8 <_dtoa_r+0x990>
10006804:	00840074 	movhi	r2,4097
10006808:	1086a504 	addi	r2,r2,6804
1000680c:	d8800315 	stw	r2,12(sp)
10006810:	003a8706 	br	10005230 <_dtoa_r+0xc8>
10006814:	000b883a 	mov	r5,zero
10006818:	003b1b06 	br	10005488 <_dtoa_r+0x320>
1000681c:	18c00120 	cmpeqi	r3,r3,4
10006820:	183d0f1e 	bne	r3,zero,10005c60 <_dtoa_r+0xaf8>
10006824:	00c00f04 	movi	r3,60
10006828:	1885c83a 	sub	r2,r3,r2
1000682c:	003d0706 	br	10005c4c <_dtoa_r+0xae4>

10006830 <__sflush_r>:
10006830:	2880030b 	ldhu	r2,12(r5)
10006834:	defffb04 	addi	sp,sp,-20
10006838:	dcc00315 	stw	r19,12(sp)
1000683c:	dc000015 	stw	r16,0(sp)
10006840:	dfc00415 	stw	ra,16(sp)
10006844:	dc800215 	stw	r18,8(sp)
10006848:	dc400115 	stw	r17,4(sp)
1000684c:	10c0020c 	andi	r3,r2,8
10006850:	2821883a 	mov	r16,r5
10006854:	2027883a 	mov	r19,r4
10006858:	18003f1e 	bne	r3,zero,10006958 <__sflush_r+0x128>
1000685c:	28c00117 	ldw	r3,4(r5)
10006860:	10820014 	ori	r2,r2,2048
10006864:	2880030d 	sth	r2,12(r5)
10006868:	00c0550e 	bge	zero,r3,100069c0 <__sflush_r+0x190>
1000686c:	82000a17 	ldw	r8,40(r16)
10006870:	40003126 	beq	r8,zero,10006938 <__sflush_r+0x108>
10006874:	9c400017 	ldw	r17,0(r19)
10006878:	1104000c 	andi	r4,r2,4096
1000687c:	98000015 	stw	zero,0(r19)
10006880:	1007883a 	mov	r3,r2
10006884:	81400717 	ldw	r5,28(r16)
10006888:	2000521e 	bne	r4,zero,100069d4 <__sflush_r+0x1a4>
1000688c:	01c00044 	movi	r7,1
10006890:	000d883a 	mov	r6,zero
10006894:	9809883a 	mov	r4,r19
10006898:	403ee83a 	callr	r8
1000689c:	10ffffd8 	cmpnei	r3,r2,-1
100068a0:	18005826 	beq	r3,zero,10006a04 <__sflush_r+0x1d4>
100068a4:	80c0030b 	ldhu	r3,12(r16)
100068a8:	82000a17 	ldw	r8,40(r16)
100068ac:	81400717 	ldw	r5,28(r16)
100068b0:	18c0010c 	andi	r3,r3,4
100068b4:	18000626 	beq	r3,zero,100068d0 <__sflush_r+0xa0>
100068b8:	81000117 	ldw	r4,4(r16)
100068bc:	80c00c17 	ldw	r3,48(r16)
100068c0:	1105c83a 	sub	r2,r2,r4
100068c4:	18000226 	beq	r3,zero,100068d0 <__sflush_r+0xa0>
100068c8:	80c00f17 	ldw	r3,60(r16)
100068cc:	10c5c83a 	sub	r2,r2,r3
100068d0:	000f883a 	mov	r7,zero
100068d4:	100d883a 	mov	r6,r2
100068d8:	9809883a 	mov	r4,r19
100068dc:	403ee83a 	callr	r8
100068e0:	10ffffd8 	cmpnei	r3,r2,-1
100068e4:	18003d1e 	bne	r3,zero,100069dc <__sflush_r+0x1ac>
100068e8:	99000017 	ldw	r4,0(r19)
100068ec:	80c0030b 	ldhu	r3,12(r16)
100068f0:	20004e26 	beq	r4,zero,10006a2c <__sflush_r+0x1fc>
100068f4:	21400760 	cmpeqi	r5,r4,29
100068f8:	2800021e 	bne	r5,zero,10006904 <__sflush_r+0xd4>
100068fc:	210005a0 	cmpeqi	r4,r4,22
10006900:	20002c26 	beq	r4,zero,100069b4 <__sflush_r+0x184>
10006904:	80800417 	ldw	r2,16(r16)
10006908:	18fdffcc 	andi	r3,r3,63487
1000690c:	80c0030d 	sth	r3,12(r16)
10006910:	80000115 	stw	zero,4(r16)
10006914:	80800015 	stw	r2,0(r16)
10006918:	81400c17 	ldw	r5,48(r16)
1000691c:	9c400015 	stw	r17,0(r19)
10006920:	28000526 	beq	r5,zero,10006938 <__sflush_r+0x108>
10006924:	80801004 	addi	r2,r16,64
10006928:	28800226 	beq	r5,r2,10006934 <__sflush_r+0x104>
1000692c:	9809883a 	mov	r4,r19
10006930:	0006f400 	call	10006f40 <_free_r>
10006934:	80000c15 	stw	zero,48(r16)
10006938:	0005883a 	mov	r2,zero
1000693c:	dfc00417 	ldw	ra,16(sp)
10006940:	dcc00317 	ldw	r19,12(sp)
10006944:	dc800217 	ldw	r18,8(sp)
10006948:	dc400117 	ldw	r17,4(sp)
1000694c:	dc000017 	ldw	r16,0(sp)
10006950:	dec00504 	addi	sp,sp,20
10006954:	f800283a 	ret
10006958:	2c800417 	ldw	r18,16(r5)
1000695c:	903ff626 	beq	r18,zero,10006938 <__sflush_r+0x108>
10006960:	2c400017 	ldw	r17,0(r5)
10006964:	108000cc 	andi	r2,r2,3
10006968:	2c800015 	stw	r18,0(r5)
1000696c:	8ca3c83a 	sub	r17,r17,r18
10006970:	1000161e 	bne	r2,zero,100069cc <__sflush_r+0x19c>
10006974:	28800517 	ldw	r2,20(r5)
10006978:	80800215 	stw	r2,8(r16)
1000697c:	04400316 	blt	zero,r17,1000698c <__sflush_r+0x15c>
10006980:	003fed06 	br	10006938 <__sflush_r+0x108>
10006984:	90a5883a 	add	r18,r18,r2
10006988:	047feb0e 	bge	zero,r17,10006938 <__sflush_r+0x108>
1000698c:	80800917 	ldw	r2,36(r16)
10006990:	81400717 	ldw	r5,28(r16)
10006994:	880f883a 	mov	r7,r17
10006998:	900d883a 	mov	r6,r18
1000699c:	9809883a 	mov	r4,r19
100069a0:	103ee83a 	callr	r2
100069a4:	88a3c83a 	sub	r17,r17,r2
100069a8:	00bff616 	blt	zero,r2,10006984 <__sflush_r+0x154>
100069ac:	80c0030b 	ldhu	r3,12(r16)
100069b0:	00bfffc4 	movi	r2,-1
100069b4:	18c01014 	ori	r3,r3,64
100069b8:	80c0030d 	sth	r3,12(r16)
100069bc:	003fdf06 	br	1000693c <__sflush_r+0x10c>
100069c0:	28c00f17 	ldw	r3,60(r5)
100069c4:	00ffa916 	blt	zero,r3,1000686c <__sflush_r+0x3c>
100069c8:	003fdb06 	br	10006938 <__sflush_r+0x108>
100069cc:	0005883a 	mov	r2,zero
100069d0:	003fe906 	br	10006978 <__sflush_r+0x148>
100069d4:	80801417 	ldw	r2,80(r16)
100069d8:	003fb506 	br	100068b0 <__sflush_r+0x80>
100069dc:	80c0030b 	ldhu	r3,12(r16)
100069e0:	81000417 	ldw	r4,16(r16)
100069e4:	80000115 	stw	zero,4(r16)
100069e8:	197dffcc 	andi	r5,r3,63487
100069ec:	8140030d 	sth	r5,12(r16)
100069f0:	81000015 	stw	r4,0(r16)
100069f4:	18c4000c 	andi	r3,r3,4096
100069f8:	183fc726 	beq	r3,zero,10006918 <__sflush_r+0xe8>
100069fc:	80801415 	stw	r2,80(r16)
10006a00:	003fc506 	br	10006918 <__sflush_r+0xe8>
10006a04:	98c00017 	ldw	r3,0(r19)
10006a08:	183fa626 	beq	r3,zero,100068a4 <__sflush_r+0x74>
10006a0c:	19000760 	cmpeqi	r4,r3,29
10006a10:	20000e1e 	bne	r4,zero,10006a4c <__sflush_r+0x21c>
10006a14:	18c00598 	cmpnei	r3,r3,22
10006a18:	18000c26 	beq	r3,zero,10006a4c <__sflush_r+0x21c>
10006a1c:	80c0030b 	ldhu	r3,12(r16)
10006a20:	18c01014 	ori	r3,r3,64
10006a24:	80c0030d 	sth	r3,12(r16)
10006a28:	003fc406 	br	1000693c <__sflush_r+0x10c>
10006a2c:	81000417 	ldw	r4,16(r16)
10006a30:	197dffcc 	andi	r5,r3,63487
10006a34:	8140030d 	sth	r5,12(r16)
10006a38:	80000115 	stw	zero,4(r16)
10006a3c:	81000015 	stw	r4,0(r16)
10006a40:	18c4000c 	andi	r3,r3,4096
10006a44:	183fb426 	beq	r3,zero,10006918 <__sflush_r+0xe8>
10006a48:	003fec06 	br	100069fc <__sflush_r+0x1cc>
10006a4c:	9c400015 	stw	r17,0(r19)
10006a50:	0005883a 	mov	r2,zero
10006a54:	003fb906 	br	1000693c <__sflush_r+0x10c>

10006a58 <_fflush_r>:
10006a58:	defffd04 	addi	sp,sp,-12
10006a5c:	dc000115 	stw	r16,4(sp)
10006a60:	dfc00215 	stw	ra,8(sp)
10006a64:	2021883a 	mov	r16,r4
10006a68:	20000226 	beq	r4,zero,10006a74 <_fflush_r+0x1c>
10006a6c:	20800e17 	ldw	r2,56(r4)
10006a70:	10000726 	beq	r2,zero,10006a90 <_fflush_r+0x38>
10006a74:	2880030f 	ldh	r2,12(r5)
10006a78:	10000a1e 	bne	r2,zero,10006aa4 <_fflush_r+0x4c>
10006a7c:	0005883a 	mov	r2,zero
10006a80:	dfc00217 	ldw	ra,8(sp)
10006a84:	dc000117 	ldw	r16,4(sp)
10006a88:	dec00304 	addi	sp,sp,12
10006a8c:	f800283a 	ret
10006a90:	d9400015 	stw	r5,0(sp)
10006a94:	0006ddc0 	call	10006ddc <__sinit>
10006a98:	d9400017 	ldw	r5,0(sp)
10006a9c:	2880030f 	ldh	r2,12(r5)
10006aa0:	103ff626 	beq	r2,zero,10006a7c <_fflush_r+0x24>
10006aa4:	8009883a 	mov	r4,r16
10006aa8:	dfc00217 	ldw	ra,8(sp)
10006aac:	dc000117 	ldw	r16,4(sp)
10006ab0:	dec00304 	addi	sp,sp,12
10006ab4:	00068301 	jmpi	10006830 <__sflush_r>

10006ab8 <fflush>:
10006ab8:	200b883a 	mov	r5,r4
10006abc:	20000326 	beq	r4,zero,10006acc <fflush+0x14>
10006ac0:	00840074 	movhi	r2,4097
10006ac4:	11106517 	ldw	r4,16788(r2)
10006ac8:	0006a581 	jmpi	10006a58 <_fflush_r>
10006acc:	00840074 	movhi	r2,4097
10006ad0:	11106417 	ldw	r4,16784(r2)
10006ad4:	01440034 	movhi	r5,4096
10006ad8:	295a9604 	addi	r5,r5,27224
10006adc:	00077a41 	jmpi	100077a4 <_fwalk_reent>

10006ae0 <__fp_lock>:
10006ae0:	0005883a 	mov	r2,zero
10006ae4:	f800283a 	ret

10006ae8 <_cleanup_r>:
10006ae8:	01440074 	movhi	r5,4097
10006aec:	296cb204 	addi	r5,r5,-19768
10006af0:	00077a41 	jmpi	100077a4 <_fwalk_reent>

10006af4 <__sinit.part.0>:
10006af4:	00c40034 	movhi	r3,4096
10006af8:	20800117 	ldw	r2,4(r4)
10006afc:	18daba04 	addi	r3,r3,27368
10006b00:	20c00f15 	stw	r3,60(r4)
10006b04:	2140bb04 	addi	r5,r4,748
10006b08:	00c000c4 	movi	r3,3
10006b0c:	20c0b915 	stw	r3,740(r4)
10006b10:	2140ba15 	stw	r5,744(r4)
10006b14:	2000b815 	stw	zero,736(r4)
10006b18:	10001705 	stb	zero,92(r2)
10006b1c:	10001745 	stb	zero,93(r2)
10006b20:	10001785 	stb	zero,94(r2)
10006b24:	100017c5 	stb	zero,95(r2)
10006b28:	10001805 	stb	zero,96(r2)
10006b2c:	10001845 	stb	zero,97(r2)
10006b30:	10001885 	stb	zero,98(r2)
10006b34:	100018c5 	stb	zero,99(r2)
10006b38:	00c00104 	movi	r3,4
10006b3c:	10c00315 	stw	r3,12(r2)
10006b40:	02040074 	movhi	r8,4097
10006b44:	20c00217 	ldw	r3,8(r4)
10006b48:	01c40074 	movhi	r7,4097
10006b4c:	01840074 	movhi	r6,4097
10006b50:	01440074 	movhi	r5,4097
10006b54:	4226c104 	addi	r8,r8,-25852
10006b58:	39e6d804 	addi	r7,r7,-25760
10006b5c:	31a6f804 	addi	r6,r6,-25632
10006b60:	29670f04 	addi	r5,r5,-25540
10006b64:	02400074 	movhi	r9,1
10006b68:	10001915 	stw	zero,100(r2)
10006b6c:	10000015 	stw	zero,0(r2)
10006b70:	10000115 	stw	zero,4(r2)
10006b74:	10000215 	stw	zero,8(r2)
10006b78:	10000415 	stw	zero,16(r2)
10006b7c:	10000515 	stw	zero,20(r2)
10006b80:	10000615 	stw	zero,24(r2)
10006b84:	10800715 	stw	r2,28(r2)
10006b88:	12000815 	stw	r8,32(r2)
10006b8c:	11c00915 	stw	r7,36(r2)
10006b90:	11800a15 	stw	r6,40(r2)
10006b94:	11400b15 	stw	r5,44(r2)
10006b98:	4a400284 	addi	r9,r9,10
10006b9c:	1a400315 	stw	r9,12(r3)
10006ba0:	18001915 	stw	zero,100(r3)
10006ba4:	18000015 	stw	zero,0(r3)
10006ba8:	18000115 	stw	zero,4(r3)
10006bac:	18000215 	stw	zero,8(r3)
10006bb0:	18000415 	stw	zero,16(r3)
10006bb4:	18001705 	stb	zero,92(r3)
10006bb8:	18001745 	stb	zero,93(r3)
10006bbc:	18001785 	stb	zero,94(r3)
10006bc0:	180017c5 	stb	zero,95(r3)
10006bc4:	18001805 	stb	zero,96(r3)
10006bc8:	18001845 	stb	zero,97(r3)
10006bcc:	18001885 	stb	zero,98(r3)
10006bd0:	180018c5 	stb	zero,99(r3)
10006bd4:	20800317 	ldw	r2,12(r4)
10006bd8:	024000b4 	movhi	r9,2
10006bdc:	18000515 	stw	zero,20(r3)
10006be0:	18000615 	stw	zero,24(r3)
10006be4:	18c00715 	stw	r3,28(r3)
10006be8:	1a000815 	stw	r8,32(r3)
10006bec:	19c00915 	stw	r7,36(r3)
10006bf0:	19800a15 	stw	r6,40(r3)
10006bf4:	19400b15 	stw	r5,44(r3)
10006bf8:	4a400484 	addi	r9,r9,18
10006bfc:	10001915 	stw	zero,100(r2)
10006c00:	10000015 	stw	zero,0(r2)
10006c04:	10000115 	stw	zero,4(r2)
10006c08:	10000215 	stw	zero,8(r2)
10006c0c:	12400315 	stw	r9,12(r2)
10006c10:	10000415 	stw	zero,16(r2)
10006c14:	10000515 	stw	zero,20(r2)
10006c18:	10000615 	stw	zero,24(r2)
10006c1c:	10001705 	stb	zero,92(r2)
10006c20:	10001745 	stb	zero,93(r2)
10006c24:	10001785 	stb	zero,94(r2)
10006c28:	100017c5 	stb	zero,95(r2)
10006c2c:	10001805 	stb	zero,96(r2)
10006c30:	10001845 	stb	zero,97(r2)
10006c34:	10001885 	stb	zero,98(r2)
10006c38:	100018c5 	stb	zero,99(r2)
10006c3c:	10800715 	stw	r2,28(r2)
10006c40:	12000815 	stw	r8,32(r2)
10006c44:	11c00915 	stw	r7,36(r2)
10006c48:	11800a15 	stw	r6,40(r2)
10006c4c:	11400b15 	stw	r5,44(r2)
10006c50:	00800044 	movi	r2,1
10006c54:	20800e15 	stw	r2,56(r4)
10006c58:	f800283a 	ret

10006c5c <__fp_unlock>:
10006c5c:	0005883a 	mov	r2,zero
10006c60:	f800283a 	ret

10006c64 <__sfmoreglue>:
10006c64:	defffc04 	addi	sp,sp,-16
10006c68:	dc400115 	stw	r17,4(sp)
10006c6c:	2c7fffc4 	addi	r17,r5,-1
10006c70:	8c401a24 	muli	r17,r17,104
10006c74:	dc800215 	stw	r18,8(sp)
10006c78:	2825883a 	mov	r18,r5
10006c7c:	89401d04 	addi	r5,r17,116
10006c80:	dc000015 	stw	r16,0(sp)
10006c84:	dfc00315 	stw	ra,12(sp)
10006c88:	0007a4c0 	call	10007a4c <_malloc_r>
10006c8c:	1021883a 	mov	r16,r2
10006c90:	10000726 	beq	r2,zero,10006cb0 <__sfmoreglue+0x4c>
10006c94:	11000304 	addi	r4,r2,12
10006c98:	10000015 	stw	zero,0(r2)
10006c9c:	14800115 	stw	r18,4(r2)
10006ca0:	11000215 	stw	r4,8(r2)
10006ca4:	89801a04 	addi	r6,r17,104
10006ca8:	000b883a 	mov	r5,zero
10006cac:	00084540 	call	10008454 <memset>
10006cb0:	8005883a 	mov	r2,r16
10006cb4:	dfc00317 	ldw	ra,12(sp)
10006cb8:	dc800217 	ldw	r18,8(sp)
10006cbc:	dc400117 	ldw	r17,4(sp)
10006cc0:	dc000017 	ldw	r16,0(sp)
10006cc4:	dec00404 	addi	sp,sp,16
10006cc8:	f800283a 	ret

10006ccc <__sfp>:
10006ccc:	defffd04 	addi	sp,sp,-12
10006cd0:	00840074 	movhi	r2,4097
10006cd4:	dc000015 	stw	r16,0(sp)
10006cd8:	14106417 	ldw	r16,16784(r2)
10006cdc:	dc400115 	stw	r17,4(sp)
10006ce0:	dfc00215 	stw	ra,8(sp)
10006ce4:	80800e17 	ldw	r2,56(r16)
10006ce8:	2023883a 	mov	r17,r4
10006cec:	10002b26 	beq	r2,zero,10006d9c <__sfp+0xd0>
10006cf0:	8400b804 	addi	r16,r16,736
10006cf4:	80c00117 	ldw	r3,4(r16)
10006cf8:	80800217 	ldw	r2,8(r16)
10006cfc:	18ffffc4 	addi	r3,r3,-1
10006d00:	1800050e 	bge	r3,zero,10006d18 <__sfp+0x4c>
10006d04:	00002106 	br	10006d8c <__sfp+0xc0>
10006d08:	18ffffc4 	addi	r3,r3,-1
10006d0c:	193fffd8 	cmpnei	r4,r3,-1
10006d10:	10801a04 	addi	r2,r2,104
10006d14:	20001d26 	beq	r4,zero,10006d8c <__sfp+0xc0>
10006d18:	1100030f 	ldh	r4,12(r2)
10006d1c:	203ffa1e 	bne	r4,zero,10006d08 <__sfp+0x3c>
10006d20:	00fffff4 	movhi	r3,65535
10006d24:	18c00044 	addi	r3,r3,1
10006d28:	10001915 	stw	zero,100(r2)
10006d2c:	10000015 	stw	zero,0(r2)
10006d30:	10000115 	stw	zero,4(r2)
10006d34:	10000215 	stw	zero,8(r2)
10006d38:	10c00315 	stw	r3,12(r2)
10006d3c:	10000415 	stw	zero,16(r2)
10006d40:	10000515 	stw	zero,20(r2)
10006d44:	10000615 	stw	zero,24(r2)
10006d48:	10001705 	stb	zero,92(r2)
10006d4c:	10001745 	stb	zero,93(r2)
10006d50:	10001785 	stb	zero,94(r2)
10006d54:	100017c5 	stb	zero,95(r2)
10006d58:	10001805 	stb	zero,96(r2)
10006d5c:	10001845 	stb	zero,97(r2)
10006d60:	10001885 	stb	zero,98(r2)
10006d64:	100018c5 	stb	zero,99(r2)
10006d68:	10000c15 	stw	zero,48(r2)
10006d6c:	10000d15 	stw	zero,52(r2)
10006d70:	10001115 	stw	zero,68(r2)
10006d74:	10001215 	stw	zero,72(r2)
10006d78:	dfc00217 	ldw	ra,8(sp)
10006d7c:	dc400117 	ldw	r17,4(sp)
10006d80:	dc000017 	ldw	r16,0(sp)
10006d84:	dec00304 	addi	sp,sp,12
10006d88:	f800283a 	ret
10006d8c:	80800017 	ldw	r2,0(r16)
10006d90:	10000526 	beq	r2,zero,10006da8 <__sfp+0xdc>
10006d94:	1021883a 	mov	r16,r2
10006d98:	003fd606 	br	10006cf4 <__sfp+0x28>
10006d9c:	8009883a 	mov	r4,r16
10006da0:	0006af40 	call	10006af4 <__sinit.part.0>
10006da4:	003fd206 	br	10006cf0 <__sfp+0x24>
10006da8:	01400104 	movi	r5,4
10006dac:	8809883a 	mov	r4,r17
10006db0:	0006c640 	call	10006c64 <__sfmoreglue>
10006db4:	80800015 	stw	r2,0(r16)
10006db8:	103ff61e 	bne	r2,zero,10006d94 <__sfp+0xc8>
10006dbc:	00c00304 	movi	r3,12
10006dc0:	88c00015 	stw	r3,0(r17)
10006dc4:	003fec06 	br	10006d78 <__sfp+0xac>

10006dc8 <_cleanup>:
10006dc8:	00840074 	movhi	r2,4097
10006dcc:	11106417 	ldw	r4,16784(r2)
10006dd0:	01440074 	movhi	r5,4097
10006dd4:	296cb204 	addi	r5,r5,-19768
10006dd8:	00077a41 	jmpi	100077a4 <_fwalk_reent>

10006ddc <__sinit>:
10006ddc:	20800e17 	ldw	r2,56(r4)
10006de0:	10000126 	beq	r2,zero,10006de8 <__sinit+0xc>
10006de4:	f800283a 	ret
10006de8:	0006af41 	jmpi	10006af4 <__sinit.part.0>

10006dec <__sfp_lock_acquire>:
10006dec:	f800283a 	ret

10006df0 <__sfp_lock_release>:
10006df0:	f800283a 	ret

10006df4 <__sinit_lock_acquire>:
10006df4:	f800283a 	ret

10006df8 <__sinit_lock_release>:
10006df8:	f800283a 	ret

10006dfc <__fp_lock_all>:
10006dfc:	00840074 	movhi	r2,4097
10006e00:	11106517 	ldw	r4,16788(r2)
10006e04:	01440034 	movhi	r5,4096
10006e08:	295ab804 	addi	r5,r5,27360
10006e0c:	00077001 	jmpi	10007700 <_fwalk>

10006e10 <__fp_unlock_all>:
10006e10:	00840074 	movhi	r2,4097
10006e14:	11106517 	ldw	r4,16788(r2)
10006e18:	01440034 	movhi	r5,4096
10006e1c:	295b1704 	addi	r5,r5,27740
10006e20:	00077001 	jmpi	10007700 <_fwalk>

10006e24 <_malloc_trim_r>:
10006e24:	defffb04 	addi	sp,sp,-20
10006e28:	dcc00315 	stw	r19,12(sp)
10006e2c:	04c40074 	movhi	r19,4097
10006e30:	dc800215 	stw	r18,8(sp)
10006e34:	dc400115 	stw	r17,4(sp)
10006e38:	dc000015 	stw	r16,0(sp)
10006e3c:	dfc00415 	stw	ra,16(sp)
10006e40:	2821883a 	mov	r16,r5
10006e44:	9cca8404 	addi	r19,r19,10768
10006e48:	2025883a 	mov	r18,r4
10006e4c:	000f4b80 	call	1000f4b8 <__malloc_lock>
10006e50:	98800217 	ldw	r2,8(r19)
10006e54:	14400117 	ldw	r17,4(r2)
10006e58:	00bfff04 	movi	r2,-4
10006e5c:	88a2703a 	and	r17,r17,r2
10006e60:	8c21c83a 	sub	r16,r17,r16
10006e64:	8403fbc4 	addi	r16,r16,4079
10006e68:	8020d33a 	srli	r16,r16,12
10006e6c:	843fffc4 	addi	r16,r16,-1
10006e70:	8020933a 	slli	r16,r16,12
10006e74:	80840008 	cmpgei	r2,r16,4096
10006e78:	10000626 	beq	r2,zero,10006e94 <_malloc_trim_r+0x70>
10006e7c:	000b883a 	mov	r5,zero
10006e80:	9009883a 	mov	r4,r18
10006e84:	0009aac0 	call	10009aac <_sbrk_r>
10006e88:	98c00217 	ldw	r3,8(r19)
10006e8c:	1c47883a 	add	r3,r3,r17
10006e90:	10c00a26 	beq	r2,r3,10006ebc <_malloc_trim_r+0x98>
10006e94:	9009883a 	mov	r4,r18
10006e98:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10006e9c:	0005883a 	mov	r2,zero
10006ea0:	dfc00417 	ldw	ra,16(sp)
10006ea4:	dcc00317 	ldw	r19,12(sp)
10006ea8:	dc800217 	ldw	r18,8(sp)
10006eac:	dc400117 	ldw	r17,4(sp)
10006eb0:	dc000017 	ldw	r16,0(sp)
10006eb4:	dec00504 	addi	sp,sp,20
10006eb8:	f800283a 	ret
10006ebc:	040bc83a 	sub	r5,zero,r16
10006ec0:	9009883a 	mov	r4,r18
10006ec4:	0009aac0 	call	10009aac <_sbrk_r>
10006ec8:	10bfffd8 	cmpnei	r2,r2,-1
10006ecc:	10000d26 	beq	r2,zero,10006f04 <_malloc_trim_r+0xe0>
10006ed0:	00840074 	movhi	r2,4097
10006ed4:	10990617 	ldw	r2,25624(r2)
10006ed8:	98c00217 	ldw	r3,8(r19)
10006edc:	8c23c83a 	sub	r17,r17,r16
10006ee0:	8c400054 	ori	r17,r17,1
10006ee4:	1421c83a 	sub	r16,r2,r16
10006ee8:	1c400115 	stw	r17,4(r3)
10006eec:	00840074 	movhi	r2,4097
10006ef0:	9009883a 	mov	r4,r18
10006ef4:	14190615 	stw	r16,25624(r2)
10006ef8:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10006efc:	00800044 	movi	r2,1
10006f00:	003fe706 	br	10006ea0 <_malloc_trim_r+0x7c>
10006f04:	000b883a 	mov	r5,zero
10006f08:	9009883a 	mov	r4,r18
10006f0c:	0009aac0 	call	10009aac <_sbrk_r>
10006f10:	99000217 	ldw	r4,8(r19)
10006f14:	1107c83a 	sub	r3,r2,r4
10006f18:	19400410 	cmplti	r5,r3,16
10006f1c:	283fdd1e 	bne	r5,zero,10006e94 <_malloc_trim_r+0x70>
10006f20:	01440074 	movhi	r5,4097
10006f24:	29506617 	ldw	r5,16792(r5)
10006f28:	18c00054 	ori	r3,r3,1
10006f2c:	20c00115 	stw	r3,4(r4)
10006f30:	1145c83a 	sub	r2,r2,r5
10006f34:	01440074 	movhi	r5,4097
10006f38:	28990615 	stw	r2,25624(r5)
10006f3c:	003fd506 	br	10006e94 <_malloc_trim_r+0x70>

10006f40 <_free_r>:
10006f40:	28004f26 	beq	r5,zero,10007080 <_free_r+0x140>
10006f44:	defffd04 	addi	sp,sp,-12
10006f48:	dc400115 	stw	r17,4(sp)
10006f4c:	dc000015 	stw	r16,0(sp)
10006f50:	2023883a 	mov	r17,r4
10006f54:	2821883a 	mov	r16,r5
10006f58:	dfc00215 	stw	ra,8(sp)
10006f5c:	000f4b80 	call	1000f4b8 <__malloc_lock>
10006f60:	81ffff17 	ldw	r7,-4(r16)
10006f64:	00bfff84 	movi	r2,-2
10006f68:	80fffe04 	addi	r3,r16,-8
10006f6c:	3884703a 	and	r2,r7,r2
10006f70:	01840074 	movhi	r6,4097
10006f74:	1889883a 	add	r4,r3,r2
10006f78:	318a8404 	addi	r6,r6,10768
10006f7c:	21400117 	ldw	r5,4(r4)
10006f80:	32000217 	ldw	r8,8(r6)
10006f84:	027fff04 	movi	r9,-4
10006f88:	2a4a703a 	and	r5,r5,r9
10006f8c:	41006426 	beq	r8,r4,10007120 <_free_r+0x1e0>
10006f90:	21400115 	stw	r5,4(r4)
10006f94:	39c0004c 	andi	r7,r7,1
10006f98:	2151883a 	add	r8,r4,r5
10006f9c:	3800281e 	bne	r7,zero,10007040 <_free_r+0x100>
10006fa0:	82bffe17 	ldw	r10,-8(r16)
10006fa4:	42000117 	ldw	r8,4(r8)
10006fa8:	01c40074 	movhi	r7,4097
10006fac:	1a87c83a 	sub	r3,r3,r10
10006fb0:	1a400217 	ldw	r9,8(r3)
10006fb4:	39ca8604 	addi	r7,r7,10776
10006fb8:	1285883a 	add	r2,r2,r10
10006fbc:	4200004c 	andi	r8,r8,1
10006fc0:	49c04c26 	beq	r9,r7,100070f4 <_free_r+0x1b4>
10006fc4:	1a800317 	ldw	r10,12(r3)
10006fc8:	4a800315 	stw	r10,12(r9)
10006fcc:	52400215 	stw	r9,8(r10)
10006fd0:	40007126 	beq	r8,zero,10007198 <_free_r+0x258>
10006fd4:	11400054 	ori	r5,r2,1
10006fd8:	19400115 	stw	r5,4(r3)
10006fdc:	20800015 	stw	r2,0(r4)
10006fe0:	11008028 	cmpgeui	r4,r2,512
10006fe4:	20002c1e 	bne	r4,zero,10007098 <_free_r+0x158>
10006fe8:	1008d0fa 	srli	r4,r2,3
10006fec:	31c00117 	ldw	r7,4(r6)
10006ff0:	20800044 	addi	r2,r4,1
10006ff4:	200bd0ba 	srai	r5,r4,2
10006ff8:	100490fa 	slli	r2,r2,3
10006ffc:	01000044 	movi	r4,1
10007000:	2148983a 	sll	r4,r4,r5
10007004:	3085883a 	add	r2,r6,r2
10007008:	11400017 	ldw	r5,0(r2)
1000700c:	21c8b03a 	or	r4,r4,r7
10007010:	11fffe04 	addi	r7,r2,-8
10007014:	19c00315 	stw	r7,12(r3)
10007018:	19400215 	stw	r5,8(r3)
1000701c:	31000115 	stw	r4,4(r6)
10007020:	10c00015 	stw	r3,0(r2)
10007024:	28c00315 	stw	r3,12(r5)
10007028:	8809883a 	mov	r4,r17
1000702c:	dfc00217 	ldw	ra,8(sp)
10007030:	dc400117 	ldw	r17,4(sp)
10007034:	dc000017 	ldw	r16,0(sp)
10007038:	dec00304 	addi	sp,sp,12
1000703c:	000f4dc1 	jmpi	1000f4dc <__malloc_unlock>
10007040:	41c00117 	ldw	r7,4(r8)
10007044:	39c0004c 	andi	r7,r7,1
10007048:	38000e1e 	bne	r7,zero,10007084 <_free_r+0x144>
1000704c:	01c40074 	movhi	r7,4097
10007050:	1145883a 	add	r2,r2,r5
10007054:	39ca8604 	addi	r7,r7,10776
10007058:	21400217 	ldw	r5,8(r4)
1000705c:	12400054 	ori	r9,r2,1
10007060:	1891883a 	add	r8,r3,r2
10007064:	29c05226 	beq	r5,r7,100071b0 <_free_r+0x270>
10007068:	21000317 	ldw	r4,12(r4)
1000706c:	29000315 	stw	r4,12(r5)
10007070:	21400215 	stw	r5,8(r4)
10007074:	1a400115 	stw	r9,4(r3)
10007078:	40800015 	stw	r2,0(r8)
1000707c:	003fd806 	br	10006fe0 <_free_r+0xa0>
10007080:	f800283a 	ret
10007084:	11400054 	ori	r5,r2,1
10007088:	817fff15 	stw	r5,-4(r16)
1000708c:	20800015 	stw	r2,0(r4)
10007090:	11008028 	cmpgeui	r4,r2,512
10007094:	203fd426 	beq	r4,zero,10006fe8 <_free_r+0xa8>
10007098:	1008d27a 	srli	r4,r2,9
1000709c:	21400168 	cmpgeui	r5,r4,5
100070a0:	2800341e 	bne	r5,zero,10007174 <_free_r+0x234>
100070a4:	1008d1ba 	srli	r4,r2,6
100070a8:	21c00e44 	addi	r7,r4,57
100070ac:	380e90fa 	slli	r7,r7,3
100070b0:	21400e04 	addi	r5,r4,56
100070b4:	31cf883a 	add	r7,r6,r7
100070b8:	39000017 	ldw	r4,0(r7)
100070bc:	39fffe04 	addi	r7,r7,-8
100070c0:	39004226 	beq	r7,r4,100071cc <_free_r+0x28c>
100070c4:	01bfff04 	movi	r6,-4
100070c8:	21400117 	ldw	r5,4(r4)
100070cc:	298a703a 	and	r5,r5,r6
100070d0:	1140022e 	bgeu	r2,r5,100070dc <_free_r+0x19c>
100070d4:	21000217 	ldw	r4,8(r4)
100070d8:	393ffb1e 	bne	r7,r4,100070c8 <_free_r+0x188>
100070dc:	21c00317 	ldw	r7,12(r4)
100070e0:	19c00315 	stw	r7,12(r3)
100070e4:	19000215 	stw	r4,8(r3)
100070e8:	38c00215 	stw	r3,8(r7)
100070ec:	20c00315 	stw	r3,12(r4)
100070f0:	003fcd06 	br	10007028 <_free_r+0xe8>
100070f4:	40004d1e 	bne	r8,zero,1000722c <_free_r+0x2ec>
100070f8:	21800317 	ldw	r6,12(r4)
100070fc:	21000217 	ldw	r4,8(r4)
10007100:	2885883a 	add	r2,r5,r2
10007104:	11400054 	ori	r5,r2,1
10007108:	21800315 	stw	r6,12(r4)
1000710c:	31000215 	stw	r4,8(r6)
10007110:	19400115 	stw	r5,4(r3)
10007114:	1887883a 	add	r3,r3,r2
10007118:	18800015 	stw	r2,0(r3)
1000711c:	003fc206 	br	10007028 <_free_r+0xe8>
10007120:	39c0004c 	andi	r7,r7,1
10007124:	1145883a 	add	r2,r2,r5
10007128:	3800071e 	bne	r7,zero,10007148 <_free_r+0x208>
1000712c:	81fffe17 	ldw	r7,-8(r16)
10007130:	19c7c83a 	sub	r3,r3,r7
10007134:	19000317 	ldw	r4,12(r3)
10007138:	19400217 	ldw	r5,8(r3)
1000713c:	11c5883a 	add	r2,r2,r7
10007140:	29000315 	stw	r4,12(r5)
10007144:	21400215 	stw	r5,8(r4)
10007148:	01040074 	movhi	r4,4097
1000714c:	11400054 	ori	r5,r2,1
10007150:	21106717 	ldw	r4,16796(r4)
10007154:	19400115 	stw	r5,4(r3)
10007158:	30c00215 	stw	r3,8(r6)
1000715c:	113fb236 	bltu	r2,r4,10007028 <_free_r+0xe8>
10007160:	00840074 	movhi	r2,4097
10007164:	1158fc17 	ldw	r5,25584(r2)
10007168:	8809883a 	mov	r4,r17
1000716c:	0006e240 	call	10006e24 <_malloc_trim_r>
10007170:	003fad06 	br	10007028 <_free_r+0xe8>
10007174:	21400568 	cmpgeui	r5,r4,21
10007178:	28000926 	beq	r5,zero,100071a0 <_free_r+0x260>
1000717c:	21401568 	cmpgeui	r5,r4,85
10007180:	2800191e 	bne	r5,zero,100071e8 <_free_r+0x2a8>
10007184:	1008d33a 	srli	r4,r2,12
10007188:	21c01bc4 	addi	r7,r4,111
1000718c:	21401b84 	addi	r5,r4,110
10007190:	380e90fa 	slli	r7,r7,3
10007194:	003fc706 	br	100070b4 <_free_r+0x174>
10007198:	1145883a 	add	r2,r2,r5
1000719c:	003fae06 	br	10007058 <_free_r+0x118>
100071a0:	21c01704 	addi	r7,r4,92
100071a4:	214016c4 	addi	r5,r4,91
100071a8:	380e90fa 	slli	r7,r7,3
100071ac:	003fc106 	br	100070b4 <_free_r+0x174>
100071b0:	30c00515 	stw	r3,20(r6)
100071b4:	30c00415 	stw	r3,16(r6)
100071b8:	19c00315 	stw	r7,12(r3)
100071bc:	19c00215 	stw	r7,8(r3)
100071c0:	1a400115 	stw	r9,4(r3)
100071c4:	40800015 	stw	r2,0(r8)
100071c8:	003f9706 	br	10007028 <_free_r+0xe8>
100071cc:	280bd0ba 	srai	r5,r5,2
100071d0:	00800044 	movi	r2,1
100071d4:	32000117 	ldw	r8,4(r6)
100071d8:	114a983a 	sll	r5,r2,r5
100071dc:	2a0ab03a 	or	r5,r5,r8
100071e0:	31400115 	stw	r5,4(r6)
100071e4:	003fbe06 	br	100070e0 <_free_r+0x1a0>
100071e8:	21405568 	cmpgeui	r5,r4,341
100071ec:	2800051e 	bne	r5,zero,10007204 <_free_r+0x2c4>
100071f0:	1008d3fa 	srli	r4,r2,15
100071f4:	21c01e04 	addi	r7,r4,120
100071f8:	21401dc4 	addi	r5,r4,119
100071fc:	380e90fa 	slli	r7,r7,3
10007200:	003fac06 	br	100070b4 <_free_r+0x174>
10007204:	21015568 	cmpgeui	r4,r4,1365
10007208:	2000051e 	bne	r4,zero,10007220 <_free_r+0x2e0>
1000720c:	1008d4ba 	srli	r4,r2,18
10007210:	21c01f44 	addi	r7,r4,125
10007214:	21401f04 	addi	r5,r4,124
10007218:	380e90fa 	slli	r7,r7,3
1000721c:	003fa506 	br	100070b4 <_free_r+0x174>
10007220:	01c0fe04 	movi	r7,1016
10007224:	01401f84 	movi	r5,126
10007228:	003fa206 	br	100070b4 <_free_r+0x174>
1000722c:	11400054 	ori	r5,r2,1
10007230:	19400115 	stw	r5,4(r3)
10007234:	20800015 	stw	r2,0(r4)
10007238:	003f7b06 	br	10007028 <_free_r+0xe8>

1000723c <__sfvwrite_r>:
1000723c:	30800217 	ldw	r2,8(r6)
10007240:	1000c926 	beq	r2,zero,10007568 <__sfvwrite_r+0x32c>
10007244:	2880030b 	ldhu	r2,12(r5)
10007248:	defff304 	addi	sp,sp,-52
1000724c:	dd000715 	stw	r20,28(sp)
10007250:	dc000315 	stw	r16,12(sp)
10007254:	dfc00c15 	stw	ra,48(sp)
10007258:	df000b15 	stw	fp,44(sp)
1000725c:	ddc00a15 	stw	r23,40(sp)
10007260:	dd800915 	stw	r22,36(sp)
10007264:	dd400815 	stw	r21,32(sp)
10007268:	dcc00615 	stw	r19,24(sp)
1000726c:	dc800515 	stw	r18,20(sp)
10007270:	dc400415 	stw	r17,16(sp)
10007274:	d9000015 	stw	r4,0(sp)
10007278:	10c0020c 	andi	r3,r2,8
1000727c:	2821883a 	mov	r16,r5
10007280:	3029883a 	mov	r20,r6
10007284:	18002426 	beq	r3,zero,10007318 <__sfvwrite_r+0xdc>
10007288:	28c00417 	ldw	r3,16(r5)
1000728c:	18002226 	beq	r3,zero,10007318 <__sfvwrite_r+0xdc>
10007290:	10c0008c 	andi	r3,r2,2
10007294:	a4400017 	ldw	r17,0(r20)
10007298:	18002726 	beq	r3,zero,10007338 <__sfvwrite_r+0xfc>
1000729c:	80c00917 	ldw	r3,36(r16)
100072a0:	80800717 	ldw	r2,28(r16)
100072a4:	05600034 	movhi	r21,32768
100072a8:	0027883a 	mov	r19,zero
100072ac:	0025883a 	mov	r18,zero
100072b0:	ad7f0004 	addi	r21,r21,-1024
100072b4:	980d883a 	mov	r6,r19
100072b8:	100b883a 	mov	r5,r2
100072bc:	d9000017 	ldw	r4,0(sp)
100072c0:	90001126 	beq	r18,zero,10007308 <__sfvwrite_r+0xcc>
100072c4:	900f883a 	mov	r7,r18
100072c8:	ac80012e 	bgeu	r21,r18,100072d0 <__sfvwrite_r+0x94>
100072cc:	a80f883a 	mov	r7,r21
100072d0:	183ee83a 	callr	r3
100072d4:	00809f0e 	bge	zero,r2,10007554 <__sfvwrite_r+0x318>
100072d8:	a0c00217 	ldw	r3,8(r20)
100072dc:	98a7883a 	add	r19,r19,r2
100072e0:	90a5c83a 	sub	r18,r18,r2
100072e4:	1885c83a 	sub	r2,r3,r2
100072e8:	a0800215 	stw	r2,8(r20)
100072ec:	10006326 	beq	r2,zero,1000747c <__sfvwrite_r+0x240>
100072f0:	80800717 	ldw	r2,28(r16)
100072f4:	80c00917 	ldw	r3,36(r16)
100072f8:	980d883a 	mov	r6,r19
100072fc:	100b883a 	mov	r5,r2
10007300:	d9000017 	ldw	r4,0(sp)
10007304:	903fef1e 	bne	r18,zero,100072c4 <__sfvwrite_r+0x88>
10007308:	8cc00017 	ldw	r19,0(r17)
1000730c:	8c800117 	ldw	r18,4(r17)
10007310:	8c400204 	addi	r17,r17,8
10007314:	003fe706 	br	100072b4 <__sfvwrite_r+0x78>
10007318:	d9000017 	ldw	r4,0(sp)
1000731c:	800b883a 	mov	r5,r16
10007320:	0004df80 	call	10004df8 <__swsetup_r>
10007324:	1000f41e 	bne	r2,zero,100076f8 <__sfvwrite_r+0x4bc>
10007328:	8080030b 	ldhu	r2,12(r16)
1000732c:	a4400017 	ldw	r17,0(r20)
10007330:	10c0008c 	andi	r3,r2,2
10007334:	183fd91e 	bne	r3,zero,1000729c <__sfvwrite_r+0x60>
10007338:	10c0004c 	andi	r3,r2,1
1000733c:	84800217 	ldw	r18,8(r16)
10007340:	87000017 	ldw	fp,0(r16)
10007344:	18008a1e 	bne	r3,zero,10007570 <__sfvwrite_r+0x334>
10007348:	00e00034 	movhi	r3,32768
1000734c:	18ffff84 	addi	r3,r3,-2
10007350:	01200034 	movhi	r4,32768
10007354:	d8c00115 	stw	r3,4(sp)
10007358:	20ffffc4 	addi	r3,r4,-1
1000735c:	002d883a 	mov	r22,zero
10007360:	002f883a 	mov	r23,zero
10007364:	d8c00215 	stw	r3,8(sp)
10007368:	b8004026 	beq	r23,zero,1000746c <__sfvwrite_r+0x230>
1000736c:	1100800c 	andi	r4,r2,512
10007370:	20009026 	beq	r4,zero,100075b4 <__sfvwrite_r+0x378>
10007374:	902b883a 	mov	r21,r18
10007378:	bc80b436 	bltu	r23,r18,1000764c <__sfvwrite_r+0x410>
1000737c:	1101200c 	andi	r4,r2,1152
10007380:	20002526 	beq	r4,zero,10007418 <__sfvwrite_r+0x1dc>
10007384:	81800517 	ldw	r6,20(r16)
10007388:	81400417 	ldw	r5,16(r16)
1000738c:	b9000044 	addi	r4,r23,1
10007390:	318000e4 	muli	r6,r6,3
10007394:	e167c83a 	sub	r19,fp,r5
10007398:	24c9883a 	add	r4,r4,r19
1000739c:	3024d7fa 	srli	r18,r6,31
100073a0:	91a5883a 	add	r18,r18,r6
100073a4:	9025d07a 	srai	r18,r18,1
100073a8:	900d883a 	mov	r6,r18
100073ac:	9100022e 	bgeu	r18,r4,100073b8 <__sfvwrite_r+0x17c>
100073b0:	2025883a 	mov	r18,r4
100073b4:	200d883a 	mov	r6,r4
100073b8:	1081000c 	andi	r2,r2,1024
100073bc:	1000bc26 	beq	r2,zero,100076b0 <__sfvwrite_r+0x474>
100073c0:	d9000017 	ldw	r4,0(sp)
100073c4:	300b883a 	mov	r5,r6
100073c8:	0007a4c0 	call	10007a4c <_malloc_r>
100073cc:	1000c526 	beq	r2,zero,100076e4 <__sfvwrite_r+0x4a8>
100073d0:	81400417 	ldw	r5,16(r16)
100073d4:	980d883a 	mov	r6,r19
100073d8:	1009883a 	mov	r4,r2
100073dc:	00028e40 	call	100028e4 <memcpy>
100073e0:	100f883a 	mov	r7,r2
100073e4:	8080030b 	ldhu	r2,12(r16)
100073e8:	00fedfc4 	movi	r3,-1153
100073ec:	10c4703a 	and	r2,r2,r3
100073f0:	10802014 	ori	r2,r2,128
100073f4:	8080030d 	sth	r2,12(r16)
100073f8:	94c5c83a 	sub	r2,r18,r19
100073fc:	3cf9883a 	add	fp,r7,r19
10007400:	84800515 	stw	r18,20(r16)
10007404:	81c00415 	stw	r7,16(r16)
10007408:	87000015 	stw	fp,0(r16)
1000740c:	b825883a 	mov	r18,r23
10007410:	80800215 	stw	r2,8(r16)
10007414:	b82b883a 	mov	r21,r23
10007418:	a80d883a 	mov	r6,r21
1000741c:	b00b883a 	mov	r5,r22
10007420:	e009883a 	mov	r4,fp
10007424:	00083280 	call	10008328 <memmove>
10007428:	80800217 	ldw	r2,8(r16)
1000742c:	81800017 	ldw	r6,0(r16)
10007430:	b827883a 	mov	r19,r23
10007434:	14a5c83a 	sub	r18,r2,r18
10007438:	354d883a 	add	r6,r6,r21
1000743c:	84800215 	stw	r18,8(r16)
10007440:	81800015 	stw	r6,0(r16)
10007444:	002f883a 	mov	r23,zero
10007448:	a0800217 	ldw	r2,8(r20)
1000744c:	b4ed883a 	add	r22,r22,r19
10007450:	14e7c83a 	sub	r19,r2,r19
10007454:	a4c00215 	stw	r19,8(r20)
10007458:	98000826 	beq	r19,zero,1000747c <__sfvwrite_r+0x240>
1000745c:	8080030b 	ldhu	r2,12(r16)
10007460:	84800217 	ldw	r18,8(r16)
10007464:	87000017 	ldw	fp,0(r16)
10007468:	b83fc01e 	bne	r23,zero,1000736c <__sfvwrite_r+0x130>
1000746c:	8d800017 	ldw	r22,0(r17)
10007470:	8dc00117 	ldw	r23,4(r17)
10007474:	8c400204 	addi	r17,r17,8
10007478:	003fbb06 	br	10007368 <__sfvwrite_r+0x12c>
1000747c:	0005883a 	mov	r2,zero
10007480:	dfc00c17 	ldw	ra,48(sp)
10007484:	df000b17 	ldw	fp,44(sp)
10007488:	ddc00a17 	ldw	r23,40(sp)
1000748c:	dd800917 	ldw	r22,36(sp)
10007490:	dd400817 	ldw	r21,32(sp)
10007494:	dd000717 	ldw	r20,28(sp)
10007498:	dcc00617 	ldw	r19,24(sp)
1000749c:	dc800517 	ldw	r18,20(sp)
100074a0:	dc400417 	ldw	r17,16(sp)
100074a4:	dc000317 	ldw	r16,12(sp)
100074a8:	dec00d04 	addi	sp,sp,52
100074ac:	f800283a 	ret
100074b0:	b1c06e16 	blt	r22,r7,1000766c <__sfvwrite_r+0x430>
100074b4:	80800917 	ldw	r2,36(r16)
100074b8:	81400717 	ldw	r5,28(r16)
100074bc:	d9000017 	ldw	r4,0(sp)
100074c0:	b80d883a 	mov	r6,r23
100074c4:	103ee83a 	callr	r2
100074c8:	1025883a 	mov	r18,r2
100074cc:	0080210e 	bge	zero,r2,10007554 <__sfvwrite_r+0x318>
100074d0:	acabc83a 	sub	r21,r21,r18
100074d4:	a8006026 	beq	r21,zero,10007658 <__sfvwrite_r+0x41c>
100074d8:	00800044 	movi	r2,1
100074dc:	a0c00217 	ldw	r3,8(r20)
100074e0:	bcaf883a 	add	r23,r23,r18
100074e4:	9ca7c83a 	sub	r19,r19,r18
100074e8:	1ca5c83a 	sub	r18,r3,r18
100074ec:	a4800215 	stw	r18,8(r20)
100074f0:	903fe226 	beq	r18,zero,1000747c <__sfvwrite_r+0x240>
100074f4:	84800217 	ldw	r18,8(r16)
100074f8:	87000017 	ldw	fp,0(r16)
100074fc:	98002126 	beq	r19,zero,10007584 <__sfvwrite_r+0x348>
10007500:	10002426 	beq	r2,zero,10007594 <__sfvwrite_r+0x358>
10007504:	a805883a 	mov	r2,r21
10007508:	982d883a 	mov	r22,r19
1000750c:	14c0012e 	bgeu	r2,r19,10007514 <__sfvwrite_r+0x2d8>
10007510:	102d883a 	mov	r22,r2
10007514:	80800417 	ldw	r2,16(r16)
10007518:	81c00517 	ldw	r7,20(r16)
1000751c:	173fe42e 	bgeu	r2,fp,100074b0 <__sfvwrite_r+0x274>
10007520:	3ca5883a 	add	r18,r7,r18
10007524:	95bfe20e 	bge	r18,r22,100074b0 <__sfvwrite_r+0x274>
10007528:	b80b883a 	mov	r5,r23
1000752c:	e009883a 	mov	r4,fp
10007530:	900d883a 	mov	r6,r18
10007534:	00083280 	call	10008328 <memmove>
10007538:	80800017 	ldw	r2,0(r16)
1000753c:	d9000017 	ldw	r4,0(sp)
10007540:	800b883a 	mov	r5,r16
10007544:	1485883a 	add	r2,r2,r18
10007548:	80800015 	stw	r2,0(r16)
1000754c:	0006a580 	call	10006a58 <_fflush_r>
10007550:	103fdf26 	beq	r2,zero,100074d0 <__sfvwrite_r+0x294>
10007554:	8080030b 	ldhu	r2,12(r16)
10007558:	10801014 	ori	r2,r2,64
1000755c:	8080030d 	sth	r2,12(r16)
10007560:	00bfffc4 	movi	r2,-1
10007564:	003fc606 	br	10007480 <__sfvwrite_r+0x244>
10007568:	0005883a 	mov	r2,zero
1000756c:	f800283a 	ret
10007570:	0027883a 	mov	r19,zero
10007574:	002b883a 	mov	r21,zero
10007578:	0005883a 	mov	r2,zero
1000757c:	002f883a 	mov	r23,zero
10007580:	983fdf1e 	bne	r19,zero,10007500 <__sfvwrite_r+0x2c4>
10007584:	8cc00117 	ldw	r19,4(r17)
10007588:	8dc00017 	ldw	r23,0(r17)
1000758c:	8c400204 	addi	r17,r17,8
10007590:	983ffc26 	beq	r19,zero,10007584 <__sfvwrite_r+0x348>
10007594:	980d883a 	mov	r6,r19
10007598:	01400284 	movi	r5,10
1000759c:	b809883a 	mov	r4,r23
100075a0:	00082400 	call	10008240 <memchr>
100075a4:	10003f26 	beq	r2,zero,100076a4 <__sfvwrite_r+0x468>
100075a8:	10800044 	addi	r2,r2,1
100075ac:	15ebc83a 	sub	r21,r2,r23
100075b0:	003fd406 	br	10007504 <__sfvwrite_r+0x2c8>
100075b4:	80800417 	ldw	r2,16(r16)
100075b8:	17001136 	bltu	r2,fp,10007600 <__sfvwrite_r+0x3c4>
100075bc:	84c00517 	ldw	r19,20(r16)
100075c0:	bcc00f36 	bltu	r23,r19,10007600 <__sfvwrite_r+0x3c4>
100075c4:	d8800117 	ldw	r2,4(sp)
100075c8:	15c0342e 	bgeu	r2,r23,1000769c <__sfvwrite_r+0x460>
100075cc:	d9000217 	ldw	r4,8(sp)
100075d0:	980b883a 	mov	r5,r19
100075d4:	000c6580 	call	1000c658 <__divsi3>
100075d8:	14cf383a 	mul	r7,r2,r19
100075dc:	81400717 	ldw	r5,28(r16)
100075e0:	80800917 	ldw	r2,36(r16)
100075e4:	d9000017 	ldw	r4,0(sp)
100075e8:	b00d883a 	mov	r6,r22
100075ec:	103ee83a 	callr	r2
100075f0:	00bfd80e 	bge	zero,r2,10007554 <__sfvwrite_r+0x318>
100075f4:	1027883a 	mov	r19,r2
100075f8:	bcefc83a 	sub	r23,r23,r19
100075fc:	003f9206 	br	10007448 <__sfvwrite_r+0x20c>
10007600:	9027883a 	mov	r19,r18
10007604:	bc80012e 	bgeu	r23,r18,1000760c <__sfvwrite_r+0x3d0>
10007608:	b827883a 	mov	r19,r23
1000760c:	e009883a 	mov	r4,fp
10007610:	980d883a 	mov	r6,r19
10007614:	b00b883a 	mov	r5,r22
10007618:	00083280 	call	10008328 <memmove>
1000761c:	80800217 	ldw	r2,8(r16)
10007620:	81000017 	ldw	r4,0(r16)
10007624:	14c5c83a 	sub	r2,r2,r19
10007628:	24c9883a 	add	r4,r4,r19
1000762c:	80800215 	stw	r2,8(r16)
10007630:	81000015 	stw	r4,0(r16)
10007634:	103ff01e 	bne	r2,zero,100075f8 <__sfvwrite_r+0x3bc>
10007638:	d9000017 	ldw	r4,0(sp)
1000763c:	800b883a 	mov	r5,r16
10007640:	0006a580 	call	10006a58 <_fflush_r>
10007644:	103fec26 	beq	r2,zero,100075f8 <__sfvwrite_r+0x3bc>
10007648:	003fc206 	br	10007554 <__sfvwrite_r+0x318>
1000764c:	b825883a 	mov	r18,r23
10007650:	b82b883a 	mov	r21,r23
10007654:	003f7006 	br	10007418 <__sfvwrite_r+0x1dc>
10007658:	d9000017 	ldw	r4,0(sp)
1000765c:	800b883a 	mov	r5,r16
10007660:	0006a580 	call	10006a58 <_fflush_r>
10007664:	103f9d26 	beq	r2,zero,100074dc <__sfvwrite_r+0x2a0>
10007668:	003fba06 	br	10007554 <__sfvwrite_r+0x318>
1000766c:	b00d883a 	mov	r6,r22
10007670:	b80b883a 	mov	r5,r23
10007674:	e009883a 	mov	r4,fp
10007678:	00083280 	call	10008328 <memmove>
1000767c:	80c00217 	ldw	r3,8(r16)
10007680:	80800017 	ldw	r2,0(r16)
10007684:	b025883a 	mov	r18,r22
10007688:	1d87c83a 	sub	r3,r3,r22
1000768c:	15ad883a 	add	r22,r2,r22
10007690:	80c00215 	stw	r3,8(r16)
10007694:	85800015 	stw	r22,0(r16)
10007698:	003f8d06 	br	100074d0 <__sfvwrite_r+0x294>
1000769c:	b809883a 	mov	r4,r23
100076a0:	003fcb06 	br	100075d0 <__sfvwrite_r+0x394>
100076a4:	98800044 	addi	r2,r19,1
100076a8:	102b883a 	mov	r21,r2
100076ac:	003f9606 	br	10007508 <__sfvwrite_r+0x2cc>
100076b0:	d9000017 	ldw	r4,0(sp)
100076b4:	00094800 	call	10009480 <_realloc_r>
100076b8:	100f883a 	mov	r7,r2
100076bc:	103f4e1e 	bne	r2,zero,100073f8 <__sfvwrite_r+0x1bc>
100076c0:	dc400017 	ldw	r17,0(sp)
100076c4:	81400417 	ldw	r5,16(r16)
100076c8:	8809883a 	mov	r4,r17
100076cc:	0006f400 	call	10006f40 <_free_r>
100076d0:	8080030b 	ldhu	r2,12(r16)
100076d4:	00c00304 	movi	r3,12
100076d8:	88c00015 	stw	r3,0(r17)
100076dc:	10bfdfcc 	andi	r2,r2,65407
100076e0:	003f9d06 	br	10007558 <__sfvwrite_r+0x31c>
100076e4:	d8c00017 	ldw	r3,0(sp)
100076e8:	00800304 	movi	r2,12
100076ec:	18800015 	stw	r2,0(r3)
100076f0:	8080030b 	ldhu	r2,12(r16)
100076f4:	003f9806 	br	10007558 <__sfvwrite_r+0x31c>
100076f8:	00bfffc4 	movi	r2,-1
100076fc:	003f6006 	br	10007480 <__sfvwrite_r+0x244>

10007700 <_fwalk>:
10007700:	defffa04 	addi	sp,sp,-24
10007704:	dc800215 	stw	r18,8(sp)
10007708:	dfc00515 	stw	ra,20(sp)
1000770c:	dd000415 	stw	r20,16(sp)
10007710:	dcc00315 	stw	r19,12(sp)
10007714:	dc400115 	stw	r17,4(sp)
10007718:	dc000015 	stw	r16,0(sp)
1000771c:	2480b804 	addi	r18,r4,736
10007720:	90001e26 	beq	r18,zero,1000779c <_fwalk+0x9c>
10007724:	2827883a 	mov	r19,r5
10007728:	0029883a 	mov	r20,zero
1000772c:	94400117 	ldw	r17,4(r18)
10007730:	94000217 	ldw	r16,8(r18)
10007734:	8c7fffc4 	addi	r17,r17,-1
10007738:	88000d16 	blt	r17,zero,10007770 <_fwalk+0x70>
1000773c:	8080030b 	ldhu	r2,12(r16)
10007740:	8c7fffc4 	addi	r17,r17,-1
10007744:	108000b0 	cmpltui	r2,r2,2
10007748:	1000061e 	bne	r2,zero,10007764 <_fwalk+0x64>
1000774c:	8080038f 	ldh	r2,14(r16)
10007750:	8009883a 	mov	r4,r16
10007754:	10bfffe0 	cmpeqi	r2,r2,-1
10007758:	1000021e 	bne	r2,zero,10007764 <_fwalk+0x64>
1000775c:	983ee83a 	callr	r19
10007760:	a0a8b03a 	or	r20,r20,r2
10007764:	88bfffd8 	cmpnei	r2,r17,-1
10007768:	84001a04 	addi	r16,r16,104
1000776c:	103ff31e 	bne	r2,zero,1000773c <_fwalk+0x3c>
10007770:	94800017 	ldw	r18,0(r18)
10007774:	903fed1e 	bne	r18,zero,1000772c <_fwalk+0x2c>
10007778:	a005883a 	mov	r2,r20
1000777c:	dfc00517 	ldw	ra,20(sp)
10007780:	dd000417 	ldw	r20,16(sp)
10007784:	dcc00317 	ldw	r19,12(sp)
10007788:	dc800217 	ldw	r18,8(sp)
1000778c:	dc400117 	ldw	r17,4(sp)
10007790:	dc000017 	ldw	r16,0(sp)
10007794:	dec00604 	addi	sp,sp,24
10007798:	f800283a 	ret
1000779c:	0029883a 	mov	r20,zero
100077a0:	003ff506 	br	10007778 <_fwalk+0x78>

100077a4 <_fwalk_reent>:
100077a4:	defff904 	addi	sp,sp,-28
100077a8:	dc800215 	stw	r18,8(sp)
100077ac:	dfc00615 	stw	ra,24(sp)
100077b0:	dd400515 	stw	r21,20(sp)
100077b4:	dd000415 	stw	r20,16(sp)
100077b8:	dcc00315 	stw	r19,12(sp)
100077bc:	dc400115 	stw	r17,4(sp)
100077c0:	dc000015 	stw	r16,0(sp)
100077c4:	2480b804 	addi	r18,r4,736
100077c8:	90002126 	beq	r18,zero,10007850 <_fwalk_reent+0xac>
100077cc:	2829883a 	mov	r20,r5
100077d0:	2027883a 	mov	r19,r4
100077d4:	002b883a 	mov	r21,zero
100077d8:	94400117 	ldw	r17,4(r18)
100077dc:	94000217 	ldw	r16,8(r18)
100077e0:	8c7fffc4 	addi	r17,r17,-1
100077e4:	88000e16 	blt	r17,zero,10007820 <_fwalk_reent+0x7c>
100077e8:	8080030b 	ldhu	r2,12(r16)
100077ec:	8c7fffc4 	addi	r17,r17,-1
100077f0:	108000b0 	cmpltui	r2,r2,2
100077f4:	1000071e 	bne	r2,zero,10007814 <_fwalk_reent+0x70>
100077f8:	8080038f 	ldh	r2,14(r16)
100077fc:	800b883a 	mov	r5,r16
10007800:	9809883a 	mov	r4,r19
10007804:	10bfffe0 	cmpeqi	r2,r2,-1
10007808:	1000021e 	bne	r2,zero,10007814 <_fwalk_reent+0x70>
1000780c:	a03ee83a 	callr	r20
10007810:	a8aab03a 	or	r21,r21,r2
10007814:	88bfffd8 	cmpnei	r2,r17,-1
10007818:	84001a04 	addi	r16,r16,104
1000781c:	103ff21e 	bne	r2,zero,100077e8 <_fwalk_reent+0x44>
10007820:	94800017 	ldw	r18,0(r18)
10007824:	903fec1e 	bne	r18,zero,100077d8 <_fwalk_reent+0x34>
10007828:	a805883a 	mov	r2,r21
1000782c:	dfc00617 	ldw	ra,24(sp)
10007830:	dd400517 	ldw	r21,20(sp)
10007834:	dd000417 	ldw	r20,16(sp)
10007838:	dcc00317 	ldw	r19,12(sp)
1000783c:	dc800217 	ldw	r18,8(sp)
10007840:	dc400117 	ldw	r17,4(sp)
10007844:	dc000017 	ldw	r16,0(sp)
10007848:	dec00704 	addi	sp,sp,28
1000784c:	f800283a 	ret
10007850:	002b883a 	mov	r21,zero
10007854:	003ff406 	br	10007828 <_fwalk_reent+0x84>

10007858 <__localeconv_l>:
10007858:	20803c04 	addi	r2,r4,240
1000785c:	f800283a 	ret

10007860 <_localeconv_r>:
10007860:	00840074 	movhi	r2,4097
10007864:	108bc204 	addi	r2,r2,12040
10007868:	f800283a 	ret

1000786c <localeconv>:
1000786c:	00840074 	movhi	r2,4097
10007870:	108bc204 	addi	r2,r2,12040
10007874:	f800283a 	ret

10007878 <__swhatbuf_r>:
10007878:	deffea04 	addi	sp,sp,-88
1000787c:	dc001215 	stw	r16,72(sp)
10007880:	2821883a 	mov	r16,r5
10007884:	2940038f 	ldh	r5,14(r5)
10007888:	dc801415 	stw	r18,80(sp)
1000788c:	dc401315 	stw	r17,76(sp)
10007890:	dfc01515 	stw	ra,84(sp)
10007894:	3023883a 	mov	r17,r6
10007898:	3825883a 	mov	r18,r7
1000789c:	28001016 	blt	r5,zero,100078e0 <__swhatbuf_r+0x68>
100078a0:	d80d883a 	mov	r6,sp
100078a4:	000b5c00 	call	1000b5c0 <_fstat_r>
100078a8:	10000d16 	blt	r2,zero,100078e0 <__swhatbuf_r+0x68>
100078ac:	d8c00117 	ldw	r3,4(sp)
100078b0:	00820004 	movi	r2,2048
100078b4:	18fc000c 	andi	r3,r3,61440
100078b8:	18c80020 	cmpeqi	r3,r3,8192
100078bc:	90c00015 	stw	r3,0(r18)
100078c0:	00c10004 	movi	r3,1024
100078c4:	88c00015 	stw	r3,0(r17)
100078c8:	dfc01517 	ldw	ra,84(sp)
100078cc:	dc801417 	ldw	r18,80(sp)
100078d0:	dc401317 	ldw	r17,76(sp)
100078d4:	dc001217 	ldw	r16,72(sp)
100078d8:	dec01604 	addi	sp,sp,88
100078dc:	f800283a 	ret
100078e0:	8080030b 	ldhu	r2,12(r16)
100078e4:	90000015 	stw	zero,0(r18)
100078e8:	1080200c 	andi	r2,r2,128
100078ec:	10000426 	beq	r2,zero,10007900 <__swhatbuf_r+0x88>
100078f0:	00801004 	movi	r2,64
100078f4:	88800015 	stw	r2,0(r17)
100078f8:	0005883a 	mov	r2,zero
100078fc:	003ff206 	br	100078c8 <__swhatbuf_r+0x50>
10007900:	00810004 	movi	r2,1024
10007904:	88800015 	stw	r2,0(r17)
10007908:	0005883a 	mov	r2,zero
1000790c:	003fee06 	br	100078c8 <__swhatbuf_r+0x50>

10007910 <__smakebuf_r>:
10007910:	28c0030b 	ldhu	r3,12(r5)
10007914:	defffa04 	addi	sp,sp,-24
10007918:	dc000215 	stw	r16,8(sp)
1000791c:	dfc00515 	stw	ra,20(sp)
10007920:	dc800415 	stw	r18,16(sp)
10007924:	dc400315 	stw	r17,12(sp)
10007928:	18c0008c 	andi	r3,r3,2
1000792c:	2821883a 	mov	r16,r5
10007930:	18000b26 	beq	r3,zero,10007960 <__smakebuf_r+0x50>
10007934:	28c010c4 	addi	r3,r5,67
10007938:	28c00015 	stw	r3,0(r5)
1000793c:	28c00415 	stw	r3,16(r5)
10007940:	00c00044 	movi	r3,1
10007944:	28c00515 	stw	r3,20(r5)
10007948:	dfc00517 	ldw	ra,20(sp)
1000794c:	dc800417 	ldw	r18,16(sp)
10007950:	dc400317 	ldw	r17,12(sp)
10007954:	dc000217 	ldw	r16,8(sp)
10007958:	dec00604 	addi	sp,sp,24
1000795c:	f800283a 	ret
10007960:	d9c00104 	addi	r7,sp,4
10007964:	d80d883a 	mov	r6,sp
10007968:	2023883a 	mov	r17,r4
1000796c:	00078780 	call	10007878 <__swhatbuf_r>
10007970:	1025883a 	mov	r18,r2
10007974:	d8800117 	ldw	r2,4(sp)
10007978:	1000131e 	bne	r2,zero,100079c8 <__smakebuf_r+0xb8>
1000797c:	d9400017 	ldw	r5,0(sp)
10007980:	8809883a 	mov	r4,r17
10007984:	0007a4c0 	call	10007a4c <_malloc_r>
10007988:	10001c26 	beq	r2,zero,100079fc <__smakebuf_r+0xec>
1000798c:	01040034 	movhi	r4,4096
10007990:	211aba04 	addi	r4,r4,27368
10007994:	80c0030b 	ldhu	r3,12(r16)
10007998:	89000f15 	stw	r4,60(r17)
1000799c:	80800015 	stw	r2,0(r16)
100079a0:	80800415 	stw	r2,16(r16)
100079a4:	d8800017 	ldw	r2,0(sp)
100079a8:	d9400117 	ldw	r5,4(sp)
100079ac:	18c02014 	ori	r3,r3,128
100079b0:	80c0030d 	sth	r3,12(r16)
100079b4:	80800515 	stw	r2,20(r16)
100079b8:	28001c1e 	bne	r5,zero,10007a2c <__smakebuf_r+0x11c>
100079bc:	90c6b03a 	or	r3,r18,r3
100079c0:	80c0030d 	sth	r3,12(r16)
100079c4:	003fe006 	br	10007948 <__smakebuf_r+0x38>
100079c8:	8140038f 	ldh	r5,14(r16)
100079cc:	8809883a 	mov	r4,r17
100079d0:	000b6200 	call	1000b620 <_isatty_r>
100079d4:	103fe926 	beq	r2,zero,1000797c <__smakebuf_r+0x6c>
100079d8:	8080030b 	ldhu	r2,12(r16)
100079dc:	80c010c4 	addi	r3,r16,67
100079e0:	80c00015 	stw	r3,0(r16)
100079e4:	10800054 	ori	r2,r2,1
100079e8:	8080030d 	sth	r2,12(r16)
100079ec:	00800044 	movi	r2,1
100079f0:	80c00415 	stw	r3,16(r16)
100079f4:	80800515 	stw	r2,20(r16)
100079f8:	003fe006 	br	1000797c <__smakebuf_r+0x6c>
100079fc:	8080030b 	ldhu	r2,12(r16)
10007a00:	10c0800c 	andi	r3,r2,512
10007a04:	183fd01e 	bne	r3,zero,10007948 <__smakebuf_r+0x38>
10007a08:	10bfff0c 	andi	r2,r2,65532
10007a0c:	10800094 	ori	r2,r2,2
10007a10:	80c010c4 	addi	r3,r16,67
10007a14:	8080030d 	sth	r2,12(r16)
10007a18:	00800044 	movi	r2,1
10007a1c:	80c00015 	stw	r3,0(r16)
10007a20:	80c00415 	stw	r3,16(r16)
10007a24:	80800515 	stw	r2,20(r16)
10007a28:	003fc706 	br	10007948 <__smakebuf_r+0x38>
10007a2c:	8140038f 	ldh	r5,14(r16)
10007a30:	8809883a 	mov	r4,r17
10007a34:	000b6200 	call	1000b620 <_isatty_r>
10007a38:	80c0030b 	ldhu	r3,12(r16)
10007a3c:	103fdf26 	beq	r2,zero,100079bc <__smakebuf_r+0xac>
10007a40:	18ffff0c 	andi	r3,r3,65532
10007a44:	18c00054 	ori	r3,r3,1
10007a48:	003fdc06 	br	100079bc <__smakebuf_r+0xac>

10007a4c <_malloc_r>:
10007a4c:	defff604 	addi	sp,sp,-40
10007a50:	dc400115 	stw	r17,4(sp)
10007a54:	2c4002c4 	addi	r17,r5,11
10007a58:	dc800215 	stw	r18,8(sp)
10007a5c:	dfc00915 	stw	ra,36(sp)
10007a60:	df000815 	stw	fp,32(sp)
10007a64:	ddc00715 	stw	r23,28(sp)
10007a68:	dd800615 	stw	r22,24(sp)
10007a6c:	dd400515 	stw	r21,20(sp)
10007a70:	dd000415 	stw	r20,16(sp)
10007a74:	dcc00315 	stw	r19,12(sp)
10007a78:	dc000015 	stw	r16,0(sp)
10007a7c:	888005e8 	cmpgeui	r2,r17,23
10007a80:	2025883a 	mov	r18,r4
10007a84:	10001b1e 	bne	r2,zero,10007af4 <_malloc_r+0xa8>
10007a88:	29400468 	cmpgeui	r5,r5,17
10007a8c:	2800951e 	bne	r5,zero,10007ce4 <_malloc_r+0x298>
10007a90:	000f4b80 	call	1000f4b8 <__malloc_lock>
10007a94:	04400404 	movi	r17,16
10007a98:	00800604 	movi	r2,24
10007a9c:	01800084 	movi	r6,2
10007aa0:	04c40074 	movhi	r19,4097
10007aa4:	9cca8404 	addi	r19,r19,10768
10007aa8:	9885883a 	add	r2,r19,r2
10007aac:	14000117 	ldw	r16,4(r2)
10007ab0:	10fffe04 	addi	r3,r2,-8
10007ab4:	80c09e26 	beq	r16,r3,10007d30 <_malloc_r+0x2e4>
10007ab8:	80800117 	ldw	r2,4(r16)
10007abc:	81000317 	ldw	r4,12(r16)
10007ac0:	00ffff04 	movi	r3,-4
10007ac4:	10c4703a 	and	r2,r2,r3
10007ac8:	81400217 	ldw	r5,8(r16)
10007acc:	8085883a 	add	r2,r16,r2
10007ad0:	10c00117 	ldw	r3,4(r2)
10007ad4:	29000315 	stw	r4,12(r5)
10007ad8:	21400215 	stw	r5,8(r4)
10007adc:	18c00054 	ori	r3,r3,1
10007ae0:	10c00115 	stw	r3,4(r2)
10007ae4:	9009883a 	mov	r4,r18
10007ae8:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10007aec:	80800204 	addi	r2,r16,8
10007af0:	00007f06 	br	10007cf0 <_malloc_r+0x2a4>
10007af4:	00bffe04 	movi	r2,-8
10007af8:	88a2703a 	and	r17,r17,r2
10007afc:	88007916 	blt	r17,zero,10007ce4 <_malloc_r+0x298>
10007b00:	89407836 	bltu	r17,r5,10007ce4 <_malloc_r+0x298>
10007b04:	000f4b80 	call	1000f4b8 <__malloc_lock>
10007b08:	88807e28 	cmpgeui	r2,r17,504
10007b0c:	10013326 	beq	r2,zero,10007fdc <_malloc_r+0x590>
10007b10:	8804d27a 	srli	r2,r17,9
10007b14:	10008226 	beq	r2,zero,10007d20 <_malloc_r+0x2d4>
10007b18:	10c00168 	cmpgeui	r3,r2,5
10007b1c:	1801151e 	bne	r3,zero,10007f74 <_malloc_r+0x528>
10007b20:	8804d1ba 	srli	r2,r17,6
10007b24:	11800e44 	addi	r6,r2,57
10007b28:	300a90fa 	slli	r5,r6,3
10007b2c:	12000e04 	addi	r8,r2,56
10007b30:	04c40074 	movhi	r19,4097
10007b34:	9cca8404 	addi	r19,r19,10768
10007b38:	994b883a 	add	r5,r19,r5
10007b3c:	2c000117 	ldw	r16,4(r5)
10007b40:	297ffe04 	addi	r5,r5,-8
10007b44:	2c001126 	beq	r5,r16,10007b8c <_malloc_r+0x140>
10007b48:	80800117 	ldw	r2,4(r16)
10007b4c:	00ffff04 	movi	r3,-4
10007b50:	10c4703a 	and	r2,r2,r3
10007b54:	1447c83a 	sub	r3,r2,r17
10007b58:	19000408 	cmpgei	r4,r3,16
10007b5c:	2000e81e 	bne	r4,zero,10007f00 <_malloc_r+0x4b4>
10007b60:	1800e90e 	bge	r3,zero,10007f08 <_malloc_r+0x4bc>
10007b64:	01ffff04 	movi	r7,-4
10007b68:	00000606 	br	10007b84 <_malloc_r+0x138>
10007b6c:	80800117 	ldw	r2,4(r16)
10007b70:	11c4703a 	and	r2,r2,r7
10007b74:	1447c83a 	sub	r3,r2,r17
10007b78:	19000408 	cmpgei	r4,r3,16
10007b7c:	2000e01e 	bne	r4,zero,10007f00 <_malloc_r+0x4b4>
10007b80:	1800e10e 	bge	r3,zero,10007f08 <_malloc_r+0x4bc>
10007b84:	84000317 	ldw	r16,12(r16)
10007b88:	2c3ff81e 	bne	r5,r16,10007b6c <_malloc_r+0x120>
10007b8c:	9c000417 	ldw	r16,16(r19)
10007b90:	02040074 	movhi	r8,4097
10007b94:	420a8604 	addi	r8,r8,10776
10007b98:	82006c26 	beq	r16,r8,10007d4c <_malloc_r+0x300>
10007b9c:	80c00117 	ldw	r3,4(r16)
10007ba0:	00bfff04 	movi	r2,-4
10007ba4:	1884703a 	and	r2,r3,r2
10007ba8:	1447c83a 	sub	r3,r2,r17
10007bac:	19000410 	cmplti	r4,r3,16
10007bb0:	20011526 	beq	r4,zero,10008008 <_malloc_r+0x5bc>
10007bb4:	9a000515 	stw	r8,20(r19)
10007bb8:	9a000415 	stw	r8,16(r19)
10007bbc:	18010a0e 	bge	r3,zero,10007fe8 <_malloc_r+0x59c>
10007bc0:	10c08028 	cmpgeui	r3,r2,512
10007bc4:	1800d21e 	bne	r3,zero,10007f10 <_malloc_r+0x4c4>
10007bc8:	1004d0fa 	srli	r2,r2,3
10007bcc:	99400117 	ldw	r5,4(r19)
10007bd0:	10c00044 	addi	r3,r2,1
10007bd4:	1009d0ba 	srai	r4,r2,2
10007bd8:	180690fa 	slli	r3,r3,3
10007bdc:	00800044 	movi	r2,1
10007be0:	1104983a 	sll	r2,r2,r4
10007be4:	98c7883a 	add	r3,r19,r3
10007be8:	19000017 	ldw	r4,0(r3)
10007bec:	1144b03a 	or	r2,r2,r5
10007bf0:	197ffe04 	addi	r5,r3,-8
10007bf4:	81400315 	stw	r5,12(r16)
10007bf8:	81000215 	stw	r4,8(r16)
10007bfc:	98800115 	stw	r2,4(r19)
10007c00:	1c000015 	stw	r16,0(r3)
10007c04:	24000315 	stw	r16,12(r4)
10007c08:	3007d0ba 	srai	r3,r6,2
10007c0c:	01000044 	movi	r4,1
10007c10:	20c8983a 	sll	r4,r4,r3
10007c14:	11005236 	bltu	r2,r4,10007d60 <_malloc_r+0x314>
10007c18:	2086703a 	and	r3,r4,r2
10007c1c:	18000a1e 	bne	r3,zero,10007c48 <_malloc_r+0x1fc>
10007c20:	00ffff04 	movi	r3,-4
10007c24:	2109883a 	add	r4,r4,r4
10007c28:	30cc703a 	and	r6,r6,r3
10007c2c:	2086703a 	and	r3,r4,r2
10007c30:	31800104 	addi	r6,r6,4
10007c34:	1800041e 	bne	r3,zero,10007c48 <_malloc_r+0x1fc>
10007c38:	2109883a 	add	r4,r4,r4
10007c3c:	2086703a 	and	r3,r4,r2
10007c40:	31800104 	addi	r6,r6,4
10007c44:	183ffc26 	beq	r3,zero,10007c38 <_malloc_r+0x1ec>
10007c48:	027fff04 	movi	r9,-4
10007c4c:	301490fa 	slli	r10,r6,3
10007c50:	3017883a 	mov	r11,r6
10007c54:	9a95883a 	add	r10,r19,r10
10007c58:	500f883a 	mov	r7,r10
10007c5c:	3c000317 	ldw	r16,12(r7)
10007c60:	3c00cd26 	beq	r7,r16,10007f98 <_malloc_r+0x54c>
10007c64:	80800117 	ldw	r2,4(r16)
10007c68:	1244703a 	and	r2,r2,r9
10007c6c:	1447c83a 	sub	r3,r2,r17
10007c70:	19400408 	cmpgei	r5,r3,16
10007c74:	2800081e 	bne	r5,zero,10007c98 <_malloc_r+0x24c>
10007c78:	1800cc0e 	bge	r3,zero,10007fac <_malloc_r+0x560>
10007c7c:	84000317 	ldw	r16,12(r16)
10007c80:	3c00c526 	beq	r7,r16,10007f98 <_malloc_r+0x54c>
10007c84:	80800117 	ldw	r2,4(r16)
10007c88:	1244703a 	and	r2,r2,r9
10007c8c:	1447c83a 	sub	r3,r2,r17
10007c90:	19400410 	cmplti	r5,r3,16
10007c94:	283ff81e 	bne	r5,zero,10007c78 <_malloc_r+0x22c>
10007c98:	81000317 	ldw	r4,12(r16)
10007c9c:	81400217 	ldw	r5,8(r16)
10007ca0:	89800054 	ori	r6,r17,1
10007ca4:	81800115 	stw	r6,4(r16)
10007ca8:	29000315 	stw	r4,12(r5)
10007cac:	21400215 	stw	r5,8(r4)
10007cb0:	8463883a 	add	r17,r16,r17
10007cb4:	9c400515 	stw	r17,20(r19)
10007cb8:	9c400415 	stw	r17,16(r19)
10007cbc:	19000054 	ori	r4,r3,1
10007cc0:	89000115 	stw	r4,4(r17)
10007cc4:	8085883a 	add	r2,r16,r2
10007cc8:	8a000315 	stw	r8,12(r17)
10007ccc:	8a000215 	stw	r8,8(r17)
10007cd0:	10c00015 	stw	r3,0(r2)
10007cd4:	9009883a 	mov	r4,r18
10007cd8:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10007cdc:	80800204 	addi	r2,r16,8
10007ce0:	00000306 	br	10007cf0 <_malloc_r+0x2a4>
10007ce4:	00800304 	movi	r2,12
10007ce8:	90800015 	stw	r2,0(r18)
10007cec:	0005883a 	mov	r2,zero
10007cf0:	dfc00917 	ldw	ra,36(sp)
10007cf4:	df000817 	ldw	fp,32(sp)
10007cf8:	ddc00717 	ldw	r23,28(sp)
10007cfc:	dd800617 	ldw	r22,24(sp)
10007d00:	dd400517 	ldw	r21,20(sp)
10007d04:	dd000417 	ldw	r20,16(sp)
10007d08:	dcc00317 	ldw	r19,12(sp)
10007d0c:	dc800217 	ldw	r18,8(sp)
10007d10:	dc400117 	ldw	r17,4(sp)
10007d14:	dc000017 	ldw	r16,0(sp)
10007d18:	dec00a04 	addi	sp,sp,40
10007d1c:	f800283a 	ret
10007d20:	01408004 	movi	r5,512
10007d24:	01801004 	movi	r6,64
10007d28:	02000fc4 	movi	r8,63
10007d2c:	003f8006 	br	10007b30 <_malloc_r+0xe4>
10007d30:	14000317 	ldw	r16,12(r2)
10007d34:	31800084 	addi	r6,r6,2
10007d38:	143f5f1e 	bne	r2,r16,10007ab8 <_malloc_r+0x6c>
10007d3c:	9c000417 	ldw	r16,16(r19)
10007d40:	02040074 	movhi	r8,4097
10007d44:	420a8604 	addi	r8,r8,10776
10007d48:	823f941e 	bne	r16,r8,10007b9c <_malloc_r+0x150>
10007d4c:	3007d0ba 	srai	r3,r6,2
10007d50:	01000044 	movi	r4,1
10007d54:	98800117 	ldw	r2,4(r19)
10007d58:	20c8983a 	sll	r4,r4,r3
10007d5c:	113fae2e 	bgeu	r2,r4,10007c18 <_malloc_r+0x1cc>
10007d60:	9c000217 	ldw	r16,8(r19)
10007d64:	00bfff04 	movi	r2,-4
10007d68:	85000117 	ldw	r20,4(r16)
10007d6c:	a0ac703a 	and	r22,r20,r2
10007d70:	b4400336 	bltu	r22,r17,10007d80 <_malloc_r+0x334>
10007d74:	b445c83a 	sub	r2,r22,r17
10007d78:	10c00408 	cmpgei	r3,r2,16
10007d7c:	1800561e 	bne	r3,zero,10007ed8 <_malloc_r+0x48c>
10007d80:	00840074 	movhi	r2,4097
10007d84:	10906617 	ldw	r2,16792(r2)
10007d88:	00c40074 	movhi	r3,4097
10007d8c:	1d18fc17 	ldw	r20,25584(r3)
10007d90:	10bfffd8 	cmpnei	r2,r2,-1
10007d94:	85ab883a 	add	r21,r16,r22
10007d98:	8d29883a 	add	r20,r17,r20
10007d9c:	1000c826 	beq	r2,zero,100080c0 <_malloc_r+0x674>
10007da0:	a50403c4 	addi	r20,r20,4111
10007da4:	00bc0004 	movi	r2,-4096
10007da8:	a0a8703a 	and	r20,r20,r2
10007dac:	a00b883a 	mov	r5,r20
10007db0:	9009883a 	mov	r4,r18
10007db4:	0009aac0 	call	10009aac <_sbrk_r>
10007db8:	102f883a 	mov	r23,r2
10007dbc:	10bfffd8 	cmpnei	r2,r2,-1
10007dc0:	10009a26 	beq	r2,zero,1000802c <_malloc_r+0x5e0>
10007dc4:	bd409836 	bltu	r23,r21,10008028 <_malloc_r+0x5dc>
10007dc8:	00840074 	movhi	r2,4097
10007dcc:	10990617 	ldw	r2,25624(r2)
10007dd0:	00c40074 	movhi	r3,4097
10007dd4:	a085883a 	add	r2,r20,r2
10007dd8:	18990615 	stw	r2,25624(r3)
10007ddc:	1007883a 	mov	r3,r2
10007de0:	adc0dd26 	beq	r21,r23,10008158 <_malloc_r+0x70c>
10007de4:	00840074 	movhi	r2,4097
10007de8:	10906617 	ldw	r2,16792(r2)
10007dec:	10bfffd8 	cmpnei	r2,r2,-1
10007df0:	1000e026 	beq	r2,zero,10008174 <_malloc_r+0x728>
10007df4:	bd6bc83a 	sub	r21,r23,r21
10007df8:	a8c7883a 	add	r3,r21,r3
10007dfc:	00840074 	movhi	r2,4097
10007e00:	10d90615 	stw	r3,25624(r2)
10007e04:	bf0001cc 	andi	fp,r23,7
10007e08:	e000b626 	beq	fp,zero,100080e4 <_malloc_r+0x698>
10007e0c:	bf2fc83a 	sub	r23,r23,fp
10007e10:	bdc00204 	addi	r23,r23,8
10007e14:	00840204 	movi	r2,4104
10007e18:	1705c83a 	sub	r2,r2,fp
10007e1c:	bd29883a 	add	r20,r23,r20
10007e20:	1505c83a 	sub	r2,r2,r20
10007e24:	1543ffcc 	andi	r21,r2,4095
10007e28:	a80b883a 	mov	r5,r21
10007e2c:	9009883a 	mov	r4,r18
10007e30:	0009aac0 	call	10009aac <_sbrk_r>
10007e34:	10ffffe0 	cmpeqi	r3,r2,-1
10007e38:	1800e41e 	bne	r3,zero,100081cc <_malloc_r+0x780>
10007e3c:	15c5c83a 	sub	r2,r2,r23
10007e40:	1569883a 	add	r20,r2,r21
10007e44:	00840074 	movhi	r2,4097
10007e48:	10990617 	ldw	r2,25624(r2)
10007e4c:	9dc00215 	stw	r23,8(r19)
10007e50:	a5000054 	ori	r20,r20,1
10007e54:	a885883a 	add	r2,r21,r2
10007e58:	00c40074 	movhi	r3,4097
10007e5c:	18990615 	stw	r2,25624(r3)
10007e60:	bd000115 	stw	r20,4(r23)
10007e64:	84c0c626 	beq	r16,r19,10008180 <_malloc_r+0x734>
10007e68:	b0c00428 	cmpgeui	r3,r22,16
10007e6c:	1800c626 	beq	r3,zero,10008188 <_malloc_r+0x73c>
10007e70:	81000117 	ldw	r4,4(r16)
10007e74:	017ffe04 	movi	r5,-8
10007e78:	b0fffd04 	addi	r3,r22,-12
10007e7c:	1946703a 	and	r3,r3,r5
10007e80:	2100004c 	andi	r4,r4,1
10007e84:	20c8b03a 	or	r4,r4,r3
10007e88:	81000115 	stw	r4,4(r16)
10007e8c:	01400144 	movi	r5,5
10007e90:	80c9883a 	add	r4,r16,r3
10007e94:	21400115 	stw	r5,4(r4)
10007e98:	21400215 	stw	r5,8(r4)
10007e9c:	18c00428 	cmpgeui	r3,r3,16
10007ea0:	1800cf1e 	bne	r3,zero,100081e0 <_malloc_r+0x794>
10007ea4:	bd000117 	ldw	r20,4(r23)
10007ea8:	b821883a 	mov	r16,r23
10007eac:	00c40074 	movhi	r3,4097
10007eb0:	18d8fb17 	ldw	r3,25580(r3)
10007eb4:	1880022e 	bgeu	r3,r2,10007ec0 <_malloc_r+0x474>
10007eb8:	00c40074 	movhi	r3,4097
10007ebc:	1898fb15 	stw	r2,25580(r3)
10007ec0:	00c40074 	movhi	r3,4097
10007ec4:	18d8fa17 	ldw	r3,25576(r3)
10007ec8:	18805a2e 	bgeu	r3,r2,10008034 <_malloc_r+0x5e8>
10007ecc:	00c40074 	movhi	r3,4097
10007ed0:	1898fa15 	stw	r2,25576(r3)
10007ed4:	00005706 	br	10008034 <_malloc_r+0x5e8>
10007ed8:	88c00054 	ori	r3,r17,1
10007edc:	80c00115 	stw	r3,4(r16)
10007ee0:	8463883a 	add	r17,r16,r17
10007ee4:	10800054 	ori	r2,r2,1
10007ee8:	9c400215 	stw	r17,8(r19)
10007eec:	88800115 	stw	r2,4(r17)
10007ef0:	9009883a 	mov	r4,r18
10007ef4:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10007ef8:	80800204 	addi	r2,r16,8
10007efc:	003f7c06 	br	10007cf0 <_malloc_r+0x2a4>
10007f00:	400d883a 	mov	r6,r8
10007f04:	003f2106 	br	10007b8c <_malloc_r+0x140>
10007f08:	81000317 	ldw	r4,12(r16)
10007f0c:	003eee06 	br	10007ac8 <_malloc_r+0x7c>
10007f10:	1006d27a 	srli	r3,r2,9
10007f14:	19000168 	cmpgeui	r4,r3,5
10007f18:	20003e26 	beq	r4,zero,10008014 <_malloc_r+0x5c8>
10007f1c:	19000568 	cmpgeui	r4,r3,21
10007f20:	20007a1e 	bne	r4,zero,1000810c <_malloc_r+0x6c0>
10007f24:	19401704 	addi	r5,r3,92
10007f28:	280a90fa 	slli	r5,r5,3
10007f2c:	190016c4 	addi	r4,r3,91
10007f30:	994b883a 	add	r5,r19,r5
10007f34:	28c00017 	ldw	r3,0(r5)
10007f38:	297ffe04 	addi	r5,r5,-8
10007f3c:	28c06226 	beq	r5,r3,100080c8 <_malloc_r+0x67c>
10007f40:	01ffff04 	movi	r7,-4
10007f44:	19000117 	ldw	r4,4(r3)
10007f48:	21c8703a 	and	r4,r4,r7
10007f4c:	1100022e 	bgeu	r2,r4,10007f58 <_malloc_r+0x50c>
10007f50:	18c00217 	ldw	r3,8(r3)
10007f54:	28fffb1e 	bne	r5,r3,10007f44 <_malloc_r+0x4f8>
10007f58:	19400317 	ldw	r5,12(r3)
10007f5c:	98800117 	ldw	r2,4(r19)
10007f60:	81400315 	stw	r5,12(r16)
10007f64:	80c00215 	stw	r3,8(r16)
10007f68:	2c000215 	stw	r16,8(r5)
10007f6c:	1c000315 	stw	r16,12(r3)
10007f70:	003f2506 	br	10007c08 <_malloc_r+0x1bc>
10007f74:	10c00568 	cmpgeui	r3,r2,21
10007f78:	18003826 	beq	r3,zero,1000805c <_malloc_r+0x610>
10007f7c:	10c01568 	cmpgeui	r3,r2,85
10007f80:	1800691e 	bne	r3,zero,10008128 <_malloc_r+0x6dc>
10007f84:	8804d33a 	srli	r2,r17,12
10007f88:	11801bc4 	addi	r6,r2,111
10007f8c:	12001b84 	addi	r8,r2,110
10007f90:	300a90fa 	slli	r5,r6,3
10007f94:	003ee606 	br	10007b30 <_malloc_r+0xe4>
10007f98:	5ac00044 	addi	r11,r11,1
10007f9c:	588000cc 	andi	r2,r11,3
10007fa0:	39c00204 	addi	r7,r7,8
10007fa4:	103f2d1e 	bne	r2,zero,10007c5c <_malloc_r+0x210>
10007fa8:	00003306 	br	10008078 <_malloc_r+0x62c>
10007fac:	8085883a 	add	r2,r16,r2
10007fb0:	10c00117 	ldw	r3,4(r2)
10007fb4:	81000317 	ldw	r4,12(r16)
10007fb8:	81400217 	ldw	r5,8(r16)
10007fbc:	18c00054 	ori	r3,r3,1
10007fc0:	10c00115 	stw	r3,4(r2)
10007fc4:	29000315 	stw	r4,12(r5)
10007fc8:	21400215 	stw	r5,8(r4)
10007fcc:	9009883a 	mov	r4,r18
10007fd0:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10007fd4:	80800204 	addi	r2,r16,8
10007fd8:	003f4506 	br	10007cf0 <_malloc_r+0x2a4>
10007fdc:	880cd0fa 	srli	r6,r17,3
10007fe0:	88800204 	addi	r2,r17,8
10007fe4:	003eae06 	br	10007aa0 <_malloc_r+0x54>
10007fe8:	8085883a 	add	r2,r16,r2
10007fec:	10c00117 	ldw	r3,4(r2)
10007ff0:	9009883a 	mov	r4,r18
10007ff4:	18c00054 	ori	r3,r3,1
10007ff8:	10c00115 	stw	r3,4(r2)
10007ffc:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10008000:	80800204 	addi	r2,r16,8
10008004:	003f3a06 	br	10007cf0 <_malloc_r+0x2a4>
10008008:	89000054 	ori	r4,r17,1
1000800c:	81000115 	stw	r4,4(r16)
10008010:	003f2706 	br	10007cb0 <_malloc_r+0x264>
10008014:	1006d1ba 	srli	r3,r2,6
10008018:	19400e44 	addi	r5,r3,57
1000801c:	19000e04 	addi	r4,r3,56
10008020:	280a90fa 	slli	r5,r5,3
10008024:	003fc206 	br	10007f30 <_malloc_r+0x4e4>
10008028:	84c04626 	beq	r16,r19,10008144 <_malloc_r+0x6f8>
1000802c:	9c000217 	ldw	r16,8(r19)
10008030:	85000117 	ldw	r20,4(r16)
10008034:	00bfff04 	movi	r2,-4
10008038:	a0a8703a 	and	r20,r20,r2
1000803c:	a445c83a 	sub	r2,r20,r17
10008040:	a4400236 	bltu	r20,r17,1000804c <_malloc_r+0x600>
10008044:	10c00408 	cmpgei	r3,r2,16
10008048:	183fa31e 	bne	r3,zero,10007ed8 <_malloc_r+0x48c>
1000804c:	9009883a 	mov	r4,r18
10008050:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10008054:	0005883a 	mov	r2,zero
10008058:	003f2506 	br	10007cf0 <_malloc_r+0x2a4>
1000805c:	11801704 	addi	r6,r2,92
10008060:	120016c4 	addi	r8,r2,91
10008064:	300a90fa 	slli	r5,r6,3
10008068:	003eb106 	br	10007b30 <_malloc_r+0xe4>
1000806c:	50800217 	ldw	r2,8(r10)
10008070:	31bfffc4 	addi	r6,r6,-1
10008074:	1280701e 	bne	r2,r10,10008238 <_malloc_r+0x7ec>
10008078:	308000cc 	andi	r2,r6,3
1000807c:	52bffe04 	addi	r10,r10,-8
10008080:	103ffa1e 	bne	r2,zero,1000806c <_malloc_r+0x620>
10008084:	98c00117 	ldw	r3,4(r19)
10008088:	0104303a 	nor	r2,zero,r4
1000808c:	10c4703a 	and	r2,r2,r3
10008090:	98800115 	stw	r2,4(r19)
10008094:	2109883a 	add	r4,r4,r4
10008098:	113f3136 	bltu	r2,r4,10007d60 <_malloc_r+0x314>
1000809c:	203f3026 	beq	r4,zero,10007d60 <_malloc_r+0x314>
100080a0:	2086703a 	and	r3,r4,r2
100080a4:	1800041e 	bne	r3,zero,100080b8 <_malloc_r+0x66c>
100080a8:	2109883a 	add	r4,r4,r4
100080ac:	2086703a 	and	r3,r4,r2
100080b0:	5ac00104 	addi	r11,r11,4
100080b4:	183ffc26 	beq	r3,zero,100080a8 <_malloc_r+0x65c>
100080b8:	580d883a 	mov	r6,r11
100080bc:	003ee306 	br	10007c4c <_malloc_r+0x200>
100080c0:	a5000404 	addi	r20,r20,16
100080c4:	003f3906 	br	10007dac <_malloc_r+0x360>
100080c8:	2009d0ba 	srai	r4,r4,2
100080cc:	00800044 	movi	r2,1
100080d0:	99c00117 	ldw	r7,4(r19)
100080d4:	1104983a 	sll	r2,r2,r4
100080d8:	11c4b03a 	or	r2,r2,r7
100080dc:	98800115 	stw	r2,4(r19)
100080e0:	003f9f06 	br	10007f60 <_malloc_r+0x514>
100080e4:	bd05883a 	add	r2,r23,r20
100080e8:	0085c83a 	sub	r2,zero,r2
100080ec:	1543ffcc 	andi	r21,r2,4095
100080f0:	a80b883a 	mov	r5,r21
100080f4:	9009883a 	mov	r4,r18
100080f8:	0009aac0 	call	10009aac <_sbrk_r>
100080fc:	10ffffe0 	cmpeqi	r3,r2,-1
10008100:	183f4e26 	beq	r3,zero,10007e3c <_malloc_r+0x3f0>
10008104:	002b883a 	mov	r21,zero
10008108:	003f4e06 	br	10007e44 <_malloc_r+0x3f8>
1000810c:	19001568 	cmpgeui	r4,r3,85
10008110:	2000201e 	bne	r4,zero,10008194 <_malloc_r+0x748>
10008114:	1006d33a 	srli	r3,r2,12
10008118:	19401bc4 	addi	r5,r3,111
1000811c:	19001b84 	addi	r4,r3,110
10008120:	280a90fa 	slli	r5,r5,3
10008124:	003f8206 	br	10007f30 <_malloc_r+0x4e4>
10008128:	10c05568 	cmpgeui	r3,r2,341
1000812c:	1800201e 	bne	r3,zero,100081b0 <_malloc_r+0x764>
10008130:	8804d3fa 	srli	r2,r17,15
10008134:	11801e04 	addi	r6,r2,120
10008138:	12001dc4 	addi	r8,r2,119
1000813c:	300a90fa 	slli	r5,r6,3
10008140:	003e7b06 	br	10007b30 <_malloc_r+0xe4>
10008144:	00840074 	movhi	r2,4097
10008148:	10d90617 	ldw	r3,25624(r2)
1000814c:	a0c7883a 	add	r3,r20,r3
10008150:	10d90615 	stw	r3,25624(r2)
10008154:	003f2306 	br	10007de4 <_malloc_r+0x398>
10008158:	a903ffcc 	andi	r4,r21,4095
1000815c:	203f211e 	bne	r4,zero,10007de4 <_malloc_r+0x398>
10008160:	9c000217 	ldw	r16,8(r19)
10008164:	b529883a 	add	r20,r22,r20
10008168:	a5000054 	ori	r20,r20,1
1000816c:	85000115 	stw	r20,4(r16)
10008170:	003f4e06 	br	10007eac <_malloc_r+0x460>
10008174:	00840074 	movhi	r2,4097
10008178:	15d06615 	stw	r23,16792(r2)
1000817c:	003f2106 	br	10007e04 <_malloc_r+0x3b8>
10008180:	b821883a 	mov	r16,r23
10008184:	003f4906 	br	10007eac <_malloc_r+0x460>
10008188:	00800044 	movi	r2,1
1000818c:	b8800115 	stw	r2,4(r23)
10008190:	003fae06 	br	1000804c <_malloc_r+0x600>
10008194:	19005568 	cmpgeui	r4,r3,341
10008198:	2000191e 	bne	r4,zero,10008200 <_malloc_r+0x7b4>
1000819c:	1006d3fa 	srli	r3,r2,15
100081a0:	19401e04 	addi	r5,r3,120
100081a4:	19001dc4 	addi	r4,r3,119
100081a8:	280a90fa 	slli	r5,r5,3
100081ac:	003f6006 	br	10007f30 <_malloc_r+0x4e4>
100081b0:	10815568 	cmpgeui	r2,r2,1365
100081b4:	1000191e 	bne	r2,zero,1000821c <_malloc_r+0x7d0>
100081b8:	8804d4ba 	srli	r2,r17,18
100081bc:	11801f44 	addi	r6,r2,125
100081c0:	12001f04 	addi	r8,r2,124
100081c4:	300a90fa 	slli	r5,r6,3
100081c8:	003e5906 	br	10007b30 <_malloc_r+0xe4>
100081cc:	e73ffe04 	addi	fp,fp,-8
100081d0:	a729883a 	add	r20,r20,fp
100081d4:	a5e9c83a 	sub	r20,r20,r23
100081d8:	002b883a 	mov	r21,zero
100081dc:	003f1906 	br	10007e44 <_malloc_r+0x3f8>
100081e0:	81400204 	addi	r5,r16,8
100081e4:	9009883a 	mov	r4,r18
100081e8:	0006f400 	call	10006f40 <_free_r>
100081ec:	9c000217 	ldw	r16,8(r19)
100081f0:	00840074 	movhi	r2,4097
100081f4:	10990617 	ldw	r2,25624(r2)
100081f8:	85000117 	ldw	r20,4(r16)
100081fc:	003f2b06 	br	10007eac <_malloc_r+0x460>
10008200:	18c15568 	cmpgeui	r3,r3,1365
10008204:	1800091e 	bne	r3,zero,1000822c <_malloc_r+0x7e0>
10008208:	1006d4ba 	srli	r3,r2,18
1000820c:	19401f44 	addi	r5,r3,125
10008210:	19001f04 	addi	r4,r3,124
10008214:	280a90fa 	slli	r5,r5,3
10008218:	003f4506 	br	10007f30 <_malloc_r+0x4e4>
1000821c:	0140fe04 	movi	r5,1016
10008220:	01801fc4 	movi	r6,127
10008224:	02001f84 	movi	r8,126
10008228:	003e4106 	br	10007b30 <_malloc_r+0xe4>
1000822c:	0140fe04 	movi	r5,1016
10008230:	01001f84 	movi	r4,126
10008234:	003f3e06 	br	10007f30 <_malloc_r+0x4e4>
10008238:	98800117 	ldw	r2,4(r19)
1000823c:	003f9506 	br	10008094 <_malloc_r+0x648>

10008240 <memchr>:
10008240:	208000cc 	andi	r2,r4,3
10008244:	280f883a 	mov	r7,r5
10008248:	10003526 	beq	r2,zero,10008320 <memchr+0xe0>
1000824c:	30bfffc4 	addi	r2,r6,-1
10008250:	30001926 	beq	r6,zero,100082b8 <memchr+0x78>
10008254:	20c00003 	ldbu	r3,0(r4)
10008258:	29803fcc 	andi	r6,r5,255
1000825c:	30c0061e 	bne	r6,r3,10008278 <memchr+0x38>
10008260:	00001706 	br	100082c0 <memchr+0x80>
10008264:	10bfffc4 	addi	r2,r2,-1
10008268:	10ffffe0 	cmpeqi	r3,r2,-1
1000826c:	1800121e 	bne	r3,zero,100082b8 <memchr+0x78>
10008270:	20c00003 	ldbu	r3,0(r4)
10008274:	19801226 	beq	r3,r6,100082c0 <memchr+0x80>
10008278:	21000044 	addi	r4,r4,1
1000827c:	20c000cc 	andi	r3,r4,3
10008280:	183ff81e 	bne	r3,zero,10008264 <memchr+0x24>
10008284:	10c00128 	cmpgeui	r3,r2,4
10008288:	18000f1e 	bne	r3,zero,100082c8 <memchr+0x88>
1000828c:	10000a26 	beq	r2,zero,100082b8 <memchr+0x78>
10008290:	20c00003 	ldbu	r3,0(r4)
10008294:	29403fcc 	andi	r5,r5,255
10008298:	19400926 	beq	r3,r5,100082c0 <memchr+0x80>
1000829c:	2085883a 	add	r2,r4,r2
100082a0:	39403fcc 	andi	r5,r7,255
100082a4:	00000206 	br	100082b0 <memchr+0x70>
100082a8:	20c00003 	ldbu	r3,0(r4)
100082ac:	19400426 	beq	r3,r5,100082c0 <memchr+0x80>
100082b0:	21000044 	addi	r4,r4,1
100082b4:	113ffc1e 	bne	r2,r4,100082a8 <memchr+0x68>
100082b8:	0005883a 	mov	r2,zero
100082bc:	f800283a 	ret
100082c0:	2005883a 	mov	r2,r4
100082c4:	f800283a 	ret
100082c8:	280c923a 	slli	r6,r5,8
100082cc:	2a403fcc 	andi	r9,r5,255
100082d0:	02bfbff4 	movhi	r10,65279
100082d4:	31bfffcc 	andi	r6,r6,65535
100082d8:	3246b03a 	or	r3,r6,r9
100082dc:	1812943a 	slli	r9,r3,16
100082e0:	02202074 	movhi	r8,32897
100082e4:	52bfbfc4 	addi	r10,r10,-257
100082e8:	48d2b03a 	or	r9,r9,r3
100082ec:	42202004 	addi	r8,r8,-32640
100082f0:	20c00017 	ldw	r3,0(r4)
100082f4:	48c6f03a 	xor	r3,r9,r3
100082f8:	1a8d883a 	add	r6,r3,r10
100082fc:	00c6303a 	nor	r3,zero,r3
10008300:	30c6703a 	and	r3,r6,r3
10008304:	1a06703a 	and	r3,r3,r8
10008308:	183fe11e 	bne	r3,zero,10008290 <memchr+0x50>
1000830c:	10bfff04 	addi	r2,r2,-4
10008310:	10c00128 	cmpgeui	r3,r2,4
10008314:	21000104 	addi	r4,r4,4
10008318:	183ff51e 	bne	r3,zero,100082f0 <memchr+0xb0>
1000831c:	003fdb06 	br	1000828c <memchr+0x4c>
10008320:	3005883a 	mov	r2,r6
10008324:	003fd706 	br	10008284 <memchr+0x44>

10008328 <memmove>:
10008328:	2005883a 	mov	r2,r4
1000832c:	29000a2e 	bgeu	r5,r4,10008358 <memmove+0x30>
10008330:	2989883a 	add	r4,r5,r6
10008334:	1100082e 	bgeu	r2,r4,10008358 <memmove+0x30>
10008338:	1187883a 	add	r3,r2,r6
1000833c:	30003e26 	beq	r6,zero,10008438 <memmove+0x110>
10008340:	213fffc4 	addi	r4,r4,-1
10008344:	21400003 	ldbu	r5,0(r4)
10008348:	18ffffc4 	addi	r3,r3,-1
1000834c:	19400005 	stb	r5,0(r3)
10008350:	10fffb1e 	bne	r2,r3,10008340 <memmove+0x18>
10008354:	f800283a 	ret
10008358:	30c00430 	cmpltui	r3,r6,16
1000835c:	18000b26 	beq	r3,zero,1000838c <memmove+0x64>
10008360:	1007883a 	mov	r3,r2
10008364:	31ffffc4 	addi	r7,r6,-1
10008368:	30003726 	beq	r6,zero,10008448 <memmove+0x120>
1000836c:	39c00044 	addi	r7,r7,1
10008370:	29cf883a 	add	r7,r5,r7
10008374:	29400044 	addi	r5,r5,1
10008378:	29bfffc3 	ldbu	r6,-1(r5)
1000837c:	18c00044 	addi	r3,r3,1
10008380:	19bfffc5 	stb	r6,-1(r3)
10008384:	29fffb1e 	bne	r5,r7,10008374 <memmove+0x4c>
10008388:	f800283a 	ret
1000838c:	2886b03a 	or	r3,r5,r2
10008390:	18c000cc 	andi	r3,r3,3
10008394:	1800291e 	bne	r3,zero,1000843c <memmove+0x114>
10008398:	327ffc04 	addi	r9,r6,-16
1000839c:	4812d13a 	srli	r9,r9,4
100083a0:	280f883a 	mov	r7,r5
100083a4:	1007883a 	mov	r3,r2
100083a8:	4a400044 	addi	r9,r9,1
100083ac:	4812913a 	slli	r9,r9,4
100083b0:	1251883a 	add	r8,r2,r9
100083b4:	39000017 	ldw	r4,0(r7)
100083b8:	18c00404 	addi	r3,r3,16
100083bc:	39c00404 	addi	r7,r7,16
100083c0:	193ffc15 	stw	r4,-16(r3)
100083c4:	393ffd17 	ldw	r4,-12(r7)
100083c8:	193ffd15 	stw	r4,-12(r3)
100083cc:	393ffe17 	ldw	r4,-8(r7)
100083d0:	193ffe15 	stw	r4,-8(r3)
100083d4:	393fff17 	ldw	r4,-4(r7)
100083d8:	193fff15 	stw	r4,-4(r3)
100083dc:	40fff51e 	bne	r8,r3,100083b4 <memmove+0x8c>
100083e0:	3100030c 	andi	r4,r6,12
100083e4:	2a4b883a 	add	r5,r5,r9
100083e8:	320003cc 	andi	r8,r6,15
100083ec:	20001726 	beq	r4,zero,1000844c <memmove+0x124>
100083f0:	2813883a 	mov	r9,r5
100083f4:	180f883a 	mov	r7,r3
100083f8:	4a400104 	addi	r9,r9,4
100083fc:	39c00104 	addi	r7,r7,4
10008400:	4abfff17 	ldw	r10,-4(r9)
10008404:	41c9c83a 	sub	r4,r8,r7
10008408:	1909883a 	add	r4,r3,r4
1000840c:	3abfff15 	stw	r10,-4(r7)
10008410:	21000128 	cmpgeui	r4,r4,4
10008414:	203ff81e 	bne	r4,zero,100083f8 <memmove+0xd0>
10008418:	413fff04 	addi	r4,r8,-4
1000841c:	2008d0ba 	srli	r4,r4,2
10008420:	318000cc 	andi	r6,r6,3
10008424:	21000044 	addi	r4,r4,1
10008428:	200890ba 	slli	r4,r4,2
1000842c:	1907883a 	add	r3,r3,r4
10008430:	290b883a 	add	r5,r5,r4
10008434:	003fcb06 	br	10008364 <memmove+0x3c>
10008438:	f800283a 	ret
1000843c:	31ffffc4 	addi	r7,r6,-1
10008440:	1007883a 	mov	r3,r2
10008444:	003fc906 	br	1000836c <memmove+0x44>
10008448:	f800283a 	ret
1000844c:	400d883a 	mov	r6,r8
10008450:	003fc406 	br	10008364 <memmove+0x3c>

10008454 <memset>:
10008454:	20c000cc 	andi	r3,r4,3
10008458:	2005883a 	mov	r2,r4
1000845c:	18003626 	beq	r3,zero,10008538 <memset+0xe4>
10008460:	31ffffc4 	addi	r7,r6,-1
10008464:	30003326 	beq	r6,zero,10008534 <memset+0xe0>
10008468:	2811883a 	mov	r8,r5
1000846c:	2007883a 	mov	r3,r4
10008470:	00000306 	br	10008480 <memset+0x2c>
10008474:	39ffffc4 	addi	r7,r7,-1
10008478:	39bfffe0 	cmpeqi	r6,r7,-1
1000847c:	30002d1e 	bne	r6,zero,10008534 <memset+0xe0>
10008480:	18c00044 	addi	r3,r3,1
10008484:	1a3fffc5 	stb	r8,-1(r3)
10008488:	198000cc 	andi	r6,r3,3
1000848c:	303ff91e 	bne	r6,zero,10008474 <memset+0x20>
10008490:	39000130 	cmpltui	r4,r7,4
10008494:	2000221e 	bne	r4,zero,10008520 <memset+0xcc>
10008498:	29003fcc 	andi	r4,r5,255
1000849c:	200c923a 	slli	r6,r4,8
100084a0:	3a000430 	cmpltui	r8,r7,16
100084a4:	3108b03a 	or	r4,r6,r4
100084a8:	200c943a 	slli	r6,r4,16
100084ac:	310cb03a 	or	r6,r6,r4
100084b0:	40000e1e 	bne	r8,zero,100084ec <memset+0x98>
100084b4:	3a3ffc04 	addi	r8,r7,-16
100084b8:	4010d13a 	srli	r8,r8,4
100084bc:	42000044 	addi	r8,r8,1
100084c0:	4010913a 	slli	r8,r8,4
100084c4:	1a11883a 	add	r8,r3,r8
100084c8:	19800015 	stw	r6,0(r3)
100084cc:	19800115 	stw	r6,4(r3)
100084d0:	19800215 	stw	r6,8(r3)
100084d4:	18c00404 	addi	r3,r3,16
100084d8:	19bfff15 	stw	r6,-4(r3)
100084dc:	40fffa1e 	bne	r8,r3,100084c8 <memset+0x74>
100084e0:	3900030c 	andi	r4,r7,12
100084e4:	39c003cc 	andi	r7,r7,15
100084e8:	20000d26 	beq	r4,zero,10008520 <memset+0xcc>
100084ec:	1809883a 	mov	r4,r3
100084f0:	21000104 	addi	r4,r4,4
100084f4:	3911c83a 	sub	r8,r7,r4
100084f8:	1a11883a 	add	r8,r3,r8
100084fc:	21bfff15 	stw	r6,-4(r4)
10008500:	42000128 	cmpgeui	r8,r8,4
10008504:	403ffa1e 	bne	r8,zero,100084f0 <memset+0x9c>
10008508:	393fff04 	addi	r4,r7,-4
1000850c:	2008d0ba 	srli	r4,r4,2
10008510:	39c000cc 	andi	r7,r7,3
10008514:	21000044 	addi	r4,r4,1
10008518:	200890ba 	slli	r4,r4,2
1000851c:	1907883a 	add	r3,r3,r4
10008520:	38000426 	beq	r7,zero,10008534 <memset+0xe0>
10008524:	19cf883a 	add	r7,r3,r7
10008528:	18c00044 	addi	r3,r3,1
1000852c:	197fffc5 	stb	r5,-1(r3)
10008530:	38fffd1e 	bne	r7,r3,10008528 <memset+0xd4>
10008534:	f800283a 	ret
10008538:	2007883a 	mov	r3,r4
1000853c:	300f883a 	mov	r7,r6
10008540:	003fd306 	br	10008490 <memset+0x3c>

10008544 <_Balloc>:
10008544:	20801317 	ldw	r2,76(r4)
10008548:	defffc04 	addi	sp,sp,-16
1000854c:	dc400115 	stw	r17,4(sp)
10008550:	dc000015 	stw	r16,0(sp)
10008554:	dfc00315 	stw	ra,12(sp)
10008558:	dc800215 	stw	r18,8(sp)
1000855c:	2021883a 	mov	r16,r4
10008560:	2823883a 	mov	r17,r5
10008564:	10000e26 	beq	r2,zero,100085a0 <_Balloc+0x5c>
10008568:	880690ba 	slli	r3,r17,2
1000856c:	10c7883a 	add	r3,r2,r3
10008570:	18800017 	ldw	r2,0(r3)
10008574:	10001126 	beq	r2,zero,100085bc <_Balloc+0x78>
10008578:	11000017 	ldw	r4,0(r2)
1000857c:	19000015 	stw	r4,0(r3)
10008580:	10000415 	stw	zero,16(r2)
10008584:	10000315 	stw	zero,12(r2)
10008588:	dfc00317 	ldw	ra,12(sp)
1000858c:	dc800217 	ldw	r18,8(sp)
10008590:	dc400117 	ldw	r17,4(sp)
10008594:	dc000017 	ldw	r16,0(sp)
10008598:	dec00404 	addi	sp,sp,16
1000859c:	f800283a 	ret
100085a0:	01800844 	movi	r6,33
100085a4:	01400104 	movi	r5,4
100085a8:	000b2100 	call	1000b210 <_calloc_r>
100085ac:	80801315 	stw	r2,76(r16)
100085b0:	103fed1e 	bne	r2,zero,10008568 <_Balloc+0x24>
100085b4:	0005883a 	mov	r2,zero
100085b8:	003ff306 	br	10008588 <_Balloc+0x44>
100085bc:	04800044 	movi	r18,1
100085c0:	9464983a 	sll	r18,r18,r17
100085c4:	01400044 	movi	r5,1
100085c8:	8009883a 	mov	r4,r16
100085cc:	91800144 	addi	r6,r18,5
100085d0:	300c90ba 	slli	r6,r6,2
100085d4:	000b2100 	call	1000b210 <_calloc_r>
100085d8:	103ff626 	beq	r2,zero,100085b4 <_Balloc+0x70>
100085dc:	14400115 	stw	r17,4(r2)
100085e0:	14800215 	stw	r18,8(r2)
100085e4:	003fe606 	br	10008580 <_Balloc+0x3c>

100085e8 <_Bfree>:
100085e8:	28000726 	beq	r5,zero,10008608 <_Bfree+0x20>
100085ec:	28c00117 	ldw	r3,4(r5)
100085f0:	20801317 	ldw	r2,76(r4)
100085f4:	180690ba 	slli	r3,r3,2
100085f8:	10c5883a 	add	r2,r2,r3
100085fc:	10c00017 	ldw	r3,0(r2)
10008600:	28c00015 	stw	r3,0(r5)
10008604:	11400015 	stw	r5,0(r2)
10008608:	f800283a 	ret

1000860c <__multadd>:
1000860c:	defffa04 	addi	sp,sp,-24
10008610:	dc800315 	stw	r18,12(sp)
10008614:	dc400215 	stw	r17,8(sp)
10008618:	dc000115 	stw	r16,4(sp)
1000861c:	2823883a 	mov	r17,r5
10008620:	2c000417 	ldw	r16,16(r5)
10008624:	2025883a 	mov	r18,r4
10008628:	dfc00515 	stw	ra,20(sp)
1000862c:	29000504 	addi	r4,r5,20
10008630:	dcc00415 	stw	r19,16(sp)
10008634:	000b883a 	mov	r5,zero
10008638:	20800017 	ldw	r2,0(r4)
1000863c:	21000104 	addi	r4,r4,4
10008640:	29400044 	addi	r5,r5,1
10008644:	10ffffcc 	andi	r3,r2,65535
10008648:	1987383a 	mul	r3,r3,r6
1000864c:	1004d43a 	srli	r2,r2,16
10008650:	19cf883a 	add	r7,r3,r7
10008654:	1185383a 	mul	r2,r2,r6
10008658:	3810d43a 	srli	r8,r7,16
1000865c:	38ffffcc 	andi	r3,r7,65535
10008660:	120f883a 	add	r7,r2,r8
10008664:	3804943a 	slli	r2,r7,16
10008668:	380ed43a 	srli	r7,r7,16
1000866c:	10c7883a 	add	r3,r2,r3
10008670:	20ffff15 	stw	r3,-4(r4)
10008674:	2c3ff016 	blt	r5,r16,10008638 <__multadd+0x2c>
10008678:	38000826 	beq	r7,zero,1000869c <__multadd+0x90>
1000867c:	88800217 	ldw	r2,8(r17)
10008680:	80800e0e 	bge	r16,r2,100086bc <__multadd+0xb0>
10008684:	80800144 	addi	r2,r16,5
10008688:	100490ba 	slli	r2,r2,2
1000868c:	84000044 	addi	r16,r16,1
10008690:	8885883a 	add	r2,r17,r2
10008694:	11c00015 	stw	r7,0(r2)
10008698:	8c000415 	stw	r16,16(r17)
1000869c:	8805883a 	mov	r2,r17
100086a0:	dfc00517 	ldw	ra,20(sp)
100086a4:	dcc00417 	ldw	r19,16(sp)
100086a8:	dc800317 	ldw	r18,12(sp)
100086ac:	dc400217 	ldw	r17,8(sp)
100086b0:	dc000117 	ldw	r16,4(sp)
100086b4:	dec00604 	addi	sp,sp,24
100086b8:	f800283a 	ret
100086bc:	89400117 	ldw	r5,4(r17)
100086c0:	9009883a 	mov	r4,r18
100086c4:	d9c00015 	stw	r7,0(sp)
100086c8:	29400044 	addi	r5,r5,1
100086cc:	00085440 	call	10008544 <_Balloc>
100086d0:	89800417 	ldw	r6,16(r17)
100086d4:	89400304 	addi	r5,r17,12
100086d8:	11000304 	addi	r4,r2,12
100086dc:	31800084 	addi	r6,r6,2
100086e0:	300c90ba 	slli	r6,r6,2
100086e4:	1027883a 	mov	r19,r2
100086e8:	00028e40 	call	100028e4 <memcpy>
100086ec:	d9c00017 	ldw	r7,0(sp)
100086f0:	88000926 	beq	r17,zero,10008718 <__multadd+0x10c>
100086f4:	88c00117 	ldw	r3,4(r17)
100086f8:	90801317 	ldw	r2,76(r18)
100086fc:	180690ba 	slli	r3,r3,2
10008700:	10c5883a 	add	r2,r2,r3
10008704:	10c00017 	ldw	r3,0(r2)
10008708:	88c00015 	stw	r3,0(r17)
1000870c:	14400015 	stw	r17,0(r2)
10008710:	9823883a 	mov	r17,r19
10008714:	003fdb06 	br	10008684 <__multadd+0x78>
10008718:	9823883a 	mov	r17,r19
1000871c:	003fd906 	br	10008684 <__multadd+0x78>

10008720 <__s2b>:
10008720:	defff904 	addi	sp,sp,-28
10008724:	dc800215 	stw	r18,8(sp)
10008728:	dc000015 	stw	r16,0(sp)
1000872c:	2025883a 	mov	r18,r4
10008730:	2821883a 	mov	r16,r5
10008734:	39000204 	addi	r4,r7,8
10008738:	01400244 	movi	r5,9
1000873c:	dcc00315 	stw	r19,12(sp)
10008740:	dc400115 	stw	r17,4(sp)
10008744:	dfc00615 	stw	ra,24(sp)
10008748:	3823883a 	mov	r17,r7
1000874c:	dd400515 	stw	r21,20(sp)
10008750:	dd000415 	stw	r20,16(sp)
10008754:	3027883a 	mov	r19,r6
10008758:	000c6580 	call	1000c658 <__divsi3>
1000875c:	88c00290 	cmplti	r3,r17,10
10008760:	1800311e 	bne	r3,zero,10008828 <__s2b+0x108>
10008764:	00c00044 	movi	r3,1
10008768:	000b883a 	mov	r5,zero
1000876c:	18c7883a 	add	r3,r3,r3
10008770:	29400044 	addi	r5,r5,1
10008774:	18bffd16 	blt	r3,r2,1000876c <__s2b+0x4c>
10008778:	9009883a 	mov	r4,r18
1000877c:	00085440 	call	10008544 <_Balloc>
10008780:	d8c00717 	ldw	r3,28(sp)
10008784:	10c00515 	stw	r3,20(r2)
10008788:	00c00044 	movi	r3,1
1000878c:	10c00415 	stw	r3,16(r2)
10008790:	98c00290 	cmplti	r3,r19,10
10008794:	1800211e 	bne	r3,zero,1000881c <__s2b+0xfc>
10008798:	85400244 	addi	r21,r16,9
1000879c:	84e9883a 	add	r20,r16,r19
100087a0:	a821883a 	mov	r16,r21
100087a4:	84000044 	addi	r16,r16,1
100087a8:	81ffffc7 	ldb	r7,-1(r16)
100087ac:	01800284 	movi	r6,10
100087b0:	100b883a 	mov	r5,r2
100087b4:	39fff404 	addi	r7,r7,-48
100087b8:	9009883a 	mov	r4,r18
100087bc:	000860c0 	call	1000860c <__multadd>
100087c0:	a43ff81e 	bne	r20,r16,100087a4 <__s2b+0x84>
100087c4:	9c3ffe04 	addi	r16,r19,-8
100087c8:	ac21883a 	add	r16,r21,r16
100087cc:	9c400a0e 	bge	r19,r17,100087f8 <__s2b+0xd8>
100087d0:	8ce3c83a 	sub	r17,r17,r19
100087d4:	8463883a 	add	r17,r16,r17
100087d8:	84000044 	addi	r16,r16,1
100087dc:	81ffffc7 	ldb	r7,-1(r16)
100087e0:	01800284 	movi	r6,10
100087e4:	100b883a 	mov	r5,r2
100087e8:	39fff404 	addi	r7,r7,-48
100087ec:	9009883a 	mov	r4,r18
100087f0:	000860c0 	call	1000860c <__multadd>
100087f4:	8c3ff81e 	bne	r17,r16,100087d8 <__s2b+0xb8>
100087f8:	dfc00617 	ldw	ra,24(sp)
100087fc:	dd400517 	ldw	r21,20(sp)
10008800:	dd000417 	ldw	r20,16(sp)
10008804:	dcc00317 	ldw	r19,12(sp)
10008808:	dc800217 	ldw	r18,8(sp)
1000880c:	dc400117 	ldw	r17,4(sp)
10008810:	dc000017 	ldw	r16,0(sp)
10008814:	dec00704 	addi	sp,sp,28
10008818:	f800283a 	ret
1000881c:	84000284 	addi	r16,r16,10
10008820:	04c00244 	movi	r19,9
10008824:	003fe906 	br	100087cc <__s2b+0xac>
10008828:	000b883a 	mov	r5,zero
1000882c:	003fd206 	br	10008778 <__s2b+0x58>

10008830 <__hi0bits>:
10008830:	20bfffec 	andhi	r2,r4,65535
10008834:	1000131e 	bne	r2,zero,10008884 <__hi0bits+0x54>
10008838:	2008943a 	slli	r4,r4,16
1000883c:	00800404 	movi	r2,16
10008840:	20ffc02c 	andhi	r3,r4,65280
10008844:	1800021e 	bne	r3,zero,10008850 <__hi0bits+0x20>
10008848:	2008923a 	slli	r4,r4,8
1000884c:	10800204 	addi	r2,r2,8
10008850:	20fc002c 	andhi	r3,r4,61440
10008854:	1800021e 	bne	r3,zero,10008860 <__hi0bits+0x30>
10008858:	2008913a 	slli	r4,r4,4
1000885c:	10800104 	addi	r2,r2,4
10008860:	20f0002c 	andhi	r3,r4,49152
10008864:	1800021e 	bne	r3,zero,10008870 <__hi0bits+0x40>
10008868:	200890ba 	slli	r4,r4,2
1000886c:	10800084 	addi	r2,r2,2
10008870:	20000316 	blt	r4,zero,10008880 <__hi0bits+0x50>
10008874:	2110002c 	andhi	r4,r4,16384
10008878:	10800044 	addi	r2,r2,1
1000887c:	20000326 	beq	r4,zero,1000888c <__hi0bits+0x5c>
10008880:	f800283a 	ret
10008884:	0005883a 	mov	r2,zero
10008888:	003fed06 	br	10008840 <__hi0bits+0x10>
1000888c:	00800804 	movi	r2,32
10008890:	f800283a 	ret

10008894 <__lo0bits>:
10008894:	20c00017 	ldw	r3,0(r4)
10008898:	188001cc 	andi	r2,r3,7
1000889c:	10000826 	beq	r2,zero,100088c0 <__lo0bits+0x2c>
100088a0:	1880004c 	andi	r2,r3,1
100088a4:	10001f1e 	bne	r2,zero,10008924 <__lo0bits+0x90>
100088a8:	1880008c 	andi	r2,r3,2
100088ac:	10002126 	beq	r2,zero,10008934 <__lo0bits+0xa0>
100088b0:	1806d07a 	srli	r3,r3,1
100088b4:	00800044 	movi	r2,1
100088b8:	20c00015 	stw	r3,0(r4)
100088bc:	f800283a 	ret
100088c0:	18bfffcc 	andi	r2,r3,65535
100088c4:	1000151e 	bne	r2,zero,1000891c <__lo0bits+0x88>
100088c8:	1806d43a 	srli	r3,r3,16
100088cc:	00800404 	movi	r2,16
100088d0:	19403fcc 	andi	r5,r3,255
100088d4:	2800021e 	bne	r5,zero,100088e0 <__lo0bits+0x4c>
100088d8:	1806d23a 	srli	r3,r3,8
100088dc:	10800204 	addi	r2,r2,8
100088e0:	194003cc 	andi	r5,r3,15
100088e4:	2800021e 	bne	r5,zero,100088f0 <__lo0bits+0x5c>
100088e8:	1806d13a 	srli	r3,r3,4
100088ec:	10800104 	addi	r2,r2,4
100088f0:	194000cc 	andi	r5,r3,3
100088f4:	2800021e 	bne	r5,zero,10008900 <__lo0bits+0x6c>
100088f8:	1806d0ba 	srli	r3,r3,2
100088fc:	10800084 	addi	r2,r2,2
10008900:	1940004c 	andi	r5,r3,1
10008904:	2800031e 	bne	r5,zero,10008914 <__lo0bits+0x80>
10008908:	1806d07a 	srli	r3,r3,1
1000890c:	10800044 	addi	r2,r2,1
10008910:	18000626 	beq	r3,zero,1000892c <__lo0bits+0x98>
10008914:	20c00015 	stw	r3,0(r4)
10008918:	f800283a 	ret
1000891c:	0005883a 	mov	r2,zero
10008920:	003feb06 	br	100088d0 <__lo0bits+0x3c>
10008924:	0005883a 	mov	r2,zero
10008928:	f800283a 	ret
1000892c:	00800804 	movi	r2,32
10008930:	f800283a 	ret
10008934:	1806d0ba 	srli	r3,r3,2
10008938:	00800084 	movi	r2,2
1000893c:	20c00015 	stw	r3,0(r4)
10008940:	f800283a 	ret

10008944 <__i2b>:
10008944:	defffe04 	addi	sp,sp,-8
10008948:	dc000015 	stw	r16,0(sp)
1000894c:	2821883a 	mov	r16,r5
10008950:	01400044 	movi	r5,1
10008954:	dfc00115 	stw	ra,4(sp)
10008958:	00085440 	call	10008544 <_Balloc>
1000895c:	01000044 	movi	r4,1
10008960:	14000515 	stw	r16,20(r2)
10008964:	11000415 	stw	r4,16(r2)
10008968:	dfc00117 	ldw	ra,4(sp)
1000896c:	dc000017 	ldw	r16,0(sp)
10008970:	dec00204 	addi	sp,sp,8
10008974:	f800283a 	ret

10008978 <__multiply>:
10008978:	defffa04 	addi	sp,sp,-24
1000897c:	dd000415 	stw	r20,16(sp)
10008980:	dcc00315 	stw	r19,12(sp)
10008984:	35000417 	ldw	r20,16(r6)
10008988:	2cc00417 	ldw	r19,16(r5)
1000898c:	dc800215 	stw	r18,8(sp)
10008990:	dc400115 	stw	r17,4(sp)
10008994:	dfc00515 	stw	ra,20(sp)
10008998:	dc000015 	stw	r16,0(sp)
1000899c:	2823883a 	mov	r17,r5
100089a0:	3025883a 	mov	r18,r6
100089a4:	9d000516 	blt	r19,r20,100089bc <__multiply+0x44>
100089a8:	a007883a 	mov	r3,r20
100089ac:	2825883a 	mov	r18,r5
100089b0:	9829883a 	mov	r20,r19
100089b4:	3023883a 	mov	r17,r6
100089b8:	1827883a 	mov	r19,r3
100089bc:	90800217 	ldw	r2,8(r18)
100089c0:	a4e1883a 	add	r16,r20,r19
100089c4:	91400117 	ldw	r5,4(r18)
100089c8:	1400010e 	bge	r2,r16,100089d0 <__multiply+0x58>
100089cc:	29400044 	addi	r5,r5,1
100089d0:	00085440 	call	10008544 <_Balloc>
100089d4:	801290ba 	slli	r9,r16,2
100089d8:	12800504 	addi	r10,r2,20
100089dc:	5007883a 	mov	r3,r10
100089e0:	5253883a 	add	r9,r10,r9
100089e4:	5240032e 	bgeu	r10,r9,100089f4 <__multiply+0x7c>
100089e8:	18000015 	stw	zero,0(r3)
100089ec:	18c00104 	addi	r3,r3,4
100089f0:	1a7ffd36 	bltu	r3,r9,100089e8 <__multiply+0x70>
100089f4:	981690ba 	slli	r11,r19,2
100089f8:	a01090ba 	slli	r8,r20,2
100089fc:	89400504 	addi	r5,r17,20
10008a00:	91800504 	addi	r6,r18,20
10008a04:	2ad7883a 	add	r11,r5,r11
10008a08:	3211883a 	add	r8,r6,r8
10008a0c:	2ac00636 	bltu	r5,r11,10008a28 <__multiply+0xb0>
10008a10:	00004106 	br	10008b18 <__multiply+0x1a0>
10008a14:	701cd43a 	srli	r14,r14,16
10008a18:	7000221e 	bne	r14,zero,10008aa4 <__multiply+0x12c>
10008a1c:	29400104 	addi	r5,r5,4
10008a20:	52800104 	addi	r10,r10,4
10008a24:	2ac03c2e 	bgeu	r5,r11,10008b18 <__multiply+0x1a0>
10008a28:	2b800017 	ldw	r14,0(r5)
10008a2c:	73ffffcc 	andi	r15,r14,65535
10008a30:	783ff826 	beq	r15,zero,10008a14 <__multiply+0x9c>
10008a34:	501b883a 	mov	r13,r10
10008a38:	301d883a 	mov	r14,r6
10008a3c:	003f883a 	mov	ra,zero
10008a40:	71000017 	ldw	r4,0(r14)
10008a44:	6b000017 	ldw	r12,0(r13)
10008a48:	6b400104 	addi	r13,r13,4
10008a4c:	21ffffcc 	andi	r7,r4,65535
10008a50:	3bcf383a 	mul	r7,r7,r15
10008a54:	2006d43a 	srli	r3,r4,16
10008a58:	613fffcc 	andi	r4,r12,65535
10008a5c:	390f883a 	add	r7,r7,r4
10008a60:	3fcf883a 	add	r7,r7,ra
10008a64:	1bc7383a 	mul	r3,r3,r15
10008a68:	6018d43a 	srli	r12,r12,16
10008a6c:	3808d43a 	srli	r4,r7,16
10008a70:	39ffffcc 	andi	r7,r7,65535
10008a74:	1b07883a 	add	r3,r3,r12
10008a78:	1907883a 	add	r3,r3,r4
10008a7c:	1808943a 	slli	r4,r3,16
10008a80:	73800104 	addi	r14,r14,4
10008a84:	183ed43a 	srli	ra,r3,16
10008a88:	21ceb03a 	or	r7,r4,r7
10008a8c:	69ffff15 	stw	r7,-4(r13)
10008a90:	723feb36 	bltu	r14,r8,10008a40 <__multiply+0xc8>
10008a94:	6fc00015 	stw	ra,0(r13)
10008a98:	2b800017 	ldw	r14,0(r5)
10008a9c:	701cd43a 	srli	r14,r14,16
10008aa0:	703fde26 	beq	r14,zero,10008a1c <__multiply+0xa4>
10008aa4:	50c00017 	ldw	r3,0(r10)
10008aa8:	501b883a 	mov	r13,r10
10008aac:	3019883a 	mov	r12,r6
10008ab0:	180f883a 	mov	r7,r3
10008ab4:	001f883a 	mov	r15,zero
10008ab8:	6100000b 	ldhu	r4,0(r12)
10008abc:	380ed43a 	srli	r7,r7,16
10008ac0:	18ffffcc 	andi	r3,r3,65535
10008ac4:	2389383a 	mul	r4,r4,r14
10008ac8:	6b400104 	addi	r13,r13,4
10008acc:	63000104 	addi	r12,r12,4
10008ad0:	21c9883a 	add	r4,r4,r7
10008ad4:	23c9883a 	add	r4,r4,r15
10008ad8:	201e943a 	slli	r15,r4,16
10008adc:	69c00017 	ldw	r7,0(r13)
10008ae0:	2008d43a 	srli	r4,r4,16
10008ae4:	78c6b03a 	or	r3,r15,r3
10008ae8:	68ffff15 	stw	r3,-4(r13)
10008aec:	60ffff8b 	ldhu	r3,-2(r12)
10008af0:	3bffffcc 	andi	r15,r7,65535
10008af4:	1b87383a 	mul	r3,r3,r14
10008af8:	1bc7883a 	add	r3,r3,r15
10008afc:	1907883a 	add	r3,r3,r4
10008b00:	181ed43a 	srli	r15,r3,16
10008b04:	623fec36 	bltu	r12,r8,10008ab8 <__multiply+0x140>
10008b08:	68c00015 	stw	r3,0(r13)
10008b0c:	29400104 	addi	r5,r5,4
10008b10:	52800104 	addi	r10,r10,4
10008b14:	2affc436 	bltu	r5,r11,10008a28 <__multiply+0xb0>
10008b18:	0400090e 	bge	zero,r16,10008b40 <__multiply+0x1c8>
10008b1c:	48ffff17 	ldw	r3,-4(r9)
10008b20:	4a7fff04 	addi	r9,r9,-4
10008b24:	18000326 	beq	r3,zero,10008b34 <__multiply+0x1bc>
10008b28:	00000506 	br	10008b40 <__multiply+0x1c8>
10008b2c:	48c00017 	ldw	r3,0(r9)
10008b30:	1800031e 	bne	r3,zero,10008b40 <__multiply+0x1c8>
10008b34:	843fffc4 	addi	r16,r16,-1
10008b38:	4a7fff04 	addi	r9,r9,-4
10008b3c:	803ffb1e 	bne	r16,zero,10008b2c <__multiply+0x1b4>
10008b40:	14000415 	stw	r16,16(r2)
10008b44:	dfc00517 	ldw	ra,20(sp)
10008b48:	dd000417 	ldw	r20,16(sp)
10008b4c:	dcc00317 	ldw	r19,12(sp)
10008b50:	dc800217 	ldw	r18,8(sp)
10008b54:	dc400117 	ldw	r17,4(sp)
10008b58:	dc000017 	ldw	r16,0(sp)
10008b5c:	dec00604 	addi	sp,sp,24
10008b60:	f800283a 	ret

10008b64 <__pow5mult>:
10008b64:	defffb04 	addi	sp,sp,-20
10008b68:	dcc00315 	stw	r19,12(sp)
10008b6c:	dc000015 	stw	r16,0(sp)
10008b70:	dfc00415 	stw	ra,16(sp)
10008b74:	dc800215 	stw	r18,8(sp)
10008b78:	dc400115 	stw	r17,4(sp)
10008b7c:	308000cc 	andi	r2,r6,3
10008b80:	3021883a 	mov	r16,r6
10008b84:	2027883a 	mov	r19,r4
10008b88:	10002d1e 	bne	r2,zero,10008c40 <__pow5mult+0xdc>
10008b8c:	2825883a 	mov	r18,r5
10008b90:	8021d0ba 	srai	r16,r16,2
10008b94:	80001926 	beq	r16,zero,10008bfc <__pow5mult+0x98>
10008b98:	9c401217 	ldw	r17,72(r19)
10008b9c:	8800061e 	bne	r17,zero,10008bb8 <__pow5mult+0x54>
10008ba0:	00002f06 	br	10008c60 <__pow5mult+0xfc>
10008ba4:	8021d07a 	srai	r16,r16,1
10008ba8:	80001426 	beq	r16,zero,10008bfc <__pow5mult+0x98>
10008bac:	88800017 	ldw	r2,0(r17)
10008bb0:	10001a26 	beq	r2,zero,10008c1c <__pow5mult+0xb8>
10008bb4:	1023883a 	mov	r17,r2
10008bb8:	8080004c 	andi	r2,r16,1
10008bbc:	103ff926 	beq	r2,zero,10008ba4 <__pow5mult+0x40>
10008bc0:	880d883a 	mov	r6,r17
10008bc4:	900b883a 	mov	r5,r18
10008bc8:	9809883a 	mov	r4,r19
10008bcc:	00089780 	call	10008978 <__multiply>
10008bd0:	90001926 	beq	r18,zero,10008c38 <__pow5mult+0xd4>
10008bd4:	91000117 	ldw	r4,4(r18)
10008bd8:	98c01317 	ldw	r3,76(r19)
10008bdc:	8021d07a 	srai	r16,r16,1
10008be0:	200890ba 	slli	r4,r4,2
10008be4:	1907883a 	add	r3,r3,r4
10008be8:	19000017 	ldw	r4,0(r3)
10008bec:	91000015 	stw	r4,0(r18)
10008bf0:	1c800015 	stw	r18,0(r3)
10008bf4:	1025883a 	mov	r18,r2
10008bf8:	803fec1e 	bne	r16,zero,10008bac <__pow5mult+0x48>
10008bfc:	9005883a 	mov	r2,r18
10008c00:	dfc00417 	ldw	ra,16(sp)
10008c04:	dcc00317 	ldw	r19,12(sp)
10008c08:	dc800217 	ldw	r18,8(sp)
10008c0c:	dc400117 	ldw	r17,4(sp)
10008c10:	dc000017 	ldw	r16,0(sp)
10008c14:	dec00504 	addi	sp,sp,20
10008c18:	f800283a 	ret
10008c1c:	880d883a 	mov	r6,r17
10008c20:	880b883a 	mov	r5,r17
10008c24:	9809883a 	mov	r4,r19
10008c28:	00089780 	call	10008978 <__multiply>
10008c2c:	88800015 	stw	r2,0(r17)
10008c30:	10000015 	stw	zero,0(r2)
10008c34:	003fdf06 	br	10008bb4 <__pow5mult+0x50>
10008c38:	1025883a 	mov	r18,r2
10008c3c:	003fd906 	br	10008ba4 <__pow5mult+0x40>
10008c40:	100490ba 	slli	r2,r2,2
10008c44:	00c40074 	movhi	r3,4097
10008c48:	000f883a 	mov	r7,zero
10008c4c:	10c7883a 	add	r3,r2,r3
10008c50:	1986a717 	ldw	r6,6812(r3)
10008c54:	000860c0 	call	1000860c <__multadd>
10008c58:	1025883a 	mov	r18,r2
10008c5c:	003fcc06 	br	10008b90 <__pow5mult+0x2c>
10008c60:	01400044 	movi	r5,1
10008c64:	9809883a 	mov	r4,r19
10008c68:	00085440 	call	10008544 <_Balloc>
10008c6c:	1023883a 	mov	r17,r2
10008c70:	00809c44 	movi	r2,625
10008c74:	88800515 	stw	r2,20(r17)
10008c78:	00800044 	movi	r2,1
10008c7c:	88800415 	stw	r2,16(r17)
10008c80:	9c401215 	stw	r17,72(r19)
10008c84:	88000015 	stw	zero,0(r17)
10008c88:	003fcb06 	br	10008bb8 <__pow5mult+0x54>

10008c8c <__lshift>:
10008c8c:	defff904 	addi	sp,sp,-28
10008c90:	dcc00315 	stw	r19,12(sp)
10008c94:	dc400115 	stw	r17,4(sp)
10008c98:	2cc00417 	ldw	r19,16(r5)
10008c9c:	3023d17a 	srai	r17,r6,5
10008ca0:	28800217 	ldw	r2,8(r5)
10008ca4:	dd400515 	stw	r21,20(sp)
10008ca8:	8ce7883a 	add	r19,r17,r19
10008cac:	dd000415 	stw	r20,16(sp)
10008cb0:	dc800215 	stw	r18,8(sp)
10008cb4:	dc000015 	stw	r16,0(sp)
10008cb8:	dfc00615 	stw	ra,24(sp)
10008cbc:	9c000044 	addi	r16,r19,1
10008cc0:	2825883a 	mov	r18,r5
10008cc4:	302b883a 	mov	r21,r6
10008cc8:	2029883a 	mov	r20,r4
10008ccc:	29400117 	ldw	r5,4(r5)
10008cd0:	1400030e 	bge	r2,r16,10008ce0 <__lshift+0x54>
10008cd4:	1085883a 	add	r2,r2,r2
10008cd8:	29400044 	addi	r5,r5,1
10008cdc:	143ffd16 	blt	r2,r16,10008cd4 <__lshift+0x48>
10008ce0:	a009883a 	mov	r4,r20
10008ce4:	00085440 	call	10008544 <_Balloc>
10008ce8:	11000504 	addi	r4,r2,20
10008cec:	0440090e 	bge	zero,r17,10008d14 <__lshift+0x88>
10008cf0:	8c400144 	addi	r17,r17,5
10008cf4:	882290ba 	slli	r17,r17,2
10008cf8:	2007883a 	mov	r3,r4
10008cfc:	144b883a 	add	r5,r2,r17
10008d00:	18c00104 	addi	r3,r3,4
10008d04:	183fff15 	stw	zero,-4(r3)
10008d08:	28fffd1e 	bne	r5,r3,10008d00 <__lshift+0x74>
10008d0c:	8c7ffb04 	addi	r17,r17,-20
10008d10:	2449883a 	add	r4,r4,r17
10008d14:	92000417 	ldw	r8,16(r18)
10008d18:	90c00504 	addi	r3,r18,20
10008d1c:	a98007cc 	andi	r6,r21,31
10008d20:	401090ba 	slli	r8,r8,2
10008d24:	1a11883a 	add	r8,r3,r8
10008d28:	30002126 	beq	r6,zero,10008db0 <__lshift+0x124>
10008d2c:	02400804 	movi	r9,32
10008d30:	4993c83a 	sub	r9,r9,r6
10008d34:	000f883a 	mov	r7,zero
10008d38:	19400017 	ldw	r5,0(r3)
10008d3c:	21000104 	addi	r4,r4,4
10008d40:	18c00104 	addi	r3,r3,4
10008d44:	298a983a 	sll	r5,r5,r6
10008d48:	29cab03a 	or	r5,r5,r7
10008d4c:	217fff15 	stw	r5,-4(r4)
10008d50:	197fff17 	ldw	r5,-4(r3)
10008d54:	2a4ed83a 	srl	r7,r5,r9
10008d58:	1a3ff736 	bltu	r3,r8,10008d38 <__lshift+0xac>
10008d5c:	21c00015 	stw	r7,0(r4)
10008d60:	38000126 	beq	r7,zero,10008d68 <__lshift+0xdc>
10008d64:	8027883a 	mov	r19,r16
10008d68:	14c00415 	stw	r19,16(r2)
10008d6c:	90000726 	beq	r18,zero,10008d8c <__lshift+0x100>
10008d70:	91000117 	ldw	r4,4(r18)
10008d74:	a0c01317 	ldw	r3,76(r20)
10008d78:	200890ba 	slli	r4,r4,2
10008d7c:	1907883a 	add	r3,r3,r4
10008d80:	19000017 	ldw	r4,0(r3)
10008d84:	91000015 	stw	r4,0(r18)
10008d88:	1c800015 	stw	r18,0(r3)
10008d8c:	dfc00617 	ldw	ra,24(sp)
10008d90:	dd400517 	ldw	r21,20(sp)
10008d94:	dd000417 	ldw	r20,16(sp)
10008d98:	dcc00317 	ldw	r19,12(sp)
10008d9c:	dc800217 	ldw	r18,8(sp)
10008da0:	dc400117 	ldw	r17,4(sp)
10008da4:	dc000017 	ldw	r16,0(sp)
10008da8:	dec00704 	addi	sp,sp,28
10008dac:	f800283a 	ret
10008db0:	18c00104 	addi	r3,r3,4
10008db4:	197fff17 	ldw	r5,-4(r3)
10008db8:	21000104 	addi	r4,r4,4
10008dbc:	217fff15 	stw	r5,-4(r4)
10008dc0:	1a3ffb36 	bltu	r3,r8,10008db0 <__lshift+0x124>
10008dc4:	003fe806 	br	10008d68 <__lshift+0xdc>

10008dc8 <__mcmp>:
10008dc8:	20800417 	ldw	r2,16(r4)
10008dcc:	28c00417 	ldw	r3,16(r5)
10008dd0:	10c5c83a 	sub	r2,r2,r3
10008dd4:	10000e1e 	bne	r2,zero,10008e10 <__mcmp+0x48>
10008dd8:	180c90ba 	slli	r6,r3,2
10008ddc:	21000504 	addi	r4,r4,20
10008de0:	29400504 	addi	r5,r5,20
10008de4:	2187883a 	add	r3,r4,r6
10008de8:	298b883a 	add	r5,r5,r6
10008dec:	00000106 	br	10008df4 <__mcmp+0x2c>
10008df0:	20c0082e 	bgeu	r4,r3,10008e14 <__mcmp+0x4c>
10008df4:	18ffff04 	addi	r3,r3,-4
10008df8:	297fff04 	addi	r5,r5,-4
10008dfc:	19c00017 	ldw	r7,0(r3)
10008e00:	29800017 	ldw	r6,0(r5)
10008e04:	39bffa26 	beq	r7,r6,10008df0 <__mcmp+0x28>
10008e08:	3980032e 	bgeu	r7,r6,10008e18 <__mcmp+0x50>
10008e0c:	00bfffc4 	movi	r2,-1
10008e10:	f800283a 	ret
10008e14:	f800283a 	ret
10008e18:	00800044 	movi	r2,1
10008e1c:	f800283a 	ret

10008e20 <__mdiff>:
10008e20:	defffa04 	addi	sp,sp,-24
10008e24:	dc800215 	stw	r18,8(sp)
10008e28:	30c00417 	ldw	r3,16(r6)
10008e2c:	2c800417 	ldw	r18,16(r5)
10008e30:	dd000415 	stw	r20,16(sp)
10008e34:	dcc00315 	stw	r19,12(sp)
10008e38:	dc400115 	stw	r17,4(sp)
10008e3c:	dc000015 	stw	r16,0(sp)
10008e40:	dfc00515 	stw	ra,20(sp)
10008e44:	90e5c83a 	sub	r18,r18,r3
10008e48:	2827883a 	mov	r19,r5
10008e4c:	3029883a 	mov	r20,r6
10008e50:	2c000504 	addi	r16,r5,20
10008e54:	34400504 	addi	r17,r6,20
10008e58:	9000131e 	bne	r18,zero,10008ea8 <__mdiff+0x88>
10008e5c:	180690ba 	slli	r3,r3,2
10008e60:	80c5883a 	add	r2,r16,r3
10008e64:	88c7883a 	add	r3,r17,r3
10008e68:	00000106 	br	10008e70 <__mdiff+0x50>
10008e6c:	8080552e 	bgeu	r16,r2,10008fc4 <__mdiff+0x1a4>
10008e70:	10bfff04 	addi	r2,r2,-4
10008e74:	18ffff04 	addi	r3,r3,-4
10008e78:	11c00017 	ldw	r7,0(r2)
10008e7c:	19400017 	ldw	r5,0(r3)
10008e80:	397ffa26 	beq	r7,r5,10008e6c <__mdiff+0x4c>
10008e84:	39400a2e 	bgeu	r7,r5,10008eb0 <__mdiff+0x90>
10008e88:	8007883a 	mov	r3,r16
10008e8c:	9805883a 	mov	r2,r19
10008e90:	8821883a 	mov	r16,r17
10008e94:	a027883a 	mov	r19,r20
10008e98:	1823883a 	mov	r17,r3
10008e9c:	1029883a 	mov	r20,r2
10008ea0:	04800044 	movi	r18,1
10008ea4:	00000206 	br	10008eb0 <__mdiff+0x90>
10008ea8:	903ff716 	blt	r18,zero,10008e88 <__mdiff+0x68>
10008eac:	0025883a 	mov	r18,zero
10008eb0:	99400117 	ldw	r5,4(r19)
10008eb4:	00085440 	call	10008544 <_Balloc>
10008eb8:	9a400417 	ldw	r9,16(r19)
10008ebc:	a2c00417 	ldw	r11,16(r20)
10008ec0:	12800504 	addi	r10,r2,20
10008ec4:	481090ba 	slli	r8,r9,2
10008ec8:	581690ba 	slli	r11,r11,2
10008ecc:	14800315 	stw	r18,12(r2)
10008ed0:	8211883a 	add	r8,r16,r8
10008ed4:	8ad7883a 	add	r11,r17,r11
10008ed8:	0007883a 	mov	r3,zero
10008edc:	00000106 	br	10008ee4 <__mdiff+0xc4>
10008ee0:	3815883a 	mov	r10,r7
10008ee4:	81000017 	ldw	r4,0(r16)
10008ee8:	89800017 	ldw	r6,0(r17)
10008eec:	51c00104 	addi	r7,r10,4
10008ef0:	217fffcc 	andi	r5,r4,65535
10008ef4:	28cb883a 	add	r5,r5,r3
10008ef8:	30ffffcc 	andi	r3,r6,65535
10008efc:	28cbc83a 	sub	r5,r5,r3
10008f00:	300cd43a 	srli	r6,r6,16
10008f04:	2006d43a 	srli	r3,r4,16
10008f08:	2809d43a 	srai	r4,r5,16
10008f0c:	297fffcc 	andi	r5,r5,65535
10008f10:	1987c83a 	sub	r3,r3,r6
10008f14:	1907883a 	add	r3,r3,r4
10008f18:	1808943a 	slli	r4,r3,16
10008f1c:	8c400104 	addi	r17,r17,4
10008f20:	84000104 	addi	r16,r16,4
10008f24:	214ab03a 	or	r5,r4,r5
10008f28:	397fff15 	stw	r5,-4(r7)
10008f2c:	1807d43a 	srai	r3,r3,16
10008f30:	8affeb36 	bltu	r17,r11,10008ee0 <__mdiff+0xc0>
10008f34:	8200152e 	bgeu	r16,r8,10008f8c <__mdiff+0x16c>
10008f38:	3815883a 	mov	r10,r7
10008f3c:	800d883a 	mov	r6,r16
10008f40:	31000017 	ldw	r4,0(r6)
10008f44:	52800104 	addi	r10,r10,4
10008f48:	31800104 	addi	r6,r6,4
10008f4c:	217fffcc 	andi	r5,r4,65535
10008f50:	28cb883a 	add	r5,r5,r3
10008f54:	2817d43a 	srai	r11,r5,16
10008f58:	2006d43a 	srli	r3,r4,16
10008f5c:	293fffcc 	andi	r4,r5,65535
10008f60:	1ac7883a 	add	r3,r3,r11
10008f64:	180a943a 	slli	r5,r3,16
10008f68:	1807d43a 	srai	r3,r3,16
10008f6c:	290ab03a 	or	r5,r5,r4
10008f70:	517fff15 	stw	r5,-4(r10)
10008f74:	323ff236 	bltu	r6,r8,10008f40 <__mdiff+0x120>
10008f78:	42bfffc4 	addi	r10,r8,-1
10008f7c:	5415c83a 	sub	r10,r10,r16
10008f80:	5014d0ba 	srli	r10,r10,2
10008f84:	501490ba 	slli	r10,r10,2
10008f88:	3a95883a 	add	r10,r7,r10
10008f8c:	2800041e 	bne	r5,zero,10008fa0 <__mdiff+0x180>
10008f90:	52bfff04 	addi	r10,r10,-4
10008f94:	50c00017 	ldw	r3,0(r10)
10008f98:	4a7fffc4 	addi	r9,r9,-1
10008f9c:	183ffc26 	beq	r3,zero,10008f90 <__mdiff+0x170>
10008fa0:	12400415 	stw	r9,16(r2)
10008fa4:	dfc00517 	ldw	ra,20(sp)
10008fa8:	dd000417 	ldw	r20,16(sp)
10008fac:	dcc00317 	ldw	r19,12(sp)
10008fb0:	dc800217 	ldw	r18,8(sp)
10008fb4:	dc400117 	ldw	r17,4(sp)
10008fb8:	dc000017 	ldw	r16,0(sp)
10008fbc:	dec00604 	addi	sp,sp,24
10008fc0:	f800283a 	ret
10008fc4:	000b883a 	mov	r5,zero
10008fc8:	00085440 	call	10008544 <_Balloc>
10008fcc:	00c00044 	movi	r3,1
10008fd0:	10c00415 	stw	r3,16(r2)
10008fd4:	10000515 	stw	zero,20(r2)
10008fd8:	003ff206 	br	10008fa4 <__mdiff+0x184>

10008fdc <__ulp>:
10008fdc:	295ffc2c 	andhi	r5,r5,32752
10008fe0:	00ff3034 	movhi	r3,64704
10008fe4:	28c7883a 	add	r3,r5,r3
10008fe8:	00c0020e 	bge	zero,r3,10008ff4 <__ulp+0x18>
10008fec:	0005883a 	mov	r2,zero
10008ff0:	f800283a 	ret
10008ff4:	00c7c83a 	sub	r3,zero,r3
10008ff8:	1807d53a 	srai	r3,r3,20
10008ffc:	18800508 	cmpgei	r2,r3,20
10009000:	1000041e 	bne	r2,zero,10009014 <__ulp+0x38>
10009004:	01400234 	movhi	r5,8
10009008:	28c7d83a 	sra	r3,r5,r3
1000900c:	0005883a 	mov	r2,zero
10009010:	f800283a 	ret
10009014:	193ffb04 	addi	r4,r3,-20
10009018:	208007c8 	cmpgei	r2,r4,31
1000901c:	0007883a 	mov	r3,zero
10009020:	1000031e 	bne	r2,zero,10009030 <__ulp+0x54>
10009024:	00a00034 	movhi	r2,32768
10009028:	1104d83a 	srl	r2,r2,r4
1000902c:	f800283a 	ret
10009030:	00800044 	movi	r2,1
10009034:	f800283a 	ret

10009038 <__b2d>:
10009038:	defffa04 	addi	sp,sp,-24
1000903c:	dc000015 	stw	r16,0(sp)
10009040:	24000417 	ldw	r16,16(r4)
10009044:	dc800215 	stw	r18,8(sp)
10009048:	24800504 	addi	r18,r4,20
1000904c:	802090ba 	slli	r16,r16,2
10009050:	dc400115 	stw	r17,4(sp)
10009054:	dd000415 	stw	r20,16(sp)
10009058:	9421883a 	add	r16,r18,r16
1000905c:	847fff17 	ldw	r17,-4(r16)
10009060:	dcc00315 	stw	r19,12(sp)
10009064:	2829883a 	mov	r20,r5
10009068:	8809883a 	mov	r4,r17
1000906c:	dfc00515 	stw	ra,20(sp)
10009070:	00088300 	call	10008830 <__hi0bits>
10009074:	01000804 	movi	r4,32
10009078:	2087c83a 	sub	r3,r4,r2
1000907c:	a0c00015 	stw	r3,0(r20)
10009080:	10c002c8 	cmpgei	r3,r2,11
10009084:	84ffff04 	addi	r19,r16,-4
10009088:	18001f26 	beq	r3,zero,10009108 <__b2d+0xd0>
1000908c:	10fffd44 	addi	r3,r2,-11
10009090:	94c00e2e 	bgeu	r18,r19,100090cc <__b2d+0x94>
10009094:	80bffe17 	ldw	r2,-8(r16)
10009098:	18001226 	beq	r3,zero,100090e4 <__b2d+0xac>
1000909c:	20c9c83a 	sub	r4,r4,r3
100090a0:	110cd83a 	srl	r6,r2,r4
100090a4:	88e2983a 	sll	r17,r17,r3
100090a8:	10c4983a 	sll	r2,r2,r3
100090ac:	817ffe04 	addi	r5,r16,-8
100090b0:	8986b03a 	or	r3,r17,r6
100090b4:	18cffc34 	orhi	r3,r3,16368
100090b8:	91400b2e 	bgeu	r18,r5,100090e8 <__b2d+0xb0>
100090bc:	817ffd17 	ldw	r5,-12(r16)
100090c0:	2908d83a 	srl	r4,r5,r4
100090c4:	1104b03a 	or	r2,r2,r4
100090c8:	00000706 	br	100090e8 <__b2d+0xb0>
100090cc:	18000426 	beq	r3,zero,100090e0 <__b2d+0xa8>
100090d0:	88c6983a 	sll	r3,r17,r3
100090d4:	0005883a 	mov	r2,zero
100090d8:	18cffc34 	orhi	r3,r3,16368
100090dc:	00000206 	br	100090e8 <__b2d+0xb0>
100090e0:	0005883a 	mov	r2,zero
100090e4:	88cffc34 	orhi	r3,r17,16368
100090e8:	dfc00517 	ldw	ra,20(sp)
100090ec:	dd000417 	ldw	r20,16(sp)
100090f0:	dcc00317 	ldw	r19,12(sp)
100090f4:	dc800217 	ldw	r18,8(sp)
100090f8:	dc400117 	ldw	r17,4(sp)
100090fc:	dc000017 	ldw	r16,0(sp)
10009100:	dec00604 	addi	sp,sp,24
10009104:	f800283a 	ret
10009108:	014002c4 	movi	r5,11
1000910c:	2889c83a 	sub	r4,r5,r2
10009110:	8906d83a 	srl	r3,r17,r4
10009114:	18cffc34 	orhi	r3,r3,16368
10009118:	94c00536 	bltu	r18,r19,10009130 <__b2d+0xf8>
1000911c:	000b883a 	mov	r5,zero
10009120:	10800544 	addi	r2,r2,21
10009124:	8884983a 	sll	r2,r17,r2
10009128:	1144b03a 	or	r2,r2,r5
1000912c:	003fee06 	br	100090e8 <__b2d+0xb0>
10009130:	817ffe17 	ldw	r5,-8(r16)
10009134:	290ad83a 	srl	r5,r5,r4
10009138:	003ff906 	br	10009120 <__b2d+0xe8>

1000913c <__d2b>:
1000913c:	defff804 	addi	sp,sp,-32
10009140:	dc400315 	stw	r17,12(sp)
10009144:	3023883a 	mov	r17,r6
10009148:	dd000615 	stw	r20,24(sp)
1000914c:	dc000215 	stw	r16,8(sp)
10009150:	2829883a 	mov	r20,r5
10009154:	8820d53a 	srli	r16,r17,20
10009158:	01400044 	movi	r5,1
1000915c:	dcc00515 	stw	r19,20(sp)
10009160:	dc800415 	stw	r18,16(sp)
10009164:	dfc00715 	stw	ra,28(sp)
10009168:	3825883a 	mov	r18,r7
1000916c:	00085440 	call	10008544 <_Balloc>
10009170:	01800434 	movhi	r6,16
10009174:	31bfffc4 	addi	r6,r6,-1
10009178:	8401ffcc 	andi	r16,r16,2047
1000917c:	1027883a 	mov	r19,r2
10009180:	89a2703a 	and	r17,r17,r6
10009184:	80000126 	beq	r16,zero,1000918c <__d2b+0x50>
10009188:	8c400434 	orhi	r17,r17,16
1000918c:	dc400115 	stw	r17,4(sp)
10009190:	a0002826 	beq	r20,zero,10009234 <__d2b+0xf8>
10009194:	d809883a 	mov	r4,sp
10009198:	dd000015 	stw	r20,0(sp)
1000919c:	00088940 	call	10008894 <__lo0bits>
100091a0:	d8c00117 	ldw	r3,4(sp)
100091a4:	1000171e 	bne	r2,zero,10009204 <__d2b+0xc8>
100091a8:	d9000017 	ldw	r4,0(sp)
100091ac:	98c00615 	stw	r3,24(r19)
100091b0:	99000515 	stw	r4,20(r19)
100091b4:	18001d1e 	bne	r3,zero,1000922c <__d2b+0xf0>
100091b8:	04400044 	movi	r17,1
100091bc:	9c400415 	stw	r17,16(r19)
100091c0:	80002526 	beq	r16,zero,10009258 <__d2b+0x11c>
100091c4:	00c00d44 	movi	r3,53
100091c8:	843ef344 	addi	r16,r16,-1075
100091cc:	80a1883a 	add	r16,r16,r2
100091d0:	1885c83a 	sub	r2,r3,r2
100091d4:	d8c00817 	ldw	r3,32(sp)
100091d8:	94000015 	stw	r16,0(r18)
100091dc:	18800015 	stw	r2,0(r3)
100091e0:	9805883a 	mov	r2,r19
100091e4:	dfc00717 	ldw	ra,28(sp)
100091e8:	dd000617 	ldw	r20,24(sp)
100091ec:	dcc00517 	ldw	r19,20(sp)
100091f0:	dc800417 	ldw	r18,16(sp)
100091f4:	dc400317 	ldw	r17,12(sp)
100091f8:	dc000217 	ldw	r16,8(sp)
100091fc:	dec00804 	addi	sp,sp,32
10009200:	f800283a 	ret
10009204:	01000804 	movi	r4,32
10009208:	2089c83a 	sub	r4,r4,r2
1000920c:	1908983a 	sll	r4,r3,r4
10009210:	d9400017 	ldw	r5,0(sp)
10009214:	1886d83a 	srl	r3,r3,r2
10009218:	2148b03a 	or	r4,r4,r5
1000921c:	99000515 	stw	r4,20(r19)
10009220:	d8c00115 	stw	r3,4(sp)
10009224:	98c00615 	stw	r3,24(r19)
10009228:	183fe326 	beq	r3,zero,100091b8 <__d2b+0x7c>
1000922c:	04400084 	movi	r17,2
10009230:	003fe206 	br	100091bc <__d2b+0x80>
10009234:	d9000104 	addi	r4,sp,4
10009238:	00088940 	call	10008894 <__lo0bits>
1000923c:	00c00044 	movi	r3,1
10009240:	98c00415 	stw	r3,16(r19)
10009244:	d8c00117 	ldw	r3,4(sp)
10009248:	10800804 	addi	r2,r2,32
1000924c:	04400044 	movi	r17,1
10009250:	98c00515 	stw	r3,20(r19)
10009254:	803fdb1e 	bne	r16,zero,100091c4 <__d2b+0x88>
10009258:	880690ba 	slli	r3,r17,2
1000925c:	10bef384 	addi	r2,r2,-1074
10009260:	8822917a 	slli	r17,r17,5
10009264:	98c7883a 	add	r3,r19,r3
10009268:	19000417 	ldw	r4,16(r3)
1000926c:	90800015 	stw	r2,0(r18)
10009270:	00088300 	call	10008830 <__hi0bits>
10009274:	88a3c83a 	sub	r17,r17,r2
10009278:	d8800817 	ldw	r2,32(sp)
1000927c:	14400015 	stw	r17,0(r2)
10009280:	003fd706 	br	100091e0 <__d2b+0xa4>

10009284 <__ratio>:
10009284:	defff904 	addi	sp,sp,-28
10009288:	dc400315 	stw	r17,12(sp)
1000928c:	2823883a 	mov	r17,r5
10009290:	d80b883a 	mov	r5,sp
10009294:	dfc00615 	stw	ra,24(sp)
10009298:	dcc00515 	stw	r19,20(sp)
1000929c:	dc800415 	stw	r18,16(sp)
100092a0:	2027883a 	mov	r19,r4
100092a4:	dc000215 	stw	r16,8(sp)
100092a8:	00090380 	call	10009038 <__b2d>
100092ac:	d9400104 	addi	r5,sp,4
100092b0:	8809883a 	mov	r4,r17
100092b4:	1025883a 	mov	r18,r2
100092b8:	1821883a 	mov	r16,r3
100092bc:	00090380 	call	10009038 <__b2d>
100092c0:	89400417 	ldw	r5,16(r17)
100092c4:	99000417 	ldw	r4,16(r19)
100092c8:	d9800117 	ldw	r6,4(sp)
100092cc:	2149c83a 	sub	r4,r4,r5
100092d0:	d9400017 	ldw	r5,0(sp)
100092d4:	2008917a 	slli	r4,r4,5
100092d8:	298bc83a 	sub	r5,r5,r6
100092dc:	2149883a 	add	r4,r4,r5
100092e0:	01000e0e 	bge	zero,r4,1000931c <__ratio+0x98>
100092e4:	2008953a 	slli	r4,r4,20
100092e8:	2421883a 	add	r16,r4,r16
100092ec:	100d883a 	mov	r6,r2
100092f0:	180f883a 	mov	r7,r3
100092f4:	9009883a 	mov	r4,r18
100092f8:	800b883a 	mov	r5,r16
100092fc:	000d1b00 	call	1000d1b0 <__divdf3>
10009300:	dfc00617 	ldw	ra,24(sp)
10009304:	dcc00517 	ldw	r19,20(sp)
10009308:	dc800417 	ldw	r18,16(sp)
1000930c:	dc400317 	ldw	r17,12(sp)
10009310:	dc000217 	ldw	r16,8(sp)
10009314:	dec00704 	addi	sp,sp,28
10009318:	f800283a 	ret
1000931c:	017ffc34 	movhi	r5,65520
10009320:	2149383a 	mul	r4,r4,r5
10009324:	20c7883a 	add	r3,r4,r3
10009328:	003ff006 	br	100092ec <__ratio+0x68>

1000932c <_mprec_log10>:
1000932c:	defffe04 	addi	sp,sp,-8
10009330:	dc000015 	stw	r16,0(sp)
10009334:	dfc00115 	stw	ra,4(sp)
10009338:	20800608 	cmpgei	r2,r4,24
1000933c:	2021883a 	mov	r16,r4
10009340:	10000d26 	beq	r2,zero,10009378 <_mprec_log10+0x4c>
10009344:	0005883a 	mov	r2,zero
10009348:	00cffc34 	movhi	r3,16368
1000934c:	843fffc4 	addi	r16,r16,-1
10009350:	000d883a 	mov	r6,zero
10009354:	01d00934 	movhi	r7,16420
10009358:	1009883a 	mov	r4,r2
1000935c:	180b883a 	mov	r5,r3
10009360:	000dcb80 	call	1000dcb8 <__muldf3>
10009364:	803ff91e 	bne	r16,zero,1000934c <_mprec_log10+0x20>
10009368:	dfc00117 	ldw	ra,4(sp)
1000936c:	dc000017 	ldw	r16,0(sp)
10009370:	dec00204 	addi	sp,sp,8
10009374:	f800283a 	ret
10009378:	202090fa 	slli	r16,r4,3
1000937c:	00840074 	movhi	r2,4097
10009380:	1086bf04 	addi	r2,r2,6908
10009384:	1421883a 	add	r16,r2,r16
10009388:	80800017 	ldw	r2,0(r16)
1000938c:	80c00117 	ldw	r3,4(r16)
10009390:	dfc00117 	ldw	ra,4(sp)
10009394:	dc000017 	ldw	r16,0(sp)
10009398:	dec00204 	addi	sp,sp,8
1000939c:	f800283a 	ret

100093a0 <__copybits>:
100093a0:	29ffffc4 	addi	r7,r5,-1
100093a4:	380fd17a 	srai	r7,r7,5
100093a8:	31400417 	ldw	r5,16(r6)
100093ac:	30800504 	addi	r2,r6,20
100093b0:	39c00044 	addi	r7,r7,1
100093b4:	280a90ba 	slli	r5,r5,2
100093b8:	380e90ba 	slli	r7,r7,2
100093bc:	114b883a 	add	r5,r2,r5
100093c0:	21cf883a 	add	r7,r4,r7
100093c4:	11400c2e 	bgeu	r2,r5,100093f8 <__copybits+0x58>
100093c8:	2007883a 	mov	r3,r4
100093cc:	10800104 	addi	r2,r2,4
100093d0:	123fff17 	ldw	r8,-4(r2)
100093d4:	18c00104 	addi	r3,r3,4
100093d8:	1a3fff15 	stw	r8,-4(r3)
100093dc:	117ffb36 	bltu	r2,r5,100093cc <__copybits+0x2c>
100093e0:	2985c83a 	sub	r2,r5,r6
100093e4:	10bffac4 	addi	r2,r2,-21
100093e8:	1004d0ba 	srli	r2,r2,2
100093ec:	10800044 	addi	r2,r2,1
100093f0:	100490ba 	slli	r2,r2,2
100093f4:	2089883a 	add	r4,r4,r2
100093f8:	21c0032e 	bgeu	r4,r7,10009408 <__copybits+0x68>
100093fc:	21000104 	addi	r4,r4,4
10009400:	203fff15 	stw	zero,-4(r4)
10009404:	21fffd36 	bltu	r4,r7,100093fc <__copybits+0x5c>
10009408:	f800283a 	ret

1000940c <__any_on>:
1000940c:	20800417 	ldw	r2,16(r4)
10009410:	280dd17a 	srai	r6,r5,5
10009414:	21000504 	addi	r4,r4,20
10009418:	11800c0e 	bge	r2,r6,1000944c <__any_on+0x40>
1000941c:	100690ba 	slli	r3,r2,2
10009420:	20c7883a 	add	r3,r4,r3
10009424:	20c0142e 	bgeu	r4,r3,10009478 <__any_on+0x6c>
10009428:	18bfff17 	ldw	r2,-4(r3)
1000942c:	18ffff04 	addi	r3,r3,-4
10009430:	1000041e 	bne	r2,zero,10009444 <__any_on+0x38>
10009434:	20c00f2e 	bgeu	r4,r3,10009474 <__any_on+0x68>
10009438:	18ffff04 	addi	r3,r3,-4
1000943c:	19400017 	ldw	r5,0(r3)
10009440:	283ffc26 	beq	r5,zero,10009434 <__any_on+0x28>
10009444:	00800044 	movi	r2,1
10009448:	f800283a 	ret
1000944c:	300690ba 	slli	r3,r6,2
10009450:	20c7883a 	add	r3,r4,r3
10009454:	30bff30e 	bge	r6,r2,10009424 <__any_on+0x18>
10009458:	294007cc 	andi	r5,r5,31
1000945c:	283ff126 	beq	r5,zero,10009424 <__any_on+0x18>
10009460:	19800017 	ldw	r6,0(r3)
10009464:	3144d83a 	srl	r2,r6,r5
10009468:	114a983a 	sll	r5,r2,r5
1000946c:	317ff51e 	bne	r6,r5,10009444 <__any_on+0x38>
10009470:	003fec06 	br	10009424 <__any_on+0x18>
10009474:	f800283a 	ret
10009478:	0005883a 	mov	r2,zero
1000947c:	f800283a 	ret

10009480 <_realloc_r>:
10009480:	defff504 	addi	sp,sp,-44
10009484:	dcc00415 	stw	r19,16(sp)
10009488:	dfc00a15 	stw	ra,40(sp)
1000948c:	df000915 	stw	fp,36(sp)
10009490:	ddc00815 	stw	r23,32(sp)
10009494:	dd800715 	stw	r22,28(sp)
10009498:	dd400615 	stw	r21,24(sp)
1000949c:	dd000515 	stw	r20,20(sp)
100094a0:	dc800315 	stw	r18,12(sp)
100094a4:	dc400215 	stw	r17,8(sp)
100094a8:	dc000115 	stw	r16,4(sp)
100094ac:	3027883a 	mov	r19,r6
100094b0:	28008b26 	beq	r5,zero,100096e0 <_realloc_r+0x260>
100094b4:	282d883a 	mov	r22,r5
100094b8:	202b883a 	mov	r21,r4
100094bc:	9c0002c4 	addi	r16,r19,11
100094c0:	000f4b80 	call	1000f4b8 <__malloc_lock>
100094c4:	808005f0 	cmpltui	r2,r16,23
100094c8:	1000521e 	bne	r2,zero,10009614 <_realloc_r+0x194>
100094cc:	017ffe04 	movi	r5,-8
100094d0:	8160703a 	and	r16,r16,r5
100094d4:	8007883a 	mov	r3,r16
100094d8:	80005116 	blt	r16,zero,10009620 <_realloc_r+0x1a0>
100094dc:	84c05036 	bltu	r16,r19,10009620 <_realloc_r+0x1a0>
100094e0:	b0bfff17 	ldw	r2,-4(r22)
100094e4:	017fff04 	movi	r5,-4
100094e8:	b4bffe04 	addi	r18,r22,-8
100094ec:	1162703a 	and	r17,r2,r5
100094f0:	9469883a 	add	r20,r18,r17
100094f4:	88c0390e 	bge	r17,r3,100095dc <_realloc_r+0x15c>
100094f8:	07040074 	movhi	fp,4097
100094fc:	e70a8404 	addi	fp,fp,10768
10009500:	e2000217 	ldw	r8,8(fp)
10009504:	a1000117 	ldw	r4,4(r20)
10009508:	45008e26 	beq	r8,r20,10009744 <_realloc_r+0x2c4>
1000950c:	01bfff84 	movi	r6,-2
10009510:	218c703a 	and	r6,r4,r6
10009514:	a18d883a 	add	r6,r20,r6
10009518:	31800117 	ldw	r6,4(r6)
1000951c:	3180004c 	andi	r6,r6,1
10009520:	30004f1e 	bne	r6,zero,10009660 <_realloc_r+0x1e0>
10009524:	2148703a 	and	r4,r4,r5
10009528:	890b883a 	add	r5,r17,r4
1000952c:	28c0cb0e 	bge	r5,r3,1000985c <_realloc_r+0x3dc>
10009530:	1080004c 	andi	r2,r2,1
10009534:	10004c1e 	bne	r2,zero,10009668 <_realloc_r+0x1e8>
10009538:	b1fffe17 	ldw	r7,-8(r22)
1000953c:	00bfff04 	movi	r2,-4
10009540:	91cfc83a 	sub	r7,r18,r7
10009544:	39400117 	ldw	r5,4(r7)
10009548:	288a703a 	and	r5,r5,r2
1000954c:	a0000426 	beq	r20,zero,10009560 <_realloc_r+0xe0>
10009550:	896f883a 	add	r23,r17,r5
10009554:	b92f883a 	add	r23,r23,r4
10009558:	4500cb26 	beq	r8,r20,10009888 <_realloc_r+0x408>
1000955c:	b8c0930e 	bge	r23,r3,100097ac <_realloc_r+0x32c>
10009560:	38004126 	beq	r7,zero,10009668 <_realloc_r+0x1e8>
10009564:	896f883a 	add	r23,r17,r5
10009568:	b8c03f16 	blt	r23,r3,10009668 <_realloc_r+0x1e8>
1000956c:	38c00217 	ldw	r3,8(r7)
10009570:	38800317 	ldw	r2,12(r7)
10009574:	89bfff04 	addi	r6,r17,-4
10009578:	31000968 	cmpgeui	r4,r6,37
1000957c:	18800315 	stw	r2,12(r3)
10009580:	10c00215 	stw	r3,8(r2)
10009584:	3de9883a 	add	r20,r7,r23
10009588:	38c00204 	addi	r3,r7,8
1000958c:	2000f81e 	bne	r4,zero,10009970 <_realloc_r+0x4f0>
10009590:	30800530 	cmpltui	r2,r6,20
10009594:	b1000017 	ldw	r4,0(r22)
10009598:	1000eb1e 	bne	r2,zero,10009948 <_realloc_r+0x4c8>
1000959c:	39000215 	stw	r4,8(r7)
100095a0:	b1000117 	ldw	r4,4(r22)
100095a4:	30800728 	cmpgeui	r2,r6,28
100095a8:	39000315 	stw	r4,12(r7)
100095ac:	1001041e 	bne	r2,zero,100099c0 <_realloc_r+0x540>
100095b0:	b1000217 	ldw	r4,8(r22)
100095b4:	38800404 	addi	r2,r7,16
100095b8:	b5800204 	addi	r22,r22,8
100095bc:	11000015 	stw	r4,0(r2)
100095c0:	b1000117 	ldw	r4,4(r22)
100095c4:	b823883a 	mov	r17,r23
100095c8:	3825883a 	mov	r18,r7
100095cc:	11000115 	stw	r4,4(r2)
100095d0:	b1000217 	ldw	r4,8(r22)
100095d4:	182d883a 	mov	r22,r3
100095d8:	11000215 	stw	r4,8(r2)
100095dc:	91800117 	ldw	r6,4(r18)
100095e0:	8c05c83a 	sub	r2,r17,r16
100095e4:	10c00430 	cmpltui	r3,r2,16
100095e8:	3180004c 	andi	r6,r6,1
100095ec:	18004926 	beq	r3,zero,10009714 <_realloc_r+0x294>
100095f0:	898cb03a 	or	r6,r17,r6
100095f4:	91800115 	stw	r6,4(r18)
100095f8:	a0800117 	ldw	r2,4(r20)
100095fc:	10800054 	ori	r2,r2,1
10009600:	a0800115 	stw	r2,4(r20)
10009604:	a809883a 	mov	r4,r21
10009608:	000f4dc0 	call	1000f4dc <__malloc_unlock>
1000960c:	b027883a 	mov	r19,r22
10009610:	00000606 	br	1000962c <_realloc_r+0x1ac>
10009614:	04000404 	movi	r16,16
10009618:	00c00404 	movi	r3,16
1000961c:	84ffb02e 	bgeu	r16,r19,100094e0 <_realloc_r+0x60>
10009620:	00800304 	movi	r2,12
10009624:	a8800015 	stw	r2,0(r21)
10009628:	0027883a 	mov	r19,zero
1000962c:	9805883a 	mov	r2,r19
10009630:	dfc00a17 	ldw	ra,40(sp)
10009634:	df000917 	ldw	fp,36(sp)
10009638:	ddc00817 	ldw	r23,32(sp)
1000963c:	dd800717 	ldw	r22,28(sp)
10009640:	dd400617 	ldw	r21,24(sp)
10009644:	dd000517 	ldw	r20,20(sp)
10009648:	dcc00417 	ldw	r19,16(sp)
1000964c:	dc800317 	ldw	r18,12(sp)
10009650:	dc400217 	ldw	r17,8(sp)
10009654:	dc000117 	ldw	r16,4(sp)
10009658:	dec00b04 	addi	sp,sp,44
1000965c:	f800283a 	ret
10009660:	1080004c 	andi	r2,r2,1
10009664:	10007826 	beq	r2,zero,10009848 <_realloc_r+0x3c8>
10009668:	980b883a 	mov	r5,r19
1000966c:	a809883a 	mov	r4,r21
10009670:	0007a4c0 	call	10007a4c <_malloc_r>
10009674:	1027883a 	mov	r19,r2
10009678:	10001626 	beq	r2,zero,100096d4 <_realloc_r+0x254>
1000967c:	b0bfff17 	ldw	r2,-4(r22)
10009680:	013fff84 	movi	r4,-2
10009684:	98fffe04 	addi	r3,r19,-8
10009688:	1104703a 	and	r2,r2,r4
1000968c:	9085883a 	add	r2,r18,r2
10009690:	10c06726 	beq	r2,r3,10009830 <_realloc_r+0x3b0>
10009694:	89bfff04 	addi	r6,r17,-4
10009698:	30800968 	cmpgeui	r2,r6,37
1000969c:	1000761e 	bne	r2,zero,10009878 <_realloc_r+0x3f8>
100096a0:	30800530 	cmpltui	r2,r6,20
100096a4:	b1000017 	ldw	r4,0(r22)
100096a8:	10003726 	beq	r2,zero,10009788 <_realloc_r+0x308>
100096ac:	9805883a 	mov	r2,r19
100096b0:	b007883a 	mov	r3,r22
100096b4:	11000015 	stw	r4,0(r2)
100096b8:	19000117 	ldw	r4,4(r3)
100096bc:	11000115 	stw	r4,4(r2)
100096c0:	18c00217 	ldw	r3,8(r3)
100096c4:	10c00215 	stw	r3,8(r2)
100096c8:	b00b883a 	mov	r5,r22
100096cc:	a809883a 	mov	r4,r21
100096d0:	0006f400 	call	10006f40 <_free_r>
100096d4:	a809883a 	mov	r4,r21
100096d8:	000f4dc0 	call	1000f4dc <__malloc_unlock>
100096dc:	003fd306 	br	1000962c <_realloc_r+0x1ac>
100096e0:	300b883a 	mov	r5,r6
100096e4:	dfc00a17 	ldw	ra,40(sp)
100096e8:	df000917 	ldw	fp,36(sp)
100096ec:	ddc00817 	ldw	r23,32(sp)
100096f0:	dd800717 	ldw	r22,28(sp)
100096f4:	dd400617 	ldw	r21,24(sp)
100096f8:	dd000517 	ldw	r20,20(sp)
100096fc:	dcc00417 	ldw	r19,16(sp)
10009700:	dc800317 	ldw	r18,12(sp)
10009704:	dc400217 	ldw	r17,8(sp)
10009708:	dc000117 	ldw	r16,4(sp)
1000970c:	dec00b04 	addi	sp,sp,44
10009710:	0007a4c1 	jmpi	10007a4c <_malloc_r>
10009714:	340cb03a 	or	r6,r6,r16
10009718:	91800115 	stw	r6,4(r18)
1000971c:	940b883a 	add	r5,r18,r16
10009720:	10800054 	ori	r2,r2,1
10009724:	28800115 	stw	r2,4(r5)
10009728:	a0800117 	ldw	r2,4(r20)
1000972c:	29400204 	addi	r5,r5,8
10009730:	a809883a 	mov	r4,r21
10009734:	10800054 	ori	r2,r2,1
10009738:	a0800115 	stw	r2,4(r20)
1000973c:	0006f400 	call	10006f40 <_free_r>
10009740:	003fb006 	br	10009604 <_realloc_r+0x184>
10009744:	2148703a 	and	r4,r4,r5
10009748:	890b883a 	add	r5,r17,r4
1000974c:	81800404 	addi	r6,r16,16
10009750:	29bf7716 	blt	r5,r6,10009530 <_realloc_r+0xb0>
10009754:	9425883a 	add	r18,r18,r16
10009758:	2c05c83a 	sub	r2,r5,r16
1000975c:	e4800215 	stw	r18,8(fp)
10009760:	10800054 	ori	r2,r2,1
10009764:	90800115 	stw	r2,4(r18)
10009768:	b0bfff17 	ldw	r2,-4(r22)
1000976c:	a809883a 	mov	r4,r21
10009770:	b027883a 	mov	r19,r22
10009774:	1080004c 	andi	r2,r2,1
10009778:	1420b03a 	or	r16,r2,r16
1000977c:	b43fff15 	stw	r16,-4(r22)
10009780:	000f4dc0 	call	1000f4dc <__malloc_unlock>
10009784:	003fa906 	br	1000962c <_realloc_r+0x1ac>
10009788:	99000015 	stw	r4,0(r19)
1000978c:	b0c00117 	ldw	r3,4(r22)
10009790:	30800728 	cmpgeui	r2,r6,28
10009794:	98c00115 	stw	r3,4(r19)
10009798:	1000611e 	bne	r2,zero,10009920 <_realloc_r+0x4a0>
1000979c:	b0c00204 	addi	r3,r22,8
100097a0:	98800204 	addi	r2,r19,8
100097a4:	b1000217 	ldw	r4,8(r22)
100097a8:	003fc206 	br	100096b4 <_realloc_r+0x234>
100097ac:	a0800317 	ldw	r2,12(r20)
100097b0:	a0c00217 	ldw	r3,8(r20)
100097b4:	89bfff04 	addi	r6,r17,-4
100097b8:	31000968 	cmpgeui	r4,r6,37
100097bc:	18800315 	stw	r2,12(r3)
100097c0:	10c00215 	stw	r3,8(r2)
100097c4:	38c00217 	ldw	r3,8(r7)
100097c8:	38800317 	ldw	r2,12(r7)
100097cc:	3a000204 	addi	r8,r7,8
100097d0:	3de9883a 	add	r20,r7,r23
100097d4:	18800315 	stw	r2,12(r3)
100097d8:	10c00215 	stw	r3,8(r2)
100097dc:	20006f1e 	bne	r4,zero,1000999c <_realloc_r+0x51c>
100097e0:	30800530 	cmpltui	r2,r6,20
100097e4:	b0c00017 	ldw	r3,0(r22)
100097e8:	10006a1e 	bne	r2,zero,10009994 <_realloc_r+0x514>
100097ec:	38c00215 	stw	r3,8(r7)
100097f0:	b0c00117 	ldw	r3,4(r22)
100097f4:	30800728 	cmpgeui	r2,r6,28
100097f8:	38c00315 	stw	r3,12(r7)
100097fc:	10007a1e 	bne	r2,zero,100099e8 <_realloc_r+0x568>
10009800:	b0c00217 	ldw	r3,8(r22)
10009804:	38800404 	addi	r2,r7,16
10009808:	b5800204 	addi	r22,r22,8
1000980c:	10c00015 	stw	r3,0(r2)
10009810:	b0c00117 	ldw	r3,4(r22)
10009814:	b823883a 	mov	r17,r23
10009818:	3825883a 	mov	r18,r7
1000981c:	10c00115 	stw	r3,4(r2)
10009820:	b0c00217 	ldw	r3,8(r22)
10009824:	402d883a 	mov	r22,r8
10009828:	10c00215 	stw	r3,8(r2)
1000982c:	003f6b06 	br	100095dc <_realloc_r+0x15c>
10009830:	98bfff17 	ldw	r2,-4(r19)
10009834:	00ffff04 	movi	r3,-4
10009838:	10c4703a 	and	r2,r2,r3
1000983c:	88a3883a 	add	r17,r17,r2
10009840:	9469883a 	add	r20,r18,r17
10009844:	003f6506 	br	100095dc <_realloc_r+0x15c>
10009848:	b1fffe17 	ldw	r7,-8(r22)
1000984c:	91cfc83a 	sub	r7,r18,r7
10009850:	39000117 	ldw	r4,4(r7)
10009854:	214a703a 	and	r5,r4,r5
10009858:	003f4106 	br	10009560 <_realloc_r+0xe0>
1000985c:	a0800317 	ldw	r2,12(r20)
10009860:	a0c00217 	ldw	r3,8(r20)
10009864:	2823883a 	mov	r17,r5
10009868:	9169883a 	add	r20,r18,r5
1000986c:	18800315 	stw	r2,12(r3)
10009870:	10c00215 	stw	r3,8(r2)
10009874:	003f5906 	br	100095dc <_realloc_r+0x15c>
10009878:	b00b883a 	mov	r5,r22
1000987c:	9809883a 	mov	r4,r19
10009880:	00083280 	call	10008328 <memmove>
10009884:	003f9006 	br	100096c8 <_realloc_r+0x248>
10009888:	80800404 	addi	r2,r16,16
1000988c:	b8bf3416 	blt	r23,r2,10009560 <_realloc_r+0xe0>
10009890:	38800317 	ldw	r2,12(r7)
10009894:	38c00217 	ldw	r3,8(r7)
10009898:	89bfff04 	addi	r6,r17,-4
1000989c:	31000968 	cmpgeui	r4,r6,37
100098a0:	18800315 	stw	r2,12(r3)
100098a4:	10c00215 	stw	r3,8(r2)
100098a8:	3cc00204 	addi	r19,r7,8
100098ac:	20005a1e 	bne	r4,zero,10009a18 <_realloc_r+0x598>
100098b0:	30800530 	cmpltui	r2,r6,20
100098b4:	b0c00017 	ldw	r3,0(r22)
100098b8:	1000551e 	bne	r2,zero,10009a10 <_realloc_r+0x590>
100098bc:	38c00215 	stw	r3,8(r7)
100098c0:	b0c00117 	ldw	r3,4(r22)
100098c4:	30800728 	cmpgeui	r2,r6,28
100098c8:	38c00315 	stw	r3,12(r7)
100098cc:	1000661e 	bne	r2,zero,10009a68 <_realloc_r+0x5e8>
100098d0:	b0c00217 	ldw	r3,8(r22)
100098d4:	38800404 	addi	r2,r7,16
100098d8:	b5800204 	addi	r22,r22,8
100098dc:	10c00015 	stw	r3,0(r2)
100098e0:	b0c00117 	ldw	r3,4(r22)
100098e4:	10c00115 	stw	r3,4(r2)
100098e8:	b0c00217 	ldw	r3,8(r22)
100098ec:	10c00215 	stw	r3,8(r2)
100098f0:	3c07883a 	add	r3,r7,r16
100098f4:	bc05c83a 	sub	r2,r23,r16
100098f8:	e0c00215 	stw	r3,8(fp)
100098fc:	10800054 	ori	r2,r2,1
10009900:	18800115 	stw	r2,4(r3)
10009904:	38800117 	ldw	r2,4(r7)
10009908:	a809883a 	mov	r4,r21
1000990c:	1080004c 	andi	r2,r2,1
10009910:	1420b03a 	or	r16,r2,r16
10009914:	3c000115 	stw	r16,4(r7)
10009918:	000f4dc0 	call	1000f4dc <__malloc_unlock>
1000991c:	003f4306 	br	1000962c <_realloc_r+0x1ac>
10009920:	b0800217 	ldw	r2,8(r22)
10009924:	31800920 	cmpeqi	r6,r6,36
10009928:	98800215 	stw	r2,8(r19)
1000992c:	b0800317 	ldw	r2,12(r22)
10009930:	98800315 	stw	r2,12(r19)
10009934:	3000061e 	bne	r6,zero,10009950 <_realloc_r+0x4d0>
10009938:	b0c00404 	addi	r3,r22,16
1000993c:	98800404 	addi	r2,r19,16
10009940:	b1000417 	ldw	r4,16(r22)
10009944:	003f5b06 	br	100096b4 <_realloc_r+0x234>
10009948:	1805883a 	mov	r2,r3
1000994c:	003f1b06 	br	100095bc <_realloc_r+0x13c>
10009950:	b1000417 	ldw	r4,16(r22)
10009954:	b0c00604 	addi	r3,r22,24
10009958:	98800604 	addi	r2,r19,24
1000995c:	99000415 	stw	r4,16(r19)
10009960:	b1000517 	ldw	r4,20(r22)
10009964:	99000515 	stw	r4,20(r19)
10009968:	b1000617 	ldw	r4,24(r22)
1000996c:	003f5106 	br	100096b4 <_realloc_r+0x234>
10009970:	b00b883a 	mov	r5,r22
10009974:	1809883a 	mov	r4,r3
10009978:	d9c00015 	stw	r7,0(sp)
1000997c:	00083280 	call	10008328 <memmove>
10009980:	d9c00017 	ldw	r7,0(sp)
10009984:	102d883a 	mov	r22,r2
10009988:	b823883a 	mov	r17,r23
1000998c:	3825883a 	mov	r18,r7
10009990:	003f1206 	br	100095dc <_realloc_r+0x15c>
10009994:	4005883a 	mov	r2,r8
10009998:	003f9c06 	br	1000980c <_realloc_r+0x38c>
1000999c:	b00b883a 	mov	r5,r22
100099a0:	4009883a 	mov	r4,r8
100099a4:	d9c00015 	stw	r7,0(sp)
100099a8:	00083280 	call	10008328 <memmove>
100099ac:	d9c00017 	ldw	r7,0(sp)
100099b0:	102d883a 	mov	r22,r2
100099b4:	b823883a 	mov	r17,r23
100099b8:	3825883a 	mov	r18,r7
100099bc:	003f0706 	br	100095dc <_realloc_r+0x15c>
100099c0:	b0800217 	ldw	r2,8(r22)
100099c4:	31800920 	cmpeqi	r6,r6,36
100099c8:	38800415 	stw	r2,16(r7)
100099cc:	b0800317 	ldw	r2,12(r22)
100099d0:	38800515 	stw	r2,20(r7)
100099d4:	b1000417 	ldw	r4,16(r22)
100099d8:	3000151e 	bne	r6,zero,10009a30 <_realloc_r+0x5b0>
100099dc:	38800604 	addi	r2,r7,24
100099e0:	b5800404 	addi	r22,r22,16
100099e4:	003ef506 	br	100095bc <_realloc_r+0x13c>
100099e8:	b0800217 	ldw	r2,8(r22)
100099ec:	31800920 	cmpeqi	r6,r6,36
100099f0:	38800415 	stw	r2,16(r7)
100099f4:	b0800317 	ldw	r2,12(r22)
100099f8:	38800515 	stw	r2,20(r7)
100099fc:	b0c00417 	ldw	r3,16(r22)
10009a00:	3000121e 	bne	r6,zero,10009a4c <_realloc_r+0x5cc>
10009a04:	38800604 	addi	r2,r7,24
10009a08:	b5800404 	addi	r22,r22,16
10009a0c:	003f7f06 	br	1000980c <_realloc_r+0x38c>
10009a10:	9805883a 	mov	r2,r19
10009a14:	003fb106 	br	100098dc <_realloc_r+0x45c>
10009a18:	b00b883a 	mov	r5,r22
10009a1c:	9809883a 	mov	r4,r19
10009a20:	d9c00015 	stw	r7,0(sp)
10009a24:	00083280 	call	10008328 <memmove>
10009a28:	d9c00017 	ldw	r7,0(sp)
10009a2c:	003fb006 	br	100098f0 <_realloc_r+0x470>
10009a30:	b5800604 	addi	r22,r22,24
10009a34:	39000615 	stw	r4,24(r7)
10009a38:	b13fff17 	ldw	r4,-4(r22)
10009a3c:	38800804 	addi	r2,r7,32
10009a40:	39000715 	stw	r4,28(r7)
10009a44:	b1000017 	ldw	r4,0(r22)
10009a48:	003edc06 	br	100095bc <_realloc_r+0x13c>
10009a4c:	b5800604 	addi	r22,r22,24
10009a50:	38c00615 	stw	r3,24(r7)
10009a54:	b0ffff17 	ldw	r3,-4(r22)
10009a58:	38800804 	addi	r2,r7,32
10009a5c:	38c00715 	stw	r3,28(r7)
10009a60:	b0c00017 	ldw	r3,0(r22)
10009a64:	003f6906 	br	1000980c <_realloc_r+0x38c>
10009a68:	b0800217 	ldw	r2,8(r22)
10009a6c:	31800920 	cmpeqi	r6,r6,36
10009a70:	38800415 	stw	r2,16(r7)
10009a74:	b0800317 	ldw	r2,12(r22)
10009a78:	38800515 	stw	r2,20(r7)
10009a7c:	b0c00417 	ldw	r3,16(r22)
10009a80:	3000031e 	bne	r6,zero,10009a90 <_realloc_r+0x610>
10009a84:	38800604 	addi	r2,r7,24
10009a88:	b5800404 	addi	r22,r22,16
10009a8c:	003f9306 	br	100098dc <_realloc_r+0x45c>
10009a90:	b5800604 	addi	r22,r22,24
10009a94:	38c00615 	stw	r3,24(r7)
10009a98:	b0ffff17 	ldw	r3,-4(r22)
10009a9c:	38800804 	addi	r2,r7,32
10009aa0:	38c00715 	stw	r3,28(r7)
10009aa4:	b0c00017 	ldw	r3,0(r22)
10009aa8:	003f8c06 	br	100098dc <_realloc_r+0x45c>

10009aac <_sbrk_r>:
10009aac:	defffe04 	addi	sp,sp,-8
10009ab0:	dc000015 	stw	r16,0(sp)
10009ab4:	00840074 	movhi	r2,4097
10009ab8:	2021883a 	mov	r16,r4
10009abc:	2809883a 	mov	r4,r5
10009ac0:	dfc00115 	stw	ra,4(sp)
10009ac4:	1018fd15 	stw	zero,25588(r2)
10009ac8:	000f6900 	call	1000f690 <sbrk>
10009acc:	10ffffd8 	cmpnei	r3,r2,-1
10009ad0:	18000426 	beq	r3,zero,10009ae4 <_sbrk_r+0x38>
10009ad4:	dfc00117 	ldw	ra,4(sp)
10009ad8:	dc000017 	ldw	r16,0(sp)
10009adc:	dec00204 	addi	sp,sp,8
10009ae0:	f800283a 	ret
10009ae4:	00c40074 	movhi	r3,4097
10009ae8:	18d8fd17 	ldw	r3,25588(r3)
10009aec:	183ff926 	beq	r3,zero,10009ad4 <_sbrk_r+0x28>
10009af0:	80c00015 	stw	r3,0(r16)
10009af4:	dfc00117 	ldw	ra,4(sp)
10009af8:	dc000017 	ldw	r16,0(sp)
10009afc:	dec00204 	addi	sp,sp,8
10009b00:	f800283a 	ret

10009b04 <__sread>:
10009b04:	defffe04 	addi	sp,sp,-8
10009b08:	dc000015 	stw	r16,0(sp)
10009b0c:	2821883a 	mov	r16,r5
10009b10:	2940038f 	ldh	r5,14(r5)
10009b14:	dfc00115 	stw	ra,4(sp)
10009b18:	000b7bc0 	call	1000b7bc <_read_r>
10009b1c:	10000716 	blt	r2,zero,10009b3c <__sread+0x38>
10009b20:	80c01417 	ldw	r3,80(r16)
10009b24:	1887883a 	add	r3,r3,r2
10009b28:	80c01415 	stw	r3,80(r16)
10009b2c:	dfc00117 	ldw	ra,4(sp)
10009b30:	dc000017 	ldw	r16,0(sp)
10009b34:	dec00204 	addi	sp,sp,8
10009b38:	f800283a 	ret
10009b3c:	80c0030b 	ldhu	r3,12(r16)
10009b40:	18fbffcc 	andi	r3,r3,61439
10009b44:	80c0030d 	sth	r3,12(r16)
10009b48:	dfc00117 	ldw	ra,4(sp)
10009b4c:	dc000017 	ldw	r16,0(sp)
10009b50:	dec00204 	addi	sp,sp,8
10009b54:	f800283a 	ret

10009b58 <__seofread>:
10009b58:	0005883a 	mov	r2,zero
10009b5c:	f800283a 	ret

10009b60 <__swrite>:
10009b60:	2880030b 	ldhu	r2,12(r5)
10009b64:	defffb04 	addi	sp,sp,-20
10009b68:	dcc00315 	stw	r19,12(sp)
10009b6c:	dc800215 	stw	r18,8(sp)
10009b70:	dc400115 	stw	r17,4(sp)
10009b74:	dc000015 	stw	r16,0(sp)
10009b78:	dfc00415 	stw	ra,16(sp)
10009b7c:	10c0400c 	andi	r3,r2,256
10009b80:	2821883a 	mov	r16,r5
10009b84:	2023883a 	mov	r17,r4
10009b88:	3025883a 	mov	r18,r6
10009b8c:	3827883a 	mov	r19,r7
10009b90:	2940038f 	ldh	r5,14(r5)
10009b94:	18000c1e 	bne	r3,zero,10009bc8 <__swrite+0x68>
10009b98:	10bbffcc 	andi	r2,r2,61439
10009b9c:	980f883a 	mov	r7,r19
10009ba0:	900d883a 	mov	r6,r18
10009ba4:	8809883a 	mov	r4,r17
10009ba8:	8080030d 	sth	r2,12(r16)
10009bac:	dfc00417 	ldw	ra,16(sp)
10009bb0:	dcc00317 	ldw	r19,12(sp)
10009bb4:	dc800217 	ldw	r18,8(sp)
10009bb8:	dc400117 	ldw	r17,4(sp)
10009bbc:	dc000017 	ldw	r16,0(sp)
10009bc0:	dec00504 	addi	sp,sp,20
10009bc4:	000b1541 	jmpi	1000b154 <_write_r>
10009bc8:	01c00084 	movi	r7,2
10009bcc:	000d883a 	mov	r6,zero
10009bd0:	000b7080 	call	1000b708 <_lseek_r>
10009bd4:	8080030b 	ldhu	r2,12(r16)
10009bd8:	8140038f 	ldh	r5,14(r16)
10009bdc:	003fee06 	br	10009b98 <__swrite+0x38>

10009be0 <__sseek>:
10009be0:	defffe04 	addi	sp,sp,-8
10009be4:	dc000015 	stw	r16,0(sp)
10009be8:	2821883a 	mov	r16,r5
10009bec:	2940038f 	ldh	r5,14(r5)
10009bf0:	dfc00115 	stw	ra,4(sp)
10009bf4:	000b7080 	call	1000b708 <_lseek_r>
10009bf8:	10ffffd8 	cmpnei	r3,r2,-1
10009bfc:	18000826 	beq	r3,zero,10009c20 <__sseek+0x40>
10009c00:	80c0030b 	ldhu	r3,12(r16)
10009c04:	80801415 	stw	r2,80(r16)
10009c08:	18c40014 	ori	r3,r3,4096
10009c0c:	80c0030d 	sth	r3,12(r16)
10009c10:	dfc00117 	ldw	ra,4(sp)
10009c14:	dc000017 	ldw	r16,0(sp)
10009c18:	dec00204 	addi	sp,sp,8
10009c1c:	f800283a 	ret
10009c20:	80c0030b 	ldhu	r3,12(r16)
10009c24:	18fbffcc 	andi	r3,r3,61439
10009c28:	80c0030d 	sth	r3,12(r16)
10009c2c:	dfc00117 	ldw	ra,4(sp)
10009c30:	dc000017 	ldw	r16,0(sp)
10009c34:	dec00204 	addi	sp,sp,8
10009c38:	f800283a 	ret

10009c3c <__sclose>:
10009c3c:	2940038f 	ldh	r5,14(r5)
10009c40:	000b1b81 	jmpi	1000b1b8 <_close_r>

10009c44 <__sprint_r.part.0>:
10009c44:	28801917 	ldw	r2,100(r5)
10009c48:	defff604 	addi	sp,sp,-40
10009c4c:	dd000415 	stw	r20,16(sp)
10009c50:	dfc00915 	stw	ra,36(sp)
10009c54:	df000815 	stw	fp,32(sp)
10009c58:	ddc00715 	stw	r23,28(sp)
10009c5c:	dd800615 	stw	r22,24(sp)
10009c60:	dd400515 	stw	r21,20(sp)
10009c64:	dcc00315 	stw	r19,12(sp)
10009c68:	dc800215 	stw	r18,8(sp)
10009c6c:	dc400115 	stw	r17,4(sp)
10009c70:	dc000015 	stw	r16,0(sp)
10009c74:	1088000c 	andi	r2,r2,8192
10009c78:	3029883a 	mov	r20,r6
10009c7c:	10002c26 	beq	r2,zero,10009d30 <__sprint_r.part.0+0xec>
10009c80:	30800217 	ldw	r2,8(r6)
10009c84:	2823883a 	mov	r17,r5
10009c88:	2027883a 	mov	r19,r4
10009c8c:	35400017 	ldw	r21,0(r6)
10009c90:	05ffff04 	movi	r23,-4
10009c94:	10002426 	beq	r2,zero,10009d28 <__sprint_r.part.0+0xe4>
10009c98:	ad800117 	ldw	r22,4(r21)
10009c9c:	ac000017 	ldw	r16,0(r21)
10009ca0:	b024d0ba 	srli	r18,r22,2
10009ca4:	90001b26 	beq	r18,zero,10009d14 <__sprint_r.part.0+0xd0>
10009ca8:	0039883a 	mov	fp,zero
10009cac:	00000206 	br	10009cb8 <__sprint_r.part.0+0x74>
10009cb0:	84000104 	addi	r16,r16,4
10009cb4:	97001626 	beq	r18,fp,10009d10 <__sprint_r.part.0+0xcc>
10009cb8:	81400017 	ldw	r5,0(r16)
10009cbc:	880d883a 	mov	r6,r17
10009cc0:	9809883a 	mov	r4,r19
10009cc4:	000b5200 	call	1000b520 <_fputwc_r>
10009cc8:	10bfffe0 	cmpeqi	r2,r2,-1
10009ccc:	e7000044 	addi	fp,fp,1
10009cd0:	103ff726 	beq	r2,zero,10009cb0 <__sprint_r.part.0+0x6c>
10009cd4:	00bfffc4 	movi	r2,-1
10009cd8:	a0000215 	stw	zero,8(r20)
10009cdc:	a0000115 	stw	zero,4(r20)
10009ce0:	dfc00917 	ldw	ra,36(sp)
10009ce4:	df000817 	ldw	fp,32(sp)
10009ce8:	ddc00717 	ldw	r23,28(sp)
10009cec:	dd800617 	ldw	r22,24(sp)
10009cf0:	dd400517 	ldw	r21,20(sp)
10009cf4:	dd000417 	ldw	r20,16(sp)
10009cf8:	dcc00317 	ldw	r19,12(sp)
10009cfc:	dc800217 	ldw	r18,8(sp)
10009d00:	dc400117 	ldw	r17,4(sp)
10009d04:	dc000017 	ldw	r16,0(sp)
10009d08:	dec00a04 	addi	sp,sp,40
10009d0c:	f800283a 	ret
10009d10:	a0800217 	ldw	r2,8(r20)
10009d14:	b5ec703a 	and	r22,r22,r23
10009d18:	1585c83a 	sub	r2,r2,r22
10009d1c:	a0800215 	stw	r2,8(r20)
10009d20:	ad400204 	addi	r21,r21,8
10009d24:	103fdc1e 	bne	r2,zero,10009c98 <__sprint_r.part.0+0x54>
10009d28:	0005883a 	mov	r2,zero
10009d2c:	003fea06 	br	10009cd8 <__sprint_r.part.0+0x94>
10009d30:	000723c0 	call	1000723c <__sfvwrite_r>
10009d34:	003fe806 	br	10009cd8 <__sprint_r.part.0+0x94>

10009d38 <__sprint_r>:
10009d38:	30c00217 	ldw	r3,8(r6)
10009d3c:	18000126 	beq	r3,zero,10009d44 <__sprint_r+0xc>
10009d40:	0009c441 	jmpi	10009c44 <__sprint_r.part.0>
10009d44:	30000115 	stw	zero,4(r6)
10009d48:	0005883a 	mov	r2,zero
10009d4c:	f800283a 	ret

10009d50 <___vfiprintf_internal_r>:
10009d50:	deffd004 	addi	sp,sp,-192
10009d54:	df002e15 	stw	fp,184(sp)
10009d58:	dcc02915 	stw	r19,164(sp)
10009d5c:	dc802815 	stw	r18,160(sp)
10009d60:	dfc02f15 	stw	ra,188(sp)
10009d64:	ddc02d15 	stw	r23,180(sp)
10009d68:	dd802c15 	stw	r22,176(sp)
10009d6c:	dd402b15 	stw	r21,172(sp)
10009d70:	dd002a15 	stw	r20,168(sp)
10009d74:	dc402715 	stw	r17,156(sp)
10009d78:	dc002615 	stw	r16,152(sp)
10009d7c:	d9c00315 	stw	r7,12(sp)
10009d80:	2027883a 	mov	r19,r4
10009d84:	2825883a 	mov	r18,r5
10009d88:	3039883a 	mov	fp,r6
10009d8c:	20000226 	beq	r4,zero,10009d98 <___vfiprintf_internal_r+0x48>
10009d90:	20800e17 	ldw	r2,56(r4)
10009d94:	1002b626 	beq	r2,zero,1000a870 <___vfiprintf_internal_r+0xb20>
10009d98:	9080030b 	ldhu	r2,12(r18)
10009d9c:	10c8000c 	andi	r3,r2,8192
10009da0:	1800061e 	bne	r3,zero,10009dbc <___vfiprintf_internal_r+0x6c>
10009da4:	90c01917 	ldw	r3,100(r18)
10009da8:	0137ffc4 	movi	r4,-8193
10009dac:	10880014 	ori	r2,r2,8192
10009db0:	1906703a 	and	r3,r3,r4
10009db4:	9080030d 	sth	r2,12(r18)
10009db8:	90c01915 	stw	r3,100(r18)
10009dbc:	10c0020c 	andi	r3,r2,8
10009dc0:	18009426 	beq	r3,zero,1000a014 <___vfiprintf_internal_r+0x2c4>
10009dc4:	90c00417 	ldw	r3,16(r18)
10009dc8:	18009226 	beq	r3,zero,1000a014 <___vfiprintf_internal_r+0x2c4>
10009dcc:	1080068c 	andi	r2,r2,26
10009dd0:	10800298 	cmpnei	r2,r2,10
10009dd4:	10009726 	beq	r2,zero,1000a034 <___vfiprintf_internal_r+0x2e4>
10009dd8:	dc401604 	addi	r17,sp,88
10009ddc:	dc400915 	stw	r17,36(sp)
10009de0:	d8000b15 	stw	zero,44(sp)
10009de4:	d8000a15 	stw	zero,40(sp)
10009de8:	8811883a 	mov	r8,r17
10009dec:	d8000415 	stw	zero,16(sp)
10009df0:	d8000015 	stw	zero,0(sp)
10009df4:	e0800007 	ldb	r2,0(fp)
10009df8:	1000a226 	beq	r2,zero,1000a084 <___vfiprintf_internal_r+0x334>
10009dfc:	10800960 	cmpeqi	r2,r2,37
10009e00:	1003e71e 	bne	r2,zero,1000ada0 <___vfiprintf_internal_r+0x1050>
10009e04:	e021883a 	mov	r16,fp
10009e08:	00000206 	br	10009e14 <___vfiprintf_internal_r+0xc4>
10009e0c:	18009226 	beq	r3,zero,1000a058 <___vfiprintf_internal_r+0x308>
10009e10:	a021883a 	mov	r16,r20
10009e14:	80800047 	ldb	r2,1(r16)
10009e18:	85000044 	addi	r20,r16,1
10009e1c:	10c00958 	cmpnei	r3,r2,37
10009e20:	103ffa1e 	bne	r2,zero,10009e0c <___vfiprintf_internal_r+0xbc>
10009e24:	a72bc83a 	sub	r21,r20,fp
10009e28:	a8009626 	beq	r21,zero,1000a084 <___vfiprintf_internal_r+0x334>
10009e2c:	d8c00b17 	ldw	r3,44(sp)
10009e30:	d8800a17 	ldw	r2,40(sp)
10009e34:	47000015 	stw	fp,0(r8)
10009e38:	a8c7883a 	add	r3,r21,r3
10009e3c:	10800044 	addi	r2,r2,1
10009e40:	d8800a15 	stw	r2,40(sp)
10009e44:	45400115 	stw	r21,4(r8)
10009e48:	d8c00b15 	stw	r3,44(sp)
10009e4c:	10800208 	cmpgei	r2,r2,8
10009e50:	1000841e 	bne	r2,zero,1000a064 <___vfiprintf_internal_r+0x314>
10009e54:	42000204 	addi	r8,r8,8
10009e58:	d8c00017 	ldw	r3,0(sp)
10009e5c:	80800047 	ldb	r2,1(r16)
10009e60:	1d47883a 	add	r3,r3,r21
10009e64:	d8c00015 	stw	r3,0(sp)
10009e68:	10008626 	beq	r2,zero,1000a084 <___vfiprintf_internal_r+0x334>
10009e6c:	a0800047 	ldb	r2,1(r20)
10009e70:	a7000044 	addi	fp,r20,1
10009e74:	d8000845 	stb	zero,33(sp)
10009e78:	000b883a 	mov	r5,zero
10009e7c:	000d883a 	mov	r6,zero
10009e80:	027fffc4 	movi	r9,-1
10009e84:	0021883a 	mov	r16,zero
10009e88:	0019883a 	mov	r12,zero
10009e8c:	e7000044 	addi	fp,fp,1
10009e90:	10fff804 	addi	r3,r2,-32
10009e94:	19001668 	cmpgeui	r4,r3,89
10009e98:	20009c1e 	bne	r4,zero,1000a10c <___vfiprintf_internal_r+0x3bc>
10009e9c:	180690ba 	slli	r3,r3,2
10009ea0:	01040074 	movhi	r4,4097
10009ea4:	1909883a 	add	r4,r3,r4
10009ea8:	20e7ac17 	ldw	r3,-24912(r4)
10009eac:	1800683a 	jmp	r3
10009eb0:	1000a1dc 	xori	zero,r2,647
10009eb4:	1000a10c 	andi	zero,r2,644
10009eb8:	1000a10c 	andi	zero,r2,644
10009ebc:	1000a1d0 	cmplti	zero,r2,647
10009ec0:	1000a10c 	andi	zero,r2,644
10009ec4:	1000a10c 	andi	zero,r2,644
10009ec8:	1000a10c 	andi	zero,r2,644
10009ecc:	1000a10c 	andi	zero,r2,644
10009ed0:	1000a10c 	andi	zero,r2,644
10009ed4:	1000a10c 	andi	zero,r2,644
10009ed8:	1000a1a8 	cmpgeui	zero,r2,646
10009edc:	1000a198 	cmpnei	zero,r2,646
10009ee0:	1000a10c 	andi	zero,r2,644
10009ee4:	1000a180 	call	11000a18 <_gp+0xfe488c>
10009ee8:	1000a13c 	xorhi	zero,r2,644
10009eec:	1000a10c 	andi	zero,r2,644
10009ef0:	1000a130 	cmpltui	zero,r2,644
10009ef4:	1000a0dc 	xori	zero,r2,643
10009ef8:	1000a0dc 	xori	zero,r2,643
10009efc:	1000a0dc 	xori	zero,r2,643
10009f00:	1000a0dc 	xori	zero,r2,643
10009f04:	1000a0dc 	xori	zero,r2,643
10009f08:	1000a0dc 	xori	zero,r2,643
10009f0c:	1000a0dc 	xori	zero,r2,643
10009f10:	1000a0dc 	xori	zero,r2,643
10009f14:	1000a0dc 	xori	zero,r2,643
10009f18:	1000a10c 	andi	zero,r2,644
10009f1c:	1000a10c 	andi	zero,r2,644
10009f20:	1000a10c 	andi	zero,r2,644
10009f24:	1000a10c 	andi	zero,r2,644
10009f28:	1000a10c 	andi	zero,r2,644
10009f2c:	1000a10c 	andi	zero,r2,644
10009f30:	1000a10c 	andi	zero,r2,644
10009f34:	1000a10c 	andi	zero,r2,644
10009f38:	1000a10c 	andi	zero,r2,644
10009f3c:	1000a10c 	andi	zero,r2,644
10009f40:	1000a798 	cmpnei	zero,r2,670
10009f44:	1000a10c 	andi	zero,r2,644
10009f48:	1000a10c 	andi	zero,r2,644
10009f4c:	1000a10c 	andi	zero,r2,644
10009f50:	1000a10c 	andi	zero,r2,644
10009f54:	1000a10c 	andi	zero,r2,644
10009f58:	1000a10c 	andi	zero,r2,644
10009f5c:	1000a10c 	andi	zero,r2,644
10009f60:	1000a10c 	andi	zero,r2,644
10009f64:	1000a10c 	andi	zero,r2,644
10009f68:	1000a10c 	andi	zero,r2,644
10009f6c:	1000a730 	cmpltui	zero,r2,668
10009f70:	1000a10c 	andi	zero,r2,644
10009f74:	1000a10c 	andi	zero,r2,644
10009f78:	1000a10c 	andi	zero,r2,644
10009f7c:	1000a10c 	andi	zero,r2,644
10009f80:	1000a10c 	andi	zero,r2,644
10009f84:	1000a764 	muli	zero,r2,669
10009f88:	1000a10c 	andi	zero,r2,644
10009f8c:	1000a10c 	andi	zero,r2,644
10009f90:	1000a334 	orhi	zero,r2,652
10009f94:	1000a10c 	andi	zero,r2,644
10009f98:	1000a10c 	andi	zero,r2,644
10009f9c:	1000a10c 	andi	zero,r2,644
10009fa0:	1000a10c 	andi	zero,r2,644
10009fa4:	1000a10c 	andi	zero,r2,644
10009fa8:	1000a10c 	andi	zero,r2,644
10009fac:	1000a10c 	andi	zero,r2,644
10009fb0:	1000a10c 	andi	zero,r2,644
10009fb4:	1000a10c 	andi	zero,r2,644
10009fb8:	1000a10c 	andi	zero,r2,644
10009fbc:	1000a4d0 	cmplti	zero,r2,659
10009fc0:	1000a45c 	xori	zero,r2,657
10009fc4:	1000a10c 	andi	zero,r2,644
10009fc8:	1000a10c 	andi	zero,r2,644
10009fcc:	1000a10c 	andi	zero,r2,644
10009fd0:	1000a264 	muli	zero,r2,649
10009fd4:	1000a45c 	xori	zero,r2,657
10009fd8:	1000a10c 	andi	zero,r2,644
10009fdc:	1000a10c 	andi	zero,r2,644
10009fe0:	1000a250 	cmplti	zero,r2,649
10009fe4:	1000a10c 	andi	zero,r2,644
10009fe8:	1000a41c 	xori	zero,r2,656
10009fec:	1000a2f4 	orhi	zero,r2,651
10009ff0:	1000a27c 	xorhi	zero,r2,649
10009ff4:	1000a270 	cmpltui	zero,r2,649
10009ff8:	1000a10c 	andi	zero,r2,644
10009ffc:	1000a3bc 	xorhi	zero,r2,654
1000a000:	1000a10c 	andi	zero,r2,644
1000a004:	1000a37c 	xorhi	zero,r2,653
1000a008:	1000a10c 	andi	zero,r2,644
1000a00c:	1000a10c 	andi	zero,r2,644
1000a010:	1000a208 	cmpgei	zero,r2,648
1000a014:	900b883a 	mov	r5,r18
1000a018:	9809883a 	mov	r4,r19
1000a01c:	0004df80 	call	10004df8 <__swsetup_r>
1000a020:	1004071e 	bne	r2,zero,1000b040 <___vfiprintf_internal_r+0x12f0>
1000a024:	9080030b 	ldhu	r2,12(r18)
1000a028:	1080068c 	andi	r2,r2,26
1000a02c:	10800298 	cmpnei	r2,r2,10
1000a030:	103f691e 	bne	r2,zero,10009dd8 <___vfiprintf_internal_r+0x88>
1000a034:	9080038f 	ldh	r2,14(r18)
1000a038:	103f6716 	blt	r2,zero,10009dd8 <___vfiprintf_internal_r+0x88>
1000a03c:	d9c00317 	ldw	r7,12(sp)
1000a040:	e00d883a 	mov	r6,fp
1000a044:	900b883a 	mov	r5,r18
1000a048:	9809883a 	mov	r4,r19
1000a04c:	000b0940 	call	1000b094 <__sbprintf>
1000a050:	d8800015 	stw	r2,0(sp)
1000a054:	00001406 	br	1000a0a8 <___vfiprintf_internal_r+0x358>
1000a058:	a72bc83a 	sub	r21,r20,fp
1000a05c:	a83f8326 	beq	r21,zero,10009e6c <___vfiprintf_internal_r+0x11c>
1000a060:	003f7206 	br	10009e2c <___vfiprintf_internal_r+0xdc>
1000a064:	18032b26 	beq	r3,zero,1000ad14 <___vfiprintf_internal_r+0xfc4>
1000a068:	d9800904 	addi	r6,sp,36
1000a06c:	900b883a 	mov	r5,r18
1000a070:	9809883a 	mov	r4,r19
1000a074:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a078:	1000081e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a07c:	8811883a 	mov	r8,r17
1000a080:	003f7506 	br	10009e58 <___vfiprintf_internal_r+0x108>
1000a084:	d8800b17 	ldw	r2,44(sp)
1000a088:	10000426 	beq	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a08c:	d9800904 	addi	r6,sp,36
1000a090:	900b883a 	mov	r5,r18
1000a094:	9809883a 	mov	r4,r19
1000a098:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a09c:	9080030b 	ldhu	r2,12(r18)
1000a0a0:	1080100c 	andi	r2,r2,64
1000a0a4:	1003e61e 	bne	r2,zero,1000b040 <___vfiprintf_internal_r+0x12f0>
1000a0a8:	d8800017 	ldw	r2,0(sp)
1000a0ac:	dfc02f17 	ldw	ra,188(sp)
1000a0b0:	df002e17 	ldw	fp,184(sp)
1000a0b4:	ddc02d17 	ldw	r23,180(sp)
1000a0b8:	dd802c17 	ldw	r22,176(sp)
1000a0bc:	dd402b17 	ldw	r21,172(sp)
1000a0c0:	dd002a17 	ldw	r20,168(sp)
1000a0c4:	dcc02917 	ldw	r19,164(sp)
1000a0c8:	dc802817 	ldw	r18,160(sp)
1000a0cc:	dc402717 	ldw	r17,156(sp)
1000a0d0:	dc002617 	ldw	r16,152(sp)
1000a0d4:	dec03004 	addi	sp,sp,192
1000a0d8:	f800283a 	ret
1000a0dc:	0021883a 	mov	r16,zero
1000a0e0:	10fff404 	addi	r3,r2,-48
1000a0e4:	e7000044 	addi	fp,fp,1
1000a0e8:	840002a4 	muli	r16,r16,10
1000a0ec:	e0bfffc7 	ldb	r2,-1(fp)
1000a0f0:	1c21883a 	add	r16,r3,r16
1000a0f4:	10fff404 	addi	r3,r2,-48
1000a0f8:	190002b0 	cmpltui	r4,r3,10
1000a0fc:	203ff91e 	bne	r4,zero,1000a0e4 <___vfiprintf_internal_r+0x394>
1000a100:	10fff804 	addi	r3,r2,-32
1000a104:	19001668 	cmpgeui	r4,r3,89
1000a108:	203f6426 	beq	r4,zero,10009e9c <___vfiprintf_internal_r+0x14c>
1000a10c:	29403fcc 	andi	r5,r5,255
1000a110:	2803a91e 	bne	r5,zero,1000afb8 <___vfiprintf_internal_r+0x1268>
1000a114:	103fdb26 	beq	r2,zero,1000a084 <___vfiprintf_internal_r+0x334>
1000a118:	d8800c05 	stb	r2,48(sp)
1000a11c:	d8000845 	stb	zero,33(sp)
1000a120:	05400044 	movi	r21,1
1000a124:	05800044 	movi	r22,1
1000a128:	ddc00c04 	addi	r23,sp,48
1000a12c:	0000f106 	br	1000a4f4 <___vfiprintf_internal_r+0x7a4>
1000a130:	63002014 	ori	r12,r12,128
1000a134:	e0800007 	ldb	r2,0(fp)
1000a138:	003f5406 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a13c:	e0800007 	ldb	r2,0(fp)
1000a140:	e1000044 	addi	r4,fp,1
1000a144:	10c00aa0 	cmpeqi	r3,r2,42
1000a148:	1803c01e 	bne	r3,zero,1000b04c <___vfiprintf_internal_r+0x12fc>
1000a14c:	10fff404 	addi	r3,r2,-48
1000a150:	19c002b0 	cmpltui	r7,r3,10
1000a154:	2039883a 	mov	fp,r4
1000a158:	0013883a 	mov	r9,zero
1000a15c:	383f4c26 	beq	r7,zero,10009e90 <___vfiprintf_internal_r+0x140>
1000a160:	e7000044 	addi	fp,fp,1
1000a164:	4a4002a4 	muli	r9,r9,10
1000a168:	e0bfffc7 	ldb	r2,-1(fp)
1000a16c:	48d3883a 	add	r9,r9,r3
1000a170:	10fff404 	addi	r3,r2,-48
1000a174:	190002b0 	cmpltui	r4,r3,10
1000a178:	203ff91e 	bne	r4,zero,1000a160 <___vfiprintf_internal_r+0x410>
1000a17c:	003f4406 	br	10009e90 <___vfiprintf_internal_r+0x140>
1000a180:	e0800003 	ldbu	r2,0(fp)
1000a184:	10803fcc 	andi	r2,r2,255
1000a188:	1080201c 	xori	r2,r2,128
1000a18c:	63000114 	ori	r12,r12,4
1000a190:	10bfe004 	addi	r2,r2,-128
1000a194:	003f3d06 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a198:	01400044 	movi	r5,1
1000a19c:	01800ac4 	movi	r6,43
1000a1a0:	e0800007 	ldb	r2,0(fp)
1000a1a4:	003f3906 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a1a8:	d8800317 	ldw	r2,12(sp)
1000a1ac:	14000017 	ldw	r16,0(r2)
1000a1b0:	15c00104 	addi	r23,r2,4
1000a1b4:	e0800003 	ldbu	r2,0(fp)
1000a1b8:	80031416 	blt	r16,zero,1000ae0c <___vfiprintf_internal_r+0x10bc>
1000a1bc:	ddc00315 	stw	r23,12(sp)
1000a1c0:	10803fcc 	andi	r2,r2,255
1000a1c4:	1080201c 	xori	r2,r2,128
1000a1c8:	10bfe004 	addi	r2,r2,-128
1000a1cc:	003f2f06 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a1d0:	63000054 	ori	r12,r12,1
1000a1d4:	e0800007 	ldb	r2,0(fp)
1000a1d8:	003f2c06 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a1dc:	30c03fcc 	andi	r3,r6,255
1000a1e0:	18c0201c 	xori	r3,r3,128
1000a1e4:	18ffe004 	addi	r3,r3,-128
1000a1e8:	e0800003 	ldbu	r2,0(fp)
1000a1ec:	183ff41e 	bne	r3,zero,1000a1c0 <___vfiprintf_internal_r+0x470>
1000a1f0:	10803fcc 	andi	r2,r2,255
1000a1f4:	1080201c 	xori	r2,r2,128
1000a1f8:	01400044 	movi	r5,1
1000a1fc:	01800804 	movi	r6,32
1000a200:	10bfe004 	addi	r2,r2,-128
1000a204:	003f2106 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a208:	29403fcc 	andi	r5,r5,255
1000a20c:	2803741e 	bne	r5,zero,1000afe0 <___vfiprintf_internal_r+0x1290>
1000a210:	00c40074 	movhi	r3,4097
1000a214:	18c69404 	addi	r3,r3,6736
1000a218:	d8c00415 	stw	r3,16(sp)
1000a21c:	60c0080c 	andi	r3,r12,32
1000a220:	18004b26 	beq	r3,zero,1000a350 <___vfiprintf_internal_r+0x600>
1000a224:	d8c00317 	ldw	r3,12(sp)
1000a228:	1d400017 	ldw	r21,0(r3)
1000a22c:	1d800117 	ldw	r22,4(r3)
1000a230:	18c00204 	addi	r3,r3,8
1000a234:	d8c00315 	stw	r3,12(sp)
1000a238:	60c0004c 	andi	r3,r12,1
1000a23c:	18000226 	beq	r3,zero,1000a248 <___vfiprintf_internal_r+0x4f8>
1000a240:	ad86b03a 	or	r3,r21,r22
1000a244:	1802df1e 	bne	r3,zero,1000adc4 <___vfiprintf_internal_r+0x1074>
1000a248:	00800084 	movi	r2,2
1000a24c:	00001906 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a250:	e0800007 	ldb	r2,0(fp)
1000a254:	10c01b18 	cmpnei	r3,r2,108
1000a258:	18033026 	beq	r3,zero,1000af1c <___vfiprintf_internal_r+0x11cc>
1000a25c:	63000414 	ori	r12,r12,16
1000a260:	003f0a06 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a264:	63001014 	ori	r12,r12,64
1000a268:	e0800007 	ldb	r2,0(fp)
1000a26c:	003f0706 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a270:	63000814 	ori	r12,r12,32
1000a274:	e0800007 	ldb	r2,0(fp)
1000a278:	003f0406 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000a27c:	d8c00317 	ldw	r3,12(sp)
1000a280:	00800c04 	movi	r2,48
1000a284:	d8800885 	stb	r2,34(sp)
1000a288:	00801e04 	movi	r2,120
1000a28c:	01040074 	movhi	r4,4097
1000a290:	d88008c5 	stb	r2,35(sp)
1000a294:	1d400017 	ldw	r21,0(r3)
1000a298:	18800104 	addi	r2,r3,4
1000a29c:	d8800315 	stw	r2,12(sp)
1000a2a0:	20869404 	addi	r2,r4,6736
1000a2a4:	d8800415 	stw	r2,16(sp)
1000a2a8:	002d883a 	mov	r22,zero
1000a2ac:	63000094 	ori	r12,r12,2
1000a2b0:	00800084 	movi	r2,2
1000a2b4:	d8000845 	stb	zero,33(sp)
1000a2b8:	48ffffe0 	cmpeqi	r3,r9,-1
1000a2bc:	001b883a 	mov	r13,zero
1000a2c0:	18014c1e 	bne	r3,zero,1000a7f4 <___vfiprintf_internal_r+0xaa4>
1000a2c4:	053fdfc4 	movi	r20,-129
1000a2c8:	ad86b03a 	or	r3,r21,r22
1000a2cc:	6528703a 	and	r20,r12,r20
1000a2d0:	1802411e 	bne	r3,zero,1000abd8 <___vfiprintf_internal_r+0xe88>
1000a2d4:	48030d1e 	bne	r9,zero,1000af0c <___vfiprintf_internal_r+0x11bc>
1000a2d8:	1000791e 	bne	r2,zero,1000a4c0 <___vfiprintf_internal_r+0x770>
1000a2dc:	6580004c 	andi	r22,r12,1
1000a2e0:	b002b126 	beq	r22,zero,1000ada8 <___vfiprintf_internal_r+0x1058>
1000a2e4:	00800c04 	movi	r2,48
1000a2e8:	d88015c5 	stb	r2,87(sp)
1000a2ec:	ddc015c4 	addi	r23,sp,87
1000a2f0:	00017e06 	br	1000a8ec <___vfiprintf_internal_r+0xb9c>
1000a2f4:	29403fcc 	andi	r5,r5,255
1000a2f8:	2803461e 	bne	r5,zero,1000b014 <___vfiprintf_internal_r+0x12c4>
1000a2fc:	6080080c 	andi	r2,r12,32
1000a300:	10016b1e 	bne	r2,zero,1000a8b0 <___vfiprintf_internal_r+0xb60>
1000a304:	d8800317 	ldw	r2,12(sp)
1000a308:	60c0040c 	andi	r3,r12,16
1000a30c:	15400017 	ldw	r21,0(r2)
1000a310:	10800104 	addi	r2,r2,4
1000a314:	18010d1e 	bne	r3,zero,1000a74c <___vfiprintf_internal_r+0x9fc>
1000a318:	60c0100c 	andi	r3,r12,64
1000a31c:	18031326 	beq	r3,zero,1000af6c <___vfiprintf_internal_r+0x121c>
1000a320:	d8800315 	stw	r2,12(sp)
1000a324:	ad7fffcc 	andi	r21,r21,65535
1000a328:	002d883a 	mov	r22,zero
1000a32c:	0005883a 	mov	r2,zero
1000a330:	003fe006 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a334:	29403fcc 	andi	r5,r5,255
1000a338:	2803251e 	bne	r5,zero,1000afd0 <___vfiprintf_internal_r+0x1280>
1000a33c:	00c40074 	movhi	r3,4097
1000a340:	18c68f04 	addi	r3,r3,6716
1000a344:	d8c00415 	stw	r3,16(sp)
1000a348:	60c0080c 	andi	r3,r12,32
1000a34c:	183fb51e 	bne	r3,zero,1000a224 <___vfiprintf_internal_r+0x4d4>
1000a350:	d9000317 	ldw	r4,12(sp)
1000a354:	60c0040c 	andi	r3,r12,16
1000a358:	25400017 	ldw	r21,0(r4)
1000a35c:	21000104 	addi	r4,r4,4
1000a360:	d9000315 	stw	r4,12(sp)
1000a364:	18026e1e 	bne	r3,zero,1000ad20 <___vfiprintf_internal_r+0xfd0>
1000a368:	60c0100c 	andi	r3,r12,64
1000a36c:	18026c26 	beq	r3,zero,1000ad20 <___vfiprintf_internal_r+0xfd0>
1000a370:	ad7fffcc 	andi	r21,r21,65535
1000a374:	002d883a 	mov	r22,zero
1000a378:	003faf06 	br	1000a238 <___vfiprintf_internal_r+0x4e8>
1000a37c:	29403fcc 	andi	r5,r5,255
1000a380:	2803151e 	bne	r5,zero,1000afd8 <___vfiprintf_internal_r+0x1288>
1000a384:	6080080c 	andi	r2,r12,32
1000a388:	10013b1e 	bne	r2,zero,1000a878 <___vfiprintf_internal_r+0xb28>
1000a38c:	d8800317 	ldw	r2,12(sp)
1000a390:	60c0040c 	andi	r3,r12,16
1000a394:	15400017 	ldw	r21,0(r2)
1000a398:	10800104 	addi	r2,r2,4
1000a39c:	1800f81e 	bne	r3,zero,1000a780 <___vfiprintf_internal_r+0xa30>
1000a3a0:	60c0100c 	andi	r3,r12,64
1000a3a4:	1802ed26 	beq	r3,zero,1000af5c <___vfiprintf_internal_r+0x120c>
1000a3a8:	d8800315 	stw	r2,12(sp)
1000a3ac:	ad7fffcc 	andi	r21,r21,65535
1000a3b0:	002d883a 	mov	r22,zero
1000a3b4:	00800044 	movi	r2,1
1000a3b8:	003fbe06 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a3bc:	d8800317 	ldw	r2,12(sp)
1000a3c0:	d8000845 	stb	zero,33(sp)
1000a3c4:	15c00017 	ldw	r23,0(r2)
1000a3c8:	15000104 	addi	r20,r2,4
1000a3cc:	b802da26 	beq	r23,zero,1000af38 <___vfiprintf_internal_r+0x11e8>
1000a3d0:	48bfffe0 	cmpeqi	r2,r9,-1
1000a3d4:	1002901e 	bne	r2,zero,1000ae18 <___vfiprintf_internal_r+0x10c8>
1000a3d8:	480d883a 	mov	r6,r9
1000a3dc:	000b883a 	mov	r5,zero
1000a3e0:	b809883a 	mov	r4,r23
1000a3e4:	da000315 	stw	r8,12(sp)
1000a3e8:	db000215 	stw	r12,8(sp)
1000a3ec:	da400115 	stw	r9,4(sp)
1000a3f0:	00082400 	call	10008240 <memchr>
1000a3f4:	da400117 	ldw	r9,4(sp)
1000a3f8:	db000217 	ldw	r12,8(sp)
1000a3fc:	da000317 	ldw	r8,12(sp)
1000a400:	1002ef26 	beq	r2,zero,1000afc0 <___vfiprintf_internal_r+0x1270>
1000a404:	15edc83a 	sub	r22,r2,r23
1000a408:	b02b883a 	mov	r21,r22
1000a40c:	b000010e 	bge	r22,zero,1000a414 <___vfiprintf_internal_r+0x6c4>
1000a410:	002b883a 	mov	r21,zero
1000a414:	dd000315 	stw	r20,12(sp)
1000a418:	00003606 	br	1000a4f4 <___vfiprintf_internal_r+0x7a4>
1000a41c:	29403fcc 	andi	r5,r5,255
1000a420:	2802fa1e 	bne	r5,zero,1000b00c <___vfiprintf_internal_r+0x12bc>
1000a424:	d9000317 	ldw	r4,12(sp)
1000a428:	6080080c 	andi	r2,r12,32
1000a42c:	20c00104 	addi	r3,r4,4
1000a430:	10026a1e 	bne	r2,zero,1000addc <___vfiprintf_internal_r+0x108c>
1000a434:	6080040c 	andi	r2,r12,16
1000a438:	1002891e 	bne	r2,zero,1000ae60 <___vfiprintf_internal_r+0x1110>
1000a43c:	6300100c 	andi	r12,r12,64
1000a440:	60028726 	beq	r12,zero,1000ae60 <___vfiprintf_internal_r+0x1110>
1000a444:	d8800317 	ldw	r2,12(sp)
1000a448:	d8c00315 	stw	r3,12(sp)
1000a44c:	d8c00017 	ldw	r3,0(sp)
1000a450:	10800017 	ldw	r2,0(r2)
1000a454:	10c0000d 	sth	r3,0(r2)
1000a458:	003e6606 	br	10009df4 <___vfiprintf_internal_r+0xa4>
1000a45c:	29403fcc 	andi	r5,r5,255
1000a460:	2802e81e 	bne	r5,zero,1000b004 <___vfiprintf_internal_r+0x12b4>
1000a464:	6080080c 	andi	r2,r12,32
1000a468:	10010a1e 	bne	r2,zero,1000a894 <___vfiprintf_internal_r+0xb44>
1000a46c:	d8800317 	ldw	r2,12(sp)
1000a470:	60c0040c 	andi	r3,r12,16
1000a474:	10800104 	addi	r2,r2,4
1000a478:	1800ce1e 	bne	r3,zero,1000a7b4 <___vfiprintf_internal_r+0xa64>
1000a47c:	60c0100c 	andi	r3,r12,64
1000a480:	1800cc26 	beq	r3,zero,1000a7b4 <___vfiprintf_internal_r+0xa64>
1000a484:	d8c00317 	ldw	r3,12(sp)
1000a488:	d8800315 	stw	r2,12(sp)
1000a48c:	1d40000f 	ldh	r21,0(r3)
1000a490:	a82dd7fa 	srai	r22,r21,31
1000a494:	b005883a 	mov	r2,r22
1000a498:	1000cc16 	blt	r2,zero,1000a7cc <___vfiprintf_internal_r+0xa7c>
1000a49c:	48bfffd8 	cmpnei	r2,r9,-1
1000a4a0:	db400843 	ldbu	r13,33(sp)
1000a4a4:	10010926 	beq	r2,zero,1000a8cc <___vfiprintf_internal_r+0xb7c>
1000a4a8:	00ffdfc4 	movi	r3,-129
1000a4ac:	ad84b03a 	or	r2,r21,r22
1000a4b0:	60d8703a 	and	r12,r12,r3
1000a4b4:	1001051e 	bne	r2,zero,1000a8cc <___vfiprintf_internal_r+0xb7c>
1000a4b8:	4801071e 	bne	r9,zero,1000a8d8 <___vfiprintf_internal_r+0xb88>
1000a4bc:	6029883a 	mov	r20,r12
1000a4c0:	0013883a 	mov	r9,zero
1000a4c4:	002d883a 	mov	r22,zero
1000a4c8:	882f883a 	mov	r23,r17
1000a4cc:	00010706 	br	1000a8ec <___vfiprintf_internal_r+0xb9c>
1000a4d0:	d8c00317 	ldw	r3,12(sp)
1000a4d4:	d8000845 	stb	zero,33(sp)
1000a4d8:	05400044 	movi	r21,1
1000a4dc:	18800017 	ldw	r2,0(r3)
1000a4e0:	18c00104 	addi	r3,r3,4
1000a4e4:	d8c00315 	stw	r3,12(sp)
1000a4e8:	d8800c05 	stb	r2,48(sp)
1000a4ec:	05800044 	movi	r22,1
1000a4f0:	ddc00c04 	addi	r23,sp,48
1000a4f4:	6029883a 	mov	r20,r12
1000a4f8:	0013883a 	mov	r9,zero
1000a4fc:	a340008c 	andi	r13,r20,2
1000a500:	68000126 	beq	r13,zero,1000a508 <___vfiprintf_internal_r+0x7b8>
1000a504:	ad400084 	addi	r21,r21,2
1000a508:	d9000a17 	ldw	r4,40(sp)
1000a50c:	a300210c 	andi	r12,r20,132
1000a510:	d8800b17 	ldw	r2,44(sp)
1000a514:	21800044 	addi	r6,r4,1
1000a518:	300b883a 	mov	r5,r6
1000a51c:	6000021e 	bne	r12,zero,1000a528 <___vfiprintf_internal_r+0x7d8>
1000a520:	8547c83a 	sub	r3,r16,r21
1000a524:	00c1ae16 	blt	zero,r3,1000abe0 <___vfiprintf_internal_r+0xe90>
1000a528:	d9800847 	ldb	r6,33(sp)
1000a52c:	40c00204 	addi	r3,r8,8
1000a530:	30000d26 	beq	r6,zero,1000a568 <___vfiprintf_internal_r+0x818>
1000a534:	d9000844 	addi	r4,sp,33
1000a538:	10800044 	addi	r2,r2,1
1000a53c:	41000015 	stw	r4,0(r8)
1000a540:	01000044 	movi	r4,1
1000a544:	41000115 	stw	r4,4(r8)
1000a548:	d8800b15 	stw	r2,44(sp)
1000a54c:	d9400a15 	stw	r5,40(sp)
1000a550:	29000208 	cmpgei	r4,r5,8
1000a554:	2001831e 	bne	r4,zero,1000ab64 <___vfiprintf_internal_r+0xe14>
1000a558:	2809883a 	mov	r4,r5
1000a55c:	1811883a 	mov	r8,r3
1000a560:	29400044 	addi	r5,r5,1
1000a564:	18c00204 	addi	r3,r3,8
1000a568:	68001826 	beq	r13,zero,1000a5cc <___vfiprintf_internal_r+0x87c>
1000a56c:	d9000884 	addi	r4,sp,34
1000a570:	10800084 	addi	r2,r2,2
1000a574:	41000015 	stw	r4,0(r8)
1000a578:	01000084 	movi	r4,2
1000a57c:	41000115 	stw	r4,4(r8)
1000a580:	d8800b15 	stw	r2,44(sp)
1000a584:	d9400a15 	stw	r5,40(sp)
1000a588:	29000208 	cmpgei	r4,r5,8
1000a58c:	20018d26 	beq	r4,zero,1000abc4 <___vfiprintf_internal_r+0xe74>
1000a590:	1001ed26 	beq	r2,zero,1000ad48 <___vfiprintf_internal_r+0xff8>
1000a594:	d9800904 	addi	r6,sp,36
1000a598:	900b883a 	mov	r5,r18
1000a59c:	9809883a 	mov	r4,r19
1000a5a0:	da400215 	stw	r9,8(sp)
1000a5a4:	db000115 	stw	r12,4(sp)
1000a5a8:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a5ac:	103ebb1e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a5b0:	d9000a17 	ldw	r4,40(sp)
1000a5b4:	d8800b17 	ldw	r2,44(sp)
1000a5b8:	da400217 	ldw	r9,8(sp)
1000a5bc:	db000117 	ldw	r12,4(sp)
1000a5c0:	d8c01804 	addi	r3,sp,96
1000a5c4:	21400044 	addi	r5,r4,1
1000a5c8:	8811883a 	mov	r8,r17
1000a5cc:	63002018 	cmpnei	r12,r12,128
1000a5d0:	6000e326 	beq	r12,zero,1000a960 <___vfiprintf_internal_r+0xc10>
1000a5d4:	4d93c83a 	sub	r9,r9,r22
1000a5d8:	02412216 	blt	zero,r9,1000aa64 <___vfiprintf_internal_r+0xd14>
1000a5dc:	b085883a 	add	r2,r22,r2
1000a5e0:	d9400a15 	stw	r5,40(sp)
1000a5e4:	45c00015 	stw	r23,0(r8)
1000a5e8:	45800115 	stw	r22,4(r8)
1000a5ec:	d8800b15 	stw	r2,44(sp)
1000a5f0:	29400210 	cmplti	r5,r5,8
1000a5f4:	2800081e 	bne	r5,zero,1000a618 <___vfiprintf_internal_r+0x8c8>
1000a5f8:	10001426 	beq	r2,zero,1000a64c <___vfiprintf_internal_r+0x8fc>
1000a5fc:	d9800904 	addi	r6,sp,36
1000a600:	900b883a 	mov	r5,r18
1000a604:	9809883a 	mov	r4,r19
1000a608:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a60c:	103ea31e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a610:	d8800b17 	ldw	r2,44(sp)
1000a614:	8807883a 	mov	r3,r17
1000a618:	a500010c 	andi	r20,r20,4
1000a61c:	a0000226 	beq	r20,zero,1000a628 <___vfiprintf_internal_r+0x8d8>
1000a620:	8569c83a 	sub	r20,r16,r21
1000a624:	05000f16 	blt	zero,r20,1000a664 <___vfiprintf_internal_r+0x914>
1000a628:	8540010e 	bge	r16,r21,1000a630 <___vfiprintf_internal_r+0x8e0>
1000a62c:	a821883a 	mov	r16,r21
1000a630:	d8c00017 	ldw	r3,0(sp)
1000a634:	1c07883a 	add	r3,r3,r16
1000a638:	d8c00015 	stw	r3,0(sp)
1000a63c:	10013f1e 	bne	r2,zero,1000ab3c <___vfiprintf_internal_r+0xdec>
1000a640:	d8000a15 	stw	zero,40(sp)
1000a644:	8811883a 	mov	r8,r17
1000a648:	003dea06 	br	10009df4 <___vfiprintf_internal_r+0xa4>
1000a64c:	d8000a15 	stw	zero,40(sp)
1000a650:	a500010c 	andi	r20,r20,4
1000a654:	a0019d26 	beq	r20,zero,1000accc <___vfiprintf_internal_r+0xf7c>
1000a658:	8569c83a 	sub	r20,r16,r21
1000a65c:	05019b0e 	bge	zero,r20,1000accc <___vfiprintf_internal_r+0xf7c>
1000a660:	8807883a 	mov	r3,r17
1000a664:	a1000450 	cmplti	r4,r20,17
1000a668:	01c40074 	movhi	r7,4097
1000a66c:	d9400a17 	ldw	r5,40(sp)
1000a670:	20026c1e 	bne	r4,zero,1000b024 <___vfiprintf_internal_r+0x12d4>
1000a674:	39c6f504 	addi	r7,r7,7124
1000a678:	05800404 	movi	r22,16
1000a67c:	00000606 	br	1000a698 <___vfiprintf_internal_r+0x948>
1000a680:	29800084 	addi	r6,r5,2
1000a684:	18c00204 	addi	r3,r3,8
1000a688:	200b883a 	mov	r5,r4
1000a68c:	a53ffc04 	addi	r20,r20,-16
1000a690:	a1000448 	cmpgei	r4,r20,17
1000a694:	20001726 	beq	r4,zero,1000a6f4 <___vfiprintf_internal_r+0x9a4>
1000a698:	29000044 	addi	r4,r5,1
1000a69c:	10800404 	addi	r2,r2,16
1000a6a0:	19c00015 	stw	r7,0(r3)
1000a6a4:	1d800115 	stw	r22,4(r3)
1000a6a8:	d8800b15 	stw	r2,44(sp)
1000a6ac:	d9000a15 	stw	r4,40(sp)
1000a6b0:	21800208 	cmpgei	r6,r4,8
1000a6b4:	303ff226 	beq	r6,zero,1000a680 <___vfiprintf_internal_r+0x930>
1000a6b8:	d9800904 	addi	r6,sp,36
1000a6bc:	900b883a 	mov	r5,r18
1000a6c0:	9809883a 	mov	r4,r19
1000a6c4:	1000a226 	beq	r2,zero,1000a950 <___vfiprintf_internal_r+0xc00>
1000a6c8:	d9c00115 	stw	r7,4(sp)
1000a6cc:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a6d0:	103e721e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a6d4:	d9400a17 	ldw	r5,40(sp)
1000a6d8:	a53ffc04 	addi	r20,r20,-16
1000a6dc:	a1000448 	cmpgei	r4,r20,17
1000a6e0:	d8800b17 	ldw	r2,44(sp)
1000a6e4:	8807883a 	mov	r3,r17
1000a6e8:	29800044 	addi	r6,r5,1
1000a6ec:	d9c00117 	ldw	r7,4(sp)
1000a6f0:	203fe91e 	bne	r4,zero,1000a698 <___vfiprintf_internal_r+0x948>
1000a6f4:	1505883a 	add	r2,r2,r20
1000a6f8:	d9800a15 	stw	r6,40(sp)
1000a6fc:	19c00015 	stw	r7,0(r3)
1000a700:	1d000115 	stw	r20,4(r3)
1000a704:	d8800b15 	stw	r2,44(sp)
1000a708:	31800210 	cmplti	r6,r6,8
1000a70c:	303fc61e 	bne	r6,zero,1000a628 <___vfiprintf_internal_r+0x8d8>
1000a710:	10016e26 	beq	r2,zero,1000accc <___vfiprintf_internal_r+0xf7c>
1000a714:	d9800904 	addi	r6,sp,36
1000a718:	900b883a 	mov	r5,r18
1000a71c:	9809883a 	mov	r4,r19
1000a720:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a724:	103e5d1e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a728:	d8800b17 	ldw	r2,44(sp)
1000a72c:	003fbe06 	br	1000a628 <___vfiprintf_internal_r+0x8d8>
1000a730:	29403fcc 	andi	r5,r5,255
1000a734:	28022c1e 	bne	r5,zero,1000afe8 <___vfiprintf_internal_r+0x1298>
1000a738:	6080080c 	andi	r2,r12,32
1000a73c:	63000414 	ori	r12,r12,16
1000a740:	10005b1e 	bne	r2,zero,1000a8b0 <___vfiprintf_internal_r+0xb60>
1000a744:	d8800317 	ldw	r2,12(sp)
1000a748:	10800104 	addi	r2,r2,4
1000a74c:	d8c00317 	ldw	r3,12(sp)
1000a750:	002d883a 	mov	r22,zero
1000a754:	d8800315 	stw	r2,12(sp)
1000a758:	1d400017 	ldw	r21,0(r3)
1000a75c:	0005883a 	mov	r2,zero
1000a760:	003ed406 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a764:	29403fcc 	andi	r5,r5,255
1000a768:	2802211e 	bne	r5,zero,1000aff0 <___vfiprintf_internal_r+0x12a0>
1000a76c:	6080080c 	andi	r2,r12,32
1000a770:	63000414 	ori	r12,r12,16
1000a774:	1000401e 	bne	r2,zero,1000a878 <___vfiprintf_internal_r+0xb28>
1000a778:	d8800317 	ldw	r2,12(sp)
1000a77c:	10800104 	addi	r2,r2,4
1000a780:	d8c00317 	ldw	r3,12(sp)
1000a784:	002d883a 	mov	r22,zero
1000a788:	d8800315 	stw	r2,12(sp)
1000a78c:	1d400017 	ldw	r21,0(r3)
1000a790:	00800044 	movi	r2,1
1000a794:	003ec706 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a798:	29403fcc 	andi	r5,r5,255
1000a79c:	28021f1e 	bne	r5,zero,1000b01c <___vfiprintf_internal_r+0x12cc>
1000a7a0:	6080080c 	andi	r2,r12,32
1000a7a4:	63000414 	ori	r12,r12,16
1000a7a8:	10003a1e 	bne	r2,zero,1000a894 <___vfiprintf_internal_r+0xb44>
1000a7ac:	d8800317 	ldw	r2,12(sp)
1000a7b0:	10800104 	addi	r2,r2,4
1000a7b4:	d8c00317 	ldw	r3,12(sp)
1000a7b8:	1d400017 	ldw	r21,0(r3)
1000a7bc:	d8800315 	stw	r2,12(sp)
1000a7c0:	a82dd7fa 	srai	r22,r21,31
1000a7c4:	b005883a 	mov	r2,r22
1000a7c8:	103f340e 	bge	r2,zero,1000a49c <___vfiprintf_internal_r+0x74c>
1000a7cc:	056bc83a 	sub	r21,zero,r21
1000a7d0:	a804c03a 	cmpne	r2,r21,zero
1000a7d4:	05adc83a 	sub	r22,zero,r22
1000a7d8:	b0adc83a 	sub	r22,r22,r2
1000a7dc:	00800b44 	movi	r2,45
1000a7e0:	d8800845 	stb	r2,33(sp)
1000a7e4:	48ffffe0 	cmpeqi	r3,r9,-1
1000a7e8:	03400b44 	movi	r13,45
1000a7ec:	00800044 	movi	r2,1
1000a7f0:	183eb426 	beq	r3,zero,1000a2c4 <___vfiprintf_internal_r+0x574>
1000a7f4:	10c00060 	cmpeqi	r3,r2,1
1000a7f8:	1800341e 	bne	r3,zero,1000a8cc <___vfiprintf_internal_r+0xb7c>
1000a7fc:	108000a0 	cmpeqi	r2,r2,2
1000a800:	1000431e 	bne	r2,zero,1000a910 <___vfiprintf_internal_r+0xbc0>
1000a804:	8807883a 	mov	r3,r17
1000a808:	00000106 	br	1000a810 <___vfiprintf_internal_r+0xac0>
1000a80c:	b807883a 	mov	r3,r23
1000a810:	a808d0fa 	srli	r4,r21,3
1000a814:	b00a977a 	slli	r5,r22,29
1000a818:	b02cd0fa 	srli	r22,r22,3
1000a81c:	ad4001cc 	andi	r21,r21,7
1000a820:	a8800c04 	addi	r2,r21,48
1000a824:	292ab03a 	or	r21,r5,r4
1000a828:	18bfffc5 	stb	r2,-1(r3)
1000a82c:	ad88b03a 	or	r4,r21,r22
1000a830:	1dffffc4 	addi	r23,r3,-1
1000a834:	203ff51e 	bne	r4,zero,1000a80c <___vfiprintf_internal_r+0xabc>
1000a838:	6100004c 	andi	r4,r12,1
1000a83c:	20004126 	beq	r4,zero,1000a944 <___vfiprintf_internal_r+0xbf4>
1000a840:	10803fcc 	andi	r2,r2,255
1000a844:	1080201c 	xori	r2,r2,128
1000a848:	10bfe004 	addi	r2,r2,-128
1000a84c:	10800c18 	cmpnei	r2,r2,48
1000a850:	10003c26 	beq	r2,zero,1000a944 <___vfiprintf_internal_r+0xbf4>
1000a854:	18ffff84 	addi	r3,r3,-2
1000a858:	00800c04 	movi	r2,48
1000a85c:	b8bfffc5 	stb	r2,-1(r23)
1000a860:	88edc83a 	sub	r22,r17,r3
1000a864:	6029883a 	mov	r20,r12
1000a868:	182f883a 	mov	r23,r3
1000a86c:	00001f06 	br	1000a8ec <___vfiprintf_internal_r+0xb9c>
1000a870:	0006ddc0 	call	10006ddc <__sinit>
1000a874:	003d4806 	br	10009d98 <___vfiprintf_internal_r+0x48>
1000a878:	d8c00317 	ldw	r3,12(sp)
1000a87c:	00800044 	movi	r2,1
1000a880:	1d400017 	ldw	r21,0(r3)
1000a884:	1d800117 	ldw	r22,4(r3)
1000a888:	18c00204 	addi	r3,r3,8
1000a88c:	d8c00315 	stw	r3,12(sp)
1000a890:	003e8806 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a894:	d8c00317 	ldw	r3,12(sp)
1000a898:	18800117 	ldw	r2,4(r3)
1000a89c:	1d400017 	ldw	r21,0(r3)
1000a8a0:	18c00204 	addi	r3,r3,8
1000a8a4:	d8c00315 	stw	r3,12(sp)
1000a8a8:	102d883a 	mov	r22,r2
1000a8ac:	003efa06 	br	1000a498 <___vfiprintf_internal_r+0x748>
1000a8b0:	d8c00317 	ldw	r3,12(sp)
1000a8b4:	0005883a 	mov	r2,zero
1000a8b8:	1d400017 	ldw	r21,0(r3)
1000a8bc:	1d800117 	ldw	r22,4(r3)
1000a8c0:	18c00204 	addi	r3,r3,8
1000a8c4:	d8c00315 	stw	r3,12(sp)
1000a8c8:	003e7a06 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000a8cc:	b0016a1e 	bne	r22,zero,1000ae78 <___vfiprintf_internal_r+0x1128>
1000a8d0:	a88002a8 	cmpgeui	r2,r21,10
1000a8d4:	1001681e 	bne	r2,zero,1000ae78 <___vfiprintf_internal_r+0x1128>
1000a8d8:	ad400c04 	addi	r21,r21,48
1000a8dc:	dd4015c5 	stb	r21,87(sp)
1000a8e0:	6029883a 	mov	r20,r12
1000a8e4:	05800044 	movi	r22,1
1000a8e8:	ddc015c4 	addi	r23,sp,87
1000a8ec:	482b883a 	mov	r21,r9
1000a8f0:	4d80010e 	bge	r9,r22,1000a8f8 <___vfiprintf_internal_r+0xba8>
1000a8f4:	b02b883a 	mov	r21,r22
1000a8f8:	6b403fcc 	andi	r13,r13,255
1000a8fc:	6b40201c 	xori	r13,r13,128
1000a900:	6b7fe004 	addi	r13,r13,-128
1000a904:	683efd26 	beq	r13,zero,1000a4fc <___vfiprintf_internal_r+0x7ac>
1000a908:	ad400044 	addi	r21,r21,1
1000a90c:	003efb06 	br	1000a4fc <___vfiprintf_internal_r+0x7ac>
1000a910:	882f883a 	mov	r23,r17
1000a914:	d9000417 	ldw	r4,16(sp)
1000a918:	a88003cc 	andi	r2,r21,15
1000a91c:	b006973a 	slli	r3,r22,28
1000a920:	2085883a 	add	r2,r4,r2
1000a924:	a82ad13a 	srli	r21,r21,4
1000a928:	10800003 	ldbu	r2,0(r2)
1000a92c:	b02cd13a 	srli	r22,r22,4
1000a930:	bdffffc4 	addi	r23,r23,-1
1000a934:	1d6ab03a 	or	r21,r3,r21
1000a938:	b8800005 	stb	r2,0(r23)
1000a93c:	ad84b03a 	or	r2,r21,r22
1000a940:	103ff41e 	bne	r2,zero,1000a914 <___vfiprintf_internal_r+0xbc4>
1000a944:	8dedc83a 	sub	r22,r17,r23
1000a948:	6029883a 	mov	r20,r12
1000a94c:	003fe706 	br	1000a8ec <___vfiprintf_internal_r+0xb9c>
1000a950:	01800044 	movi	r6,1
1000a954:	000b883a 	mov	r5,zero
1000a958:	8807883a 	mov	r3,r17
1000a95c:	003f4b06 	br	1000a68c <___vfiprintf_internal_r+0x93c>
1000a960:	8559c83a 	sub	r12,r16,r21
1000a964:	033f1b0e 	bge	zero,r12,1000a5d4 <___vfiprintf_internal_r+0x884>
1000a968:	61800450 	cmplti	r6,r12,17
1000a96c:	01c40074 	movhi	r7,4097
1000a970:	3001af1e 	bne	r6,zero,1000b030 <___vfiprintf_internal_r+0x12e0>
1000a974:	39c6f104 	addi	r7,r7,7108
1000a978:	03400404 	movi	r13,16
1000a97c:	00000606 	br	1000a998 <___vfiprintf_internal_r+0xc48>
1000a980:	21800084 	addi	r6,r4,2
1000a984:	42000204 	addi	r8,r8,8
1000a988:	1809883a 	mov	r4,r3
1000a98c:	633ffc04 	addi	r12,r12,-16
1000a990:	60c00448 	cmpgei	r3,r12,17
1000a994:	18001c26 	beq	r3,zero,1000aa08 <___vfiprintf_internal_r+0xcb8>
1000a998:	20c00044 	addi	r3,r4,1
1000a99c:	10800404 	addi	r2,r2,16
1000a9a0:	41c00015 	stw	r7,0(r8)
1000a9a4:	43400115 	stw	r13,4(r8)
1000a9a8:	d8800b15 	stw	r2,44(sp)
1000a9ac:	d8c00a15 	stw	r3,40(sp)
1000a9b0:	19400208 	cmpgei	r5,r3,8
1000a9b4:	283ff226 	beq	r5,zero,1000a980 <___vfiprintf_internal_r+0xc30>
1000a9b8:	d9800904 	addi	r6,sp,36
1000a9bc:	900b883a 	mov	r5,r18
1000a9c0:	9809883a 	mov	r4,r19
1000a9c4:	10006326 	beq	r2,zero,1000ab54 <___vfiprintf_internal_r+0xe04>
1000a9c8:	d9c00515 	stw	r7,20(sp)
1000a9cc:	db000215 	stw	r12,8(sp)
1000a9d0:	da400115 	stw	r9,4(sp)
1000a9d4:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000a9d8:	103db01e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000a9dc:	db000217 	ldw	r12,8(sp)
1000a9e0:	d9000a17 	ldw	r4,40(sp)
1000a9e4:	d8800b17 	ldw	r2,44(sp)
1000a9e8:	633ffc04 	addi	r12,r12,-16
1000a9ec:	60c00448 	cmpgei	r3,r12,17
1000a9f0:	8811883a 	mov	r8,r17
1000a9f4:	21800044 	addi	r6,r4,1
1000a9f8:	d9c00517 	ldw	r7,20(sp)
1000a9fc:	03400404 	movi	r13,16
1000aa00:	da400117 	ldw	r9,4(sp)
1000aa04:	183fe41e 	bne	r3,zero,1000a998 <___vfiprintf_internal_r+0xc48>
1000aa08:	43400204 	addi	r13,r8,8
1000aa0c:	1305883a 	add	r2,r2,r12
1000aa10:	41c00015 	stw	r7,0(r8)
1000aa14:	43000115 	stw	r12,4(r8)
1000aa18:	d8800b15 	stw	r2,44(sp)
1000aa1c:	d9800a15 	stw	r6,40(sp)
1000aa20:	30c00208 	cmpgei	r3,r6,8
1000aa24:	1800e226 	beq	r3,zero,1000adb0 <___vfiprintf_internal_r+0x1060>
1000aa28:	10015726 	beq	r2,zero,1000af88 <___vfiprintf_internal_r+0x1238>
1000aa2c:	d9800904 	addi	r6,sp,36
1000aa30:	900b883a 	mov	r5,r18
1000aa34:	9809883a 	mov	r4,r19
1000aa38:	da400115 	stw	r9,4(sp)
1000aa3c:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000aa40:	103d961e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000aa44:	da400117 	ldw	r9,4(sp)
1000aa48:	d9000a17 	ldw	r4,40(sp)
1000aa4c:	d8800b17 	ldw	r2,44(sp)
1000aa50:	4d93c83a 	sub	r9,r9,r22
1000aa54:	d8c01804 	addi	r3,sp,96
1000aa58:	21400044 	addi	r5,r4,1
1000aa5c:	8811883a 	mov	r8,r17
1000aa60:	027ede0e 	bge	zero,r9,1000a5dc <___vfiprintf_internal_r+0x88c>
1000aa64:	49800450 	cmplti	r6,r9,17
1000aa68:	01c40074 	movhi	r7,4097
1000aa6c:	3001431e 	bne	r6,zero,1000af7c <___vfiprintf_internal_r+0x122c>
1000aa70:	39c6f104 	addi	r7,r7,7108
1000aa74:	03000404 	movi	r12,16
1000aa78:	00000606 	br	1000aa94 <___vfiprintf_internal_r+0xd44>
1000aa7c:	21400084 	addi	r5,r4,2
1000aa80:	42000204 	addi	r8,r8,8
1000aa84:	1809883a 	mov	r4,r3
1000aa88:	4a7ffc04 	addi	r9,r9,-16
1000aa8c:	48c00448 	cmpgei	r3,r9,17
1000aa90:	18001a26 	beq	r3,zero,1000aafc <___vfiprintf_internal_r+0xdac>
1000aa94:	20c00044 	addi	r3,r4,1
1000aa98:	10800404 	addi	r2,r2,16
1000aa9c:	41c00015 	stw	r7,0(r8)
1000aaa0:	43000115 	stw	r12,4(r8)
1000aaa4:	d8800b15 	stw	r2,44(sp)
1000aaa8:	d8c00a15 	stw	r3,40(sp)
1000aaac:	19400208 	cmpgei	r5,r3,8
1000aab0:	283ff226 	beq	r5,zero,1000aa7c <___vfiprintf_internal_r+0xd2c>
1000aab4:	d9800904 	addi	r6,sp,36
1000aab8:	900b883a 	mov	r5,r18
1000aabc:	9809883a 	mov	r4,r19
1000aac0:	10001a26 	beq	r2,zero,1000ab2c <___vfiprintf_internal_r+0xddc>
1000aac4:	d9c00215 	stw	r7,8(sp)
1000aac8:	da400115 	stw	r9,4(sp)
1000aacc:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000aad0:	103d721e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000aad4:	da400117 	ldw	r9,4(sp)
1000aad8:	d9000a17 	ldw	r4,40(sp)
1000aadc:	d8800b17 	ldw	r2,44(sp)
1000aae0:	4a7ffc04 	addi	r9,r9,-16
1000aae4:	48c00448 	cmpgei	r3,r9,17
1000aae8:	8811883a 	mov	r8,r17
1000aaec:	21400044 	addi	r5,r4,1
1000aaf0:	d9c00217 	ldw	r7,8(sp)
1000aaf4:	03000404 	movi	r12,16
1000aaf8:	183fe61e 	bne	r3,zero,1000aa94 <___vfiprintf_internal_r+0xd44>
1000aafc:	41000204 	addi	r4,r8,8
1000ab00:	1245883a 	add	r2,r2,r9
1000ab04:	41c00015 	stw	r7,0(r8)
1000ab08:	42400115 	stw	r9,4(r8)
1000ab0c:	d8800b15 	stw	r2,44(sp)
1000ab10:	d9400a15 	stw	r5,40(sp)
1000ab14:	28c00208 	cmpgei	r3,r5,8
1000ab18:	1800721e 	bne	r3,zero,1000ace4 <___vfiprintf_internal_r+0xf94>
1000ab1c:	29400044 	addi	r5,r5,1
1000ab20:	20c00204 	addi	r3,r4,8
1000ab24:	2011883a 	mov	r8,r4
1000ab28:	003eac06 	br	1000a5dc <___vfiprintf_internal_r+0x88c>
1000ab2c:	01400044 	movi	r5,1
1000ab30:	0009883a 	mov	r4,zero
1000ab34:	8811883a 	mov	r8,r17
1000ab38:	003fd306 	br	1000aa88 <___vfiprintf_internal_r+0xd38>
1000ab3c:	d9800904 	addi	r6,sp,36
1000ab40:	900b883a 	mov	r5,r18
1000ab44:	9809883a 	mov	r4,r19
1000ab48:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000ab4c:	103ebc26 	beq	r2,zero,1000a640 <___vfiprintf_internal_r+0x8f0>
1000ab50:	003d5206 	br	1000a09c <___vfiprintf_internal_r+0x34c>
1000ab54:	01800044 	movi	r6,1
1000ab58:	0009883a 	mov	r4,zero
1000ab5c:	8811883a 	mov	r8,r17
1000ab60:	003f8a06 	br	1000a98c <___vfiprintf_internal_r+0xc3c>
1000ab64:	10007026 	beq	r2,zero,1000ad28 <___vfiprintf_internal_r+0xfd8>
1000ab68:	d9800904 	addi	r6,sp,36
1000ab6c:	900b883a 	mov	r5,r18
1000ab70:	9809883a 	mov	r4,r19
1000ab74:	da400515 	stw	r9,20(sp)
1000ab78:	db000215 	stw	r12,8(sp)
1000ab7c:	db400115 	stw	r13,4(sp)
1000ab80:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000ab84:	103d451e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000ab88:	d9000a17 	ldw	r4,40(sp)
1000ab8c:	d8800b17 	ldw	r2,44(sp)
1000ab90:	d8c01804 	addi	r3,sp,96
1000ab94:	21400044 	addi	r5,r4,1
1000ab98:	8811883a 	mov	r8,r17
1000ab9c:	da400517 	ldw	r9,20(sp)
1000aba0:	db000217 	ldw	r12,8(sp)
1000aba4:	db400117 	ldw	r13,4(sp)
1000aba8:	003e6f06 	br	1000a568 <___vfiprintf_internal_r+0x818>
1000abac:	d8800884 	addi	r2,sp,34
1000abb0:	d8801615 	stw	r2,88(sp)
1000abb4:	00800084 	movi	r2,2
1000abb8:	d8801715 	stw	r2,92(sp)
1000abbc:	d8c01804 	addi	r3,sp,96
1000abc0:	01400044 	movi	r5,1
1000abc4:	1811883a 	mov	r8,r3
1000abc8:	2809883a 	mov	r4,r5
1000abcc:	21400044 	addi	r5,r4,1
1000abd0:	40c00204 	addi	r3,r8,8
1000abd4:	003e7d06 	br	1000a5cc <___vfiprintf_internal_r+0x87c>
1000abd8:	a019883a 	mov	r12,r20
1000abdc:	003f0506 	br	1000a7f4 <___vfiprintf_internal_r+0xaa4>
1000abe0:	19400450 	cmplti	r5,r3,17
1000abe4:	01c40074 	movhi	r7,4097
1000abe8:	2801031e 	bne	r5,zero,1000aff8 <___vfiprintf_internal_r+0x12a8>
1000abec:	39c6f504 	addi	r7,r7,7124
1000abf0:	03800404 	movi	r14,16
1000abf4:	00000706 	br	1000ac14 <___vfiprintf_internal_r+0xec4>
1000abf8:	23c00084 	addi	r15,r4,2
1000abfc:	42000204 	addi	r8,r8,8
1000ac00:	3009883a 	mov	r4,r6
1000ac04:	18fffc04 	addi	r3,r3,-16
1000ac08:	19400448 	cmpgei	r5,r3,17
1000ac0c:	28002026 	beq	r5,zero,1000ac90 <___vfiprintf_internal_r+0xf40>
1000ac10:	21800044 	addi	r6,r4,1
1000ac14:	10800404 	addi	r2,r2,16
1000ac18:	41c00015 	stw	r7,0(r8)
1000ac1c:	43800115 	stw	r14,4(r8)
1000ac20:	d8800b15 	stw	r2,44(sp)
1000ac24:	d9800a15 	stw	r6,40(sp)
1000ac28:	31400208 	cmpgei	r5,r6,8
1000ac2c:	283ff226 	beq	r5,zero,1000abf8 <___vfiprintf_internal_r+0xea8>
1000ac30:	d9800904 	addi	r6,sp,36
1000ac34:	900b883a 	mov	r5,r18
1000ac38:	9809883a 	mov	r4,r19
1000ac3c:	10001f26 	beq	r2,zero,1000acbc <___vfiprintf_internal_r+0xf6c>
1000ac40:	d9c00715 	stw	r7,28(sp)
1000ac44:	d8c00615 	stw	r3,24(sp)
1000ac48:	da400515 	stw	r9,20(sp)
1000ac4c:	db000215 	stw	r12,8(sp)
1000ac50:	db400115 	stw	r13,4(sp)
1000ac54:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000ac58:	103d101e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000ac5c:	d8c00617 	ldw	r3,24(sp)
1000ac60:	d9000a17 	ldw	r4,40(sp)
1000ac64:	d8800b17 	ldw	r2,44(sp)
1000ac68:	18fffc04 	addi	r3,r3,-16
1000ac6c:	19400448 	cmpgei	r5,r3,17
1000ac70:	8811883a 	mov	r8,r17
1000ac74:	23c00044 	addi	r15,r4,1
1000ac78:	d9c00717 	ldw	r7,28(sp)
1000ac7c:	03800404 	movi	r14,16
1000ac80:	da400517 	ldw	r9,20(sp)
1000ac84:	db000217 	ldw	r12,8(sp)
1000ac88:	db400117 	ldw	r13,4(sp)
1000ac8c:	283fe01e 	bne	r5,zero,1000ac10 <___vfiprintf_internal_r+0xec0>
1000ac90:	10c5883a 	add	r2,r2,r3
1000ac94:	40c00115 	stw	r3,4(r8)
1000ac98:	41c00015 	stw	r7,0(r8)
1000ac9c:	d8800b15 	stw	r2,44(sp)
1000aca0:	dbc00a15 	stw	r15,40(sp)
1000aca4:	78c00208 	cmpgei	r3,r15,8
1000aca8:	18002c1e 	bne	r3,zero,1000ad5c <___vfiprintf_internal_r+0x100c>
1000acac:	42000204 	addi	r8,r8,8
1000acb0:	79400044 	addi	r5,r15,1
1000acb4:	7809883a 	mov	r4,r15
1000acb8:	003e1b06 	br	1000a528 <___vfiprintf_internal_r+0x7d8>
1000acbc:	0009883a 	mov	r4,zero
1000acc0:	03c00044 	movi	r15,1
1000acc4:	8811883a 	mov	r8,r17
1000acc8:	003fce06 	br	1000ac04 <___vfiprintf_internal_r+0xeb4>
1000accc:	8540010e 	bge	r16,r21,1000acd4 <___vfiprintf_internal_r+0xf84>
1000acd0:	a821883a 	mov	r16,r21
1000acd4:	d8800017 	ldw	r2,0(sp)
1000acd8:	1405883a 	add	r2,r2,r16
1000acdc:	d8800015 	stw	r2,0(sp)
1000ace0:	003e5706 	br	1000a640 <___vfiprintf_internal_r+0x8f0>
1000ace4:	10008126 	beq	r2,zero,1000aeec <___vfiprintf_internal_r+0x119c>
1000ace8:	d9800904 	addi	r6,sp,36
1000acec:	900b883a 	mov	r5,r18
1000acf0:	9809883a 	mov	r4,r19
1000acf4:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000acf8:	103ce81e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000acfc:	d9400a17 	ldw	r5,40(sp)
1000ad00:	d8800b17 	ldw	r2,44(sp)
1000ad04:	d8c01804 	addi	r3,sp,96
1000ad08:	29400044 	addi	r5,r5,1
1000ad0c:	8811883a 	mov	r8,r17
1000ad10:	003e3206 	br	1000a5dc <___vfiprintf_internal_r+0x88c>
1000ad14:	d8000a15 	stw	zero,40(sp)
1000ad18:	8811883a 	mov	r8,r17
1000ad1c:	003c4e06 	br	10009e58 <___vfiprintf_internal_r+0x108>
1000ad20:	002d883a 	mov	r22,zero
1000ad24:	003d4406 	br	1000a238 <___vfiprintf_internal_r+0x4e8>
1000ad28:	68003326 	beq	r13,zero,1000adf8 <___vfiprintf_internal_r+0x10a8>
1000ad2c:	d8800884 	addi	r2,sp,34
1000ad30:	d8801615 	stw	r2,88(sp)
1000ad34:	00800084 	movi	r2,2
1000ad38:	d8801715 	stw	r2,92(sp)
1000ad3c:	da001804 	addi	r8,sp,96
1000ad40:	01000044 	movi	r4,1
1000ad44:	003fa106 	br	1000abcc <___vfiprintf_internal_r+0xe7c>
1000ad48:	d8c01804 	addi	r3,sp,96
1000ad4c:	01400044 	movi	r5,1
1000ad50:	0009883a 	mov	r4,zero
1000ad54:	8811883a 	mov	r8,r17
1000ad58:	003e1c06 	br	1000a5cc <___vfiprintf_internal_r+0x87c>
1000ad5c:	10003826 	beq	r2,zero,1000ae40 <___vfiprintf_internal_r+0x10f0>
1000ad60:	d9800904 	addi	r6,sp,36
1000ad64:	900b883a 	mov	r5,r18
1000ad68:	9809883a 	mov	r4,r19
1000ad6c:	da400515 	stw	r9,20(sp)
1000ad70:	db000215 	stw	r12,8(sp)
1000ad74:	db400115 	stw	r13,4(sp)
1000ad78:	0009c440 	call	10009c44 <__sprint_r.part.0>
1000ad7c:	103cc71e 	bne	r2,zero,1000a09c <___vfiprintf_internal_r+0x34c>
1000ad80:	d9000a17 	ldw	r4,40(sp)
1000ad84:	d8800b17 	ldw	r2,44(sp)
1000ad88:	8811883a 	mov	r8,r17
1000ad8c:	21400044 	addi	r5,r4,1
1000ad90:	da400517 	ldw	r9,20(sp)
1000ad94:	db000217 	ldw	r12,8(sp)
1000ad98:	db400117 	ldw	r13,4(sp)
1000ad9c:	003de206 	br	1000a528 <___vfiprintf_internal_r+0x7d8>
1000ada0:	e029883a 	mov	r20,fp
1000ada4:	003c3106 	br	10009e6c <___vfiprintf_internal_r+0x11c>
1000ada8:	882f883a 	mov	r23,r17
1000adac:	003ecf06 	br	1000a8ec <___vfiprintf_internal_r+0xb9c>
1000adb0:	31400044 	addi	r5,r6,1
1000adb4:	68c00204 	addi	r3,r13,8
1000adb8:	3009883a 	mov	r4,r6
1000adbc:	6811883a 	mov	r8,r13
1000adc0:	003e0406 	br	1000a5d4 <___vfiprintf_internal_r+0x884>
1000adc4:	00c00c04 	movi	r3,48
1000adc8:	d88008c5 	stb	r2,35(sp)
1000adcc:	d8c00885 	stb	r3,34(sp)
1000add0:	63000094 	ori	r12,r12,2
1000add4:	00800084 	movi	r2,2
1000add8:	003d3606 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000addc:	d9400017 	ldw	r5,0(sp)
1000ade0:	20800017 	ldw	r2,0(r4)
1000ade4:	d8c00315 	stw	r3,12(sp)
1000ade8:	2809d7fa 	srai	r4,r5,31
1000adec:	11400015 	stw	r5,0(r2)
1000adf0:	11000115 	stw	r4,4(r2)
1000adf4:	003bff06 	br	10009df4 <___vfiprintf_internal_r+0xa4>
1000adf8:	0009883a 	mov	r4,zero
1000adfc:	d8c01804 	addi	r3,sp,96
1000ae00:	01400044 	movi	r5,1
1000ae04:	8811883a 	mov	r8,r17
1000ae08:	003df006 	br	1000a5cc <___vfiprintf_internal_r+0x87c>
1000ae0c:	0421c83a 	sub	r16,zero,r16
1000ae10:	ddc00315 	stw	r23,12(sp)
1000ae14:	003cdb06 	br	1000a184 <___vfiprintf_internal_r+0x434>
1000ae18:	b809883a 	mov	r4,r23
1000ae1c:	da000215 	stw	r8,8(sp)
1000ae20:	db000115 	stw	r12,4(sp)
1000ae24:	0002b280 	call	10002b28 <strlen>
1000ae28:	102d883a 	mov	r22,r2
1000ae2c:	102b883a 	mov	r21,r2
1000ae30:	dd000315 	stw	r20,12(sp)
1000ae34:	db000117 	ldw	r12,4(sp)
1000ae38:	da000217 	ldw	r8,8(sp)
1000ae3c:	003dad06 	br	1000a4f4 <___vfiprintf_internal_r+0x7a4>
1000ae40:	d8c00847 	ldb	r3,33(sp)
1000ae44:	1800551e 	bne	r3,zero,1000af9c <___vfiprintf_internal_r+0x124c>
1000ae48:	683f581e 	bne	r13,zero,1000abac <___vfiprintf_internal_r+0xe5c>
1000ae4c:	0009883a 	mov	r4,zero
1000ae50:	d8c01804 	addi	r3,sp,96
1000ae54:	01400044 	movi	r5,1
1000ae58:	8811883a 	mov	r8,r17
1000ae5c:	003ddd06 	br	1000a5d4 <___vfiprintf_internal_r+0x884>
1000ae60:	d8800317 	ldw	r2,12(sp)
1000ae64:	10800017 	ldw	r2,0(r2)
1000ae68:	d8c00315 	stw	r3,12(sp)
1000ae6c:	d8c00017 	ldw	r3,0(sp)
1000ae70:	10c00015 	stw	r3,0(r2)
1000ae74:	003bdf06 	br	10009df4 <___vfiprintf_internal_r+0xa4>
1000ae78:	882f883a 	mov	r23,r17
1000ae7c:	00000206 	br	1000ae88 <___vfiprintf_internal_r+0x1138>
1000ae80:	102b883a 	mov	r21,r2
1000ae84:	182d883a 	mov	r22,r3
1000ae88:	a809883a 	mov	r4,r21
1000ae8c:	b00b883a 	mov	r5,r22
1000ae90:	01800284 	movi	r6,10
1000ae94:	000f883a 	mov	r7,zero
1000ae98:	db400615 	stw	r13,24(sp)
1000ae9c:	da000515 	stw	r8,20(sp)
1000aea0:	da400215 	stw	r9,8(sp)
1000aea4:	db000115 	stw	r12,4(sp)
1000aea8:	000c1180 	call	1000c118 <__umoddi3>
1000aeac:	10800c04 	addi	r2,r2,48
1000aeb0:	bdffffc4 	addi	r23,r23,-1
1000aeb4:	a809883a 	mov	r4,r21
1000aeb8:	b00b883a 	mov	r5,r22
1000aebc:	b8800005 	stb	r2,0(r23)
1000aec0:	01800284 	movi	r6,10
1000aec4:	000f883a 	mov	r7,zero
1000aec8:	000bb800 	call	1000bb80 <__udivdi3>
1000aecc:	db000117 	ldw	r12,4(sp)
1000aed0:	da400217 	ldw	r9,8(sp)
1000aed4:	da000517 	ldw	r8,20(sp)
1000aed8:	db400617 	ldw	r13,24(sp)
1000aedc:	b03fe81e 	bne	r22,zero,1000ae80 <___vfiprintf_internal_r+0x1130>
1000aee0:	ad4002a8 	cmpgeui	r21,r21,10
1000aee4:	a83fe61e 	bne	r21,zero,1000ae80 <___vfiprintf_internal_r+0x1130>
1000aee8:	003e9606 	br	1000a944 <___vfiprintf_internal_r+0xbf4>
1000aeec:	00c00044 	movi	r3,1
1000aef0:	d8c00a15 	stw	r3,40(sp)
1000aef4:	b005883a 	mov	r2,r22
1000aef8:	ddc01615 	stw	r23,88(sp)
1000aefc:	dd801715 	stw	r22,92(sp)
1000af00:	dd800b15 	stw	r22,44(sp)
1000af04:	d8c01804 	addi	r3,sp,96
1000af08:	003dc306 	br	1000a618 <___vfiprintf_internal_r+0x8c8>
1000af0c:	10c00060 	cmpeqi	r3,r2,1
1000af10:	a019883a 	mov	r12,r20
1000af14:	183e3926 	beq	r3,zero,1000a7fc <___vfiprintf_internal_r+0xaac>
1000af18:	003e6f06 	br	1000a8d8 <___vfiprintf_internal_r+0xb88>
1000af1c:	e0800043 	ldbu	r2,1(fp)
1000af20:	63000814 	ori	r12,r12,32
1000af24:	e7000044 	addi	fp,fp,1
1000af28:	10803fcc 	andi	r2,r2,255
1000af2c:	1080201c 	xori	r2,r2,128
1000af30:	10bfe004 	addi	r2,r2,-128
1000af34:	003bd506 	br	10009e8c <___vfiprintf_internal_r+0x13c>
1000af38:	488001f0 	cmpltui	r2,r9,7
1000af3c:	482d883a 	mov	r22,r9
1000af40:	1000011e 	bne	r2,zero,1000af48 <___vfiprintf_internal_r+0x11f8>
1000af44:	05800184 	movi	r22,6
1000af48:	05c40074 	movhi	r23,4097
1000af4c:	b02b883a 	mov	r21,r22
1000af50:	dd000315 	stw	r20,12(sp)
1000af54:	bdc69904 	addi	r23,r23,6756
1000af58:	003d6606 	br	1000a4f4 <___vfiprintf_internal_r+0x7a4>
1000af5c:	d8800315 	stw	r2,12(sp)
1000af60:	002d883a 	mov	r22,zero
1000af64:	00800044 	movi	r2,1
1000af68:	003cd206 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000af6c:	d8800315 	stw	r2,12(sp)
1000af70:	002d883a 	mov	r22,zero
1000af74:	0005883a 	mov	r2,zero
1000af78:	003cce06 	br	1000a2b4 <___vfiprintf_internal_r+0x564>
1000af7c:	1809883a 	mov	r4,r3
1000af80:	39c6f104 	addi	r7,r7,7108
1000af84:	003ede06 	br	1000ab00 <___vfiprintf_internal_r+0xdb0>
1000af88:	d8c01804 	addi	r3,sp,96
1000af8c:	01400044 	movi	r5,1
1000af90:	0009883a 	mov	r4,zero
1000af94:	8811883a 	mov	r8,r17
1000af98:	003d8e06 	br	1000a5d4 <___vfiprintf_internal_r+0x884>
1000af9c:	d8800844 	addi	r2,sp,33
1000afa0:	d8801615 	stw	r2,88(sp)
1000afa4:	00800044 	movi	r2,1
1000afa8:	d8801715 	stw	r2,92(sp)
1000afac:	d8c01804 	addi	r3,sp,96
1000afb0:	01400044 	movi	r5,1
1000afb4:	003d6806 	br	1000a558 <___vfiprintf_internal_r+0x808>
1000afb8:	d9800845 	stb	r6,33(sp)
1000afbc:	003c5506 	br	1000a114 <___vfiprintf_internal_r+0x3c4>
1000afc0:	482b883a 	mov	r21,r9
1000afc4:	dd000315 	stw	r20,12(sp)
1000afc8:	482d883a 	mov	r22,r9
1000afcc:	003d4906 	br	1000a4f4 <___vfiprintf_internal_r+0x7a4>
1000afd0:	d9800845 	stb	r6,33(sp)
1000afd4:	003cd906 	br	1000a33c <___vfiprintf_internal_r+0x5ec>
1000afd8:	d9800845 	stb	r6,33(sp)
1000afdc:	003ce906 	br	1000a384 <___vfiprintf_internal_r+0x634>
1000afe0:	d9800845 	stb	r6,33(sp)
1000afe4:	003c8a06 	br	1000a210 <___vfiprintf_internal_r+0x4c0>
1000afe8:	d9800845 	stb	r6,33(sp)
1000afec:	003dd206 	br	1000a738 <___vfiprintf_internal_r+0x9e8>
1000aff0:	d9800845 	stb	r6,33(sp)
1000aff4:	003ddd06 	br	1000a76c <___vfiprintf_internal_r+0xa1c>
1000aff8:	301f883a 	mov	r15,r6
1000affc:	39c6f504 	addi	r7,r7,7124
1000b000:	003f2306 	br	1000ac90 <___vfiprintf_internal_r+0xf40>
1000b004:	d9800845 	stb	r6,33(sp)
1000b008:	003d1606 	br	1000a464 <___vfiprintf_internal_r+0x714>
1000b00c:	d9800845 	stb	r6,33(sp)
1000b010:	003d0406 	br	1000a424 <___vfiprintf_internal_r+0x6d4>
1000b014:	d9800845 	stb	r6,33(sp)
1000b018:	003cb806 	br	1000a2fc <___vfiprintf_internal_r+0x5ac>
1000b01c:	d9800845 	stb	r6,33(sp)
1000b020:	003ddf06 	br	1000a7a0 <___vfiprintf_internal_r+0xa50>
1000b024:	29800044 	addi	r6,r5,1
1000b028:	39c6f504 	addi	r7,r7,7124
1000b02c:	003db106 	br	1000a6f4 <___vfiprintf_internal_r+0x9a4>
1000b030:	181b883a 	mov	r13,r3
1000b034:	280d883a 	mov	r6,r5
1000b038:	39c6f104 	addi	r7,r7,7108
1000b03c:	003e7306 	br	1000aa0c <___vfiprintf_internal_r+0xcbc>
1000b040:	00bfffc4 	movi	r2,-1
1000b044:	d8800015 	stw	r2,0(sp)
1000b048:	003c1706 	br	1000a0a8 <___vfiprintf_internal_r+0x358>
1000b04c:	d8800317 	ldw	r2,12(sp)
1000b050:	12400017 	ldw	r9,0(r2)
1000b054:	15c00104 	addi	r23,r2,4
1000b058:	4800010e 	bge	r9,zero,1000b060 <___vfiprintf_internal_r+0x1310>
1000b05c:	027fffc4 	movi	r9,-1
1000b060:	e0800043 	ldbu	r2,1(fp)
1000b064:	ddc00315 	stw	r23,12(sp)
1000b068:	2039883a 	mov	fp,r4
1000b06c:	10803fcc 	andi	r2,r2,255
1000b070:	1080201c 	xori	r2,r2,128
1000b074:	10bfe004 	addi	r2,r2,-128
1000b078:	003b8406 	br	10009e8c <___vfiprintf_internal_r+0x13c>

1000b07c <__vfiprintf_internal>:
1000b07c:	00840074 	movhi	r2,4097
1000b080:	300f883a 	mov	r7,r6
1000b084:	280d883a 	mov	r6,r5
1000b088:	200b883a 	mov	r5,r4
1000b08c:	11106517 	ldw	r4,16788(r2)
1000b090:	0009d501 	jmpi	10009d50 <___vfiprintf_internal_r>

1000b094 <__sbprintf>:
1000b094:	2880030b 	ldhu	r2,12(r5)
1000b098:	2b001917 	ldw	r12,100(r5)
1000b09c:	2ac0038b 	ldhu	r11,14(r5)
1000b0a0:	2a800717 	ldw	r10,28(r5)
1000b0a4:	2a400917 	ldw	r9,36(r5)
1000b0a8:	defee204 	addi	sp,sp,-1144
1000b0ac:	da001a04 	addi	r8,sp,104
1000b0b0:	00c10004 	movi	r3,1024
1000b0b4:	dc011a15 	stw	r16,1128(sp)
1000b0b8:	10bfff4c 	andi	r2,r2,65533
1000b0bc:	2821883a 	mov	r16,r5
1000b0c0:	d80b883a 	mov	r5,sp
1000b0c4:	dc811c15 	stw	r18,1136(sp)
1000b0c8:	dc411b15 	stw	r17,1132(sp)
1000b0cc:	dfc11d15 	stw	ra,1140(sp)
1000b0d0:	2025883a 	mov	r18,r4
1000b0d4:	d880030d 	sth	r2,12(sp)
1000b0d8:	db001915 	stw	r12,100(sp)
1000b0dc:	dac0038d 	sth	r11,14(sp)
1000b0e0:	da800715 	stw	r10,28(sp)
1000b0e4:	da400915 	stw	r9,36(sp)
1000b0e8:	da000015 	stw	r8,0(sp)
1000b0ec:	da000415 	stw	r8,16(sp)
1000b0f0:	d8c00215 	stw	r3,8(sp)
1000b0f4:	d8c00515 	stw	r3,20(sp)
1000b0f8:	d8000615 	stw	zero,24(sp)
1000b0fc:	0009d500 	call	10009d50 <___vfiprintf_internal_r>
1000b100:	1023883a 	mov	r17,r2
1000b104:	10000d0e 	bge	r2,zero,1000b13c <__sbprintf+0xa8>
1000b108:	d880030b 	ldhu	r2,12(sp)
1000b10c:	1080100c 	andi	r2,r2,64
1000b110:	10000326 	beq	r2,zero,1000b120 <__sbprintf+0x8c>
1000b114:	8080030b 	ldhu	r2,12(r16)
1000b118:	10801014 	ori	r2,r2,64
1000b11c:	8080030d 	sth	r2,12(r16)
1000b120:	8805883a 	mov	r2,r17
1000b124:	dfc11d17 	ldw	ra,1140(sp)
1000b128:	dc811c17 	ldw	r18,1136(sp)
1000b12c:	dc411b17 	ldw	r17,1132(sp)
1000b130:	dc011a17 	ldw	r16,1128(sp)
1000b134:	dec11e04 	addi	sp,sp,1144
1000b138:	f800283a 	ret
1000b13c:	d80b883a 	mov	r5,sp
1000b140:	9009883a 	mov	r4,r18
1000b144:	0006a580 	call	10006a58 <_fflush_r>
1000b148:	103fef26 	beq	r2,zero,1000b108 <__sbprintf+0x74>
1000b14c:	047fffc4 	movi	r17,-1
1000b150:	003fed06 	br	1000b108 <__sbprintf+0x74>

1000b154 <_write_r>:
1000b154:	defffe04 	addi	sp,sp,-8
1000b158:	2805883a 	mov	r2,r5
1000b15c:	dc000015 	stw	r16,0(sp)
1000b160:	300b883a 	mov	r5,r6
1000b164:	2021883a 	mov	r16,r4
1000b168:	380d883a 	mov	r6,r7
1000b16c:	1009883a 	mov	r4,r2
1000b170:	00840074 	movhi	r2,4097
1000b174:	dfc00115 	stw	ra,4(sp)
1000b178:	1018fd15 	stw	zero,25588(r2)
1000b17c:	000f7ac0 	call	1000f7ac <write>
1000b180:	10ffffd8 	cmpnei	r3,r2,-1
1000b184:	18000426 	beq	r3,zero,1000b198 <_write_r+0x44>
1000b188:	dfc00117 	ldw	ra,4(sp)
1000b18c:	dc000017 	ldw	r16,0(sp)
1000b190:	dec00204 	addi	sp,sp,8
1000b194:	f800283a 	ret
1000b198:	00c40074 	movhi	r3,4097
1000b19c:	18d8fd17 	ldw	r3,25588(r3)
1000b1a0:	183ff926 	beq	r3,zero,1000b188 <_write_r+0x34>
1000b1a4:	80c00015 	stw	r3,0(r16)
1000b1a8:	dfc00117 	ldw	ra,4(sp)
1000b1ac:	dc000017 	ldw	r16,0(sp)
1000b1b0:	dec00204 	addi	sp,sp,8
1000b1b4:	f800283a 	ret

1000b1b8 <_close_r>:
1000b1b8:	defffe04 	addi	sp,sp,-8
1000b1bc:	dc000015 	stw	r16,0(sp)
1000b1c0:	00840074 	movhi	r2,4097
1000b1c4:	2021883a 	mov	r16,r4
1000b1c8:	2809883a 	mov	r4,r5
1000b1cc:	dfc00115 	stw	ra,4(sp)
1000b1d0:	1018fd15 	stw	zero,25588(r2)
1000b1d4:	000ef780 	call	1000ef78 <close>
1000b1d8:	10ffffd8 	cmpnei	r3,r2,-1
1000b1dc:	18000426 	beq	r3,zero,1000b1f0 <_close_r+0x38>
1000b1e0:	dfc00117 	ldw	ra,4(sp)
1000b1e4:	dc000017 	ldw	r16,0(sp)
1000b1e8:	dec00204 	addi	sp,sp,8
1000b1ec:	f800283a 	ret
1000b1f0:	00c40074 	movhi	r3,4097
1000b1f4:	18d8fd17 	ldw	r3,25588(r3)
1000b1f8:	183ff926 	beq	r3,zero,1000b1e0 <_close_r+0x28>
1000b1fc:	80c00015 	stw	r3,0(r16)
1000b200:	dfc00117 	ldw	ra,4(sp)
1000b204:	dc000017 	ldw	r16,0(sp)
1000b208:	dec00204 	addi	sp,sp,8
1000b20c:	f800283a 	ret

1000b210 <_calloc_r>:
1000b210:	298b383a 	mul	r5,r5,r6
1000b214:	deffff04 	addi	sp,sp,-4
1000b218:	dfc00015 	stw	ra,0(sp)
1000b21c:	0007a4c0 	call	10007a4c <_malloc_r>
1000b220:	1007883a 	mov	r3,r2
1000b224:	10000c26 	beq	r2,zero,1000b258 <_calloc_r+0x48>
1000b228:	11bfff17 	ldw	r6,-4(r2)
1000b22c:	00bfff04 	movi	r2,-4
1000b230:	308c703a 	and	r6,r6,r2
1000b234:	31bfff04 	addi	r6,r6,-4
1000b238:	30800968 	cmpgeui	r2,r6,37
1000b23c:	1000141e 	bne	r2,zero,1000b290 <_calloc_r+0x80>
1000b240:	30800530 	cmpltui	r2,r6,20
1000b244:	10000826 	beq	r2,zero,1000b268 <_calloc_r+0x58>
1000b248:	1805883a 	mov	r2,r3
1000b24c:	10000015 	stw	zero,0(r2)
1000b250:	10000115 	stw	zero,4(r2)
1000b254:	10000215 	stw	zero,8(r2)
1000b258:	1805883a 	mov	r2,r3
1000b25c:	dfc00017 	ldw	ra,0(sp)
1000b260:	dec00104 	addi	sp,sp,4
1000b264:	f800283a 	ret
1000b268:	18000015 	stw	zero,0(r3)
1000b26c:	18000115 	stw	zero,4(r3)
1000b270:	30800728 	cmpgeui	r2,r6,28
1000b274:	10000e26 	beq	r2,zero,1000b2b0 <_calloc_r+0xa0>
1000b278:	18000215 	stw	zero,8(r3)
1000b27c:	18000315 	stw	zero,12(r3)
1000b280:	31800920 	cmpeqi	r6,r6,36
1000b284:	30000c1e 	bne	r6,zero,1000b2b8 <_calloc_r+0xa8>
1000b288:	18800404 	addi	r2,r3,16
1000b28c:	003fef06 	br	1000b24c <_calloc_r+0x3c>
1000b290:	1809883a 	mov	r4,r3
1000b294:	000b883a 	mov	r5,zero
1000b298:	00084540 	call	10008454 <memset>
1000b29c:	1007883a 	mov	r3,r2
1000b2a0:	1805883a 	mov	r2,r3
1000b2a4:	dfc00017 	ldw	ra,0(sp)
1000b2a8:	dec00104 	addi	sp,sp,4
1000b2ac:	f800283a 	ret
1000b2b0:	18800204 	addi	r2,r3,8
1000b2b4:	003fe506 	br	1000b24c <_calloc_r+0x3c>
1000b2b8:	18000415 	stw	zero,16(r3)
1000b2bc:	18800604 	addi	r2,r3,24
1000b2c0:	18000515 	stw	zero,20(r3)
1000b2c4:	003fe106 	br	1000b24c <_calloc_r+0x3c>

1000b2c8 <_fclose_r>:
1000b2c8:	defffc04 	addi	sp,sp,-16
1000b2cc:	dfc00315 	stw	ra,12(sp)
1000b2d0:	dc800215 	stw	r18,8(sp)
1000b2d4:	dc400115 	stw	r17,4(sp)
1000b2d8:	dc000015 	stw	r16,0(sp)
1000b2dc:	28000726 	beq	r5,zero,1000b2fc <_fclose_r+0x34>
1000b2e0:	2023883a 	mov	r17,r4
1000b2e4:	2821883a 	mov	r16,r5
1000b2e8:	20000226 	beq	r4,zero,1000b2f4 <_fclose_r+0x2c>
1000b2ec:	20800e17 	ldw	r2,56(r4)
1000b2f0:	10002726 	beq	r2,zero,1000b390 <_fclose_r+0xc8>
1000b2f4:	8080030f 	ldh	r2,12(r16)
1000b2f8:	1000081e 	bne	r2,zero,1000b31c <_fclose_r+0x54>
1000b2fc:	0025883a 	mov	r18,zero
1000b300:	9005883a 	mov	r2,r18
1000b304:	dfc00317 	ldw	ra,12(sp)
1000b308:	dc800217 	ldw	r18,8(sp)
1000b30c:	dc400117 	ldw	r17,4(sp)
1000b310:	dc000017 	ldw	r16,0(sp)
1000b314:	dec00404 	addi	sp,sp,16
1000b318:	f800283a 	ret
1000b31c:	800b883a 	mov	r5,r16
1000b320:	8809883a 	mov	r4,r17
1000b324:	00068300 	call	10006830 <__sflush_r>
1000b328:	1025883a 	mov	r18,r2
1000b32c:	80800b17 	ldw	r2,44(r16)
1000b330:	10000426 	beq	r2,zero,1000b344 <_fclose_r+0x7c>
1000b334:	81400717 	ldw	r5,28(r16)
1000b338:	8809883a 	mov	r4,r17
1000b33c:	103ee83a 	callr	r2
1000b340:	10001716 	blt	r2,zero,1000b3a0 <_fclose_r+0xd8>
1000b344:	8080030b 	ldhu	r2,12(r16)
1000b348:	1080200c 	andi	r2,r2,128
1000b34c:	1000181e 	bne	r2,zero,1000b3b0 <_fclose_r+0xe8>
1000b350:	81400c17 	ldw	r5,48(r16)
1000b354:	28000526 	beq	r5,zero,1000b36c <_fclose_r+0xa4>
1000b358:	80801004 	addi	r2,r16,64
1000b35c:	28800226 	beq	r5,r2,1000b368 <_fclose_r+0xa0>
1000b360:	8809883a 	mov	r4,r17
1000b364:	0006f400 	call	10006f40 <_free_r>
1000b368:	80000c15 	stw	zero,48(r16)
1000b36c:	81401117 	ldw	r5,68(r16)
1000b370:	28000326 	beq	r5,zero,1000b380 <_fclose_r+0xb8>
1000b374:	8809883a 	mov	r4,r17
1000b378:	0006f400 	call	10006f40 <_free_r>
1000b37c:	80001115 	stw	zero,68(r16)
1000b380:	0006dec0 	call	10006dec <__sfp_lock_acquire>
1000b384:	8000030d 	sth	zero,12(r16)
1000b388:	0006df00 	call	10006df0 <__sfp_lock_release>
1000b38c:	003fdc06 	br	1000b300 <_fclose_r+0x38>
1000b390:	0006ddc0 	call	10006ddc <__sinit>
1000b394:	8080030f 	ldh	r2,12(r16)
1000b398:	103fd826 	beq	r2,zero,1000b2fc <_fclose_r+0x34>
1000b39c:	003fdf06 	br	1000b31c <_fclose_r+0x54>
1000b3a0:	8080030b 	ldhu	r2,12(r16)
1000b3a4:	04bfffc4 	movi	r18,-1
1000b3a8:	1080200c 	andi	r2,r2,128
1000b3ac:	103fe826 	beq	r2,zero,1000b350 <_fclose_r+0x88>
1000b3b0:	81400417 	ldw	r5,16(r16)
1000b3b4:	8809883a 	mov	r4,r17
1000b3b8:	0006f400 	call	10006f40 <_free_r>
1000b3bc:	003fe406 	br	1000b350 <_fclose_r+0x88>

1000b3c0 <fclose>:
1000b3c0:	00840074 	movhi	r2,4097
1000b3c4:	200b883a 	mov	r5,r4
1000b3c8:	11106517 	ldw	r4,16788(r2)
1000b3cc:	000b2c81 	jmpi	1000b2c8 <_fclose_r>

1000b3d0 <__fputwc>:
1000b3d0:	defff904 	addi	sp,sp,-28
1000b3d4:	dcc00415 	stw	r19,16(sp)
1000b3d8:	dc800315 	stw	r18,12(sp)
1000b3dc:	dc000115 	stw	r16,4(sp)
1000b3e0:	dfc00615 	stw	ra,24(sp)
1000b3e4:	dd000515 	stw	r20,20(sp)
1000b3e8:	dc400215 	stw	r17,8(sp)
1000b3ec:	2025883a 	mov	r18,r4
1000b3f0:	2827883a 	mov	r19,r5
1000b3f4:	3021883a 	mov	r16,r6
1000b3f8:	000b6e80 	call	1000b6e8 <__locale_mb_cur_max>
1000b3fc:	10800058 	cmpnei	r2,r2,1
1000b400:	1000071e 	bne	r2,zero,1000b420 <__fputwc+0x50>
1000b404:	98bfffc4 	addi	r2,r19,-1
1000b408:	10803fe8 	cmpgeui	r2,r2,255
1000b40c:	1000041e 	bne	r2,zero,1000b420 <__fputwc+0x50>
1000b410:	980b883a 	mov	r5,r19
1000b414:	dcc000c5 	stb	r19,3(sp)
1000b418:	05000044 	movi	r20,1
1000b41c:	00000a06 	br	1000b448 <__fputwc+0x78>
1000b420:	81c01704 	addi	r7,r16,92
1000b424:	980d883a 	mov	r6,r19
1000b428:	d94000c4 	addi	r5,sp,3
1000b42c:	9009883a 	mov	r4,r18
1000b430:	000ba540 	call	1000ba54 <_wcrtomb_r>
1000b434:	1029883a 	mov	r20,r2
1000b438:	10bfffd8 	cmpnei	r2,r2,-1
1000b43c:	10003426 	beq	r2,zero,1000b510 <__fputwc+0x140>
1000b440:	a0002926 	beq	r20,zero,1000b4e8 <__fputwc+0x118>
1000b444:	d94000c3 	ldbu	r5,3(sp)
1000b448:	0023883a 	mov	r17,zero
1000b44c:	00000a06 	br	1000b478 <__fputwc+0xa8>
1000b450:	80800017 	ldw	r2,0(r16)
1000b454:	11400005 	stb	r5,0(r2)
1000b458:	80800017 	ldw	r2,0(r16)
1000b45c:	10800044 	addi	r2,r2,1
1000b460:	80800015 	stw	r2,0(r16)
1000b464:	8c400044 	addi	r17,r17,1
1000b468:	d88000c4 	addi	r2,sp,3
1000b46c:	1445883a 	add	r2,r2,r17
1000b470:	8d001d2e 	bgeu	r17,r20,1000b4e8 <__fputwc+0x118>
1000b474:	11400003 	ldbu	r5,0(r2)
1000b478:	80800217 	ldw	r2,8(r16)
1000b47c:	10bfffc4 	addi	r2,r2,-1
1000b480:	80800215 	stw	r2,8(r16)
1000b484:	103ff20e 	bge	r2,zero,1000b450 <__fputwc+0x80>
1000b488:	80c00617 	ldw	r3,24(r16)
1000b48c:	10c01016 	blt	r2,r3,1000b4d0 <__fputwc+0x100>
1000b490:	80800017 	ldw	r2,0(r16)
1000b494:	11400005 	stb	r5,0(r2)
1000b498:	80800017 	ldw	r2,0(r16)
1000b49c:	10c00003 	ldbu	r3,0(r2)
1000b4a0:	10800044 	addi	r2,r2,1
1000b4a4:	18c002a0 	cmpeqi	r3,r3,10
1000b4a8:	183fed26 	beq	r3,zero,1000b460 <__fputwc+0x90>
1000b4ac:	800d883a 	mov	r6,r16
1000b4b0:	01400284 	movi	r5,10
1000b4b4:	9009883a 	mov	r4,r18
1000b4b8:	000b8f80 	call	1000b8f8 <__swbuf_r>
1000b4bc:	10bfffe0 	cmpeqi	r2,r2,-1
1000b4c0:	10803fcc 	andi	r2,r2,255
1000b4c4:	103fe726 	beq	r2,zero,1000b464 <__fputwc+0x94>
1000b4c8:	053fffc4 	movi	r20,-1
1000b4cc:	00000706 	br	1000b4ec <__fputwc+0x11c>
1000b4d0:	29403fcc 	andi	r5,r5,255
1000b4d4:	800d883a 	mov	r6,r16
1000b4d8:	9009883a 	mov	r4,r18
1000b4dc:	000b8f80 	call	1000b8f8 <__swbuf_r>
1000b4e0:	10bfffe0 	cmpeqi	r2,r2,-1
1000b4e4:	003ff606 	br	1000b4c0 <__fputwc+0xf0>
1000b4e8:	9829883a 	mov	r20,r19
1000b4ec:	a005883a 	mov	r2,r20
1000b4f0:	dfc00617 	ldw	ra,24(sp)
1000b4f4:	dd000517 	ldw	r20,20(sp)
1000b4f8:	dcc00417 	ldw	r19,16(sp)
1000b4fc:	dc800317 	ldw	r18,12(sp)
1000b500:	dc400217 	ldw	r17,8(sp)
1000b504:	dc000117 	ldw	r16,4(sp)
1000b508:	dec00704 	addi	sp,sp,28
1000b50c:	f800283a 	ret
1000b510:	8080030b 	ldhu	r2,12(r16)
1000b514:	10801014 	ori	r2,r2,64
1000b518:	8080030d 	sth	r2,12(r16)
1000b51c:	003ff306 	br	1000b4ec <__fputwc+0x11c>

1000b520 <_fputwc_r>:
1000b520:	3080030b 	ldhu	r2,12(r6)
1000b524:	10c8000c 	andi	r3,r2,8192
1000b528:	1800051e 	bne	r3,zero,1000b540 <_fputwc_r+0x20>
1000b52c:	30c01917 	ldw	r3,100(r6)
1000b530:	10880014 	ori	r2,r2,8192
1000b534:	3080030d 	sth	r2,12(r6)
1000b538:	18880014 	ori	r2,r3,8192
1000b53c:	30801915 	stw	r2,100(r6)
1000b540:	000b3d01 	jmpi	1000b3d0 <__fputwc>

1000b544 <fputwc>:
1000b544:	defffc04 	addi	sp,sp,-16
1000b548:	00840074 	movhi	r2,4097
1000b54c:	dc000115 	stw	r16,4(sp)
1000b550:	14106517 	ldw	r16,16788(r2)
1000b554:	dc400215 	stw	r17,8(sp)
1000b558:	dfc00315 	stw	ra,12(sp)
1000b55c:	2023883a 	mov	r17,r4
1000b560:	80000226 	beq	r16,zero,1000b56c <fputwc+0x28>
1000b564:	80800e17 	ldw	r2,56(r16)
1000b568:	10001026 	beq	r2,zero,1000b5ac <fputwc+0x68>
1000b56c:	2880030b 	ldhu	r2,12(r5)
1000b570:	10c8000c 	andi	r3,r2,8192
1000b574:	1800051e 	bne	r3,zero,1000b58c <fputwc+0x48>
1000b578:	28c01917 	ldw	r3,100(r5)
1000b57c:	10880014 	ori	r2,r2,8192
1000b580:	2880030d 	sth	r2,12(r5)
1000b584:	18880014 	ori	r2,r3,8192
1000b588:	28801915 	stw	r2,100(r5)
1000b58c:	280d883a 	mov	r6,r5
1000b590:	8009883a 	mov	r4,r16
1000b594:	880b883a 	mov	r5,r17
1000b598:	dfc00317 	ldw	ra,12(sp)
1000b59c:	dc400217 	ldw	r17,8(sp)
1000b5a0:	dc000117 	ldw	r16,4(sp)
1000b5a4:	dec00404 	addi	sp,sp,16
1000b5a8:	000b3d01 	jmpi	1000b3d0 <__fputwc>
1000b5ac:	8009883a 	mov	r4,r16
1000b5b0:	d9400015 	stw	r5,0(sp)
1000b5b4:	0006ddc0 	call	10006ddc <__sinit>
1000b5b8:	d9400017 	ldw	r5,0(sp)
1000b5bc:	003feb06 	br	1000b56c <fputwc+0x28>

1000b5c0 <_fstat_r>:
1000b5c0:	defffe04 	addi	sp,sp,-8
1000b5c4:	2805883a 	mov	r2,r5
1000b5c8:	dc000015 	stw	r16,0(sp)
1000b5cc:	300b883a 	mov	r5,r6
1000b5d0:	2021883a 	mov	r16,r4
1000b5d4:	1009883a 	mov	r4,r2
1000b5d8:	00840074 	movhi	r2,4097
1000b5dc:	dfc00115 	stw	ra,4(sp)
1000b5e0:	1018fd15 	stw	zero,25588(r2)
1000b5e4:	000f0b00 	call	1000f0b0 <fstat>
1000b5e8:	10ffffd8 	cmpnei	r3,r2,-1
1000b5ec:	18000426 	beq	r3,zero,1000b600 <_fstat_r+0x40>
1000b5f0:	dfc00117 	ldw	ra,4(sp)
1000b5f4:	dc000017 	ldw	r16,0(sp)
1000b5f8:	dec00204 	addi	sp,sp,8
1000b5fc:	f800283a 	ret
1000b600:	00c40074 	movhi	r3,4097
1000b604:	18d8fd17 	ldw	r3,25588(r3)
1000b608:	183ff926 	beq	r3,zero,1000b5f0 <_fstat_r+0x30>
1000b60c:	80c00015 	stw	r3,0(r16)
1000b610:	dfc00117 	ldw	ra,4(sp)
1000b614:	dc000017 	ldw	r16,0(sp)
1000b618:	dec00204 	addi	sp,sp,8
1000b61c:	f800283a 	ret

1000b620 <_isatty_r>:
1000b620:	defffe04 	addi	sp,sp,-8
1000b624:	dc000015 	stw	r16,0(sp)
1000b628:	00840074 	movhi	r2,4097
1000b62c:	2021883a 	mov	r16,r4
1000b630:	2809883a 	mov	r4,r5
1000b634:	dfc00115 	stw	ra,4(sp)
1000b638:	1018fd15 	stw	zero,25588(r2)
1000b63c:	000f19c0 	call	1000f19c <isatty>
1000b640:	10ffffd8 	cmpnei	r3,r2,-1
1000b644:	18000426 	beq	r3,zero,1000b658 <_isatty_r+0x38>
1000b648:	dfc00117 	ldw	ra,4(sp)
1000b64c:	dc000017 	ldw	r16,0(sp)
1000b650:	dec00204 	addi	sp,sp,8
1000b654:	f800283a 	ret
1000b658:	00c40074 	movhi	r3,4097
1000b65c:	18d8fd17 	ldw	r3,25588(r3)
1000b660:	183ff926 	beq	r3,zero,1000b648 <_isatty_r+0x28>
1000b664:	80c00015 	stw	r3,0(r16)
1000b668:	dfc00117 	ldw	ra,4(sp)
1000b66c:	dc000017 	ldw	r16,0(sp)
1000b670:	dec00204 	addi	sp,sp,8
1000b674:	f800283a 	ret

1000b678 <_setlocale_r>:
1000b678:	30001826 	beq	r6,zero,1000b6dc <_setlocale_r+0x64>
1000b67c:	01440074 	movhi	r5,4097
1000b680:	defffe04 	addi	sp,sp,-8
1000b684:	2946fa04 	addi	r5,r5,7144
1000b688:	3009883a 	mov	r4,r6
1000b68c:	dc000015 	stw	r16,0(sp)
1000b690:	dfc00115 	stw	ra,4(sp)
1000b694:	3021883a 	mov	r16,r6
1000b698:	000b8200 	call	1000b820 <strcmp>
1000b69c:	1000061e 	bne	r2,zero,1000b6b8 <_setlocale_r+0x40>
1000b6a0:	00840074 	movhi	r2,4097
1000b6a4:	1086f904 	addi	r2,r2,7140
1000b6a8:	dfc00117 	ldw	ra,4(sp)
1000b6ac:	dc000017 	ldw	r16,0(sp)
1000b6b0:	dec00204 	addi	sp,sp,8
1000b6b4:	f800283a 	ret
1000b6b8:	01440074 	movhi	r5,4097
1000b6bc:	2946f904 	addi	r5,r5,7140
1000b6c0:	8009883a 	mov	r4,r16
1000b6c4:	000b8200 	call	1000b820 <strcmp>
1000b6c8:	103ff526 	beq	r2,zero,1000b6a0 <_setlocale_r+0x28>
1000b6cc:	80800003 	ldbu	r2,0(r16)
1000b6d0:	103ff326 	beq	r2,zero,1000b6a0 <_setlocale_r+0x28>
1000b6d4:	0005883a 	mov	r2,zero
1000b6d8:	003ff306 	br	1000b6a8 <_setlocale_r+0x30>
1000b6dc:	00840074 	movhi	r2,4097
1000b6e0:	1086f904 	addi	r2,r2,7140
1000b6e4:	f800283a 	ret

1000b6e8 <__locale_mb_cur_max>:
1000b6e8:	00840074 	movhi	r2,4097
1000b6ec:	108bd007 	ldb	r2,12096(r2)
1000b6f0:	f800283a 	ret

1000b6f4 <setlocale>:
1000b6f4:	00840074 	movhi	r2,4097
1000b6f8:	280d883a 	mov	r6,r5
1000b6fc:	200b883a 	mov	r5,r4
1000b700:	11106517 	ldw	r4,16788(r2)
1000b704:	000b6781 	jmpi	1000b678 <_setlocale_r>

1000b708 <_lseek_r>:
1000b708:	defffe04 	addi	sp,sp,-8
1000b70c:	2805883a 	mov	r2,r5
1000b710:	dc000015 	stw	r16,0(sp)
1000b714:	300b883a 	mov	r5,r6
1000b718:	2021883a 	mov	r16,r4
1000b71c:	380d883a 	mov	r6,r7
1000b720:	1009883a 	mov	r4,r2
1000b724:	00840074 	movhi	r2,4097
1000b728:	dfc00115 	stw	ra,4(sp)
1000b72c:	1018fd15 	stw	zero,25588(r2)
1000b730:	000f3680 	call	1000f368 <lseek>
1000b734:	10ffffd8 	cmpnei	r3,r2,-1
1000b738:	18000426 	beq	r3,zero,1000b74c <_lseek_r+0x44>
1000b73c:	dfc00117 	ldw	ra,4(sp)
1000b740:	dc000017 	ldw	r16,0(sp)
1000b744:	dec00204 	addi	sp,sp,8
1000b748:	f800283a 	ret
1000b74c:	00c40074 	movhi	r3,4097
1000b750:	18d8fd17 	ldw	r3,25588(r3)
1000b754:	183ff926 	beq	r3,zero,1000b73c <_lseek_r+0x34>
1000b758:	80c00015 	stw	r3,0(r16)
1000b75c:	dfc00117 	ldw	ra,4(sp)
1000b760:	dc000017 	ldw	r16,0(sp)
1000b764:	dec00204 	addi	sp,sp,8
1000b768:	f800283a 	ret

1000b76c <_mbtowc_r>:
1000b76c:	00840074 	movhi	r2,4097
1000b770:	108bbf17 	ldw	r2,12028(r2)
1000b774:	1000683a 	jmp	r2

1000b778 <__ascii_mbtowc>:
1000b778:	deffff04 	addi	sp,sp,-4
1000b77c:	28000826 	beq	r5,zero,1000b7a0 <__ascii_mbtowc+0x28>
1000b780:	30000926 	beq	r6,zero,1000b7a8 <__ascii_mbtowc+0x30>
1000b784:	38000b26 	beq	r7,zero,1000b7b4 <__ascii_mbtowc+0x3c>
1000b788:	30800003 	ldbu	r2,0(r6)
1000b78c:	28800015 	stw	r2,0(r5)
1000b790:	30800003 	ldbu	r2,0(r6)
1000b794:	1004c03a 	cmpne	r2,r2,zero
1000b798:	dec00104 	addi	sp,sp,4
1000b79c:	f800283a 	ret
1000b7a0:	d80b883a 	mov	r5,sp
1000b7a4:	303ff71e 	bne	r6,zero,1000b784 <__ascii_mbtowc+0xc>
1000b7a8:	0005883a 	mov	r2,zero
1000b7ac:	dec00104 	addi	sp,sp,4
1000b7b0:	f800283a 	ret
1000b7b4:	00bfff84 	movi	r2,-2
1000b7b8:	003ff706 	br	1000b798 <__ascii_mbtowc+0x20>

1000b7bc <_read_r>:
1000b7bc:	defffe04 	addi	sp,sp,-8
1000b7c0:	2805883a 	mov	r2,r5
1000b7c4:	dc000015 	stw	r16,0(sp)
1000b7c8:	300b883a 	mov	r5,r6
1000b7cc:	2021883a 	mov	r16,r4
1000b7d0:	380d883a 	mov	r6,r7
1000b7d4:	1009883a 	mov	r4,r2
1000b7d8:	00840074 	movhi	r2,4097
1000b7dc:	dfc00115 	stw	ra,4(sp)
1000b7e0:	1018fd15 	stw	zero,25588(r2)
1000b7e4:	000f53c0 	call	1000f53c <read>
1000b7e8:	10ffffd8 	cmpnei	r3,r2,-1
1000b7ec:	18000426 	beq	r3,zero,1000b800 <_read_r+0x44>
1000b7f0:	dfc00117 	ldw	ra,4(sp)
1000b7f4:	dc000017 	ldw	r16,0(sp)
1000b7f8:	dec00204 	addi	sp,sp,8
1000b7fc:	f800283a 	ret
1000b800:	00c40074 	movhi	r3,4097
1000b804:	18d8fd17 	ldw	r3,25588(r3)
1000b808:	183ff926 	beq	r3,zero,1000b7f0 <_read_r+0x34>
1000b80c:	80c00015 	stw	r3,0(r16)
1000b810:	dfc00117 	ldw	ra,4(sp)
1000b814:	dc000017 	ldw	r16,0(sp)
1000b818:	dec00204 	addi	sp,sp,8
1000b81c:	f800283a 	ret

1000b820 <strcmp>:
1000b820:	2144b03a 	or	r2,r4,r5
1000b824:	108000cc 	andi	r2,r2,3
1000b828:	1000171e 	bne	r2,zero,1000b888 <strcmp+0x68>
1000b82c:	20800017 	ldw	r2,0(r4)
1000b830:	28c00017 	ldw	r3,0(r5)
1000b834:	10c0141e 	bne	r2,r3,1000b888 <strcmp+0x68>
1000b838:	027fbff4 	movhi	r9,65279
1000b83c:	4a7fbfc4 	addi	r9,r9,-257
1000b840:	1247883a 	add	r3,r2,r9
1000b844:	02202074 	movhi	r8,32897
1000b848:	0084303a 	nor	r2,zero,r2
1000b84c:	1884703a 	and	r2,r3,r2
1000b850:	42202004 	addi	r8,r8,-32640
1000b854:	1204703a 	and	r2,r2,r8
1000b858:	10000226 	beq	r2,zero,1000b864 <strcmp+0x44>
1000b85c:	00002406 	br	1000b8f0 <strcmp+0xd0>
1000b860:	1000231e 	bne	r2,zero,1000b8f0 <strcmp+0xd0>
1000b864:	21000104 	addi	r4,r4,4
1000b868:	20c00017 	ldw	r3,0(r4)
1000b86c:	29400104 	addi	r5,r5,4
1000b870:	29800017 	ldw	r6,0(r5)
1000b874:	1a45883a 	add	r2,r3,r9
1000b878:	00ce303a 	nor	r7,zero,r3
1000b87c:	11c4703a 	and	r2,r2,r7
1000b880:	1204703a 	and	r2,r2,r8
1000b884:	19bff626 	beq	r3,r6,1000b860 <strcmp+0x40>
1000b888:	20800003 	ldbu	r2,0(r4)
1000b88c:	10c03fcc 	andi	r3,r2,255
1000b890:	18c0201c 	xori	r3,r3,128
1000b894:	18ffe004 	addi	r3,r3,-128
1000b898:	18000d26 	beq	r3,zero,1000b8d0 <strcmp+0xb0>
1000b89c:	29800007 	ldb	r6,0(r5)
1000b8a0:	10803fcc 	andi	r2,r2,255
1000b8a4:	19800326 	beq	r3,r6,1000b8b4 <strcmp+0x94>
1000b8a8:	00000a06 	br	1000b8d4 <strcmp+0xb4>
1000b8ac:	29800007 	ldb	r6,0(r5)
1000b8b0:	11800b1e 	bne	r2,r6,1000b8e0 <strcmp+0xc0>
1000b8b4:	21000044 	addi	r4,r4,1
1000b8b8:	20c00003 	ldbu	r3,0(r4)
1000b8bc:	29400044 	addi	r5,r5,1
1000b8c0:	18803fcc 	andi	r2,r3,255
1000b8c4:	1080201c 	xori	r2,r2,128
1000b8c8:	10bfe004 	addi	r2,r2,-128
1000b8cc:	103ff71e 	bne	r2,zero,1000b8ac <strcmp+0x8c>
1000b8d0:	0005883a 	mov	r2,zero
1000b8d4:	28c00003 	ldbu	r3,0(r5)
1000b8d8:	10c5c83a 	sub	r2,r2,r3
1000b8dc:	f800283a 	ret
1000b8e0:	18803fcc 	andi	r2,r3,255
1000b8e4:	28c00003 	ldbu	r3,0(r5)
1000b8e8:	10c5c83a 	sub	r2,r2,r3
1000b8ec:	f800283a 	ret
1000b8f0:	0005883a 	mov	r2,zero
1000b8f4:	f800283a 	ret

1000b8f8 <__swbuf_r>:
1000b8f8:	defffb04 	addi	sp,sp,-20
1000b8fc:	dc800215 	stw	r18,8(sp)
1000b900:	dc400115 	stw	r17,4(sp)
1000b904:	dc000015 	stw	r16,0(sp)
1000b908:	dfc00415 	stw	ra,16(sp)
1000b90c:	dcc00315 	stw	r19,12(sp)
1000b910:	2023883a 	mov	r17,r4
1000b914:	2825883a 	mov	r18,r5
1000b918:	3021883a 	mov	r16,r6
1000b91c:	20000226 	beq	r4,zero,1000b928 <__swbuf_r+0x30>
1000b920:	20800e17 	ldw	r2,56(r4)
1000b924:	10003e26 	beq	r2,zero,1000ba20 <__swbuf_r+0x128>
1000b928:	80800617 	ldw	r2,24(r16)
1000b92c:	80c0030b 	ldhu	r3,12(r16)
1000b930:	80800215 	stw	r2,8(r16)
1000b934:	1880020c 	andi	r2,r3,8
1000b938:	10001f26 	beq	r2,zero,1000b9b8 <__swbuf_r+0xc0>
1000b93c:	80800417 	ldw	r2,16(r16)
1000b940:	10001d26 	beq	r2,zero,1000b9b8 <__swbuf_r+0xc0>
1000b944:	1908000c 	andi	r4,r3,8192
1000b948:	94c03fcc 	andi	r19,r18,255
1000b94c:	20002326 	beq	r4,zero,1000b9dc <__swbuf_r+0xe4>
1000b950:	80c00017 	ldw	r3,0(r16)
1000b954:	81000517 	ldw	r4,20(r16)
1000b958:	1885c83a 	sub	r2,r3,r2
1000b95c:	1100290e 	bge	r2,r4,1000ba04 <__swbuf_r+0x10c>
1000b960:	10800044 	addi	r2,r2,1
1000b964:	81000217 	ldw	r4,8(r16)
1000b968:	19400044 	addi	r5,r3,1
1000b96c:	81400015 	stw	r5,0(r16)
1000b970:	213fffc4 	addi	r4,r4,-1
1000b974:	81000215 	stw	r4,8(r16)
1000b978:	1c800005 	stb	r18,0(r3)
1000b97c:	80c00517 	ldw	r3,20(r16)
1000b980:	18802926 	beq	r3,r2,1000ba28 <__swbuf_r+0x130>
1000b984:	8080030b 	ldhu	r2,12(r16)
1000b988:	1080004c 	andi	r2,r2,1
1000b98c:	10000226 	beq	r2,zero,1000b998 <__swbuf_r+0xa0>
1000b990:	98800298 	cmpnei	r2,r19,10
1000b994:	10002426 	beq	r2,zero,1000ba28 <__swbuf_r+0x130>
1000b998:	9805883a 	mov	r2,r19
1000b99c:	dfc00417 	ldw	ra,16(sp)
1000b9a0:	dcc00317 	ldw	r19,12(sp)
1000b9a4:	dc800217 	ldw	r18,8(sp)
1000b9a8:	dc400117 	ldw	r17,4(sp)
1000b9ac:	dc000017 	ldw	r16,0(sp)
1000b9b0:	dec00504 	addi	sp,sp,20
1000b9b4:	f800283a 	ret
1000b9b8:	800b883a 	mov	r5,r16
1000b9bc:	8809883a 	mov	r4,r17
1000b9c0:	0004df80 	call	10004df8 <__swsetup_r>
1000b9c4:	10001c1e 	bne	r2,zero,1000ba38 <__swbuf_r+0x140>
1000b9c8:	80c0030b 	ldhu	r3,12(r16)
1000b9cc:	80800417 	ldw	r2,16(r16)
1000b9d0:	94c03fcc 	andi	r19,r18,255
1000b9d4:	1908000c 	andi	r4,r3,8192
1000b9d8:	203fdd1e 	bne	r4,zero,1000b950 <__swbuf_r+0x58>
1000b9dc:	81001917 	ldw	r4,100(r16)
1000b9e0:	18c80014 	ori	r3,r3,8192
1000b9e4:	0177ffc4 	movi	r5,-8193
1000b9e8:	2148703a 	and	r4,r4,r5
1000b9ec:	80c0030d 	sth	r3,12(r16)
1000b9f0:	80c00017 	ldw	r3,0(r16)
1000b9f4:	81001915 	stw	r4,100(r16)
1000b9f8:	81000517 	ldw	r4,20(r16)
1000b9fc:	1885c83a 	sub	r2,r3,r2
1000ba00:	113fd716 	blt	r2,r4,1000b960 <__swbuf_r+0x68>
1000ba04:	800b883a 	mov	r5,r16
1000ba08:	8809883a 	mov	r4,r17
1000ba0c:	0006a580 	call	10006a58 <_fflush_r>
1000ba10:	1000091e 	bne	r2,zero,1000ba38 <__swbuf_r+0x140>
1000ba14:	80c00017 	ldw	r3,0(r16)
1000ba18:	00800044 	movi	r2,1
1000ba1c:	003fd106 	br	1000b964 <__swbuf_r+0x6c>
1000ba20:	0006ddc0 	call	10006ddc <__sinit>
1000ba24:	003fc006 	br	1000b928 <__swbuf_r+0x30>
1000ba28:	800b883a 	mov	r5,r16
1000ba2c:	8809883a 	mov	r4,r17
1000ba30:	0006a580 	call	10006a58 <_fflush_r>
1000ba34:	103fd826 	beq	r2,zero,1000b998 <__swbuf_r+0xa0>
1000ba38:	04ffffc4 	movi	r19,-1
1000ba3c:	003fd606 	br	1000b998 <__swbuf_r+0xa0>

1000ba40 <__swbuf>:
1000ba40:	00840074 	movhi	r2,4097
1000ba44:	280d883a 	mov	r6,r5
1000ba48:	200b883a 	mov	r5,r4
1000ba4c:	11106517 	ldw	r4,16788(r2)
1000ba50:	000b8f81 	jmpi	1000b8f8 <__swbuf_r>

1000ba54 <_wcrtomb_r>:
1000ba54:	defffa04 	addi	sp,sp,-24
1000ba58:	dc400415 	stw	r17,16(sp)
1000ba5c:	dc000315 	stw	r16,12(sp)
1000ba60:	00840074 	movhi	r2,4097
1000ba64:	dfc00515 	stw	ra,20(sp)
1000ba68:	2021883a 	mov	r16,r4
1000ba6c:	3823883a 	mov	r17,r7
1000ba70:	108bbe17 	ldw	r2,12024(r2)
1000ba74:	28000826 	beq	r5,zero,1000ba98 <_wcrtomb_r+0x44>
1000ba78:	103ee83a 	callr	r2
1000ba7c:	10ffffd8 	cmpnei	r3,r2,-1
1000ba80:	18000a26 	beq	r3,zero,1000baac <_wcrtomb_r+0x58>
1000ba84:	dfc00517 	ldw	ra,20(sp)
1000ba88:	dc400417 	ldw	r17,16(sp)
1000ba8c:	dc000317 	ldw	r16,12(sp)
1000ba90:	dec00604 	addi	sp,sp,24
1000ba94:	f800283a 	ret
1000ba98:	000d883a 	mov	r6,zero
1000ba9c:	d9400084 	addi	r5,sp,2
1000baa0:	103ee83a 	callr	r2
1000baa4:	10ffffd8 	cmpnei	r3,r2,-1
1000baa8:	183ff61e 	bne	r3,zero,1000ba84 <_wcrtomb_r+0x30>
1000baac:	00802284 	movi	r2,138
1000bab0:	88000015 	stw	zero,0(r17)
1000bab4:	80800015 	stw	r2,0(r16)
1000bab8:	00bfffc4 	movi	r2,-1
1000babc:	003ff106 	br	1000ba84 <_wcrtomb_r+0x30>

1000bac0 <wcrtomb>:
1000bac0:	defffa04 	addi	sp,sp,-24
1000bac4:	00840074 	movhi	r2,4097
1000bac8:	dc400415 	stw	r17,16(sp)
1000bacc:	dc000315 	stw	r16,12(sp)
1000bad0:	dfc00515 	stw	ra,20(sp)
1000bad4:	14106517 	ldw	r16,16788(r2)
1000bad8:	00840074 	movhi	r2,4097
1000badc:	3023883a 	mov	r17,r6
1000bae0:	108bbe17 	ldw	r2,12024(r2)
1000bae4:	300f883a 	mov	r7,r6
1000bae8:	20000b26 	beq	r4,zero,1000bb18 <wcrtomb+0x58>
1000baec:	280d883a 	mov	r6,r5
1000baf0:	200b883a 	mov	r5,r4
1000baf4:	8009883a 	mov	r4,r16
1000baf8:	103ee83a 	callr	r2
1000bafc:	10ffffd8 	cmpnei	r3,r2,-1
1000bb00:	18000b26 	beq	r3,zero,1000bb30 <wcrtomb+0x70>
1000bb04:	dfc00517 	ldw	ra,20(sp)
1000bb08:	dc400417 	ldw	r17,16(sp)
1000bb0c:	dc000317 	ldw	r16,12(sp)
1000bb10:	dec00604 	addi	sp,sp,24
1000bb14:	f800283a 	ret
1000bb18:	000d883a 	mov	r6,zero
1000bb1c:	d9400084 	addi	r5,sp,2
1000bb20:	8009883a 	mov	r4,r16
1000bb24:	103ee83a 	callr	r2
1000bb28:	10ffffd8 	cmpnei	r3,r2,-1
1000bb2c:	183ff51e 	bne	r3,zero,1000bb04 <wcrtomb+0x44>
1000bb30:	00802284 	movi	r2,138
1000bb34:	88000015 	stw	zero,0(r17)
1000bb38:	80800015 	stw	r2,0(r16)
1000bb3c:	00bfffc4 	movi	r2,-1
1000bb40:	003ff006 	br	1000bb04 <wcrtomb+0x44>

1000bb44 <_wctomb_r>:
1000bb44:	00840074 	movhi	r2,4097
1000bb48:	108bbe17 	ldw	r2,12024(r2)
1000bb4c:	1000683a 	jmp	r2

1000bb50 <__ascii_wctomb>:
1000bb50:	28000926 	beq	r5,zero,1000bb78 <__ascii_wctomb+0x28>
1000bb54:	30804030 	cmpltui	r2,r6,256
1000bb58:	10000326 	beq	r2,zero,1000bb68 <__ascii_wctomb+0x18>
1000bb5c:	29800005 	stb	r6,0(r5)
1000bb60:	00800044 	movi	r2,1
1000bb64:	f800283a 	ret
1000bb68:	00802284 	movi	r2,138
1000bb6c:	20800015 	stw	r2,0(r4)
1000bb70:	00bfffc4 	movi	r2,-1
1000bb74:	f800283a 	ret
1000bb78:	0005883a 	mov	r2,zero
1000bb7c:	f800283a 	ret

1000bb80 <__udivdi3>:
1000bb80:	defff504 	addi	sp,sp,-44
1000bb84:	dd400615 	stw	r21,24(sp)
1000bb88:	dc000115 	stw	r16,4(sp)
1000bb8c:	dfc00a15 	stw	ra,40(sp)
1000bb90:	df000915 	stw	fp,36(sp)
1000bb94:	ddc00815 	stw	r23,32(sp)
1000bb98:	dd800715 	stw	r22,28(sp)
1000bb9c:	dd000515 	stw	r20,20(sp)
1000bba0:	dcc00415 	stw	r19,16(sp)
1000bba4:	dc800315 	stw	r18,12(sp)
1000bba8:	dc400215 	stw	r17,8(sp)
1000bbac:	202b883a 	mov	r21,r4
1000bbb0:	2821883a 	mov	r16,r5
1000bbb4:	3800821e 	bne	r7,zero,1000bdc0 <__udivdi3+0x240>
1000bbb8:	3827883a 	mov	r19,r7
1000bbbc:	3023883a 	mov	r17,r6
1000bbc0:	2025883a 	mov	r18,r4
1000bbc4:	29803d2e 	bgeu	r5,r6,1000bcbc <__udivdi3+0x13c>
1000bbc8:	00bfffd4 	movui	r2,65535
1000bbcc:	282d883a 	mov	r22,r5
1000bbd0:	1180a52e 	bgeu	r2,r6,1000be68 <__udivdi3+0x2e8>
1000bbd4:	00804034 	movhi	r2,256
1000bbd8:	30813836 	bltu	r6,r2,1000c0bc <__udivdi3+0x53c>
1000bbdc:	3006d63a 	srli	r3,r6,24
1000bbe0:	04c00604 	movi	r19,24
1000bbe4:	00840074 	movhi	r2,4097
1000bbe8:	1885883a 	add	r2,r3,r2
1000bbec:	10879d43 	ldbu	r2,7797(r2)
1000bbf0:	14e7883a 	add	r19,r2,r19
1000bbf4:	00800804 	movi	r2,32
1000bbf8:	14c5c83a 	sub	r2,r2,r19
1000bbfc:	10000526 	beq	r2,zero,1000bc14 <__udivdi3+0x94>
1000bc00:	80a0983a 	sll	r16,r16,r2
1000bc04:	ace6d83a 	srl	r19,r21,r19
1000bc08:	30a2983a 	sll	r17,r6,r2
1000bc0c:	a8a4983a 	sll	r18,r21,r2
1000bc10:	9c2cb03a 	or	r22,r19,r16
1000bc14:	882ad43a 	srli	r21,r17,16
1000bc18:	b009883a 	mov	r4,r22
1000bc1c:	8d3fffcc 	andi	r20,r17,65535
1000bc20:	a80b883a 	mov	r5,r21
1000bc24:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bc28:	a80b883a 	mov	r5,r21
1000bc2c:	b009883a 	mov	r4,r22
1000bc30:	1027883a 	mov	r19,r2
1000bc34:	000c7500 	call	1000c750 <__udivsi3>
1000bc38:	1021883a 	mov	r16,r2
1000bc3c:	9826943a 	slli	r19,r19,16
1000bc40:	9004d43a 	srli	r2,r18,16
1000bc44:	a407383a 	mul	r3,r20,r16
1000bc48:	9884b03a 	or	r2,r19,r2
1000bc4c:	10c0052e 	bgeu	r2,r3,1000bc64 <__udivdi3+0xe4>
1000bc50:	1445883a 	add	r2,r2,r17
1000bc54:	813fffc4 	addi	r4,r16,-1
1000bc58:	14400136 	bltu	r2,r17,1000bc60 <__udivdi3+0xe0>
1000bc5c:	10c12836 	bltu	r2,r3,1000c100 <__udivdi3+0x580>
1000bc60:	2021883a 	mov	r16,r4
1000bc64:	10e7c83a 	sub	r19,r2,r3
1000bc68:	a80b883a 	mov	r5,r21
1000bc6c:	9809883a 	mov	r4,r19
1000bc70:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bc74:	102d883a 	mov	r22,r2
1000bc78:	a80b883a 	mov	r5,r21
1000bc7c:	9809883a 	mov	r4,r19
1000bc80:	000c7500 	call	1000c750 <__udivsi3>
1000bc84:	b02c943a 	slli	r22,r22,16
1000bc88:	a0a9383a 	mul	r20,r20,r2
1000bc8c:	94bfffcc 	andi	r18,r18,65535
1000bc90:	b4a4b03a 	or	r18,r22,r18
1000bc94:	9500052e 	bgeu	r18,r20,1000bcac <__udivdi3+0x12c>
1000bc98:	8ca5883a 	add	r18,r17,r18
1000bc9c:	10ffffc4 	addi	r3,r2,-1
1000bca0:	94400136 	bltu	r18,r17,1000bca8 <__udivdi3+0x128>
1000bca4:	95011436 	bltu	r18,r20,1000c0f8 <__udivdi3+0x578>
1000bca8:	1805883a 	mov	r2,r3
1000bcac:	800c943a 	slli	r6,r16,16
1000bcb0:	0007883a 	mov	r3,zero
1000bcb4:	3084b03a 	or	r2,r6,r2
1000bcb8:	00005506 	br	1000be10 <__udivdi3+0x290>
1000bcbc:	3000041e 	bne	r6,zero,1000bcd0 <__udivdi3+0x150>
1000bcc0:	000b883a 	mov	r5,zero
1000bcc4:	01000044 	movi	r4,1
1000bcc8:	000c7500 	call	1000c750 <__udivsi3>
1000bccc:	1023883a 	mov	r17,r2
1000bcd0:	00bfffd4 	movui	r2,65535
1000bcd4:	14405f2e 	bgeu	r2,r17,1000be54 <__udivdi3+0x2d4>
1000bcd8:	00804034 	movhi	r2,256
1000bcdc:	8880f436 	bltu	r17,r2,1000c0b0 <__udivdi3+0x530>
1000bce0:	8806d63a 	srli	r3,r17,24
1000bce4:	04c00604 	movi	r19,24
1000bce8:	00840074 	movhi	r2,4097
1000bcec:	1885883a 	add	r2,r3,r2
1000bcf0:	10879d43 	ldbu	r2,7797(r2)
1000bcf4:	14e7883a 	add	r19,r2,r19
1000bcf8:	00800804 	movi	r2,32
1000bcfc:	14c5c83a 	sub	r2,r2,r19
1000bd00:	10005e1e 	bne	r2,zero,1000be7c <__udivdi3+0x2fc>
1000bd04:	8828d43a 	srli	r20,r17,16
1000bd08:	8461c83a 	sub	r16,r16,r17
1000bd0c:	8d7fffcc 	andi	r21,r17,65535
1000bd10:	00c00044 	movi	r3,1
1000bd14:	8009883a 	mov	r4,r16
1000bd18:	a00b883a 	mov	r5,r20
1000bd1c:	d8c00015 	stw	r3,0(sp)
1000bd20:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bd24:	8009883a 	mov	r4,r16
1000bd28:	a00b883a 	mov	r5,r20
1000bd2c:	1027883a 	mov	r19,r2
1000bd30:	000c7500 	call	1000c750 <__udivsi3>
1000bd34:	1021883a 	mov	r16,r2
1000bd38:	9826943a 	slli	r19,r19,16
1000bd3c:	9004d43a 	srli	r2,r18,16
1000bd40:	8549383a 	mul	r4,r16,r21
1000bd44:	d8c00017 	ldw	r3,0(sp)
1000bd48:	9884b03a 	or	r2,r19,r2
1000bd4c:	1100052e 	bgeu	r2,r4,1000bd64 <__udivdi3+0x1e4>
1000bd50:	1445883a 	add	r2,r2,r17
1000bd54:	817fffc4 	addi	r5,r16,-1
1000bd58:	14400136 	bltu	r2,r17,1000bd60 <__udivdi3+0x1e0>
1000bd5c:	1100eb36 	bltu	r2,r4,1000c10c <__udivdi3+0x58c>
1000bd60:	2821883a 	mov	r16,r5
1000bd64:	1127c83a 	sub	r19,r2,r4
1000bd68:	a00b883a 	mov	r5,r20
1000bd6c:	9809883a 	mov	r4,r19
1000bd70:	d8c00015 	stw	r3,0(sp)
1000bd74:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bd78:	102d883a 	mov	r22,r2
1000bd7c:	a00b883a 	mov	r5,r20
1000bd80:	9809883a 	mov	r4,r19
1000bd84:	000c7500 	call	1000c750 <__udivsi3>
1000bd88:	b02c943a 	slli	r22,r22,16
1000bd8c:	156b383a 	mul	r21,r2,r21
1000bd90:	94bfffcc 	andi	r18,r18,65535
1000bd94:	b4a4b03a 	or	r18,r22,r18
1000bd98:	d8c00017 	ldw	r3,0(sp)
1000bd9c:	9540052e 	bgeu	r18,r21,1000bdb4 <__udivdi3+0x234>
1000bda0:	8ca5883a 	add	r18,r17,r18
1000bda4:	113fffc4 	addi	r4,r2,-1
1000bda8:	94400136 	bltu	r18,r17,1000bdb0 <__udivdi3+0x230>
1000bdac:	9540d036 	bltu	r18,r21,1000c0f0 <__udivdi3+0x570>
1000bdb0:	2005883a 	mov	r2,r4
1000bdb4:	800c943a 	slli	r6,r16,16
1000bdb8:	3084b03a 	or	r2,r6,r2
1000bdbc:	00001406 	br	1000be10 <__udivdi3+0x290>
1000bdc0:	29c01136 	bltu	r5,r7,1000be08 <__udivdi3+0x288>
1000bdc4:	00bfffd4 	movui	r2,65535
1000bdc8:	11c01d2e 	bgeu	r2,r7,1000be40 <__udivdi3+0x2c0>
1000bdcc:	00804034 	movhi	r2,256
1000bdd0:	3880ac36 	bltu	r7,r2,1000c084 <__udivdi3+0x504>
1000bdd4:	3806d63a 	srli	r3,r7,24
1000bdd8:	01000604 	movi	r4,24
1000bddc:	00840074 	movhi	r2,4097
1000bde0:	1885883a 	add	r2,r3,r2
1000bde4:	10c79d43 	ldbu	r3,7797(r2)
1000bde8:	05800804 	movi	r22,32
1000bdec:	1907883a 	add	r3,r3,r4
1000bdf0:	b0edc83a 	sub	r22,r22,r3
1000bdf4:	b000531e 	bne	r22,zero,1000bf44 <__udivdi3+0x3c4>
1000bdf8:	3c00a536 	bltu	r7,r16,1000c090 <__udivdi3+0x510>
1000bdfc:	a985403a 	cmpgeu	r2,r21,r6
1000be00:	0007883a 	mov	r3,zero
1000be04:	00000206 	br	1000be10 <__udivdi3+0x290>
1000be08:	0007883a 	mov	r3,zero
1000be0c:	0005883a 	mov	r2,zero
1000be10:	dfc00a17 	ldw	ra,40(sp)
1000be14:	df000917 	ldw	fp,36(sp)
1000be18:	ddc00817 	ldw	r23,32(sp)
1000be1c:	dd800717 	ldw	r22,28(sp)
1000be20:	dd400617 	ldw	r21,24(sp)
1000be24:	dd000517 	ldw	r20,20(sp)
1000be28:	dcc00417 	ldw	r19,16(sp)
1000be2c:	dc800317 	ldw	r18,12(sp)
1000be30:	dc400217 	ldw	r17,8(sp)
1000be34:	dc000117 	ldw	r16,4(sp)
1000be38:	dec00b04 	addi	sp,sp,44
1000be3c:	f800283a 	ret
1000be40:	38804030 	cmpltui	r2,r7,256
1000be44:	1000951e 	bne	r2,zero,1000c09c <__udivdi3+0x51c>
1000be48:	3806d23a 	srli	r3,r7,8
1000be4c:	01000204 	movi	r4,8
1000be50:	003fe206 	br	1000bddc <__udivdi3+0x25c>
1000be54:	88804030 	cmpltui	r2,r17,256
1000be58:	10009b1e 	bne	r2,zero,1000c0c8 <__udivdi3+0x548>
1000be5c:	8806d23a 	srli	r3,r17,8
1000be60:	04c00204 	movi	r19,8
1000be64:	003fa006 	br	1000bce8 <__udivdi3+0x168>
1000be68:	30804030 	cmpltui	r2,r6,256
1000be6c:	10008e1e 	bne	r2,zero,1000c0a8 <__udivdi3+0x528>
1000be70:	3006d23a 	srli	r3,r6,8
1000be74:	04c00204 	movi	r19,8
1000be78:	003f5a06 	br	1000bbe4 <__udivdi3+0x64>
1000be7c:	88a2983a 	sll	r17,r17,r2
1000be80:	84ecd83a 	srl	r22,r16,r19
1000be84:	80a0983a 	sll	r16,r16,r2
1000be88:	8828d43a 	srli	r20,r17,16
1000be8c:	b009883a 	mov	r4,r22
1000be90:	ace6d83a 	srl	r19,r21,r19
1000be94:	a00b883a 	mov	r5,r20
1000be98:	a8a4983a 	sll	r18,r21,r2
1000be9c:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bea0:	b009883a 	mov	r4,r22
1000bea4:	a00b883a 	mov	r5,r20
1000bea8:	9c26b03a 	or	r19,r19,r16
1000beac:	1021883a 	mov	r16,r2
1000beb0:	000c7500 	call	1000c750 <__udivsi3>
1000beb4:	102f883a 	mov	r23,r2
1000beb8:	8d7fffcc 	andi	r21,r17,65535
1000bebc:	8020943a 	slli	r16,r16,16
1000bec0:	9804d43a 	srli	r2,r19,16
1000bec4:	aded383a 	mul	r22,r21,r23
1000bec8:	8084b03a 	or	r2,r16,r2
1000becc:	1580062e 	bgeu	r2,r22,1000bee8 <__udivdi3+0x368>
1000bed0:	1445883a 	add	r2,r2,r17
1000bed4:	b8ffffc4 	addi	r3,r23,-1
1000bed8:	14408336 	bltu	r2,r17,1000c0e8 <__udivdi3+0x568>
1000bedc:	1580822e 	bgeu	r2,r22,1000c0e8 <__udivdi3+0x568>
1000bee0:	bdffff84 	addi	r23,r23,-2
1000bee4:	1445883a 	add	r2,r2,r17
1000bee8:	15adc83a 	sub	r22,r2,r22
1000beec:	a00b883a 	mov	r5,r20
1000bef0:	b009883a 	mov	r4,r22
1000bef4:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bef8:	1021883a 	mov	r16,r2
1000befc:	b009883a 	mov	r4,r22
1000bf00:	a00b883a 	mov	r5,r20
1000bf04:	000c7500 	call	1000c750 <__udivsi3>
1000bf08:	8020943a 	slli	r16,r16,16
1000bf0c:	a889383a 	mul	r4,r21,r2
1000bf10:	9cffffcc 	andi	r19,r19,65535
1000bf14:	84e0b03a 	or	r16,r16,r19
1000bf18:	8100062e 	bgeu	r16,r4,1000bf34 <__udivdi3+0x3b4>
1000bf1c:	8461883a 	add	r16,r16,r17
1000bf20:	10ffffc4 	addi	r3,r2,-1
1000bf24:	84406c36 	bltu	r16,r17,1000c0d8 <__udivdi3+0x558>
1000bf28:	81006b2e 	bgeu	r16,r4,1000c0d8 <__udivdi3+0x558>
1000bf2c:	10bfff84 	addi	r2,r2,-2
1000bf30:	8461883a 	add	r16,r16,r17
1000bf34:	b806943a 	slli	r3,r23,16
1000bf38:	8121c83a 	sub	r16,r16,r4
1000bf3c:	1886b03a 	or	r3,r3,r2
1000bf40:	003f7406 	br	1000bd14 <__udivdi3+0x194>
1000bf44:	30f8d83a 	srl	fp,r6,r3
1000bf48:	3d8e983a 	sll	r7,r7,r22
1000bf4c:	80eed83a 	srl	r23,r16,r3
1000bf50:	a8c6d83a 	srl	r3,r21,r3
1000bf54:	e1f8b03a 	or	fp,fp,r7
1000bf58:	e024d43a 	srli	r18,fp,16
1000bf5c:	85a0983a 	sll	r16,r16,r22
1000bf60:	b809883a 	mov	r4,r23
1000bf64:	900b883a 	mov	r5,r18
1000bf68:	1c22b03a 	or	r17,r3,r16
1000bf6c:	35a8983a 	sll	r20,r6,r22
1000bf70:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bf74:	b809883a 	mov	r4,r23
1000bf78:	900b883a 	mov	r5,r18
1000bf7c:	1027883a 	mov	r19,r2
1000bf80:	000c7500 	call	1000c750 <__udivsi3>
1000bf84:	1021883a 	mov	r16,r2
1000bf88:	e0ffffcc 	andi	r3,fp,65535
1000bf8c:	9826943a 	slli	r19,r19,16
1000bf90:	8804d43a 	srli	r2,r17,16
1000bf94:	1c09383a 	mul	r4,r3,r16
1000bf98:	9884b03a 	or	r2,r19,r2
1000bf9c:	1100062e 	bgeu	r2,r4,1000bfb8 <__udivdi3+0x438>
1000bfa0:	1705883a 	add	r2,r2,fp
1000bfa4:	817fffc4 	addi	r5,r16,-1
1000bfa8:	17004d36 	bltu	r2,fp,1000c0e0 <__udivdi3+0x560>
1000bfac:	11004c2e 	bgeu	r2,r4,1000c0e0 <__udivdi3+0x560>
1000bfb0:	843fff84 	addi	r16,r16,-2
1000bfb4:	1705883a 	add	r2,r2,fp
1000bfb8:	1127c83a 	sub	r19,r2,r4
1000bfbc:	900b883a 	mov	r5,r18
1000bfc0:	9809883a 	mov	r4,r19
1000bfc4:	d8c00015 	stw	r3,0(sp)
1000bfc8:	000c7b40 	call	1000c7b4 <__umodsi3>
1000bfcc:	9809883a 	mov	r4,r19
1000bfd0:	900b883a 	mov	r5,r18
1000bfd4:	102f883a 	mov	r23,r2
1000bfd8:	000c7500 	call	1000c750 <__udivsi3>
1000bfdc:	d8c00017 	ldw	r3,0(sp)
1000bfe0:	b82e943a 	slli	r23,r23,16
1000bfe4:	8c7fffcc 	andi	r17,r17,65535
1000bfe8:	1889383a 	mul	r4,r3,r2
1000bfec:	bc62b03a 	or	r17,r23,r17
1000bff0:	8900062e 	bgeu	r17,r4,1000c00c <__udivdi3+0x48c>
1000bff4:	8f23883a 	add	r17,r17,fp
1000bff8:	10ffffc4 	addi	r3,r2,-1
1000bffc:	8f003436 	bltu	r17,fp,1000c0d0 <__udivdi3+0x550>
1000c000:	8900332e 	bgeu	r17,r4,1000c0d0 <__udivdi3+0x550>
1000c004:	10bfff84 	addi	r2,r2,-2
1000c008:	8f23883a 	add	r17,r17,fp
1000c00c:	8020943a 	slli	r16,r16,16
1000c010:	a17fffcc 	andi	r5,r20,65535
1000c014:	a00cd43a 	srli	r6,r20,16
1000c018:	8084b03a 	or	r2,r16,r2
1000c01c:	10ffffcc 	andi	r3,r2,65535
1000c020:	1028d43a 	srli	r20,r2,16
1000c024:	1951383a 	mul	r8,r3,r5
1000c028:	1987383a 	mul	r3,r3,r6
1000c02c:	a14b383a 	mul	r5,r20,r5
1000c030:	400ed43a 	srli	r7,r8,16
1000c034:	8923c83a 	sub	r17,r17,r4
1000c038:	1947883a 	add	r3,r3,r5
1000c03c:	38c7883a 	add	r3,r7,r3
1000c040:	a1a9383a 	mul	r20,r20,r6
1000c044:	1940022e 	bgeu	r3,r5,1000c050 <__udivdi3+0x4d0>
1000c048:	01000074 	movhi	r4,1
1000c04c:	a129883a 	add	r20,r20,r4
1000c050:	180cd43a 	srli	r6,r3,16
1000c054:	3529883a 	add	r20,r6,r20
1000c058:	8d000836 	bltu	r17,r20,1000c07c <__udivdi3+0x4fc>
1000c05c:	8d000226 	beq	r17,r20,1000c068 <__udivdi3+0x4e8>
1000c060:	0007883a 	mov	r3,zero
1000c064:	003f6a06 	br	1000be10 <__udivdi3+0x290>
1000c068:	1806943a 	slli	r3,r3,16
1000c06c:	ad8c983a 	sll	r6,r21,r22
1000c070:	423fffcc 	andi	r8,r8,65535
1000c074:	1a07883a 	add	r3,r3,r8
1000c078:	30fff92e 	bgeu	r6,r3,1000c060 <__udivdi3+0x4e0>
1000c07c:	10bfffc4 	addi	r2,r2,-1
1000c080:	003ff706 	br	1000c060 <__udivdi3+0x4e0>
1000c084:	3806d43a 	srli	r3,r7,16
1000c088:	01000404 	movi	r4,16
1000c08c:	003f5306 	br	1000bddc <__udivdi3+0x25c>
1000c090:	0007883a 	mov	r3,zero
1000c094:	00800044 	movi	r2,1
1000c098:	003f5d06 	br	1000be10 <__udivdi3+0x290>
1000c09c:	3807883a 	mov	r3,r7
1000c0a0:	0009883a 	mov	r4,zero
1000c0a4:	003f4d06 	br	1000bddc <__udivdi3+0x25c>
1000c0a8:	3007883a 	mov	r3,r6
1000c0ac:	003ecd06 	br	1000bbe4 <__udivdi3+0x64>
1000c0b0:	8806d43a 	srli	r3,r17,16
1000c0b4:	04c00404 	movi	r19,16
1000c0b8:	003f0b06 	br	1000bce8 <__udivdi3+0x168>
1000c0bc:	3006d43a 	srli	r3,r6,16
1000c0c0:	04c00404 	movi	r19,16
1000c0c4:	003ec706 	br	1000bbe4 <__udivdi3+0x64>
1000c0c8:	8807883a 	mov	r3,r17
1000c0cc:	003f0606 	br	1000bce8 <__udivdi3+0x168>
1000c0d0:	1805883a 	mov	r2,r3
1000c0d4:	003fcd06 	br	1000c00c <__udivdi3+0x48c>
1000c0d8:	1805883a 	mov	r2,r3
1000c0dc:	003f9506 	br	1000bf34 <__udivdi3+0x3b4>
1000c0e0:	2821883a 	mov	r16,r5
1000c0e4:	003fb406 	br	1000bfb8 <__udivdi3+0x438>
1000c0e8:	182f883a 	mov	r23,r3
1000c0ec:	003f7e06 	br	1000bee8 <__udivdi3+0x368>
1000c0f0:	10bfff84 	addi	r2,r2,-2
1000c0f4:	003f2f06 	br	1000bdb4 <__udivdi3+0x234>
1000c0f8:	10bfff84 	addi	r2,r2,-2
1000c0fc:	003eeb06 	br	1000bcac <__udivdi3+0x12c>
1000c100:	843fff84 	addi	r16,r16,-2
1000c104:	1445883a 	add	r2,r2,r17
1000c108:	003ed606 	br	1000bc64 <__udivdi3+0xe4>
1000c10c:	843fff84 	addi	r16,r16,-2
1000c110:	1445883a 	add	r2,r2,r17
1000c114:	003f1306 	br	1000bd64 <__udivdi3+0x1e4>

1000c118 <__umoddi3>:
1000c118:	defff404 	addi	sp,sp,-48
1000c11c:	dc400315 	stw	r17,12(sp)
1000c120:	dc000215 	stw	r16,8(sp)
1000c124:	dfc00b15 	stw	ra,44(sp)
1000c128:	df000a15 	stw	fp,40(sp)
1000c12c:	ddc00915 	stw	r23,36(sp)
1000c130:	dd800815 	stw	r22,32(sp)
1000c134:	dd400715 	stw	r21,28(sp)
1000c138:	dd000615 	stw	r20,24(sp)
1000c13c:	dcc00515 	stw	r19,20(sp)
1000c140:	dc800415 	stw	r18,16(sp)
1000c144:	2823883a 	mov	r17,r5
1000c148:	2021883a 	mov	r16,r4
1000c14c:	3800701e 	bne	r7,zero,1000c310 <__umoddi3+0x1f8>
1000c150:	382b883a 	mov	r21,r7
1000c154:	3027883a 	mov	r19,r6
1000c158:	2029883a 	mov	r20,r4
1000c15c:	2980392e 	bgeu	r5,r6,1000c244 <__umoddi3+0x12c>
1000c160:	00bfffd4 	movui	r2,65535
1000c164:	282f883a 	mov	r23,r5
1000c168:	11809736 	bltu	r2,r6,1000c3c8 <__umoddi3+0x2b0>
1000c16c:	30804030 	cmpltui	r2,r6,256
1000c170:	1001231e 	bne	r2,zero,1000c600 <__umoddi3+0x4e8>
1000c174:	3006d23a 	srli	r3,r6,8
1000c178:	05400204 	movi	r21,8
1000c17c:	00840074 	movhi	r2,4097
1000c180:	1885883a 	add	r2,r3,r2
1000c184:	10879d43 	ldbu	r2,7797(r2)
1000c188:	156b883a 	add	r21,r2,r21
1000c18c:	00800804 	movi	r2,32
1000c190:	1565c83a 	sub	r18,r2,r21
1000c194:	90000526 	beq	r18,zero,1000c1ac <__umoddi3+0x94>
1000c198:	8ca2983a 	sll	r17,r17,r18
1000c19c:	856ad83a 	srl	r21,r16,r21
1000c1a0:	34a6983a 	sll	r19,r6,r18
1000c1a4:	84a8983a 	sll	r20,r16,r18
1000c1a8:	ac6eb03a 	or	r23,r21,r17
1000c1ac:	982cd43a 	srli	r22,r19,16
1000c1b0:	b809883a 	mov	r4,r23
1000c1b4:	9c3fffcc 	andi	r16,r19,65535
1000c1b8:	b00b883a 	mov	r5,r22
1000c1bc:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c1c0:	b00b883a 	mov	r5,r22
1000c1c4:	b809883a 	mov	r4,r23
1000c1c8:	102b883a 	mov	r21,r2
1000c1cc:	000c7500 	call	1000c750 <__udivsi3>
1000c1d0:	a82a943a 	slli	r21,r21,16
1000c1d4:	a006d43a 	srli	r3,r20,16
1000c1d8:	8085383a 	mul	r2,r16,r2
1000c1dc:	a8c6b03a 	or	r3,r21,r3
1000c1e0:	1880032e 	bgeu	r3,r2,1000c1f0 <__umoddi3+0xd8>
1000c1e4:	1cc7883a 	add	r3,r3,r19
1000c1e8:	1cc00136 	bltu	r3,r19,1000c1f0 <__umoddi3+0xd8>
1000c1ec:	18811836 	bltu	r3,r2,1000c650 <__umoddi3+0x538>
1000c1f0:	18abc83a 	sub	r21,r3,r2
1000c1f4:	b00b883a 	mov	r5,r22
1000c1f8:	a809883a 	mov	r4,r21
1000c1fc:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c200:	1023883a 	mov	r17,r2
1000c204:	b00b883a 	mov	r5,r22
1000c208:	a809883a 	mov	r4,r21
1000c20c:	000c7500 	call	1000c750 <__udivsi3>
1000c210:	8822943a 	slli	r17,r17,16
1000c214:	8085383a 	mul	r2,r16,r2
1000c218:	a0ffffcc 	andi	r3,r20,65535
1000c21c:	88c6b03a 	or	r3,r17,r3
1000c220:	1880042e 	bgeu	r3,r2,1000c234 <__umoddi3+0x11c>
1000c224:	1cc7883a 	add	r3,r3,r19
1000c228:	1cc00236 	bltu	r3,r19,1000c234 <__umoddi3+0x11c>
1000c22c:	1880012e 	bgeu	r3,r2,1000c234 <__umoddi3+0x11c>
1000c230:	1cc7883a 	add	r3,r3,r19
1000c234:	1885c83a 	sub	r2,r3,r2
1000c238:	1484d83a 	srl	r2,r2,r18
1000c23c:	0007883a 	mov	r3,zero
1000c240:	00003606 	br	1000c31c <__umoddi3+0x204>
1000c244:	3000041e 	bne	r6,zero,1000c258 <__umoddi3+0x140>
1000c248:	000b883a 	mov	r5,zero
1000c24c:	01000044 	movi	r4,1
1000c250:	000c7500 	call	1000c750 <__udivsi3>
1000c254:	1027883a 	mov	r19,r2
1000c258:	00bfffd4 	movui	r2,65535
1000c25c:	14c0552e 	bgeu	r2,r19,1000c3b4 <__umoddi3+0x29c>
1000c260:	00804034 	movhi	r2,256
1000c264:	9880ee36 	bltu	r19,r2,1000c620 <__umoddi3+0x508>
1000c268:	9806d63a 	srli	r3,r19,24
1000c26c:	05400604 	movi	r21,24
1000c270:	00840074 	movhi	r2,4097
1000c274:	1885883a 	add	r2,r3,r2
1000c278:	10879d43 	ldbu	r2,7797(r2)
1000c27c:	156b883a 	add	r21,r2,r21
1000c280:	00800804 	movi	r2,32
1000c284:	1565c83a 	sub	r18,r2,r21
1000c288:	9000ab1e 	bne	r18,zero,1000c538 <__umoddi3+0x420>
1000c28c:	982cd43a 	srli	r22,r19,16
1000c290:	8ce3c83a 	sub	r17,r17,r19
1000c294:	9d7fffcc 	andi	r21,r19,65535
1000c298:	b00b883a 	mov	r5,r22
1000c29c:	8809883a 	mov	r4,r17
1000c2a0:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c2a4:	b00b883a 	mov	r5,r22
1000c2a8:	8809883a 	mov	r4,r17
1000c2ac:	1021883a 	mov	r16,r2
1000c2b0:	000c7500 	call	1000c750 <__udivsi3>
1000c2b4:	8020943a 	slli	r16,r16,16
1000c2b8:	a006d43a 	srli	r3,r20,16
1000c2bc:	1545383a 	mul	r2,r2,r21
1000c2c0:	80c6b03a 	or	r3,r16,r3
1000c2c4:	1880042e 	bgeu	r3,r2,1000c2d8 <__umoddi3+0x1c0>
1000c2c8:	1cc7883a 	add	r3,r3,r19
1000c2cc:	1cc00236 	bltu	r3,r19,1000c2d8 <__umoddi3+0x1c0>
1000c2d0:	1880012e 	bgeu	r3,r2,1000c2d8 <__umoddi3+0x1c0>
1000c2d4:	1cc7883a 	add	r3,r3,r19
1000c2d8:	18a1c83a 	sub	r16,r3,r2
1000c2dc:	b00b883a 	mov	r5,r22
1000c2e0:	8009883a 	mov	r4,r16
1000c2e4:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c2e8:	1023883a 	mov	r17,r2
1000c2ec:	b00b883a 	mov	r5,r22
1000c2f0:	8009883a 	mov	r4,r16
1000c2f4:	000c7500 	call	1000c750 <__udivsi3>
1000c2f8:	8822943a 	slli	r17,r17,16
1000c2fc:	1545383a 	mul	r2,r2,r21
1000c300:	a53fffcc 	andi	r20,r20,65535
1000c304:	8d06b03a 	or	r3,r17,r20
1000c308:	18bfca2e 	bgeu	r3,r2,1000c234 <__umoddi3+0x11c>
1000c30c:	003fc506 	br	1000c224 <__umoddi3+0x10c>
1000c310:	2005883a 	mov	r2,r4
1000c314:	29c00d2e 	bgeu	r5,r7,1000c34c <__umoddi3+0x234>
1000c318:	2807883a 	mov	r3,r5
1000c31c:	dfc00b17 	ldw	ra,44(sp)
1000c320:	df000a17 	ldw	fp,40(sp)
1000c324:	ddc00917 	ldw	r23,36(sp)
1000c328:	dd800817 	ldw	r22,32(sp)
1000c32c:	dd400717 	ldw	r21,28(sp)
1000c330:	dd000617 	ldw	r20,24(sp)
1000c334:	dcc00517 	ldw	r19,20(sp)
1000c338:	dc800417 	ldw	r18,16(sp)
1000c33c:	dc400317 	ldw	r17,12(sp)
1000c340:	dc000217 	ldw	r16,8(sp)
1000c344:	dec00c04 	addi	sp,sp,48
1000c348:	f800283a 	ret
1000c34c:	013fffd4 	movui	r4,65535
1000c350:	2807883a 	mov	r3,r5
1000c354:	21c0122e 	bgeu	r4,r7,1000c3a0 <__umoddi3+0x288>
1000c358:	01004034 	movhi	r4,256
1000c35c:	3900ad36 	bltu	r7,r4,1000c614 <__umoddi3+0x4fc>
1000c360:	3810d63a 	srli	r8,r7,24
1000c364:	01400604 	movi	r5,24
1000c368:	01040074 	movhi	r4,4097
1000c36c:	4109883a 	add	r4,r8,r4
1000c370:	25079d43 	ldbu	r20,7797(r4)
1000c374:	04c00804 	movi	r19,32
1000c378:	a169883a 	add	r20,r20,r5
1000c37c:	9d27c83a 	sub	r19,r19,r20
1000c380:	9800161e 	bne	r19,zero,1000c3dc <__umoddi3+0x2c4>
1000c384:	3c400136 	bltu	r7,r17,1000c38c <__umoddi3+0x274>
1000c388:	81bfe436 	bltu	r16,r6,1000c31c <__umoddi3+0x204>
1000c38c:	8185c83a 	sub	r2,r16,r6
1000c390:	89cfc83a 	sub	r7,r17,r7
1000c394:	8087803a 	cmpltu	r3,r16,r2
1000c398:	38c7c83a 	sub	r3,r7,r3
1000c39c:	003fdf06 	br	1000c31c <__umoddi3+0x204>
1000c3a0:	39004030 	cmpltui	r4,r7,256
1000c3a4:	2000981e 	bne	r4,zero,1000c608 <__umoddi3+0x4f0>
1000c3a8:	3810d23a 	srli	r8,r7,8
1000c3ac:	01400204 	movi	r5,8
1000c3b0:	003fed06 	br	1000c368 <__umoddi3+0x250>
1000c3b4:	98804030 	cmpltui	r2,r19,256
1000c3b8:	10009c1e 	bne	r2,zero,1000c62c <__umoddi3+0x514>
1000c3bc:	9806d23a 	srli	r3,r19,8
1000c3c0:	05400204 	movi	r21,8
1000c3c4:	003faa06 	br	1000c270 <__umoddi3+0x158>
1000c3c8:	00804034 	movhi	r2,256
1000c3cc:	30809936 	bltu	r6,r2,1000c634 <__umoddi3+0x51c>
1000c3d0:	3006d63a 	srli	r3,r6,24
1000c3d4:	05400604 	movi	r21,24
1000c3d8:	003f6806 	br	1000c17c <__umoddi3+0x64>
1000c3dc:	3504d83a 	srl	r2,r6,r20
1000c3e0:	3cce983a 	sll	r7,r7,r19
1000c3e4:	8d38d83a 	srl	fp,r17,r20
1000c3e8:	8ce2983a 	sll	r17,r17,r19
1000c3ec:	11eeb03a 	or	r23,r2,r7
1000c3f0:	b82cd43a 	srli	r22,r23,16
1000c3f4:	8504d83a 	srl	r2,r16,r20
1000c3f8:	e009883a 	mov	r4,fp
1000c3fc:	b00b883a 	mov	r5,r22
1000c400:	34e4983a 	sll	r18,r6,r19
1000c404:	1462b03a 	or	r17,r2,r17
1000c408:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c40c:	e009883a 	mov	r4,fp
1000c410:	b00b883a 	mov	r5,r22
1000c414:	102b883a 	mov	r21,r2
1000c418:	000c7500 	call	1000c750 <__udivsi3>
1000c41c:	100d883a 	mov	r6,r2
1000c420:	b8ffffcc 	andi	r3,r23,65535
1000c424:	a82a943a 	slli	r21,r21,16
1000c428:	8804d43a 	srli	r2,r17,16
1000c42c:	1989383a 	mul	r4,r3,r6
1000c430:	84e0983a 	sll	r16,r16,r19
1000c434:	a884b03a 	or	r2,r21,r2
1000c438:	1100062e 	bgeu	r2,r4,1000c454 <__umoddi3+0x33c>
1000c43c:	15c5883a 	add	r2,r2,r23
1000c440:	317fffc4 	addi	r5,r6,-1
1000c444:	15c08036 	bltu	r2,r23,1000c648 <__umoddi3+0x530>
1000c448:	11007f2e 	bgeu	r2,r4,1000c648 <__umoddi3+0x530>
1000c44c:	31bfff84 	addi	r6,r6,-2
1000c450:	15c5883a 	add	r2,r2,r23
1000c454:	112bc83a 	sub	r21,r2,r4
1000c458:	b00b883a 	mov	r5,r22
1000c45c:	a809883a 	mov	r4,r21
1000c460:	d9800115 	stw	r6,4(sp)
1000c464:	d8c00015 	stw	r3,0(sp)
1000c468:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c46c:	b00b883a 	mov	r5,r22
1000c470:	a809883a 	mov	r4,r21
1000c474:	1039883a 	mov	fp,r2
1000c478:	000c7500 	call	1000c750 <__udivsi3>
1000c47c:	d8c00017 	ldw	r3,0(sp)
1000c480:	e038943a 	slli	fp,fp,16
1000c484:	8c7fffcc 	andi	r17,r17,65535
1000c488:	1887383a 	mul	r3,r3,r2
1000c48c:	e462b03a 	or	r17,fp,r17
1000c490:	d9800117 	ldw	r6,4(sp)
1000c494:	88c0062e 	bgeu	r17,r3,1000c4b0 <__umoddi3+0x398>
1000c498:	8de3883a 	add	r17,r17,r23
1000c49c:	113fffc4 	addi	r4,r2,-1
1000c4a0:	8dc06736 	bltu	r17,r23,1000c640 <__umoddi3+0x528>
1000c4a4:	88c0662e 	bgeu	r17,r3,1000c640 <__umoddi3+0x528>
1000c4a8:	10bfff84 	addi	r2,r2,-2
1000c4ac:	8de3883a 	add	r17,r17,r23
1000c4b0:	300a943a 	slli	r5,r6,16
1000c4b4:	9010d43a 	srli	r8,r18,16
1000c4b8:	91bfffcc 	andi	r6,r18,65535
1000c4bc:	2888b03a 	or	r4,r5,r2
1000c4c0:	21ffffcc 	andi	r7,r4,65535
1000c4c4:	2008d43a 	srli	r4,r4,16
1000c4c8:	300b883a 	mov	r5,r6
1000c4cc:	398d383a 	mul	r6,r7,r6
1000c4d0:	214b383a 	mul	r5,r4,r5
1000c4d4:	3a0f383a 	mul	r7,r7,r8
1000c4d8:	3004d43a 	srli	r2,r6,16
1000c4dc:	88c7c83a 	sub	r3,r17,r3
1000c4e0:	394f883a 	add	r7,r7,r5
1000c4e4:	11c5883a 	add	r2,r2,r7
1000c4e8:	2209383a 	mul	r4,r4,r8
1000c4ec:	1140022e 	bgeu	r2,r5,1000c4f8 <__umoddi3+0x3e0>
1000c4f0:	01400074 	movhi	r5,1
1000c4f4:	2149883a 	add	r4,r4,r5
1000c4f8:	100ad43a 	srli	r5,r2,16
1000c4fc:	1004943a 	slli	r2,r2,16
1000c500:	31bfffcc 	andi	r6,r6,65535
1000c504:	2909883a 	add	r4,r5,r4
1000c508:	1185883a 	add	r2,r2,r6
1000c50c:	19003636 	bltu	r3,r4,1000c5e8 <__umoddi3+0x4d0>
1000c510:	19003426 	beq	r3,r4,1000c5e4 <__umoddi3+0x4cc>
1000c514:	8085c83a 	sub	r2,r16,r2
1000c518:	80a1803a 	cmpltu	r16,r16,r2
1000c51c:	1907c83a 	sub	r3,r3,r4
1000c520:	1c07c83a 	sub	r3,r3,r16
1000c524:	1d20983a 	sll	r16,r3,r20
1000c528:	14c4d83a 	srl	r2,r2,r19
1000c52c:	1cc6d83a 	srl	r3,r3,r19
1000c530:	8084b03a 	or	r2,r16,r2
1000c534:	003f7906 	br	1000c31c <__umoddi3+0x204>
1000c538:	9ca6983a 	sll	r19,r19,r18
1000c53c:	8d68d83a 	srl	r20,r17,r21
1000c540:	856ad83a 	srl	r21,r16,r21
1000c544:	982cd43a 	srli	r22,r19,16
1000c548:	a009883a 	mov	r4,r20
1000c54c:	8ca2983a 	sll	r17,r17,r18
1000c550:	b00b883a 	mov	r5,r22
1000c554:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c558:	a009883a 	mov	r4,r20
1000c55c:	b00b883a 	mov	r5,r22
1000c560:	ac6eb03a 	or	r23,r21,r17
1000c564:	1023883a 	mov	r17,r2
1000c568:	000c7500 	call	1000c750 <__udivsi3>
1000c56c:	9d7fffcc 	andi	r21,r19,65535
1000c570:	8822943a 	slli	r17,r17,16
1000c574:	b806d43a 	srli	r3,r23,16
1000c578:	a885383a 	mul	r2,r21,r2
1000c57c:	84a8983a 	sll	r20,r16,r18
1000c580:	88c6b03a 	or	r3,r17,r3
1000c584:	1880042e 	bgeu	r3,r2,1000c598 <__umoddi3+0x480>
1000c588:	1cc7883a 	add	r3,r3,r19
1000c58c:	1cc00236 	bltu	r3,r19,1000c598 <__umoddi3+0x480>
1000c590:	1880012e 	bgeu	r3,r2,1000c598 <__umoddi3+0x480>
1000c594:	1cc7883a 	add	r3,r3,r19
1000c598:	18a3c83a 	sub	r17,r3,r2
1000c59c:	8809883a 	mov	r4,r17
1000c5a0:	b00b883a 	mov	r5,r22
1000c5a4:	000c7b40 	call	1000c7b4 <__umodsi3>
1000c5a8:	1021883a 	mov	r16,r2
1000c5ac:	8809883a 	mov	r4,r17
1000c5b0:	b00b883a 	mov	r5,r22
1000c5b4:	000c7500 	call	1000c750 <__udivsi3>
1000c5b8:	8022943a 	slli	r17,r16,16
1000c5bc:	a885383a 	mul	r2,r21,r2
1000c5c0:	bdffffcc 	andi	r23,r23,65535
1000c5c4:	8de2b03a 	or	r17,r17,r23
1000c5c8:	8880042e 	bgeu	r17,r2,1000c5dc <__umoddi3+0x4c4>
1000c5cc:	8ce3883a 	add	r17,r17,r19
1000c5d0:	8cc00236 	bltu	r17,r19,1000c5dc <__umoddi3+0x4c4>
1000c5d4:	8880012e 	bgeu	r17,r2,1000c5dc <__umoddi3+0x4c4>
1000c5d8:	8ce3883a 	add	r17,r17,r19
1000c5dc:	88a3c83a 	sub	r17,r17,r2
1000c5e0:	003f2d06 	br	1000c298 <__umoddi3+0x180>
1000c5e4:	80bfcb2e 	bgeu	r16,r2,1000c514 <__umoddi3+0x3fc>
1000c5e8:	14a5c83a 	sub	r18,r2,r18
1000c5ec:	1485803a 	cmpltu	r2,r2,r18
1000c5f0:	15c5883a 	add	r2,r2,r23
1000c5f4:	2089c83a 	sub	r4,r4,r2
1000c5f8:	9005883a 	mov	r2,r18
1000c5fc:	003fc506 	br	1000c514 <__umoddi3+0x3fc>
1000c600:	3007883a 	mov	r3,r6
1000c604:	003edd06 	br	1000c17c <__umoddi3+0x64>
1000c608:	3811883a 	mov	r8,r7
1000c60c:	000b883a 	mov	r5,zero
1000c610:	003f5506 	br	1000c368 <__umoddi3+0x250>
1000c614:	3810d43a 	srli	r8,r7,16
1000c618:	01400404 	movi	r5,16
1000c61c:	003f5206 	br	1000c368 <__umoddi3+0x250>
1000c620:	9806d43a 	srli	r3,r19,16
1000c624:	05400404 	movi	r21,16
1000c628:	003f1106 	br	1000c270 <__umoddi3+0x158>
1000c62c:	9807883a 	mov	r3,r19
1000c630:	003f0f06 	br	1000c270 <__umoddi3+0x158>
1000c634:	3006d43a 	srli	r3,r6,16
1000c638:	05400404 	movi	r21,16
1000c63c:	003ecf06 	br	1000c17c <__umoddi3+0x64>
1000c640:	2005883a 	mov	r2,r4
1000c644:	003f9a06 	br	1000c4b0 <__umoddi3+0x398>
1000c648:	280d883a 	mov	r6,r5
1000c64c:	003f8106 	br	1000c454 <__umoddi3+0x33c>
1000c650:	1cc7883a 	add	r3,r3,r19
1000c654:	003ee606 	br	1000c1f0 <__umoddi3+0xd8>

1000c658 <__divsi3>:
1000c658:	20001a16 	blt	r4,zero,1000c6c4 <__divsi3+0x6c>
1000c65c:	000f883a 	mov	r7,zero
1000c660:	2800020e 	bge	r5,zero,1000c66c <__divsi3+0x14>
1000c664:	014bc83a 	sub	r5,zero,r5
1000c668:	39c0005c 	xori	r7,r7,1
1000c66c:	200d883a 	mov	r6,r4
1000c670:	00c00044 	movi	r3,1
1000c674:	2900092e 	bgeu	r5,r4,1000c69c <__divsi3+0x44>
1000c678:	00800804 	movi	r2,32
1000c67c:	00c00044 	movi	r3,1
1000c680:	00000106 	br	1000c688 <__divsi3+0x30>
1000c684:	10001226 	beq	r2,zero,1000c6d0 <__divsi3+0x78>
1000c688:	294b883a 	add	r5,r5,r5
1000c68c:	10bfffc4 	addi	r2,r2,-1
1000c690:	18c7883a 	add	r3,r3,r3
1000c694:	293ffb36 	bltu	r5,r4,1000c684 <__divsi3+0x2c>
1000c698:	18000d26 	beq	r3,zero,1000c6d0 <__divsi3+0x78>
1000c69c:	0005883a 	mov	r2,zero
1000c6a0:	31400236 	bltu	r6,r5,1000c6ac <__divsi3+0x54>
1000c6a4:	314dc83a 	sub	r6,r6,r5
1000c6a8:	10c4b03a 	or	r2,r2,r3
1000c6ac:	1806d07a 	srli	r3,r3,1
1000c6b0:	280ad07a 	srli	r5,r5,1
1000c6b4:	183ffa1e 	bne	r3,zero,1000c6a0 <__divsi3+0x48>
1000c6b8:	38000126 	beq	r7,zero,1000c6c0 <__divsi3+0x68>
1000c6bc:	0085c83a 	sub	r2,zero,r2
1000c6c0:	f800283a 	ret
1000c6c4:	0109c83a 	sub	r4,zero,r4
1000c6c8:	01c00044 	movi	r7,1
1000c6cc:	003fe406 	br	1000c660 <__divsi3+0x8>
1000c6d0:	0005883a 	mov	r2,zero
1000c6d4:	003ff806 	br	1000c6b8 <__divsi3+0x60>

1000c6d8 <__modsi3>:
1000c6d8:	20001a16 	blt	r4,zero,1000c744 <__modsi3+0x6c>
1000c6dc:	000f883a 	mov	r7,zero
1000c6e0:	2005883a 	mov	r2,r4
1000c6e4:	2800010e 	bge	r5,zero,1000c6ec <__modsi3+0x14>
1000c6e8:	014bc83a 	sub	r5,zero,r5
1000c6ec:	00c00044 	movi	r3,1
1000c6f0:	2900092e 	bgeu	r5,r4,1000c718 <__modsi3+0x40>
1000c6f4:	01800804 	movi	r6,32
1000c6f8:	00c00044 	movi	r3,1
1000c6fc:	00000106 	br	1000c704 <__modsi3+0x2c>
1000c700:	30000d26 	beq	r6,zero,1000c738 <__modsi3+0x60>
1000c704:	294b883a 	add	r5,r5,r5
1000c708:	31bfffc4 	addi	r6,r6,-1
1000c70c:	18c7883a 	add	r3,r3,r3
1000c710:	293ffb36 	bltu	r5,r4,1000c700 <__modsi3+0x28>
1000c714:	18000826 	beq	r3,zero,1000c738 <__modsi3+0x60>
1000c718:	1806d07a 	srli	r3,r3,1
1000c71c:	11400136 	bltu	r2,r5,1000c724 <__modsi3+0x4c>
1000c720:	1145c83a 	sub	r2,r2,r5
1000c724:	280ad07a 	srli	r5,r5,1
1000c728:	183ffb1e 	bne	r3,zero,1000c718 <__modsi3+0x40>
1000c72c:	38000126 	beq	r7,zero,1000c734 <__modsi3+0x5c>
1000c730:	0085c83a 	sub	r2,zero,r2
1000c734:	f800283a 	ret
1000c738:	2005883a 	mov	r2,r4
1000c73c:	383ffd26 	beq	r7,zero,1000c734 <__modsi3+0x5c>
1000c740:	003ffb06 	br	1000c730 <__modsi3+0x58>
1000c744:	0109c83a 	sub	r4,zero,r4
1000c748:	01c00044 	movi	r7,1
1000c74c:	003fe406 	br	1000c6e0 <__modsi3+0x8>

1000c750 <__udivsi3>:
1000c750:	200d883a 	mov	r6,r4
1000c754:	2900152e 	bgeu	r5,r4,1000c7ac <__udivsi3+0x5c>
1000c758:	28001416 	blt	r5,zero,1000c7ac <__udivsi3+0x5c>
1000c75c:	00800804 	movi	r2,32
1000c760:	00c00044 	movi	r3,1
1000c764:	00000206 	br	1000c770 <__udivsi3+0x20>
1000c768:	10000e26 	beq	r2,zero,1000c7a4 <__udivsi3+0x54>
1000c76c:	28000516 	blt	r5,zero,1000c784 <__udivsi3+0x34>
1000c770:	294b883a 	add	r5,r5,r5
1000c774:	10bfffc4 	addi	r2,r2,-1
1000c778:	18c7883a 	add	r3,r3,r3
1000c77c:	293ffa36 	bltu	r5,r4,1000c768 <__udivsi3+0x18>
1000c780:	18000826 	beq	r3,zero,1000c7a4 <__udivsi3+0x54>
1000c784:	0005883a 	mov	r2,zero
1000c788:	31400236 	bltu	r6,r5,1000c794 <__udivsi3+0x44>
1000c78c:	314dc83a 	sub	r6,r6,r5
1000c790:	10c4b03a 	or	r2,r2,r3
1000c794:	1806d07a 	srli	r3,r3,1
1000c798:	280ad07a 	srli	r5,r5,1
1000c79c:	183ffa1e 	bne	r3,zero,1000c788 <__udivsi3+0x38>
1000c7a0:	f800283a 	ret
1000c7a4:	0005883a 	mov	r2,zero
1000c7a8:	f800283a 	ret
1000c7ac:	00c00044 	movi	r3,1
1000c7b0:	003ff406 	br	1000c784 <__udivsi3+0x34>

1000c7b4 <__umodsi3>:
1000c7b4:	2005883a 	mov	r2,r4
1000c7b8:	2900132e 	bgeu	r5,r4,1000c808 <__umodsi3+0x54>
1000c7bc:	28001216 	blt	r5,zero,1000c808 <__umodsi3+0x54>
1000c7c0:	01800804 	movi	r6,32
1000c7c4:	00c00044 	movi	r3,1
1000c7c8:	00000206 	br	1000c7d4 <__umodsi3+0x20>
1000c7cc:	30000c26 	beq	r6,zero,1000c800 <__umodsi3+0x4c>
1000c7d0:	28000516 	blt	r5,zero,1000c7e8 <__umodsi3+0x34>
1000c7d4:	294b883a 	add	r5,r5,r5
1000c7d8:	31bfffc4 	addi	r6,r6,-1
1000c7dc:	18c7883a 	add	r3,r3,r3
1000c7e0:	293ffa36 	bltu	r5,r4,1000c7cc <__umodsi3+0x18>
1000c7e4:	18000626 	beq	r3,zero,1000c800 <__umodsi3+0x4c>
1000c7e8:	1806d07a 	srli	r3,r3,1
1000c7ec:	11400136 	bltu	r2,r5,1000c7f4 <__umodsi3+0x40>
1000c7f0:	1145c83a 	sub	r2,r2,r5
1000c7f4:	280ad07a 	srli	r5,r5,1
1000c7f8:	183ffb1e 	bne	r3,zero,1000c7e8 <__umodsi3+0x34>
1000c7fc:	f800283a 	ret
1000c800:	2005883a 	mov	r2,r4
1000c804:	f800283a 	ret
1000c808:	00c00044 	movi	r3,1
1000c80c:	003ff606 	br	1000c7e8 <__umodsi3+0x34>

1000c810 <__adddf3>:
1000c810:	02000434 	movhi	r8,16
1000c814:	defffb04 	addi	sp,sp,-20
1000c818:	423fffc4 	addi	r8,r8,-1
1000c81c:	2a12703a 	and	r9,r5,r8
1000c820:	3a06703a 	and	r3,r7,r8
1000c824:	3804d53a 	srli	r2,r7,20
1000c828:	dc000015 	stw	r16,0(sp)
1000c82c:	2820d53a 	srli	r16,r5,20
1000c830:	2016d77a 	srli	r11,r4,29
1000c834:	3014d77a 	srli	r10,r6,29
1000c838:	280ad7fa 	srli	r5,r5,31
1000c83c:	481290fa 	slli	r9,r9,3
1000c840:	180690fa 	slli	r3,r3,3
1000c844:	380ed7fa 	srli	r7,r7,31
1000c848:	dc400115 	stw	r17,4(sp)
1000c84c:	8401ffcc 	andi	r16,r16,2047
1000c850:	1081ffcc 	andi	r2,r2,2047
1000c854:	dfc00415 	stw	ra,16(sp)
1000c858:	dcc00315 	stw	r19,12(sp)
1000c85c:	dc800215 	stw	r18,8(sp)
1000c860:	5a52b03a 	or	r9,r11,r9
1000c864:	50c6b03a 	or	r3,r10,r3
1000c868:	2823883a 	mov	r17,r5
1000c86c:	201890fa 	slli	r12,r4,3
1000c870:	301690fa 	slli	r11,r6,3
1000c874:	8095c83a 	sub	r10,r16,r2
1000c878:	29c06a26 	beq	r5,r7,1000ca24 <__adddf3+0x214>
1000c87c:	0280590e 	bge	zero,r10,1000c9e4 <__adddf3+0x1d4>
1000c880:	10007c26 	beq	r2,zero,1000ca74 <__adddf3+0x264>
1000c884:	8081ffd8 	cmpnei	r2,r16,2047
1000c888:	10010726 	beq	r2,zero,1000cca8 <__adddf3+0x498>
1000c88c:	18c02034 	orhi	r3,r3,128
1000c890:	50800e48 	cmpgei	r2,r10,57
1000c894:	1000ed1e 	bne	r2,zero,1000cc4c <__adddf3+0x43c>
1000c898:	50800808 	cmpgei	r2,r10,32
1000c89c:	1001541e 	bne	r2,zero,1000cdf0 <__adddf3+0x5e0>
1000c8a0:	01000804 	movi	r4,32
1000c8a4:	2289c83a 	sub	r4,r4,r10
1000c8a8:	1926983a 	sll	r19,r3,r4
1000c8ac:	5a84d83a 	srl	r2,r11,r10
1000c8b0:	5908983a 	sll	r4,r11,r4
1000c8b4:	1a86d83a 	srl	r3,r3,r10
1000c8b8:	98a6b03a 	or	r19,r19,r2
1000c8bc:	2016c03a 	cmpne	r11,r4,zero
1000c8c0:	9ae6b03a 	or	r19,r19,r11
1000c8c4:	48d3c83a 	sub	r9,r9,r3
1000c8c8:	64e7c83a 	sub	r19,r12,r19
1000c8cc:	64c9803a 	cmpltu	r4,r12,r19
1000c8d0:	4909c83a 	sub	r4,r9,r4
1000c8d4:	2080202c 	andhi	r2,r4,128
1000c8d8:	10008726 	beq	r2,zero,1000caf8 <__adddf3+0x2e8>
1000c8dc:	02402034 	movhi	r9,128
1000c8e0:	4a7fffc4 	addi	r9,r9,-1
1000c8e4:	2264703a 	and	r18,r4,r9
1000c8e8:	9000cf26 	beq	r18,zero,1000cc28 <__adddf3+0x418>
1000c8ec:	9009883a 	mov	r4,r18
1000c8f0:	000eee80 	call	1000eee8 <__clzsi2>
1000c8f4:	10fffe04 	addi	r3,r2,-8
1000c8f8:	01000804 	movi	r4,32
1000c8fc:	20c9c83a 	sub	r4,r4,r3
1000c900:	990ad83a 	srl	r5,r19,r4
1000c904:	90c8983a 	sll	r4,r18,r3
1000c908:	98e6983a 	sll	r19,r19,r3
1000c90c:	2908b03a 	or	r4,r5,r4
1000c910:	1c00be16 	blt	r3,r16,1000cc0c <__adddf3+0x3fc>
1000c914:	1c21c83a 	sub	r16,r3,r16
1000c918:	81400044 	addi	r5,r16,1
1000c91c:	28800808 	cmpgei	r2,r5,32
1000c920:	10011b1e 	bne	r2,zero,1000cd90 <__adddf3+0x580>
1000c924:	00800804 	movi	r2,32
1000c928:	1145c83a 	sub	r2,r2,r5
1000c92c:	9946d83a 	srl	r3,r19,r5
1000c930:	98a6983a 	sll	r19,r19,r2
1000c934:	2084983a 	sll	r2,r4,r2
1000c938:	2148d83a 	srl	r4,r4,r5
1000c93c:	9826c03a 	cmpne	r19,r19,zero
1000c940:	10c4b03a 	or	r2,r2,r3
1000c944:	14e6b03a 	or	r19,r2,r19
1000c948:	0021883a 	mov	r16,zero
1000c94c:	988001cc 	andi	r2,r19,7
1000c950:	10000726 	beq	r2,zero,1000c970 <__adddf3+0x160>
1000c954:	988003cc 	andi	r2,r19,15
1000c958:	10800120 	cmpeqi	r2,r2,4
1000c95c:	1000041e 	bne	r2,zero,1000c970 <__adddf3+0x160>
1000c960:	99400104 	addi	r5,r19,4
1000c964:	2ce7803a 	cmpltu	r19,r5,r19
1000c968:	24c9883a 	add	r4,r4,r19
1000c96c:	2827883a 	mov	r19,r5
1000c970:	2080202c 	andhi	r2,r4,128
1000c974:	10006226 	beq	r2,zero,1000cb00 <__adddf3+0x2f0>
1000c978:	84000044 	addi	r16,r16,1
1000c97c:	8081ffe0 	cmpeqi	r2,r16,2047
1000c980:	8401ffcc 	andi	r16,r16,2047
1000c984:	1000731e 	bne	r2,zero,1000cb54 <__adddf3+0x344>
1000c988:	017fe034 	movhi	r5,65408
1000c98c:	297fffc4 	addi	r5,r5,-1
1000c990:	214a703a 	and	r5,r4,r5
1000c994:	2804977a 	slli	r2,r5,29
1000c998:	280a927a 	slli	r5,r5,9
1000c99c:	9826d0fa 	srli	r19,r19,3
1000c9a0:	2808d33a 	srli	r4,r5,12
1000c9a4:	14c4b03a 	or	r2,r2,r19
1000c9a8:	8020953a 	slli	r16,r16,20
1000c9ac:	00c00434 	movhi	r3,16
1000c9b0:	8c403fcc 	andi	r17,r17,255
1000c9b4:	882297fa 	slli	r17,r17,31
1000c9b8:	18ffffc4 	addi	r3,r3,-1
1000c9bc:	20c6703a 	and	r3,r4,r3
1000c9c0:	1c06b03a 	or	r3,r3,r16
1000c9c4:	1c46b03a 	or	r3,r3,r17
1000c9c8:	dfc00417 	ldw	ra,16(sp)
1000c9cc:	dcc00317 	ldw	r19,12(sp)
1000c9d0:	dc800217 	ldw	r18,8(sp)
1000c9d4:	dc400117 	ldw	r17,4(sp)
1000c9d8:	dc000017 	ldw	r16,0(sp)
1000c9dc:	dec00504 	addi	sp,sp,20
1000c9e0:	f800283a 	ret
1000c9e4:	50002b1e 	bne	r10,zero,1000ca94 <__adddf3+0x284>
1000c9e8:	80800044 	addi	r2,r16,1
1000c9ec:	1081ff8c 	andi	r2,r2,2046
1000c9f0:	1000a11e 	bne	r2,zero,1000cc78 <__adddf3+0x468>
1000c9f4:	4b0ab03a 	or	r5,r9,r12
1000c9f8:	1ac4b03a 	or	r2,r3,r11
1000c9fc:	80015c1e 	bne	r16,zero,1000cf70 <__adddf3+0x760>
1000ca00:	28012826 	beq	r5,zero,1000cea4 <__adddf3+0x694>
1000ca04:	1001671e 	bne	r2,zero,1000cfa4 <__adddf3+0x794>
1000ca08:	4826977a 	slli	r19,r9,29
1000ca0c:	00c80034 	movhi	r3,8192
1000ca10:	18ffffc4 	addi	r3,r3,-1
1000ca14:	20c4703a 	and	r2,r4,r3
1000ca18:	9884b03a 	or	r2,r19,r2
1000ca1c:	4812d0fa 	srli	r9,r9,3
1000ca20:	00003d06 	br	1000cb18 <__adddf3+0x308>
1000ca24:	02804f0e 	bge	zero,r10,1000cb64 <__adddf3+0x354>
1000ca28:	10002426 	beq	r2,zero,1000cabc <__adddf3+0x2ac>
1000ca2c:	8081ffd8 	cmpnei	r2,r16,2047
1000ca30:	10009d26 	beq	r2,zero,1000cca8 <__adddf3+0x498>
1000ca34:	18c02034 	orhi	r3,r3,128
1000ca38:	50800e48 	cmpgei	r2,r10,57
1000ca3c:	10003b1e 	bne	r2,zero,1000cb2c <__adddf3+0x31c>
1000ca40:	50800808 	cmpgei	r2,r10,32
1000ca44:	10010326 	beq	r2,zero,1000ce54 <__adddf3+0x644>
1000ca48:	54fff804 	addi	r19,r10,-32
1000ca4c:	51000820 	cmpeqi	r4,r10,32
1000ca50:	1cc4d83a 	srl	r2,r3,r19
1000ca54:	2000041e 	bne	r4,zero,1000ca68 <__adddf3+0x258>
1000ca58:	01001004 	movi	r4,64
1000ca5c:	2295c83a 	sub	r10,r4,r10
1000ca60:	1a86983a 	sll	r3,r3,r10
1000ca64:	58d6b03a 	or	r11,r11,r3
1000ca68:	5826c03a 	cmpne	r19,r11,zero
1000ca6c:	98a6b03a 	or	r19,r19,r2
1000ca70:	00003006 	br	1000cb34 <__adddf3+0x324>
1000ca74:	1ac4b03a 	or	r2,r3,r11
1000ca78:	10007726 	beq	r2,zero,1000cc58 <__adddf3+0x448>
1000ca7c:	50bfffc4 	addi	r2,r10,-1
1000ca80:	10011926 	beq	r2,zero,1000cee8 <__adddf3+0x6d8>
1000ca84:	5281ffd8 	cmpnei	r10,r10,2047
1000ca88:	50012026 	beq	r10,zero,1000cf0c <__adddf3+0x6fc>
1000ca8c:	1015883a 	mov	r10,r2
1000ca90:	003f7f06 	br	1000c890 <__adddf3+0x80>
1000ca94:	1409c83a 	sub	r4,r2,r16
1000ca98:	8000a61e 	bne	r16,zero,1000cd34 <__adddf3+0x524>
1000ca9c:	4b0ab03a 	or	r5,r9,r12
1000caa0:	2800f726 	beq	r5,zero,1000ce80 <__adddf3+0x670>
1000caa4:	217fffc4 	addi	r5,r4,-1
1000caa8:	28017f26 	beq	r5,zero,1000d0a8 <__adddf3+0x898>
1000caac:	2101ffd8 	cmpnei	r4,r4,2047
1000cab0:	2001a326 	beq	r4,zero,1000d140 <__adddf3+0x930>
1000cab4:	2809883a 	mov	r4,r5
1000cab8:	0000a106 	br	1000cd40 <__adddf3+0x530>
1000cabc:	1ac4b03a 	or	r2,r3,r11
1000cac0:	10006526 	beq	r2,zero,1000cc58 <__adddf3+0x448>
1000cac4:	50bfffc4 	addi	r2,r10,-1
1000cac8:	10000426 	beq	r2,zero,1000cadc <__adddf3+0x2cc>
1000cacc:	5281ffd8 	cmpnei	r10,r10,2047
1000cad0:	50014326 	beq	r10,zero,1000cfe0 <__adddf3+0x7d0>
1000cad4:	1015883a 	mov	r10,r2
1000cad8:	003fd706 	br	1000ca38 <__adddf3+0x228>
1000cadc:	62e7883a 	add	r19,r12,r11
1000cae0:	48d3883a 	add	r9,r9,r3
1000cae4:	9b09803a 	cmpltu	r4,r19,r12
1000cae8:	4909883a 	add	r4,r9,r4
1000caec:	2080202c 	andhi	r2,r4,128
1000caf0:	1000b41e 	bne	r2,zero,1000cdc4 <__adddf3+0x5b4>
1000caf4:	04000044 	movi	r16,1
1000caf8:	988001cc 	andi	r2,r19,7
1000cafc:	103f951e 	bne	r2,zero,1000c954 <__adddf3+0x144>
1000cb00:	9826d0fa 	srli	r19,r19,3
1000cb04:	2004977a 	slli	r2,r4,29
1000cb08:	2012d0fa 	srli	r9,r4,3
1000cb0c:	9884b03a 	or	r2,r19,r2
1000cb10:	80c1ffe0 	cmpeqi	r3,r16,2047
1000cb14:	1800351e 	bne	r3,zero,1000cbec <__adddf3+0x3dc>
1000cb18:	01000434 	movhi	r4,16
1000cb1c:	213fffc4 	addi	r4,r4,-1
1000cb20:	4908703a 	and	r4,r9,r4
1000cb24:	8401ffcc 	andi	r16,r16,2047
1000cb28:	003f9f06 	br	1000c9a8 <__adddf3+0x198>
1000cb2c:	1ac8b03a 	or	r4,r3,r11
1000cb30:	2026c03a 	cmpne	r19,r4,zero
1000cb34:	9b27883a 	add	r19,r19,r12
1000cb38:	9b09803a 	cmpltu	r4,r19,r12
1000cb3c:	2249883a 	add	r4,r4,r9
1000cb40:	2080202c 	andhi	r2,r4,128
1000cb44:	103fec26 	beq	r2,zero,1000caf8 <__adddf3+0x2e8>
1000cb48:	84000044 	addi	r16,r16,1
1000cb4c:	8081ffe0 	cmpeqi	r2,r16,2047
1000cb50:	10009d26 	beq	r2,zero,1000cdc8 <__adddf3+0x5b8>
1000cb54:	0401ffc4 	movi	r16,2047
1000cb58:	0009883a 	mov	r4,zero
1000cb5c:	0005883a 	mov	r2,zero
1000cb60:	003f9106 	br	1000c9a8 <__adddf3+0x198>
1000cb64:	5000571e 	bne	r10,zero,1000ccc4 <__adddf3+0x4b4>
1000cb68:	80800044 	addi	r2,r16,1
1000cb6c:	1141ff8c 	andi	r5,r2,2046
1000cb70:	2800ed1e 	bne	r5,zero,1000cf28 <__adddf3+0x718>
1000cb74:	4b04b03a 	or	r2,r9,r12
1000cb78:	8000a826 	beq	r16,zero,1000ce1c <__adddf3+0x60c>
1000cb7c:	10010226 	beq	r2,zero,1000cf88 <__adddf3+0x778>
1000cb80:	1ad6b03a 	or	r11,r3,r11
1000cb84:	480a977a 	slli	r5,r9,29
1000cb88:	4812d0fa 	srli	r9,r9,3
1000cb8c:	58015f26 	beq	r11,zero,1000d10c <__adddf3+0x8fc>
1000cb90:	02080034 	movhi	r8,8192
1000cb94:	423fffc4 	addi	r8,r8,-1
1000cb98:	2204703a 	and	r2,r4,r8
1000cb9c:	4900022c 	andhi	r4,r9,8
1000cba0:	114ab03a 	or	r5,r2,r5
1000cba4:	20000826 	beq	r4,zero,1000cbc8 <__adddf3+0x3b8>
1000cba8:	1808d0fa 	srli	r4,r3,3
1000cbac:	2080022c 	andhi	r2,r4,8
1000cbb0:	1000051e 	bne	r2,zero,1000cbc8 <__adddf3+0x3b8>
1000cbb4:	1806977a 	slli	r3,r3,29
1000cbb8:	3204703a 	and	r2,r6,r8
1000cbbc:	3823883a 	mov	r17,r7
1000cbc0:	10cab03a 	or	r5,r2,r3
1000cbc4:	2013883a 	mov	r9,r4
1000cbc8:	2804d77a 	srli	r2,r5,29
1000cbcc:	480890fa 	slli	r4,r9,3
1000cbd0:	00c80034 	movhi	r3,8192
1000cbd4:	18ffffc4 	addi	r3,r3,-1
1000cbd8:	1108b03a 	or	r4,r2,r4
1000cbdc:	2004977a 	slli	r2,r4,29
1000cbe0:	2012d0fa 	srli	r9,r4,3
1000cbe4:	28ca703a 	and	r5,r5,r3
1000cbe8:	1144b03a 	or	r2,r2,r5
1000cbec:	4886b03a 	or	r3,r9,r2
1000cbf0:	18016b26 	beq	r3,zero,1000d1a0 <__adddf3+0x990>
1000cbf4:	00c00434 	movhi	r3,16
1000cbf8:	49000234 	orhi	r4,r9,8
1000cbfc:	18ffffc4 	addi	r3,r3,-1
1000cc00:	20c8703a 	and	r4,r4,r3
1000cc04:	0401ffc4 	movi	r16,2047
1000cc08:	003f6706 	br	1000c9a8 <__adddf3+0x198>
1000cc0c:	017fe034 	movhi	r5,65408
1000cc10:	297fffc4 	addi	r5,r5,-1
1000cc14:	988001cc 	andi	r2,r19,7
1000cc18:	80e1c83a 	sub	r16,r16,r3
1000cc1c:	2148703a 	and	r4,r4,r5
1000cc20:	103f4c1e 	bne	r2,zero,1000c954 <__adddf3+0x144>
1000cc24:	003fb606 	br	1000cb00 <__adddf3+0x2f0>
1000cc28:	9809883a 	mov	r4,r19
1000cc2c:	000eee80 	call	1000eee8 <__clzsi2>
1000cc30:	10c00604 	addi	r3,r2,24
1000cc34:	19000808 	cmpgei	r4,r3,32
1000cc38:	203f2f26 	beq	r4,zero,1000c8f8 <__adddf3+0xe8>
1000cc3c:	113ffe04 	addi	r4,r2,-8
1000cc40:	9908983a 	sll	r4,r19,r4
1000cc44:	0027883a 	mov	r19,zero
1000cc48:	003f3106 	br	1000c910 <__adddf3+0x100>
1000cc4c:	1ac8b03a 	or	r4,r3,r11
1000cc50:	2026c03a 	cmpne	r19,r4,zero
1000cc54:	003f1c06 	br	1000c8c8 <__adddf3+0xb8>
1000cc58:	4826977a 	slli	r19,r9,29
1000cc5c:	00c80034 	movhi	r3,8192
1000cc60:	18ffffc4 	addi	r3,r3,-1
1000cc64:	20c4703a 	and	r2,r4,r3
1000cc68:	14c4b03a 	or	r2,r2,r19
1000cc6c:	4812d0fa 	srli	r9,r9,3
1000cc70:	5021883a 	mov	r16,r10
1000cc74:	003fa606 	br	1000cb10 <__adddf3+0x300>
1000cc78:	62e7c83a 	sub	r19,r12,r11
1000cc7c:	48e5c83a 	sub	r18,r9,r3
1000cc80:	64c9803a 	cmpltu	r4,r12,r19
1000cc84:	9125c83a 	sub	r18,r18,r4
1000cc88:	9080202c 	andhi	r2,r18,128
1000cc8c:	1000b21e 	bne	r2,zero,1000cf58 <__adddf3+0x748>
1000cc90:	9c84b03a 	or	r2,r19,r18
1000cc94:	103f141e 	bne	r2,zero,1000c8e8 <__adddf3+0xd8>
1000cc98:	0013883a 	mov	r9,zero
1000cc9c:	0021883a 	mov	r16,zero
1000cca0:	0023883a 	mov	r17,zero
1000cca4:	003f9c06 	br	1000cb18 <__adddf3+0x308>
1000cca8:	4826977a 	slli	r19,r9,29
1000ccac:	00c80034 	movhi	r3,8192
1000ccb0:	18ffffc4 	addi	r3,r3,-1
1000ccb4:	20c4703a 	and	r2,r4,r3
1000ccb8:	14c4b03a 	or	r2,r2,r19
1000ccbc:	4812d0fa 	srli	r9,r9,3
1000ccc0:	003fca06 	br	1000cbec <__adddf3+0x3dc>
1000ccc4:	1409c83a 	sub	r4,r2,r16
1000ccc8:	80005e1e 	bne	r16,zero,1000ce44 <__adddf3+0x634>
1000cccc:	4b0ab03a 	or	r5,r9,r12
1000ccd0:	28011326 	beq	r5,zero,1000d120 <__adddf3+0x910>
1000ccd4:	217fffc4 	addi	r5,r4,-1
1000ccd8:	28012c26 	beq	r5,zero,1000d18c <__adddf3+0x97c>
1000ccdc:	2101ffd8 	cmpnei	r4,r4,2047
1000cce0:	2000a926 	beq	r4,zero,1000cf88 <__adddf3+0x778>
1000cce4:	2809883a 	mov	r4,r5
1000cce8:	21400e48 	cmpgei	r5,r4,57
1000ccec:	2800b91e 	bne	r5,zero,1000cfd4 <__adddf3+0x7c4>
1000ccf0:	21400808 	cmpgei	r5,r4,32
1000ccf4:	28011a1e 	bne	r5,zero,1000d160 <__adddf3+0x950>
1000ccf8:	01400804 	movi	r5,32
1000ccfc:	290bc83a 	sub	r5,r5,r4
1000cd00:	4966983a 	sll	r19,r9,r5
1000cd04:	610cd83a 	srl	r6,r12,r4
1000cd08:	614a983a 	sll	r5,r12,r5
1000cd0c:	4912d83a 	srl	r9,r9,r4
1000cd10:	99a6b03a 	or	r19,r19,r6
1000cd14:	280ac03a 	cmpne	r5,r5,zero
1000cd18:	9966b03a 	or	r19,r19,r5
1000cd1c:	1a47883a 	add	r3,r3,r9
1000cd20:	9ae7883a 	add	r19,r19,r11
1000cd24:	9ac9803a 	cmpltu	r4,r19,r11
1000cd28:	20c9883a 	add	r4,r4,r3
1000cd2c:	1021883a 	mov	r16,r2
1000cd30:	003f8306 	br	1000cb40 <__adddf3+0x330>
1000cd34:	1141ffd8 	cmpnei	r5,r2,2047
1000cd38:	28006326 	beq	r5,zero,1000cec8 <__adddf3+0x6b8>
1000cd3c:	4a402034 	orhi	r9,r9,128
1000cd40:	21400e48 	cmpgei	r5,r4,57
1000cd44:	28006e1e 	bne	r5,zero,1000cf00 <__adddf3+0x6f0>
1000cd48:	21400808 	cmpgei	r5,r4,32
1000cd4c:	2800ab1e 	bne	r5,zero,1000cffc <__adddf3+0x7ec>
1000cd50:	01400804 	movi	r5,32
1000cd54:	290bc83a 	sub	r5,r5,r4
1000cd58:	4966983a 	sll	r19,r9,r5
1000cd5c:	610cd83a 	srl	r6,r12,r4
1000cd60:	614a983a 	sll	r5,r12,r5
1000cd64:	4912d83a 	srl	r9,r9,r4
1000cd68:	99a6b03a 	or	r19,r19,r6
1000cd6c:	280ac03a 	cmpne	r5,r5,zero
1000cd70:	9966b03a 	or	r19,r19,r5
1000cd74:	1a47c83a 	sub	r3,r3,r9
1000cd78:	5ce7c83a 	sub	r19,r11,r19
1000cd7c:	5cc9803a 	cmpltu	r4,r11,r19
1000cd80:	1909c83a 	sub	r4,r3,r4
1000cd84:	3823883a 	mov	r17,r7
1000cd88:	1021883a 	mov	r16,r2
1000cd8c:	003ed106 	br	1000c8d4 <__adddf3+0xc4>
1000cd90:	843ff844 	addi	r16,r16,-31
1000cd94:	28800820 	cmpeqi	r2,r5,32
1000cd98:	2420d83a 	srl	r16,r4,r16
1000cd9c:	1000041e 	bne	r2,zero,1000cdb0 <__adddf3+0x5a0>
1000cda0:	00801004 	movi	r2,64
1000cda4:	114bc83a 	sub	r5,r2,r5
1000cda8:	2148983a 	sll	r4,r4,r5
1000cdac:	9926b03a 	or	r19,r19,r4
1000cdb0:	9826c03a 	cmpne	r19,r19,zero
1000cdb4:	9c26b03a 	or	r19,r19,r16
1000cdb8:	0009883a 	mov	r4,zero
1000cdbc:	0021883a 	mov	r16,zero
1000cdc0:	003f4d06 	br	1000caf8 <__adddf3+0x2e8>
1000cdc4:	04000084 	movi	r16,2
1000cdc8:	00bfe034 	movhi	r2,65408
1000cdcc:	10bfffc4 	addi	r2,r2,-1
1000cdd0:	208a703a 	and	r5,r4,r2
1000cdd4:	9804d07a 	srli	r2,r19,1
1000cdd8:	280697fa 	slli	r3,r5,31
1000cddc:	9cc0004c 	andi	r19,r19,1
1000cde0:	14e6b03a 	or	r19,r2,r19
1000cde4:	2808d07a 	srli	r4,r5,1
1000cde8:	1ce6b03a 	or	r19,r3,r19
1000cdec:	003ed706 	br	1000c94c <__adddf3+0x13c>
1000cdf0:	54fff804 	addi	r19,r10,-32
1000cdf4:	50800820 	cmpeqi	r2,r10,32
1000cdf8:	1ce6d83a 	srl	r19,r3,r19
1000cdfc:	1000041e 	bne	r2,zero,1000ce10 <__adddf3+0x600>
1000ce00:	00801004 	movi	r2,64
1000ce04:	1295c83a 	sub	r10,r2,r10
1000ce08:	1a86983a 	sll	r3,r3,r10
1000ce0c:	58d6b03a 	or	r11,r11,r3
1000ce10:	5808c03a 	cmpne	r4,r11,zero
1000ce14:	24e6b03a 	or	r19,r4,r19
1000ce18:	003eab06 	br	1000c8c8 <__adddf3+0xb8>
1000ce1c:	1000a926 	beq	r2,zero,1000d0c4 <__adddf3+0x8b4>
1000ce20:	1ac4b03a 	or	r2,r3,r11
1000ce24:	1000ae1e 	bne	r2,zero,1000d0e0 <__adddf3+0x8d0>
1000ce28:	4806977a 	slli	r3,r9,29
1000ce2c:	00880034 	movhi	r2,8192
1000ce30:	10bfffc4 	addi	r2,r2,-1
1000ce34:	2084703a 	and	r2,r4,r2
1000ce38:	10c4b03a 	or	r2,r2,r3
1000ce3c:	4812d0fa 	srli	r9,r9,3
1000ce40:	003f3506 	br	1000cb18 <__adddf3+0x308>
1000ce44:	1141ffd8 	cmpnei	r5,r2,2047
1000ce48:	28004f26 	beq	r5,zero,1000cf88 <__adddf3+0x778>
1000ce4c:	4a402034 	orhi	r9,r9,128
1000ce50:	003fa506 	br	1000cce8 <__adddf3+0x4d8>
1000ce54:	01000804 	movi	r4,32
1000ce58:	2289c83a 	sub	r4,r4,r10
1000ce5c:	1926983a 	sll	r19,r3,r4
1000ce60:	5a84d83a 	srl	r2,r11,r10
1000ce64:	5908983a 	sll	r4,r11,r4
1000ce68:	1a86d83a 	srl	r3,r3,r10
1000ce6c:	98a6b03a 	or	r19,r19,r2
1000ce70:	2016c03a 	cmpne	r11,r4,zero
1000ce74:	9ae6b03a 	or	r19,r19,r11
1000ce78:	48d3883a 	add	r9,r9,r3
1000ce7c:	003f2d06 	br	1000cb34 <__adddf3+0x324>
1000ce80:	01480034 	movhi	r5,8192
1000ce84:	1826977a 	slli	r19,r3,29
1000ce88:	297fffc4 	addi	r5,r5,-1
1000ce8c:	3144703a 	and	r2,r6,r5
1000ce90:	14c4b03a 	or	r2,r2,r19
1000ce94:	1812d0fa 	srli	r9,r3,3
1000ce98:	3823883a 	mov	r17,r7
1000ce9c:	2021883a 	mov	r16,r4
1000cea0:	003f1b06 	br	1000cb10 <__adddf3+0x300>
1000cea4:	10007d26 	beq	r2,zero,1000d09c <__adddf3+0x88c>
1000cea8:	00880034 	movhi	r2,8192
1000ceac:	1808977a 	slli	r4,r3,29
1000ceb0:	10bfffc4 	addi	r2,r2,-1
1000ceb4:	3084703a 	and	r2,r6,r2
1000ceb8:	1104b03a 	or	r2,r2,r4
1000cebc:	1812d0fa 	srli	r9,r3,3
1000cec0:	3823883a 	mov	r17,r7
1000cec4:	003f1406 	br	1000cb18 <__adddf3+0x308>
1000cec8:	180a977a 	slli	r5,r3,29
1000cecc:	01080034 	movhi	r4,8192
1000ced0:	213fffc4 	addi	r4,r4,-1
1000ced4:	3104703a 	and	r2,r6,r4
1000ced8:	2884b03a 	or	r2,r5,r2
1000cedc:	1812d0fa 	srli	r9,r3,3
1000cee0:	3823883a 	mov	r17,r7
1000cee4:	003f4106 	br	1000cbec <__adddf3+0x3dc>
1000cee8:	62e7c83a 	sub	r19,r12,r11
1000ceec:	48d3c83a 	sub	r9,r9,r3
1000cef0:	64c9803a 	cmpltu	r4,r12,r19
1000cef4:	4909c83a 	sub	r4,r9,r4
1000cef8:	04000044 	movi	r16,1
1000cefc:	003e7506 	br	1000c8d4 <__adddf3+0xc4>
1000cf00:	4b12b03a 	or	r9,r9,r12
1000cf04:	4826c03a 	cmpne	r19,r9,zero
1000cf08:	003f9b06 	br	1000cd78 <__adddf3+0x568>
1000cf0c:	4826977a 	slli	r19,r9,29
1000cf10:	00c80034 	movhi	r3,8192
1000cf14:	18ffffc4 	addi	r3,r3,-1
1000cf18:	20c4703a 	and	r2,r4,r3
1000cf1c:	9884b03a 	or	r2,r19,r2
1000cf20:	4812d0fa 	srli	r9,r9,3
1000cf24:	003f3106 	br	1000cbec <__adddf3+0x3dc>
1000cf28:	1101ffe0 	cmpeqi	r4,r2,2047
1000cf2c:	203f091e 	bne	r4,zero,1000cb54 <__adddf3+0x344>
1000cf30:	62d7883a 	add	r11,r12,r11
1000cf34:	5b09803a 	cmpltu	r4,r11,r12
1000cf38:	48d3883a 	add	r9,r9,r3
1000cf3c:	490b883a 	add	r5,r9,r4
1000cf40:	282697fa 	slli	r19,r5,31
1000cf44:	5816d07a 	srli	r11,r11,1
1000cf48:	2808d07a 	srli	r4,r5,1
1000cf4c:	1021883a 	mov	r16,r2
1000cf50:	9ae6b03a 	or	r19,r19,r11
1000cf54:	003ee806 	br	1000caf8 <__adddf3+0x2e8>
1000cf58:	5b27c83a 	sub	r19,r11,r12
1000cf5c:	1a53c83a 	sub	r9,r3,r9
1000cf60:	5cc9803a 	cmpltu	r4,r11,r19
1000cf64:	4925c83a 	sub	r18,r9,r4
1000cf68:	3823883a 	mov	r17,r7
1000cf6c:	003e5e06 	br	1000c8e8 <__adddf3+0xd8>
1000cf70:	28002d1e 	bne	r5,zero,1000d028 <__adddf3+0x818>
1000cf74:	103fd41e 	bne	r2,zero,1000cec8 <__adddf3+0x6b8>
1000cf78:	00bfffc4 	movi	r2,-1
1000cf7c:	0023883a 	mov	r17,zero
1000cf80:	4013883a 	mov	r9,r8
1000cf84:	003f1b06 	br	1000cbf4 <__adddf3+0x3e4>
1000cf88:	00880034 	movhi	r2,8192
1000cf8c:	1808977a 	slli	r4,r3,29
1000cf90:	10bfffc4 	addi	r2,r2,-1
1000cf94:	3084703a 	and	r2,r6,r2
1000cf98:	1104b03a 	or	r2,r2,r4
1000cf9c:	1812d0fa 	srli	r9,r3,3
1000cfa0:	003f1206 	br	1000cbec <__adddf3+0x3dc>
1000cfa4:	62e7c83a 	sub	r19,r12,r11
1000cfa8:	48cbc83a 	sub	r5,r9,r3
1000cfac:	64c9803a 	cmpltu	r4,r12,r19
1000cfb0:	2909c83a 	sub	r4,r5,r4
1000cfb4:	2080202c 	andhi	r2,r4,128
1000cfb8:	10003626 	beq	r2,zero,1000d094 <__adddf3+0x884>
1000cfbc:	5b27c83a 	sub	r19,r11,r12
1000cfc0:	1a53c83a 	sub	r9,r3,r9
1000cfc4:	5cc9803a 	cmpltu	r4,r11,r19
1000cfc8:	4909c83a 	sub	r4,r9,r4
1000cfcc:	3823883a 	mov	r17,r7
1000cfd0:	003e5e06 	br	1000c94c <__adddf3+0x13c>
1000cfd4:	4b12b03a 	or	r9,r9,r12
1000cfd8:	4826c03a 	cmpne	r19,r9,zero
1000cfdc:	003f5006 	br	1000cd20 <__adddf3+0x510>
1000cfe0:	4806977a 	slli	r3,r9,29
1000cfe4:	00880034 	movhi	r2,8192
1000cfe8:	10bfffc4 	addi	r2,r2,-1
1000cfec:	2084703a 	and	r2,r4,r2
1000cff0:	10c4b03a 	or	r2,r2,r3
1000cff4:	4812d0fa 	srli	r9,r9,3
1000cff8:	003efc06 	br	1000cbec <__adddf3+0x3dc>
1000cffc:	217ff804 	addi	r5,r4,-32
1000d000:	21800820 	cmpeqi	r6,r4,32
1000d004:	494ad83a 	srl	r5,r9,r5
1000d008:	3000041e 	bne	r6,zero,1000d01c <__adddf3+0x80c>
1000d00c:	01801004 	movi	r6,64
1000d010:	3109c83a 	sub	r4,r6,r4
1000d014:	4912983a 	sll	r9,r9,r4
1000d018:	6258b03a 	or	r12,r12,r9
1000d01c:	6026c03a 	cmpne	r19,r12,zero
1000d020:	9966b03a 	or	r19,r19,r5
1000d024:	003f5406 	br	1000cd78 <__adddf3+0x568>
1000d028:	480a977a 	slli	r5,r9,29
1000d02c:	4812d0fa 	srli	r9,r9,3
1000d030:	10003626 	beq	r2,zero,1000d10c <__adddf3+0x8fc>
1000d034:	02080034 	movhi	r8,8192
1000d038:	423fffc4 	addi	r8,r8,-1
1000d03c:	2204703a 	and	r2,r4,r8
1000d040:	4900022c 	andhi	r4,r9,8
1000d044:	114ab03a 	or	r5,r2,r5
1000d048:	20000826 	beq	r4,zero,1000d06c <__adddf3+0x85c>
1000d04c:	1808d0fa 	srli	r4,r3,3
1000d050:	2080022c 	andhi	r2,r4,8
1000d054:	1000051e 	bne	r2,zero,1000d06c <__adddf3+0x85c>
1000d058:	1806977a 	slli	r3,r3,29
1000d05c:	3204703a 	and	r2,r6,r8
1000d060:	3823883a 	mov	r17,r7
1000d064:	10cab03a 	or	r5,r2,r3
1000d068:	2013883a 	mov	r9,r4
1000d06c:	480890fa 	slli	r4,r9,3
1000d070:	2804d77a 	srli	r2,r5,29
1000d074:	00c80034 	movhi	r3,8192
1000d078:	18ffffc4 	addi	r3,r3,-1
1000d07c:	1108b03a 	or	r4,r2,r4
1000d080:	200c977a 	slli	r6,r4,29
1000d084:	28c4703a 	and	r2,r5,r3
1000d088:	2012d0fa 	srli	r9,r4,3
1000d08c:	3084b03a 	or	r2,r6,r2
1000d090:	003ed606 	br	1000cbec <__adddf3+0x3dc>
1000d094:	9904b03a 	or	r2,r19,r4
1000d098:	103e971e 	bne	r2,zero,1000caf8 <__adddf3+0x2e8>
1000d09c:	0013883a 	mov	r9,zero
1000d0a0:	0023883a 	mov	r17,zero
1000d0a4:	003e9c06 	br	1000cb18 <__adddf3+0x308>
1000d0a8:	5b27c83a 	sub	r19,r11,r12
1000d0ac:	1a53c83a 	sub	r9,r3,r9
1000d0b0:	5cc9803a 	cmpltu	r4,r11,r19
1000d0b4:	4909c83a 	sub	r4,r9,r4
1000d0b8:	3823883a 	mov	r17,r7
1000d0bc:	04000044 	movi	r16,1
1000d0c0:	003e0406 	br	1000c8d4 <__adddf3+0xc4>
1000d0c4:	180a977a 	slli	r5,r3,29
1000d0c8:	01080034 	movhi	r4,8192
1000d0cc:	213fffc4 	addi	r4,r4,-1
1000d0d0:	3104703a 	and	r2,r6,r4
1000d0d4:	2884b03a 	or	r2,r5,r2
1000d0d8:	1812d0fa 	srli	r9,r3,3
1000d0dc:	003e8e06 	br	1000cb18 <__adddf3+0x308>
1000d0e0:	62e7883a 	add	r19,r12,r11
1000d0e4:	48d3883a 	add	r9,r9,r3
1000d0e8:	9b09803a 	cmpltu	r4,r19,r12
1000d0ec:	4909883a 	add	r4,r9,r4
1000d0f0:	2080202c 	andhi	r2,r4,128
1000d0f4:	103e8026 	beq	r2,zero,1000caf8 <__adddf3+0x2e8>
1000d0f8:	00bfe034 	movhi	r2,65408
1000d0fc:	10bfffc4 	addi	r2,r2,-1
1000d100:	2088703a 	and	r4,r4,r2
1000d104:	04000044 	movi	r16,1
1000d108:	003e7b06 	br	1000caf8 <__adddf3+0x2e8>
1000d10c:	00880034 	movhi	r2,8192
1000d110:	10bfffc4 	addi	r2,r2,-1
1000d114:	2084703a 	and	r2,r4,r2
1000d118:	1144b03a 	or	r2,r2,r5
1000d11c:	003eb306 	br	1000cbec <__adddf3+0x3dc>
1000d120:	180e977a 	slli	r7,r3,29
1000d124:	01480034 	movhi	r5,8192
1000d128:	297fffc4 	addi	r5,r5,-1
1000d12c:	3144703a 	and	r2,r6,r5
1000d130:	3884b03a 	or	r2,r7,r2
1000d134:	1812d0fa 	srli	r9,r3,3
1000d138:	2021883a 	mov	r16,r4
1000d13c:	003e7406 	br	1000cb10 <__adddf3+0x300>
1000d140:	00880034 	movhi	r2,8192
1000d144:	1808977a 	slli	r4,r3,29
1000d148:	10bfffc4 	addi	r2,r2,-1
1000d14c:	3084703a 	and	r2,r6,r2
1000d150:	1104b03a 	or	r2,r2,r4
1000d154:	1812d0fa 	srli	r9,r3,3
1000d158:	3823883a 	mov	r17,r7
1000d15c:	003ea306 	br	1000cbec <__adddf3+0x3dc>
1000d160:	217ff804 	addi	r5,r4,-32
1000d164:	21800820 	cmpeqi	r6,r4,32
1000d168:	494ad83a 	srl	r5,r9,r5
1000d16c:	3000041e 	bne	r6,zero,1000d180 <__adddf3+0x970>
1000d170:	01801004 	movi	r6,64
1000d174:	3109c83a 	sub	r4,r6,r4
1000d178:	4912983a 	sll	r9,r9,r4
1000d17c:	6258b03a 	or	r12,r12,r9
1000d180:	6026c03a 	cmpne	r19,r12,zero
1000d184:	9966b03a 	or	r19,r19,r5
1000d188:	003ee506 	br	1000cd20 <__adddf3+0x510>
1000d18c:	62e7883a 	add	r19,r12,r11
1000d190:	48d3883a 	add	r9,r9,r3
1000d194:	9ac9803a 	cmpltu	r4,r19,r11
1000d198:	4909883a 	add	r4,r9,r4
1000d19c:	003e5306 	br	1000caec <__adddf3+0x2dc>
1000d1a0:	0005883a 	mov	r2,zero
1000d1a4:	0401ffc4 	movi	r16,2047
1000d1a8:	0009883a 	mov	r4,zero
1000d1ac:	003dfe06 	br	1000c9a8 <__adddf3+0x198>

1000d1b0 <__divdf3>:
1000d1b0:	defff104 	addi	sp,sp,-60
1000d1b4:	2804d53a 	srli	r2,r5,20
1000d1b8:	dd000915 	stw	r20,36(sp)
1000d1bc:	2828d7fa 	srli	r20,r5,31
1000d1c0:	dc000515 	stw	r16,20(sp)
1000d1c4:	04000434 	movhi	r16,16
1000d1c8:	ddc00c15 	stw	r23,48(sp)
1000d1cc:	dc800715 	stw	r18,28(sp)
1000d1d0:	843fffc4 	addi	r16,r16,-1
1000d1d4:	dfc00e15 	stw	ra,56(sp)
1000d1d8:	df000d15 	stw	fp,52(sp)
1000d1dc:	dd800b15 	stw	r22,44(sp)
1000d1e0:	dd400a15 	stw	r21,40(sp)
1000d1e4:	dcc00815 	stw	r19,32(sp)
1000d1e8:	dc400615 	stw	r17,24(sp)
1000d1ec:	1081ffcc 	andi	r2,r2,2047
1000d1f0:	2025883a 	mov	r18,r4
1000d1f4:	2c20703a 	and	r16,r5,r16
1000d1f8:	a02f883a 	mov	r23,r20
1000d1fc:	10008926 	beq	r2,zero,1000d424 <__divdf3+0x274>
1000d200:	10c1ffe0 	cmpeqi	r3,r2,2047
1000d204:	18009f1e 	bne	r3,zero,1000d484 <__divdf3+0x2d4>
1000d208:	800a90fa 	slli	r5,r16,3
1000d20c:	2008d77a 	srli	r4,r4,29
1000d210:	902490fa 	slli	r18,r18,3
1000d214:	157f0044 	addi	r21,r2,-1023
1000d218:	2148b03a 	or	r4,r4,r5
1000d21c:	25802034 	orhi	r22,r4,128
1000d220:	0023883a 	mov	r17,zero
1000d224:	0021883a 	mov	r16,zero
1000d228:	3806d53a 	srli	r3,r7,20
1000d22c:	01000434 	movhi	r4,16
1000d230:	213fffc4 	addi	r4,r4,-1
1000d234:	18c1ffcc 	andi	r3,r3,2047
1000d238:	3926703a 	and	r19,r7,r4
1000d23c:	380ed7fa 	srli	r7,r7,31
1000d240:	18006326 	beq	r3,zero,1000d3d0 <__divdf3+0x220>
1000d244:	1881ffe0 	cmpeqi	r2,r3,2047
1000d248:	1000201e 	bne	r2,zero,1000d2cc <__divdf3+0x11c>
1000d24c:	980890fa 	slli	r4,r19,3
1000d250:	300ad77a 	srli	r5,r6,29
1000d254:	301090fa 	slli	r8,r6,3
1000d258:	18ff0044 	addi	r3,r3,-1023
1000d25c:	2908b03a 	or	r4,r5,r4
1000d260:	a8ebc83a 	sub	r21,r21,r3
1000d264:	24c02034 	orhi	r19,r4,128
1000d268:	0007883a 	mov	r3,zero
1000d26c:	89800428 	cmpgeui	r6,r17,16
1000d270:	a1f8f03a 	xor	fp,r20,r7
1000d274:	3000ad1e 	bne	r6,zero,1000d52c <__divdf3+0x37c>
1000d278:	882290ba 	slli	r17,r17,2
1000d27c:	00840074 	movhi	r2,4097
1000d280:	8885883a 	add	r2,r17,r2
1000d284:	10b4a317 	ldw	r2,-11636(r2)
1000d288:	1000683a 	jmp	r2
1000d28c:	1000d52c 	andhi	zero,r2,852
1000d290:	1000d3c0 	call	11000d3c <_gp+0xfe4bb0>
1000d294:	1000d364 	muli	zero,r2,845
1000d298:	1000d2e8 	cmpgeui	zero,r2,843
1000d29c:	1000d364 	muli	zero,r2,845
1000d2a0:	1000d4e8 	cmpgeui	zero,r2,851
1000d2a4:	1000d364 	muli	zero,r2,845
1000d2a8:	1000d2e8 	cmpgeui	zero,r2,843
1000d2ac:	1000d3c0 	call	11000d3c <_gp+0xfe4bb0>
1000d2b0:	1000d3c0 	call	11000d3c <_gp+0xfe4bb0>
1000d2b4:	1000d4e8 	cmpgeui	zero,r2,851
1000d2b8:	1000d2e8 	cmpgeui	zero,r2,843
1000d2bc:	1000d2f8 	rdprs	zero,r2,843
1000d2c0:	1000d2f8 	rdprs	zero,r2,843
1000d2c4:	1000d2f8 	rdprs	zero,r2,843
1000d2c8:	1000d500 	call	11000d50 <_gp+0xfe4bc4>
1000d2cc:	9990b03a 	or	r8,r19,r6
1000d2d0:	ad7e0044 	addi	r21,r21,-2047
1000d2d4:	4000801e 	bne	r8,zero,1000d4d8 <__divdf3+0x328>
1000d2d8:	8c400094 	ori	r17,r17,2
1000d2dc:	0027883a 	mov	r19,zero
1000d2e0:	00c00084 	movi	r3,2
1000d2e4:	003fe106 	br	1000d26c <__divdf3+0xbc>
1000d2e8:	382f883a 	mov	r23,r7
1000d2ec:	982d883a 	mov	r22,r19
1000d2f0:	4025883a 	mov	r18,r8
1000d2f4:	1821883a 	mov	r16,r3
1000d2f8:	808000a0 	cmpeqi	r2,r16,2
1000d2fc:	10017c1e 	bne	r2,zero,1000d8f0 <__divdf3+0x740>
1000d300:	808000e0 	cmpeqi	r2,r16,3
1000d304:	1001ca1e 	bne	r2,zero,1000da30 <__divdf3+0x880>
1000d308:	80800060 	cmpeqi	r2,r16,1
1000d30c:	1000141e 	bne	r2,zero,1000d360 <__divdf3+0x1b0>
1000d310:	ac00ffc4 	addi	r16,r21,1023
1000d314:	b839883a 	mov	fp,r23
1000d318:	0401580e 	bge	zero,r16,1000d87c <__divdf3+0x6cc>
1000d31c:	908001cc 	andi	r2,r18,7
1000d320:	1001921e 	bne	r2,zero,1000d96c <__divdf3+0x7bc>
1000d324:	900ad0fa 	srli	r5,r18,3
1000d328:	b080402c 	andhi	r2,r22,256
1000d32c:	10000426 	beq	r2,zero,1000d340 <__divdf3+0x190>
1000d330:	00bfc034 	movhi	r2,65280
1000d334:	10bfffc4 	addi	r2,r2,-1
1000d338:	b0ac703a 	and	r22,r22,r2
1000d33c:	ac010004 	addi	r16,r21,1024
1000d340:	8081ffc8 	cmpgei	r2,r16,2047
1000d344:	10001e1e 	bne	r2,zero,1000d3c0 <__divdf3+0x210>
1000d348:	b024977a 	slli	r18,r22,29
1000d34c:	b008927a 	slli	r4,r22,9
1000d350:	8081ffcc 	andi	r2,r16,2047
1000d354:	9164b03a 	or	r18,r18,r5
1000d358:	2008d33a 	srli	r4,r4,12
1000d35c:	00000406 	br	1000d370 <__divdf3+0x1c0>
1000d360:	b839883a 	mov	fp,r23
1000d364:	0005883a 	mov	r2,zero
1000d368:	0009883a 	mov	r4,zero
1000d36c:	0025883a 	mov	r18,zero
1000d370:	1004953a 	slli	r2,r2,20
1000d374:	00c00434 	movhi	r3,16
1000d378:	e03897fa 	slli	fp,fp,31
1000d37c:	18ffffc4 	addi	r3,r3,-1
1000d380:	20c6703a 	and	r3,r4,r3
1000d384:	1886b03a 	or	r3,r3,r2
1000d388:	1f06b03a 	or	r3,r3,fp
1000d38c:	9005883a 	mov	r2,r18
1000d390:	dfc00e17 	ldw	ra,56(sp)
1000d394:	df000d17 	ldw	fp,52(sp)
1000d398:	ddc00c17 	ldw	r23,48(sp)
1000d39c:	dd800b17 	ldw	r22,44(sp)
1000d3a0:	dd400a17 	ldw	r21,40(sp)
1000d3a4:	dd000917 	ldw	r20,36(sp)
1000d3a8:	dcc00817 	ldw	r19,32(sp)
1000d3ac:	dc800717 	ldw	r18,28(sp)
1000d3b0:	dc400617 	ldw	r17,24(sp)
1000d3b4:	dc000517 	ldw	r16,20(sp)
1000d3b8:	dec00f04 	addi	sp,sp,60
1000d3bc:	f800283a 	ret
1000d3c0:	0081ffc4 	movi	r2,2047
1000d3c4:	0009883a 	mov	r4,zero
1000d3c8:	0025883a 	mov	r18,zero
1000d3cc:	003fe806 	br	1000d370 <__divdf3+0x1c0>
1000d3d0:	9990b03a 	or	r8,r19,r6
1000d3d4:	40003c26 	beq	r8,zero,1000d4c8 <__divdf3+0x318>
1000d3d8:	98011826 	beq	r19,zero,1000d83c <__divdf3+0x68c>
1000d3dc:	9809883a 	mov	r4,r19
1000d3e0:	d9800115 	stw	r6,4(sp)
1000d3e4:	d9c00015 	stw	r7,0(sp)
1000d3e8:	000eee80 	call	1000eee8 <__clzsi2>
1000d3ec:	d9c00017 	ldw	r7,0(sp)
1000d3f0:	d9800117 	ldw	r6,4(sp)
1000d3f4:	117ffd44 	addi	r5,r2,-11
1000d3f8:	00c00744 	movi	r3,29
1000d3fc:	123ffe04 	addi	r8,r2,-8
1000d400:	1947c83a 	sub	r3,r3,r5
1000d404:	9a08983a 	sll	r4,r19,r8
1000d408:	30c6d83a 	srl	r3,r6,r3
1000d40c:	3210983a 	sll	r8,r6,r8
1000d410:	1926b03a 	or	r19,r3,r4
1000d414:	1545883a 	add	r2,r2,r21
1000d418:	1540fcc4 	addi	r21,r2,1011
1000d41c:	0007883a 	mov	r3,zero
1000d420:	003f9206 	br	1000d26c <__divdf3+0xbc>
1000d424:	242cb03a 	or	r22,r4,r16
1000d428:	2023883a 	mov	r17,r4
1000d42c:	b0002126 	beq	r22,zero,1000d4b4 <__divdf3+0x304>
1000d430:	d9c00115 	stw	r7,4(sp)
1000d434:	d9800015 	stw	r6,0(sp)
1000d438:	8000f526 	beq	r16,zero,1000d810 <__divdf3+0x660>
1000d43c:	8009883a 	mov	r4,r16
1000d440:	000eee80 	call	1000eee8 <__clzsi2>
1000d444:	d9800017 	ldw	r6,0(sp)
1000d448:	d9c00117 	ldw	r7,4(sp)
1000d44c:	102b883a 	mov	r21,r2
1000d450:	113ffd44 	addi	r4,r2,-11
1000d454:	05800744 	movi	r22,29
1000d458:	acbffe04 	addi	r18,r21,-8
1000d45c:	b12dc83a 	sub	r22,r22,r4
1000d460:	848a983a 	sll	r5,r16,r18
1000d464:	8d88d83a 	srl	r4,r17,r22
1000d468:	8ca4983a 	sll	r18,r17,r18
1000d46c:	216cb03a 	or	r22,r4,r5
1000d470:	00bf0344 	movi	r2,-1011
1000d474:	156bc83a 	sub	r21,r2,r21
1000d478:	0023883a 	mov	r17,zero
1000d47c:	0021883a 	mov	r16,zero
1000d480:	003f6906 	br	1000d228 <__divdf3+0x78>
1000d484:	242cb03a 	or	r22,r4,r16
1000d488:	b000051e 	bne	r22,zero,1000d4a0 <__divdf3+0x2f0>
1000d48c:	0025883a 	mov	r18,zero
1000d490:	04400204 	movi	r17,8
1000d494:	0541ffc4 	movi	r21,2047
1000d498:	04000084 	movi	r16,2
1000d49c:	003f6206 	br	1000d228 <__divdf3+0x78>
1000d4a0:	802d883a 	mov	r22,r16
1000d4a4:	04400304 	movi	r17,12
1000d4a8:	0541ffc4 	movi	r21,2047
1000d4ac:	040000c4 	movi	r16,3
1000d4b0:	003f5d06 	br	1000d228 <__divdf3+0x78>
1000d4b4:	0025883a 	mov	r18,zero
1000d4b8:	04400104 	movi	r17,4
1000d4bc:	002b883a 	mov	r21,zero
1000d4c0:	04000044 	movi	r16,1
1000d4c4:	003f5806 	br	1000d228 <__divdf3+0x78>
1000d4c8:	8c400054 	ori	r17,r17,1
1000d4cc:	0027883a 	mov	r19,zero
1000d4d0:	00c00044 	movi	r3,1
1000d4d4:	003f6506 	br	1000d26c <__divdf3+0xbc>
1000d4d8:	8c4000d4 	ori	r17,r17,3
1000d4dc:	3011883a 	mov	r8,r6
1000d4e0:	00c000c4 	movi	r3,3
1000d4e4:	003f6106 	br	1000d26c <__divdf3+0xbc>
1000d4e8:	01000434 	movhi	r4,16
1000d4ec:	0039883a 	mov	fp,zero
1000d4f0:	213fffc4 	addi	r4,r4,-1
1000d4f4:	04bfffc4 	movi	r18,-1
1000d4f8:	0081ffc4 	movi	r2,2047
1000d4fc:	003f9c06 	br	1000d370 <__divdf3+0x1c0>
1000d500:	b080022c 	andhi	r2,r22,8
1000d504:	1000a126 	beq	r2,zero,1000d78c <__divdf3+0x5dc>
1000d508:	9880022c 	andhi	r2,r19,8
1000d50c:	10009f1e 	bne	r2,zero,1000d78c <__divdf3+0x5dc>
1000d510:	00800434 	movhi	r2,16
1000d514:	99000234 	orhi	r4,r19,8
1000d518:	10bfffc4 	addi	r2,r2,-1
1000d51c:	2088703a 	and	r4,r4,r2
1000d520:	3839883a 	mov	fp,r7
1000d524:	4025883a 	mov	r18,r8
1000d528:	003ff306 	br	1000d4f8 <__divdf3+0x348>
1000d52c:	9d80b236 	bltu	r19,r22,1000d7f8 <__divdf3+0x648>
1000d530:	9d80b026 	beq	r19,r22,1000d7f4 <__divdf3+0x644>
1000d534:	ad7fffc4 	addi	r21,r21,-1
1000d538:	b007883a 	mov	r3,r22
1000d53c:	0021883a 	mov	r16,zero
1000d540:	400cd63a 	srli	r6,r8,24
1000d544:	9826923a 	slli	r19,r19,8
1000d548:	4004923a 	slli	r2,r8,8
1000d54c:	1809883a 	mov	r4,r3
1000d550:	34e2b03a 	or	r17,r6,r19
1000d554:	8828d43a 	srli	r20,r17,16
1000d558:	d8c00115 	stw	r3,4(sp)
1000d55c:	d8800015 	stw	r2,0(sp)
1000d560:	a00b883a 	mov	r5,r20
1000d564:	000c7500 	call	1000c750 <__udivsi3>
1000d568:	d8c00117 	ldw	r3,4(sp)
1000d56c:	a00b883a 	mov	r5,r20
1000d570:	102d883a 	mov	r22,r2
1000d574:	1809883a 	mov	r4,r3
1000d578:	000c7b40 	call	1000c7b4 <__umodsi3>
1000d57c:	1006943a 	slli	r3,r2,16
1000d580:	8dffffcc 	andi	r23,r17,65535
1000d584:	9004d43a 	srli	r2,r18,16
1000d588:	bda7383a 	mul	r19,r23,r22
1000d58c:	10c4b03a 	or	r2,r2,r3
1000d590:	14c0042e 	bgeu	r2,r19,1000d5a4 <__divdf3+0x3f4>
1000d594:	1445883a 	add	r2,r2,r17
1000d598:	b0ffffc4 	addi	r3,r22,-1
1000d59c:	1440e12e 	bgeu	r2,r17,1000d924 <__divdf3+0x774>
1000d5a0:	182d883a 	mov	r22,r3
1000d5a4:	14e7c83a 	sub	r19,r2,r19
1000d5a8:	a00b883a 	mov	r5,r20
1000d5ac:	9809883a 	mov	r4,r19
1000d5b0:	000c7500 	call	1000c750 <__udivsi3>
1000d5b4:	a00b883a 	mov	r5,r20
1000d5b8:	9809883a 	mov	r4,r19
1000d5bc:	d8800115 	stw	r2,4(sp)
1000d5c0:	000c7b40 	call	1000c7b4 <__umodsi3>
1000d5c4:	d8c00117 	ldw	r3,4(sp)
1000d5c8:	1004943a 	slli	r2,r2,16
1000d5cc:	94bfffcc 	andi	r18,r18,65535
1000d5d0:	b8cb383a 	mul	r5,r23,r3
1000d5d4:	9084b03a 	or	r2,r18,r2
1000d5d8:	1140042e 	bgeu	r2,r5,1000d5ec <__divdf3+0x43c>
1000d5dc:	1445883a 	add	r2,r2,r17
1000d5e0:	193fffc4 	addi	r4,r3,-1
1000d5e4:	1440cb2e 	bgeu	r2,r17,1000d914 <__divdf3+0x764>
1000d5e8:	2007883a 	mov	r3,r4
1000d5ec:	b008943a 	slli	r4,r22,16
1000d5f0:	d9800017 	ldw	r6,0(sp)
1000d5f4:	1145c83a 	sub	r2,r2,r5
1000d5f8:	20ecb03a 	or	r22,r4,r3
1000d5fc:	b0ffffcc 	andi	r3,r22,65535
1000d600:	300ed43a 	srli	r7,r6,16
1000d604:	323fffcc 	andi	r8,r6,65535
1000d608:	b026d43a 	srli	r19,r22,16
1000d60c:	40e5383a 	mul	r18,r8,r3
1000d610:	38c9383a 	mul	r4,r7,r3
1000d614:	9a13383a 	mul	r9,r19,r8
1000d618:	9006d43a 	srli	r3,r18,16
1000d61c:	2249883a 	add	r4,r4,r9
1000d620:	1907883a 	add	r3,r3,r4
1000d624:	99c9383a 	mul	r4,r19,r7
1000d628:	1a40022e 	bgeu	r3,r9,1000d634 <__divdf3+0x484>
1000d62c:	01400074 	movhi	r5,1
1000d630:	2149883a 	add	r4,r4,r5
1000d634:	1826d43a 	srli	r19,r3,16
1000d638:	1806943a 	slli	r3,r3,16
1000d63c:	94bfffcc 	andi	r18,r18,65535
1000d640:	9927883a 	add	r19,r19,r4
1000d644:	1ca5883a 	add	r18,r3,r18
1000d648:	14c05f36 	bltu	r2,r19,1000d7c8 <__divdf3+0x618>
1000d64c:	14c05d26 	beq	r2,r19,1000d7c4 <__divdf3+0x614>
1000d650:	84a5c83a 	sub	r18,r16,r18
1000d654:	14c5c83a 	sub	r2,r2,r19
1000d658:	84a7803a 	cmpltu	r19,r16,r18
1000d65c:	da000215 	stw	r8,8(sp)
1000d660:	d9c00115 	stw	r7,4(sp)
1000d664:	14e7c83a 	sub	r19,r2,r19
1000d668:	ac00ffc4 	addi	r16,r21,1023
1000d66c:	8cc0b626 	beq	r17,r19,1000d948 <__divdf3+0x798>
1000d670:	9809883a 	mov	r4,r19
1000d674:	a00b883a 	mov	r5,r20
1000d678:	000c7500 	call	1000c750 <__udivsi3>
1000d67c:	9809883a 	mov	r4,r19
1000d680:	a00b883a 	mov	r5,r20
1000d684:	d8800315 	stw	r2,12(sp)
1000d688:	000c7b40 	call	1000c7b4 <__umodsi3>
1000d68c:	d8c00317 	ldw	r3,12(sp)
1000d690:	1008943a 	slli	r4,r2,16
1000d694:	9004d43a 	srli	r2,r18,16
1000d698:	b8e7383a 	mul	r19,r23,r3
1000d69c:	d9c00117 	ldw	r7,4(sp)
1000d6a0:	1104b03a 	or	r2,r2,r4
1000d6a4:	da000217 	ldw	r8,8(sp)
1000d6a8:	14c0062e 	bgeu	r2,r19,1000d6c4 <__divdf3+0x514>
1000d6ac:	1445883a 	add	r2,r2,r17
1000d6b0:	193fffc4 	addi	r4,r3,-1
1000d6b4:	1440ab36 	bltu	r2,r17,1000d964 <__divdf3+0x7b4>
1000d6b8:	14c0aa2e 	bgeu	r2,r19,1000d964 <__divdf3+0x7b4>
1000d6bc:	18ffff84 	addi	r3,r3,-2
1000d6c0:	1445883a 	add	r2,r2,r17
1000d6c4:	14e7c83a 	sub	r19,r2,r19
1000d6c8:	a00b883a 	mov	r5,r20
1000d6cc:	9809883a 	mov	r4,r19
1000d6d0:	da000415 	stw	r8,16(sp)
1000d6d4:	d8c00315 	stw	r3,12(sp)
1000d6d8:	d9c00215 	stw	r7,8(sp)
1000d6dc:	000c7500 	call	1000c750 <__udivsi3>
1000d6e0:	a00b883a 	mov	r5,r20
1000d6e4:	9809883a 	mov	r4,r19
1000d6e8:	d8800115 	stw	r2,4(sp)
1000d6ec:	000c7b40 	call	1000c7b4 <__umodsi3>
1000d6f0:	da400117 	ldw	r9,4(sp)
1000d6f4:	1004943a 	slli	r2,r2,16
1000d6f8:	94bfffcc 	andi	r18,r18,65535
1000d6fc:	ba6f383a 	mul	r23,r23,r9
1000d700:	9084b03a 	or	r2,r18,r2
1000d704:	d9c00217 	ldw	r7,8(sp)
1000d708:	d8c00317 	ldw	r3,12(sp)
1000d70c:	da000417 	ldw	r8,16(sp)
1000d710:	15c0062e 	bgeu	r2,r23,1000d72c <__divdf3+0x57c>
1000d714:	1445883a 	add	r2,r2,r17
1000d718:	493fffc4 	addi	r4,r9,-1
1000d71c:	14408f36 	bltu	r2,r17,1000d95c <__divdf3+0x7ac>
1000d720:	15c08e2e 	bgeu	r2,r23,1000d95c <__divdf3+0x7ac>
1000d724:	4a7fff84 	addi	r9,r9,-2
1000d728:	1445883a 	add	r2,r2,r17
1000d72c:	180a943a 	slli	r5,r3,16
1000d730:	15c5c83a 	sub	r2,r2,r23
1000d734:	2a64b03a 	or	r18,r5,r9
1000d738:	9012d43a 	srli	r9,r18,16
1000d73c:	913fffcc 	andi	r4,r18,65535
1000d740:	220b383a 	mul	r5,r4,r8
1000d744:	3909383a 	mul	r4,r7,r4
1000d748:	4a11383a 	mul	r8,r9,r8
1000d74c:	2806d43a 	srli	r3,r5,16
1000d750:	3a4f383a 	mul	r7,r7,r9
1000d754:	2209883a 	add	r4,r4,r8
1000d758:	1907883a 	add	r3,r3,r4
1000d75c:	1a00022e 	bgeu	r3,r8,1000d768 <__divdf3+0x5b8>
1000d760:	01000074 	movhi	r4,1
1000d764:	390f883a 	add	r7,r7,r4
1000d768:	1808d43a 	srli	r4,r3,16
1000d76c:	1806943a 	slli	r3,r3,16
1000d770:	297fffcc 	andi	r5,r5,65535
1000d774:	21cf883a 	add	r7,r4,r7
1000d778:	1947883a 	add	r3,r3,r5
1000d77c:	11c00a36 	bltu	r2,r7,1000d7a8 <__divdf3+0x5f8>
1000d780:	11c00826 	beq	r2,r7,1000d7a4 <__divdf3+0x5f4>
1000d784:	94800054 	ori	r18,r18,1
1000d788:	003ee306 	br	1000d318 <__divdf3+0x168>
1000d78c:	00800434 	movhi	r2,16
1000d790:	b1000234 	orhi	r4,r22,8
1000d794:	10bfffc4 	addi	r2,r2,-1
1000d798:	2088703a 	and	r4,r4,r2
1000d79c:	a039883a 	mov	fp,r20
1000d7a0:	003f5506 	br	1000d4f8 <__divdf3+0x348>
1000d7a4:	183edc26 	beq	r3,zero,1000d318 <__divdf3+0x168>
1000d7a8:	8885883a 	add	r2,r17,r2
1000d7ac:	913fffc4 	addi	r4,r18,-1
1000d7b0:	14406036 	bltu	r2,r17,1000d934 <__divdf3+0x784>
1000d7b4:	11c07d36 	bltu	r2,r7,1000d9ac <__divdf3+0x7fc>
1000d7b8:	11c0a326 	beq	r2,r7,1000da48 <__divdf3+0x898>
1000d7bc:	2025883a 	mov	r18,r4
1000d7c0:	003ff006 	br	1000d784 <__divdf3+0x5d4>
1000d7c4:	84bfa22e 	bgeu	r16,r18,1000d650 <__divdf3+0x4a0>
1000d7c8:	d8c00017 	ldw	r3,0(sp)
1000d7cc:	80e1883a 	add	r16,r16,r3
1000d7d0:	80c7803a 	cmpltu	r3,r16,r3
1000d7d4:	1c47883a 	add	r3,r3,r17
1000d7d8:	10c5883a 	add	r2,r2,r3
1000d7dc:	b0ffffc4 	addi	r3,r22,-1
1000d7e0:	8880482e 	bgeu	r17,r2,1000d904 <__divdf3+0x754>
1000d7e4:	14c06a36 	bltu	r2,r19,1000d990 <__divdf3+0x7e0>
1000d7e8:	98806826 	beq	r19,r2,1000d98c <__divdf3+0x7dc>
1000d7ec:	182d883a 	mov	r22,r3
1000d7f0:	003f9706 	br	1000d650 <__divdf3+0x4a0>
1000d7f4:	923f4f36 	bltu	r18,r8,1000d534 <__divdf3+0x384>
1000d7f8:	b00a97fa 	slli	r5,r22,31
1000d7fc:	9004d07a 	srli	r2,r18,1
1000d800:	902097fa 	slli	r16,r18,31
1000d804:	b006d07a 	srli	r3,r22,1
1000d808:	28a4b03a 	or	r18,r5,r2
1000d80c:	003f4c06 	br	1000d540 <__divdf3+0x390>
1000d810:	000eee80 	call	1000eee8 <__clzsi2>
1000d814:	11000544 	addi	r4,r2,21
1000d818:	21400748 	cmpgei	r5,r4,29
1000d81c:	15400804 	addi	r21,r2,32
1000d820:	d9800017 	ldw	r6,0(sp)
1000d824:	d9c00117 	ldw	r7,4(sp)
1000d828:	283f0a26 	beq	r5,zero,1000d454 <__divdf3+0x2a4>
1000d82c:	113ffe04 	addi	r4,r2,-8
1000d830:	912c983a 	sll	r22,r18,r4
1000d834:	0025883a 	mov	r18,zero
1000d838:	003f0d06 	br	1000d470 <__divdf3+0x2c0>
1000d83c:	3009883a 	mov	r4,r6
1000d840:	d9c00115 	stw	r7,4(sp)
1000d844:	d9800015 	stw	r6,0(sp)
1000d848:	000eee80 	call	1000eee8 <__clzsi2>
1000d84c:	11400544 	addi	r5,r2,21
1000d850:	28c00748 	cmpgei	r3,r5,29
1000d854:	1009883a 	mov	r4,r2
1000d858:	d9800017 	ldw	r6,0(sp)
1000d85c:	10800804 	addi	r2,r2,32
1000d860:	d9c00117 	ldw	r7,4(sp)
1000d864:	183ee426 	beq	r3,zero,1000d3f8 <__divdf3+0x248>
1000d868:	213ffe04 	addi	r4,r4,-8
1000d86c:	3126983a 	sll	r19,r6,r4
1000d870:	0011883a 	mov	r8,zero
1000d874:	003ee706 	br	1000d414 <__divdf3+0x264>
1000d878:	04bfffc4 	movi	r18,-1
1000d87c:	01000044 	movi	r4,1
1000d880:	2409c83a 	sub	r4,r4,r16
1000d884:	20800e48 	cmpgei	r2,r4,57
1000d888:	103eb61e 	bne	r2,zero,1000d364 <__divdf3+0x1b4>
1000d88c:	20800808 	cmpgei	r2,r4,32
1000d890:	10004e1e 	bne	r2,zero,1000d9cc <__divdf3+0x81c>
1000d894:	a8810784 	addi	r2,r21,1054
1000d898:	b086983a 	sll	r3,r22,r2
1000d89c:	910ad83a 	srl	r5,r18,r4
1000d8a0:	9084983a 	sll	r2,r18,r2
1000d8a4:	b108d83a 	srl	r4,r22,r4
1000d8a8:	1964b03a 	or	r18,r3,r5
1000d8ac:	1004c03a 	cmpne	r2,r2,zero
1000d8b0:	90a4b03a 	or	r18,r18,r2
1000d8b4:	908001cc 	andi	r2,r18,7
1000d8b8:	10000726 	beq	r2,zero,1000d8d8 <__divdf3+0x728>
1000d8bc:	908003cc 	andi	r2,r18,15
1000d8c0:	10800120 	cmpeqi	r2,r2,4
1000d8c4:	1000041e 	bne	r2,zero,1000d8d8 <__divdf3+0x728>
1000d8c8:	90800104 	addi	r2,r18,4
1000d8cc:	14a5803a 	cmpltu	r18,r2,r18
1000d8d0:	2489883a 	add	r4,r4,r18
1000d8d4:	1025883a 	mov	r18,r2
1000d8d8:	2080202c 	andhi	r2,r4,128
1000d8dc:	10005026 	beq	r2,zero,1000da20 <__divdf3+0x870>
1000d8e0:	00800044 	movi	r2,1
1000d8e4:	0009883a 	mov	r4,zero
1000d8e8:	0025883a 	mov	r18,zero
1000d8ec:	003ea006 	br	1000d370 <__divdf3+0x1c0>
1000d8f0:	b839883a 	mov	fp,r23
1000d8f4:	0081ffc4 	movi	r2,2047
1000d8f8:	0009883a 	mov	r4,zero
1000d8fc:	0025883a 	mov	r18,zero
1000d900:	003e9b06 	br	1000d370 <__divdf3+0x1c0>
1000d904:	88bfb91e 	bne	r17,r2,1000d7ec <__divdf3+0x63c>
1000d908:	d9000017 	ldw	r4,0(sp)
1000d90c:	813fb736 	bltu	r16,r4,1000d7ec <__divdf3+0x63c>
1000d910:	003fb406 	br	1000d7e4 <__divdf3+0x634>
1000d914:	117f342e 	bgeu	r2,r5,1000d5e8 <__divdf3+0x438>
1000d918:	18ffff84 	addi	r3,r3,-2
1000d91c:	1445883a 	add	r2,r2,r17
1000d920:	003f3206 	br	1000d5ec <__divdf3+0x43c>
1000d924:	14ff1e2e 	bgeu	r2,r19,1000d5a0 <__divdf3+0x3f0>
1000d928:	b5bfff84 	addi	r22,r22,-2
1000d92c:	1445883a 	add	r2,r2,r17
1000d930:	003f1c06 	br	1000d5a4 <__divdf3+0x3f4>
1000d934:	2025883a 	mov	r18,r4
1000d938:	11ff921e 	bne	r2,r7,1000d784 <__divdf3+0x5d4>
1000d93c:	d8800017 	ldw	r2,0(sp)
1000d940:	10ff901e 	bne	r2,r3,1000d784 <__divdf3+0x5d4>
1000d944:	003e7406 	br	1000d318 <__divdf3+0x168>
1000d948:	043fcb0e 	bge	zero,r16,1000d878 <__divdf3+0x6c8>
1000d94c:	000b883a 	mov	r5,zero
1000d950:	04800044 	movi	r18,1
1000d954:	b4ad883a 	add	r22,r22,r18
1000d958:	003e7306 	br	1000d328 <__divdf3+0x178>
1000d95c:	2013883a 	mov	r9,r4
1000d960:	003f7206 	br	1000d72c <__divdf3+0x57c>
1000d964:	2007883a 	mov	r3,r4
1000d968:	003f5606 	br	1000d6c4 <__divdf3+0x514>
1000d96c:	908003cc 	andi	r2,r18,15
1000d970:	10800118 	cmpnei	r2,r2,4
1000d974:	103e6b26 	beq	r2,zero,1000d324 <__divdf3+0x174>
1000d978:	91400104 	addi	r5,r18,4
1000d97c:	00bffec4 	movi	r2,-5
1000d980:	14a5803a 	cmpltu	r18,r2,r18
1000d984:	280ad0fa 	srli	r5,r5,3
1000d988:	003ff206 	br	1000d954 <__divdf3+0x7a4>
1000d98c:	84bf972e 	bgeu	r16,r18,1000d7ec <__divdf3+0x63c>
1000d990:	d8c00017 	ldw	r3,0(sp)
1000d994:	b5bfff84 	addi	r22,r22,-2
1000d998:	80e1883a 	add	r16,r16,r3
1000d99c:	80c7803a 	cmpltu	r3,r16,r3
1000d9a0:	1c47883a 	add	r3,r3,r17
1000d9a4:	10c5883a 	add	r2,r2,r3
1000d9a8:	003f2906 	br	1000d650 <__divdf3+0x4a0>
1000d9ac:	d9400017 	ldw	r5,0(sp)
1000d9b0:	94bfff84 	addi	r18,r18,-2
1000d9b4:	2949883a 	add	r4,r5,r5
1000d9b8:	214b803a 	cmpltu	r5,r4,r5
1000d9bc:	2c4d883a 	add	r6,r5,r17
1000d9c0:	1185883a 	add	r2,r2,r6
1000d9c4:	d9000015 	stw	r4,0(sp)
1000d9c8:	003fdb06 	br	1000d938 <__divdf3+0x788>
1000d9cc:	00bff844 	movi	r2,-31
1000d9d0:	1421c83a 	sub	r16,r2,r16
1000d9d4:	21000820 	cmpeqi	r4,r4,32
1000d9d8:	b420d83a 	srl	r16,r22,r16
1000d9dc:	2000031e 	bne	r4,zero,1000d9ec <__divdf3+0x83c>
1000d9e0:	a8810f84 	addi	r2,r21,1086
1000d9e4:	b088983a 	sll	r4,r22,r2
1000d9e8:	9124b03a 	or	r18,r18,r4
1000d9ec:	9024c03a 	cmpne	r18,r18,zero
1000d9f0:	9424b03a 	or	r18,r18,r16
1000d9f4:	914001cc 	andi	r5,r18,7
1000d9f8:	2800051e 	bne	r5,zero,1000da10 <__divdf3+0x860>
1000d9fc:	0009883a 	mov	r4,zero
1000da00:	9024d0fa 	srli	r18,r18,3
1000da04:	0005883a 	mov	r2,zero
1000da08:	9164b03a 	or	r18,r18,r5
1000da0c:	003e5806 	br	1000d370 <__divdf3+0x1c0>
1000da10:	908003cc 	andi	r2,r18,15
1000da14:	10800118 	cmpnei	r2,r2,4
1000da18:	0009883a 	mov	r4,zero
1000da1c:	103faa1e 	bne	r2,zero,1000d8c8 <__divdf3+0x718>
1000da20:	2004927a 	slli	r2,r4,9
1000da24:	200a977a 	slli	r5,r4,29
1000da28:	1008d33a 	srli	r4,r2,12
1000da2c:	003ff406 	br	1000da00 <__divdf3+0x850>
1000da30:	00800434 	movhi	r2,16
1000da34:	b1000234 	orhi	r4,r22,8
1000da38:	10bfffc4 	addi	r2,r2,-1
1000da3c:	2088703a 	and	r4,r4,r2
1000da40:	b839883a 	mov	fp,r23
1000da44:	003eac06 	br	1000d4f8 <__divdf3+0x348>
1000da48:	d9400017 	ldw	r5,0(sp)
1000da4c:	28ffd736 	bltu	r5,r3,1000d9ac <__divdf3+0x7fc>
1000da50:	2025883a 	mov	r18,r4
1000da54:	003fb906 	br	1000d93c <__divdf3+0x78c>

1000da58 <__eqdf2>:
1000da58:	2810d53a 	srli	r8,r5,20
1000da5c:	3806d53a 	srli	r3,r7,20
1000da60:	00800434 	movhi	r2,16
1000da64:	4201ffcc 	andi	r8,r8,2047
1000da68:	10bfffc4 	addi	r2,r2,-1
1000da6c:	4281ffd8 	cmpnei	r10,r8,2047
1000da70:	2892703a 	and	r9,r5,r2
1000da74:	18c1ffcc 	andi	r3,r3,2047
1000da78:	3884703a 	and	r2,r7,r2
1000da7c:	280ad7fa 	srli	r5,r5,31
1000da80:	380ed7fa 	srli	r7,r7,31
1000da84:	50000626 	beq	r10,zero,1000daa0 <__eqdf2+0x48>
1000da88:	1a81ffe0 	cmpeqi	r10,r3,2047
1000da8c:	5000021e 	bne	r10,zero,1000da98 <__eqdf2+0x40>
1000da90:	40c0011e 	bne	r8,r3,1000da98 <__eqdf2+0x40>
1000da94:	48800826 	beq	r9,r2,1000dab8 <__eqdf2+0x60>
1000da98:	00800044 	movi	r2,1
1000da9c:	f800283a 	ret
1000daa0:	4914b03a 	or	r10,r9,r4
1000daa4:	503ffc1e 	bne	r10,zero,1000da98 <__eqdf2+0x40>
1000daa8:	18c1ffd8 	cmpnei	r3,r3,2047
1000daac:	183ffa1e 	bne	r3,zero,1000da98 <__eqdf2+0x40>
1000dab0:	1184b03a 	or	r2,r2,r6
1000dab4:	103ff81e 	bne	r2,zero,1000da98 <__eqdf2+0x40>
1000dab8:	21bff71e 	bne	r4,r6,1000da98 <__eqdf2+0x40>
1000dabc:	29c00426 	beq	r5,r7,1000dad0 <__eqdf2+0x78>
1000dac0:	403ff51e 	bne	r8,zero,1000da98 <__eqdf2+0x40>
1000dac4:	4904b03a 	or	r2,r9,r4
1000dac8:	1004c03a 	cmpne	r2,r2,zero
1000dacc:	f800283a 	ret
1000dad0:	0005883a 	mov	r2,zero
1000dad4:	f800283a 	ret

1000dad8 <__gedf2>:
1000dad8:	2810d53a 	srli	r8,r5,20
1000dadc:	3812d53a 	srli	r9,r7,20
1000dae0:	00800434 	movhi	r2,16
1000dae4:	4201ffcc 	andi	r8,r8,2047
1000dae8:	10bfffc4 	addi	r2,r2,-1
1000daec:	4281ffd8 	cmpnei	r10,r8,2047
1000daf0:	2896703a 	and	r11,r5,r2
1000daf4:	3886703a 	and	r3,r7,r2
1000daf8:	280ad7fa 	srli	r5,r5,31
1000dafc:	4a41ffcc 	andi	r9,r9,2047
1000db00:	3804d7fa 	srli	r2,r7,31
1000db04:	50000b26 	beq	r10,zero,1000db34 <__gedf2+0x5c>
1000db08:	49c1ffd8 	cmpnei	r7,r9,2047
1000db0c:	38000d26 	beq	r7,zero,1000db44 <__gedf2+0x6c>
1000db10:	4000191e 	bne	r8,zero,1000db78 <__gedf2+0xa0>
1000db14:	5914b03a 	or	r10,r11,r4
1000db18:	500f003a 	cmpeq	r7,r10,zero
1000db1c:	4800131e 	bne	r9,zero,1000db6c <__gedf2+0x94>
1000db20:	1998b03a 	or	r12,r3,r6
1000db24:	6000111e 	bne	r12,zero,1000db6c <__gedf2+0x94>
1000db28:	50000a1e 	bne	r10,zero,1000db54 <__gedf2+0x7c>
1000db2c:	0005883a 	mov	r2,zero
1000db30:	f800283a 	ret
1000db34:	590eb03a 	or	r7,r11,r4
1000db38:	38001e1e 	bne	r7,zero,1000dbb4 <__gedf2+0xdc>
1000db3c:	49c1ffe0 	cmpeqi	r7,r9,2047
1000db40:	38000d26 	beq	r7,zero,1000db78 <__gedf2+0xa0>
1000db44:	198eb03a 	or	r7,r3,r6
1000db48:	38001a1e 	bne	r7,zero,1000dbb4 <__gedf2+0xdc>
1000db4c:	40000526 	beq	r8,zero,1000db64 <__gedf2+0x8c>
1000db50:	28800d26 	beq	r5,r2,1000db88 <__gedf2+0xb0>
1000db54:	00800044 	movi	r2,1
1000db58:	28000626 	beq	r5,zero,1000db74 <__gedf2+0x9c>
1000db5c:	00bfffc4 	movi	r2,-1
1000db60:	f800283a 	ret
1000db64:	590eb03a 	or	r7,r11,r4
1000db68:	380f003a 	cmpeq	r7,r7,zero
1000db6c:	383ff826 	beq	r7,zero,1000db50 <__gedf2+0x78>
1000db70:	103ffa26 	beq	r2,zero,1000db5c <__gedf2+0x84>
1000db74:	f800283a 	ret
1000db78:	483ff51e 	bne	r9,zero,1000db50 <__gedf2+0x78>
1000db7c:	198eb03a 	or	r7,r3,r6
1000db80:	383ff31e 	bne	r7,zero,1000db50 <__gedf2+0x78>
1000db84:	003ff306 	br	1000db54 <__gedf2+0x7c>
1000db88:	4a000716 	blt	r9,r8,1000dba8 <__gedf2+0xd0>
1000db8c:	427ff816 	blt	r8,r9,1000db70 <__gedf2+0x98>
1000db90:	1afff036 	bltu	r3,r11,1000db54 <__gedf2+0x7c>
1000db94:	58c00926 	beq	r11,r3,1000dbbc <__gedf2+0xe4>
1000db98:	58ffe42e 	bgeu	r11,r3,1000db2c <__gedf2+0x54>
1000db9c:	283fef26 	beq	r5,zero,1000db5c <__gedf2+0x84>
1000dba0:	2805883a 	mov	r2,r5
1000dba4:	f800283a 	ret
1000dba8:	103fec1e 	bne	r2,zero,1000db5c <__gedf2+0x84>
1000dbac:	00800044 	movi	r2,1
1000dbb0:	f800283a 	ret
1000dbb4:	00bfff84 	movi	r2,-2
1000dbb8:	f800283a 	ret
1000dbbc:	313fe536 	bltu	r6,r4,1000db54 <__gedf2+0x7c>
1000dbc0:	21bfda2e 	bgeu	r4,r6,1000db2c <__gedf2+0x54>
1000dbc4:	003ff506 	br	1000db9c <__gedf2+0xc4>

1000dbc8 <__ledf2>:
1000dbc8:	2810d53a 	srli	r8,r5,20
1000dbcc:	3812d53a 	srli	r9,r7,20
1000dbd0:	00800434 	movhi	r2,16
1000dbd4:	4201ffcc 	andi	r8,r8,2047
1000dbd8:	10bfffc4 	addi	r2,r2,-1
1000dbdc:	4281ffd8 	cmpnei	r10,r8,2047
1000dbe0:	2896703a 	and	r11,r5,r2
1000dbe4:	3886703a 	and	r3,r7,r2
1000dbe8:	280ad7fa 	srli	r5,r5,31
1000dbec:	4a41ffcc 	andi	r9,r9,2047
1000dbf0:	3804d7fa 	srli	r2,r7,31
1000dbf4:	50000b26 	beq	r10,zero,1000dc24 <__ledf2+0x5c>
1000dbf8:	49c1ffd8 	cmpnei	r7,r9,2047
1000dbfc:	38000d26 	beq	r7,zero,1000dc34 <__ledf2+0x6c>
1000dc00:	40001b1e 	bne	r8,zero,1000dc70 <__ledf2+0xa8>
1000dc04:	5914b03a 	or	r10,r11,r4
1000dc08:	500f003a 	cmpeq	r7,r10,zero
1000dc0c:	48000e1e 	bne	r9,zero,1000dc48 <__ledf2+0x80>
1000dc10:	1998b03a 	or	r12,r3,r6
1000dc14:	60000c1e 	bne	r12,zero,1000dc48 <__ledf2+0x80>
1000dc18:	50000d1e 	bne	r10,zero,1000dc50 <__ledf2+0x88>
1000dc1c:	0005883a 	mov	r2,zero
1000dc20:	f800283a 	ret
1000dc24:	590eb03a 	or	r7,r11,r4
1000dc28:	38000d1e 	bne	r7,zero,1000dc60 <__ledf2+0x98>
1000dc2c:	49c1ffe0 	cmpeqi	r7,r9,2047
1000dc30:	38000f26 	beq	r7,zero,1000dc70 <__ledf2+0xa8>
1000dc34:	198eb03a 	or	r7,r3,r6
1000dc38:	3800091e 	bne	r7,zero,1000dc60 <__ledf2+0x98>
1000dc3c:	4000031e 	bne	r8,zero,1000dc4c <__ledf2+0x84>
1000dc40:	590eb03a 	or	r7,r11,r4
1000dc44:	380f003a 	cmpeq	r7,r7,zero
1000dc48:	3800071e 	bne	r7,zero,1000dc68 <__ledf2+0xa0>
1000dc4c:	28800c26 	beq	r5,r2,1000dc80 <__ledf2+0xb8>
1000dc50:	00800044 	movi	r2,1
1000dc54:	28000526 	beq	r5,zero,1000dc6c <__ledf2+0xa4>
1000dc58:	00bfffc4 	movi	r2,-1
1000dc5c:	f800283a 	ret
1000dc60:	00800084 	movi	r2,2
1000dc64:	f800283a 	ret
1000dc68:	103ffb26 	beq	r2,zero,1000dc58 <__ledf2+0x90>
1000dc6c:	f800283a 	ret
1000dc70:	483ff61e 	bne	r9,zero,1000dc4c <__ledf2+0x84>
1000dc74:	198eb03a 	or	r7,r3,r6
1000dc78:	383ff41e 	bne	r7,zero,1000dc4c <__ledf2+0x84>
1000dc7c:	003ff406 	br	1000dc50 <__ledf2+0x88>
1000dc80:	4a00030e 	bge	r9,r8,1000dc90 <__ledf2+0xc8>
1000dc84:	103ff41e 	bne	r2,zero,1000dc58 <__ledf2+0x90>
1000dc88:	00800044 	movi	r2,1
1000dc8c:	f800283a 	ret
1000dc90:	427ff516 	blt	r8,r9,1000dc68 <__ledf2+0xa0>
1000dc94:	1affee36 	bltu	r3,r11,1000dc50 <__ledf2+0x88>
1000dc98:	58c00426 	beq	r11,r3,1000dcac <__ledf2+0xe4>
1000dc9c:	58ffdf2e 	bgeu	r11,r3,1000dc1c <__ledf2+0x54>
1000dca0:	283fed26 	beq	r5,zero,1000dc58 <__ledf2+0x90>
1000dca4:	2805883a 	mov	r2,r5
1000dca8:	f800283a 	ret
1000dcac:	313fe836 	bltu	r6,r4,1000dc50 <__ledf2+0x88>
1000dcb0:	21bfda2e 	bgeu	r4,r6,1000dc1c <__ledf2+0x54>
1000dcb4:	003ffa06 	br	1000dca0 <__ledf2+0xd8>

1000dcb8 <__muldf3>:
1000dcb8:	2806d53a 	srli	r3,r5,20
1000dcbc:	defff504 	addi	sp,sp,-44
1000dcc0:	dc000215 	stw	r16,8(sp)
1000dcc4:	04000434 	movhi	r16,16
1000dcc8:	dd000615 	stw	r20,24(sp)
1000dccc:	dc800415 	stw	r18,16(sp)
1000dcd0:	843fffc4 	addi	r16,r16,-1
1000dcd4:	dfc00a15 	stw	ra,40(sp)
1000dcd8:	ddc00915 	stw	r23,36(sp)
1000dcdc:	dd800815 	stw	r22,32(sp)
1000dce0:	dd400715 	stw	r21,28(sp)
1000dce4:	dcc00515 	stw	r19,20(sp)
1000dce8:	dc400315 	stw	r17,12(sp)
1000dcec:	18c1ffcc 	andi	r3,r3,2047
1000dcf0:	2025883a 	mov	r18,r4
1000dcf4:	2c20703a 	and	r16,r5,r16
1000dcf8:	2828d7fa 	srli	r20,r5,31
1000dcfc:	18005c26 	beq	r3,zero,1000de70 <__muldf3+0x1b8>
1000dd00:	1881ffe0 	cmpeqi	r2,r3,2047
1000dd04:	1000711e 	bne	r2,zero,1000decc <__muldf3+0x214>
1000dd08:	800490fa 	slli	r2,r16,3
1000dd0c:	2020d77a 	srli	r16,r4,29
1000dd10:	202290fa 	slli	r17,r4,3
1000dd14:	1cff0044 	addi	r19,r3,-1023
1000dd18:	80a0b03a 	or	r16,r16,r2
1000dd1c:	84002034 	orhi	r16,r16,128
1000dd20:	002d883a 	mov	r22,zero
1000dd24:	002f883a 	mov	r23,zero
1000dd28:	3806d53a 	srli	r3,r7,20
1000dd2c:	01000434 	movhi	r4,16
1000dd30:	213fffc4 	addi	r4,r4,-1
1000dd34:	18c1ffcc 	andi	r3,r3,2047
1000dd38:	3924703a 	and	r18,r7,r4
1000dd3c:	382ad7fa 	srli	r21,r7,31
1000dd40:	18006926 	beq	r3,zero,1000dee8 <__muldf3+0x230>
1000dd44:	1881ffe0 	cmpeqi	r2,r3,2047
1000dd48:	1000211e 	bne	r2,zero,1000ddd0 <__muldf3+0x118>
1000dd4c:	900890fa 	slli	r4,r18,3
1000dd50:	300ad77a 	srli	r5,r6,29
1000dd54:	301090fa 	slli	r8,r6,3
1000dd58:	18ff0044 	addi	r3,r3,-1023
1000dd5c:	2908b03a 	or	r4,r5,r4
1000dd60:	98e7883a 	add	r19,r19,r3
1000dd64:	24802034 	orhi	r18,r4,128
1000dd68:	0007883a 	mov	r3,zero
1000dd6c:	b1000428 	cmpgeui	r4,r22,16
1000dd70:	a54cf03a 	xor	r6,r20,r21
1000dd74:	99400044 	addi	r5,r19,1
1000dd78:	2000981e 	bne	r4,zero,1000dfdc <__muldf3+0x324>
1000dd7c:	b00890ba 	slli	r4,r22,2
1000dd80:	00840074 	movhi	r2,4097
1000dd84:	2085883a 	add	r2,r4,r2
1000dd88:	10b76417 	ldw	r2,-8816(r2)
1000dd8c:	1000683a 	jmp	r2
1000dd90:	1000dfdc 	xori	zero,r2,895
1000dd94:	1000ddf0 	cmpltui	zero,r2,887
1000dd98:	1000ddf0 	cmpltui	zero,r2,887
1000dd9c:	1000ddec 	andhi	zero,r2,887
1000dda0:	1000ddfc 	xorhi	zero,r2,887
1000dda4:	1000ddfc 	xorhi	zero,r2,887
1000dda8:	1000df98 	cmpnei	zero,r2,894
1000ddac:	1000ddec 	andhi	zero,r2,887
1000ddb0:	1000ddfc 	xorhi	zero,r2,887
1000ddb4:	1000df98 	cmpnei	zero,r2,894
1000ddb8:	1000ddfc 	xorhi	zero,r2,887
1000ddbc:	1000ddec 	andhi	zero,r2,887
1000ddc0:	1000df90 	cmplti	zero,r2,894
1000ddc4:	1000df90 	cmplti	zero,r2,894
1000ddc8:	1000df90 	cmplti	zero,r2,894
1000ddcc:	1000dfb0 	cmpltui	zero,r2,894
1000ddd0:	3490b03a 	or	r8,r6,r18
1000ddd4:	9cc1ffc4 	addi	r19,r19,2047
1000ddd8:	4000691e 	bne	r8,zero,1000df80 <__muldf3+0x2c8>
1000dddc:	b5800094 	ori	r22,r22,2
1000dde0:	0025883a 	mov	r18,zero
1000dde4:	00c00084 	movi	r3,2
1000dde8:	003fe006 	br	1000dd6c <__muldf3+0xb4>
1000ddec:	a80d883a 	mov	r6,r21
1000ddf0:	9021883a 	mov	r16,r18
1000ddf4:	4023883a 	mov	r17,r8
1000ddf8:	182f883a 	mov	r23,r3
1000ddfc:	b88000a0 	cmpeqi	r2,r23,2
1000de00:	10004d1e 	bne	r2,zero,1000df38 <__muldf3+0x280>
1000de04:	b88000e0 	cmpeqi	r2,r23,3
1000de08:	1001491e 	bne	r2,zero,1000e330 <__muldf3+0x678>
1000de0c:	b8800060 	cmpeqi	r2,r23,1
1000de10:	1000d826 	beq	r2,zero,1000e174 <__muldf3+0x4bc>
1000de14:	0007883a 	mov	r3,zero
1000de18:	0021883a 	mov	r16,zero
1000de1c:	0023883a 	mov	r17,zero
1000de20:	30803fcc 	andi	r2,r6,255
1000de24:	01000434 	movhi	r4,16
1000de28:	1806953a 	slli	r3,r3,20
1000de2c:	213fffc4 	addi	r4,r4,-1
1000de30:	100497fa 	slli	r2,r2,31
1000de34:	8120703a 	and	r16,r16,r4
1000de38:	80c6b03a 	or	r3,r16,r3
1000de3c:	1886b03a 	or	r3,r3,r2
1000de40:	8805883a 	mov	r2,r17
1000de44:	dfc00a17 	ldw	ra,40(sp)
1000de48:	ddc00917 	ldw	r23,36(sp)
1000de4c:	dd800817 	ldw	r22,32(sp)
1000de50:	dd400717 	ldw	r21,28(sp)
1000de54:	dd000617 	ldw	r20,24(sp)
1000de58:	dcc00517 	ldw	r19,20(sp)
1000de5c:	dc800417 	ldw	r18,16(sp)
1000de60:	dc400317 	ldw	r17,12(sp)
1000de64:	dc000217 	ldw	r16,8(sp)
1000de68:	dec00b04 	addi	sp,sp,44
1000de6c:	f800283a 	ret
1000de70:	8122b03a 	or	r17,r16,r4
1000de74:	88003d26 	beq	r17,zero,1000df6c <__muldf3+0x2b4>
1000de78:	d9c00115 	stw	r7,4(sp)
1000de7c:	d9800015 	stw	r6,0(sp)
1000de80:	8000e826 	beq	r16,zero,1000e224 <__muldf3+0x56c>
1000de84:	8009883a 	mov	r4,r16
1000de88:	000eee80 	call	1000eee8 <__clzsi2>
1000de8c:	d9800017 	ldw	r6,0(sp)
1000de90:	d9c00117 	ldw	r7,4(sp)
1000de94:	1007883a 	mov	r3,r2
1000de98:	117ffd44 	addi	r5,r2,-11
1000de9c:	01000744 	movi	r4,29
1000dea0:	1c7ffe04 	addi	r17,r3,-8
1000dea4:	2149c83a 	sub	r4,r4,r5
1000dea8:	8460983a 	sll	r16,r16,r17
1000deac:	9108d83a 	srl	r4,r18,r4
1000deb0:	9462983a 	sll	r17,r18,r17
1000deb4:	2420b03a 	or	r16,r4,r16
1000deb8:	04ff0344 	movi	r19,-1011
1000debc:	98e7c83a 	sub	r19,r19,r3
1000dec0:	002d883a 	mov	r22,zero
1000dec4:	002f883a 	mov	r23,zero
1000dec8:	003f9706 	br	1000dd28 <__muldf3+0x70>
1000decc:	8122b03a 	or	r17,r16,r4
1000ded0:	8800211e 	bne	r17,zero,1000df58 <__muldf3+0x2a0>
1000ded4:	0021883a 	mov	r16,zero
1000ded8:	05800204 	movi	r22,8
1000dedc:	04c1ffc4 	movi	r19,2047
1000dee0:	05c00084 	movi	r23,2
1000dee4:	003f9006 	br	1000dd28 <__muldf3+0x70>
1000dee8:	3490b03a 	or	r8,r6,r18
1000deec:	40001626 	beq	r8,zero,1000df48 <__muldf3+0x290>
1000def0:	9000c026 	beq	r18,zero,1000e1f4 <__muldf3+0x53c>
1000def4:	9009883a 	mov	r4,r18
1000def8:	d9800015 	stw	r6,0(sp)
1000defc:	000eee80 	call	1000eee8 <__clzsi2>
1000df00:	d9800017 	ldw	r6,0(sp)
1000df04:	1007883a 	mov	r3,r2
1000df08:	113ffd44 	addi	r4,r2,-11
1000df0c:	01400744 	movi	r5,29
1000df10:	1a3ffe04 	addi	r8,r3,-8
1000df14:	290bc83a 	sub	r5,r5,r4
1000df18:	314ad83a 	srl	r5,r6,r5
1000df1c:	9208983a 	sll	r4,r18,r8
1000df20:	3210983a 	sll	r8,r6,r8
1000df24:	2924b03a 	or	r18,r5,r4
1000df28:	98c7c83a 	sub	r3,r19,r3
1000df2c:	1cff0344 	addi	r19,r3,-1011
1000df30:	0007883a 	mov	r3,zero
1000df34:	003f8d06 	br	1000dd6c <__muldf3+0xb4>
1000df38:	00c1ffc4 	movi	r3,2047
1000df3c:	0021883a 	mov	r16,zero
1000df40:	0023883a 	mov	r17,zero
1000df44:	003fb606 	br	1000de20 <__muldf3+0x168>
1000df48:	b5800054 	ori	r22,r22,1
1000df4c:	0025883a 	mov	r18,zero
1000df50:	00c00044 	movi	r3,1
1000df54:	003f8506 	br	1000dd6c <__muldf3+0xb4>
1000df58:	2023883a 	mov	r17,r4
1000df5c:	05800304 	movi	r22,12
1000df60:	04c1ffc4 	movi	r19,2047
1000df64:	05c000c4 	movi	r23,3
1000df68:	003f6f06 	br	1000dd28 <__muldf3+0x70>
1000df6c:	0021883a 	mov	r16,zero
1000df70:	05800104 	movi	r22,4
1000df74:	0027883a 	mov	r19,zero
1000df78:	05c00044 	movi	r23,1
1000df7c:	003f6a06 	br	1000dd28 <__muldf3+0x70>
1000df80:	b58000d4 	ori	r22,r22,3
1000df84:	3011883a 	mov	r8,r6
1000df88:	00c000c4 	movi	r3,3
1000df8c:	003f7706 	br	1000dd6c <__muldf3+0xb4>
1000df90:	a00d883a 	mov	r6,r20
1000df94:	003f9906 	br	1000ddfc <__muldf3+0x144>
1000df98:	04000434 	movhi	r16,16
1000df9c:	000d883a 	mov	r6,zero
1000dfa0:	843fffc4 	addi	r16,r16,-1
1000dfa4:	047fffc4 	movi	r17,-1
1000dfa8:	00c1ffc4 	movi	r3,2047
1000dfac:	003f9c06 	br	1000de20 <__muldf3+0x168>
1000dfb0:	8080022c 	andhi	r2,r16,8
1000dfb4:	10008926 	beq	r2,zero,1000e1dc <__muldf3+0x524>
1000dfb8:	9080022c 	andhi	r2,r18,8
1000dfbc:	1000871e 	bne	r2,zero,1000e1dc <__muldf3+0x524>
1000dfc0:	00800434 	movhi	r2,16
1000dfc4:	94000234 	orhi	r16,r18,8
1000dfc8:	10bfffc4 	addi	r2,r2,-1
1000dfcc:	80a0703a 	and	r16,r16,r2
1000dfd0:	a80d883a 	mov	r6,r21
1000dfd4:	4023883a 	mov	r17,r8
1000dfd8:	003ff306 	br	1000dfa8 <__muldf3+0x2f0>
1000dfdc:	8818d43a 	srli	r12,r17,16
1000dfe0:	4028d43a 	srli	r20,r8,16
1000dfe4:	42ffffcc 	andi	r11,r8,65535
1000dfe8:	8c7fffcc 	andi	r17,r17,65535
1000dfec:	5c47383a 	mul	r3,r11,r17
1000dff0:	62c9383a 	mul	r4,r12,r11
1000dff4:	a445383a 	mul	r2,r20,r17
1000dff8:	1810d43a 	srli	r8,r3,16
1000dffc:	651d383a 	mul	r14,r12,r20
1000e000:	1105883a 	add	r2,r2,r4
1000e004:	4091883a 	add	r8,r8,r2
1000e008:	4100022e 	bgeu	r8,r4,1000e014 <__muldf3+0x35c>
1000e00c:	00800074 	movhi	r2,1
1000e010:	709d883a 	add	r14,r14,r2
1000e014:	901ed43a 	srli	r15,r18,16
1000e018:	94bfffcc 	andi	r18,r18,65535
1000e01c:	9449383a 	mul	r4,r18,r17
1000e020:	648f383a 	mul	r7,r12,r18
1000e024:	7c63383a 	mul	r17,r15,r17
1000e028:	201ad43a 	srli	r13,r4,16
1000e02c:	4014943a 	slli	r10,r8,16
1000e030:	89e3883a 	add	r17,r17,r7
1000e034:	1a7fffcc 	andi	r9,r3,65535
1000e038:	6c5b883a 	add	r13,r13,r17
1000e03c:	4006d43a 	srli	r3,r8,16
1000e040:	5253883a 	add	r9,r10,r9
1000e044:	63c5383a 	mul	r2,r12,r15
1000e048:	69c0022e 	bgeu	r13,r7,1000e054 <__muldf3+0x39c>
1000e04c:	01c00074 	movhi	r7,1
1000e050:	11c5883a 	add	r2,r2,r7
1000e054:	802ad43a 	srli	r21,r16,16
1000e058:	823fffcc 	andi	r8,r16,65535
1000e05c:	5a2d383a 	mul	r22,r11,r8
1000e060:	a20f383a 	mul	r7,r20,r8
1000e064:	aad7383a 	mul	r11,r21,r11
1000e068:	6814943a 	slli	r10,r13,16
1000e06c:	b018d43a 	srli	r12,r22,16
1000e070:	6822d43a 	srli	r17,r13,16
1000e074:	213fffcc 	andi	r4,r4,65535
1000e078:	3acf883a 	add	r7,r7,r11
1000e07c:	5115883a 	add	r10,r10,r4
1000e080:	61cf883a 	add	r7,r12,r7
1000e084:	889b883a 	add	r13,r17,r2
1000e088:	1a87883a 	add	r3,r3,r10
1000e08c:	a569383a 	mul	r20,r20,r21
1000e090:	3ac0022e 	bgeu	r7,r11,1000e09c <__muldf3+0x3e4>
1000e094:	00800074 	movhi	r2,1
1000e098:	a0a9883a 	add	r20,r20,r2
1000e09c:	9217383a 	mul	r11,r18,r8
1000e0a0:	aca5383a 	mul	r18,r21,r18
1000e0a4:	7a11383a 	mul	r8,r15,r8
1000e0a8:	5820d43a 	srli	r16,r11,16
1000e0ac:	3808d43a 	srli	r4,r7,16
1000e0b0:	380e943a 	slli	r7,r7,16
1000e0b4:	4491883a 	add	r8,r8,r18
1000e0b8:	b5bfffcc 	andi	r22,r22,65535
1000e0bc:	8211883a 	add	r8,r16,r8
1000e0c0:	2529883a 	add	r20,r4,r20
1000e0c4:	3d8f883a 	add	r7,r7,r22
1000e0c8:	7d59383a 	mul	r12,r15,r21
1000e0cc:	4480022e 	bgeu	r8,r18,1000e0d8 <__muldf3+0x420>
1000e0d0:	00800074 	movhi	r2,1
1000e0d4:	6099883a 	add	r12,r12,r2
1000e0d8:	4004943a 	slli	r2,r8,16
1000e0dc:	5affffcc 	andi	r11,r11,65535
1000e0e0:	1b87883a 	add	r3,r3,r14
1000e0e4:	12c5883a 	add	r2,r2,r11
1000e0e8:	1a95803a 	cmpltu	r10,r3,r10
1000e0ec:	1345883a 	add	r2,r2,r13
1000e0f0:	19c7883a 	add	r3,r3,r7
1000e0f4:	129d883a 	add	r14,r2,r10
1000e0f8:	19cf803a 	cmpltu	r7,r3,r7
1000e0fc:	7509883a 	add	r4,r14,r20
1000e100:	4010d43a 	srli	r8,r8,16
1000e104:	21d7883a 	add	r11,r4,r7
1000e108:	1345803a 	cmpltu	r2,r2,r13
1000e10c:	72a1803a 	cmpltu	r16,r14,r10
1000e110:	1420b03a 	or	r16,r2,r16
1000e114:	2509803a 	cmpltu	r4,r4,r20
1000e118:	59cf803a 	cmpltu	r7,r11,r7
1000e11c:	21ceb03a 	or	r7,r4,r7
1000e120:	8221883a 	add	r16,r16,r8
1000e124:	81e1883a 	add	r16,r16,r7
1000e128:	1822927a 	slli	r17,r3,9
1000e12c:	8321883a 	add	r16,r16,r12
1000e130:	8020927a 	slli	r16,r16,9
1000e134:	5808d5fa 	srli	r4,r11,23
1000e138:	1806d5fa 	srli	r3,r3,23
1000e13c:	8a62b03a 	or	r17,r17,r9
1000e140:	5804927a 	slli	r2,r11,9
1000e144:	8120b03a 	or	r16,r16,r4
1000e148:	8822c03a 	cmpne	r17,r17,zero
1000e14c:	88e2b03a 	or	r17,r17,r3
1000e150:	80c0402c 	andhi	r3,r16,256
1000e154:	88a2b03a 	or	r17,r17,r2
1000e158:	18005a26 	beq	r3,zero,1000e2c4 <__muldf3+0x60c>
1000e15c:	8804d07a 	srli	r2,r17,1
1000e160:	800697fa 	slli	r3,r16,31
1000e164:	8c40004c 	andi	r17,r17,1
1000e168:	8020d07a 	srli	r16,r16,1
1000e16c:	1462b03a 	or	r17,r2,r17
1000e170:	88e2b03a 	or	r17,r17,r3
1000e174:	28c0ffc4 	addi	r3,r5,1023
1000e178:	00c0350e 	bge	zero,r3,1000e250 <__muldf3+0x598>
1000e17c:	888001cc 	andi	r2,r17,7
1000e180:	10000726 	beq	r2,zero,1000e1a0 <__muldf3+0x4e8>
1000e184:	888003cc 	andi	r2,r17,15
1000e188:	10800120 	cmpeqi	r2,r2,4
1000e18c:	1000041e 	bne	r2,zero,1000e1a0 <__muldf3+0x4e8>
1000e190:	88800104 	addi	r2,r17,4
1000e194:	1463803a 	cmpltu	r17,r2,r17
1000e198:	8461883a 	add	r16,r16,r17
1000e19c:	1023883a 	mov	r17,r2
1000e1a0:	8080402c 	andhi	r2,r16,256
1000e1a4:	10000426 	beq	r2,zero,1000e1b8 <__muldf3+0x500>
1000e1a8:	00bfc034 	movhi	r2,65280
1000e1ac:	10bfffc4 	addi	r2,r2,-1
1000e1b0:	80a0703a 	and	r16,r16,r2
1000e1b4:	28c10004 	addi	r3,r5,1024
1000e1b8:	1881ffc8 	cmpgei	r2,r3,2047
1000e1bc:	103f5e1e 	bne	r2,zero,1000df38 <__muldf3+0x280>
1000e1c0:	8004977a 	slli	r2,r16,29
1000e1c4:	8822d0fa 	srli	r17,r17,3
1000e1c8:	8020927a 	slli	r16,r16,9
1000e1cc:	18c1ffcc 	andi	r3,r3,2047
1000e1d0:	1462b03a 	or	r17,r2,r17
1000e1d4:	8020d33a 	srli	r16,r16,12
1000e1d8:	003f1106 	br	1000de20 <__muldf3+0x168>
1000e1dc:	00800434 	movhi	r2,16
1000e1e0:	84000234 	orhi	r16,r16,8
1000e1e4:	10bfffc4 	addi	r2,r2,-1
1000e1e8:	80a0703a 	and	r16,r16,r2
1000e1ec:	a00d883a 	mov	r6,r20
1000e1f0:	003f6d06 	br	1000dfa8 <__muldf3+0x2f0>
1000e1f4:	3009883a 	mov	r4,r6
1000e1f8:	d9800015 	stw	r6,0(sp)
1000e1fc:	000eee80 	call	1000eee8 <__clzsi2>
1000e200:	11000544 	addi	r4,r2,21
1000e204:	21400748 	cmpgei	r5,r4,29
1000e208:	10c00804 	addi	r3,r2,32
1000e20c:	d9800017 	ldw	r6,0(sp)
1000e210:	283f3e26 	beq	r5,zero,1000df0c <__muldf3+0x254>
1000e214:	10bffe04 	addi	r2,r2,-8
1000e218:	30a4983a 	sll	r18,r6,r2
1000e21c:	0011883a 	mov	r8,zero
1000e220:	003f4106 	br	1000df28 <__muldf3+0x270>
1000e224:	000eee80 	call	1000eee8 <__clzsi2>
1000e228:	11400544 	addi	r5,r2,21
1000e22c:	29000748 	cmpgei	r4,r5,29
1000e230:	10c00804 	addi	r3,r2,32
1000e234:	d9800017 	ldw	r6,0(sp)
1000e238:	d9c00117 	ldw	r7,4(sp)
1000e23c:	203f1726 	beq	r4,zero,1000de9c <__muldf3+0x1e4>
1000e240:	10bffe04 	addi	r2,r2,-8
1000e244:	90a0983a 	sll	r16,r18,r2
1000e248:	0023883a 	mov	r17,zero
1000e24c:	003f1a06 	br	1000deb8 <__muldf3+0x200>
1000e250:	00800044 	movi	r2,1
1000e254:	10c5c83a 	sub	r2,r2,r3
1000e258:	11000e48 	cmpgei	r4,r2,57
1000e25c:	203eed1e 	bne	r4,zero,1000de14 <__muldf3+0x15c>
1000e260:	11000808 	cmpgei	r4,r2,32
1000e264:	2000191e 	bne	r4,zero,1000e2cc <__muldf3+0x614>
1000e268:	29410784 	addi	r5,r5,1054
1000e26c:	8146983a 	sll	r3,r16,r5
1000e270:	8888d83a 	srl	r4,r17,r2
1000e274:	894a983a 	sll	r5,r17,r5
1000e278:	80a0d83a 	srl	r16,r16,r2
1000e27c:	1904b03a 	or	r2,r3,r4
1000e280:	2822c03a 	cmpne	r17,r5,zero
1000e284:	1444b03a 	or	r2,r2,r17
1000e288:	10c001cc 	andi	r3,r2,7
1000e28c:	18000726 	beq	r3,zero,1000e2ac <__muldf3+0x5f4>
1000e290:	10c003cc 	andi	r3,r2,15
1000e294:	18c00120 	cmpeqi	r3,r3,4
1000e298:	1800041e 	bne	r3,zero,1000e2ac <__muldf3+0x5f4>
1000e29c:	10c00104 	addi	r3,r2,4
1000e2a0:	1885803a 	cmpltu	r2,r3,r2
1000e2a4:	80a1883a 	add	r16,r16,r2
1000e2a8:	1805883a 	mov	r2,r3
1000e2ac:	80c0202c 	andhi	r3,r16,128
1000e2b0:	18001b26 	beq	r3,zero,1000e320 <__muldf3+0x668>
1000e2b4:	00c00044 	movi	r3,1
1000e2b8:	0021883a 	mov	r16,zero
1000e2bc:	0023883a 	mov	r17,zero
1000e2c0:	003ed706 	br	1000de20 <__muldf3+0x168>
1000e2c4:	980b883a 	mov	r5,r19
1000e2c8:	003faa06 	br	1000e174 <__muldf3+0x4bc>
1000e2cc:	013ff844 	movi	r4,-31
1000e2d0:	20c7c83a 	sub	r3,r4,r3
1000e2d4:	10800820 	cmpeqi	r2,r2,32
1000e2d8:	80c6d83a 	srl	r3,r16,r3
1000e2dc:	1000031e 	bne	r2,zero,1000e2ec <__muldf3+0x634>
1000e2e0:	28810f84 	addi	r2,r5,1086
1000e2e4:	8084983a 	sll	r2,r16,r2
1000e2e8:	88a2b03a 	or	r17,r17,r2
1000e2ec:	8822c03a 	cmpne	r17,r17,zero
1000e2f0:	88c4b03a 	or	r2,r17,r3
1000e2f4:	144001cc 	andi	r17,r2,7
1000e2f8:	8800051e 	bne	r17,zero,1000e310 <__muldf3+0x658>
1000e2fc:	0021883a 	mov	r16,zero
1000e300:	1004d0fa 	srli	r2,r2,3
1000e304:	0007883a 	mov	r3,zero
1000e308:	1462b03a 	or	r17,r2,r17
1000e30c:	003ec406 	br	1000de20 <__muldf3+0x168>
1000e310:	10c003cc 	andi	r3,r2,15
1000e314:	18c00118 	cmpnei	r3,r3,4
1000e318:	0021883a 	mov	r16,zero
1000e31c:	183fdf1e 	bne	r3,zero,1000e29c <__muldf3+0x5e4>
1000e320:	8006927a 	slli	r3,r16,9
1000e324:	8022977a 	slli	r17,r16,29
1000e328:	1820d33a 	srli	r16,r3,12
1000e32c:	003ff406 	br	1000e300 <__muldf3+0x648>
1000e330:	00800434 	movhi	r2,16
1000e334:	84000234 	orhi	r16,r16,8
1000e338:	10bfffc4 	addi	r2,r2,-1
1000e33c:	80a0703a 	and	r16,r16,r2
1000e340:	003f1906 	br	1000dfa8 <__muldf3+0x2f0>

1000e344 <__subdf3>:
1000e344:	00800434 	movhi	r2,16
1000e348:	3812d53a 	srli	r9,r7,20
1000e34c:	10bfffc4 	addi	r2,r2,-1
1000e350:	defffb04 	addi	sp,sp,-20
1000e354:	2890703a 	and	r8,r5,r2
1000e358:	3884703a 	and	r2,r7,r2
1000e35c:	2806d7fa 	srli	r3,r5,31
1000e360:	dcc00315 	stw	r19,12(sp)
1000e364:	dc400115 	stw	r17,4(sp)
1000e368:	280ad53a 	srli	r5,r5,20
1000e36c:	401090fa 	slli	r8,r8,3
1000e370:	2026d77a 	srli	r19,r4,29
1000e374:	100490fa 	slli	r2,r2,3
1000e378:	3022d77a 	srli	r17,r6,29
1000e37c:	4a81ffcc 	andi	r10,r9,2047
1000e380:	dc800215 	stw	r18,8(sp)
1000e384:	dc000015 	stw	r16,0(sp)
1000e388:	dfc00415 	stw	ra,16(sp)
1000e38c:	5241ffe0 	cmpeqi	r9,r10,2047
1000e390:	1825883a 	mov	r18,r3
1000e394:	2c01ffcc 	andi	r16,r5,2047
1000e398:	18c03fcc 	andi	r3,r3,255
1000e39c:	9a18b03a 	or	r12,r19,r8
1000e3a0:	201a90fa 	slli	r13,r4,3
1000e3a4:	380ed7fa 	srli	r7,r7,31
1000e3a8:	8896b03a 	or	r11,r17,r2
1000e3ac:	301c90fa 	slli	r14,r6,3
1000e3b0:	4800711e 	bne	r9,zero,1000e578 <__subdf3+0x234>
1000e3b4:	39c0005c 	xori	r7,r7,1
1000e3b8:	8291c83a 	sub	r8,r16,r10
1000e3bc:	19c05a26 	beq	r3,r7,1000e528 <__subdf3+0x1e4>
1000e3c0:	0200720e 	bge	zero,r8,1000e58c <__subdf3+0x248>
1000e3c4:	50008126 	beq	r10,zero,1000e5cc <__subdf3+0x288>
1000e3c8:	8081ffd8 	cmpnei	r2,r16,2047
1000e3cc:	10011626 	beq	r2,zero,1000e828 <__subdf3+0x4e4>
1000e3d0:	5ac02034 	orhi	r11,r11,128
1000e3d4:	40800e48 	cmpgei	r2,r8,57
1000e3d8:	1000fe1e 	bne	r2,zero,1000e7d4 <__subdf3+0x490>
1000e3dc:	40800808 	cmpgei	r2,r8,32
1000e3e0:	10015e1e 	bne	r2,zero,1000e95c <__subdf3+0x618>
1000e3e4:	00800804 	movi	r2,32
1000e3e8:	1205c83a 	sub	r2,r2,r8
1000e3ec:	58a2983a 	sll	r17,r11,r2
1000e3f0:	7206d83a 	srl	r3,r14,r8
1000e3f4:	709c983a 	sll	r14,r14,r2
1000e3f8:	5a04d83a 	srl	r2,r11,r8
1000e3fc:	88e2b03a 	or	r17,r17,r3
1000e400:	701cc03a 	cmpne	r14,r14,zero
1000e404:	8ba2b03a 	or	r17,r17,r14
1000e408:	6099c83a 	sub	r12,r12,r2
1000e40c:	6c63c83a 	sub	r17,r13,r17
1000e410:	6c49803a 	cmpltu	r4,r13,r17
1000e414:	6109c83a 	sub	r4,r12,r4
1000e418:	2080202c 	andhi	r2,r4,128
1000e41c:	10009f26 	beq	r2,zero,1000e69c <__subdf3+0x358>
1000e420:	04c02034 	movhi	r19,128
1000e424:	9cffffc4 	addi	r19,r19,-1
1000e428:	24e6703a 	and	r19,r4,r19
1000e42c:	9800e026 	beq	r19,zero,1000e7b0 <__subdf3+0x46c>
1000e430:	9809883a 	mov	r4,r19
1000e434:	000eee80 	call	1000eee8 <__clzsi2>
1000e438:	123ffe04 	addi	r8,r2,-8
1000e43c:	01000804 	movi	r4,32
1000e440:	2209c83a 	sub	r4,r4,r8
1000e444:	8906d83a 	srl	r3,r17,r4
1000e448:	9a08983a 	sll	r4,r19,r8
1000e44c:	8a22983a 	sll	r17,r17,r8
1000e450:	1908b03a 	or	r4,r3,r4
1000e454:	4400cf16 	blt	r8,r16,1000e794 <__subdf3+0x450>
1000e458:	4411c83a 	sub	r8,r8,r16
1000e45c:	40800044 	addi	r2,r8,1
1000e460:	10c00808 	cmpgei	r3,r2,32
1000e464:	1801251e 	bne	r3,zero,1000e8fc <__subdf3+0x5b8>
1000e468:	00c00804 	movi	r3,32
1000e46c:	1887c83a 	sub	r3,r3,r2
1000e470:	888ad83a 	srl	r5,r17,r2
1000e474:	88e2983a 	sll	r17,r17,r3
1000e478:	20c6983a 	sll	r3,r4,r3
1000e47c:	2088d83a 	srl	r4,r4,r2
1000e480:	8822c03a 	cmpne	r17,r17,zero
1000e484:	1946b03a 	or	r3,r3,r5
1000e488:	1c62b03a 	or	r17,r3,r17
1000e48c:	0021883a 	mov	r16,zero
1000e490:	888001cc 	andi	r2,r17,7
1000e494:	10000726 	beq	r2,zero,1000e4b4 <__subdf3+0x170>
1000e498:	888003cc 	andi	r2,r17,15
1000e49c:	10800120 	cmpeqi	r2,r2,4
1000e4a0:	1000041e 	bne	r2,zero,1000e4b4 <__subdf3+0x170>
1000e4a4:	88c00104 	addi	r3,r17,4
1000e4a8:	1c63803a 	cmpltu	r17,r3,r17
1000e4ac:	2449883a 	add	r4,r4,r17
1000e4b0:	1823883a 	mov	r17,r3
1000e4b4:	2080202c 	andhi	r2,r4,128
1000e4b8:	10007a26 	beq	r2,zero,1000e6a4 <__subdf3+0x360>
1000e4bc:	82000044 	addi	r8,r16,1
1000e4c0:	4081ffe0 	cmpeqi	r2,r8,2047
1000e4c4:	4201ffcc 	andi	r8,r8,2047
1000e4c8:	10008c1e 	bne	r2,zero,1000e6fc <__subdf3+0x3b8>
1000e4cc:	00bfe034 	movhi	r2,65408
1000e4d0:	10bfffc4 	addi	r2,r2,-1
1000e4d4:	2084703a 	and	r2,r4,r2
1000e4d8:	1008927a 	slli	r4,r2,9
1000e4dc:	8822d0fa 	srli	r17,r17,3
1000e4e0:	100c977a 	slli	r6,r2,29
1000e4e4:	2008d33a 	srli	r4,r4,12
1000e4e8:	3444b03a 	or	r2,r6,r17
1000e4ec:	4010953a 	slli	r8,r8,20
1000e4f0:	00c00434 	movhi	r3,16
1000e4f4:	94803fcc 	andi	r18,r18,255
1000e4f8:	902497fa 	slli	r18,r18,31
1000e4fc:	18ffffc4 	addi	r3,r3,-1
1000e500:	20c6703a 	and	r3,r4,r3
1000e504:	1a06b03a 	or	r3,r3,r8
1000e508:	1c86b03a 	or	r3,r3,r18
1000e50c:	dfc00417 	ldw	ra,16(sp)
1000e510:	dcc00317 	ldw	r19,12(sp)
1000e514:	dc800217 	ldw	r18,8(sp)
1000e518:	dc400117 	ldw	r17,4(sp)
1000e51c:	dc000017 	ldw	r16,0(sp)
1000e520:	dec00504 	addi	sp,sp,20
1000e524:	f800283a 	ret
1000e528:	0200320e 	bge	zero,r8,1000e5f4 <__subdf3+0x2b0>
1000e52c:	50004c26 	beq	r10,zero,1000e660 <__subdf3+0x31c>
1000e530:	8081ffd8 	cmpnei	r2,r16,2047
1000e534:	1000bc26 	beq	r2,zero,1000e828 <__subdf3+0x4e4>
1000e538:	5ac02034 	orhi	r11,r11,128
1000e53c:	40800e48 	cmpgei	r2,r8,57
1000e540:	1000641e 	bne	r2,zero,1000e6d4 <__subdf3+0x390>
1000e544:	40800808 	cmpgei	r2,r8,32
1000e548:	10011726 	beq	r2,zero,1000e9a8 <__subdf3+0x664>
1000e54c:	447ff804 	addi	r17,r8,-32
1000e550:	40800820 	cmpeqi	r2,r8,32
1000e554:	5c46d83a 	srl	r3,r11,r17
1000e558:	1000041e 	bne	r2,zero,1000e56c <__subdf3+0x228>
1000e55c:	00801004 	movi	r2,64
1000e560:	1205c83a 	sub	r2,r2,r8
1000e564:	5884983a 	sll	r2,r11,r2
1000e568:	709cb03a 	or	r14,r14,r2
1000e56c:	7022c03a 	cmpne	r17,r14,zero
1000e570:	88e2b03a 	or	r17,r17,r3
1000e574:	00005906 	br	1000e6dc <__subdf3+0x398>
1000e578:	5b8ab03a 	or	r5,r11,r14
1000e57c:	823e0044 	addi	r8,r16,-2047
1000e580:	28001a1e 	bne	r5,zero,1000e5ec <__subdf3+0x2a8>
1000e584:	39c0005c 	xori	r7,r7,1
1000e588:	19c01a26 	beq	r3,r7,1000e5f4 <__subdf3+0x2b0>
1000e58c:	4000291e 	bne	r8,zero,1000e634 <__subdf3+0x2f0>
1000e590:	80800044 	addi	r2,r16,1
1000e594:	1081ff8c 	andi	r2,r2,2046
1000e598:	1000911e 	bne	r2,zero,1000e7e0 <__subdf3+0x49c>
1000e59c:	6346b03a 	or	r3,r12,r13
1000e5a0:	5b84b03a 	or	r2,r11,r14
1000e5a4:	8001551e 	bne	r16,zero,1000eafc <__subdf3+0x7b8>
1000e5a8:	18011b26 	beq	r3,zero,1000ea18 <__subdf3+0x6d4>
1000e5ac:	1001641e 	bne	r2,zero,1000eb40 <__subdf3+0x7fc>
1000e5b0:	00880034 	movhi	r2,8192
1000e5b4:	6022977a 	slli	r17,r12,29
1000e5b8:	10bfffc4 	addi	r2,r2,-1
1000e5bc:	2088703a 	and	r4,r4,r2
1000e5c0:	2444b03a 	or	r2,r4,r17
1000e5c4:	6026d0fa 	srli	r19,r12,3
1000e5c8:	00003d06 	br	1000e6c0 <__subdf3+0x37c>
1000e5cc:	5b84b03a 	or	r2,r11,r14
1000e5d0:	10008e26 	beq	r2,zero,1000e80c <__subdf3+0x4c8>
1000e5d4:	40bfffc4 	addi	r2,r8,-1
1000e5d8:	10011f26 	beq	r2,zero,1000ea58 <__subdf3+0x714>
1000e5dc:	4201ffd8 	cmpnei	r8,r8,2047
1000e5e0:	40012d26 	beq	r8,zero,1000ea98 <__subdf3+0x754>
1000e5e4:	1011883a 	mov	r8,r2
1000e5e8:	003f7a06 	br	1000e3d4 <__subdf3+0x90>
1000e5ec:	39c03fcc 	andi	r7,r7,255
1000e5f0:	19ffe61e 	bne	r3,r7,1000e58c <__subdf3+0x248>
1000e5f4:	4000931e 	bne	r8,zero,1000e844 <__subdf3+0x500>
1000e5f8:	80c00044 	addi	r3,r16,1
1000e5fc:	1881ff8c 	andi	r2,r3,2046
1000e600:	10012c1e 	bne	r2,zero,1000eab4 <__subdf3+0x770>
1000e604:	6344b03a 	or	r2,r12,r13
1000e608:	8000f91e 	bne	r16,zero,1000e9f0 <__subdf3+0x6ac>
1000e60c:	10017326 	beq	r2,zero,1000ebdc <__subdf3+0x898>
1000e610:	5b84b03a 	or	r2,r11,r14
1000e614:	1001781e 	bne	r2,zero,1000ebf8 <__subdf3+0x8b4>
1000e618:	6004977a 	slli	r2,r12,29
1000e61c:	00c80034 	movhi	r3,8192
1000e620:	18ffffc4 	addi	r3,r3,-1
1000e624:	20c6703a 	and	r3,r4,r3
1000e628:	10c4b03a 	or	r2,r2,r3
1000e62c:	6026d0fa 	srli	r19,r12,3
1000e630:	00002306 	br	1000e6c0 <__subdf3+0x37c>
1000e634:	5411c83a 	sub	r8,r10,r16
1000e638:	3825883a 	mov	r18,r7
1000e63c:	8000991e 	bne	r16,zero,1000e8a4 <__subdf3+0x560>
1000e640:	6344b03a 	or	r2,r12,r13
1000e644:	1000e326 	beq	r2,zero,1000e9d4 <__subdf3+0x690>
1000e648:	40bfffc4 	addi	r2,r8,-1
1000e64c:	10015d26 	beq	r2,zero,1000ebc4 <__subdf3+0x880>
1000e650:	4201ffd8 	cmpnei	r8,r8,2047
1000e654:	4000f926 	beq	r8,zero,1000ea3c <__subdf3+0x6f8>
1000e658:	1011883a 	mov	r8,r2
1000e65c:	00009406 	br	1000e8b0 <__subdf3+0x56c>
1000e660:	5b84b03a 	or	r2,r11,r14
1000e664:	10010226 	beq	r2,zero,1000ea70 <__subdf3+0x72c>
1000e668:	40bfffc4 	addi	r2,r8,-1
1000e66c:	10000426 	beq	r2,zero,1000e680 <__subdf3+0x33c>
1000e670:	4201ffd8 	cmpnei	r8,r8,2047
1000e674:	40014126 	beq	r8,zero,1000eb7c <__subdf3+0x838>
1000e678:	1011883a 	mov	r8,r2
1000e67c:	003faf06 	br	1000e53c <__subdf3+0x1f8>
1000e680:	6ba3883a 	add	r17,r13,r14
1000e684:	62c9883a 	add	r4,r12,r11
1000e688:	8b5b803a 	cmpltu	r13,r17,r13
1000e68c:	2349883a 	add	r4,r4,r13
1000e690:	2080202c 	andhi	r2,r4,128
1000e694:	1000a61e 	bne	r2,zero,1000e930 <__subdf3+0x5ec>
1000e698:	04000044 	movi	r16,1
1000e69c:	888001cc 	andi	r2,r17,7
1000e6a0:	103f7d1e 	bne	r2,zero,1000e498 <__subdf3+0x154>
1000e6a4:	8822d0fa 	srli	r17,r17,3
1000e6a8:	2004977a 	slli	r2,r4,29
1000e6ac:	2026d0fa 	srli	r19,r4,3
1000e6b0:	8011883a 	mov	r8,r16
1000e6b4:	8884b03a 	or	r2,r17,r2
1000e6b8:	40c1ffe0 	cmpeqi	r3,r8,2047
1000e6bc:	18002d1e 	bne	r3,zero,1000e774 <__subdf3+0x430>
1000e6c0:	01000434 	movhi	r4,16
1000e6c4:	213fffc4 	addi	r4,r4,-1
1000e6c8:	9908703a 	and	r4,r19,r4
1000e6cc:	4201ffcc 	andi	r8,r8,2047
1000e6d0:	003f8606 	br	1000e4ec <__subdf3+0x1a8>
1000e6d4:	5ba2b03a 	or	r17,r11,r14
1000e6d8:	8822c03a 	cmpne	r17,r17,zero
1000e6dc:	8b63883a 	add	r17,r17,r13
1000e6e0:	8b49803a 	cmpltu	r4,r17,r13
1000e6e4:	2309883a 	add	r4,r4,r12
1000e6e8:	2080202c 	andhi	r2,r4,128
1000e6ec:	103feb26 	beq	r2,zero,1000e69c <__subdf3+0x358>
1000e6f0:	84000044 	addi	r16,r16,1
1000e6f4:	8081ffe0 	cmpeqi	r2,r16,2047
1000e6f8:	10008e26 	beq	r2,zero,1000e934 <__subdf3+0x5f0>
1000e6fc:	0201ffc4 	movi	r8,2047
1000e700:	0009883a 	mov	r4,zero
1000e704:	0005883a 	mov	r2,zero
1000e708:	003f7806 	br	1000e4ec <__subdf3+0x1a8>
1000e70c:	6010977a 	slli	r8,r12,29
1000e710:	6026d0fa 	srli	r19,r12,3
1000e714:	1000bb26 	beq	r2,zero,1000ea04 <__subdf3+0x6c0>
1000e718:	01480034 	movhi	r5,8192
1000e71c:	297fffc4 	addi	r5,r5,-1
1000e720:	2146703a 	and	r3,r4,r5
1000e724:	9880022c 	andhi	r2,r19,8
1000e728:	1a06b03a 	or	r3,r3,r8
1000e72c:	10000826 	beq	r2,zero,1000e750 <__subdf3+0x40c>
1000e730:	5808d0fa 	srli	r4,r11,3
1000e734:	2080022c 	andhi	r2,r4,8
1000e738:	1000051e 	bne	r2,zero,1000e750 <__subdf3+0x40c>
1000e73c:	5804977a 	slli	r2,r11,29
1000e740:	3146703a 	and	r3,r6,r5
1000e744:	3825883a 	mov	r18,r7
1000e748:	1886b03a 	or	r3,r3,r2
1000e74c:	2027883a 	mov	r19,r4
1000e750:	1804d77a 	srli	r2,r3,29
1000e754:	980890fa 	slli	r4,r19,3
1000e758:	01480034 	movhi	r5,8192
1000e75c:	297fffc4 	addi	r5,r5,-1
1000e760:	1108b03a 	or	r4,r2,r4
1000e764:	2004977a 	slli	r2,r4,29
1000e768:	2026d0fa 	srli	r19,r4,3
1000e76c:	1946703a 	and	r3,r3,r5
1000e770:	10c4b03a 	or	r2,r2,r3
1000e774:	14c6b03a 	or	r3,r2,r19
1000e778:	18014926 	beq	r3,zero,1000eca0 <__subdf3+0x95c>
1000e77c:	00c00434 	movhi	r3,16
1000e780:	99000234 	orhi	r4,r19,8
1000e784:	18ffffc4 	addi	r3,r3,-1
1000e788:	20c8703a 	and	r4,r4,r3
1000e78c:	0201ffc4 	movi	r8,2047
1000e790:	003f5606 	br	1000e4ec <__subdf3+0x1a8>
1000e794:	00bfe034 	movhi	r2,65408
1000e798:	10bfffc4 	addi	r2,r2,-1
1000e79c:	2088703a 	and	r4,r4,r2
1000e7a0:	888001cc 	andi	r2,r17,7
1000e7a4:	8221c83a 	sub	r16,r16,r8
1000e7a8:	103f3b1e 	bne	r2,zero,1000e498 <__subdf3+0x154>
1000e7ac:	003fbd06 	br	1000e6a4 <__subdf3+0x360>
1000e7b0:	8809883a 	mov	r4,r17
1000e7b4:	000eee80 	call	1000eee8 <__clzsi2>
1000e7b8:	12000604 	addi	r8,r2,24
1000e7bc:	40c00808 	cmpgei	r3,r8,32
1000e7c0:	183f1e26 	beq	r3,zero,1000e43c <__subdf3+0xf8>
1000e7c4:	113ffe04 	addi	r4,r2,-8
1000e7c8:	8908983a 	sll	r4,r17,r4
1000e7cc:	0023883a 	mov	r17,zero
1000e7d0:	003f2006 	br	1000e454 <__subdf3+0x110>
1000e7d4:	5ba2b03a 	or	r17,r11,r14
1000e7d8:	8822c03a 	cmpne	r17,r17,zero
1000e7dc:	003f0b06 	br	1000e40c <__subdf3+0xc8>
1000e7e0:	6ba3c83a 	sub	r17,r13,r14
1000e7e4:	62e7c83a 	sub	r19,r12,r11
1000e7e8:	6c49803a 	cmpltu	r4,r13,r17
1000e7ec:	9927c83a 	sub	r19,r19,r4
1000e7f0:	9880202c 	andhi	r2,r19,128
1000e7f4:	1000bb1e 	bne	r2,zero,1000eae4 <__subdf3+0x7a0>
1000e7f8:	8cc4b03a 	or	r2,r17,r19
1000e7fc:	103f0b1e 	bne	r2,zero,1000e42c <__subdf3+0xe8>
1000e800:	0027883a 	mov	r19,zero
1000e804:	0025883a 	mov	r18,zero
1000e808:	003fad06 	br	1000e6c0 <__subdf3+0x37c>
1000e80c:	00880034 	movhi	r2,8192
1000e810:	6022977a 	slli	r17,r12,29
1000e814:	10bfffc4 	addi	r2,r2,-1
1000e818:	2088703a 	and	r4,r4,r2
1000e81c:	2444b03a 	or	r2,r4,r17
1000e820:	6026d0fa 	srli	r19,r12,3
1000e824:	003fa406 	br	1000e6b8 <__subdf3+0x374>
1000e828:	00880034 	movhi	r2,8192
1000e82c:	6022977a 	slli	r17,r12,29
1000e830:	10bfffc4 	addi	r2,r2,-1
1000e834:	2088703a 	and	r4,r4,r2
1000e838:	2444b03a 	or	r2,r4,r17
1000e83c:	6026d0fa 	srli	r19,r12,3
1000e840:	003fcc06 	br	1000e774 <__subdf3+0x430>
1000e844:	5411c83a 	sub	r8,r10,r16
1000e848:	80004f26 	beq	r16,zero,1000e988 <__subdf3+0x644>
1000e84c:	5081ffd8 	cmpnei	r2,r10,2047
1000e850:	1000b426 	beq	r2,zero,1000eb24 <__subdf3+0x7e0>
1000e854:	63002034 	orhi	r12,r12,128
1000e858:	40800e48 	cmpgei	r2,r8,57
1000e85c:	1000c41e 	bne	r2,zero,1000eb70 <__subdf3+0x82c>
1000e860:	40800808 	cmpgei	r2,r8,32
1000e864:	1000f91e 	bne	r2,zero,1000ec4c <__subdf3+0x908>
1000e868:	00800804 	movi	r2,32
1000e86c:	1205c83a 	sub	r2,r2,r8
1000e870:	60a2983a 	sll	r17,r12,r2
1000e874:	6a06d83a 	srl	r3,r13,r8
1000e878:	6884983a 	sll	r2,r13,r2
1000e87c:	6210d83a 	srl	r8,r12,r8
1000e880:	88e2b03a 	or	r17,r17,r3
1000e884:	1004c03a 	cmpne	r2,r2,zero
1000e888:	88a2b03a 	or	r17,r17,r2
1000e88c:	5a17883a 	add	r11,r11,r8
1000e890:	8ba3883a 	add	r17,r17,r14
1000e894:	8b85803a 	cmpltu	r2,r17,r14
1000e898:	12c9883a 	add	r4,r2,r11
1000e89c:	5021883a 	mov	r16,r10
1000e8a0:	003f9106 	br	1000e6e8 <__subdf3+0x3a4>
1000e8a4:	5081ffd8 	cmpnei	r2,r10,2047
1000e8a8:	10006426 	beq	r2,zero,1000ea3c <__subdf3+0x6f8>
1000e8ac:	63002034 	orhi	r12,r12,128
1000e8b0:	40800e48 	cmpgei	r2,r8,57
1000e8b4:	1000751e 	bne	r2,zero,1000ea8c <__subdf3+0x748>
1000e8b8:	40800808 	cmpgei	r2,r8,32
1000e8bc:	1000b61e 	bne	r2,zero,1000eb98 <__subdf3+0x854>
1000e8c0:	00800804 	movi	r2,32
1000e8c4:	1205c83a 	sub	r2,r2,r8
1000e8c8:	60a2983a 	sll	r17,r12,r2
1000e8cc:	6a06d83a 	srl	r3,r13,r8
1000e8d0:	6884983a 	sll	r2,r13,r2
1000e8d4:	6210d83a 	srl	r8,r12,r8
1000e8d8:	88e2b03a 	or	r17,r17,r3
1000e8dc:	1004c03a 	cmpne	r2,r2,zero
1000e8e0:	88a2b03a 	or	r17,r17,r2
1000e8e4:	5a17c83a 	sub	r11,r11,r8
1000e8e8:	7463c83a 	sub	r17,r14,r17
1000e8ec:	7445803a 	cmpltu	r2,r14,r17
1000e8f0:	5889c83a 	sub	r4,r11,r2
1000e8f4:	5021883a 	mov	r16,r10
1000e8f8:	003ec706 	br	1000e418 <__subdf3+0xd4>
1000e8fc:	423ff844 	addi	r8,r8,-31
1000e900:	10c00820 	cmpeqi	r3,r2,32
1000e904:	2210d83a 	srl	r8,r4,r8
1000e908:	1800041e 	bne	r3,zero,1000e91c <__subdf3+0x5d8>
1000e90c:	00c01004 	movi	r3,64
1000e910:	1885c83a 	sub	r2,r3,r2
1000e914:	2088983a 	sll	r4,r4,r2
1000e918:	8922b03a 	or	r17,r17,r4
1000e91c:	8822c03a 	cmpne	r17,r17,zero
1000e920:	8a22b03a 	or	r17,r17,r8
1000e924:	0009883a 	mov	r4,zero
1000e928:	0021883a 	mov	r16,zero
1000e92c:	003f5b06 	br	1000e69c <__subdf3+0x358>
1000e930:	04000084 	movi	r16,2
1000e934:	00bfe034 	movhi	r2,65408
1000e938:	10bfffc4 	addi	r2,r2,-1
1000e93c:	2084703a 	and	r2,r4,r2
1000e940:	8806d07a 	srli	r3,r17,1
1000e944:	100a97fa 	slli	r5,r2,31
1000e948:	8c40004c 	andi	r17,r17,1
1000e94c:	1c62b03a 	or	r17,r3,r17
1000e950:	1008d07a 	srli	r4,r2,1
1000e954:	2c62b03a 	or	r17,r5,r17
1000e958:	003ecd06 	br	1000e490 <__subdf3+0x14c>
1000e95c:	447ff804 	addi	r17,r8,-32
1000e960:	40800820 	cmpeqi	r2,r8,32
1000e964:	5c46d83a 	srl	r3,r11,r17
1000e968:	1000041e 	bne	r2,zero,1000e97c <__subdf3+0x638>
1000e96c:	00801004 	movi	r2,64
1000e970:	1205c83a 	sub	r2,r2,r8
1000e974:	5884983a 	sll	r2,r11,r2
1000e978:	709cb03a 	or	r14,r14,r2
1000e97c:	7022c03a 	cmpne	r17,r14,zero
1000e980:	88e2b03a 	or	r17,r17,r3
1000e984:	003ea106 	br	1000e40c <__subdf3+0xc8>
1000e988:	6344b03a 	or	r2,r12,r13
1000e98c:	1000a526 	beq	r2,zero,1000ec24 <__subdf3+0x8e0>
1000e990:	40bfffc4 	addi	r2,r8,-1
1000e994:	1000bd26 	beq	r2,zero,1000ec8c <__subdf3+0x948>
1000e998:	4201ffd8 	cmpnei	r8,r8,2047
1000e99c:	40006126 	beq	r8,zero,1000eb24 <__subdf3+0x7e0>
1000e9a0:	1011883a 	mov	r8,r2
1000e9a4:	003fac06 	br	1000e858 <__subdf3+0x514>
1000e9a8:	00800804 	movi	r2,32
1000e9ac:	1205c83a 	sub	r2,r2,r8
1000e9b0:	58a2983a 	sll	r17,r11,r2
1000e9b4:	7206d83a 	srl	r3,r14,r8
1000e9b8:	709c983a 	sll	r14,r14,r2
1000e9bc:	5a04d83a 	srl	r2,r11,r8
1000e9c0:	88e2b03a 	or	r17,r17,r3
1000e9c4:	701cc03a 	cmpne	r14,r14,zero
1000e9c8:	8ba2b03a 	or	r17,r17,r14
1000e9cc:	6099883a 	add	r12,r12,r2
1000e9d0:	003f4206 	br	1000e6dc <__subdf3+0x398>
1000e9d4:	5808977a 	slli	r4,r11,29
1000e9d8:	00c80034 	movhi	r3,8192
1000e9dc:	18ffffc4 	addi	r3,r3,-1
1000e9e0:	30cc703a 	and	r6,r6,r3
1000e9e4:	2184b03a 	or	r2,r4,r6
1000e9e8:	5826d0fa 	srli	r19,r11,3
1000e9ec:	003f3206 	br	1000e6b8 <__subdf3+0x374>
1000e9f0:	10004c26 	beq	r2,zero,1000eb24 <__subdf3+0x7e0>
1000e9f4:	5b9cb03a 	or	r14,r11,r14
1000e9f8:	6010977a 	slli	r8,r12,29
1000e9fc:	6026d0fa 	srli	r19,r12,3
1000ea00:	703f451e 	bne	r14,zero,1000e718 <__subdf3+0x3d4>
1000ea04:	00880034 	movhi	r2,8192
1000ea08:	10bfffc4 	addi	r2,r2,-1
1000ea0c:	2084703a 	and	r2,r4,r2
1000ea10:	1204b03a 	or	r2,r2,r8
1000ea14:	003f5706 	br	1000e774 <__subdf3+0x430>
1000ea18:	103f7926 	beq	r2,zero,1000e800 <__subdf3+0x4bc>
1000ea1c:	5804977a 	slli	r2,r11,29
1000ea20:	00c80034 	movhi	r3,8192
1000ea24:	18ffffc4 	addi	r3,r3,-1
1000ea28:	30c6703a 	and	r3,r6,r3
1000ea2c:	10c4b03a 	or	r2,r2,r3
1000ea30:	5826d0fa 	srli	r19,r11,3
1000ea34:	3825883a 	mov	r18,r7
1000ea38:	003f2106 	br	1000e6c0 <__subdf3+0x37c>
1000ea3c:	5804977a 	slli	r2,r11,29
1000ea40:	00c80034 	movhi	r3,8192
1000ea44:	18ffffc4 	addi	r3,r3,-1
1000ea48:	30c6703a 	and	r3,r6,r3
1000ea4c:	10c4b03a 	or	r2,r2,r3
1000ea50:	5826d0fa 	srli	r19,r11,3
1000ea54:	003f4706 	br	1000e774 <__subdf3+0x430>
1000ea58:	6ba3c83a 	sub	r17,r13,r14
1000ea5c:	62c9c83a 	sub	r4,r12,r11
1000ea60:	6c5b803a 	cmpltu	r13,r13,r17
1000ea64:	2349c83a 	sub	r4,r4,r13
1000ea68:	04000044 	movi	r16,1
1000ea6c:	003e6a06 	br	1000e418 <__subdf3+0xd4>
1000ea70:	6004977a 	slli	r2,r12,29
1000ea74:	00c80034 	movhi	r3,8192
1000ea78:	18ffffc4 	addi	r3,r3,-1
1000ea7c:	20c8703a 	and	r4,r4,r3
1000ea80:	1104b03a 	or	r2,r2,r4
1000ea84:	6026d0fa 	srli	r19,r12,3
1000ea88:	003f0b06 	br	1000e6b8 <__subdf3+0x374>
1000ea8c:	6366b03a 	or	r19,r12,r13
1000ea90:	9822c03a 	cmpne	r17,r19,zero
1000ea94:	003f9406 	br	1000e8e8 <__subdf3+0x5a4>
1000ea98:	6004977a 	slli	r2,r12,29
1000ea9c:	00c80034 	movhi	r3,8192
1000eaa0:	18ffffc4 	addi	r3,r3,-1
1000eaa4:	20c8703a 	and	r4,r4,r3
1000eaa8:	1104b03a 	or	r2,r2,r4
1000eaac:	6026d0fa 	srli	r19,r12,3
1000eab0:	003f3006 	br	1000e774 <__subdf3+0x430>
1000eab4:	1881ffe0 	cmpeqi	r2,r3,2047
1000eab8:	103f101e 	bne	r2,zero,1000e6fc <__subdf3+0x3b8>
1000eabc:	6b9d883a 	add	r14,r13,r14
1000eac0:	62c9883a 	add	r4,r12,r11
1000eac4:	7345803a 	cmpltu	r2,r14,r13
1000eac8:	2085883a 	add	r2,r4,r2
1000eacc:	102297fa 	slli	r17,r2,31
1000ead0:	701cd07a 	srli	r14,r14,1
1000ead4:	1008d07a 	srli	r4,r2,1
1000ead8:	1821883a 	mov	r16,r3
1000eadc:	8ba2b03a 	or	r17,r17,r14
1000eae0:	003eee06 	br	1000e69c <__subdf3+0x358>
1000eae4:	7363c83a 	sub	r17,r14,r13
1000eae8:	5b09c83a 	sub	r4,r11,r12
1000eaec:	7467803a 	cmpltu	r19,r14,r17
1000eaf0:	24e7c83a 	sub	r19,r4,r19
1000eaf4:	3825883a 	mov	r18,r7
1000eaf8:	003e4c06 	br	1000e42c <__subdf3+0xe8>
1000eafc:	183f031e 	bne	r3,zero,1000e70c <__subdf3+0x3c8>
1000eb00:	10005d26 	beq	r2,zero,1000ec78 <__subdf3+0x934>
1000eb04:	00880034 	movhi	r2,8192
1000eb08:	5806977a 	slli	r3,r11,29
1000eb0c:	10bfffc4 	addi	r2,r2,-1
1000eb10:	3084703a 	and	r2,r6,r2
1000eb14:	10c4b03a 	or	r2,r2,r3
1000eb18:	5826d0fa 	srli	r19,r11,3
1000eb1c:	3825883a 	mov	r18,r7
1000eb20:	003f1406 	br	1000e774 <__subdf3+0x430>
1000eb24:	00880034 	movhi	r2,8192
1000eb28:	5806977a 	slli	r3,r11,29
1000eb2c:	10bfffc4 	addi	r2,r2,-1
1000eb30:	3084703a 	and	r2,r6,r2
1000eb34:	10c4b03a 	or	r2,r2,r3
1000eb38:	5826d0fa 	srli	r19,r11,3
1000eb3c:	003f0d06 	br	1000e774 <__subdf3+0x430>
1000eb40:	6ba3c83a 	sub	r17,r13,r14
1000eb44:	62c5c83a 	sub	r2,r12,r11
1000eb48:	6c49803a 	cmpltu	r4,r13,r17
1000eb4c:	1109c83a 	sub	r4,r2,r4
1000eb50:	2080202c 	andhi	r2,r4,128
1000eb54:	10003a26 	beq	r2,zero,1000ec40 <__subdf3+0x8fc>
1000eb58:	7363c83a 	sub	r17,r14,r13
1000eb5c:	5b09c83a 	sub	r4,r11,r12
1000eb60:	745d803a 	cmpltu	r14,r14,r17
1000eb64:	2389c83a 	sub	r4,r4,r14
1000eb68:	3825883a 	mov	r18,r7
1000eb6c:	003e4806 	br	1000e490 <__subdf3+0x14c>
1000eb70:	6362b03a 	or	r17,r12,r13
1000eb74:	8822c03a 	cmpne	r17,r17,zero
1000eb78:	003f4506 	br	1000e890 <__subdf3+0x54c>
1000eb7c:	6004977a 	slli	r2,r12,29
1000eb80:	00c80034 	movhi	r3,8192
1000eb84:	18ffffc4 	addi	r3,r3,-1
1000eb88:	20c6703a 	and	r3,r4,r3
1000eb8c:	10c4b03a 	or	r2,r2,r3
1000eb90:	6026d0fa 	srli	r19,r12,3
1000eb94:	003ef706 	br	1000e774 <__subdf3+0x430>
1000eb98:	40bff804 	addi	r2,r8,-32
1000eb9c:	40c00820 	cmpeqi	r3,r8,32
1000eba0:	6084d83a 	srl	r2,r12,r2
1000eba4:	1800041e 	bne	r3,zero,1000ebb8 <__subdf3+0x874>
1000eba8:	04c01004 	movi	r19,64
1000ebac:	9a11c83a 	sub	r8,r19,r8
1000ebb0:	6226983a 	sll	r19,r12,r8
1000ebb4:	6cdab03a 	or	r13,r13,r19
1000ebb8:	6822c03a 	cmpne	r17,r13,zero
1000ebbc:	88a2b03a 	or	r17,r17,r2
1000ebc0:	003f4906 	br	1000e8e8 <__subdf3+0x5a4>
1000ebc4:	7363c83a 	sub	r17,r14,r13
1000ebc8:	5b09c83a 	sub	r4,r11,r12
1000ebcc:	745d803a 	cmpltu	r14,r14,r17
1000ebd0:	2389c83a 	sub	r4,r4,r14
1000ebd4:	04000044 	movi	r16,1
1000ebd8:	003e0f06 	br	1000e418 <__subdf3+0xd4>
1000ebdc:	00880034 	movhi	r2,8192
1000ebe0:	5806977a 	slli	r3,r11,29
1000ebe4:	10bfffc4 	addi	r2,r2,-1
1000ebe8:	3084703a 	and	r2,r6,r2
1000ebec:	10c4b03a 	or	r2,r2,r3
1000ebf0:	5826d0fa 	srli	r19,r11,3
1000ebf4:	003eb206 	br	1000e6c0 <__subdf3+0x37c>
1000ebf8:	6ba3883a 	add	r17,r13,r14
1000ebfc:	62c9883a 	add	r4,r12,r11
1000ec00:	8b5b803a 	cmpltu	r13,r17,r13
1000ec04:	2349883a 	add	r4,r4,r13
1000ec08:	2080202c 	andhi	r2,r4,128
1000ec0c:	103ea326 	beq	r2,zero,1000e69c <__subdf3+0x358>
1000ec10:	00bfe034 	movhi	r2,65408
1000ec14:	10bfffc4 	addi	r2,r2,-1
1000ec18:	2088703a 	and	r4,r4,r2
1000ec1c:	04000044 	movi	r16,1
1000ec20:	003e9e06 	br	1000e69c <__subdf3+0x358>
1000ec24:	00880034 	movhi	r2,8192
1000ec28:	5806977a 	slli	r3,r11,29
1000ec2c:	10bfffc4 	addi	r2,r2,-1
1000ec30:	3084703a 	and	r2,r6,r2
1000ec34:	10c4b03a 	or	r2,r2,r3
1000ec38:	5826d0fa 	srli	r19,r11,3
1000ec3c:	003e9e06 	br	1000e6b8 <__subdf3+0x374>
1000ec40:	8904b03a 	or	r2,r17,r4
1000ec44:	103eee26 	beq	r2,zero,1000e800 <__subdf3+0x4bc>
1000ec48:	003e9406 	br	1000e69c <__subdf3+0x358>
1000ec4c:	40bff804 	addi	r2,r8,-32
1000ec50:	40c00820 	cmpeqi	r3,r8,32
1000ec54:	6084d83a 	srl	r2,r12,r2
1000ec58:	1800041e 	bne	r3,zero,1000ec6c <__subdf3+0x928>
1000ec5c:	04c01004 	movi	r19,64
1000ec60:	9a11c83a 	sub	r8,r19,r8
1000ec64:	6226983a 	sll	r19,r12,r8
1000ec68:	6cdab03a 	or	r13,r13,r19
1000ec6c:	6822c03a 	cmpne	r17,r13,zero
1000ec70:	88a2b03a 	or	r17,r17,r2
1000ec74:	003f0606 	br	1000e890 <__subdf3+0x54c>
1000ec78:	04c00434 	movhi	r19,16
1000ec7c:	9cffffc4 	addi	r19,r19,-1
1000ec80:	0025883a 	mov	r18,zero
1000ec84:	00bfffc4 	movi	r2,-1
1000ec88:	003ebc06 	br	1000e77c <__subdf3+0x438>
1000ec8c:	6ba3883a 	add	r17,r13,r14
1000ec90:	62c9883a 	add	r4,r12,r11
1000ec94:	8b9d803a 	cmpltu	r14,r17,r14
1000ec98:	2389883a 	add	r4,r4,r14
1000ec9c:	003e7c06 	br	1000e690 <__subdf3+0x34c>
1000eca0:	0005883a 	mov	r2,zero
1000eca4:	0201ffc4 	movi	r8,2047
1000eca8:	0009883a 	mov	r4,zero
1000ecac:	003e0f06 	br	1000e4ec <__subdf3+0x1a8>

1000ecb0 <__unorddf2>:
1000ecb0:	2806d53a 	srli	r3,r5,20
1000ecb4:	3810d53a 	srli	r8,r7,20
1000ecb8:	00800434 	movhi	r2,16
1000ecbc:	18c1ffcc 	andi	r3,r3,2047
1000ecc0:	10bfffc4 	addi	r2,r2,-1
1000ecc4:	18c1ffd8 	cmpnei	r3,r3,2047
1000ecc8:	288a703a 	and	r5,r5,r2
1000eccc:	388e703a 	and	r7,r7,r2
1000ecd0:	4201ffcc 	andi	r8,r8,2047
1000ecd4:	18000426 	beq	r3,zero,1000ece8 <__unorddf2+0x38>
1000ecd8:	4201ffd8 	cmpnei	r8,r8,2047
1000ecdc:	40000626 	beq	r8,zero,1000ecf8 <__unorddf2+0x48>
1000ece0:	0005883a 	mov	r2,zero
1000ece4:	f800283a 	ret
1000ece8:	214ab03a 	or	r5,r4,r5
1000ecec:	283ffa26 	beq	r5,zero,1000ecd8 <__unorddf2+0x28>
1000ecf0:	00800044 	movi	r2,1
1000ecf4:	f800283a 	ret
1000ecf8:	398eb03a 	or	r7,r7,r6
1000ecfc:	3804c03a 	cmpne	r2,r7,zero
1000ed00:	f800283a 	ret

1000ed04 <__fixdfsi>:
1000ed04:	280cd53a 	srli	r6,r5,20
1000ed08:	00c00434 	movhi	r3,16
1000ed0c:	18ffffc4 	addi	r3,r3,-1
1000ed10:	3181ffcc 	andi	r6,r6,2047
1000ed14:	31c0ffd0 	cmplti	r7,r6,1023
1000ed18:	28c6703a 	and	r3,r5,r3
1000ed1c:	280ad7fa 	srli	r5,r5,31
1000ed20:	3800061e 	bne	r7,zero,1000ed3c <__fixdfsi+0x38>
1000ed24:	30810790 	cmplti	r2,r6,1054
1000ed28:	1000061e 	bne	r2,zero,1000ed44 <__fixdfsi+0x40>
1000ed2c:	00a00034 	movhi	r2,32768
1000ed30:	10bfffc4 	addi	r2,r2,-1
1000ed34:	2885883a 	add	r2,r5,r2
1000ed38:	f800283a 	ret
1000ed3c:	0005883a 	mov	r2,zero
1000ed40:	f800283a 	ret
1000ed44:	00810cc4 	movi	r2,1075
1000ed48:	118fc83a 	sub	r7,r2,r6
1000ed4c:	38800808 	cmpgei	r2,r7,32
1000ed50:	18c00434 	orhi	r3,r3,16
1000ed54:	1000071e 	bne	r2,zero,1000ed74 <__fixdfsi+0x70>
1000ed58:	30befb44 	addi	r2,r6,-1043
1000ed5c:	1886983a 	sll	r3,r3,r2
1000ed60:	21c4d83a 	srl	r2,r4,r7
1000ed64:	1884b03a 	or	r2,r3,r2
1000ed68:	283ff526 	beq	r5,zero,1000ed40 <__fixdfsi+0x3c>
1000ed6c:	0085c83a 	sub	r2,zero,r2
1000ed70:	f800283a 	ret
1000ed74:	008104c4 	movi	r2,1043
1000ed78:	1185c83a 	sub	r2,r2,r6
1000ed7c:	1884d83a 	srl	r2,r3,r2
1000ed80:	003ff906 	br	1000ed68 <__fixdfsi+0x64>

1000ed84 <__floatsidf>:
1000ed84:	defffd04 	addi	sp,sp,-12
1000ed88:	dfc00215 	stw	ra,8(sp)
1000ed8c:	dc400115 	stw	r17,4(sp)
1000ed90:	dc000015 	stw	r16,0(sp)
1000ed94:	20001326 	beq	r4,zero,1000ede4 <__floatsidf+0x60>
1000ed98:	2021883a 	mov	r16,r4
1000ed9c:	2022d7fa 	srli	r17,r4,31
1000eda0:	20002116 	blt	r4,zero,1000ee28 <__floatsidf+0xa4>
1000eda4:	8009883a 	mov	r4,r16
1000eda8:	000eee80 	call	1000eee8 <__clzsi2>
1000edac:	01010784 	movi	r4,1054
1000edb0:	2089c83a 	sub	r4,r4,r2
1000edb4:	10c002c8 	cmpgei	r3,r2,11
1000edb8:	2101ffcc 	andi	r4,r4,2047
1000edbc:	18001c1e 	bne	r3,zero,1000ee30 <__floatsidf+0xac>
1000edc0:	018002c4 	movi	r6,11
1000edc4:	308dc83a 	sub	r6,r6,r2
1000edc8:	818ad83a 	srl	r5,r16,r6
1000edcc:	00c00434 	movhi	r3,16
1000edd0:	10800544 	addi	r2,r2,21
1000edd4:	18ffffc4 	addi	r3,r3,-1
1000edd8:	8084983a 	sll	r2,r16,r2
1000eddc:	28ca703a 	and	r5,r5,r3
1000ede0:	00000406 	br	1000edf4 <__floatsidf+0x70>
1000ede4:	0023883a 	mov	r17,zero
1000ede8:	0009883a 	mov	r4,zero
1000edec:	000b883a 	mov	r5,zero
1000edf0:	0005883a 	mov	r2,zero
1000edf4:	2008953a 	slli	r4,r4,20
1000edf8:	8c403fcc 	andi	r17,r17,255
1000edfc:	01800434 	movhi	r6,16
1000ee00:	31bfffc4 	addi	r6,r6,-1
1000ee04:	880697fa 	slli	r3,r17,31
1000ee08:	298a703a 	and	r5,r5,r6
1000ee0c:	290ab03a 	or	r5,r5,r4
1000ee10:	28c6b03a 	or	r3,r5,r3
1000ee14:	dfc00217 	ldw	ra,8(sp)
1000ee18:	dc400117 	ldw	r17,4(sp)
1000ee1c:	dc000017 	ldw	r16,0(sp)
1000ee20:	dec00304 	addi	sp,sp,12
1000ee24:	f800283a 	ret
1000ee28:	0121c83a 	sub	r16,zero,r4
1000ee2c:	003fdd06 	br	1000eda4 <__floatsidf+0x20>
1000ee30:	10bffd44 	addi	r2,r2,-11
1000ee34:	808a983a 	sll	r5,r16,r2
1000ee38:	00800434 	movhi	r2,16
1000ee3c:	10bfffc4 	addi	r2,r2,-1
1000ee40:	288a703a 	and	r5,r5,r2
1000ee44:	0005883a 	mov	r2,zero
1000ee48:	003fea06 	br	1000edf4 <__floatsidf+0x70>

1000ee4c <__floatunsidf>:
1000ee4c:	defffe04 	addi	sp,sp,-8
1000ee50:	dc000015 	stw	r16,0(sp)
1000ee54:	dfc00115 	stw	ra,4(sp)
1000ee58:	2021883a 	mov	r16,r4
1000ee5c:	20000f26 	beq	r4,zero,1000ee9c <__floatunsidf+0x50>
1000ee60:	000eee80 	call	1000eee8 <__clzsi2>
1000ee64:	01010784 	movi	r4,1054
1000ee68:	2089c83a 	sub	r4,r4,r2
1000ee6c:	10c002c8 	cmpgei	r3,r2,11
1000ee70:	2101ffcc 	andi	r4,r4,2047
1000ee74:	1800151e 	bne	r3,zero,1000eecc <__floatunsidf+0x80>
1000ee78:	00c002c4 	movi	r3,11
1000ee7c:	1887c83a 	sub	r3,r3,r2
1000ee80:	80c6d83a 	srl	r3,r16,r3
1000ee84:	01400434 	movhi	r5,16
1000ee88:	10800544 	addi	r2,r2,21
1000ee8c:	297fffc4 	addi	r5,r5,-1
1000ee90:	80a0983a 	sll	r16,r16,r2
1000ee94:	1944703a 	and	r2,r3,r5
1000ee98:	00000206 	br	1000eea4 <__floatunsidf+0x58>
1000ee9c:	0009883a 	mov	r4,zero
1000eea0:	0005883a 	mov	r2,zero
1000eea4:	2008953a 	slli	r4,r4,20
1000eea8:	00c00434 	movhi	r3,16
1000eeac:	18ffffc4 	addi	r3,r3,-1
1000eeb0:	10c6703a 	and	r3,r2,r3
1000eeb4:	1906b03a 	or	r3,r3,r4
1000eeb8:	8005883a 	mov	r2,r16
1000eebc:	dfc00117 	ldw	ra,4(sp)
1000eec0:	dc000017 	ldw	r16,0(sp)
1000eec4:	dec00204 	addi	sp,sp,8
1000eec8:	f800283a 	ret
1000eecc:	10bffd44 	addi	r2,r2,-11
1000eed0:	8084983a 	sll	r2,r16,r2
1000eed4:	00c00434 	movhi	r3,16
1000eed8:	18ffffc4 	addi	r3,r3,-1
1000eedc:	10c4703a 	and	r2,r2,r3
1000eee0:	0021883a 	mov	r16,zero
1000eee4:	003fef06 	br	1000eea4 <__floatunsidf+0x58>

1000eee8 <__clzsi2>:
1000eee8:	00bfffd4 	movui	r2,65535
1000eeec:	11000b36 	bltu	r2,r4,1000ef1c <__clzsi2+0x34>
1000eef0:	20804030 	cmpltui	r2,r4,256
1000eef4:	1000071e 	bne	r2,zero,1000ef14 <__clzsi2+0x2c>
1000eef8:	2008d23a 	srli	r4,r4,8
1000eefc:	01400604 	movi	r5,24
1000ef00:	00c40074 	movhi	r3,4097
1000ef04:	20c7883a 	add	r3,r4,r3
1000ef08:	18879d43 	ldbu	r2,7797(r3)
1000ef0c:	2885c83a 	sub	r2,r5,r2
1000ef10:	f800283a 	ret
1000ef14:	01400804 	movi	r5,32
1000ef18:	003ff906 	br	1000ef00 <__clzsi2+0x18>
1000ef1c:	00804034 	movhi	r2,256
1000ef20:	20800336 	bltu	r4,r2,1000ef30 <__clzsi2+0x48>
1000ef24:	2008d63a 	srli	r4,r4,24
1000ef28:	01400204 	movi	r5,8
1000ef2c:	003ff406 	br	1000ef00 <__clzsi2+0x18>
1000ef30:	2008d43a 	srli	r4,r4,16
1000ef34:	01400404 	movi	r5,16
1000ef38:	003ff106 	br	1000ef00 <__clzsi2+0x18>

1000ef3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef3c:	defffe04 	addi	sp,sp,-8
1000ef40:	dfc00115 	stw	ra,4(sp)
1000ef44:	df000015 	stw	fp,0(sp)
1000ef48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ef4c:	d0a00a17 	ldw	r2,-32728(gp)
1000ef50:	10000326 	beq	r2,zero,1000ef60 <alt_get_errno+0x24>
1000ef54:	d0a00a17 	ldw	r2,-32728(gp)
1000ef58:	103ee83a 	callr	r2
1000ef5c:	00000106 	br	1000ef64 <alt_get_errno+0x28>
1000ef60:	d0a89a04 	addi	r2,gp,-23960
}
1000ef64:	e037883a 	mov	sp,fp
1000ef68:	dfc00117 	ldw	ra,4(sp)
1000ef6c:	df000017 	ldw	fp,0(sp)
1000ef70:	dec00204 	addi	sp,sp,8
1000ef74:	f800283a 	ret

1000ef78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000ef78:	defffb04 	addi	sp,sp,-20
1000ef7c:	dfc00415 	stw	ra,16(sp)
1000ef80:	df000315 	stw	fp,12(sp)
1000ef84:	df000304 	addi	fp,sp,12
1000ef88:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000ef8c:	e0bffd17 	ldw	r2,-12(fp)
1000ef90:	10000616 	blt	r2,zero,1000efac <close+0x34>
1000ef94:	e0bffd17 	ldw	r2,-12(fp)
1000ef98:	10c00324 	muli	r3,r2,12
1000ef9c:	00840074 	movhi	r2,4097
1000efa0:	108beb04 	addi	r2,r2,12204
1000efa4:	1885883a 	add	r2,r3,r2
1000efa8:	00000106 	br	1000efb0 <close+0x38>
1000efac:	0005883a 	mov	r2,zero
1000efb0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
1000efb4:	e0bfff17 	ldw	r2,-4(fp)
1000efb8:	10001926 	beq	r2,zero,1000f020 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000efbc:	e0bfff17 	ldw	r2,-4(fp)
1000efc0:	10800017 	ldw	r2,0(r2)
1000efc4:	10800417 	ldw	r2,16(r2)
1000efc8:	10000626 	beq	r2,zero,1000efe4 <close+0x6c>
1000efcc:	e0bfff17 	ldw	r2,-4(fp)
1000efd0:	10800017 	ldw	r2,0(r2)
1000efd4:	10800417 	ldw	r2,16(r2)
1000efd8:	e13fff17 	ldw	r4,-4(fp)
1000efdc:	103ee83a 	callr	r2
1000efe0:	00000106 	br	1000efe8 <close+0x70>
1000efe4:	0005883a 	mov	r2,zero
1000efe8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000efec:	e13ffd17 	ldw	r4,-12(fp)
1000eff0:	000f6380 	call	1000f638 <alt_release_fd>
    if (rval < 0)
1000eff4:	e0bffe17 	ldw	r2,-8(fp)
1000eff8:	1000070e 	bge	r2,zero,1000f018 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000effc:	000ef3c0 	call	1000ef3c <alt_get_errno>
1000f000:	1007883a 	mov	r3,r2
1000f004:	e0bffe17 	ldw	r2,-8(fp)
1000f008:	0085c83a 	sub	r2,zero,r2
1000f00c:	18800015 	stw	r2,0(r3)
      return -1;
1000f010:	00bfffc4 	movi	r2,-1
1000f014:	00000706 	br	1000f034 <close+0xbc>
    }
    return 0;
1000f018:	0005883a 	mov	r2,zero
1000f01c:	00000506 	br	1000f034 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f020:	000ef3c0 	call	1000ef3c <alt_get_errno>
1000f024:	1007883a 	mov	r3,r2
1000f028:	00801444 	movi	r2,81
1000f02c:	18800015 	stw	r2,0(r3)
    return -1;
1000f030:	00bfffc4 	movi	r2,-1
  }
}
1000f034:	e037883a 	mov	sp,fp
1000f038:	dfc00117 	ldw	ra,4(sp)
1000f03c:	df000017 	ldw	fp,0(sp)
1000f040:	dec00204 	addi	sp,sp,8
1000f044:	f800283a 	ret

1000f048 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f048:	defffc04 	addi	sp,sp,-16
1000f04c:	df000315 	stw	fp,12(sp)
1000f050:	df000304 	addi	fp,sp,12
1000f054:	e13fff15 	stw	r4,-4(fp)
1000f058:	e17ffe15 	stw	r5,-8(fp)
1000f05c:	e1bffd15 	stw	r6,-12(fp)
  return len;
1000f060:	e0bffd17 	ldw	r2,-12(fp)
}
1000f064:	e037883a 	mov	sp,fp
1000f068:	df000017 	ldw	fp,0(sp)
1000f06c:	dec00104 	addi	sp,sp,4
1000f070:	f800283a 	ret

1000f074 <alt_get_errno>:
{
1000f074:	defffe04 	addi	sp,sp,-8
1000f078:	dfc00115 	stw	ra,4(sp)
1000f07c:	df000015 	stw	fp,0(sp)
1000f080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f084:	d0a00a17 	ldw	r2,-32728(gp)
1000f088:	10000326 	beq	r2,zero,1000f098 <alt_get_errno+0x24>
1000f08c:	d0a00a17 	ldw	r2,-32728(gp)
1000f090:	103ee83a 	callr	r2
1000f094:	00000106 	br	1000f09c <alt_get_errno+0x28>
1000f098:	d0a89a04 	addi	r2,gp,-23960
}
1000f09c:	e037883a 	mov	sp,fp
1000f0a0:	dfc00117 	ldw	ra,4(sp)
1000f0a4:	df000017 	ldw	fp,0(sp)
1000f0a8:	dec00204 	addi	sp,sp,8
1000f0ac:	f800283a 	ret

1000f0b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f0b0:	defffb04 	addi	sp,sp,-20
1000f0b4:	dfc00415 	stw	ra,16(sp)
1000f0b8:	df000315 	stw	fp,12(sp)
1000f0bc:	df000304 	addi	fp,sp,12
1000f0c0:	e13ffe15 	stw	r4,-8(fp)
1000f0c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f0c8:	e0bffe17 	ldw	r2,-8(fp)
1000f0cc:	10000616 	blt	r2,zero,1000f0e8 <fstat+0x38>
1000f0d0:	e0bffe17 	ldw	r2,-8(fp)
1000f0d4:	10c00324 	muli	r3,r2,12
1000f0d8:	00840074 	movhi	r2,4097
1000f0dc:	108beb04 	addi	r2,r2,12204
1000f0e0:	1885883a 	add	r2,r3,r2
1000f0e4:	00000106 	br	1000f0ec <fstat+0x3c>
1000f0e8:	0005883a 	mov	r2,zero
1000f0ec:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f0f0:	e0bfff17 	ldw	r2,-4(fp)
1000f0f4:	10001026 	beq	r2,zero,1000f138 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f0f8:	e0bfff17 	ldw	r2,-4(fp)
1000f0fc:	10800017 	ldw	r2,0(r2)
1000f100:	10800817 	ldw	r2,32(r2)
1000f104:	10000726 	beq	r2,zero,1000f124 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000f108:	e0bfff17 	ldw	r2,-4(fp)
1000f10c:	10800017 	ldw	r2,0(r2)
1000f110:	10800817 	ldw	r2,32(r2)
1000f114:	e17ffd17 	ldw	r5,-12(fp)
1000f118:	e13fff17 	ldw	r4,-4(fp)
1000f11c:	103ee83a 	callr	r2
1000f120:	00000a06 	br	1000f14c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f124:	e0bffd17 	ldw	r2,-12(fp)
1000f128:	00c80004 	movi	r3,8192
1000f12c:	10c00115 	stw	r3,4(r2)
      return 0;
1000f130:	0005883a 	mov	r2,zero
1000f134:	00000506 	br	1000f14c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f138:	000f0740 	call	1000f074 <alt_get_errno>
1000f13c:	1007883a 	mov	r3,r2
1000f140:	00801444 	movi	r2,81
1000f144:	18800015 	stw	r2,0(r3)
    return -1;
1000f148:	00bfffc4 	movi	r2,-1
  }
}
1000f14c:	e037883a 	mov	sp,fp
1000f150:	dfc00117 	ldw	ra,4(sp)
1000f154:	df000017 	ldw	fp,0(sp)
1000f158:	dec00204 	addi	sp,sp,8
1000f15c:	f800283a 	ret

1000f160 <alt_get_errno>:
{
1000f160:	defffe04 	addi	sp,sp,-8
1000f164:	dfc00115 	stw	ra,4(sp)
1000f168:	df000015 	stw	fp,0(sp)
1000f16c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f170:	d0a00a17 	ldw	r2,-32728(gp)
1000f174:	10000326 	beq	r2,zero,1000f184 <alt_get_errno+0x24>
1000f178:	d0a00a17 	ldw	r2,-32728(gp)
1000f17c:	103ee83a 	callr	r2
1000f180:	00000106 	br	1000f188 <alt_get_errno+0x28>
1000f184:	d0a89a04 	addi	r2,gp,-23960
}
1000f188:	e037883a 	mov	sp,fp
1000f18c:	dfc00117 	ldw	ra,4(sp)
1000f190:	df000017 	ldw	fp,0(sp)
1000f194:	dec00204 	addi	sp,sp,8
1000f198:	f800283a 	ret

1000f19c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f19c:	deffea04 	addi	sp,sp,-88
1000f1a0:	dfc01515 	stw	ra,84(sp)
1000f1a4:	df001415 	stw	fp,80(sp)
1000f1a8:	df001404 	addi	fp,sp,80
1000f1ac:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f1b0:	e0bfec17 	ldw	r2,-80(fp)
1000f1b4:	10000616 	blt	r2,zero,1000f1d0 <isatty+0x34>
1000f1b8:	e0bfec17 	ldw	r2,-80(fp)
1000f1bc:	10c00324 	muli	r3,r2,12
1000f1c0:	00840074 	movhi	r2,4097
1000f1c4:	108beb04 	addi	r2,r2,12204
1000f1c8:	1885883a 	add	r2,r3,r2
1000f1cc:	00000106 	br	1000f1d4 <isatty+0x38>
1000f1d0:	0005883a 	mov	r2,zero
1000f1d4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f1d8:	e0bfff17 	ldw	r2,-4(fp)
1000f1dc:	10000e26 	beq	r2,zero,1000f218 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f1e0:	e0bfff17 	ldw	r2,-4(fp)
1000f1e4:	10800017 	ldw	r2,0(r2)
1000f1e8:	10800817 	ldw	r2,32(r2)
1000f1ec:	1000021e 	bne	r2,zero,1000f1f8 <isatty+0x5c>
    {
      return 1;
1000f1f0:	00800044 	movi	r2,1
1000f1f4:	00000d06 	br	1000f22c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f1f8:	e0bfed04 	addi	r2,fp,-76
1000f1fc:	100b883a 	mov	r5,r2
1000f200:	e13fec17 	ldw	r4,-80(fp)
1000f204:	000f0b00 	call	1000f0b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f208:	e0bfee17 	ldw	r2,-72(fp)
1000f20c:	10880020 	cmpeqi	r2,r2,8192
1000f210:	10803fcc 	andi	r2,r2,255
1000f214:	00000506 	br	1000f22c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f218:	000f1600 	call	1000f160 <alt_get_errno>
1000f21c:	1007883a 	mov	r3,r2
1000f220:	00801444 	movi	r2,81
1000f224:	18800015 	stw	r2,0(r3)
    return 0;
1000f228:	0005883a 	mov	r2,zero
  }
}
1000f22c:	e037883a 	mov	sp,fp
1000f230:	dfc00117 	ldw	ra,4(sp)
1000f234:	df000017 	ldw	fp,0(sp)
1000f238:	dec00204 	addi	sp,sp,8
1000f23c:	f800283a 	ret

1000f240 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f240:	defffc04 	addi	sp,sp,-16
1000f244:	df000315 	stw	fp,12(sp)
1000f248:	df000304 	addi	fp,sp,12
1000f24c:	e13fff15 	stw	r4,-4(fp)
1000f250:	e17ffe15 	stw	r5,-8(fp)
1000f254:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
1000f258:	e0fffe17 	ldw	r3,-8(fp)
1000f25c:	e0bfff17 	ldw	r2,-4(fp)
1000f260:	18800c26 	beq	r3,r2,1000f294 <alt_load_section+0x54>
  {
    while( to != end )
1000f264:	00000806 	br	1000f288 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f268:	e0ffff17 	ldw	r3,-4(fp)
1000f26c:	18800104 	addi	r2,r3,4
1000f270:	e0bfff15 	stw	r2,-4(fp)
1000f274:	e0bffe17 	ldw	r2,-8(fp)
1000f278:	11000104 	addi	r4,r2,4
1000f27c:	e13ffe15 	stw	r4,-8(fp)
1000f280:	18c00017 	ldw	r3,0(r3)
1000f284:	10c00015 	stw	r3,0(r2)
    while( to != end )
1000f288:	e0fffe17 	ldw	r3,-8(fp)
1000f28c:	e0bffd17 	ldw	r2,-12(fp)
1000f290:	18bff51e 	bne	r3,r2,1000f268 <alt_load_section+0x28>
    }
  }
}
1000f294:	0001883a 	nop
1000f298:	e037883a 	mov	sp,fp
1000f29c:	df000017 	ldw	fp,0(sp)
1000f2a0:	dec00104 	addi	sp,sp,4
1000f2a4:	f800283a 	ret

1000f2a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f2a8:	defffe04 	addi	sp,sp,-8
1000f2ac:	dfc00115 	stw	ra,4(sp)
1000f2b0:	df000015 	stw	fp,0(sp)
1000f2b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f2b8:	01840074 	movhi	r6,4097
1000f2bc:	31907204 	addi	r6,r6,16840
1000f2c0:	01440074 	movhi	r5,4097
1000f2c4:	2947eb04 	addi	r5,r5,8108
1000f2c8:	01040074 	movhi	r4,4097
1000f2cc:	21107204 	addi	r4,r4,16840
1000f2d0:	000f2400 	call	1000f240 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f2d4:	01840034 	movhi	r6,4096
1000f2d8:	31808e04 	addi	r6,r6,568
1000f2dc:	01440034 	movhi	r5,4096
1000f2e0:	29400804 	addi	r5,r5,32
1000f2e4:	01040034 	movhi	r4,4096
1000f2e8:	21000804 	addi	r4,r4,32
1000f2ec:	000f2400 	call	1000f240 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f2f0:	01840074 	movhi	r6,4097
1000f2f4:	3187eb04 	addi	r6,r6,8108
1000f2f8:	01440074 	movhi	r5,4097
1000f2fc:	2945c604 	addi	r5,r5,5912
1000f300:	01040074 	movhi	r4,4097
1000f304:	2105c604 	addi	r4,r4,5912
1000f308:	000f2400 	call	1000f240 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f30c:	001071c0 	call	1001071c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f310:	00109040 	call	10010904 <alt_icache_flush_all>
}
1000f314:	0001883a 	nop
1000f318:	e037883a 	mov	sp,fp
1000f31c:	dfc00117 	ldw	ra,4(sp)
1000f320:	df000017 	ldw	fp,0(sp)
1000f324:	dec00204 	addi	sp,sp,8
1000f328:	f800283a 	ret

1000f32c <alt_get_errno>:
{
1000f32c:	defffe04 	addi	sp,sp,-8
1000f330:	dfc00115 	stw	ra,4(sp)
1000f334:	df000015 	stw	fp,0(sp)
1000f338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f33c:	d0a00a17 	ldw	r2,-32728(gp)
1000f340:	10000326 	beq	r2,zero,1000f350 <alt_get_errno+0x24>
1000f344:	d0a00a17 	ldw	r2,-32728(gp)
1000f348:	103ee83a 	callr	r2
1000f34c:	00000106 	br	1000f354 <alt_get_errno+0x28>
1000f350:	d0a89a04 	addi	r2,gp,-23960
}
1000f354:	e037883a 	mov	sp,fp
1000f358:	dfc00117 	ldw	ra,4(sp)
1000f35c:	df000017 	ldw	fp,0(sp)
1000f360:	dec00204 	addi	sp,sp,8
1000f364:	f800283a 	ret

1000f368 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f368:	defff904 	addi	sp,sp,-28
1000f36c:	dfc00615 	stw	ra,24(sp)
1000f370:	df000515 	stw	fp,20(sp)
1000f374:	df000504 	addi	fp,sp,20
1000f378:	e13ffd15 	stw	r4,-12(fp)
1000f37c:	e17ffc15 	stw	r5,-16(fp)
1000f380:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f384:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f388:	e0bffd17 	ldw	r2,-12(fp)
1000f38c:	10000616 	blt	r2,zero,1000f3a8 <lseek+0x40>
1000f390:	e0bffd17 	ldw	r2,-12(fp)
1000f394:	10c00324 	muli	r3,r2,12
1000f398:	00840074 	movhi	r2,4097
1000f39c:	108beb04 	addi	r2,r2,12204
1000f3a0:	1885883a 	add	r2,r3,r2
1000f3a4:	00000106 	br	1000f3ac <lseek+0x44>
1000f3a8:	0005883a 	mov	r2,zero
1000f3ac:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
1000f3b0:	e0bffe17 	ldw	r2,-8(fp)
1000f3b4:	10001026 	beq	r2,zero,1000f3f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f3b8:	e0bffe17 	ldw	r2,-8(fp)
1000f3bc:	10800017 	ldw	r2,0(r2)
1000f3c0:	10800717 	ldw	r2,28(r2)
1000f3c4:	10000926 	beq	r2,zero,1000f3ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f3c8:	e0bffe17 	ldw	r2,-8(fp)
1000f3cc:	10800017 	ldw	r2,0(r2)
1000f3d0:	10800717 	ldw	r2,28(r2)
1000f3d4:	e1bffb17 	ldw	r6,-20(fp)
1000f3d8:	e17ffc17 	ldw	r5,-16(fp)
1000f3dc:	e13ffe17 	ldw	r4,-8(fp)
1000f3e0:	103ee83a 	callr	r2
1000f3e4:	e0bfff15 	stw	r2,-4(fp)
1000f3e8:	00000506 	br	1000f400 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f3ec:	00bfde84 	movi	r2,-134
1000f3f0:	e0bfff15 	stw	r2,-4(fp)
1000f3f4:	00000206 	br	1000f400 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f3f8:	00bfebc4 	movi	r2,-81
1000f3fc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
1000f400:	e0bfff17 	ldw	r2,-4(fp)
1000f404:	1000070e 	bge	r2,zero,1000f424 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000f408:	000f32c0 	call	1000f32c <alt_get_errno>
1000f40c:	1007883a 	mov	r3,r2
1000f410:	e0bfff17 	ldw	r2,-4(fp)
1000f414:	0085c83a 	sub	r2,zero,r2
1000f418:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f41c:	00bfffc4 	movi	r2,-1
1000f420:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
1000f424:	e0bfff17 	ldw	r2,-4(fp)
}
1000f428:	e037883a 	mov	sp,fp
1000f42c:	dfc00117 	ldw	ra,4(sp)
1000f430:	df000017 	ldw	fp,0(sp)
1000f434:	dec00204 	addi	sp,sp,8
1000f438:	f800283a 	ret

1000f43c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f43c:	defffd04 	addi	sp,sp,-12
1000f440:	dfc00215 	stw	ra,8(sp)
1000f444:	df000115 	stw	fp,4(sp)
1000f448:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f44c:	0009883a 	mov	r4,zero
1000f450:	000f8d80 	call	1000f8d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f454:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f458:	000f9100 	call	1000f910 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f45c:	01840074 	movhi	r6,4097
1000f460:	3187e104 	addi	r6,r6,8068
1000f464:	01440074 	movhi	r5,4097
1000f468:	2947e104 	addi	r5,r5,8068
1000f46c:	01040074 	movhi	r4,4097
1000f470:	2107e104 	addi	r4,r4,8068
1000f474:	0010c7c0 	call	10010c7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f478:	00108440 	call	10010844 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f47c:	01040074 	movhi	r4,4097
1000f480:	21022904 	addi	r4,r4,2212
1000f484:	00114680 	call	10011468 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f488:	d0a89c17 	ldw	r2,-23952(gp)
1000f48c:	d0e89d17 	ldw	r3,-23948(gp)
1000f490:	d1289e17 	ldw	r4,-23944(gp)
1000f494:	200d883a 	mov	r6,r4
1000f498:	180b883a 	mov	r5,r3
1000f49c:	1009883a 	mov	r4,r2
1000f4a0:	00013080 	call	10001308 <main>
1000f4a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f4a8:	01000044 	movi	r4,1
1000f4ac:	000ef780 	call	1000ef78 <close>
  exit (result);
1000f4b0:	e13fff17 	ldw	r4,-4(fp)
1000f4b4:	001147c0 	call	1001147c <exit>

1000f4b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f4b8:	defffe04 	addi	sp,sp,-8
1000f4bc:	df000115 	stw	fp,4(sp)
1000f4c0:	df000104 	addi	fp,sp,4
1000f4c4:	e13fff15 	stw	r4,-4(fp)
}
1000f4c8:	0001883a 	nop
1000f4cc:	e037883a 	mov	sp,fp
1000f4d0:	df000017 	ldw	fp,0(sp)
1000f4d4:	dec00104 	addi	sp,sp,4
1000f4d8:	f800283a 	ret

1000f4dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f4dc:	defffe04 	addi	sp,sp,-8
1000f4e0:	df000115 	stw	fp,4(sp)
1000f4e4:	df000104 	addi	fp,sp,4
1000f4e8:	e13fff15 	stw	r4,-4(fp)
}
1000f4ec:	0001883a 	nop
1000f4f0:	e037883a 	mov	sp,fp
1000f4f4:	df000017 	ldw	fp,0(sp)
1000f4f8:	dec00104 	addi	sp,sp,4
1000f4fc:	f800283a 	ret

1000f500 <alt_get_errno>:
{
1000f500:	defffe04 	addi	sp,sp,-8
1000f504:	dfc00115 	stw	ra,4(sp)
1000f508:	df000015 	stw	fp,0(sp)
1000f50c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f510:	d0a00a17 	ldw	r2,-32728(gp)
1000f514:	10000326 	beq	r2,zero,1000f524 <alt_get_errno+0x24>
1000f518:	d0a00a17 	ldw	r2,-32728(gp)
1000f51c:	103ee83a 	callr	r2
1000f520:	00000106 	br	1000f528 <alt_get_errno+0x28>
1000f524:	d0a89a04 	addi	r2,gp,-23960
}
1000f528:	e037883a 	mov	sp,fp
1000f52c:	dfc00117 	ldw	ra,4(sp)
1000f530:	df000017 	ldw	fp,0(sp)
1000f534:	dec00204 	addi	sp,sp,8
1000f538:	f800283a 	ret

1000f53c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f53c:	defff904 	addi	sp,sp,-28
1000f540:	dfc00615 	stw	ra,24(sp)
1000f544:	df000515 	stw	fp,20(sp)
1000f548:	df000504 	addi	fp,sp,20
1000f54c:	e13ffd15 	stw	r4,-12(fp)
1000f550:	e17ffc15 	stw	r5,-16(fp)
1000f554:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f558:	e0bffd17 	ldw	r2,-12(fp)
1000f55c:	10000616 	blt	r2,zero,1000f578 <read+0x3c>
1000f560:	e0bffd17 	ldw	r2,-12(fp)
1000f564:	10c00324 	muli	r3,r2,12
1000f568:	00840074 	movhi	r2,4097
1000f56c:	108beb04 	addi	r2,r2,12204
1000f570:	1885883a 	add	r2,r3,r2
1000f574:	00000106 	br	1000f57c <read+0x40>
1000f578:	0005883a 	mov	r2,zero
1000f57c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f580:	e0bfff17 	ldw	r2,-4(fp)
1000f584:	10002226 	beq	r2,zero,1000f610 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f588:	e0bfff17 	ldw	r2,-4(fp)
1000f58c:	10800217 	ldw	r2,8(r2)
1000f590:	108000cc 	andi	r2,r2,3
1000f594:	10800060 	cmpeqi	r2,r2,1
1000f598:	1000181e 	bne	r2,zero,1000f5fc <read+0xc0>
        (fd->dev->read))
1000f59c:	e0bfff17 	ldw	r2,-4(fp)
1000f5a0:	10800017 	ldw	r2,0(r2)
1000f5a4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f5a8:	10001426 	beq	r2,zero,1000f5fc <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f5ac:	e0bfff17 	ldw	r2,-4(fp)
1000f5b0:	10800017 	ldw	r2,0(r2)
1000f5b4:	10800517 	ldw	r2,20(r2)
1000f5b8:	e0fffb17 	ldw	r3,-20(fp)
1000f5bc:	180d883a 	mov	r6,r3
1000f5c0:	e17ffc17 	ldw	r5,-16(fp)
1000f5c4:	e13fff17 	ldw	r4,-4(fp)
1000f5c8:	103ee83a 	callr	r2
1000f5cc:	e0bffe15 	stw	r2,-8(fp)
1000f5d0:	e0bffe17 	ldw	r2,-8(fp)
1000f5d4:	1000070e 	bge	r2,zero,1000f5f4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000f5d8:	000f5000 	call	1000f500 <alt_get_errno>
1000f5dc:	1007883a 	mov	r3,r2
1000f5e0:	e0bffe17 	ldw	r2,-8(fp)
1000f5e4:	0085c83a 	sub	r2,zero,r2
1000f5e8:	18800015 	stw	r2,0(r3)
          return -1;
1000f5ec:	00bfffc4 	movi	r2,-1
1000f5f0:	00000c06 	br	1000f624 <read+0xe8>
        }
        return rval;
1000f5f4:	e0bffe17 	ldw	r2,-8(fp)
1000f5f8:	00000a06 	br	1000f624 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f5fc:	000f5000 	call	1000f500 <alt_get_errno>
1000f600:	1007883a 	mov	r3,r2
1000f604:	00800344 	movi	r2,13
1000f608:	18800015 	stw	r2,0(r3)
1000f60c:	00000406 	br	1000f620 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f610:	000f5000 	call	1000f500 <alt_get_errno>
1000f614:	1007883a 	mov	r3,r2
1000f618:	00801444 	movi	r2,81
1000f61c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f620:	00bfffc4 	movi	r2,-1
}
1000f624:	e037883a 	mov	sp,fp
1000f628:	dfc00117 	ldw	ra,4(sp)
1000f62c:	df000017 	ldw	fp,0(sp)
1000f630:	dec00204 	addi	sp,sp,8
1000f634:	f800283a 	ret

1000f638 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f638:	defffe04 	addi	sp,sp,-8
1000f63c:	df000115 	stw	fp,4(sp)
1000f640:	df000104 	addi	fp,sp,4
1000f644:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000f648:	e0bfff17 	ldw	r2,-4(fp)
1000f64c:	108000d0 	cmplti	r2,r2,3
1000f650:	10000a1e 	bne	r2,zero,1000f67c <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f654:	e0bfff17 	ldw	r2,-4(fp)
1000f658:	10c00324 	muli	r3,r2,12
1000f65c:	00840074 	movhi	r2,4097
1000f660:	1885883a 	add	r2,r3,r2
1000f664:	100bed15 	stw	zero,12212(r2)
    alt_fd_list[fd].dev      = 0;
1000f668:	e0bfff17 	ldw	r2,-4(fp)
1000f66c:	10c00324 	muli	r3,r2,12
1000f670:	00840074 	movhi	r2,4097
1000f674:	1885883a 	add	r2,r3,r2
1000f678:	100beb15 	stw	zero,12204(r2)
  }
}
1000f67c:	0001883a 	nop
1000f680:	e037883a 	mov	sp,fp
1000f684:	df000017 	ldw	fp,0(sp)
1000f688:	dec00104 	addi	sp,sp,4
1000f68c:	f800283a 	ret

1000f690 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f690:	defff904 	addi	sp,sp,-28
1000f694:	df000615 	stw	fp,24(sp)
1000f698:	df000604 	addi	fp,sp,24
1000f69c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
1000f6a0:	0005303a 	rdctl	r2,status
1000f6a4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f6a8:	e0fffd17 	ldw	r3,-12(fp)
1000f6ac:	00bfff84 	movi	r2,-2
1000f6b0:	1884703a 	and	r2,r3,r2
1000f6b4:	1001703a 	wrctl	status,r2
  return context;
1000f6b8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f6bc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f6c0:	d0a00b17 	ldw	r2,-32724(gp)
1000f6c4:	10c000c4 	addi	r3,r2,3
1000f6c8:	00bfff04 	movi	r2,-4
1000f6cc:	1884703a 	and	r2,r3,r2
1000f6d0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f6d4:	d0e00b17 	ldw	r3,-32724(gp)
1000f6d8:	e0bffa17 	ldw	r2,-24(fp)
1000f6dc:	1887883a 	add	r3,r3,r2
1000f6e0:	00860034 	movhi	r2,6144
1000f6e4:	10800004 	addi	r2,r2,0
1000f6e8:	10c0062e 	bgeu	r2,r3,1000f704 <sbrk+0x74>
1000f6ec:	e0bfff17 	ldw	r2,-4(fp)
1000f6f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
1000f6f4:	e0bffc17 	ldw	r2,-16(fp)
1000f6f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f6fc:	00bfffc4 	movi	r2,-1
1000f700:	00000b06 	br	1000f730 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f704:	d0a00b17 	ldw	r2,-32724(gp)
1000f708:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
1000f70c:	d0e00b17 	ldw	r3,-32724(gp)
1000f710:	e0bffa17 	ldw	r2,-24(fp)
1000f714:	1885883a 	add	r2,r3,r2
1000f718:	d0a00b15 	stw	r2,-32724(gp)
1000f71c:	e0bfff17 	ldw	r2,-4(fp)
1000f720:	e0bffb15 	stw	r2,-20(fp)
1000f724:	e0bffb17 	ldw	r2,-20(fp)
1000f728:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f72c:	e0bffe17 	ldw	r2,-8(fp)
} 
1000f730:	e037883a 	mov	sp,fp
1000f734:	df000017 	ldw	fp,0(sp)
1000f738:	dec00104 	addi	sp,sp,4
1000f73c:	f800283a 	ret

1000f740 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f740:	defffd04 	addi	sp,sp,-12
1000f744:	dfc00215 	stw	ra,8(sp)
1000f748:	df000115 	stw	fp,4(sp)
1000f74c:	df000104 	addi	fp,sp,4
1000f750:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f754:	e13fff17 	ldw	r4,-4(fp)
1000f758:	00105f40 	call	100105f4 <alt_busy_sleep>
}
1000f75c:	e037883a 	mov	sp,fp
1000f760:	dfc00117 	ldw	ra,4(sp)
1000f764:	df000017 	ldw	fp,0(sp)
1000f768:	dec00204 	addi	sp,sp,8
1000f76c:	f800283a 	ret

1000f770 <alt_get_errno>:
{
1000f770:	defffe04 	addi	sp,sp,-8
1000f774:	dfc00115 	stw	ra,4(sp)
1000f778:	df000015 	stw	fp,0(sp)
1000f77c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f780:	d0a00a17 	ldw	r2,-32728(gp)
1000f784:	10000326 	beq	r2,zero,1000f794 <alt_get_errno+0x24>
1000f788:	d0a00a17 	ldw	r2,-32728(gp)
1000f78c:	103ee83a 	callr	r2
1000f790:	00000106 	br	1000f798 <alt_get_errno+0x28>
1000f794:	d0a89a04 	addi	r2,gp,-23960
}
1000f798:	e037883a 	mov	sp,fp
1000f79c:	dfc00117 	ldw	ra,4(sp)
1000f7a0:	df000017 	ldw	fp,0(sp)
1000f7a4:	dec00204 	addi	sp,sp,8
1000f7a8:	f800283a 	ret

1000f7ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f7ac:	defff904 	addi	sp,sp,-28
1000f7b0:	dfc00615 	stw	ra,24(sp)
1000f7b4:	df000515 	stw	fp,20(sp)
1000f7b8:	df000504 	addi	fp,sp,20
1000f7bc:	e13ffd15 	stw	r4,-12(fp)
1000f7c0:	e17ffc15 	stw	r5,-16(fp)
1000f7c4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f7c8:	e0bffd17 	ldw	r2,-12(fp)
1000f7cc:	10000616 	blt	r2,zero,1000f7e8 <write+0x3c>
1000f7d0:	e0bffd17 	ldw	r2,-12(fp)
1000f7d4:	10c00324 	muli	r3,r2,12
1000f7d8:	00840074 	movhi	r2,4097
1000f7dc:	108beb04 	addi	r2,r2,12204
1000f7e0:	1885883a 	add	r2,r3,r2
1000f7e4:	00000106 	br	1000f7ec <write+0x40>
1000f7e8:	0005883a 	mov	r2,zero
1000f7ec:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f7f0:	e0bfff17 	ldw	r2,-4(fp)
1000f7f4:	10002126 	beq	r2,zero,1000f87c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f7f8:	e0bfff17 	ldw	r2,-4(fp)
1000f7fc:	10800217 	ldw	r2,8(r2)
1000f800:	108000cc 	andi	r2,r2,3
1000f804:	10001826 	beq	r2,zero,1000f868 <write+0xbc>
1000f808:	e0bfff17 	ldw	r2,-4(fp)
1000f80c:	10800017 	ldw	r2,0(r2)
1000f810:	10800617 	ldw	r2,24(r2)
1000f814:	10001426 	beq	r2,zero,1000f868 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f818:	e0bfff17 	ldw	r2,-4(fp)
1000f81c:	10800017 	ldw	r2,0(r2)
1000f820:	10800617 	ldw	r2,24(r2)
1000f824:	e0fffb17 	ldw	r3,-20(fp)
1000f828:	180d883a 	mov	r6,r3
1000f82c:	e17ffc17 	ldw	r5,-16(fp)
1000f830:	e13fff17 	ldw	r4,-4(fp)
1000f834:	103ee83a 	callr	r2
1000f838:	e0bffe15 	stw	r2,-8(fp)
1000f83c:	e0bffe17 	ldw	r2,-8(fp)
1000f840:	1000070e 	bge	r2,zero,1000f860 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000f844:	000f7700 	call	1000f770 <alt_get_errno>
1000f848:	1007883a 	mov	r3,r2
1000f84c:	e0bffe17 	ldw	r2,-8(fp)
1000f850:	0085c83a 	sub	r2,zero,r2
1000f854:	18800015 	stw	r2,0(r3)
        return -1;
1000f858:	00bfffc4 	movi	r2,-1
1000f85c:	00000c06 	br	1000f890 <write+0xe4>
      }
      return rval;
1000f860:	e0bffe17 	ldw	r2,-8(fp)
1000f864:	00000a06 	br	1000f890 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f868:	000f7700 	call	1000f770 <alt_get_errno>
1000f86c:	1007883a 	mov	r3,r2
1000f870:	00800344 	movi	r2,13
1000f874:	18800015 	stw	r2,0(r3)
1000f878:	00000406 	br	1000f88c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f87c:	000f7700 	call	1000f770 <alt_get_errno>
1000f880:	1007883a 	mov	r3,r2
1000f884:	00801444 	movi	r2,81
1000f888:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f88c:	00bfffc4 	movi	r2,-1
}
1000f890:	e037883a 	mov	sp,fp
1000f894:	dfc00117 	ldw	ra,4(sp)
1000f898:	df000017 	ldw	fp,0(sp)
1000f89c:	dec00204 	addi	sp,sp,8
1000f8a0:	f800283a 	ret

1000f8a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f8a4:	defffd04 	addi	sp,sp,-12
1000f8a8:	dfc00215 	stw	ra,8(sp)
1000f8ac:	df000115 	stw	fp,4(sp)
1000f8b0:	df000104 	addi	fp,sp,4
1000f8b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f8b8:	d1600704 	addi	r5,gp,-32740
1000f8bc:	e13fff17 	ldw	r4,-4(fp)
1000f8c0:	00107a00 	call	100107a0 <alt_dev_llist_insert>
}
1000f8c4:	e037883a 	mov	sp,fp
1000f8c8:	dfc00117 	ldw	ra,4(sp)
1000f8cc:	df000017 	ldw	fp,0(sp)
1000f8d0:	dec00204 	addi	sp,sp,8
1000f8d4:	f800283a 	ret

1000f8d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f8d8:	defffd04 	addi	sp,sp,-12
1000f8dc:	dfc00215 	stw	ra,8(sp)
1000f8e0:	df000115 	stw	fp,4(sp)
1000f8e4:	df000104 	addi	fp,sp,4
1000f8e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000f8ec:	00110e40 	call	100110e4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f8f0:	00800044 	movi	r2,1
1000f8f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f8f8:	0001883a 	nop
1000f8fc:	e037883a 	mov	sp,fp
1000f900:	dfc00117 	ldw	ra,4(sp)
1000f904:	df000017 	ldw	fp,0(sp)
1000f908:	dec00204 	addi	sp,sp,8
1000f90c:	f800283a 	ret

1000f910 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f910:	defffe04 	addi	sp,sp,-8
1000f914:	dfc00115 	stw	ra,4(sp)
1000f918:	df000015 	stw	fp,0(sp)
1000f91c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
1000f920:	01c0fa04 	movi	r7,1000
1000f924:	01800044 	movi	r6,1
1000f928:	000b883a 	mov	r5,zero
1000f92c:	01000804 	movi	r4,32
1000f930:	001044c0 	call	1001044c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f934:	01800144 	movi	r6,5
1000f938:	000b883a 	mov	r5,zero
1000f93c:	01040074 	movhi	r4,4097
1000f940:	210c5504 	addi	r4,r4,12628
1000f944:	000fad40 	call	1000fad4 <altera_avalon_jtag_uart_init>
1000f948:	01040074 	movhi	r4,4097
1000f94c:	210c4b04 	addi	r4,r4,12588
1000f950:	000f8a40 	call	1000f8a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f954:	0001883a 	nop
}
1000f958:	0001883a 	nop
1000f95c:	e037883a 	mov	sp,fp
1000f960:	dfc00117 	ldw	ra,4(sp)
1000f964:	df000017 	ldw	fp,0(sp)
1000f968:	dec00204 	addi	sp,sp,8
1000f96c:	f800283a 	ret

1000f970 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f970:	defffa04 	addi	sp,sp,-24
1000f974:	dfc00515 	stw	ra,20(sp)
1000f978:	df000415 	stw	fp,16(sp)
1000f97c:	df000404 	addi	fp,sp,16
1000f980:	e13ffe15 	stw	r4,-8(fp)
1000f984:	e17ffd15 	stw	r5,-12(fp)
1000f988:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f98c:	e0bffe17 	ldw	r2,-8(fp)
1000f990:	10800017 	ldw	r2,0(r2)
1000f994:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f998:	e0bfff17 	ldw	r2,-4(fp)
1000f99c:	10c00a04 	addi	r3,r2,40
1000f9a0:	e0bffe17 	ldw	r2,-8(fp)
1000f9a4:	10800217 	ldw	r2,8(r2)
1000f9a8:	100f883a 	mov	r7,r2
1000f9ac:	e1bffc17 	ldw	r6,-16(fp)
1000f9b0:	e17ffd17 	ldw	r5,-12(fp)
1000f9b4:	1809883a 	mov	r4,r3
1000f9b8:	000ff940 	call	1000ff94 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f9bc:	e037883a 	mov	sp,fp
1000f9c0:	dfc00117 	ldw	ra,4(sp)
1000f9c4:	df000017 	ldw	fp,0(sp)
1000f9c8:	dec00204 	addi	sp,sp,8
1000f9cc:	f800283a 	ret

1000f9d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f9d0:	defffa04 	addi	sp,sp,-24
1000f9d4:	dfc00515 	stw	ra,20(sp)
1000f9d8:	df000415 	stw	fp,16(sp)
1000f9dc:	df000404 	addi	fp,sp,16
1000f9e0:	e13ffe15 	stw	r4,-8(fp)
1000f9e4:	e17ffd15 	stw	r5,-12(fp)
1000f9e8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f9ec:	e0bffe17 	ldw	r2,-8(fp)
1000f9f0:	10800017 	ldw	r2,0(r2)
1000f9f4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f9f8:	e0bfff17 	ldw	r2,-4(fp)
1000f9fc:	10c00a04 	addi	r3,r2,40
1000fa00:	e0bffe17 	ldw	r2,-8(fp)
1000fa04:	10800217 	ldw	r2,8(r2)
1000fa08:	100f883a 	mov	r7,r2
1000fa0c:	e1bffc17 	ldw	r6,-16(fp)
1000fa10:	e17ffd17 	ldw	r5,-12(fp)
1000fa14:	1809883a 	mov	r4,r3
1000fa18:	00101b00 	call	100101b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fa1c:	e037883a 	mov	sp,fp
1000fa20:	dfc00117 	ldw	ra,4(sp)
1000fa24:	df000017 	ldw	fp,0(sp)
1000fa28:	dec00204 	addi	sp,sp,8
1000fa2c:	f800283a 	ret

1000fa30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fa30:	defffc04 	addi	sp,sp,-16
1000fa34:	dfc00315 	stw	ra,12(sp)
1000fa38:	df000215 	stw	fp,8(sp)
1000fa3c:	df000204 	addi	fp,sp,8
1000fa40:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fa44:	e0bffe17 	ldw	r2,-8(fp)
1000fa48:	10800017 	ldw	r2,0(r2)
1000fa4c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fa50:	e0bfff17 	ldw	r2,-4(fp)
1000fa54:	10c00a04 	addi	r3,r2,40
1000fa58:	e0bffe17 	ldw	r2,-8(fp)
1000fa5c:	10800217 	ldw	r2,8(r2)
1000fa60:	100b883a 	mov	r5,r2
1000fa64:	1809883a 	mov	r4,r3
1000fa68:	000fe380 	call	1000fe38 <altera_avalon_jtag_uart_close>
}
1000fa6c:	e037883a 	mov	sp,fp
1000fa70:	dfc00117 	ldw	ra,4(sp)
1000fa74:	df000017 	ldw	fp,0(sp)
1000fa78:	dec00204 	addi	sp,sp,8
1000fa7c:	f800283a 	ret

1000fa80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fa80:	defffa04 	addi	sp,sp,-24
1000fa84:	dfc00515 	stw	ra,20(sp)
1000fa88:	df000415 	stw	fp,16(sp)
1000fa8c:	df000404 	addi	fp,sp,16
1000fa90:	e13ffe15 	stw	r4,-8(fp)
1000fa94:	e17ffd15 	stw	r5,-12(fp)
1000fa98:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fa9c:	e0bffe17 	ldw	r2,-8(fp)
1000faa0:	10800017 	ldw	r2,0(r2)
1000faa4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000faa8:	e0bfff17 	ldw	r2,-4(fp)
1000faac:	10800a04 	addi	r2,r2,40
1000fab0:	e1bffc17 	ldw	r6,-16(fp)
1000fab4:	e17ffd17 	ldw	r5,-12(fp)
1000fab8:	1009883a 	mov	r4,r2
1000fabc:	000fea00 	call	1000fea0 <altera_avalon_jtag_uart_ioctl>
}
1000fac0:	e037883a 	mov	sp,fp
1000fac4:	dfc00117 	ldw	ra,4(sp)
1000fac8:	df000017 	ldw	fp,0(sp)
1000facc:	dec00204 	addi	sp,sp,8
1000fad0:	f800283a 	ret

1000fad4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fad4:	defffa04 	addi	sp,sp,-24
1000fad8:	dfc00515 	stw	ra,20(sp)
1000fadc:	df000415 	stw	fp,16(sp)
1000fae0:	df000404 	addi	fp,sp,16
1000fae4:	e13fff15 	stw	r4,-4(fp)
1000fae8:	e17ffe15 	stw	r5,-8(fp)
1000faec:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000faf0:	e0bfff17 	ldw	r2,-4(fp)
1000faf4:	00c00044 	movi	r3,1
1000faf8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fafc:	e0bfff17 	ldw	r2,-4(fp)
1000fb00:	10800017 	ldw	r2,0(r2)
1000fb04:	10800104 	addi	r2,r2,4
1000fb08:	1007883a 	mov	r3,r2
1000fb0c:	e0bfff17 	ldw	r2,-4(fp)
1000fb10:	10800817 	ldw	r2,32(r2)
1000fb14:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fb18:	e0bffe17 	ldw	r2,-8(fp)
1000fb1c:	e0fffd17 	ldw	r3,-12(fp)
1000fb20:	d8000015 	stw	zero,0(sp)
1000fb24:	e1ffff17 	ldw	r7,-4(fp)
1000fb28:	01840074 	movhi	r6,4097
1000fb2c:	31bee504 	addi	r6,r6,-1132
1000fb30:	180b883a 	mov	r5,r3
1000fb34:	1009883a 	mov	r4,r2
1000fb38:	00109380 	call	10010938 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fb3c:	e0bfff17 	ldw	r2,-4(fp)
1000fb40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fb44:	e0bfff17 	ldw	r2,-4(fp)
1000fb48:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fb4c:	d0e8a017 	ldw	r3,-23936(gp)
1000fb50:	e1ffff17 	ldw	r7,-4(fp)
1000fb54:	01840074 	movhi	r6,4097
1000fb58:	31bf6604 	addi	r6,r6,-616
1000fb5c:	180b883a 	mov	r5,r3
1000fb60:	1009883a 	mov	r4,r2
1000fb64:	00104c80 	call	100104c8 <alt_alarm_start>
1000fb68:	1000040e 	bge	r2,zero,1000fb7c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fb6c:	e0ffff17 	ldw	r3,-4(fp)
1000fb70:	00a00034 	movhi	r2,32768
1000fb74:	10bfffc4 	addi	r2,r2,-1
1000fb78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fb7c:	0001883a 	nop
1000fb80:	e037883a 	mov	sp,fp
1000fb84:	dfc00117 	ldw	ra,4(sp)
1000fb88:	df000017 	ldw	fp,0(sp)
1000fb8c:	dec00204 	addi	sp,sp,8
1000fb90:	f800283a 	ret

1000fb94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fb94:	defff804 	addi	sp,sp,-32
1000fb98:	df000715 	stw	fp,28(sp)
1000fb9c:	df000704 	addi	fp,sp,28
1000fba0:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fba4:	e0bff917 	ldw	r2,-28(fp)
1000fba8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
1000fbac:	e0bffd17 	ldw	r2,-12(fp)
1000fbb0:	10800017 	ldw	r2,0(r2)
1000fbb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fbb8:	e0bffc17 	ldw	r2,-16(fp)
1000fbbc:	10800104 	addi	r2,r2,4
1000fbc0:	10800037 	ldwio	r2,0(r2)
1000fbc4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fbc8:	e0bffb17 	ldw	r2,-20(fp)
1000fbcc:	1080c00c 	andi	r2,r2,768
1000fbd0:	10006b26 	beq	r2,zero,1000fd80 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000fbd4:	e0bffb17 	ldw	r2,-20(fp)
1000fbd8:	1080400c 	andi	r2,r2,256
1000fbdc:	10003426 	beq	r2,zero,1000fcb0 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000fbe0:	00800074 	movhi	r2,1
1000fbe4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fbe8:	e0bffd17 	ldw	r2,-12(fp)
1000fbec:	10800a17 	ldw	r2,40(r2)
1000fbf0:	10800044 	addi	r2,r2,1
1000fbf4:	1081ffcc 	andi	r2,r2,2047
1000fbf8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
1000fbfc:	e0bffd17 	ldw	r2,-12(fp)
1000fc00:	10800b17 	ldw	r2,44(r2)
1000fc04:	e0fffa17 	ldw	r3,-24(fp)
1000fc08:	18801426 	beq	r3,r2,1000fc5c <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000fc0c:	e0bffc17 	ldw	r2,-16(fp)
1000fc10:	10800037 	ldwio	r2,0(r2)
1000fc14:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fc18:	e0bfff17 	ldw	r2,-4(fp)
1000fc1c:	10a0000c 	andi	r2,r2,32768
1000fc20:	10001026 	beq	r2,zero,1000fc64 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000fc24:	e0bffd17 	ldw	r2,-12(fp)
1000fc28:	10800a17 	ldw	r2,40(r2)
1000fc2c:	e0ffff17 	ldw	r3,-4(fp)
1000fc30:	1809883a 	mov	r4,r3
1000fc34:	e0fffd17 	ldw	r3,-12(fp)
1000fc38:	1885883a 	add	r2,r3,r2
1000fc3c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fc40:	e0bffd17 	ldw	r2,-12(fp)
1000fc44:	10800a17 	ldw	r2,40(r2)
1000fc48:	10800044 	addi	r2,r2,1
1000fc4c:	10c1ffcc 	andi	r3,r2,2047
1000fc50:	e0bffd17 	ldw	r2,-12(fp)
1000fc54:	10c00a15 	stw	r3,40(r2)
      {
1000fc58:	003fe306 	br	1000fbe8 <altera_avalon_jtag_uart_irq+0x54>
          break;
1000fc5c:	0001883a 	nop
1000fc60:	00000106 	br	1000fc68 <altera_avalon_jtag_uart_irq+0xd4>
          break;
1000fc64:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000fc68:	e0bfff17 	ldw	r2,-4(fp)
1000fc6c:	10bfffec 	andhi	r2,r2,65535
1000fc70:	10000f26 	beq	r2,zero,1000fcb0 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fc74:	e0bffd17 	ldw	r2,-12(fp)
1000fc78:	10c00817 	ldw	r3,32(r2)
1000fc7c:	00bfff84 	movi	r2,-2
1000fc80:	1886703a 	and	r3,r3,r2
1000fc84:	e0bffd17 	ldw	r2,-12(fp)
1000fc88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000fc8c:	e0bffc17 	ldw	r2,-16(fp)
1000fc90:	10800104 	addi	r2,r2,4
1000fc94:	1007883a 	mov	r3,r2
1000fc98:	e0bffd17 	ldw	r2,-12(fp)
1000fc9c:	10800817 	ldw	r2,32(r2)
1000fca0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fca4:	e0bffc17 	ldw	r2,-16(fp)
1000fca8:	10800104 	addi	r2,r2,4
1000fcac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000fcb0:	e0bffb17 	ldw	r2,-20(fp)
1000fcb4:	1080800c 	andi	r2,r2,512
1000fcb8:	103fbf26 	beq	r2,zero,1000fbb8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000fcbc:	e0bffb17 	ldw	r2,-20(fp)
1000fcc0:	1004d43a 	srli	r2,r2,16
1000fcc4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fcc8:	00001306 	br	1000fd18 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000fccc:	e0bffc17 	ldw	r2,-16(fp)
1000fcd0:	e0fffd17 	ldw	r3,-12(fp)
1000fcd4:	18c00d17 	ldw	r3,52(r3)
1000fcd8:	e13ffd17 	ldw	r4,-12(fp)
1000fcdc:	20c7883a 	add	r3,r4,r3
1000fce0:	18c20e03 	ldbu	r3,2104(r3)
1000fce4:	18c03fcc 	andi	r3,r3,255
1000fce8:	18c0201c 	xori	r3,r3,128
1000fcec:	18ffe004 	addi	r3,r3,-128
1000fcf0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fcf4:	e0bffd17 	ldw	r2,-12(fp)
1000fcf8:	10800d17 	ldw	r2,52(r2)
1000fcfc:	10800044 	addi	r2,r2,1
1000fd00:	10c1ffcc 	andi	r3,r2,2047
1000fd04:	e0bffd17 	ldw	r2,-12(fp)
1000fd08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000fd0c:	e0bffe17 	ldw	r2,-8(fp)
1000fd10:	10bfffc4 	addi	r2,r2,-1
1000fd14:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
1000fd18:	e0bffe17 	ldw	r2,-8(fp)
1000fd1c:	10000526 	beq	r2,zero,1000fd34 <altera_avalon_jtag_uart_irq+0x1a0>
1000fd20:	e0bffd17 	ldw	r2,-12(fp)
1000fd24:	10c00d17 	ldw	r3,52(r2)
1000fd28:	e0bffd17 	ldw	r2,-12(fp)
1000fd2c:	10800c17 	ldw	r2,48(r2)
1000fd30:	18bfe61e 	bne	r3,r2,1000fccc <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
1000fd34:	e0bffe17 	ldw	r2,-8(fp)
1000fd38:	103f9f26 	beq	r2,zero,1000fbb8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fd3c:	e0bffd17 	ldw	r2,-12(fp)
1000fd40:	10c00817 	ldw	r3,32(r2)
1000fd44:	00bfff44 	movi	r2,-3
1000fd48:	1886703a 	and	r3,r3,r2
1000fd4c:	e0bffd17 	ldw	r2,-12(fp)
1000fd50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fd54:	e0bffd17 	ldw	r2,-12(fp)
1000fd58:	10800017 	ldw	r2,0(r2)
1000fd5c:	10800104 	addi	r2,r2,4
1000fd60:	1007883a 	mov	r3,r2
1000fd64:	e0bffd17 	ldw	r2,-12(fp)
1000fd68:	10800817 	ldw	r2,32(r2)
1000fd6c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fd70:	e0bffc17 	ldw	r2,-16(fp)
1000fd74:	10800104 	addi	r2,r2,4
1000fd78:	10800037 	ldwio	r2,0(r2)
  {
1000fd7c:	003f8e06 	br	1000fbb8 <altera_avalon_jtag_uart_irq+0x24>
      break;
1000fd80:	0001883a 	nop
      }
    }
  }
}
1000fd84:	0001883a 	nop
1000fd88:	e037883a 	mov	sp,fp
1000fd8c:	df000017 	ldw	fp,0(sp)
1000fd90:	dec00104 	addi	sp,sp,4
1000fd94:	f800283a 	ret

1000fd98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000fd98:	defffc04 	addi	sp,sp,-16
1000fd9c:	df000315 	stw	fp,12(sp)
1000fda0:	df000304 	addi	fp,sp,12
1000fda4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000fda8:	e0bffd17 	ldw	r2,-12(fp)
1000fdac:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000fdb0:	e0bfff17 	ldw	r2,-4(fp)
1000fdb4:	10800017 	ldw	r2,0(r2)
1000fdb8:	10800104 	addi	r2,r2,4
1000fdbc:	10800037 	ldwio	r2,0(r2)
1000fdc0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000fdc4:	e0bffe17 	ldw	r2,-8(fp)
1000fdc8:	1081000c 	andi	r2,r2,1024
1000fdcc:	10000b26 	beq	r2,zero,1000fdfc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000fdd0:	e0bfff17 	ldw	r2,-4(fp)
1000fdd4:	10800017 	ldw	r2,0(r2)
1000fdd8:	10800104 	addi	r2,r2,4
1000fddc:	1007883a 	mov	r3,r2
1000fde0:	e0bfff17 	ldw	r2,-4(fp)
1000fde4:	10800817 	ldw	r2,32(r2)
1000fde8:	10810014 	ori	r2,r2,1024
1000fdec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000fdf0:	e0bfff17 	ldw	r2,-4(fp)
1000fdf4:	10000915 	stw	zero,36(r2)
1000fdf8:	00000a06 	br	1000fe24 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000fdfc:	e0bfff17 	ldw	r2,-4(fp)
1000fe00:	10c00917 	ldw	r3,36(r2)
1000fe04:	00a00034 	movhi	r2,32768
1000fe08:	10bfff04 	addi	r2,r2,-4
1000fe0c:	10c00536 	bltu	r2,r3,1000fe24 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000fe10:	e0bfff17 	ldw	r2,-4(fp)
1000fe14:	10800917 	ldw	r2,36(r2)
1000fe18:	10c00044 	addi	r3,r2,1
1000fe1c:	e0bfff17 	ldw	r2,-4(fp)
1000fe20:	10c00915 	stw	r3,36(r2)
1000fe24:	d0a8a017 	ldw	r2,-23936(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000fe28:	e037883a 	mov	sp,fp
1000fe2c:	df000017 	ldw	fp,0(sp)
1000fe30:	dec00104 	addi	sp,sp,4
1000fe34:	f800283a 	ret

1000fe38 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000fe38:	defffd04 	addi	sp,sp,-12
1000fe3c:	df000215 	stw	fp,8(sp)
1000fe40:	df000204 	addi	fp,sp,8
1000fe44:	e13fff15 	stw	r4,-4(fp)
1000fe48:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fe4c:	00000506 	br	1000fe64 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000fe50:	e0bffe17 	ldw	r2,-8(fp)
1000fe54:	1090000c 	andi	r2,r2,16384
1000fe58:	10000226 	beq	r2,zero,1000fe64 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000fe5c:	00bffd44 	movi	r2,-11
1000fe60:	00000b06 	br	1000fe90 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fe64:	e0bfff17 	ldw	r2,-4(fp)
1000fe68:	10c00d17 	ldw	r3,52(r2)
1000fe6c:	e0bfff17 	ldw	r2,-4(fp)
1000fe70:	10800c17 	ldw	r2,48(r2)
1000fe74:	18800526 	beq	r3,r2,1000fe8c <altera_avalon_jtag_uart_close+0x54>
1000fe78:	e0bfff17 	ldw	r2,-4(fp)
1000fe7c:	10c00917 	ldw	r3,36(r2)
1000fe80:	e0bfff17 	ldw	r2,-4(fp)
1000fe84:	10800117 	ldw	r2,4(r2)
1000fe88:	18bff136 	bltu	r3,r2,1000fe50 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
1000fe8c:	0005883a 	mov	r2,zero
}
1000fe90:	e037883a 	mov	sp,fp
1000fe94:	df000017 	ldw	fp,0(sp)
1000fe98:	dec00104 	addi	sp,sp,4
1000fe9c:	f800283a 	ret

1000fea0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000fea0:	defffa04 	addi	sp,sp,-24
1000fea4:	df000515 	stw	fp,20(sp)
1000fea8:	df000504 	addi	fp,sp,20
1000feac:	e13ffd15 	stw	r4,-12(fp)
1000feb0:	e17ffc15 	stw	r5,-16(fp)
1000feb4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
1000feb8:	00bff9c4 	movi	r2,-25
1000febc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
1000fec0:	e0bffc17 	ldw	r2,-16(fp)
1000fec4:	109a8060 	cmpeqi	r2,r2,27137
1000fec8:	1000041e 	bne	r2,zero,1000fedc <altera_avalon_jtag_uart_ioctl+0x3c>
1000fecc:	e0bffc17 	ldw	r2,-16(fp)
1000fed0:	109a80a0 	cmpeqi	r2,r2,27138
1000fed4:	1000181e 	bne	r2,zero,1000ff38 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000fed8:	00002906 	br	1000ff80 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
1000fedc:	e0bffd17 	ldw	r2,-12(fp)
1000fee0:	10c00117 	ldw	r3,4(r2)
1000fee4:	00a00034 	movhi	r2,32768
1000fee8:	10bfffc4 	addi	r2,r2,-1
1000feec:	18802126 	beq	r3,r2,1000ff74 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
1000fef0:	e0bffb17 	ldw	r2,-20(fp)
1000fef4:	10800017 	ldw	r2,0(r2)
1000fef8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000fefc:	e0bffe17 	ldw	r2,-8(fp)
1000ff00:	10800090 	cmplti	r2,r2,2
1000ff04:	1000061e 	bne	r2,zero,1000ff20 <altera_avalon_jtag_uart_ioctl+0x80>
1000ff08:	e0fffe17 	ldw	r3,-8(fp)
1000ff0c:	00a00034 	movhi	r2,32768
1000ff10:	10bfffc4 	addi	r2,r2,-1
1000ff14:	18800226 	beq	r3,r2,1000ff20 <altera_avalon_jtag_uart_ioctl+0x80>
1000ff18:	e0bffe17 	ldw	r2,-8(fp)
1000ff1c:	00000206 	br	1000ff28 <altera_avalon_jtag_uart_ioctl+0x88>
1000ff20:	00a00034 	movhi	r2,32768
1000ff24:	10bfff84 	addi	r2,r2,-2
1000ff28:	e0fffd17 	ldw	r3,-12(fp)
1000ff2c:	18800115 	stw	r2,4(r3)
      rc = 0;
1000ff30:	e03fff15 	stw	zero,-4(fp)
    break;
1000ff34:	00000f06 	br	1000ff74 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
1000ff38:	e0bffd17 	ldw	r2,-12(fp)
1000ff3c:	10c00117 	ldw	r3,4(r2)
1000ff40:	00a00034 	movhi	r2,32768
1000ff44:	10bfffc4 	addi	r2,r2,-1
1000ff48:	18800c26 	beq	r3,r2,1000ff7c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000ff4c:	e0bffd17 	ldw	r2,-12(fp)
1000ff50:	10c00917 	ldw	r3,36(r2)
1000ff54:	e0bffd17 	ldw	r2,-12(fp)
1000ff58:	10800117 	ldw	r2,4(r2)
1000ff5c:	1885803a 	cmpltu	r2,r3,r2
1000ff60:	10c03fcc 	andi	r3,r2,255
1000ff64:	e0bffb17 	ldw	r2,-20(fp)
1000ff68:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000ff6c:	e03fff15 	stw	zero,-4(fp)
    break;
1000ff70:	00000206 	br	1000ff7c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
1000ff74:	0001883a 	nop
1000ff78:	00000106 	br	1000ff80 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
1000ff7c:	0001883a 	nop
  }

  return rc;
1000ff80:	e0bfff17 	ldw	r2,-4(fp)
}
1000ff84:	e037883a 	mov	sp,fp
1000ff88:	df000017 	ldw	fp,0(sp)
1000ff8c:	dec00104 	addi	sp,sp,4
1000ff90:	f800283a 	ret

1000ff94 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000ff94:	defff304 	addi	sp,sp,-52
1000ff98:	dfc00c15 	stw	ra,48(sp)
1000ff9c:	df000b15 	stw	fp,44(sp)
1000ffa0:	df000b04 	addi	fp,sp,44
1000ffa4:	e13ff815 	stw	r4,-32(fp)
1000ffa8:	e17ff715 	stw	r5,-36(fp)
1000ffac:	e1bff615 	stw	r6,-40(fp)
1000ffb0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
1000ffb4:	e0bff717 	ldw	r2,-36(fp)
1000ffb8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ffbc:	00004706 	br	100100dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000ffc0:	e0bff817 	ldw	r2,-32(fp)
1000ffc4:	10800a17 	ldw	r2,40(r2)
1000ffc8:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
1000ffcc:	e0bff817 	ldw	r2,-32(fp)
1000ffd0:	10800b17 	ldw	r2,44(r2)
1000ffd4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
1000ffd8:	e0fffd17 	ldw	r3,-12(fp)
1000ffdc:	e0bffc17 	ldw	r2,-16(fp)
1000ffe0:	18800536 	bltu	r3,r2,1000fff8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000ffe4:	e0fffd17 	ldw	r3,-12(fp)
1000ffe8:	e0bffc17 	ldw	r2,-16(fp)
1000ffec:	1885c83a 	sub	r2,r3,r2
1000fff0:	e0bffe15 	stw	r2,-8(fp)
1000fff4:	00000406 	br	10010008 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fff8:	00c20004 	movi	r3,2048
1000fffc:	e0bffc17 	ldw	r2,-16(fp)
10010000:	1885c83a 	sub	r2,r3,r2
10010004:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010008:	e0bffe17 	ldw	r2,-8(fp)
1001000c:	10001e26 	beq	r2,zero,10010088 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010010:	e0fff617 	ldw	r3,-40(fp)
10010014:	e0bffe17 	ldw	r2,-8(fp)
10010018:	1880022e 	bgeu	r3,r2,10010024 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1001001c:	e0bff617 	ldw	r2,-40(fp)
10010020:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010024:	e0bff817 	ldw	r2,-32(fp)
10010028:	10c00e04 	addi	r3,r2,56
1001002c:	e0bffc17 	ldw	r2,-16(fp)
10010030:	1885883a 	add	r2,r3,r2
10010034:	e1bffe17 	ldw	r6,-8(fp)
10010038:	100b883a 	mov	r5,r2
1001003c:	e13fff17 	ldw	r4,-4(fp)
10010040:	00028e40 	call	100028e4 <memcpy>
      ptr   += n;
10010044:	e0ffff17 	ldw	r3,-4(fp)
10010048:	e0bffe17 	ldw	r2,-8(fp)
1001004c:	1885883a 	add	r2,r3,r2
10010050:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
10010054:	e0fff617 	ldw	r3,-40(fp)
10010058:	e0bffe17 	ldw	r2,-8(fp)
1001005c:	1885c83a 	sub	r2,r3,r2
10010060:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010064:	e0fffc17 	ldw	r3,-16(fp)
10010068:	e0bffe17 	ldw	r2,-8(fp)
1001006c:	1885883a 	add	r2,r3,r2
10010070:	10c1ffcc 	andi	r3,r2,2047
10010074:	e0bff817 	ldw	r2,-32(fp)
10010078:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001007c:	e0bff617 	ldw	r2,-40(fp)
10010080:	00bfcf16 	blt	zero,r2,1000ffc0 <altera_avalon_jtag_uart_read+0x2c>
10010084:	00000106 	br	1001008c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
10010088:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
1001008c:	e0ffff17 	ldw	r3,-4(fp)
10010090:	e0bff717 	ldw	r2,-36(fp)
10010094:	1880141e 	bne	r3,r2,100100e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010098:	e0bff517 	ldw	r2,-44(fp)
1001009c:	1090000c 	andi	r2,r2,16384
100100a0:	1000131e 	bne	r2,zero,100100f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100100a4:	0001883a 	nop
100100a8:	e0bff817 	ldw	r2,-32(fp)
100100ac:	10800a17 	ldw	r2,40(r2)
100100b0:	e0fffd17 	ldw	r3,-12(fp)
100100b4:	1880051e 	bne	r3,r2,100100cc <altera_avalon_jtag_uart_read+0x138>
100100b8:	e0bff817 	ldw	r2,-32(fp)
100100bc:	10c00917 	ldw	r3,36(r2)
100100c0:	e0bff817 	ldw	r2,-32(fp)
100100c4:	10800117 	ldw	r2,4(r2)
100100c8:	18bff736 	bltu	r3,r2,100100a8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100100cc:	e0bff817 	ldw	r2,-32(fp)
100100d0:	10800a17 	ldw	r2,40(r2)
100100d4:	e0fffd17 	ldw	r3,-12(fp)
100100d8:	18800726 	beq	r3,r2,100100f8 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
100100dc:	e0bff617 	ldw	r2,-40(fp)
100100e0:	00bfb716 	blt	zero,r2,1000ffc0 <altera_avalon_jtag_uart_read+0x2c>
100100e4:	00000506 	br	100100fc <altera_avalon_jtag_uart_read+0x168>
      break;
100100e8:	0001883a 	nop
100100ec:	00000306 	br	100100fc <altera_avalon_jtag_uart_read+0x168>
      break;
100100f0:	0001883a 	nop
100100f4:	00000106 	br	100100fc <altera_avalon_jtag_uart_read+0x168>
      break;
100100f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100100fc:	e0ffff17 	ldw	r3,-4(fp)
10010100:	e0bff717 	ldw	r2,-36(fp)
10010104:	18801826 	beq	r3,r2,10010168 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
10010108:	0005303a 	rdctl	r2,status
1001010c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010110:	e0fff917 	ldw	r3,-28(fp)
10010114:	00bfff84 	movi	r2,-2
10010118:	1884703a 	and	r2,r3,r2
1001011c:	1001703a 	wrctl	status,r2
  return context;
10010120:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010124:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010128:	e0bff817 	ldw	r2,-32(fp)
1001012c:	10800817 	ldw	r2,32(r2)
10010130:	10c00054 	ori	r3,r2,1
10010134:	e0bff817 	ldw	r2,-32(fp)
10010138:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001013c:	e0bff817 	ldw	r2,-32(fp)
10010140:	10800017 	ldw	r2,0(r2)
10010144:	10800104 	addi	r2,r2,4
10010148:	1007883a 	mov	r3,r2
1001014c:	e0bff817 	ldw	r2,-32(fp)
10010150:	10800817 	ldw	r2,32(r2)
10010154:	18800035 	stwio	r2,0(r3)
10010158:	e0bffb17 	ldw	r2,-20(fp)
1001015c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010160:	e0bffa17 	ldw	r2,-24(fp)
10010164:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010168:	e0ffff17 	ldw	r3,-4(fp)
1001016c:	e0bff717 	ldw	r2,-36(fp)
10010170:	18800426 	beq	r3,r2,10010184 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010174:	e0ffff17 	ldw	r3,-4(fp)
10010178:	e0bff717 	ldw	r2,-36(fp)
1001017c:	1885c83a 	sub	r2,r3,r2
10010180:	00000606 	br	1001019c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010184:	e0bff517 	ldw	r2,-44(fp)
10010188:	1090000c 	andi	r2,r2,16384
1001018c:	10000226 	beq	r2,zero,10010198 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010190:	00bffd44 	movi	r2,-11
10010194:	00000106 	br	1001019c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010198:	00bffec4 	movi	r2,-5
}
1001019c:	e037883a 	mov	sp,fp
100101a0:	dfc00117 	ldw	ra,4(sp)
100101a4:	df000017 	ldw	fp,0(sp)
100101a8:	dec00204 	addi	sp,sp,8
100101ac:	f800283a 	ret

100101b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100101b0:	defff304 	addi	sp,sp,-52
100101b4:	dfc00c15 	stw	ra,48(sp)
100101b8:	df000b15 	stw	fp,44(sp)
100101bc:	df000b04 	addi	fp,sp,44
100101c0:	e13ff815 	stw	r4,-32(fp)
100101c4:	e17ff715 	stw	r5,-36(fp)
100101c8:	e1bff615 	stw	r6,-40(fp)
100101cc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100101d0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100101d4:	e0bff717 	ldw	r2,-36(fp)
100101d8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100101dc:	00003706 	br	100102bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100101e0:	e0bff817 	ldw	r2,-32(fp)
100101e4:	10800c17 	ldw	r2,48(r2)
100101e8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
100101ec:	e0bff817 	ldw	r2,-32(fp)
100101f0:	10800d17 	ldw	r2,52(r2)
100101f4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
100101f8:	e0fffc17 	ldw	r3,-16(fp)
100101fc:	e0bfff17 	ldw	r2,-4(fp)
10010200:	1880062e 	bgeu	r3,r2,1001021c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010204:	e0ffff17 	ldw	r3,-4(fp)
10010208:	e0bffc17 	ldw	r2,-16(fp)
1001020c:	1885c83a 	sub	r2,r3,r2
10010210:	10bfffc4 	addi	r2,r2,-1
10010214:	e0bffe15 	stw	r2,-8(fp)
10010218:	00000b06 	br	10010248 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001021c:	e0bfff17 	ldw	r2,-4(fp)
10010220:	10000526 	beq	r2,zero,10010238 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010224:	00c20004 	movi	r3,2048
10010228:	e0bffc17 	ldw	r2,-16(fp)
1001022c:	1885c83a 	sub	r2,r3,r2
10010230:	e0bffe15 	stw	r2,-8(fp)
10010234:	00000406 	br	10010248 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010238:	00c1ffc4 	movi	r3,2047
1001023c:	e0bffc17 	ldw	r2,-16(fp)
10010240:	1885c83a 	sub	r2,r3,r2
10010244:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010248:	e0bffe17 	ldw	r2,-8(fp)
1001024c:	10001e26 	beq	r2,zero,100102c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010250:	e0fff617 	ldw	r3,-40(fp)
10010254:	e0bffe17 	ldw	r2,-8(fp)
10010258:	1880022e 	bgeu	r3,r2,10010264 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001025c:	e0bff617 	ldw	r2,-40(fp)
10010260:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010264:	e0bff817 	ldw	r2,-32(fp)
10010268:	10c20e04 	addi	r3,r2,2104
1001026c:	e0bffc17 	ldw	r2,-16(fp)
10010270:	1885883a 	add	r2,r3,r2
10010274:	e1bffe17 	ldw	r6,-8(fp)
10010278:	e17ff717 	ldw	r5,-36(fp)
1001027c:	1009883a 	mov	r4,r2
10010280:	00028e40 	call	100028e4 <memcpy>
      ptr   += n;
10010284:	e0fff717 	ldw	r3,-36(fp)
10010288:	e0bffe17 	ldw	r2,-8(fp)
1001028c:	1885883a 	add	r2,r3,r2
10010290:	e0bff715 	stw	r2,-36(fp)
      count -= n;
10010294:	e0fff617 	ldw	r3,-40(fp)
10010298:	e0bffe17 	ldw	r2,-8(fp)
1001029c:	1885c83a 	sub	r2,r3,r2
100102a0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100102a4:	e0fffc17 	ldw	r3,-16(fp)
100102a8:	e0bffe17 	ldw	r2,-8(fp)
100102ac:	1885883a 	add	r2,r3,r2
100102b0:	10c1ffcc 	andi	r3,r2,2047
100102b4:	e0bff817 	ldw	r2,-32(fp)
100102b8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
100102bc:	e0bff617 	ldw	r2,-40(fp)
100102c0:	00bfc716 	blt	zero,r2,100101e0 <altera_avalon_jtag_uart_write+0x30>
100102c4:	00000106 	br	100102cc <altera_avalon_jtag_uart_write+0x11c>
        break;
100102c8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
100102cc:	0005303a 	rdctl	r2,status
100102d0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102d4:	e0fff917 	ldw	r3,-28(fp)
100102d8:	00bfff84 	movi	r2,-2
100102dc:	1884703a 	and	r2,r3,r2
100102e0:	1001703a 	wrctl	status,r2
  return context;
100102e4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100102e8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100102ec:	e0bff817 	ldw	r2,-32(fp)
100102f0:	10800817 	ldw	r2,32(r2)
100102f4:	10c00094 	ori	r3,r2,2
100102f8:	e0bff817 	ldw	r2,-32(fp)
100102fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010300:	e0bff817 	ldw	r2,-32(fp)
10010304:	10800017 	ldw	r2,0(r2)
10010308:	10800104 	addi	r2,r2,4
1001030c:	1007883a 	mov	r3,r2
10010310:	e0bff817 	ldw	r2,-32(fp)
10010314:	10800817 	ldw	r2,32(r2)
10010318:	18800035 	stwio	r2,0(r3)
1001031c:	e0bffb17 	ldw	r2,-20(fp)
10010320:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010324:	e0bffa17 	ldw	r2,-24(fp)
10010328:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1001032c:	e0bff617 	ldw	r2,-40(fp)
10010330:	0080100e 	bge	zero,r2,10010374 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010334:	e0bff517 	ldw	r2,-44(fp)
10010338:	1090000c 	andi	r2,r2,16384
1001033c:	1000101e 	bne	r2,zero,10010380 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010340:	0001883a 	nop
10010344:	e0bff817 	ldw	r2,-32(fp)
10010348:	10800d17 	ldw	r2,52(r2)
1001034c:	e0ffff17 	ldw	r3,-4(fp)
10010350:	1880051e 	bne	r3,r2,10010368 <altera_avalon_jtag_uart_write+0x1b8>
10010354:	e0bff817 	ldw	r2,-32(fp)
10010358:	10c00917 	ldw	r3,36(r2)
1001035c:	e0bff817 	ldw	r2,-32(fp)
10010360:	10800117 	ldw	r2,4(r2)
10010364:	18bff736 	bltu	r3,r2,10010344 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010368:	e0bff817 	ldw	r2,-32(fp)
1001036c:	10800917 	ldw	r2,36(r2)
10010370:	1000051e 	bne	r2,zero,10010388 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010374:	e0bff617 	ldw	r2,-40(fp)
10010378:	00bfd016 	blt	zero,r2,100102bc <altera_avalon_jtag_uart_write+0x10c>
1001037c:	00000306 	br	1001038c <altera_avalon_jtag_uart_write+0x1dc>
        break;
10010380:	0001883a 	nop
10010384:	00000106 	br	1001038c <altera_avalon_jtag_uart_write+0x1dc>
         break;
10010388:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1001038c:	e0fff717 	ldw	r3,-36(fp)
10010390:	e0bffd17 	ldw	r2,-12(fp)
10010394:	18800426 	beq	r3,r2,100103a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010398:	e0fff717 	ldw	r3,-36(fp)
1001039c:	e0bffd17 	ldw	r2,-12(fp)
100103a0:	1885c83a 	sub	r2,r3,r2
100103a4:	00000606 	br	100103c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100103a8:	e0bff517 	ldw	r2,-44(fp)
100103ac:	1090000c 	andi	r2,r2,16384
100103b0:	10000226 	beq	r2,zero,100103bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100103b4:	00bffd44 	movi	r2,-11
100103b8:	00000106 	br	100103c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100103bc:	00bffec4 	movi	r2,-5
}
100103c0:	e037883a 	mov	sp,fp
100103c4:	dfc00117 	ldw	ra,4(sp)
100103c8:	df000017 	ldw	fp,0(sp)
100103cc:	dec00204 	addi	sp,sp,8
100103d0:	f800283a 	ret

100103d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
100103d4:	defffa04 	addi	sp,sp,-24
100103d8:	dfc00515 	stw	ra,20(sp)
100103dc:	df000415 	stw	fp,16(sp)
100103e0:	df000404 	addi	fp,sp,16
100103e4:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
100103e8:	0007883a 	mov	r3,zero
100103ec:	e0bffc17 	ldw	r2,-16(fp)
100103f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
100103f4:	e0bffc17 	ldw	r2,-16(fp)
100103f8:	10800104 	addi	r2,r2,4
100103fc:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
10010400:	0005303a 	rdctl	r2,status
10010404:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010408:	e0fffd17 	ldw	r3,-12(fp)
1001040c:	00bfff84 	movi	r2,-2
10010410:	1884703a 	and	r2,r3,r2
10010414:	1001703a 	wrctl	status,r2
  return context;
10010418:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
1001041c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
10010420:	0010fdc0 	call	10010fdc <alt_tick>
10010424:	e0bfff17 	ldw	r2,-4(fp)
10010428:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
1001042c:	e0bffe17 	ldw	r2,-8(fp)
10010430:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
10010434:	0001883a 	nop
10010438:	e037883a 	mov	sp,fp
1001043c:	dfc00117 	ldw	ra,4(sp)
10010440:	df000017 	ldw	fp,0(sp)
10010444:	dec00204 	addi	sp,sp,8
10010448:	f800283a 	ret

1001044c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
1001044c:	defff804 	addi	sp,sp,-32
10010450:	dfc00715 	stw	ra,28(sp)
10010454:	df000615 	stw	fp,24(sp)
10010458:	df000604 	addi	fp,sp,24
1001045c:	e13ffe15 	stw	r4,-8(fp)
10010460:	e17ffd15 	stw	r5,-12(fp)
10010464:	e1bffc15 	stw	r6,-16(fp)
10010468:	e1fffb15 	stw	r7,-20(fp)
1001046c:	e0bffb17 	ldw	r2,-20(fp)
10010470:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
10010474:	d0a8a017 	ldw	r2,-23936(gp)
10010478:	1000021e 	bne	r2,zero,10010484 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
1001047c:	e0bfff17 	ldw	r2,-4(fp)
10010480:	d0a8a015 	stw	r2,-23936(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
10010484:	e0bffe17 	ldw	r2,-8(fp)
10010488:	10800104 	addi	r2,r2,4
1001048c:	00c001c4 	movi	r3,7
10010490:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10010494:	d8000015 	stw	zero,0(sp)
10010498:	e1fffe17 	ldw	r7,-8(fp)
1001049c:	01840074 	movhi	r6,4097
100104a0:	3180f504 	addi	r6,r6,980
100104a4:	e17ffc17 	ldw	r5,-16(fp)
100104a8:	e13ffd17 	ldw	r4,-12(fp)
100104ac:	00109380 	call	10010938 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
100104b0:	0001883a 	nop
100104b4:	e037883a 	mov	sp,fp
100104b8:	dfc00117 	ldw	ra,4(sp)
100104bc:	df000017 	ldw	fp,0(sp)
100104c0:	dec00204 	addi	sp,sp,8
100104c4:	f800283a 	ret

100104c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100104c8:	defff504 	addi	sp,sp,-44
100104cc:	df000a15 	stw	fp,40(sp)
100104d0:	df000a04 	addi	fp,sp,40
100104d4:	e13ff915 	stw	r4,-28(fp)
100104d8:	e17ff815 	stw	r5,-32(fp)
100104dc:	e1bff715 	stw	r6,-36(fp)
100104e0:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100104e4:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
100104e8:	d0a8a017 	ldw	r2,-23936(gp)
  
  if (alt_ticks_per_second ())
100104ec:	10003c26 	beq	r2,zero,100105e0 <alt_alarm_start+0x118>
  {
    if (alarm)
100104f0:	e0bff917 	ldw	r2,-28(fp)
100104f4:	10003826 	beq	r2,zero,100105d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100104f8:	e0bff917 	ldw	r2,-28(fp)
100104fc:	e0fff717 	ldw	r3,-36(fp)
10010500:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010504:	e0bff917 	ldw	r2,-28(fp)
10010508:	e0fff617 	ldw	r3,-40(fp)
1001050c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
10010510:	0005303a 	rdctl	r2,status
10010514:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010518:	e0fffd17 	ldw	r3,-12(fp)
1001051c:	00bfff84 	movi	r2,-2
10010520:	1884703a 	and	r2,r3,r2
10010524:	1001703a 	wrctl	status,r2
  return context;
10010528:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
1001052c:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010530:	d0a8a117 	ldw	r2,-23932(gp)
      
      current_nticks = alt_nticks();
10010534:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010538:	e0fff817 	ldw	r3,-32(fp)
1001053c:	e0bfff17 	ldw	r2,-4(fp)
10010540:	1885883a 	add	r2,r3,r2
10010544:	10c00044 	addi	r3,r2,1
10010548:	e0bff917 	ldw	r2,-28(fp)
1001054c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010550:	e0bff917 	ldw	r2,-28(fp)
10010554:	10c00217 	ldw	r3,8(r2)
10010558:	e0bfff17 	ldw	r2,-4(fp)
1001055c:	1880042e 	bgeu	r3,r2,10010570 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010560:	e0bff917 	ldw	r2,-28(fp)
10010564:	00c00044 	movi	r3,1
10010568:	10c00405 	stb	r3,16(r2)
1001056c:	00000206 	br	10010578 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010570:	e0bff917 	ldw	r2,-28(fp)
10010574:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010578:	e0bff917 	ldw	r2,-28(fp)
1001057c:	d0e00d04 	addi	r3,gp,-32716
10010580:	e0fffb15 	stw	r3,-20(fp)
10010584:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010588:	e0bffa17 	ldw	r2,-24(fp)
1001058c:	e0fffb17 	ldw	r3,-20(fp)
10010590:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010594:	e0bffb17 	ldw	r2,-20(fp)
10010598:	10c00017 	ldw	r3,0(r2)
1001059c:	e0bffa17 	ldw	r2,-24(fp)
100105a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100105a4:	e0bffb17 	ldw	r2,-20(fp)
100105a8:	10800017 	ldw	r2,0(r2)
100105ac:	e0fffa17 	ldw	r3,-24(fp)
100105b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100105b4:	e0bffb17 	ldw	r2,-20(fp)
100105b8:	e0fffa17 	ldw	r3,-24(fp)
100105bc:	10c00015 	stw	r3,0(r2)
100105c0:	e0bffe17 	ldw	r2,-8(fp)
100105c4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
100105c8:	e0bffc17 	ldw	r2,-16(fp)
100105cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100105d0:	0005883a 	mov	r2,zero
100105d4:	00000306 	br	100105e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100105d8:	00bffa84 	movi	r2,-22
100105dc:	00000106 	br	100105e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100105e0:	00bfde84 	movi	r2,-134
  }
}
100105e4:	e037883a 	mov	sp,fp
100105e8:	df000017 	ldw	fp,0(sp)
100105ec:	dec00104 	addi	sp,sp,4
100105f0:	f800283a 	ret

100105f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100105f4:	defffb04 	addi	sp,sp,-20
100105f8:	df000415 	stw	fp,16(sp)
100105fc:	df000404 	addi	fp,sp,16
10010600:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10010604:	008000c4 	movi	r2,3
10010608:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001060c:	e0fffe17 	ldw	r3,-8(fp)
10010610:	008003f4 	movhi	r2,15
10010614:	10909004 	addi	r2,r2,16960
10010618:	1887383a 	mul	r3,r3,r2
1001061c:	00817db4 	movhi	r2,1526
10010620:	10b84004 	addi	r2,r2,-7936
10010624:	10c7203a 	divu	r3,r2,r3
  big_loops = us / (INT_MAX/
10010628:	00a00034 	movhi	r2,32768
1001062c:	10bfffc4 	addi	r2,r2,-1
10010630:	10c5203a 	divu	r2,r2,r3
10010634:	e0fffc17 	ldw	r3,-16(fp)
10010638:	1885203a 	divu	r2,r3,r2
1001063c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
10010640:	e0bffd17 	ldw	r2,-12(fp)
10010644:	10002526 	beq	r2,zero,100106dc <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
10010648:	e03fff15 	stw	zero,-4(fp)
1001064c:	00001406 	br	100106a0 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010650:	00a00034 	movhi	r2,32768
10010654:	10bfffc4 	addi	r2,r2,-1
10010658:	10bfffc4 	addi	r2,r2,-1
1001065c:	103ffe1e 	bne	r2,zero,10010658 <alt_busy_sleep+0x64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010660:	e0fffe17 	ldw	r3,-8(fp)
10010664:	008003f4 	movhi	r2,15
10010668:	10909004 	addi	r2,r2,16960
1001066c:	1887383a 	mul	r3,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010670:	00817db4 	movhi	r2,1526
10010674:	10b84004 	addi	r2,r2,-7936
10010678:	10c7203a 	divu	r3,r2,r3
1001067c:	00a00034 	movhi	r2,32768
10010680:	10bfffc4 	addi	r2,r2,-1
10010684:	10c5203a 	divu	r2,r2,r3
10010688:	e0fffc17 	ldw	r3,-16(fp)
1001068c:	1885c83a 	sub	r2,r3,r2
10010690:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
10010694:	e0bfff17 	ldw	r2,-4(fp)
10010698:	10800044 	addi	r2,r2,1
1001069c:	e0bfff15 	stw	r2,-4(fp)
100106a0:	e0ffff17 	ldw	r3,-4(fp)
100106a4:	e0bffd17 	ldw	r2,-12(fp)
100106a8:	18bfe916 	blt	r3,r2,10010650 <alt_busy_sleep+0x5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100106ac:	e0fffe17 	ldw	r3,-8(fp)
100106b0:	008003f4 	movhi	r2,15
100106b4:	10909004 	addi	r2,r2,16960
100106b8:	1887383a 	mul	r3,r3,r2
100106bc:	00817db4 	movhi	r2,1526
100106c0:	10b84004 	addi	r2,r2,-7936
100106c4:	10c7203a 	divu	r3,r2,r3
100106c8:	e0bffc17 	ldw	r2,-16(fp)
100106cc:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
100106d0:	10bfffc4 	addi	r2,r2,-1
100106d4:	103ffe1e 	bne	r2,zero,100106d0 <alt_busy_sleep+0xdc>
100106d8:	00000b06 	br	10010708 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100106dc:	e0fffe17 	ldw	r3,-8(fp)
100106e0:	008003f4 	movhi	r2,15
100106e4:	10909004 	addi	r2,r2,16960
100106e8:	1887383a 	mul	r3,r3,r2
100106ec:	00817db4 	movhi	r2,1526
100106f0:	10b84004 	addi	r2,r2,-7936
100106f4:	10c7203a 	divu	r3,r2,r3
100106f8:	e0bffc17 	ldw	r2,-16(fp)
100106fc:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10010700:	10bfffc4 	addi	r2,r2,-1
10010704:	00bffe16 	blt	zero,r2,10010700 <alt_busy_sleep+0x10c>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010708:	0005883a 	mov	r2,zero
}
1001070c:	e037883a 	mov	sp,fp
10010710:	df000017 	ldw	fp,0(sp)
10010714:	dec00104 	addi	sp,sp,4
10010718:	f800283a 	ret

1001071c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1001071c:	defffe04 	addi	sp,sp,-8
10010720:	df000115 	stw	fp,4(sp)
10010724:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10010728:	e03fff15 	stw	zero,-4(fp)
1001072c:	00000506 	br	10010744 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10010730:	e0bfff17 	ldw	r2,-4(fp)
10010734:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10010738:	e0bfff17 	ldw	r2,-4(fp)
1001073c:	10800804 	addi	r2,r2,32
10010740:	e0bfff15 	stw	r2,-4(fp)
10010744:	e0bfff17 	ldw	r2,-4(fp)
10010748:	10820030 	cmpltui	r2,r2,2048
1001074c:	103ff81e 	bne	r2,zero,10010730 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010750:	0001883a 	nop
10010754:	e037883a 	mov	sp,fp
10010758:	df000017 	ldw	fp,0(sp)
1001075c:	dec00104 	addi	sp,sp,4
10010760:	f800283a 	ret

10010764 <alt_get_errno>:
{
10010764:	defffe04 	addi	sp,sp,-8
10010768:	dfc00115 	stw	ra,4(sp)
1001076c:	df000015 	stw	fp,0(sp)
10010770:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010774:	d0a00a17 	ldw	r2,-32728(gp)
10010778:	10000326 	beq	r2,zero,10010788 <alt_get_errno+0x24>
1001077c:	d0a00a17 	ldw	r2,-32728(gp)
10010780:	103ee83a 	callr	r2
10010784:	00000106 	br	1001078c <alt_get_errno+0x28>
10010788:	d0a89a04 	addi	r2,gp,-23960
}
1001078c:	e037883a 	mov	sp,fp
10010790:	dfc00117 	ldw	ra,4(sp)
10010794:	df000017 	ldw	fp,0(sp)
10010798:	dec00204 	addi	sp,sp,8
1001079c:	f800283a 	ret

100107a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100107a0:	defffa04 	addi	sp,sp,-24
100107a4:	dfc00515 	stw	ra,20(sp)
100107a8:	df000415 	stw	fp,16(sp)
100107ac:	df000404 	addi	fp,sp,16
100107b0:	e13ffd15 	stw	r4,-12(fp)
100107b4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100107b8:	e0bffd17 	ldw	r2,-12(fp)
100107bc:	10000326 	beq	r2,zero,100107cc <alt_dev_llist_insert+0x2c>
100107c0:	e0bffd17 	ldw	r2,-12(fp)
100107c4:	10800217 	ldw	r2,8(r2)
100107c8:	1000061e 	bne	r2,zero,100107e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100107cc:	00107640 	call	10010764 <alt_get_errno>
100107d0:	1007883a 	mov	r3,r2
100107d4:	00800584 	movi	r2,22
100107d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100107dc:	00bffa84 	movi	r2,-22
100107e0:	00001306 	br	10010830 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100107e4:	e0bffd17 	ldw	r2,-12(fp)
100107e8:	e0fffc17 	ldw	r3,-16(fp)
100107ec:	e0ffff15 	stw	r3,-4(fp)
100107f0:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
100107f4:	e0bffe17 	ldw	r2,-8(fp)
100107f8:	e0ffff17 	ldw	r3,-4(fp)
100107fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010800:	e0bfff17 	ldw	r2,-4(fp)
10010804:	10c00017 	ldw	r3,0(r2)
10010808:	e0bffe17 	ldw	r2,-8(fp)
1001080c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
10010810:	e0bfff17 	ldw	r2,-4(fp)
10010814:	10800017 	ldw	r2,0(r2)
10010818:	e0fffe17 	ldw	r3,-8(fp)
1001081c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010820:	e0bfff17 	ldw	r2,-4(fp)
10010824:	e0fffe17 	ldw	r3,-8(fp)
10010828:	10c00015 	stw	r3,0(r2)

  return 0;  
1001082c:	0005883a 	mov	r2,zero
}
10010830:	e037883a 	mov	sp,fp
10010834:	dfc00117 	ldw	ra,4(sp)
10010838:	df000017 	ldw	fp,0(sp)
1001083c:	dec00204 	addi	sp,sp,8
10010840:	f800283a 	ret

10010844 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010844:	defffd04 	addi	sp,sp,-12
10010848:	dfc00215 	stw	ra,8(sp)
1001084c:	df000115 	stw	fp,4(sp)
10010850:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010854:	00840074 	movhi	r2,4097
10010858:	1085c504 	addi	r2,r2,5908
1001085c:	e0bfff15 	stw	r2,-4(fp)
10010860:	00000606 	br	1001087c <_do_ctors+0x38>
        (*ctor) (); 
10010864:	e0bfff17 	ldw	r2,-4(fp)
10010868:	10800017 	ldw	r2,0(r2)
1001086c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010870:	e0bfff17 	ldw	r2,-4(fp)
10010874:	10bfff04 	addi	r2,r2,-4
10010878:	e0bfff15 	stw	r2,-4(fp)
1001087c:	e0ffff17 	ldw	r3,-4(fp)
10010880:	00840074 	movhi	r2,4097
10010884:	1085c604 	addi	r2,r2,5912
10010888:	18bff62e 	bgeu	r3,r2,10010864 <_do_ctors+0x20>
}
1001088c:	0001883a 	nop
10010890:	e037883a 	mov	sp,fp
10010894:	dfc00117 	ldw	ra,4(sp)
10010898:	df000017 	ldw	fp,0(sp)
1001089c:	dec00204 	addi	sp,sp,8
100108a0:	f800283a 	ret

100108a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100108a4:	defffd04 	addi	sp,sp,-12
100108a8:	dfc00215 	stw	ra,8(sp)
100108ac:	df000115 	stw	fp,4(sp)
100108b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100108b4:	00840074 	movhi	r2,4097
100108b8:	1085c504 	addi	r2,r2,5908
100108bc:	e0bfff15 	stw	r2,-4(fp)
100108c0:	00000606 	br	100108dc <_do_dtors+0x38>
        (*dtor) (); 
100108c4:	e0bfff17 	ldw	r2,-4(fp)
100108c8:	10800017 	ldw	r2,0(r2)
100108cc:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100108d0:	e0bfff17 	ldw	r2,-4(fp)
100108d4:	10bfff04 	addi	r2,r2,-4
100108d8:	e0bfff15 	stw	r2,-4(fp)
100108dc:	e0ffff17 	ldw	r3,-4(fp)
100108e0:	00840074 	movhi	r2,4097
100108e4:	1085c604 	addi	r2,r2,5912
100108e8:	18bff62e 	bgeu	r3,r2,100108c4 <_do_dtors+0x20>
}
100108ec:	0001883a 	nop
100108f0:	e037883a 	mov	sp,fp
100108f4:	dfc00117 	ldw	ra,4(sp)
100108f8:	df000017 	ldw	fp,0(sp)
100108fc:	dec00204 	addi	sp,sp,8
10010900:	f800283a 	ret

10010904 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010904:	defffe04 	addi	sp,sp,-8
10010908:	dfc00115 	stw	ra,4(sp)
1001090c:	df000015 	stw	fp,0(sp)
10010910:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10010914:	01440004 	movi	r5,4096
10010918:	0009883a 	mov	r4,zero
1001091c:	00113400 	call	10011340 <alt_icache_flush>
#endif
}
10010920:	0001883a 	nop
10010924:	e037883a 	mov	sp,fp
10010928:	dfc00117 	ldw	ra,4(sp)
1001092c:	df000017 	ldw	fp,0(sp)
10010930:	dec00204 	addi	sp,sp,8
10010934:	f800283a 	ret

10010938 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010938:	defff904 	addi	sp,sp,-28
1001093c:	dfc00615 	stw	ra,24(sp)
10010940:	df000515 	stw	fp,20(sp)
10010944:	df000504 	addi	fp,sp,20
10010948:	e13fff15 	stw	r4,-4(fp)
1001094c:	e17ffe15 	stw	r5,-8(fp)
10010950:	e1bffd15 	stw	r6,-12(fp)
10010954:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010958:	e0800217 	ldw	r2,8(fp)
1001095c:	d8800015 	stw	r2,0(sp)
10010960:	e1fffc17 	ldw	r7,-16(fp)
10010964:	e1bffd17 	ldw	r6,-12(fp)
10010968:	e17ffe17 	ldw	r5,-8(fp)
1001096c:	e13fff17 	ldw	r4,-4(fp)
10010970:	0010ae80 	call	10010ae8 <alt_iic_isr_register>
}  
10010974:	e037883a 	mov	sp,fp
10010978:	dfc00117 	ldw	ra,4(sp)
1001097c:	df000017 	ldw	fp,0(sp)
10010980:	dec00204 	addi	sp,sp,8
10010984:	f800283a 	ret

10010988 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010988:	defff904 	addi	sp,sp,-28
1001098c:	df000615 	stw	fp,24(sp)
10010990:	df000604 	addi	fp,sp,24
10010994:	e13ffb15 	stw	r4,-20(fp)
10010998:	e17ffa15 	stw	r5,-24(fp)
1001099c:	e0bffa17 	ldw	r2,-24(fp)
100109a0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
100109a4:	0005303a 	rdctl	r2,status
100109a8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100109ac:	e0fffe17 	ldw	r3,-8(fp)
100109b0:	00bfff84 	movi	r2,-2
100109b4:	1884703a 	and	r2,r3,r2
100109b8:	1001703a 	wrctl	status,r2
  return context;
100109bc:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100109c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
100109c4:	00c00044 	movi	r3,1
100109c8:	e0bfff17 	ldw	r2,-4(fp)
100109cc:	1884983a 	sll	r2,r3,r2
100109d0:	1007883a 	mov	r3,r2
100109d4:	d0a89f17 	ldw	r2,-23940(gp)
100109d8:	1884b03a 	or	r2,r3,r2
100109dc:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100109e0:	d0a89f17 	ldw	r2,-23940(gp)
100109e4:	100170fa 	wrctl	ienable,r2
100109e8:	e0bffd17 	ldw	r2,-12(fp)
100109ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
100109f0:	e0bffc17 	ldw	r2,-16(fp)
100109f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100109f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100109fc:	0001883a 	nop
}
10010a00:	e037883a 	mov	sp,fp
10010a04:	df000017 	ldw	fp,0(sp)
10010a08:	dec00104 	addi	sp,sp,4
10010a0c:	f800283a 	ret

10010a10 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010a10:	defff904 	addi	sp,sp,-28
10010a14:	df000615 	stw	fp,24(sp)
10010a18:	df000604 	addi	fp,sp,24
10010a1c:	e13ffb15 	stw	r4,-20(fp)
10010a20:	e17ffa15 	stw	r5,-24(fp)
10010a24:	e0bffa17 	ldw	r2,-24(fp)
10010a28:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
10010a2c:	0005303a 	rdctl	r2,status
10010a30:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a34:	e0fffe17 	ldw	r3,-8(fp)
10010a38:	00bfff84 	movi	r2,-2
10010a3c:	1884703a 	and	r2,r3,r2
10010a40:	1001703a 	wrctl	status,r2
  return context;
10010a44:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
10010a48:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
10010a4c:	00c00044 	movi	r3,1
10010a50:	e0bfff17 	ldw	r2,-4(fp)
10010a54:	1884983a 	sll	r2,r3,r2
10010a58:	0084303a 	nor	r2,zero,r2
10010a5c:	1007883a 	mov	r3,r2
10010a60:	d0a89f17 	ldw	r2,-23940(gp)
10010a64:	1884703a 	and	r2,r3,r2
10010a68:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010a6c:	d0a89f17 	ldw	r2,-23940(gp)
10010a70:	100170fa 	wrctl	ienable,r2
10010a74:	e0bffd17 	ldw	r2,-12(fp)
10010a78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10010a7c:	e0bffc17 	ldw	r2,-16(fp)
10010a80:	1001703a 	wrctl	status,r2
  return 0;
10010a84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010a88:	0001883a 	nop
}
10010a8c:	e037883a 	mov	sp,fp
10010a90:	df000017 	ldw	fp,0(sp)
10010a94:	dec00104 	addi	sp,sp,4
10010a98:	f800283a 	ret

10010a9c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010a9c:	defffc04 	addi	sp,sp,-16
10010aa0:	df000315 	stw	fp,12(sp)
10010aa4:	df000304 	addi	fp,sp,12
10010aa8:	e13ffe15 	stw	r4,-8(fp)
10010aac:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010ab0:	000530fa 	rdctl	r2,ienable
10010ab4:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010ab8:	00c00044 	movi	r3,1
10010abc:	e0bffd17 	ldw	r2,-12(fp)
10010ac0:	1884983a 	sll	r2,r3,r2
10010ac4:	1007883a 	mov	r3,r2
10010ac8:	e0bfff17 	ldw	r2,-4(fp)
10010acc:	1884703a 	and	r2,r3,r2
10010ad0:	1004c03a 	cmpne	r2,r2,zero
10010ad4:	10803fcc 	andi	r2,r2,255
}
10010ad8:	e037883a 	mov	sp,fp
10010adc:	df000017 	ldw	fp,0(sp)
10010ae0:	dec00104 	addi	sp,sp,4
10010ae4:	f800283a 	ret

10010ae8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010ae8:	defff504 	addi	sp,sp,-44
10010aec:	dfc00a15 	stw	ra,40(sp)
10010af0:	df000915 	stw	fp,36(sp)
10010af4:	df000904 	addi	fp,sp,36
10010af8:	e13ffa15 	stw	r4,-24(fp)
10010afc:	e17ff915 	stw	r5,-28(fp)
10010b00:	e1bff815 	stw	r6,-32(fp)
10010b04:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
10010b08:	00bffa84 	movi	r2,-22
10010b0c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010b10:	e0bff917 	ldw	r2,-28(fp)
10010b14:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010b18:	e0bffe17 	ldw	r2,-8(fp)
10010b1c:	10800808 	cmpgei	r2,r2,32
10010b20:	1000241e 	bne	r2,zero,10010bb4 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
10010b24:	0005303a 	rdctl	r2,status
10010b28:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b2c:	e0fffc17 	ldw	r3,-16(fp)
10010b30:	00bfff84 	movi	r2,-2
10010b34:	1884703a 	and	r2,r3,r2
10010b38:	1001703a 	wrctl	status,r2
  return context;
10010b3c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010b40:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
10010b44:	e0bffe17 	ldw	r2,-8(fp)
10010b48:	100890fa 	slli	r4,r2,3
10010b4c:	e0fff817 	ldw	r3,-32(fp)
10010b50:	00840074 	movhi	r2,4097
10010b54:	2085883a 	add	r2,r4,r2
10010b58:	10d91015 	stw	r3,25664(r2)
    alt_irq[id].context = isr_context;
10010b5c:	e0bffe17 	ldw	r2,-8(fp)
10010b60:	100890fa 	slli	r4,r2,3
10010b64:	e0fff717 	ldw	r3,-36(fp)
10010b68:	00840074 	movhi	r2,4097
10010b6c:	2085883a 	add	r2,r4,r2
10010b70:	10d91115 	stw	r3,25668(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010b74:	e0bff817 	ldw	r2,-32(fp)
10010b78:	10000526 	beq	r2,zero,10010b90 <alt_iic_isr_register+0xa8>
10010b7c:	e0bffe17 	ldw	r2,-8(fp)
10010b80:	100b883a 	mov	r5,r2
10010b84:	e13ffa17 	ldw	r4,-24(fp)
10010b88:	00109880 	call	10010988 <alt_ic_irq_enable>
10010b8c:	00000406 	br	10010ba0 <alt_iic_isr_register+0xb8>
10010b90:	e0bffe17 	ldw	r2,-8(fp)
10010b94:	100b883a 	mov	r5,r2
10010b98:	e13ffa17 	ldw	r4,-24(fp)
10010b9c:	0010a100 	call	10010a10 <alt_ic_irq_disable>
10010ba0:	e0bfff15 	stw	r2,-4(fp)
10010ba4:	e0bffd17 	ldw	r2,-12(fp)
10010ba8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
10010bac:	e0bffb17 	ldw	r2,-20(fp)
10010bb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010bb4:	e0bfff17 	ldw	r2,-4(fp)
}
10010bb8:	e037883a 	mov	sp,fp
10010bbc:	dfc00117 	ldw	ra,4(sp)
10010bc0:	df000017 	ldw	fp,0(sp)
10010bc4:	dec00204 	addi	sp,sp,8
10010bc8:	f800283a 	ret

10010bcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010bcc:	defff904 	addi	sp,sp,-28
10010bd0:	dfc00615 	stw	ra,24(sp)
10010bd4:	df000515 	stw	fp,20(sp)
10010bd8:	df000504 	addi	fp,sp,20
10010bdc:	e13ffe15 	stw	r4,-8(fp)
10010be0:	e17ffd15 	stw	r5,-12(fp)
10010be4:	e1bffc15 	stw	r6,-16(fp)
10010be8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
10010bec:	e1bffb17 	ldw	r6,-20(fp)
10010bf0:	e17ffc17 	ldw	r5,-16(fp)
10010bf4:	e13ffd17 	ldw	r4,-12(fp)
10010bf8:	0010dec0 	call	10010dec <open>
10010bfc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
10010c00:	e0bfff17 	ldw	r2,-4(fp)
10010c04:	10001716 	blt	r2,zero,10010c64 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
10010c08:	e0bfff17 	ldw	r2,-4(fp)
10010c0c:	10c00324 	muli	r3,r2,12
10010c10:	00840074 	movhi	r2,4097
10010c14:	1885883a 	add	r2,r3,r2
10010c18:	10cbeb17 	ldw	r3,12204(r2)
10010c1c:	e0bffe17 	ldw	r2,-8(fp)
10010c20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010c24:	e0bfff17 	ldw	r2,-4(fp)
10010c28:	10c00324 	muli	r3,r2,12
10010c2c:	00840074 	movhi	r2,4097
10010c30:	1885883a 	add	r2,r3,r2
10010c34:	10cbec17 	ldw	r3,12208(r2)
10010c38:	e0bffe17 	ldw	r2,-8(fp)
10010c3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010c40:	e0bfff17 	ldw	r2,-4(fp)
10010c44:	10c00324 	muli	r3,r2,12
10010c48:	00840074 	movhi	r2,4097
10010c4c:	1885883a 	add	r2,r3,r2
10010c50:	10cbed17 	ldw	r3,12212(r2)
10010c54:	e0bffe17 	ldw	r2,-8(fp)
10010c58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010c5c:	e13fff17 	ldw	r4,-4(fp)
10010c60:	000f6380 	call	1000f638 <alt_release_fd>
  }
} 
10010c64:	0001883a 	nop
10010c68:	e037883a 	mov	sp,fp
10010c6c:	dfc00117 	ldw	ra,4(sp)
10010c70:	df000017 	ldw	fp,0(sp)
10010c74:	dec00204 	addi	sp,sp,8
10010c78:	f800283a 	ret

10010c7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010c7c:	defffb04 	addi	sp,sp,-20
10010c80:	dfc00415 	stw	ra,16(sp)
10010c84:	df000315 	stw	fp,12(sp)
10010c88:	df000304 	addi	fp,sp,12
10010c8c:	e13fff15 	stw	r4,-4(fp)
10010c90:	e17ffe15 	stw	r5,-8(fp)
10010c94:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010c98:	01c07fc4 	movi	r7,511
10010c9c:	01800044 	movi	r6,1
10010ca0:	e17fff17 	ldw	r5,-4(fp)
10010ca4:	01040074 	movhi	r4,4097
10010ca8:	210bee04 	addi	r4,r4,12216
10010cac:	0010bcc0 	call	10010bcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010cb0:	01c07fc4 	movi	r7,511
10010cb4:	000d883a 	mov	r6,zero
10010cb8:	e17ffe17 	ldw	r5,-8(fp)
10010cbc:	01040074 	movhi	r4,4097
10010cc0:	210beb04 	addi	r4,r4,12204
10010cc4:	0010bcc0 	call	10010bcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010cc8:	01c07fc4 	movi	r7,511
10010ccc:	01800044 	movi	r6,1
10010cd0:	e17ffd17 	ldw	r5,-12(fp)
10010cd4:	01040074 	movhi	r4,4097
10010cd8:	210bf104 	addi	r4,r4,12228
10010cdc:	0010bcc0 	call	10010bcc <alt_open_fd>
}  
10010ce0:	0001883a 	nop
10010ce4:	e037883a 	mov	sp,fp
10010ce8:	dfc00117 	ldw	ra,4(sp)
10010cec:	df000017 	ldw	fp,0(sp)
10010cf0:	dec00204 	addi	sp,sp,8
10010cf4:	f800283a 	ret

10010cf8 <alt_get_errno>:
{
10010cf8:	defffe04 	addi	sp,sp,-8
10010cfc:	dfc00115 	stw	ra,4(sp)
10010d00:	df000015 	stw	fp,0(sp)
10010d04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010d08:	d0a00a17 	ldw	r2,-32728(gp)
10010d0c:	10000326 	beq	r2,zero,10010d1c <alt_get_errno+0x24>
10010d10:	d0a00a17 	ldw	r2,-32728(gp)
10010d14:	103ee83a 	callr	r2
10010d18:	00000106 	br	10010d20 <alt_get_errno+0x28>
10010d1c:	d0a89a04 	addi	r2,gp,-23960
}
10010d20:	e037883a 	mov	sp,fp
10010d24:	dfc00117 	ldw	ra,4(sp)
10010d28:	df000017 	ldw	fp,0(sp)
10010d2c:	dec00204 	addi	sp,sp,8
10010d30:	f800283a 	ret

10010d34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010d34:	defffd04 	addi	sp,sp,-12
10010d38:	df000215 	stw	fp,8(sp)
10010d3c:	df000204 	addi	fp,sp,8
10010d40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010d44:	e0bffe17 	ldw	r2,-8(fp)
10010d48:	10800217 	ldw	r2,8(r2)
10010d4c:	10d00034 	orhi	r3,r2,16384
10010d50:	e0bffe17 	ldw	r2,-8(fp)
10010d54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010d58:	e03fff15 	stw	zero,-4(fp)
10010d5c:	00001a06 	br	10010dc8 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010d60:	e0bfff17 	ldw	r2,-4(fp)
10010d64:	10c00324 	muli	r3,r2,12
10010d68:	00840074 	movhi	r2,4097
10010d6c:	1885883a 	add	r2,r3,r2
10010d70:	10cbeb17 	ldw	r3,12204(r2)
10010d74:	e0bffe17 	ldw	r2,-8(fp)
10010d78:	10800017 	ldw	r2,0(r2)
10010d7c:	18800f1e 	bne	r3,r2,10010dbc <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010d80:	e0bfff17 	ldw	r2,-4(fp)
10010d84:	10c00324 	muli	r3,r2,12
10010d88:	00840074 	movhi	r2,4097
10010d8c:	1885883a 	add	r2,r3,r2
10010d90:	108bed17 	ldw	r2,12212(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
10010d94:	1000090e 	bge	r2,zero,10010dbc <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
10010d98:	e0bfff17 	ldw	r2,-4(fp)
10010d9c:	10c00324 	muli	r3,r2,12
10010da0:	00840074 	movhi	r2,4097
10010da4:	108beb04 	addi	r2,r2,12204
10010da8:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010dac:	e0fffe17 	ldw	r3,-8(fp)
10010db0:	18800226 	beq	r3,r2,10010dbc <alt_file_locked+0x88>
    {
      return -EACCES;
10010db4:	00bffcc4 	movi	r2,-13
10010db8:	00000806 	br	10010ddc <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
10010dbc:	e0bfff17 	ldw	r2,-4(fp)
10010dc0:	10800044 	addi	r2,r2,1
10010dc4:	e0bfff15 	stw	r2,-4(fp)
10010dc8:	d0a00917 	ldw	r2,-32732(gp)
10010dcc:	1007883a 	mov	r3,r2
10010dd0:	e0bfff17 	ldw	r2,-4(fp)
10010dd4:	18bfe22e 	bgeu	r3,r2,10010d60 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010dd8:	0005883a 	mov	r2,zero
}
10010ddc:	e037883a 	mov	sp,fp
10010de0:	df000017 	ldw	fp,0(sp)
10010de4:	dec00104 	addi	sp,sp,4
10010de8:	f800283a 	ret

10010dec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010dec:	defff604 	addi	sp,sp,-40
10010df0:	dfc00915 	stw	ra,36(sp)
10010df4:	df000815 	stw	fp,32(sp)
10010df8:	df000804 	addi	fp,sp,32
10010dfc:	e13ffa15 	stw	r4,-24(fp)
10010e00:	e17ff915 	stw	r5,-28(fp)
10010e04:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010e08:	00bfffc4 	movi	r2,-1
10010e0c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
10010e10:	00bffb44 	movi	r2,-19
10010e14:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
10010e18:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010e1c:	d1600704 	addi	r5,gp,-32740
10010e20:	e13ffa17 	ldw	r4,-24(fp)
10010e24:	00111080 	call	10011108 <alt_find_dev>
10010e28:	e0bfff15 	stw	r2,-4(fp)
10010e2c:	e0bfff17 	ldw	r2,-4(fp)
10010e30:	1000051e 	bne	r2,zero,10010e48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010e34:	e13ffa17 	ldw	r4,-24(fp)
10010e38:	00111980 	call	10011198 <alt_find_file>
10010e3c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
10010e40:	00800044 	movi	r2,1
10010e44:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010e48:	e0bfff17 	ldw	r2,-4(fp)
10010e4c:	10002926 	beq	r2,zero,10010ef4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010e50:	e13fff17 	ldw	r4,-4(fp)
10010e54:	00112a00 	call	100112a0 <alt_get_fd>
10010e58:	e0bffe15 	stw	r2,-8(fp)
10010e5c:	e0bffe17 	ldw	r2,-8(fp)
10010e60:	1000030e 	bge	r2,zero,10010e70 <open+0x84>
    {
      status = index;
10010e64:	e0bffe17 	ldw	r2,-8(fp)
10010e68:	e0bffd15 	stw	r2,-12(fp)
10010e6c:	00002306 	br	10010efc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10010e70:	e0bffe17 	ldw	r2,-8(fp)
10010e74:	10c00324 	muli	r3,r2,12
10010e78:	00840074 	movhi	r2,4097
10010e7c:	108beb04 	addi	r2,r2,12204
10010e80:	1885883a 	add	r2,r3,r2
10010e84:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010e88:	e0fff917 	ldw	r3,-28(fp)
10010e8c:	00900034 	movhi	r2,16384
10010e90:	10bfffc4 	addi	r2,r2,-1
10010e94:	1886703a 	and	r3,r3,r2
10010e98:	e0bffb17 	ldw	r2,-20(fp)
10010e9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010ea0:	e0bffc17 	ldw	r2,-16(fp)
10010ea4:	1000051e 	bne	r2,zero,10010ebc <open+0xd0>
10010ea8:	e13ffb17 	ldw	r4,-20(fp)
10010eac:	0010d340 	call	10010d34 <alt_file_locked>
10010eb0:	e0bffd15 	stw	r2,-12(fp)
10010eb4:	e0bffd17 	ldw	r2,-12(fp)
10010eb8:	10001016 	blt	r2,zero,10010efc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010ebc:	e0bfff17 	ldw	r2,-4(fp)
10010ec0:	10800317 	ldw	r2,12(r2)
10010ec4:	10000826 	beq	r2,zero,10010ee8 <open+0xfc>
10010ec8:	e0bfff17 	ldw	r2,-4(fp)
10010ecc:	10800317 	ldw	r2,12(r2)
10010ed0:	e1fff817 	ldw	r7,-32(fp)
10010ed4:	e1bff917 	ldw	r6,-28(fp)
10010ed8:	e17ffa17 	ldw	r5,-24(fp)
10010edc:	e13ffb17 	ldw	r4,-20(fp)
10010ee0:	103ee83a 	callr	r2
10010ee4:	00000106 	br	10010eec <open+0x100>
10010ee8:	0005883a 	mov	r2,zero
10010eec:	e0bffd15 	stw	r2,-12(fp)
10010ef0:	00000206 	br	10010efc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010ef4:	00bffb44 	movi	r2,-19
10010ef8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010efc:	e0bffd17 	ldw	r2,-12(fp)
10010f00:	1000090e 	bge	r2,zero,10010f28 <open+0x13c>
  {
    alt_release_fd (index);  
10010f04:	e13ffe17 	ldw	r4,-8(fp)
10010f08:	000f6380 	call	1000f638 <alt_release_fd>
    ALT_ERRNO = -status;
10010f0c:	0010cf80 	call	10010cf8 <alt_get_errno>
10010f10:	1007883a 	mov	r3,r2
10010f14:	e0bffd17 	ldw	r2,-12(fp)
10010f18:	0085c83a 	sub	r2,zero,r2
10010f1c:	18800015 	stw	r2,0(r3)
    return -1;
10010f20:	00bfffc4 	movi	r2,-1
10010f24:	00000106 	br	10010f2c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10010f28:	e0bffe17 	ldw	r2,-8(fp)
}
10010f2c:	e037883a 	mov	sp,fp
10010f30:	dfc00117 	ldw	ra,4(sp)
10010f34:	df000017 	ldw	fp,0(sp)
10010f38:	dec00204 	addi	sp,sp,8
10010f3c:	f800283a 	ret

10010f40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010f40:	defffa04 	addi	sp,sp,-24
10010f44:	df000515 	stw	fp,20(sp)
10010f48:	df000504 	addi	fp,sp,20
10010f4c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
10010f50:	0005303a 	rdctl	r2,status
10010f54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f58:	e0fffc17 	ldw	r3,-16(fp)
10010f5c:	00bfff84 	movi	r2,-2
10010f60:	1884703a 	and	r2,r3,r2
10010f64:	1001703a 	wrctl	status,r2
  return context;
10010f68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010f6c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
10010f70:	e0bffb17 	ldw	r2,-20(fp)
10010f74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010f78:	e0bffd17 	ldw	r2,-12(fp)
10010f7c:	10800017 	ldw	r2,0(r2)
10010f80:	e0fffd17 	ldw	r3,-12(fp)
10010f84:	18c00117 	ldw	r3,4(r3)
10010f88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010f8c:	e0bffd17 	ldw	r2,-12(fp)
10010f90:	10800117 	ldw	r2,4(r2)
10010f94:	e0fffd17 	ldw	r3,-12(fp)
10010f98:	18c00017 	ldw	r3,0(r3)
10010f9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10010fa0:	e0bffd17 	ldw	r2,-12(fp)
10010fa4:	e0fffd17 	ldw	r3,-12(fp)
10010fa8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010fac:	e0bffd17 	ldw	r2,-12(fp)
10010fb0:	e0fffd17 	ldw	r3,-12(fp)
10010fb4:	10c00015 	stw	r3,0(r2)
10010fb8:	e0bfff17 	ldw	r2,-4(fp)
10010fbc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10010fc0:	e0bffe17 	ldw	r2,-8(fp)
10010fc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010fc8:	0001883a 	nop
10010fcc:	e037883a 	mov	sp,fp
10010fd0:	df000017 	ldw	fp,0(sp)
10010fd4:	dec00104 	addi	sp,sp,4
10010fd8:	f800283a 	ret

10010fdc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010fdc:	defffb04 	addi	sp,sp,-20
10010fe0:	dfc00415 	stw	ra,16(sp)
10010fe4:	df000315 	stw	fp,12(sp)
10010fe8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010fec:	d0a00d17 	ldw	r2,-32716(gp)
10010ff0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010ff4:	d0a8a117 	ldw	r2,-23932(gp)
10010ff8:	10800044 	addi	r2,r2,1
10010ffc:	d0a8a115 	stw	r2,-23932(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011000:	00002e06 	br	100110bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011004:	e0bfff17 	ldw	r2,-4(fp)
10011008:	10800017 	ldw	r2,0(r2)
1001100c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011010:	e0bfff17 	ldw	r2,-4(fp)
10011014:	10800403 	ldbu	r2,16(r2)
10011018:	10803fcc 	andi	r2,r2,255
1001101c:	10000426 	beq	r2,zero,10011030 <alt_tick+0x54>
10011020:	d0a8a117 	ldw	r2,-23932(gp)
10011024:	1000021e 	bne	r2,zero,10011030 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011028:	e0bfff17 	ldw	r2,-4(fp)
1001102c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011030:	e0bfff17 	ldw	r2,-4(fp)
10011034:	10800217 	ldw	r2,8(r2)
10011038:	d0e8a117 	ldw	r3,-23932(gp)
1001103c:	18801d36 	bltu	r3,r2,100110b4 <alt_tick+0xd8>
10011040:	e0bfff17 	ldw	r2,-4(fp)
10011044:	10800403 	ldbu	r2,16(r2)
10011048:	10803fcc 	andi	r2,r2,255
1001104c:	1000191e 	bne	r2,zero,100110b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011050:	e0bfff17 	ldw	r2,-4(fp)
10011054:	10800317 	ldw	r2,12(r2)
10011058:	e0ffff17 	ldw	r3,-4(fp)
1001105c:	18c00517 	ldw	r3,20(r3)
10011060:	1809883a 	mov	r4,r3
10011064:	103ee83a 	callr	r2
10011068:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001106c:	e0bffd17 	ldw	r2,-12(fp)
10011070:	1000031e 	bne	r2,zero,10011080 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011074:	e13fff17 	ldw	r4,-4(fp)
10011078:	0010f400 	call	10010f40 <alt_alarm_stop>
1001107c:	00000d06 	br	100110b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011080:	e0bfff17 	ldw	r2,-4(fp)
10011084:	10c00217 	ldw	r3,8(r2)
10011088:	e0bffd17 	ldw	r2,-12(fp)
1001108c:	1887883a 	add	r3,r3,r2
10011090:	e0bfff17 	ldw	r2,-4(fp)
10011094:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011098:	e0bfff17 	ldw	r2,-4(fp)
1001109c:	10c00217 	ldw	r3,8(r2)
100110a0:	d0a8a117 	ldw	r2,-23932(gp)
100110a4:	1880032e 	bgeu	r3,r2,100110b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100110a8:	e0bfff17 	ldw	r2,-4(fp)
100110ac:	00c00044 	movi	r3,1
100110b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100110b4:	e0bffe17 	ldw	r2,-8(fp)
100110b8:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
100110bc:	e0ffff17 	ldw	r3,-4(fp)
100110c0:	d0a00d04 	addi	r2,gp,-32716
100110c4:	18bfcf1e 	bne	r3,r2,10011004 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100110c8:	0001883a 	nop
}
100110cc:	0001883a 	nop
100110d0:	e037883a 	mov	sp,fp
100110d4:	dfc00117 	ldw	ra,4(sp)
100110d8:	df000017 	ldw	fp,0(sp)
100110dc:	dec00204 	addi	sp,sp,8
100110e0:	f800283a 	ret

100110e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100110e4:	deffff04 	addi	sp,sp,-4
100110e8:	df000015 	stw	fp,0(sp)
100110ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100110f0:	000170fa 	wrctl	ienable,zero
}
100110f4:	0001883a 	nop
100110f8:	e037883a 	mov	sp,fp
100110fc:	df000017 	ldw	fp,0(sp)
10011100:	dec00104 	addi	sp,sp,4
10011104:	f800283a 	ret

10011108 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011108:	defffa04 	addi	sp,sp,-24
1001110c:	dfc00515 	stw	ra,20(sp)
10011110:	df000415 	stw	fp,16(sp)
10011114:	df000404 	addi	fp,sp,16
10011118:	e13ffd15 	stw	r4,-12(fp)
1001111c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011120:	e0bffc17 	ldw	r2,-16(fp)
10011124:	10800017 	ldw	r2,0(r2)
10011128:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1001112c:	e13ffd17 	ldw	r4,-12(fp)
10011130:	0002b280 	call	10002b28 <strlen>
10011134:	10800044 	addi	r2,r2,1
10011138:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001113c:	00000d06 	br	10011174 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011140:	e0bfff17 	ldw	r2,-4(fp)
10011144:	10800217 	ldw	r2,8(r2)
10011148:	e0fffe17 	ldw	r3,-8(fp)
1001114c:	180d883a 	mov	r6,r3
10011150:	e17ffd17 	ldw	r5,-12(fp)
10011154:	1009883a 	mov	r4,r2
10011158:	00114b00 	call	100114b0 <memcmp>
1001115c:	1000021e 	bne	r2,zero,10011168 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011160:	e0bfff17 	ldw	r2,-4(fp)
10011164:	00000706 	br	10011184 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011168:	e0bfff17 	ldw	r2,-4(fp)
1001116c:	10800017 	ldw	r2,0(r2)
10011170:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
10011174:	e0ffff17 	ldw	r3,-4(fp)
10011178:	e0bffc17 	ldw	r2,-16(fp)
1001117c:	18bff01e 	bne	r3,r2,10011140 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
10011180:	0005883a 	mov	r2,zero
}
10011184:	e037883a 	mov	sp,fp
10011188:	dfc00117 	ldw	ra,4(sp)
1001118c:	df000017 	ldw	fp,0(sp)
10011190:	dec00204 	addi	sp,sp,8
10011194:	f800283a 	ret

10011198 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011198:	defffb04 	addi	sp,sp,-20
1001119c:	dfc00415 	stw	ra,16(sp)
100111a0:	df000315 	stw	fp,12(sp)
100111a4:	df000304 	addi	fp,sp,12
100111a8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100111ac:	d0a00517 	ldw	r2,-32748(gp)
100111b0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100111b4:	00003106 	br	1001127c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100111b8:	e0bfff17 	ldw	r2,-4(fp)
100111bc:	10800217 	ldw	r2,8(r2)
100111c0:	1009883a 	mov	r4,r2
100111c4:	0002b280 	call	10002b28 <strlen>
100111c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100111cc:	e0bfff17 	ldw	r2,-4(fp)
100111d0:	10c00217 	ldw	r3,8(r2)
100111d4:	e0bffe17 	ldw	r2,-8(fp)
100111d8:	10bfffc4 	addi	r2,r2,-1
100111dc:	1885883a 	add	r2,r3,r2
100111e0:	10800003 	ldbu	r2,0(r2)
100111e4:	10803fcc 	andi	r2,r2,255
100111e8:	1080201c 	xori	r2,r2,128
100111ec:	10bfe004 	addi	r2,r2,-128
100111f0:	10800bd8 	cmpnei	r2,r2,47
100111f4:	1000031e 	bne	r2,zero,10011204 <alt_find_file+0x6c>
    {
      len -= 1;
100111f8:	e0bffe17 	ldw	r2,-8(fp)
100111fc:	10bfffc4 	addi	r2,r2,-1
10011200:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011204:	e0bffe17 	ldw	r2,-8(fp)
10011208:	e0fffd17 	ldw	r3,-12(fp)
1001120c:	1885883a 	add	r2,r3,r2
10011210:	10800003 	ldbu	r2,0(r2)
10011214:	10803fcc 	andi	r2,r2,255
10011218:	1080201c 	xori	r2,r2,128
1001121c:	10bfe004 	addi	r2,r2,-128
10011220:	10800be0 	cmpeqi	r2,r2,47
10011224:	1000081e 	bne	r2,zero,10011248 <alt_find_file+0xb0>
10011228:	e0bffe17 	ldw	r2,-8(fp)
1001122c:	e0fffd17 	ldw	r3,-12(fp)
10011230:	1885883a 	add	r2,r3,r2
10011234:	10800003 	ldbu	r2,0(r2)
10011238:	10803fcc 	andi	r2,r2,255
1001123c:	1080201c 	xori	r2,r2,128
10011240:	10bfe004 	addi	r2,r2,-128
10011244:	10000a1e 	bne	r2,zero,10011270 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011248:	e0bfff17 	ldw	r2,-4(fp)
1001124c:	10800217 	ldw	r2,8(r2)
10011250:	e0fffe17 	ldw	r3,-8(fp)
10011254:	180d883a 	mov	r6,r3
10011258:	e17ffd17 	ldw	r5,-12(fp)
1001125c:	1009883a 	mov	r4,r2
10011260:	00114b00 	call	100114b0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
10011264:	1000021e 	bne	r2,zero,10011270 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
10011268:	e0bfff17 	ldw	r2,-4(fp)
1001126c:	00000706 	br	1001128c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011270:	e0bfff17 	ldw	r2,-4(fp)
10011274:	10800017 	ldw	r2,0(r2)
10011278:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
1001127c:	e0ffff17 	ldw	r3,-4(fp)
10011280:	d0a00504 	addi	r2,gp,-32748
10011284:	18bfcc1e 	bne	r3,r2,100111b8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
10011288:	0005883a 	mov	r2,zero
}
1001128c:	e037883a 	mov	sp,fp
10011290:	dfc00117 	ldw	ra,4(sp)
10011294:	df000017 	ldw	fp,0(sp)
10011298:	dec00204 	addi	sp,sp,8
1001129c:	f800283a 	ret

100112a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100112a0:	defffc04 	addi	sp,sp,-16
100112a4:	df000315 	stw	fp,12(sp)
100112a8:	df000304 	addi	fp,sp,12
100112ac:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
100112b0:	00bffa04 	movi	r2,-24
100112b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100112b8:	e03fff15 	stw	zero,-4(fp)
100112bc:	00001706 	br	1001131c <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
100112c0:	e0bfff17 	ldw	r2,-4(fp)
100112c4:	10c00324 	muli	r3,r2,12
100112c8:	00840074 	movhi	r2,4097
100112cc:	1885883a 	add	r2,r3,r2
100112d0:	108beb17 	ldw	r2,12204(r2)
100112d4:	10000e1e 	bne	r2,zero,10011310 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
100112d8:	e0bfff17 	ldw	r2,-4(fp)
100112dc:	11000324 	muli	r4,r2,12
100112e0:	e0fffd17 	ldw	r3,-12(fp)
100112e4:	00840074 	movhi	r2,4097
100112e8:	2085883a 	add	r2,r4,r2
100112ec:	10cbeb15 	stw	r3,12204(r2)
      if (i > alt_max_fd)
100112f0:	d0e00917 	ldw	r3,-32732(gp)
100112f4:	e0bfff17 	ldw	r2,-4(fp)
100112f8:	1880020e 	bge	r3,r2,10011304 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
100112fc:	e0bfff17 	ldw	r2,-4(fp)
10011300:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
10011304:	e0bfff17 	ldw	r2,-4(fp)
10011308:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1001130c:	00000706 	br	1001132c <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
10011310:	e0bfff17 	ldw	r2,-4(fp)
10011314:	10800044 	addi	r2,r2,1
10011318:	e0bfff15 	stw	r2,-4(fp)
1001131c:	e0bfff17 	ldw	r2,-4(fp)
10011320:	10800810 	cmplti	r2,r2,32
10011324:	103fe61e 	bne	r2,zero,100112c0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
10011328:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1001132c:	e0bffe17 	ldw	r2,-8(fp)
}
10011330:	e037883a 	mov	sp,fp
10011334:	df000017 	ldw	fp,0(sp)
10011338:	dec00104 	addi	sp,sp,4
1001133c:	f800283a 	ret

10011340 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10011340:	defffb04 	addi	sp,sp,-20
10011344:	df000415 	stw	fp,16(sp)
10011348:	df000404 	addi	fp,sp,16
1001134c:	e13ffd15 	stw	r4,-12(fp)
10011350:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10011354:	e0bffc17 	ldw	r2,-16(fp)
10011358:	10840070 	cmpltui	r2,r2,4097
1001135c:	1000021e 	bne	r2,zero,10011368 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10011360:	00840004 	movi	r2,4096
10011364:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
10011368:	e0fffd17 	ldw	r3,-12(fp)
1001136c:	e0bffc17 	ldw	r2,-16(fp)
10011370:	1885883a 	add	r2,r3,r2
10011374:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011378:	e0bffd17 	ldw	r2,-12(fp)
1001137c:	e0bfff15 	stw	r2,-4(fp)
10011380:	00000506 	br	10011398 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10011384:	e0bfff17 	ldw	r2,-4(fp)
10011388:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1001138c:	e0bfff17 	ldw	r2,-4(fp)
10011390:	10800804 	addi	r2,r2,32
10011394:	e0bfff15 	stw	r2,-4(fp)
10011398:	e0ffff17 	ldw	r3,-4(fp)
1001139c:	e0bffe17 	ldw	r2,-8(fp)
100113a0:	18bff836 	bltu	r3,r2,10011384 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
100113a4:	e0bffd17 	ldw	r2,-12(fp)
100113a8:	108007cc 	andi	r2,r2,31
100113ac:	10000226 	beq	r2,zero,100113b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
100113b0:	e0bfff17 	ldw	r2,-4(fp)
100113b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
100113b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
100113bc:	0001883a 	nop
100113c0:	e037883a 	mov	sp,fp
100113c4:	df000017 	ldw	fp,0(sp)
100113c8:	dec00104 	addi	sp,sp,4
100113cc:	f800283a 	ret

100113d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100113d0:	defffe04 	addi	sp,sp,-8
100113d4:	df000115 	stw	fp,4(sp)
100113d8:	df000104 	addi	fp,sp,4
100113dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100113e0:	e0bfff17 	ldw	r2,-4(fp)
100113e4:	10bffe84 	addi	r2,r2,-6
100113e8:	10c00428 	cmpgeui	r3,r2,16
100113ec:	1800191e 	bne	r3,zero,10011454 <alt_exception_cause_generated_bad_addr+0x84>
100113f0:	100690ba 	slli	r3,r2,2
100113f4:	00840074 	movhi	r2,4097
100113f8:	1885883a 	add	r2,r3,r2
100113fc:	10850117 	ldw	r2,5124(r2)
10011400:	1000683a 	jmp	r2
10011404:	10011444 	addi	zero,r2,1105
10011408:	10011444 	addi	zero,r2,1105
1001140c:	10011454 	ori	zero,r2,1105
10011410:	10011454 	ori	zero,r2,1105
10011414:	10011454 	ori	zero,r2,1105
10011418:	10011444 	addi	zero,r2,1105
1001141c:	1001144c 	andi	zero,r2,1105
10011420:	10011454 	ori	zero,r2,1105
10011424:	10011444 	addi	zero,r2,1105
10011428:	10011444 	addi	zero,r2,1105
1001142c:	10011454 	ori	zero,r2,1105
10011430:	10011444 	addi	zero,r2,1105
10011434:	1001144c 	andi	zero,r2,1105
10011438:	10011454 	ori	zero,r2,1105
1001143c:	10011454 	ori	zero,r2,1105
10011440:	10011444 	addi	zero,r2,1105
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011444:	00800044 	movi	r2,1
10011448:	00000306 	br	10011458 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1001144c:	0005883a 	mov	r2,zero
10011450:	00000106 	br	10011458 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
10011454:	0005883a 	mov	r2,zero
  }
}
10011458:	e037883a 	mov	sp,fp
1001145c:	df000017 	ldw	fp,0(sp)
10011460:	dec00104 	addi	sp,sp,4
10011464:	f800283a 	ret

10011468 <atexit>:
10011468:	200b883a 	mov	r5,r4
1001146c:	000f883a 	mov	r7,zero
10011470:	000d883a 	mov	r6,zero
10011474:	0009883a 	mov	r4,zero
10011478:	001153c1 	jmpi	1001153c <__register_exitproc>

1001147c <exit>:
1001147c:	defffe04 	addi	sp,sp,-8
10011480:	000b883a 	mov	r5,zero
10011484:	dc000015 	stw	r16,0(sp)
10011488:	dfc00115 	stw	ra,4(sp)
1001148c:	2021883a 	mov	r16,r4
10011490:	00115cc0 	call	100115cc <__call_exitprocs>
10011494:	00840074 	movhi	r2,4097
10011498:	11106417 	ldw	r4,16784(r2)
1001149c:	20800f17 	ldw	r2,60(r4)
100114a0:	10000126 	beq	r2,zero,100114a8 <exit+0x2c>
100114a4:	103ee83a 	callr	r2
100114a8:	8009883a 	mov	r4,r16
100114ac:	00116e40 	call	100116e4 <_exit>

100114b0 <memcmp>:
100114b0:	30800130 	cmpltui	r2,r6,4
100114b4:	10000b1e 	bne	r2,zero,100114e4 <memcmp+0x34>
100114b8:	2144b03a 	or	r2,r4,r5
100114bc:	108000cc 	andi	r2,r2,3
100114c0:	10001a1e 	bne	r2,zero,1001152c <memcmp+0x7c>
100114c4:	20c00017 	ldw	r3,0(r4)
100114c8:	28800017 	ldw	r2,0(r5)
100114cc:	1880171e 	bne	r3,r2,1001152c <memcmp+0x7c>
100114d0:	31bfff04 	addi	r6,r6,-4
100114d4:	30800128 	cmpgeui	r2,r6,4
100114d8:	21000104 	addi	r4,r4,4
100114dc:	29400104 	addi	r5,r5,4
100114e0:	103ff81e 	bne	r2,zero,100114c4 <memcmp+0x14>
100114e4:	30ffffc4 	addi	r3,r6,-1
100114e8:	30000e26 	beq	r6,zero,10011524 <memcmp+0x74>
100114ec:	29800003 	ldbu	r6,0(r5)
100114f0:	20800003 	ldbu	r2,0(r4)
100114f4:	30800f1e 	bne	r6,r2,10011534 <memcmp+0x84>
100114f8:	18800044 	addi	r2,r3,1
100114fc:	20c00044 	addi	r3,r4,1
10011500:	2089883a 	add	r4,r4,r2
10011504:	00000506 	br	1001151c <memcmp+0x6c>
10011508:	18800003 	ldbu	r2,0(r3)
1001150c:	29800003 	ldbu	r6,0(r5)
10011510:	18c00044 	addi	r3,r3,1
10011514:	10803fcc 	andi	r2,r2,255
10011518:	1180061e 	bne	r2,r6,10011534 <memcmp+0x84>
1001151c:	29400044 	addi	r5,r5,1
10011520:	193ff91e 	bne	r3,r4,10011508 <memcmp+0x58>
10011524:	0005883a 	mov	r2,zero
10011528:	f800283a 	ret
1001152c:	30ffffc4 	addi	r3,r6,-1
10011530:	003fee06 	br	100114ec <memcmp+0x3c>
10011534:	1185c83a 	sub	r2,r2,r6
10011538:	f800283a 	ret

1001153c <__register_exitproc>:
1001153c:	00840074 	movhi	r2,4097
10011540:	10d06417 	ldw	r3,16784(r2)
10011544:	18805217 	ldw	r2,328(r3)
10011548:	10001726 	beq	r2,zero,100115a8 <__register_exitproc+0x6c>
1001154c:	10c00117 	ldw	r3,4(r2)
10011550:	1a000808 	cmpgei	r8,r3,32
10011554:	40001b1e 	bne	r8,zero,100115c4 <__register_exitproc+0x88>
10011558:	20000b26 	beq	r4,zero,10011588 <__register_exitproc+0x4c>
1001155c:	181090ba 	slli	r8,r3,2
10011560:	02400044 	movi	r9,1
10011564:	48d2983a 	sll	r9,r9,r3
10011568:	1211883a 	add	r8,r2,r8
1001156c:	41802215 	stw	r6,136(r8)
10011570:	11806217 	ldw	r6,392(r2)
10011574:	21000098 	cmpnei	r4,r4,2
10011578:	324cb03a 	or	r6,r6,r9
1001157c:	11806215 	stw	r6,392(r2)
10011580:	41c04215 	stw	r7,264(r8)
10011584:	20000b26 	beq	r4,zero,100115b4 <__register_exitproc+0x78>
10011588:	19000084 	addi	r4,r3,2
1001158c:	200890ba 	slli	r4,r4,2
10011590:	18c00044 	addi	r3,r3,1
10011594:	10c00115 	stw	r3,4(r2)
10011598:	1105883a 	add	r2,r2,r4
1001159c:	11400015 	stw	r5,0(r2)
100115a0:	0005883a 	mov	r2,zero
100115a4:	f800283a 	ret
100115a8:	18805304 	addi	r2,r3,332
100115ac:	18805215 	stw	r2,328(r3)
100115b0:	003fe606 	br	1001154c <__register_exitproc+0x10>
100115b4:	11006317 	ldw	r4,396(r2)
100115b8:	2252b03a 	or	r9,r4,r9
100115bc:	12406315 	stw	r9,396(r2)
100115c0:	003ff106 	br	10011588 <__register_exitproc+0x4c>
100115c4:	00bfffc4 	movi	r2,-1
100115c8:	f800283a 	ret

100115cc <__call_exitprocs>:
100115cc:	defff704 	addi	sp,sp,-36
100115d0:	00840074 	movhi	r2,4097
100115d4:	ddc00715 	stw	r23,28(sp)
100115d8:	15d06417 	ldw	r23,16784(r2)
100115dc:	dd400515 	stw	r21,20(sp)
100115e0:	dd000415 	stw	r20,16(sp)
100115e4:	dcc00315 	stw	r19,12(sp)
100115e8:	dfc00815 	stw	ra,32(sp)
100115ec:	dd800615 	stw	r22,24(sp)
100115f0:	dc800215 	stw	r18,8(sp)
100115f4:	dc400115 	stw	r17,4(sp)
100115f8:	dc000015 	stw	r16,0(sp)
100115fc:	2029883a 	mov	r20,r4
10011600:	282b883a 	mov	r21,r5
10011604:	04c00044 	movi	r19,1
10011608:	bc805217 	ldw	r18,328(r23)
1001160c:	90000d26 	beq	r18,zero,10011644 <__call_exitprocs+0x78>
10011610:	94000117 	ldw	r16,4(r18)
10011614:	847fffc4 	addi	r17,r16,-1
10011618:	88000a16 	blt	r17,zero,10011644 <__call_exitprocs+0x78>
1001161c:	84000044 	addi	r16,r16,1
10011620:	802090ba 	slli	r16,r16,2
10011624:	9421883a 	add	r16,r18,r16
10011628:	a8001126 	beq	r21,zero,10011670 <__call_exitprocs+0xa4>
1001162c:	80804017 	ldw	r2,256(r16)
10011630:	15400f26 	beq	r2,r21,10011670 <__call_exitprocs+0xa4>
10011634:	8c7fffc4 	addi	r17,r17,-1
10011638:	88bfffd8 	cmpnei	r2,r17,-1
1001163c:	843fff04 	addi	r16,r16,-4
10011640:	103ff91e 	bne	r2,zero,10011628 <__call_exitprocs+0x5c>
10011644:	dfc00817 	ldw	ra,32(sp)
10011648:	ddc00717 	ldw	r23,28(sp)
1001164c:	dd800617 	ldw	r22,24(sp)
10011650:	dd400517 	ldw	r21,20(sp)
10011654:	dd000417 	ldw	r20,16(sp)
10011658:	dcc00317 	ldw	r19,12(sp)
1001165c:	dc800217 	ldw	r18,8(sp)
10011660:	dc400117 	ldw	r17,4(sp)
10011664:	dc000017 	ldw	r16,0(sp)
10011668:	dec00904 	addi	sp,sp,36
1001166c:	f800283a 	ret
10011670:	90800117 	ldw	r2,4(r18)
10011674:	81800017 	ldw	r6,0(r16)
10011678:	10bfffc4 	addi	r2,r2,-1
1001167c:	14401526 	beq	r2,r17,100116d4 <__call_exitprocs+0x108>
10011680:	80000015 	stw	zero,0(r16)
10011684:	303feb26 	beq	r6,zero,10011634 <__call_exitprocs+0x68>
10011688:	9c46983a 	sll	r3,r19,r17
1001168c:	90806217 	ldw	r2,392(r18)
10011690:	95800117 	ldw	r22,4(r18)
10011694:	1884703a 	and	r2,r3,r2
10011698:	1000061e 	bne	r2,zero,100116b4 <__call_exitprocs+0xe8>
1001169c:	303ee83a 	callr	r6
100116a0:	90800117 	ldw	r2,4(r18)
100116a4:	15bfd81e 	bne	r2,r22,10011608 <__call_exitprocs+0x3c>
100116a8:	b8805217 	ldw	r2,328(r23)
100116ac:	14bfe126 	beq	r2,r18,10011634 <__call_exitprocs+0x68>
100116b0:	003fd506 	br	10011608 <__call_exitprocs+0x3c>
100116b4:	90806317 	ldw	r2,396(r18)
100116b8:	81002017 	ldw	r4,128(r16)
100116bc:	1886703a 	and	r3,r3,r2
100116c0:	1800061e 	bne	r3,zero,100116dc <__call_exitprocs+0x110>
100116c4:	200b883a 	mov	r5,r4
100116c8:	a009883a 	mov	r4,r20
100116cc:	303ee83a 	callr	r6
100116d0:	003ff306 	br	100116a0 <__call_exitprocs+0xd4>
100116d4:	94400115 	stw	r17,4(r18)
100116d8:	003fea06 	br	10011684 <__call_exitprocs+0xb8>
100116dc:	303ee83a 	callr	r6
100116e0:	003fef06 	br	100116a0 <__call_exitprocs+0xd4>

100116e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100116e4:	defffd04 	addi	sp,sp,-12
100116e8:	df000215 	stw	fp,8(sp)
100116ec:	df000204 	addi	fp,sp,8
100116f0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100116f4:	0001883a 	nop
100116f8:	e0bffe17 	ldw	r2,-8(fp)
100116fc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011700:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011704:	10000226 	beq	r2,zero,10011710 <_exit+0x2c>
    ALT_SIM_FAIL();
10011708:	002af070 	cmpltui	zero,zero,43969
1001170c:	00000106 	br	10011714 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011710:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011714:	003fff06 	br	10011714 <_exit+0x30>
