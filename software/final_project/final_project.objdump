
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000238

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012d7c memsz 0x00012d7c flags r-x
    LOAD off    0x00013d9c vaddr 0x10012d9c paddr 0x10014fb8 align 2**12
         filesz 0x0000221c memsz 0x0000221c flags rw-
    LOAD off    0x000161d4 vaddr 0x100171d4 paddr 0x100171d4 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011c44  10000238  10000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f20  10011e7c  10011e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000221c  10012d9c  10014fb8  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  100171d4  100171d4  000161d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015fb8  2**0
                  CONTENTS
  7 .sdram        00000000  10017330  10017330  00015fb8  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe8  00000000  00000000  00015fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004ae5a  00000000  00000000  00016fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f2e1  00000000  00000000  00061e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018a70  00000000  00000000  0007110b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002580  00000000  00000000  00089b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000412b  00000000  00000000  0008c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c27c  00000000  00000000  00090227  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000ac4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c58  00000000  00000000  000ac508  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b1784  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b1787  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b1793  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b1794  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b1795  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b1799  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b179d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b17a1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b17ac  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b17b7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000b17c2  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  000b17d3  2**0
                  CONTENTS, READONLY
 30 .jdi          00005b00  00000000  00000000  000b17e8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000238 l    d  .text	00000000 .text
10011e7c l    d  .rodata	00000000 .rodata
10012d9c l    d  .rwdata	00000000 .rwdata
100171d4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10017330 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Lab7/final_project/software/final_project_bsp/obj/HAL/src/crt0.o
10000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 aesop.c
10014f7c l     O .rwdata	00000001 CNST_AES_NB
10014f7d l     O .rwdata	00000001 CNST_AES_NR
10014f7e l     O .rwdata	00000001 CNST_AES_NK
00000000 l    df *ABS*	00000000 core.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100171d4 l     O .bss	00000002 ctl_reg.3792
100171d6 l     O .bss	00000002 no_device.3793
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000549c l     F .text	000000c0 __sbprintf
1001286e l     O .rodata	00000010 blanks.5226
1001285e l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100056bc l     F .text	00000210 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007244 l     F .text	00000008 __fp_lock
10007258 l     F .text	00000168 __sinit.part.0
100073c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100133dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012890 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a3a8 l     F .text	000000f4 __sprint_r.part.0
1000b7f8 l     F .text	000000c0 __sbprintf
100129c4 l     O .rodata	00000010 blanks.5203
100129b4 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f6a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f7ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f7d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f8c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f9a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fa90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fc64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014fa8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fed4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010008 l     F .text	00000034 alt_dev_reg
10013f1c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100102f8 l     F .text	00000204 altera_avalon_jtag_uart_irq
100104fc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
10010b38 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011330 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1001145c l     F .text	0000003c alt_get_errno
10011498 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017204 g     O .bss	00000004 alt_instruction_exception_handler
10009a90 g     F .text	00000074 _mprec_log10
10009b70 g     F .text	00000074 __any_on
1000bd84 g     F .text	00000058 _isatty_r
1001289c g     O .rodata	00000028 __mprec_tinytens
1000fba0 g     F .text	0000007c alt_main
100031b0 g     F .text	000000cc _puts_r
10017230 g     O .bss	00000100 alt_irq
1000be6c g     F .text	00000064 _lseek_r
10014fb8 g       *ABS*	00000000 __flash_rwdata_start
10000f28 g     F .text	00000048 game_tick
1000e1bc g     F .text	00000080 .hidden __eqdf2
10017330 g       *ABS*	00000000 __alt_heap_start
10003178 g     F .text	00000038 printf
1000c1b8 g     F .text	0000006c _wcrtomb_r
1000a344 g     F .text	0000005c __sseek
10007540 g     F .text	00000010 __sinit
1000c05c g     F .text	00000148 __swbuf_r
1000bddc g     F .text	00000070 _setlocale_r
100073c8 g     F .text	00000068 __sfmoreglue
1000fc40 g     F .text	00000024 __malloc_unlock
10002ee8 g     F .text	00000080 UsbGetRetryCnt
10008a8c g     F .text	0000012c memmove
10000f70 g     F .text	00000088 IO_init
1000752c g     F .text	00000014 _cleanup
10008ca8 g     F .text	000000a4 _Balloc
1000e23c g     F .text	000000f0 .hidden __gtdf2
10011848 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000001c __reset
10007fbc g     F .text	00000008 __localeconv_l
10000020 g       *ABS*	00000000 __flash_exceptions_start
10011e7c g     O .rodata	00000100 aes_sbox
1000bd24 g     F .text	00000060 _fstat_r
100171e4 g     O .bss	00000004 errno
10000e80 g     F .text	000000a8 transpose
1000a2bc g     F .text	00000008 __seofread
100171f0 g     O .bss	00000004 alt_argv
10012d9c g     O .rwdata	00000600 gf_mul
1001cf7c g       *ABS*	00000000 _gp
1000fea4 g     F .text	00000030 usleep
10013d9c g     O .rwdata	00000180 alt_fd_list
1001186c g     F .text	00000090 alt_find_dev
10003048 g     F .text	00000100 memcpy
1000724c g     F .text	0000000c _cleanup_r
1000f4e8 g     F .text	000000c8 .hidden __floatsidf
100113e0 g     F .text	0000007c alt_io_redirect
1000e32c g     F .text	000000f0 .hidden __ltdf2
10011e7c g       *ABS*	00000000 __DTOR_END__
1000327c g     F .text	00000010 puts
10011b34 g     F .text	00000098 alt_exception_cause_generated_bad_addr
100099e8 g     F .text	000000a8 __ratio
1000b7e0 g     F .text	00000018 __vfiprintf_internal
100106f8 g     F .text	0000021c altera_avalon_jtag_uart_read
10003148 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000ceb4 g     F .text	00000064 .hidden __udivsi3
1000f900 g     F .text	000000a4 isatty
100128ec g     O .rodata	000000c8 __mprec_tens
10011aa4 g     F .text	00000090 alt_icache_flush
100171e0 g     O .bss	00000004 __malloc_top_pad
10002574 g     F .text	00000268 UsbGetConfigDesc2
10007fc4 g     F .text	0000000c _localeconv_r
100090a8 g     F .text	00000034 __i2b
100079a0 g     F .text	000004c4 __sfvwrite_r
1000a210 g     F .text	00000058 _sbrk_r
1000bf20 g     F .text	00000064 _read_r
10014fa0 g     O .rwdata	00000004 alt_max_fd
1000ba2c g     F .text	000000f8 _fclose_r
1000721c g     F .text	00000028 fflush
100171dc g     O .bss	00000004 __malloc_max_sbrked_mem
1000cf74 g     F .text	000009a0 .hidden __adddf3
1000979c g     F .text	00000104 __b2d
1000c87c g     F .text	00000540 .hidden __umoddi3
1000facc g     F .text	000000d4 lseek
10014f80 g     O .rwdata	00000004 _global_impure_ptr
10009be4 g     F .text	0000062c _realloc_r
10017330 g       *ABS*	00000000 __bss_end
1001124c g     F .text	000000e4 alt_iic_isr_register
10011740 g     F .text	00000108 alt_tick
1000c2e4 g     F .text	00000598 .hidden __udivdi3
1000bc84 g     F .text	00000024 _fputwc_r
100128c4 g     O .rodata	00000028 __mprec_bigtens
10008e84 g     F .text	00000110 __s2b
1000f5b0 g     F .text	0000009c .hidden __floatunsidf
1000952c g     F .text	00000058 __mcmp
10001fc4 g     F .text	00000100 UsbSetAddress
10007560 g     F .text	00000014 __fp_lock_all
10011200 g     F .text	0000004c alt_ic_irq_enabled
10000dc0 g     F .text	000000c0 add_round_key
100116a4 g     F .text	0000009c alt_alarm_stop
100171f8 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000c8 alt_irq_handler
10013d74 g     O .rwdata	00000028 alt_dev_null
10010e80 g     F .text	00000048 alt_dcache_flush_all
10008f94 g     F .text	00000064 __hi0bits
1000106c g     F .text	00000068 IO_read
1000f468 g     F .text	00000080 .hidden __fixdfsi
10014fb8 g       *ABS*	00000000 __ram_rwdata_end
10014f98 g     O .rwdata	00000008 alt_dev_list
1000ff10 g     F .text	000000f8 write
10012d9c g       *ABS*	00000000 __ram_rodata_end
1000f814 g     F .text	000000b0 fstat
1000e32c g     F .text	000000f0 .hidden __ledf2
10002f68 g     F .text	00000080 UsbPrintMem
100092c8 g     F .text	00000128 __pow5mult
1000a4b4 g     F .text	0000132c ___vfiprintf_internal_r
1000cf18 g     F .text	0000005c .hidden __umodsi3
10017330 g       *ABS*	00000000 end
10010238 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
10011e7c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10010bb0 g     F .text	0000007c alt_avalon_timer_sc_init
1000f64c g     F .text	00000054 .hidden __clzsi2
10010914 g     F .text	00000224 altera_avalon_jtag_uart_write
10007550 g     F .text	00000004 __sfp_lock_acquire
100089a4 g     F .text	000000e8 memchr
10003324 g     F .text	00002160 ___vfprintf_internal_r
100028dc g     F .text	00000100 UsbClassRequest
100076a4 g     F .text	000002fc _free_r
10012ae5 g     O .rodata	00000180 _ctype_b
1000be4c g     F .text	0000000c __locale_mb_cur_max
1000096c g     F .text	000000ac sub_word32
10011d30 g     F .text	00000118 __call_exitprocs
10000658 g     F .text	000001f0 key_expansion
10014f88 g     O .rwdata	00000004 __malloc_sbrk_base
10000238 g     F .text	0000004c _start
100171fc g     O .bss	00000004 _alt_tick_rate
10000848 g     F .text	000000d8 shift_rows
100093f0 g     F .text	0000013c __lshift
10017200 g     O .bss	00000004 _alt_nticks
1000fca0 g     F .text	000000fc read
10010074 g     F .text	00000060 alt_sys_init
10011ca0 g     F .text	00000090 __register_exitproc
100090dc g     F .text	000001ec __multiply
1001059c g     F .text	00000068 altera_avalon_jtag_uart_close
10012d9c g       *ABS*	00000000 __ram_rwdata_start
10011e7c g       *ABS*	00000000 __ram_rodata_start
10017208 g     O .bss	00000028 __malloc_current_mallinfo
100098a0 g     F .text	00000148 __d2b
100020c4 g     F .text	00000148 UsbGetDeviceDesc1
100100d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011f7c g     O .rodata	00000100 aes_invsbox
10011a04 g     F .text	000000a0 alt_get_fd
10010d58 g     F .text	00000128 alt_busy_sleep
1000b91c g     F .text	00000058 _close_r
10011c14 g     F .text	0000008c memcmp
10010194 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10017330 g       *ABS*	00000000 __alt_stack_base
100101e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000555c g     F .text	00000160 __swsetup_r
1000d914 g     F .text	000008a8 .hidden __divdf3
10007430 g     F .text	000000fc __sfp
10009b04 g     F .text	0000006c __copybits
10013800 g     O .rwdata	00000408 __malloc_av_
1000755c g     F .text	00000004 __sinit_lock_release
1000e41c g     F .text	0000068c .hidden __muldf3
1000a268 g     F .text	00000054 __sread
10000adc g     F .text	00000028 rot_word
10002e64 g     F .text	00000084 UsbWaitTDListDone
100118fc g     F .text	00000108 alt_find_file
10000b04 g     F .text	000002bc mix_columns
10010f04 g     F .text	000000a4 alt_dev_llist_insert
1000fc1c g     F .text	00000024 __malloc_lock
1000fdf4 g     F .text	000000b0 sbrk
100071bc g     F .text	00000060 _fflush_r
1000b974 g     F .text	000000b8 _calloc_r
100171d4 g       *ABS*	00000000 __bss_start
10008bb8 g     F .text	000000f0 memset
100010d4 g     F .text	00000d9c main
100171f4 g     O .bss	00000004 alt_envp
100171d8 g     O .bss	00000004 __malloc_max_total_mem
10010134 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100027dc g     F .text	00000100 UsbSetConfig
1000c1a4 g     F .text	00000014 __swbuf
1000a3a0 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000bb24 g     F .text	00000010 fclose
10000a18 g     F .text	000000c4 sub_word
100058cc g     F .text	000016c8 _dtoa_r
100081b0 g     F .text	000007f4 _malloc_r
1000c2b4 g     F .text	00000030 __ascii_wctomb
10014fa4 g     O .rwdata	00000004 alt_errno
10007e64 g     F .text	000000a4 _fwalk
1000bed0 g     F .text	0000000c _mbtowc_r
1000cdbc g     F .text	00000080 .hidden __divsi3
10007588 g     F .text	0000011c _malloc_trim_r
100029dc g     F .text	00000148 UsbGetHidDesc
10011e7c g       *ABS*	00000000 __CTOR_END__
1000bf84 g     F .text	000000d8 strcmp
10011e7c g       *ABS*	00000000 __flash_rodata_start
10011e7c g       *ABS*	00000000 __DTOR_LIST__
1000e1bc g     F .text	00000080 .hidden __nedf2
10001ecc g     F .text	00000044 UsbRead
1001003c g     F .text	00000038 alt_irq_init
1000fd9c g     F .text	00000058 alt_release_fd
10012c65 g     O .rodata	00000100 .hidden __clz_tab
100171e8 g     O .bss	00000004 _PathLocale
10011bcc g     F .text	00000014 atexit
1000b8b8 g     F .text	00000064 _write_r
1000be58 g     F .text	00000014 setlocale
10014f84 g     O .rwdata	00000004 _impure_ptr
100171ec g     O .bss	00000004 alt_argc
10006f94 g     F .text	00000228 __sflush_r
10011008 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000bedc g     F .text	00000044 __ascii_mbtowc
10009740 g     F .text	0000005c __ulp
10007574 g     F .text	00000014 __fp_unlock_all
10014f90 g     O .rwdata	00000008 alt_fs_list
1001339c g     O .rwdata	00000040 Rcon
10002b24 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007fd0 g     F .text	0000000c localeconv
10007fdc g     F .text	00000098 __swhatbuf_r
1001109c g     F .text	00000050 alt_ic_isr_register
10014fb8 g       *ABS*	00000000 _edata
10017330 g       *ABS*	00000000 _end
10001e70 g     F .text	0000005c UsbWrite
1000bb34 g     F .text	00000150 __fputwc
10000238 g       *ABS*	00000000 __ram_exceptions_end
10010604 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
10011174 g     F .text	0000008c alt_ic_irq_disable
1000a2c4 g     F .text	00000080 __swrite
10014f8c g     O .rwdata	00000004 __malloc_trim_threshold
10011be0 g     F .text	00000034 exit
10007f08 g     F .text	000000b4 _fwalk_reent
10009584 g     F .text	000001bc __mdiff
1000ce3c g     F .text	00000078 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007554 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000ff8 g     F .text	00000074 IO_write
100129e4 g     O .rodata	00000101 _ctype_
1000f414 g     F .text	00000054 .hidden __unorddf2
10011e48 g     F .text	00000034 _exit
10010c2c g     F .text	0000012c alt_alarm_start
10002fe8 g     F .text	00000060 .hidden __muldi3
10008074 g     F .text	0000013c __smakebuf_r
1000328c g     F .text	00000098 strlen
10011550 g     F .text	00000154 open
1000e23c g     F .text	000000f0 .hidden __gedf2
1000a49c g     F .text	00000018 __sprint_r
10011068 g     F .text	00000034 alt_icache_flush_all
10014fac g     O .rwdata	00000004 alt_priority_mask
100110ec g     F .text	00000088 alt_ic_irq_enable
10005484 g     F .text	00000018 __vfprintf_internal
1000c2a8 g     F .text	0000000c _wctomb_r
1000eaa8 g     F .text	0000096c .hidden __subdf3
10008ff8 g     F .text	000000b0 __lo0bits
100023e4 g     F .text	00000190 UsbGetConfigDesc1
10014fb0 g     O .rwdata	00000008 alt_alarm_list
10010fa8 g     F .text	00000060 _do_ctors
10001f10 g     F .text	000000b4 UsbSoftReset
1000c224 g     F .text	00000084 wcrtomb
1000f6dc g     F .text	000000d0 close
1000220c g     F .text	000001d8 UsbGetDeviceDesc2
10013c08 g     O .rwdata	0000016c __global_locale
1000fa0c g     F .text	00000084 alt_load
10000920 g     F .text	0000004c sub_byte
1000bca8 g     F .text	0000007c fputwc
10007558 g     F .text	00000004 __sinit_lock_acquire
10008d70 g     F .text	00000114 __multadd
10008d4c g     F .text	00000024 _Bfree
10000284 g     F .text	000003d4 aes_encrypt



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08408e14 	ori	at,at,568
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001c40 	call	100001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
10000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0ffff17 	ldw	r3,-4(fp)
10000130:	e0bffe17 	ldw	r2,-8(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001126 	beq	r2,zero,10000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	e0bffd17 	ldw	r2,-12(fp)
10000140:	100690fa 	slli	r3,r2,3
10000144:	00840074 	movhi	r2,4097
10000148:	1885883a 	add	r2,r3,r2
1000014c:	10dc8c17 	ldw	r3,29232(r2)
10000150:	e0bffd17 	ldw	r2,-12(fp)
10000154:	100890fa 	slli	r4,r2,3
10000158:	00840074 	movhi	r2,4097
1000015c:	2085883a 	add	r2,r4,r2
10000160:	109c8d17 	ldw	r2,29236(r2)
10000164:	1009883a 	mov	r4,r2
10000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
1000016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
10000170:	0005313a 	rdctl	r2,ipending
10000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
10000178:	e0bffb17 	ldw	r2,-20(fp)
1000017c:	00000706 	br	1000019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
10000180:	e0bffe17 	ldw	r2,-8(fp)
10000184:	1085883a 	add	r2,r2,r2
10000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
1000018c:	e0bffd17 	ldw	r2,-12(fp)
10000190:	10800044 	addi	r2,r2,1
10000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
10000198:	003fe406 	br	1000012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
1000019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
100001a0:	e0bfff17 	ldw	r2,-4(fp)
100001a4:	103fde1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a8:	0001883a 	nop
}
100001ac:	0001883a 	nop
100001b0:	e037883a 	mov	sp,fp
100001b4:	dfc00117 	ldw	ra,4(sp)
100001b8:	df000017 	ldw	fp,0(sp)
100001bc:	dec00204 	addi	sp,sp,8
100001c0:	f800283a 	ret

100001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001c4:	defffb04 	addi	sp,sp,-20
100001c8:	dfc00415 	stw	ra,16(sp)
100001cc:	df000315 	stw	fp,12(sp)
100001d0:	df000304 	addi	fp,sp,12
100001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001d8:	000531fa 	rdctl	r2,exception
100001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001e0:	e0bfff17 	ldw	r2,-4(fp)
100001e4:	1004d0ba 	srli	r2,r2,2
100001e8:	108007cc 	andi	r2,r2,31
100001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001f0:	0005333a 	rdctl	r2,badaddr
100001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f8:	d0a8a217 	ldw	r2,-23928(gp)
100001fc:	10000726 	beq	r2,zero,1000021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10000200:	d0a8a217 	ldw	r2,-23928(gp)
10000204:	e0ffff17 	ldw	r3,-4(fp)
10000208:	e1bffe17 	ldw	r6,-8(fp)
1000020c:	e17ffd17 	ldw	r5,-12(fp)
10000210:	1809883a 	mov	r4,r3
10000214:	103ee83a 	callr	r2
10000218:	00000206 	br	10000224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
1000021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000220:	0005883a 	mov	r2,zero
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

Disassembly of section .text:

10000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
1000023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000244:	00bffd16 	blt	zero,r2,1000023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000248:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
1000024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000250:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000254:	d6b3df14 	ori	gp,gp,53116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000258:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
1000025c:	109c7514 	ori	r2,r2,29140

    movhi r3, %hi(__bss_end)
10000260:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000264:	18dccc14 	ori	r3,r3,29488

    beq r2, r3, 1f
10000268:	10c00326 	beq	r2,r3,10000278 <_start+0x40>

0:
    stw zero, (r2)
1000026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000274:	10fffd36 	bltu	r2,r3,1000026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000278:	000fa0c0 	call	1000fa0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
1000027c:	000fba00 	call	1000fba0 <alt_main>

10000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000280:	003fff06 	br	10000280 <alt_after_alt_main>

10000284 <aes_encrypt>:
[0 1]  [1 1] ...
[0 2]  ...
[0 3] ...
*/

void aes_encrypt(uint8_t* data_in, uint32_t* data_out, uint32_t* keyarr) {
10000284:	deffd404 	addi	sp,sp,-176
10000288:	dfc02b15 	stw	ra,172(sp)
1000028c:	df002a15 	stw	fp,168(sp)
10000290:	ddc02915 	stw	r23,164(sp)
10000294:	dd802815 	stw	r22,160(sp)
10000298:	dd402715 	stw	r21,156(sp)
1000029c:	dd002615 	stw	r20,152(sp)
100002a0:	dcc02515 	stw	r19,148(sp)
100002a4:	dc802415 	stw	r18,144(sp)
100002a8:	dc402315 	stw	r17,140(sp)
100002ac:	dc002215 	stw	r16,136(sp)
100002b0:	df002a04 	addi	fp,sp,168
100002b4:	e13fdb15 	stw	r4,-148(fp)
100002b8:	e17fda15 	stw	r5,-152(fp)
100002bc:	e1bfd915 	stw	r6,-156(fp)
100002c0:	d809883a 	mov	r4,sp
100002c4:	202f883a 	mov	r23,r4
	aes_state state; // = malloc(sizeof(uint32_t) * 4); //Flattened.
	aes_state state_in; // = malloc(sizeof(uint32_t) * 4); //Temporary.
	// Generate round keys.
	
	uint32_t key_out[(CNST_AES_NR+1)][CNST_AES_NB];
100002c8:	01000104 	movi	r4,4
100002cc:	21003fcc 	andi	r4,r4,255
100002d0:	213fffc4 	addi	r4,r4,-1
100002d4:	e13ff615 	stw	r4,-40(fp)
100002d8:	01000104 	movi	r4,4
100002dc:	21003fcc 	andi	r4,r4,255
100002e0:	200f883a 	mov	r7,r4
100002e4:	0011883a 	mov	r8,zero
100002e8:	3808d6fa 	srli	r4,r7,27
100002ec:	4006917a 	slli	r3,r8,5
100002f0:	20c6b03a 	or	r3,r4,r3
100002f4:	3804917a 	slli	r2,r7,5
100002f8:	00800104 	movi	r2,4
100002fc:	10803fcc 	andi	r2,r2,255
10000300:	102890ba 	slli	r20,r2,2
10000304:	00800284 	movi	r2,10
10000308:	10803fcc 	andi	r2,r2,255
1000030c:	e0bff515 	stw	r2,-44(fp)
10000310:	00800104 	movi	r2,4
10000314:	10803fcc 	andi	r2,r2,255
10000318:	1013883a 	mov	r9,r2
1000031c:	0015883a 	mov	r10,zero
10000320:	00800284 	movi	r2,10
10000324:	10803fcc 	andi	r2,r2,255
10000328:	10800044 	addi	r2,r2,1
1000032c:	1017883a 	mov	r11,r2
10000330:	0019883a 	mov	r12,zero
10000334:	580d883a 	mov	r6,r11
10000338:	600f883a 	mov	r7,r12
1000033c:	4809883a 	mov	r4,r9
10000340:	500b883a 	mov	r5,r10
10000344:	0002fe80 	call	10002fe8 <__muldi3>
10000348:	1009883a 	mov	r4,r2
1000034c:	180b883a 	mov	r5,r3
10000350:	2005883a 	mov	r2,r4
10000354:	2807883a 	mov	r3,r5
10000358:	1008d6fa 	srli	r4,r2,27
1000035c:	1826917a 	slli	r19,r3,5
10000360:	24e6b03a 	or	r19,r4,r19
10000364:	1024917a 	slli	r18,r2,5
10000368:	00800104 	movi	r2,4
1000036c:	10803fcc 	andi	r2,r2,255
10000370:	102b883a 	mov	r21,r2
10000374:	002d883a 	mov	r22,zero
10000378:	00800284 	movi	r2,10
1000037c:	10803fcc 	andi	r2,r2,255
10000380:	10800044 	addi	r2,r2,1
10000384:	e0bfd715 	stw	r2,-164(fp)
10000388:	e03fd815 	stw	zero,-160(fp)
1000038c:	e1bfd717 	ldw	r6,-164(fp)
10000390:	e1ffd817 	ldw	r7,-160(fp)
10000394:	a809883a 	mov	r4,r21
10000398:	b00b883a 	mov	r5,r22
1000039c:	0002fe80 	call	10002fe8 <__muldi3>
100003a0:	1009883a 	mov	r4,r2
100003a4:	180b883a 	mov	r5,r3
100003a8:	2005883a 	mov	r2,r4
100003ac:	2807883a 	mov	r3,r5
100003b0:	1008d6fa 	srli	r4,r2,27
100003b4:	1822917a 	slli	r17,r3,5
100003b8:	2462b03a 	or	r17,r4,r17
100003bc:	1020917a 	slli	r16,r2,5
100003c0:	00800284 	movi	r2,10
100003c4:	10803fcc 	andi	r2,r2,255
100003c8:	10c00044 	addi	r3,r2,1
100003cc:	00800104 	movi	r2,4
100003d0:	10803fcc 	andi	r2,r2,255
100003d4:	1885383a 	mul	r2,r3,r2
100003d8:	100490ba 	slli	r2,r2,2
100003dc:	108000c4 	addi	r2,r2,3
100003e0:	1004d0ba 	srli	r2,r2,2
100003e4:	100490ba 	slli	r2,r2,2
100003e8:	d8b7c83a 	sub	sp,sp,r2
100003ec:	d8800104 	addi	r2,sp,4
100003f0:	108000c4 	addi	r2,r2,3
100003f4:	1004d0ba 	srli	r2,r2,2
100003f8:	100490ba 	slli	r2,r2,2
100003fc:	e0bff415 	stw	r2,-48(fp)
	key_expansion(&keyarr[0], &key_out[0][0], CNST_AES_NK, CNST_AES_NB, CNST_AES_NR);
10000400:	e0fff417 	ldw	r3,-48(fp)
10000404:	00800104 	movi	r2,4
10000408:	11003fcc 	andi	r4,r2,255
1000040c:	00800104 	movi	r2,4
10000410:	11403fcc 	andi	r5,r2,255
10000414:	00800284 	movi	r2,10
10000418:	10803fcc 	andi	r2,r2,255
1000041c:	d8800015 	stw	r2,0(sp)
10000420:	280f883a 	mov	r7,r5
10000424:	200d883a 	mov	r6,r4
10000428:	180b883a 	mov	r5,r3
1000042c:	e13fd917 	ldw	r4,-156(fp)
10000430:	00006580 	call	10000658 <key_expansion>

	memcpy(state.state8, data_in, sizeof(state));
10000434:	e0ffdb17 	ldw	r3,-148(fp)
10000438:	e0bff004 	addi	r2,fp,-64
1000043c:	1809883a 	mov	r4,r3
10000440:	00c00404 	movi	r3,16
10000444:	180d883a 	mov	r6,r3
10000448:	200b883a 	mov	r5,r4
1000044c:	1009883a 	mov	r4,r2
10000450:	00030480 	call	10003048 <memcpy>
	
	add_round_key(state.state32, key_out[0], state_in.state32);
10000454:	e0fff417 	ldw	r3,-48(fp)
10000458:	e13fec04 	addi	r4,fp,-80
1000045c:	e0bff004 	addi	r2,fp,-64
10000460:	200d883a 	mov	r6,r4
10000464:	180b883a 	mov	r5,r3
10000468:	1009883a 	mov	r4,r2
1000046c:	0000dc00 	call	10000dc0 <add_round_key>
	memcpy(&state, &state_in, sizeof(state_in));
10000470:	e0bfec17 	ldw	r2,-80(fp)
10000474:	e0bff015 	stw	r2,-64(fp)
10000478:	e0bfed17 	ldw	r2,-76(fp)
1000047c:	e0bff115 	stw	r2,-60(fp)
10000480:	e0bfee17 	ldw	r2,-72(fp)
10000484:	e0bff215 	stw	r2,-56(fp)
10000488:	e0bfef17 	ldw	r2,-68(fp)
1000048c:	e0bff315 	stw	r2,-52(fp)
	
	aes_state state_in0, state_in1, state_in2, state_in3;
	
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
10000490:	00800044 	movi	r2,1
10000494:	e0bff745 	stb	r2,-35(fp)
10000498:	00003306 	br	10000568 <aes_encrypt+0x2e4>
		// Sub words.
		for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
1000049c:	e03ff785 	stb	zero,-34(fp)
100004a0:	00000d06 	br	100004d8 <aes_encrypt+0x254>
100004a4:	e0bff783 	ldbu	r2,-34(fp)
100004a8:	e0fff004 	addi	r3,fp,-64
100004ac:	100490ba 	slli	r2,r2,2
100004b0:	1889883a 	add	r4,r3,r2
100004b4:	e0bff783 	ldbu	r2,-34(fp)
100004b8:	e0ffe804 	addi	r3,fp,-96
100004bc:	100490ba 	slli	r2,r2,2
100004c0:	1885883a 	add	r2,r3,r2
100004c4:	100b883a 	mov	r5,r2
100004c8:	0000a180 	call	10000a18 <sub_word>
100004cc:	e0bff783 	ldbu	r2,-34(fp)
100004d0:	10800044 	addi	r2,r2,1
100004d4:	e0bff785 	stb	r2,-34(fp)
100004d8:	e0bff783 	ldbu	r2,-34(fp)
100004dc:	10800130 	cmpltui	r2,r2,4
100004e0:	103ff01e 	bne	r2,zero,100004a4 <aes_encrypt+0x220>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Shift Rows.
		shift_rows(state_in0.state8, state_in1.state8);
100004e4:	e0ffe404 	addi	r3,fp,-112
100004e8:	e0bfe804 	addi	r2,fp,-96
100004ec:	180b883a 	mov	r5,r3
100004f0:	1009883a 	mov	r4,r2
100004f4:	00008480 	call	10000848 <shift_rows>
		// memcpy(&state, &state_in, sizeof(state_in));
		
		// Mix Columns.
		mix_columns(state_in1.state8, state_in2.state8);
100004f8:	e0ffe004 	addi	r3,fp,-128
100004fc:	e0bfe404 	addi	r2,fp,-112
10000500:	180b883a 	mov	r5,r3
10000504:	1009883a 	mov	r4,r2
10000508:	0000b040 	call	10000b04 <mix_columns>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Add Round Key
		add_round_key(state_in2.state32, key_out[round], state_in3.state32);
1000050c:	a006d0ba 	srli	r3,r20,2
10000510:	e0bff743 	ldbu	r2,-35(fp)
10000514:	1885383a 	mul	r2,r3,r2
10000518:	100490ba 	slli	r2,r2,2
1000051c:	e0fff417 	ldw	r3,-48(fp)
10000520:	1887883a 	add	r3,r3,r2
10000524:	e13fdc04 	addi	r4,fp,-144
10000528:	e0bfe004 	addi	r2,fp,-128
1000052c:	200d883a 	mov	r6,r4
10000530:	180b883a 	mov	r5,r3
10000534:	1009883a 	mov	r4,r2
10000538:	0000dc00 	call	10000dc0 <add_round_key>
		memcpy(&state, &state_in3, sizeof(state_in3));
1000053c:	e0bfdc17 	ldw	r2,-144(fp)
10000540:	e0bff015 	stw	r2,-64(fp)
10000544:	e0bfdd17 	ldw	r2,-140(fp)
10000548:	e0bff115 	stw	r2,-60(fp)
1000054c:	e0bfde17 	ldw	r2,-136(fp)
10000550:	e0bff215 	stw	r2,-56(fp)
10000554:	e0bfdf17 	ldw	r2,-132(fp)
10000558:	e0bff315 	stw	r2,-52(fp)
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
1000055c:	e0bff743 	ldbu	r2,-35(fp)
10000560:	10800044 	addi	r2,r2,1
10000564:	e0bff745 	stb	r2,-35(fp)
10000568:	00800284 	movi	r2,10
1000056c:	e0fff743 	ldbu	r3,-35(fp)
10000570:	10803fcc 	andi	r2,r2,255
10000574:	18bfc936 	bltu	r3,r2,1000049c <aes_encrypt+0x218>
	}
	
	// Sub words.
	for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
10000578:	e03ff7c5 	stb	zero,-33(fp)
1000057c:	00000d06 	br	100005b4 <aes_encrypt+0x330>
10000580:	e0bff7c3 	ldbu	r2,-33(fp)
10000584:	e0fff004 	addi	r3,fp,-64
10000588:	100490ba 	slli	r2,r2,2
1000058c:	1889883a 	add	r4,r3,r2
10000590:	e0bff7c3 	ldbu	r2,-33(fp)
10000594:	e0ffe804 	addi	r3,fp,-96
10000598:	100490ba 	slli	r2,r2,2
1000059c:	1885883a 	add	r2,r3,r2
100005a0:	100b883a 	mov	r5,r2
100005a4:	0000a180 	call	10000a18 <sub_word>
100005a8:	e0bff7c3 	ldbu	r2,-33(fp)
100005ac:	10800044 	addi	r2,r2,1
100005b0:	e0bff7c5 	stb	r2,-33(fp)
100005b4:	e0bff7c3 	ldbu	r2,-33(fp)
100005b8:	10800130 	cmpltui	r2,r2,4
100005bc:	103ff01e 	bne	r2,zero,10000580 <aes_encrypt+0x2fc>
	//memcpy(&state, &state_in, sizeof(state_in));
	
	// Shift Rows.
	shift_rows(&state_in0.state8, &state_in1.state8);
100005c0:	e0ffe404 	addi	r3,fp,-112
100005c4:	e0bfe804 	addi	r2,fp,-96
100005c8:	180b883a 	mov	r5,r3
100005cc:	1009883a 	mov	r4,r2
100005d0:	00008480 	call	10000848 <shift_rows>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Add Round Key
	add_round_key(&state_in1.state32, &key_out[CNST_AES_NR], &state_in2.state32);
100005d4:	a006d0ba 	srli	r3,r20,2
100005d8:	00800284 	movi	r2,10
100005dc:	10803fcc 	andi	r2,r2,255
100005e0:	1885383a 	mul	r2,r3,r2
100005e4:	100490ba 	slli	r2,r2,2
100005e8:	e0fff417 	ldw	r3,-48(fp)
100005ec:	1887883a 	add	r3,r3,r2
100005f0:	e13fe004 	addi	r4,fp,-128
100005f4:	e0bfe404 	addi	r2,fp,-112
100005f8:	200d883a 	mov	r6,r4
100005fc:	180b883a 	mov	r5,r3
10000600:	1009883a 	mov	r4,r2
10000604:	0000dc00 	call	10000dc0 <add_round_key>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Now everything is ready.
	memcpy(data_out, state_in2.state32, sizeof(state_in2.state32));
10000608:	e0bfe004 	addi	r2,fp,-128
1000060c:	01800404 	movi	r6,16
10000610:	100b883a 	mov	r5,r2
10000614:	e13fda17 	ldw	r4,-152(fp)
10000618:	00030480 	call	10003048 <memcpy>
1000061c:	b837883a 	mov	sp,r23
}
10000620:	0001883a 	nop
10000624:	e6fff804 	addi	sp,fp,-32
10000628:	dfc00917 	ldw	ra,36(sp)
1000062c:	df000817 	ldw	fp,32(sp)
10000630:	ddc00717 	ldw	r23,28(sp)
10000634:	dd800617 	ldw	r22,24(sp)
10000638:	dd400517 	ldw	r21,20(sp)
1000063c:	dd000417 	ldw	r20,16(sp)
10000640:	dcc00317 	ldw	r19,12(sp)
10000644:	dc800217 	ldw	r18,8(sp)
10000648:	dc400117 	ldw	r17,4(sp)
1000064c:	dc000017 	ldw	r16,0(sp)
10000650:	dec00a04 	addi	sp,sp,40
10000654:	f800283a 	ret

10000658 <key_expansion>:

// Verified working.
void key_expansion(uint8_t* key_in, uint32_t* key_out, uint8_t Nk, uint8_t Nb, uint8_t Nr) {
10000658:	defff704 	addi	sp,sp,-36
1000065c:	dfc00815 	stw	ra,32(sp)
10000660:	df000715 	stw	fp,28(sp)
10000664:	df000704 	addi	fp,sp,28
10000668:	e13ffd15 	stw	r4,-12(fp)
1000066c:	e17ffc15 	stw	r5,-16(fp)
10000670:	3007883a 	mov	r3,r6
10000674:	3809883a 	mov	r4,r7
10000678:	e0800217 	ldw	r2,8(fp)
1000067c:	e0fffb05 	stb	r3,-20(fp)
10000680:	2007883a 	mov	r3,r4
10000684:	e0fffa05 	stb	r3,-24(fp)
10000688:	e0bff905 	stb	r2,-28(fp)
	uint32_t temp;
	for(uint8_t i=0; i<Nk; i++) {
1000068c:	e03ffec5 	stb	zero,-5(fp)
10000690:	00002b06 	br	10000740 <key_expansion+0xe8>
		key_out[i] = key_in[4*i+3] | (key_in[4*i+2] << 8) | (key_in[4*i+1] << 16) | (key_in[4*i] << 24);
10000694:	e0bffec3 	ldbu	r2,-5(fp)
10000698:	100490ba 	slli	r2,r2,2
1000069c:	108000c4 	addi	r2,r2,3
100006a0:	e0fffd17 	ldw	r3,-12(fp)
100006a4:	1885883a 	add	r2,r3,r2
100006a8:	10800003 	ldbu	r2,0(r2)
100006ac:	10c03fcc 	andi	r3,r2,255
100006b0:	e0bffec3 	ldbu	r2,-5(fp)
100006b4:	100490ba 	slli	r2,r2,2
100006b8:	10800084 	addi	r2,r2,2
100006bc:	e13ffd17 	ldw	r4,-12(fp)
100006c0:	2085883a 	add	r2,r4,r2
100006c4:	10800003 	ldbu	r2,0(r2)
100006c8:	10803fcc 	andi	r2,r2,255
100006cc:	1004923a 	slli	r2,r2,8
100006d0:	1886b03a 	or	r3,r3,r2
100006d4:	e0bffec3 	ldbu	r2,-5(fp)
100006d8:	100490ba 	slli	r2,r2,2
100006dc:	10800044 	addi	r2,r2,1
100006e0:	e13ffd17 	ldw	r4,-12(fp)
100006e4:	2085883a 	add	r2,r4,r2
100006e8:	10800003 	ldbu	r2,0(r2)
100006ec:	10803fcc 	andi	r2,r2,255
100006f0:	1004943a 	slli	r2,r2,16
100006f4:	1886b03a 	or	r3,r3,r2
100006f8:	e0bffec3 	ldbu	r2,-5(fp)
100006fc:	100490ba 	slli	r2,r2,2
10000700:	1009883a 	mov	r4,r2
10000704:	e0bffd17 	ldw	r2,-12(fp)
10000708:	1105883a 	add	r2,r2,r4
1000070c:	10800003 	ldbu	r2,0(r2)
10000710:	10803fcc 	andi	r2,r2,255
10000714:	1004963a 	slli	r2,r2,24
10000718:	1888b03a 	or	r4,r3,r2
1000071c:	e0bffec3 	ldbu	r2,-5(fp)
10000720:	100490ba 	slli	r2,r2,2
10000724:	e0fffc17 	ldw	r3,-16(fp)
10000728:	1885883a 	add	r2,r3,r2
1000072c:	2007883a 	mov	r3,r4
10000730:	10c00015 	stw	r3,0(r2)
	for(uint8_t i=0; i<Nk; i++) {
10000734:	e0bffec3 	ldbu	r2,-5(fp)
10000738:	10800044 	addi	r2,r2,1
1000073c:	e0bffec5 	stb	r2,-5(fp)
10000740:	e0fffec3 	ldbu	r3,-5(fp)
10000744:	e0bffb03 	ldbu	r2,-20(fp)
10000748:	18bfd236 	bltu	r3,r2,10000694 <key_expansion+0x3c>
	}
	uint8_t i = Nk;
1000074c:	e0bffb03 	ldbu	r2,-20(fp)
10000750:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000754:	00003006 	br	10000818 <key_expansion+0x1c0>
		temp = key_out[i-1];
10000758:	e0fffe83 	ldbu	r3,-6(fp)
1000075c:	00900034 	movhi	r2,16384
10000760:	10bfffc4 	addi	r2,r2,-1
10000764:	1885883a 	add	r2,r3,r2
10000768:	100490ba 	slli	r2,r2,2
1000076c:	e0fffc17 	ldw	r3,-16(fp)
10000770:	1885883a 	add	r2,r3,r2
10000774:	10800017 	ldw	r2,0(r2)
10000778:	e0bfff15 	stw	r2,-4(fp)
		if(i % Nk == 0) {
1000077c:	e0bffe83 	ldbu	r2,-6(fp)
10000780:	e0fffb03 	ldbu	r3,-20(fp)
10000784:	10c9203a 	divu	r4,r2,r3
10000788:	20c7383a 	mul	r3,r4,r3
1000078c:	10c5c83a 	sub	r2,r2,r3
10000790:	10803fcc 	andi	r2,r2,255
10000794:	10000f1e 	bne	r2,zero,100007d4 <key_expansion+0x17c>
			temp = sub_word32(rot_word(temp)) ^ Rcon[i/Nk];
10000798:	e13fff17 	ldw	r4,-4(fp)
1000079c:	0000adc0 	call	10000adc <rot_word>
100007a0:	1009883a 	mov	r4,r2
100007a4:	000096c0 	call	1000096c <sub_word32>
100007a8:	1009883a 	mov	r4,r2
100007ac:	e0fffe83 	ldbu	r3,-6(fp)
100007b0:	e0bffb03 	ldbu	r2,-20(fp)
100007b4:	1885203a 	divu	r2,r3,r2
100007b8:	10803fcc 	andi	r2,r2,255
100007bc:	100690ba 	slli	r3,r2,2
100007c0:	00840074 	movhi	r2,4097
100007c4:	1885883a 	add	r2,r3,r2
100007c8:	108ce717 	ldw	r2,13212(r2)
100007cc:	2084f03a 	xor	r2,r4,r2
100007d0:	e0bfff15 	stw	r2,-4(fp)
		}
		key_out[i] = key_out[i-Nk] ^ temp;
100007d4:	e0fffe83 	ldbu	r3,-6(fp)
100007d8:	e0bffb03 	ldbu	r2,-20(fp)
100007dc:	1885c83a 	sub	r2,r3,r2
100007e0:	100490ba 	slli	r2,r2,2
100007e4:	e0fffc17 	ldw	r3,-16(fp)
100007e8:	1885883a 	add	r2,r3,r2
100007ec:	11000017 	ldw	r4,0(r2)
100007f0:	e0bffe83 	ldbu	r2,-6(fp)
100007f4:	100490ba 	slli	r2,r2,2
100007f8:	e0fffc17 	ldw	r3,-16(fp)
100007fc:	1885883a 	add	r2,r3,r2
10000800:	e0ffff17 	ldw	r3,-4(fp)
10000804:	20c6f03a 	xor	r3,r4,r3
10000808:	10c00015 	stw	r3,0(r2)
		++i;
1000080c:	e0bffe83 	ldbu	r2,-6(fp)
10000810:	10800044 	addi	r2,r2,1
10000814:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000818:	e0fffe83 	ldbu	r3,-6(fp)
1000081c:	e13ffa03 	ldbu	r4,-24(fp)
10000820:	e0bff903 	ldbu	r2,-28(fp)
10000824:	10800044 	addi	r2,r2,1
10000828:	2085383a 	mul	r2,r4,r2
1000082c:	18bfca16 	blt	r3,r2,10000758 <key_expansion+0x100>
	}
}
10000830:	0001883a 	nop
10000834:	e037883a 	mov	sp,fp
10000838:	dfc00117 	ldw	ra,4(sp)
1000083c:	df000017 	ldw	fp,0(sp)
10000840:	dec00204 	addi	sp,sp,8
10000844:	f800283a 	ret

10000848 <shift_rows>:

// Verified working.
void shift_rows(uint8_t* in, uint8_t* result) {
10000848:	defffb04 	addi	sp,sp,-20
1000084c:	df000415 	stw	fp,16(sp)
10000850:	df000404 	addi	fp,sp,16
10000854:	e13ffd15 	stw	r4,-12(fp)
10000858:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
1000085c:	e03fff15 	stw	zero,-4(fp)
10000860:	00002706 	br	10000900 <shift_rows+0xb8>
		for(int j=0; j<4; j++) {
10000864:	e03ffe15 	stw	zero,-8(fp)
10000868:	00001f06 	br	100008e8 <shift_rows+0xa0>
			result[j*4+i] = in[((-i+3+j)%4)*4+i];
1000086c:	00c000c4 	movi	r3,3
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	1887c83a 	sub	r3,r3,r2
10000878:	e0bffe17 	ldw	r2,-8(fp)
1000087c:	1887883a 	add	r3,r3,r2
10000880:	00a00034 	movhi	r2,32768
10000884:	108000c4 	addi	r2,r2,3
10000888:	1884703a 	and	r2,r3,r2
1000088c:	1000040e 	bge	r2,zero,100008a0 <shift_rows+0x58>
10000890:	10bfffc4 	addi	r2,r2,-1
10000894:	00ffff04 	movi	r3,-4
10000898:	10c4b03a 	or	r2,r2,r3
1000089c:	10800044 	addi	r2,r2,1
100008a0:	100690ba 	slli	r3,r2,2
100008a4:	e0bfff17 	ldw	r2,-4(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	1007883a 	mov	r3,r2
100008b0:	e0bffd17 	ldw	r2,-12(fp)
100008b4:	10c7883a 	add	r3,r2,r3
100008b8:	e0bffe17 	ldw	r2,-8(fp)
100008bc:	100890ba 	slli	r4,r2,2
100008c0:	e0bfff17 	ldw	r2,-4(fp)
100008c4:	2085883a 	add	r2,r4,r2
100008c8:	1009883a 	mov	r4,r2
100008cc:	e0bffc17 	ldw	r2,-16(fp)
100008d0:	1105883a 	add	r2,r2,r4
100008d4:	18c00003 	ldbu	r3,0(r3)
100008d8:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
100008dc:	e0bffe17 	ldw	r2,-8(fp)
100008e0:	10800044 	addi	r2,r2,1
100008e4:	e0bffe15 	stw	r2,-8(fp)
100008e8:	e0bffe17 	ldw	r2,-8(fp)
100008ec:	10800110 	cmplti	r2,r2,4
100008f0:	103fde1e 	bne	r2,zero,1000086c <shift_rows+0x24>
	for(int i=0; i<4; i++) {
100008f4:	e0bfff17 	ldw	r2,-4(fp)
100008f8:	10800044 	addi	r2,r2,1
100008fc:	e0bfff15 	stw	r2,-4(fp)
10000900:	e0bfff17 	ldw	r2,-4(fp)
10000904:	10800110 	cmplti	r2,r2,4
10000908:	103fd61e 	bne	r2,zero,10000864 <shift_rows+0x1c>
		}
	}
}
1000090c:	0001883a 	nop
10000910:	e037883a 	mov	sp,fp
10000914:	df000017 	ldw	fp,0(sp)
10000918:	dec00104 	addi	sp,sp,4
1000091c:	f800283a 	ret

10000920 <sub_byte>:

uint8_t sub_byte(uint8_t byte_in) {
10000920:	defffe04 	addi	sp,sp,-8
10000924:	df000115 	stw	fp,4(sp)
10000928:	df000104 	addi	fp,sp,4
1000092c:	2005883a 	mov	r2,r4
10000930:	e0bfff05 	stb	r2,-4(fp)
	return aes_sbox[(((byte_in & 0xF0) >> 4) * 16) + (byte_in & 0x0F)];
10000934:	e0bfff03 	ldbu	r2,-4(fp)
10000938:	1004d13a 	srli	r2,r2,4
1000093c:	10803fcc 	andi	r2,r2,255
10000940:	1006913a 	slli	r3,r2,4
10000944:	e0bfff03 	ldbu	r2,-4(fp)
10000948:	108003cc 	andi	r2,r2,15
1000094c:	1887883a 	add	r3,r3,r2
10000950:	00840074 	movhi	r2,4097
10000954:	1885883a 	add	r2,r3,r2
10000958:	10879f03 	ldbu	r2,7804(r2)
}
1000095c:	e037883a 	mov	sp,fp
10000960:	df000017 	ldw	fp,0(sp)
10000964:	dec00104 	addi	sp,sp,4
10000968:	f800283a 	ret

1000096c <sub_word32>:

uint32_t sub_word32(uint32_t word_in) {
1000096c:	defffc04 	addi	sp,sp,-16
10000970:	dfc00315 	stw	ra,12(sp)
10000974:	df000215 	stw	fp,8(sp)
10000978:	df000204 	addi	fp,sp,8
1000097c:	e13ffe15 	stw	r4,-8(fp)
	uint8_t bo_3 = sub_byte((word_in & 0xFF000000) >> 24);
10000980:	e0bffe17 	ldw	r2,-8(fp)
10000984:	1004d63a 	srli	r2,r2,24
10000988:	10803fcc 	andi	r2,r2,255
1000098c:	1009883a 	mov	r4,r2
10000990:	00009200 	call	10000920 <sub_byte>
10000994:	e0bfffc5 	stb	r2,-1(fp)
	uint8_t bo_2 = sub_byte((word_in & 0x00FF0000) >> 16);
10000998:	e0bffe17 	ldw	r2,-8(fp)
1000099c:	1004d43a 	srli	r2,r2,16
100009a0:	10803fcc 	andi	r2,r2,255
100009a4:	1009883a 	mov	r4,r2
100009a8:	00009200 	call	10000920 <sub_byte>
100009ac:	e0bfff85 	stb	r2,-2(fp)
	uint8_t bo_1 = sub_byte((word_in & 0x0000FF00) >> 8);
100009b0:	e0bffe17 	ldw	r2,-8(fp)
100009b4:	1004d23a 	srli	r2,r2,8
100009b8:	10803fcc 	andi	r2,r2,255
100009bc:	1009883a 	mov	r4,r2
100009c0:	00009200 	call	10000920 <sub_byte>
100009c4:	e0bfff45 	stb	r2,-3(fp)
	uint8_t bo_0 = sub_byte((word_in & 0x000000FF));
100009c8:	e0bffe17 	ldw	r2,-8(fp)
100009cc:	10803fcc 	andi	r2,r2,255
100009d0:	1009883a 	mov	r4,r2
100009d4:	00009200 	call	10000920 <sub_byte>
100009d8:	e0bfff05 	stb	r2,-4(fp)

	return (bo_3 << 24) | (bo_2 << 16) | (bo_1 << 8) | bo_0;
100009dc:	e0bfffc3 	ldbu	r2,-1(fp)
100009e0:	1006963a 	slli	r3,r2,24
100009e4:	e0bfff83 	ldbu	r2,-2(fp)
100009e8:	1004943a 	slli	r2,r2,16
100009ec:	1886b03a 	or	r3,r3,r2
100009f0:	e0bfff43 	ldbu	r2,-3(fp)
100009f4:	1004923a 	slli	r2,r2,8
100009f8:	1886b03a 	or	r3,r3,r2
100009fc:	e0bfff03 	ldbu	r2,-4(fp)
10000a00:	1884b03a 	or	r2,r3,r2
}
10000a04:	e037883a 	mov	sp,fp
10000a08:	dfc00117 	ldw	ra,4(sp)
10000a0c:	df000017 	ldw	fp,0(sp)
10000a10:	dec00204 	addi	sp,sp,8
10000a14:	f800283a 	ret

10000a18 <sub_word>:

void sub_word(uint8_t* word_in, uint8_t* word_out) {
10000a18:	defffb04 	addi	sp,sp,-20
10000a1c:	dfc00415 	stw	ra,16(sp)
10000a20:	df000315 	stw	fp,12(sp)
10000a24:	dc000215 	stw	r16,8(sp)
10000a28:	df000304 	addi	fp,sp,12
10000a2c:	e13ffe15 	stw	r4,-8(fp)
10000a30:	e17ffd15 	stw	r5,-12(fp)
	word_out[3] = sub_byte(word_in[3]);
10000a34:	e0bffe17 	ldw	r2,-8(fp)
10000a38:	108000c4 	addi	r2,r2,3
10000a3c:	10800003 	ldbu	r2,0(r2)
10000a40:	10c03fcc 	andi	r3,r2,255
10000a44:	e0bffd17 	ldw	r2,-12(fp)
10000a48:	140000c4 	addi	r16,r2,3
10000a4c:	1809883a 	mov	r4,r3
10000a50:	00009200 	call	10000920 <sub_byte>
10000a54:	80800005 	stb	r2,0(r16)
	word_out[2] = sub_byte(word_in[2]);
10000a58:	e0bffe17 	ldw	r2,-8(fp)
10000a5c:	10800084 	addi	r2,r2,2
10000a60:	10800003 	ldbu	r2,0(r2)
10000a64:	10c03fcc 	andi	r3,r2,255
10000a68:	e0bffd17 	ldw	r2,-12(fp)
10000a6c:	14000084 	addi	r16,r2,2
10000a70:	1809883a 	mov	r4,r3
10000a74:	00009200 	call	10000920 <sub_byte>
10000a78:	80800005 	stb	r2,0(r16)
	word_out[1] = sub_byte(word_in[1]);
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10800044 	addi	r2,r2,1
10000a84:	10800003 	ldbu	r2,0(r2)
10000a88:	10c03fcc 	andi	r3,r2,255
10000a8c:	e0bffd17 	ldw	r2,-12(fp)
10000a90:	14000044 	addi	r16,r2,1
10000a94:	1809883a 	mov	r4,r3
10000a98:	00009200 	call	10000920 <sub_byte>
10000a9c:	80800005 	stb	r2,0(r16)
	word_out[0] = sub_byte(word_in[0]);
10000aa0:	e0bffe17 	ldw	r2,-8(fp)
10000aa4:	10800003 	ldbu	r2,0(r2)
10000aa8:	10803fcc 	andi	r2,r2,255
10000aac:	1009883a 	mov	r4,r2
10000ab0:	00009200 	call	10000920 <sub_byte>
10000ab4:	1007883a 	mov	r3,r2
10000ab8:	e0bffd17 	ldw	r2,-12(fp)
10000abc:	10c00005 	stb	r3,0(r2)
}
10000ac0:	0001883a 	nop
10000ac4:	e6ffff04 	addi	sp,fp,-4
10000ac8:	dfc00217 	ldw	ra,8(sp)
10000acc:	df000117 	ldw	fp,4(sp)
10000ad0:	dc000017 	ldw	r16,0(sp)
10000ad4:	dec00304 	addi	sp,sp,12
10000ad8:	f800283a 	ret

10000adc <rot_word>:

uint32_t rot_word(uint32_t word_in) {
10000adc:	defffe04 	addi	sp,sp,-8
10000ae0:	df000115 	stw	fp,4(sp)
10000ae4:	df000104 	addi	fp,sp,4
10000ae8:	e13fff15 	stw	r4,-4(fp)
	return (((word_in & 0x00FFFFFF) << 8) & 0xFFFFFF00) | ((word_in & 0xFF000000) >> 24);
10000aec:	e0bfff17 	ldw	r2,-4(fp)
10000af0:	1004123a 	roli	r2,r2,8
}
10000af4:	e037883a 	mov	sp,fp
10000af8:	df000017 	ldw	fp,0(sp)
10000afc:	dec00104 	addi	sp,sp,4
10000b00:	f800283a 	ret

10000b04 <mix_columns>:

void mix_columns(uint8_t* mat_in, uint8_t* result) {
10000b04:	defff304 	addi	sp,sp,-52
10000b08:	dfc00c15 	stw	ra,48(sp)
10000b0c:	df000b15 	stw	fp,44(sp)
10000b10:	df000b04 	addi	fp,sp,44
10000b14:	e13ff615 	stw	r4,-40(fp)
10000b18:	e17ff515 	stw	r5,-44(fp)
	uint8_t state_deasm[4][4];	// State_disassembled.
	uint8_t result_deasm[4][4];	// Result disassembled.
	
	memcpy(&state_deasm, mat_in, sizeof(state_deasm));
10000b1c:	e0fff617 	ldw	r3,-40(fp)
10000b20:	e0bffbc4 	addi	r2,fp,-17
10000b24:	1809883a 	mov	r4,r3
10000b28:	00c00404 	movi	r3,16
10000b2c:	180d883a 	mov	r6,r3
10000b30:	200b883a 	mov	r5,r4
10000b34:	1009883a 	mov	r4,r2
10000b38:	00030480 	call	10003048 <memcpy>
		
	// Calculate.
	for(uint8_t i=0; i<4; i++) {
10000b3c:	e03fffc5 	stb	zero,-1(fp)
10000b40:	00008f06 	br	10000d80 <mix_columns+0x27c>
		result_deasm[i][3] = 
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b44:	e0bfffc3 	ldbu	r2,-1(fp)
10000b48:	100490ba 	slli	r2,r2,2
10000b4c:	e085883a 	add	r2,fp,r2
10000b50:	10bffc83 	ldbu	r2,-14(r2)
10000b54:	10803fcc 	andi	r2,r2,255
10000b58:	10c001a4 	muli	r3,r2,6
10000b5c:	00840074 	movhi	r2,4097
10000b60:	1885883a 	add	r2,r3,r2
10000b64:	10cb6703 	ldbu	r3,11676(r2)
10000b68:	e0bfffc3 	ldbu	r2,-1(fp)
10000b6c:	100490ba 	slli	r2,r2,2
10000b70:	e085883a 	add	r2,fp,r2
10000b74:	10bffc43 	ldbu	r2,-15(r2)
10000b78:	10803fcc 	andi	r2,r2,255
10000b7c:	110001a4 	muli	r4,r2,6
10000b80:	00840074 	movhi	r2,4097
10000b84:	2085883a 	add	r2,r4,r2
10000b88:	108b6743 	ldbu	r2,11677(r2)
		result_deasm[i][3] = 
10000b8c:	1884f03a 	xor	r2,r3,r2
10000b90:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b94:	e0bfffc3 	ldbu	r2,-1(fp)
10000b98:	100490ba 	slli	r2,r2,2
10000b9c:	e085883a 	add	r2,fp,r2
10000ba0:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][3] = 
10000ba4:	1884f03a 	xor	r2,r3,r2
10000ba8:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000bac:	e0bfffc3 	ldbu	r2,-1(fp)
10000bb0:	100490ba 	slli	r2,r2,2
10000bb4:	e085883a 	add	r2,fp,r2
10000bb8:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][3] = 
10000bbc:	e0bfffc3 	ldbu	r2,-1(fp)
10000bc0:	20c6f03a 	xor	r3,r4,r3
10000bc4:	100490ba 	slli	r2,r2,2
10000bc8:	e085883a 	add	r2,fp,r2
10000bcc:	10fff885 	stb	r3,-30(r2)
		result_deasm[i][2] = 
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000bd0:	e0bfffc3 	ldbu	r2,-1(fp)
10000bd4:	100490ba 	slli	r2,r2,2
10000bd8:	e085883a 	add	r2,fp,r2
10000bdc:	10fffc83 	ldbu	r3,-14(r2)
10000be0:	e0bfffc3 	ldbu	r2,-1(fp)
10000be4:	100490ba 	slli	r2,r2,2
10000be8:	e085883a 	add	r2,fp,r2
10000bec:	10bffc43 	ldbu	r2,-15(r2)
10000bf0:	10803fcc 	andi	r2,r2,255
10000bf4:	110001a4 	muli	r4,r2,6
10000bf8:	00840074 	movhi	r2,4097
10000bfc:	2085883a 	add	r2,r4,r2
10000c00:	108b6703 	ldbu	r2,11676(r2)
		result_deasm[i][2] = 
10000c04:	1884f03a 	xor	r2,r3,r2
10000c08:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c10:	100490ba 	slli	r2,r2,2
10000c14:	e085883a 	add	r2,fp,r2
10000c18:	10bffc03 	ldbu	r2,-16(r2)
10000c1c:	10803fcc 	andi	r2,r2,255
10000c20:	10c001a4 	muli	r3,r2,6
10000c24:	00840074 	movhi	r2,4097
10000c28:	1885883a 	add	r2,r3,r2
10000c2c:	108b6743 	ldbu	r2,11677(r2)
		result_deasm[i][2] = 
10000c30:	2084f03a 	xor	r2,r4,r2
10000c34:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c38:	e0bfffc3 	ldbu	r2,-1(fp)
10000c3c:	100490ba 	slli	r2,r2,2
10000c40:	e085883a 	add	r2,fp,r2
10000c44:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][2] = 
10000c48:	e0bfffc3 	ldbu	r2,-1(fp)
10000c4c:	20c6f03a 	xor	r3,r4,r3
10000c50:	100490ba 	slli	r2,r2,2
10000c54:	e085883a 	add	r2,fp,r2
10000c58:	10fff845 	stb	r3,-31(r2)
		result_deasm[i][1] = 
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c5c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c60:	100490ba 	slli	r2,r2,2
10000c64:	e085883a 	add	r2,fp,r2
10000c68:	10fffc83 	ldbu	r3,-14(r2)
10000c6c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c70:	100490ba 	slli	r2,r2,2
10000c74:	e085883a 	add	r2,fp,r2
10000c78:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][1] = 
10000c7c:	1884f03a 	xor	r2,r3,r2
10000c80:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c84:	e0bfffc3 	ldbu	r2,-1(fp)
10000c88:	100490ba 	slli	r2,r2,2
10000c8c:	e085883a 	add	r2,fp,r2
10000c90:	10bffc03 	ldbu	r2,-16(r2)
10000c94:	10803fcc 	andi	r2,r2,255
10000c98:	10c001a4 	muli	r3,r2,6
10000c9c:	00840074 	movhi	r2,4097
10000ca0:	1885883a 	add	r2,r3,r2
10000ca4:	108b6703 	ldbu	r2,11676(r2)
		result_deasm[i][1] = 
10000ca8:	2084f03a 	xor	r2,r4,r2
10000cac:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000cb0:	e0bfffc3 	ldbu	r2,-1(fp)
10000cb4:	100490ba 	slli	r2,r2,2
10000cb8:	e085883a 	add	r2,fp,r2
10000cbc:	10bffbc3 	ldbu	r2,-17(r2)
10000cc0:	10803fcc 	andi	r2,r2,255
10000cc4:	10c001a4 	muli	r3,r2,6
10000cc8:	00840074 	movhi	r2,4097
10000ccc:	1885883a 	add	r2,r3,r2
10000cd0:	10cb6743 	ldbu	r3,11677(r2)
		result_deasm[i][1] = 
10000cd4:	e0bfffc3 	ldbu	r2,-1(fp)
10000cd8:	20c6f03a 	xor	r3,r4,r3
10000cdc:	100490ba 	slli	r2,r2,2
10000ce0:	e085883a 	add	r2,fp,r2
10000ce4:	10fff805 	stb	r3,-32(r2)
		result_deasm[i][0] = 
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000ce8:	e0bfffc3 	ldbu	r2,-1(fp)
10000cec:	100490ba 	slli	r2,r2,2
10000cf0:	e085883a 	add	r2,fp,r2
10000cf4:	10bffc83 	ldbu	r2,-14(r2)
10000cf8:	10803fcc 	andi	r2,r2,255
10000cfc:	10c001a4 	muli	r3,r2,6
10000d00:	00840074 	movhi	r2,4097
10000d04:	1885883a 	add	r2,r3,r2
10000d08:	10cb6743 	ldbu	r3,11677(r2)
10000d0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d10:	100490ba 	slli	r2,r2,2
10000d14:	e085883a 	add	r2,fp,r2
10000d18:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][0] = 
10000d1c:	1884f03a 	xor	r2,r3,r2
10000d20:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d24:	e0bfffc3 	ldbu	r2,-1(fp)
10000d28:	100490ba 	slli	r2,r2,2
10000d2c:	e085883a 	add	r2,fp,r2
10000d30:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][0] = 
10000d34:	1884f03a 	xor	r2,r3,r2
10000d38:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d3c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d40:	100490ba 	slli	r2,r2,2
10000d44:	e085883a 	add	r2,fp,r2
10000d48:	10bffbc3 	ldbu	r2,-17(r2)
10000d4c:	10803fcc 	andi	r2,r2,255
10000d50:	10c001a4 	muli	r3,r2,6
10000d54:	00840074 	movhi	r2,4097
10000d58:	1885883a 	add	r2,r3,r2
10000d5c:	10cb6703 	ldbu	r3,11676(r2)
		result_deasm[i][0] = 
10000d60:	e0bfffc3 	ldbu	r2,-1(fp)
10000d64:	20c6f03a 	xor	r3,r4,r3
10000d68:	100490ba 	slli	r2,r2,2
10000d6c:	e085883a 	add	r2,fp,r2
10000d70:	10fff7c5 	stb	r3,-33(r2)
	for(uint8_t i=0; i<4; i++) {
10000d74:	e0bfffc3 	ldbu	r2,-1(fp)
10000d78:	10800044 	addi	r2,r2,1
10000d7c:	e0bfffc5 	stb	r2,-1(fp)
10000d80:	e0bfffc3 	ldbu	r2,-1(fp)
10000d84:	10800130 	cmpltui	r2,r2,4
10000d88:	103f6e1e 	bne	r2,zero,10000b44 <mix_columns+0x40>
	}
	
	memcpy(result, &result_deasm, sizeof(state_deasm));
10000d8c:	e0bff517 	ldw	r2,-44(fp)
10000d90:	1009883a 	mov	r4,r2
10000d94:	e0bff7c4 	addi	r2,fp,-33
10000d98:	00c00404 	movi	r3,16
10000d9c:	180d883a 	mov	r6,r3
10000da0:	100b883a 	mov	r5,r2
10000da4:	00030480 	call	10003048 <memcpy>
}
10000da8:	0001883a 	nop
10000dac:	e037883a 	mov	sp,fp
10000db0:	dfc00117 	ldw	ra,4(sp)
10000db4:	df000017 	ldw	fp,0(sp)
10000db8:	dec00204 	addi	sp,sp,8
10000dbc:	f800283a 	ret

10000dc0 <add_round_key>:

// Each have a shape of uint32_t[4]
void add_round_key(uint32_t* state, uint32_t* round_key, uint32_t* result) {
10000dc0:	defffc04 	addi	sp,sp,-16
10000dc4:	df000315 	stw	fp,12(sp)
10000dc8:	df000304 	addi	fp,sp,12
10000dcc:	e13fff15 	stw	r4,-4(fp)
10000dd0:	e17ffe15 	stw	r5,-8(fp)
10000dd4:	e1bffd15 	stw	r6,-12(fp)
	result[0] = state[0] ^ round_key[0];
10000dd8:	e0bfff17 	ldw	r2,-4(fp)
10000ddc:	10c00017 	ldw	r3,0(r2)
10000de0:	e0bffe17 	ldw	r2,-8(fp)
10000de4:	10800017 	ldw	r2,0(r2)
10000de8:	1886f03a 	xor	r3,r3,r2
10000dec:	e0bffd17 	ldw	r2,-12(fp)
10000df0:	10c00015 	stw	r3,0(r2)
	result[1] = state[1] ^ round_key[1];
10000df4:	e0bfff17 	ldw	r2,-4(fp)
10000df8:	10800104 	addi	r2,r2,4
10000dfc:	11000017 	ldw	r4,0(r2)
10000e00:	e0bffe17 	ldw	r2,-8(fp)
10000e04:	10800104 	addi	r2,r2,4
10000e08:	10c00017 	ldw	r3,0(r2)
10000e0c:	e0bffd17 	ldw	r2,-12(fp)
10000e10:	10800104 	addi	r2,r2,4
10000e14:	20c6f03a 	xor	r3,r4,r3
10000e18:	10c00015 	stw	r3,0(r2)
	result[2] = state[2] ^ round_key[2];
10000e1c:	e0bfff17 	ldw	r2,-4(fp)
10000e20:	10800204 	addi	r2,r2,8
10000e24:	11000017 	ldw	r4,0(r2)
10000e28:	e0bffe17 	ldw	r2,-8(fp)
10000e2c:	10800204 	addi	r2,r2,8
10000e30:	10c00017 	ldw	r3,0(r2)
10000e34:	e0bffd17 	ldw	r2,-12(fp)
10000e38:	10800204 	addi	r2,r2,8
10000e3c:	20c6f03a 	xor	r3,r4,r3
10000e40:	10c00015 	stw	r3,0(r2)
	result[3] = state[3] ^ round_key[3];
10000e44:	e0bfff17 	ldw	r2,-4(fp)
10000e48:	10800304 	addi	r2,r2,12
10000e4c:	11000017 	ldw	r4,0(r2)
10000e50:	e0bffe17 	ldw	r2,-8(fp)
10000e54:	10800304 	addi	r2,r2,12
10000e58:	10c00017 	ldw	r3,0(r2)
10000e5c:	e0bffd17 	ldw	r2,-12(fp)
10000e60:	10800304 	addi	r2,r2,12
10000e64:	20c6f03a 	xor	r3,r4,r3
10000e68:	10c00015 	stw	r3,0(r2)
}
10000e6c:	0001883a 	nop
10000e70:	e037883a 	mov	sp,fp
10000e74:	df000017 	ldw	fp,0(sp)
10000e78:	dec00104 	addi	sp,sp,4
10000e7c:	f800283a 	ret

10000e80 <transpose>:

void transpose(uint8_t* arr_in, uint8_t* arr_out) {
10000e80:	defffb04 	addi	sp,sp,-20
10000e84:	df000415 	stw	fp,16(sp)
10000e88:	df000404 	addi	fp,sp,16
10000e8c:	e13ffd15 	stw	r4,-12(fp)
10000e90:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
10000e94:	e03fff15 	stw	zero,-4(fp)
10000e98:	00001b06 	br	10000f08 <transpose+0x88>
		for(int j=0; j<4; j++) {
10000e9c:	e03ffe15 	stw	zero,-8(fp)
10000ea0:	00001306 	br	10000ef0 <transpose+0x70>
			arr_out[j*4+i] = arr_in[i*4+j];
10000ea4:	e0bfff17 	ldw	r2,-4(fp)
10000ea8:	100690ba 	slli	r3,r2,2
10000eac:	e0bffe17 	ldw	r2,-8(fp)
10000eb0:	1885883a 	add	r2,r3,r2
10000eb4:	1007883a 	mov	r3,r2
10000eb8:	e0bffd17 	ldw	r2,-12(fp)
10000ebc:	10c7883a 	add	r3,r2,r3
10000ec0:	e0bffe17 	ldw	r2,-8(fp)
10000ec4:	100890ba 	slli	r4,r2,2
10000ec8:	e0bfff17 	ldw	r2,-4(fp)
10000ecc:	2085883a 	add	r2,r4,r2
10000ed0:	1009883a 	mov	r4,r2
10000ed4:	e0bffc17 	ldw	r2,-16(fp)
10000ed8:	1105883a 	add	r2,r2,r4
10000edc:	18c00003 	ldbu	r3,0(r3)
10000ee0:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
10000ee4:	e0bffe17 	ldw	r2,-8(fp)
10000ee8:	10800044 	addi	r2,r2,1
10000eec:	e0bffe15 	stw	r2,-8(fp)
10000ef0:	e0bffe17 	ldw	r2,-8(fp)
10000ef4:	10800110 	cmplti	r2,r2,4
10000ef8:	103fea1e 	bne	r2,zero,10000ea4 <transpose+0x24>
	for(int i=0; i<4; i++) {
10000efc:	e0bfff17 	ldw	r2,-4(fp)
10000f00:	10800044 	addi	r2,r2,1
10000f04:	e0bfff15 	stw	r2,-4(fp)
10000f08:	e0bfff17 	ldw	r2,-4(fp)
10000f0c:	10800110 	cmplti	r2,r2,4
10000f10:	103fe21e 	bne	r2,zero,10000e9c <transpose+0x1c>
		}
	}
}
10000f14:	0001883a 	nop
10000f18:	e037883a 	mov	sp,fp
10000f1c:	df000017 	ldw	fp,0(sp)
10000f20:	dec00104 	addi	sp,sp,4
10000f24:	f800283a 	ret

10000f28 <game_tick>:
 *      Author: leezi
 */
#include "core.h"
#include "hardware.h"

void game_tick() {
10000f28:	deffff04 	addi	sp,sp,-4
10000f2c:	df000015 	stw	fp,0(sp)
10000f30:	d839883a 	mov	fp,sp
	palette_ptr[0b00000] = 0x000000;	// Pure black
10000f34:	00802004 	movi	r2,128
10000f38:	10000015 	stw	zero,0(r2)
	palette_ptr[0b00011] = 0xFFFFFF;	// Pure white
10000f3c:	00c02304 	movi	r3,140
10000f40:	00804034 	movhi	r2,256
10000f44:	10bfffc4 	addi	r2,r2,-1
10000f48:	18800015 	stw	r2,0(r3)

	tiletable_ptr[0x00100010] = 0b00000000001;
10000f4c:	00801074 	movhi	r2,65
10000f50:	10801004 	addi	r2,r2,64
10000f54:	00c00044 	movi	r3,1
10000f58:	10c00015 	stw	r3,0(r2)
}
10000f5c:	0001883a 	nop
10000f60:	e037883a 	mov	sp,fp
10000f64:	df000017 	ldw	fp,0(sp)
10000f68:	dec00104 	addi	sp,sp,4
10000f6c:	f800283a 	ret

10000f70 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000f70:	deffff04 	addi	sp,sp,-4
10000f74:	df000015 	stw	fp,0(sp)
10000f78:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000f7c:	00801404 	movi	r2,80
10000f80:	00c00044 	movi	r3,1
10000f84:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000f88:	00801804 	movi	r2,96
10000f8c:	00c00044 	movi	r3,1
10000f90:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000f94:	00802004 	movi	r2,128
10000f98:	00c00044 	movi	r3,1
10000f9c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000fa0:	00801c04 	movi	r2,112
10000fa4:	00c00044 	movi	r3,1
10000fa8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000fac:	00801004 	movi	r2,64
10000fb0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000fb4:	00802804 	movi	r2,160
10000fb8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000fbc:	00801804 	movi	r2,96
10000fc0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10000fc4:	00801404 	movi	r2,80
10000fc8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000fcc:	00801404 	movi	r2,80
10000fd0:	00c00044 	movi	r3,1
10000fd4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000fd8:	00801804 	movi	r2,96
10000fdc:	00c00044 	movi	r3,1
10000fe0:	10c00005 	stb	r3,0(r2)
}
10000fe4:	0001883a 	nop
10000fe8:	e037883a 	mov	sp,fp
10000fec:	df000017 	ldw	fp,0(sp)
10000ff0:	dec00104 	addi	sp,sp,4
10000ff4:	f800283a 	ret

10000ff8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000ff8:	defffd04 	addi	sp,sp,-12
10000ffc:	df000215 	stw	fp,8(sp)
10001000:	df000204 	addi	fp,sp,8
10001004:	2005883a 	mov	r2,r4
10001008:	2807883a 	mov	r3,r5
1000100c:	e0bfff05 	stb	r2,-4(fp)
10001010:	1805883a 	mov	r2,r3
10001014:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10001018:	00801004 	movi	r2,64
1000101c:	e0ffff03 	ldbu	r3,-4(fp)
10001020:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10001024:	00802804 	movi	r2,160
10001028:	e0fffe0b 	ldhu	r3,-8(fp)
1000102c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10001030:	00801804 	movi	r2,96
10001034:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10001038:	00801c04 	movi	r2,112
1000103c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10001040:	00801c04 	movi	r2,112
10001044:	00c00044 	movi	r3,1
10001048:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000104c:	00801804 	movi	r2,96
10001050:	00c00044 	movi	r3,1
10001054:	10c00005 	stb	r3,0(r2)
	//printf("Wrote %x to HPI %d\n", Data, Address);
}
10001058:	0001883a 	nop
1000105c:	e037883a 	mov	sp,fp
10001060:	df000017 	ldw	fp,0(sp)
10001064:	dec00104 	addi	sp,sp,4
10001068:	f800283a 	ret

1000106c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000106c:	defffd04 	addi	sp,sp,-12
10001070:	df000215 	stw	fp,8(sp)
10001074:	df000204 	addi	fp,sp,8
10001078:	2005883a 	mov	r2,r4
1000107c:	e0bffe05 	stb	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10001080:	00801004 	movi	r2,64
10001084:	e0fffe03 	ldbu	r3,-8(fp)
10001088:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000108c:	00801804 	movi	r2,96
10001090:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10001094:	00802004 	movi	r2,128
10001098:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
1000109c:	00802804 	movi	r2,160
100010a0:	10800017 	ldw	r2,0(r2)
100010a4:	e0bfff8d 	sth	r2,-2(fp)
	*otg_hpi_r = 1;
100010a8:	00802004 	movi	r2,128
100010ac:	00c00044 	movi	r3,1
100010b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100010b4:	00801804 	movi	r2,96
100010b8:	00c00044 	movi	r3,1
100010bc:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	//printf("Read %x from HPI %d\n", temp, Address);
	return temp;
100010c0:	e0bfff8b 	ldhu	r2,-2(fp)
}
100010c4:	e037883a 	mov	sp,fp
100010c8:	df000017 	ldw	fp,0(sp)
100010cc:	dec00104 	addi	sp,sp,4
100010d0:	f800283a 	ret

100010d4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100010d4:	defff904 	addi	sp,sp,-28
100010d8:	dfc00615 	stw	ra,24(sp)
100010dc:	df000515 	stw	fp,20(sp)
100010e0:	df000504 	addi	fp,sp,20
	game_tick();
100010e4:	0000f280 	call	10000f28 <game_tick>
	IO_init();
100010e8:	0000f700 	call	10000f70 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100010ec:	e03ffe8d 	sth	zero,-6(fp)
	int keycode = 0;
100010f0:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100010f4:	e03fff45 	stb	zero,-3(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100010f8:	01040074 	movhi	r4,4097
100010fc:	21081f04 	addi	r4,r4,8316
10001100:	000327c0 	call	1000327c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10001104:	0001f100 	call	10001f10 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001108:	000b883a 	mov	r5,zero
1000110c:	01005104 	movi	r4,324
10001110:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001114:	017fffd4 	movui	r5,65535
10001118:	01302414 	movui	r4,49296
1000111c:	0001e700 	call	10001e70 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10001120:	01409604 	movi	r5,600
10001124:	01006d04 	movi	r4,436
10001128:	0001e700 	call	10001e70 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
1000112c:	00811004 	movi	r2,1088
10001130:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10001134:	e0bfff8b 	ldhu	r2,-2(fp)
10001138:	100b883a 	mov	r5,r2
1000113c:	01005084 	movi	r4,322
10001140:	0001e700 	call	10001e70 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10001144:	00808404 	movi	r2,528
10001148:	e0bffc8d 	sth	r2,-14(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000114c:	e0bffc8b 	ldhu	r2,-14(fp)
10001150:	100b883a 	mov	r5,r2
10001154:	01302314 	movui	r4,49292
10001158:	0001e700 	call	10001e70 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
1000115c:	000b883a 	mov	r5,zero
10001160:	01007104 	movi	r4,452
10001164:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10001168:	000b883a 	mov	r5,zero
1000116c:	01007184 	movi	r4,454
10001170:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10001174:	000b883a 	mov	r5,zero
10001178:	01007204 	movi	r4,456
1000117c:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10001180:	000b883a 	mov	r5,zero
10001184:	01007284 	movi	r4,458
10001188:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000118c:	000b883a 	mov	r5,zero
10001190:	01007304 	movi	r4,460
10001194:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10001198:	000b883a 	mov	r5,zero
1000119c:	01007384 	movi	r4,462
100011a0:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100011a4:	000b883a 	mov	r5,zero
100011a8:	01007404 	movi	r4,464
100011ac:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100011b0:	000b883a 	mov	r5,zero
100011b4:	01007484 	movi	r4,466
100011b8:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100011bc:	000b883a 	mov	r5,zero
100011c0:	01007504 	movi	r4,468
100011c4:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100011c8:	000b883a 	mov	r5,zero
100011cc:	01007584 	movi	r4,470
100011d0:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100011d4:	000b883a 	mov	r5,zero
100011d8:	01007604 	movi	r4,472
100011dc:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100011e0:	000b883a 	mov	r5,zero
100011e4:	01007684 	movi	r4,474
100011e8:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100011ec:	000b883a 	mov	r5,zero
100011f0:	01007704 	movi	r4,476
100011f4:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100011f8:	000b883a 	mov	r5,zero
100011fc:	01007784 	movi	r4,478
10001200:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10001204:	01401c84 	movi	r5,114
10001208:	01007084 	movi	r4,450
1000120c:	0001e700 	call	10001e70 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10001210:	01738054 	movui	r5,52737
10001214:	01000044 	movi	r4,1
10001218:	0000ff80 	call	10000ff8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
1000121c:	0001883a 	nop
10001220:	010000c4 	movi	r4,3
10001224:	000106c0 	call	1000106c <IO_read>
10001228:	10bfffcc 	andi	r2,r2,65535
1000122c:	103ffc26 	beq	r2,zero,10001220 <main+0x14c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001230:	00000806 	br	10001254 <main+0x180>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10001234:	01000044 	movi	r4,1
10001238:	000106c0 	call	1000106c <IO_read>
1000123c:	10bfffcc 	andi	r2,r2,65535
10001240:	100b883a 	mov	r5,r2
10001244:	01040074 	movhi	r4,4097
10001248:	21082504 	addi	r4,r4,8340
1000124c:	00031780 	call	10003178 <printf>
		goto USB_HOT_PLUG;
10001250:	003fac06 	br	10001104 <main+0x30>
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001254:	01000044 	movi	r4,1
10001258:	000106c0 	call	1000106c <IO_read>
1000125c:	10bfffcc 	andi	r2,r2,65535
10001260:	1083fb58 	cmpnei	r2,r2,4077
10001264:	103ff31e 	bne	r2,zero,10001234 <main+0x160>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10001268:	01040074 	movhi	r4,4097
1000126c:	21082e04 	addi	r4,r4,8376
10001270:	00031780 	call	10003178 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10001274:	01401d04 	movi	r5,116
10001278:	01007084 	movi	r4,450
1000127c:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10001280:	01400f04 	movi	r5,60
10001284:	01007104 	movi	r4,452
10001288:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000128c:	000b883a 	mov	r5,zero
10001290:	01007184 	movi	r4,454
10001294:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10001298:	000b883a 	mov	r5,zero
1000129c:	01007204 	movi	r4,456
100012a0:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100012a4:	000b883a 	mov	r5,zero
100012a8:	01007284 	movi	r4,458
100012ac:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100012b0:	000b883a 	mov	r5,zero
100012b4:	01007304 	movi	r4,460
100012b8:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100012bc:	000b883a 	mov	r5,zero
100012c0:	01007384 	movi	r4,462
100012c4:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100012c8:	000b883a 	mov	r5,zero
100012cc:	01007404 	movi	r4,464
100012d0:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100012d4:	000b883a 	mov	r5,zero
100012d8:	01007484 	movi	r4,466
100012dc:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100012e0:	000b883a 	mov	r5,zero
100012e4:	01007504 	movi	r4,468
100012e8:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100012ec:	000b883a 	mov	r5,zero
100012f0:	01007584 	movi	r4,470
100012f4:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100012f8:	000b883a 	mov	r5,zero
100012fc:	01007604 	movi	r4,472
10001300:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10001304:	000b883a 	mov	r5,zero
10001308:	01007684 	movi	r4,474
1000130c:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10001310:	000b883a 	mov	r5,zero
10001314:	01007704 	movi	r4,476
10001318:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000131c:	000b883a 	mov	r5,zero
10001320:	01007784 	movi	r4,478
10001324:	0001e700 	call	10001e70 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10001328:	01738054 	movui	r5,52737
1000132c:	01000044 	movi	r4,1
10001330:	0000ff80 	call	10000ff8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10001334:	0001883a 	nop
10001338:	01000044 	movi	r4,1
1000133c:	000106c0 	call	1000106c <IO_read>
10001340:	10bfffcc 	andi	r2,r2,65535
10001344:	1083fb58 	cmpnei	r2,r2,4077
10001348:	10000826 	beq	r2,zero,1000136c <main+0x298>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000134c:	01000044 	movi	r4,1
10001350:	000106c0 	call	1000106c <IO_read>
10001354:	10bfffcc 	andi	r2,r2,65535
10001358:	100b883a 	mov	r5,r2
1000135c:	01040074 	movhi	r4,4097
10001360:	21082504 	addi	r4,r4,8340
10001364:	00031780 	call	10003178 <printf>
		goto USB_HOT_PLUG;
10001368:	003f6606 	br	10001104 <main+0x30>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
1000136c:	00b02284 	movi	r2,-16246
10001370:	d0a8960d 	sth	r2,-23976(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10001374:	008c0004 	movi	r2,12288
10001378:	d0a8968d 	sth	r2,-23974(gp)
	fs_device = A_DP_STAT;
1000137c:	00880004 	movi	r2,8192
10001380:	e0bffe8d 	sth	r2,-6(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10001384:	d0a8960b 	ldhu	r2,-23976(gp)
10001388:	10bfffcc 	andi	r2,r2,65535
1000138c:	1009883a 	mov	r4,r2
10001390:	0001ecc0 	call	10001ecc <UsbRead>
10001394:	e0bfff8d 	sth	r2,-2(fp)

	if (!(usb_ctl_val & no_device))
10001398:	d0a8968b 	ldhu	r2,-23974(gp)
1000139c:	e0ffff8b 	ldhu	r3,-2(fp)
100013a0:	1884703a 	and	r2,r3,r2
100013a4:	10bfffcc 	andi	r2,r2,65535
100013a8:	1000351e 	bne	r2,zero,10001480 <main+0x3ac>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100013ac:	e03fff05 	stb	zero,-4(fp)
100013b0:	00000f06 	br	100013f0 <main+0x31c>
		{
			usleep(5*1000);
100013b4:	0104e204 	movi	r4,5000
100013b8:	000fea40 	call	1000fea4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013bc:	d0a8960b 	ldhu	r2,-23976(gp)
100013c0:	10bfffcc 	andi	r2,r2,65535
100013c4:	1009883a 	mov	r4,r2
100013c8:	0001ecc0 	call	10001ecc <UsbRead>
100013cc:	e0bfff8d 	sth	r2,-2(fp)
			if(usb_ctl_val & no_device) break;
100013d0:	d0a8968b 	ldhu	r2,-23974(gp)
100013d4:	e0ffff8b 	ldhu	r3,-2(fp)
100013d8:	1884703a 	and	r2,r3,r2
100013dc:	10bfffcc 	andi	r2,r2,65535
100013e0:	1000071e 	bne	r2,zero,10001400 <main+0x32c>
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100013e4:	e0bfff03 	ldbu	r2,-4(fp)
100013e8:	10800044 	addi	r2,r2,1
100013ec:	e0bfff05 	stb	r2,-4(fp)
100013f0:	e0bfff03 	ldbu	r2,-4(fp)
100013f4:	10800170 	cmpltui	r2,r2,5
100013f8:	103fee1e 	bne	r2,zero,100013b4 <main+0x2e0>
100013fc:	00000106 	br	10001404 <main+0x330>
			if(usb_ctl_val & no_device) break;
10001400:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10001404:	d0a8968b 	ldhu	r2,-23974(gp)
10001408:	e0ffff8b 	ldhu	r3,-2(fp)
1000140c:	1884703a 	and	r2,r3,r2
10001410:	10bfffcc 	andi	r2,r2,65535
10001414:	1000261e 	bne	r2,zero,100014b0 <main+0x3dc>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10001418:	01040074 	movhi	r4,4097
1000141c:	21083204 	addi	r4,r4,8392
10001420:	000327c0 	call	1000327c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10001424:	01040074 	movhi	r4,4097
10001428:	21083c04 	addi	r4,r4,8432
1000142c:	000327c0 	call	1000327c <puts>
			while (!(usb_ctl_val & no_device))
10001430:	00000d06 	br	10001468 <main+0x394>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10001434:	d0a8960b 	ldhu	r2,-23976(gp)
10001438:	10bfffcc 	andi	r2,r2,65535
1000143c:	1009883a 	mov	r4,r2
10001440:	0001ecc0 	call	10001ecc <UsbRead>
10001444:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device)
10001448:	d0a8968b 	ldhu	r2,-23974(gp)
1000144c:	e0ffff8b 	ldhu	r3,-2(fp)
10001450:	1884703a 	and	r2,r3,r2
10001454:	10bfffcc 	andi	r2,r2,65535
10001458:	10000126 	beq	r2,zero,10001460 <main+0x38c>
					goto USB_HOT_PLUG;
1000145c:	003f2906 	br	10001104 <main+0x30>

				usleep(2000);
10001460:	0101f404 	movi	r4,2000
10001464:	000fea40 	call	1000fea4 <usleep>
			while (!(usb_ctl_val & no_device))
10001468:	d0a8968b 	ldhu	r2,-23974(gp)
1000146c:	e0ffff8b 	ldhu	r3,-2(fp)
10001470:	1884703a 	and	r2,r3,r2
10001474:	10bfffcc 	andi	r2,r2,65535
10001478:	103fee26 	beq	r2,zero,10001434 <main+0x360>
1000147c:	00000c06 	br	100014b0 <main+0x3dc>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10001480:	e0ffff8b 	ldhu	r3,-2(fp)
10001484:	e0bffe8b 	ldhu	r2,-6(fp)
10001488:	1884703a 	and	r2,r3,r2
1000148c:	10bfffcc 	andi	r2,r2,65535
10001490:	10000426 	beq	r2,zero,100014a4 <main+0x3d0>
		{
			printf("[INFO]: full speed device\n");
10001494:	01040074 	movhi	r4,4097
10001498:	21084804 	addi	r4,r4,8480
1000149c:	000327c0 	call	1000327c <puts>
100014a0:	00000306 	br	100014b0 <main+0x3dc>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100014a4:	01040074 	movhi	r4,4097
100014a8:	21084f04 	addi	r4,r4,8508
100014ac:	000327c0 	call	1000327c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100014b0:	0001fc40 	call	10001fc4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100014b4:	00000306 	br	100014c4 <main+0x3f0>
	{
		UsbSetAddress();
100014b8:	0001fc40 	call	10001fc4 <UsbSetAddress>
		usleep(10*1000);
100014bc:	0109c404 	movi	r4,10000
100014c0:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100014c4:	010000c4 	movi	r4,3
100014c8:	000106c0 	call	1000106c <IO_read>
100014cc:	10bfffcc 	andi	r2,r2,65535
100014d0:	1080040c 	andi	r2,r2,16
100014d4:	103ff826 	beq	r2,zero,100014b8 <main+0x3e4>
	}

	UsbWaitTDListDone();
100014d8:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100014dc:	01414184 	movi	r5,1286
100014e0:	01000084 	movi	r4,2
100014e4:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100014e8:	0009883a 	mov	r4,zero
100014ec:	000106c0 	call	1000106c <IO_read>
100014f0:	10bfffcc 	andi	r2,r2,65535
100014f4:	100b883a 	mov	r5,r2
100014f8:	01040074 	movhi	r4,4097
100014fc:	21085604 	addi	r4,r4,8536
10001500:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10001504:	01414204 	movi	r5,1288
10001508:	01000084 	movi	r4,2
1000150c:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001510:	0009883a 	mov	r4,zero
10001514:	000106c0 	call	1000106c <IO_read>
10001518:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000151c:	e0bfff8b 	ldhu	r2,-2(fp)
10001520:	100b883a 	mov	r5,r2
10001524:	01040074 	movhi	r4,4097
10001528:	21086104 	addi	r4,r4,8580
1000152c:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10001530:	e0bfff8b 	ldhu	r2,-2(fp)
10001534:	108000e0 	cmpeqi	r2,r2,3
10001538:	1000031e 	bne	r2,zero,10001548 <main+0x474>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000153c:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001540:	e0bfff8d 	sth	r2,-2(fp)

		goto USB_HOT_PLUG;
10001544:	003eef06 	br	10001104 <main+0x30>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10001548:	01040074 	movhi	r4,4097
1000154c:	21086d04 	addi	r4,r4,8628
10001550:	000327c0 	call	1000327c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10001554:	00020c40 	call	100020c4 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001558:	00000306 	br	10001568 <main+0x494>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000155c:	00020c40 	call	100020c4 <UsbGetDeviceDesc1>
		usleep(10*1000);
10001560:	0109c404 	movi	r4,10000
10001564:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001568:	010000c4 	movi	r4,3
1000156c:	000106c0 	call	1000106c <IO_read>
10001570:	10bfffcc 	andi	r2,r2,65535
10001574:	1080040c 	andi	r2,r2,16
10001578:	103ff826 	beq	r2,zero,1000155c <main+0x488>
	}

	UsbWaitTDListDone();
1000157c:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001580:	01414184 	movi	r5,1286
10001584:	01000084 	movi	r4,2
10001588:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000158c:	0009883a 	mov	r4,zero
10001590:	000106c0 	call	1000106c <IO_read>
10001594:	10bfffcc 	andi	r2,r2,65535
10001598:	100b883a 	mov	r5,r2
1000159c:	01040074 	movhi	r4,4097
100015a0:	21087c04 	addi	r4,r4,8688
100015a4:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
100015a8:	01414204 	movi	r5,1288
100015ac:	01000084 	movi	r4,2
100015b0:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100015b4:	0009883a 	mov	r4,zero
100015b8:	000106c0 	call	1000106c <IO_read>
100015bc:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100015c0:	e0bfff8b 	ldhu	r2,-2(fp)
100015c4:	100b883a 	mov	r5,r2
100015c8:	01040074 	movhi	r4,4097
100015cc:	21088704 	addi	r4,r4,8732
100015d0:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
100015d4:	e0bfff8b 	ldhu	r2,-2(fp)
100015d8:	108000e0 	cmpeqi	r2,r2,3
100015dc:	1000061e 	bne	r2,zero,100015f8 <main+0x524>
	{
		usb_ctl_val = UsbGetRetryCnt();
100015e0:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
100015e4:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100015e8:	01040074 	movhi	r4,4097
100015ec:	21089304 	addi	r4,r4,8780
100015f0:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
100015f4:	003ec306 	br	10001104 <main+0x30>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100015f8:	01040074 	movhi	r4,4097
100015fc:	21089c04 	addi	r4,r4,8816
10001600:	000327c0 	call	1000327c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10001604:	000220c0 	call	1000220c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001608:	00000306 	br	10001618 <main+0x544>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
1000160c:	000220c0 	call	1000220c <UsbGetDeviceDesc2>
		usleep(10*1000);
10001610:	0109c404 	movi	r4,10000
10001614:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001618:	010000c4 	movi	r4,3
1000161c:	000106c0 	call	1000106c <IO_read>
10001620:	10bfffcc 	andi	r2,r2,65535
10001624:	1080040c 	andi	r2,r2,16
10001628:	103ff826 	beq	r2,zero,1000160c <main+0x538>
	}

	UsbWaitTDListDone();
1000162c:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001630:	01414184 	movi	r5,1286
10001634:	01000084 	movi	r4,2
10001638:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000163c:	0009883a 	mov	r4,zero
10001640:	000106c0 	call	1000106c <IO_read>
10001644:	10bfffcc 	andi	r2,r2,65535
10001648:	100b883a 	mov	r5,r2
1000164c:	01040074 	movhi	r4,4097
10001650:	21087c04 	addi	r4,r4,8688
10001654:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
10001658:	01414204 	movi	r5,1288
1000165c:	01000084 	movi	r4,2
10001660:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001664:	0009883a 	mov	r4,zero
10001668:	000106c0 	call	1000106c <IO_read>
1000166c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10001670:	e0bfff8b 	ldhu	r2,-2(fp)
10001674:	100b883a 	mov	r5,r2
10001678:	01040074 	movhi	r4,4097
1000167c:	21088704 	addi	r4,r4,8732
10001680:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
10001684:	e0bfff8b 	ldhu	r2,-2(fp)
10001688:	108000e0 	cmpeqi	r2,r2,3
1000168c:	1000061e 	bne	r2,zero,100016a8 <main+0x5d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001690:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001694:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001698:	01040074 	movhi	r4,4097
1000169c:	21089304 	addi	r4,r4,8780
100016a0:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
100016a4:	003e9706 	br	10001104 <main+0x30>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100016a8:	01040074 	movhi	r4,4097
100016ac:	2108b004 	addi	r4,r4,8896
100016b0:	000327c0 	call	1000327c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100016b4:	00023e40 	call	100023e4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100016b8:	00000306 	br	100016c8 <main+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100016bc:	00023e40 	call	100023e4 <UsbGetConfigDesc1>
		usleep(10*1000);
100016c0:	0109c404 	movi	r4,10000
100016c4:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100016c8:	010000c4 	movi	r4,3
100016cc:	000106c0 	call	1000106c <IO_read>
100016d0:	10bfffcc 	andi	r2,r2,65535
100016d4:	1080040c 	andi	r2,r2,16
100016d8:	103ff826 	beq	r2,zero,100016bc <main+0x5e8>
	}

	UsbWaitTDListDone();
100016dc:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100016e0:	01414184 	movi	r5,1286
100016e4:	01000084 	movi	r4,2
100016e8:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100016ec:	0009883a 	mov	r4,zero
100016f0:	000106c0 	call	1000106c <IO_read>
100016f4:	10bfffcc 	andi	r2,r2,65535
100016f8:	100b883a 	mov	r5,r2
100016fc:	01040074 	movhi	r4,4097
10001700:	2108c204 	addi	r4,r4,8968
10001704:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
10001708:	01414204 	movi	r5,1288
1000170c:	01000084 	movi	r4,2
10001710:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001714:	0009883a 	mov	r4,zero
10001718:	000106c0 	call	1000106c <IO_read>
1000171c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10001720:	e0bfff8b 	ldhu	r2,-2(fp)
10001724:	100b883a 	mov	r5,r2
10001728:	01040074 	movhi	r4,4097
1000172c:	2108cd04 	addi	r4,r4,9012
10001730:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
10001734:	e0bfff8b 	ldhu	r2,-2(fp)
10001738:	108000e0 	cmpeqi	r2,r2,3
1000173c:	1000061e 	bne	r2,zero,10001758 <main+0x684>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001740:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001744:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001748:	01040074 	movhi	r4,4097
1000174c:	21089304 	addi	r4,r4,8780
10001750:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
10001754:	003e6b06 	br	10001104 <main+0x30>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10001758:	01040074 	movhi	r4,4097
1000175c:	2108d904 	addi	r4,r4,9060
10001760:	000327c0 	call	1000327c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10001764:	00025740 	call	10002574 <UsbGetConfigDesc2>

	usleep(100*1000);
10001768:	010000b4 	movhi	r4,2
1000176c:	2121a804 	addi	r4,r4,-31072
10001770:	000fea40 	call	1000fea4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001774:	00000306 	br	10001784 <main+0x6b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10001778:	00025740 	call	10002574 <UsbGetConfigDesc2>
		usleep(10*1000);
1000177c:	0109c404 	movi	r4,10000
10001780:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001784:	010000c4 	movi	r4,3
10001788:	000106c0 	call	1000106c <IO_read>
1000178c:	10bfffcc 	andi	r2,r2,65535
10001790:	1080040c 	andi	r2,r2,16
10001794:	103ff826 	beq	r2,zero,10001778 <main+0x6a4>
	}

	UsbWaitTDListDone();
10001798:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000179c:	01414184 	movi	r5,1286
100017a0:	01000084 	movi	r4,2
100017a4:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100017a8:	0009883a 	mov	r4,zero
100017ac:	000106c0 	call	1000106c <IO_read>
100017b0:	10bfffcc 	andi	r2,r2,65535
100017b4:	100b883a 	mov	r5,r2
100017b8:	01040074 	movhi	r4,4097
100017bc:	2108ec04 	addi	r4,r4,9136
100017c0:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
100017c4:	01414204 	movi	r5,1288
100017c8:	01000084 	movi	r4,2
100017cc:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100017d0:	0009883a 	mov	r4,zero
100017d4:	000106c0 	call	1000106c <IO_read>
100017d8:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
100017dc:	e0bfff8b 	ldhu	r2,-2(fp)
100017e0:	100b883a 	mov	r5,r2
100017e4:	01040074 	movhi	r4,4097
100017e8:	2108f704 	addi	r4,r4,9180
100017ec:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
100017f0:	e0bfff8b 	ldhu	r2,-2(fp)
100017f4:	108000e0 	cmpeqi	r2,r2,3
100017f8:	1000061e 	bne	r2,zero,10001814 <main+0x740>
	{
		usb_ctl_val = UsbGetRetryCnt();
100017fc:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001800:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001804:	01040074 	movhi	r4,4097
10001808:	21089304 	addi	r4,r4,8780
1000180c:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
10001810:	003e3c06 	br	10001104 <main+0x30>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10001814:	01040074 	movhi	r4,4097
10001818:	21090304 	addi	r4,r4,9228
1000181c:	000327c0 	call	1000327c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10001820:	01415b04 	movi	r5,1388
10001824:	01000084 	movi	r4,2
10001828:	0000ff80 	call	10000ff8 <IO_write>
	code = IO_read(HPI_DATA);
1000182c:	0009883a 	mov	r4,zero
10001830:	000106c0 	call	1000106c <IO_read>
10001834:	e0bffc0d 	sth	r2,-16(fp)
	code = code & 0x003;
10001838:	e0bffc0b 	ldhu	r2,-16(fp)
1000183c:	108000cc 	andi	r2,r2,3
10001840:	e0bffc0d 	sth	r2,-16(fp)
	printf("\ncode = %x\n", code);
10001844:	e0bffc0b 	ldhu	r2,-16(fp)
10001848:	100b883a 	mov	r5,r2
1000184c:	01040074 	movhi	r4,4097
10001850:	21091604 	addi	r4,r4,9304
10001854:	00031780 	call	10003178 <printf>

	if (code == 0x01)
10001858:	e0bffc0b 	ldhu	r2,-16(fp)
1000185c:	10800058 	cmpnei	r2,r2,1
10001860:	1000041e 	bne	r2,zero,10001874 <main+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10001864:	01040074 	movhi	r4,4097
10001868:	21091904 	addi	r4,r4,9316
1000186c:	000327c0 	call	1000327c <puts>
10001870:	00000306 	br	10001880 <main+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10001874:	01040074 	movhi	r4,4097
10001878:	21092804 	addi	r4,r4,9376
1000187c:	000327c0 	call	1000327c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10001880:	01415d84 	movi	r5,1398
10001884:	01000084 	movi	r4,2
10001888:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x073F);
1000188c:	0141cfc4 	movi	r5,1855
10001890:	0009883a 	mov	r4,zero
10001894:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x8105);
10001898:	01604154 	movui	r5,33029
1000189c:	0009883a 	mov	r4,zero
100018a0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0003);
100018a4:	014000c4 	movi	r5,3
100018a8:	0009883a 	mov	r4,zero
100018ac:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);
100018b0:	01400204 	movi	r5,8
100018b4:	0009883a 	mov	r4,zero
100018b8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
100018bc:	016b0294 	movui	r5,44042
100018c0:	0009883a 	mov	r4,zero
100018c4:	0000ff80 	call	10000ff8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
100018c8:	01415d84 	movi	r5,1398
100018cc:	01006c04 	movi	r4,432
100018d0:	0001e700 	call	10001e70 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
100018d4:	01415f04 	movi	r5,1404
100018d8:	01000084 	movi	r4,2
100018dc:	0000ff80 	call	10000ff8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
100018e0:	0009883a 	mov	r4,zero
100018e4:	000106c0 	call	1000106c <IO_read>
100018e8:	e0bffbc5 	stb	r2,-17(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
100018ec:	e0bffbc3 	ldbu	r2,-17(fp)
100018f0:	100b883a 	mov	r5,r2
100018f4:	01040074 	movhi	r4,4097
100018f8:	21093104 	addi	r4,r4,9412
100018fc:	00031780 	call	10003178 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10001900:	00027dc0 	call	100027dc <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001904:	00000306 	br	10001914 <main+0x840>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10001908:	00027dc0 	call	100027dc <UsbSetConfig>
		usleep(10*1000);
1000190c:	0109c404 	movi	r4,10000
10001910:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001914:	010000c4 	movi	r4,3
10001918:	000106c0 	call	1000106c <IO_read>
1000191c:	10bfffcc 	andi	r2,r2,65535
10001920:	1080040c 	andi	r2,r2,16
10001924:	103ff826 	beq	r2,zero,10001908 <main+0x834>
	}

	UsbWaitTDListDone();
10001928:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000192c:	01414184 	movi	r5,1286
10001930:	01000084 	movi	r4,2
10001934:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001938:	0009883a 	mov	r4,zero
1000193c:	000106c0 	call	1000106c <IO_read>
10001940:	10bfffcc 	andi	r2,r2,65535
10001944:	100b883a 	mov	r5,r2
10001948:	01040074 	movhi	r4,4097
1000194c:	21093b04 	addi	r4,r4,9452
10001950:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
10001954:	01414204 	movi	r5,1288
10001958:	01000084 	movi	r4,2
1000195c:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001960:	0009883a 	mov	r4,zero
10001964:	000106c0 	call	1000106c <IO_read>
10001968:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
1000196c:	e0bfff8b 	ldhu	r2,-2(fp)
10001970:	100b883a 	mov	r5,r2
10001974:	01040074 	movhi	r4,4097
10001978:	21094604 	addi	r4,r4,9496
1000197c:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
10001980:	e0bfff8b 	ldhu	r2,-2(fp)
10001984:	108000e0 	cmpeqi	r2,r2,3
10001988:	1000061e 	bne	r2,zero,100019a4 <main+0x8d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000198c:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001990:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001994:	01040074 	movhi	r4,4097
10001998:	21089304 	addi	r4,r4,8780
1000199c:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
100019a0:	003dd806 	br	10001104 <main+0x30>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
100019a4:	01040074 	movhi	r4,4097
100019a8:	21095204 	addi	r4,r4,9544
100019ac:	000327c0 	call	1000327c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
100019b0:	00028dc0 	call	100028dc <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100019b4:	00000306 	br	100019c4 <main+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
100019b8:	00028dc0 	call	100028dc <UsbClassRequest>
		usleep(10*1000);
100019bc:	0109c404 	movi	r4,10000
100019c0:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100019c4:	010000c4 	movi	r4,3
100019c8:	000106c0 	call	1000106c <IO_read>
100019cc:	10bfffcc 	andi	r2,r2,65535
100019d0:	1080040c 	andi	r2,r2,16
100019d4:	103ff826 	beq	r2,zero,100019b8 <main+0x8e4>
	}

	UsbWaitTDListDone();
100019d8:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100019dc:	01414184 	movi	r5,1286
100019e0:	01000084 	movi	r4,2
100019e4:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100019e8:	0009883a 	mov	r4,zero
100019ec:	000106c0 	call	1000106c <IO_read>
100019f0:	10bfffcc 	andi	r2,r2,65535
100019f4:	100b883a 	mov	r5,r2
100019f8:	01040074 	movhi	r4,4097
100019fc:	21096404 	addi	r4,r4,9616
10001a00:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
10001a04:	01414204 	movi	r5,1288
10001a08:	01000084 	movi	r4,2
10001a0c:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001a10:	0009883a 	mov	r4,zero
10001a14:	000106c0 	call	1000106c <IO_read>
10001a18:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001a1c:	e0bfff8b 	ldhu	r2,-2(fp)
10001a20:	100b883a 	mov	r5,r2
10001a24:	01040074 	movhi	r4,4097
10001a28:	21096f04 	addi	r4,r4,9660
10001a2c:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
10001a30:	e0bfff8b 	ldhu	r2,-2(fp)
10001a34:	108000e0 	cmpeqi	r2,r2,3
10001a38:	1000061e 	bne	r2,zero,10001a54 <main+0x980>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001a3c:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001a40:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001a44:	01040074 	movhi	r4,4097
10001a48:	21089304 	addi	r4,r4,8780
10001a4c:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
10001a50:	003dac06 	br	10001104 <main+0x30>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10001a54:	01040074 	movhi	r4,4097
10001a58:	21097b04 	addi	r4,r4,9708
10001a5c:	000327c0 	call	1000327c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10001a60:	00029dc0 	call	100029dc <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001a64:	00000306 	br	10001a74 <main+0x9a0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10001a68:	00029dc0 	call	100029dc <UsbGetHidDesc>
		usleep(10*1000);
10001a6c:	0109c404 	movi	r4,10000
10001a70:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001a74:	010000c4 	movi	r4,3
10001a78:	000106c0 	call	1000106c <IO_read>
10001a7c:	10bfffcc 	andi	r2,r2,65535
10001a80:	1080040c 	andi	r2,r2,16
10001a84:	103ff826 	beq	r2,zero,10001a68 <main+0x994>
	}

	UsbWaitTDListDone();
10001a88:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001a8c:	01414184 	movi	r5,1286
10001a90:	01000084 	movi	r4,2
10001a94:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001a98:	0009883a 	mov	r4,zero
10001a9c:	000106c0 	call	1000106c <IO_read>
10001aa0:	10bfffcc 	andi	r2,r2,65535
10001aa4:	100b883a 	mov	r5,r2
10001aa8:	01040074 	movhi	r4,4097
10001aac:	21096404 	addi	r4,r4,9616
10001ab0:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
10001ab4:	01414204 	movi	r5,1288
10001ab8:	01000084 	movi	r4,2
10001abc:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001ac0:	0009883a 	mov	r4,zero
10001ac4:	000106c0 	call	1000106c <IO_read>
10001ac8:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001acc:	e0bfff8b 	ldhu	r2,-2(fp)
10001ad0:	100b883a 	mov	r5,r2
10001ad4:	01040074 	movhi	r4,4097
10001ad8:	21096f04 	addi	r4,r4,9660
10001adc:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
10001ae0:	e0bfff8b 	ldhu	r2,-2(fp)
10001ae4:	108000e0 	cmpeqi	r2,r2,3
10001ae8:	1000061e 	bne	r2,zero,10001b04 <main+0xa30>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001aec:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001af0:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001af4:	01040074 	movhi	r4,4097
10001af8:	21089304 	addi	r4,r4,8780
10001afc:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
10001b00:	003d8006 	br	10001104 <main+0x30>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10001b04:	01040074 	movhi	r4,4097
10001b08:	21098d04 	addi	r4,r4,9780
10001b0c:	000327c0 	call	1000327c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10001b10:	0002b240 	call	10002b24 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001b14:	00000306 	br	10001b24 <main+0xa50>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10001b18:	0002b240 	call	10002b24 <UsbGetReportDesc>
		usleep(10*1000);
10001b1c:	0109c404 	movi	r4,10000
10001b20:	000fea40 	call	1000fea4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001b24:	010000c4 	movi	r4,3
10001b28:	000106c0 	call	1000106c <IO_read>
10001b2c:	10bfffcc 	andi	r2,r2,65535
10001b30:	1080040c 	andi	r2,r2,16
10001b34:	103ff826 	beq	r2,zero,10001b18 <main+0xa44>
	}

	UsbWaitTDListDone();
10001b38:	0002e640 	call	10002e64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001b3c:	01414184 	movi	r5,1286
10001b40:	01000084 	movi	r4,2
10001b44:	0000ff80 	call	10000ff8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001b48:	0009883a 	mov	r4,zero
10001b4c:	000106c0 	call	1000106c <IO_read>
10001b50:	10bfffcc 	andi	r2,r2,65535
10001b54:	100b883a 	mov	r5,r2
10001b58:	01040074 	movhi	r4,4097
10001b5c:	2109a104 	addi	r4,r4,9860
10001b60:	00031780 	call	10003178 <printf>

	IO_write(HPI_ADDR,0x0508);
10001b64:	01414204 	movi	r5,1288
10001b68:	01000084 	movi	r4,2
10001b6c:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001b70:	0009883a 	mov	r4,zero
10001b74:	000106c0 	call	1000106c <IO_read>
10001b78:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10001b7c:	e0bfff8b 	ldhu	r2,-2(fp)
10001b80:	100b883a 	mov	r5,r2
10001b84:	01040074 	movhi	r4,4097
10001b88:	2109ad04 	addi	r4,r4,9908
10001b8c:	00031780 	call	10003178 <printf>
	while (usb_ctl_val != 0x03)
10001b90:	e0bfff8b 	ldhu	r2,-2(fp)
10001b94:	108000e0 	cmpeqi	r2,r2,3
10001b98:	1000061e 	bne	r2,zero,10001bb4 <main+0xae0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001b9c:	0002ee80 	call	10002ee8 <UsbGetRetryCnt>
10001ba0:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001ba4:	01040074 	movhi	r4,4097
10001ba8:	21089304 	addi	r4,r4,8780
10001bac:	000327c0 	call	1000327c <puts>
		goto USB_HOT_PLUG;
10001bb0:	003d5406 	br	10001104 <main+0x30>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10001bb4:	01040074 	movhi	r4,4097
10001bb8:	2109b904 	addi	r4,r4,9956
10001bbc:	000327c0 	call	1000327c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10001bc0:	0109c404 	movi	r4,10000
10001bc4:	000fea40 	call	1000fea4 <usleep>
	while(1)
	{
		toggle++;
10001bc8:	e0bfff43 	ldbu	r2,-3(fp)
10001bcc:	10800044 	addi	r2,r2,1
10001bd0:	e0bfff45 	stb	r2,-3(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10001bd4:	01414004 	movi	r5,1280
10001bd8:	01000084 	movi	r4,2
10001bdc:	0000ff80 	call	10000ff8 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001be0:	01414704 	movi	r5,1308
10001be4:	0009883a 	mov	r4,zero
10001be8:	0000ff80 	call	10000ff8 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001bec:	e0bffbc3 	ldbu	r2,-17(fp)
10001bf0:	108003cc 	andi	r2,r2,15
10001bf4:	100b883a 	mov	r5,r2
10001bf8:	0009883a 	mov	r4,zero
10001bfc:	0000ff80 	call	10000ff8 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001c00:	0140a444 	movi	r5,657
10001c04:	0009883a 	mov	r4,zero
10001c08:	0000ff80 	call	10000ff8 <IO_write>
		if(toggle%2)
10001c0c:	e0bfff43 	ldbu	r2,-3(fp)
10001c10:	1080004c 	andi	r2,r2,1
10001c14:	10803fcc 	andi	r2,r2,255
10001c18:	10000426 	beq	r2,zero,10001c2c <main+0xb58>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10001c1c:	01400044 	movi	r5,1
10001c20:	0009883a 	mov	r4,zero
10001c24:	0000ff80 	call	10000ff8 <IO_write>
10001c28:	00000306 	br	10001c38 <main+0xb64>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10001c2c:	01401044 	movi	r5,65
10001c30:	0009883a 	mov	r4,zero
10001c34:	0000ff80 	call	10000ff8 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10001c38:	014004c4 	movi	r5,19
10001c3c:	0009883a 	mov	r4,zero
10001c40:	0000ff80 	call	10000ff8 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10001c44:	000b883a 	mov	r5,zero
10001c48:	0009883a 	mov	r4,zero
10001c4c:	0000ff80 	call	10000ff8 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c50:	01414004 	movi	r5,1280
10001c54:	01006c04 	movi	r4,432
10001c58:	0001e700 	call	10001e70 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001c5c:	00002406 	br	10001cf0 <main+0xc1c>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001c60:	01414004 	movi	r5,1280
10001c64:	01000084 	movi	r4,2
10001c68:	0000ff80 	call	10000ff8 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10001c6c:	01414704 	movi	r5,1308
10001c70:	0009883a 	mov	r4,zero
10001c74:	0000ff80 	call	10000ff8 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001c78:	e0bffbc3 	ldbu	r2,-17(fp)
10001c7c:	108003cc 	andi	r2,r2,15
10001c80:	100b883a 	mov	r5,r2
10001c84:	0009883a 	mov	r4,zero
10001c88:	0000ff80 	call	10000ff8 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001c8c:	0140a444 	movi	r5,657
10001c90:	0009883a 	mov	r4,zero
10001c94:	0000ff80 	call	10000ff8 <IO_write>
			if(toggle%2)
10001c98:	e0bfff43 	ldbu	r2,-3(fp)
10001c9c:	1080004c 	andi	r2,r2,1
10001ca0:	10803fcc 	andi	r2,r2,255
10001ca4:	10000426 	beq	r2,zero,10001cb8 <main+0xbe4>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001ca8:	01400044 	movi	r5,1
10001cac:	0009883a 	mov	r4,zero
10001cb0:	0000ff80 	call	10000ff8 <IO_write>
10001cb4:	00000306 	br	10001cc4 <main+0xbf0>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001cb8:	01401044 	movi	r5,65
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	0000ff80 	call	10000ff8 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001cc4:	014004c4 	movi	r5,19
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	0000ff80 	call	10000ff8 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001cd0:	000b883a 	mov	r5,zero
10001cd4:	0009883a 	mov	r4,zero
10001cd8:	0000ff80 	call	10000ff8 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cdc:	01414004 	movi	r5,1280
10001ce0:	01006c04 	movi	r4,432
10001ce4:	0001e700 	call	10001e70 <UsbWrite>
			usleep(10*1000);
10001ce8:	0109c404 	movi	r4,10000
10001cec:	000fea40 	call	1000fea4 <usleep>
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001cf0:	010000c4 	movi	r4,3
10001cf4:	000106c0 	call	1000106c <IO_read>
10001cf8:	10bfffcc 	andi	r2,r2,65535
10001cfc:	1080040c 	andi	r2,r2,16
10001d00:	103fd726 	beq	r2,zero,10001c60 <main+0xb8c>
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10001d04:	0002e640 	call	10002e64 <UsbWaitTDListDone>
10001d08:	e0bfff8d 	sth	r2,-2(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10001d0c:	01014784 	movi	r4,1310
10001d10:	0001ecc0 	call	10001ecc <UsbRead>
10001d14:	10bfffcc 	andi	r2,r2,65535
10001d18:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10001d1c:	e17ffd17 	ldw	r5,-12(fp)
10001d20:	01040074 	movhi	r4,4097
10001d24:	2109cd04 	addi	r4,r4,10036
10001d28:	00031780 	call	10003178 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		// *keycode_base = keycode & 0xff;

		usleep(200);//usleep(5000);
10001d2c:	01003204 	movi	r4,200
10001d30:	000fea40 	call	1000fea4 <usleep>

		// TODO Core game logic can be written here.

		usb_ctl_val = UsbRead(ctl_reg);
10001d34:	d0a8960b 	ldhu	r2,-23976(gp)
10001d38:	10bfffcc 	andi	r2,r2,65535
10001d3c:	1009883a 	mov	r4,r2
10001d40:	0001ecc0 	call	10001ecc <UsbRead>
10001d44:	e0bfff8d 	sth	r2,-2(fp)

		if(!(usb_ctl_val & no_device))
10001d48:	d0a8968b 	ldhu	r2,-23974(gp)
10001d4c:	e0ffff8b 	ldhu	r3,-2(fp)
10001d50:	1884703a 	and	r2,r3,r2
10001d54:	10bfffcc 	andi	r2,r2,65535
10001d58:	10003f1e 	bne	r2,zero,10001e58 <main+0xd84>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001d5c:	e03fff05 	stb	zero,-4(fp)
10001d60:	00000f06 	br	10001da0 <main+0xccc>
			{
				usleep(5*1000);
10001d64:	0104e204 	movi	r4,5000
10001d68:	000fea40 	call	1000fea4 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001d6c:	d0a8960b 	ldhu	r2,-23976(gp)
10001d70:	10bfffcc 	andi	r2,r2,65535
10001d74:	1009883a 	mov	r4,r2
10001d78:	0001ecc0 	call	10001ecc <UsbRead>
10001d7c:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device) break;
10001d80:	d0a8968b 	ldhu	r2,-23974(gp)
10001d84:	e0ffff8b 	ldhu	r3,-2(fp)
10001d88:	1884703a 	and	r2,r3,r2
10001d8c:	10bfffcc 	andi	r2,r2,65535
10001d90:	1000071e 	bne	r2,zero,10001db0 <main+0xcdc>
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001d94:	e0bfff03 	ldbu	r2,-4(fp)
10001d98:	10800044 	addi	r2,r2,1
10001d9c:	e0bfff05 	stb	r2,-4(fp)
10001da0:	e0bfff03 	ldbu	r2,-4(fp)
10001da4:	108001f0 	cmpltui	r2,r2,7
10001da8:	103fee1e 	bne	r2,zero,10001d64 <main+0xc90>
10001dac:	00000106 	br	10001db4 <main+0xce0>
				if(usb_ctl_val & no_device) break;
10001db0:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001db4:	d0a8968b 	ldhu	r2,-23974(gp)
10001db8:	e0ffff8b 	ldhu	r3,-2(fp)
10001dbc:	1884703a 	and	r2,r3,r2
10001dc0:	10bfffcc 	andi	r2,r2,65535
10001dc4:	1000241e 	bne	r2,zero,10001e58 <main+0xd84>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001dc8:	01040074 	movhi	r4,4097
10001dcc:	2109d604 	addi	r4,r4,10072
10001dd0:	000327c0 	call	1000327c <puts>
				printf("[INFO]: please insert again!!! \n");
10001dd4:	01040074 	movhi	r4,4097
10001dd8:	2109e104 	addi	r4,r4,10116
10001ddc:	000327c0 	call	1000327c <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001de0:	00001d06 	br	10001e58 <main+0xd84>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001de4:	d0a8960b 	ldhu	r2,-23976(gp)
10001de8:	10bfffcc 	andi	r2,r2,65535
10001dec:	1009883a 	mov	r4,r2
10001df0:	0001ecc0 	call	10001ecc <UsbRead>
10001df4:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001df8:	0104e204 	movi	r4,5000
10001dfc:	000fea40 	call	1000fea4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001e00:	d0a8960b 	ldhu	r2,-23976(gp)
10001e04:	10bfffcc 	andi	r2,r2,65535
10001e08:	1009883a 	mov	r4,r2
10001e0c:	0001ecc0 	call	10001ecc <UsbRead>
10001e10:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001e14:	0104e204 	movi	r4,5000
10001e18:	000fea40 	call	1000fea4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001e1c:	d0a8960b 	ldhu	r2,-23976(gp)
10001e20:	10bfffcc 	andi	r2,r2,65535
10001e24:	1009883a 	mov	r4,r2
10001e28:	0001ecc0 	call	10001ecc <UsbRead>
10001e2c:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001e30:	0104e204 	movi	r4,5000
10001e34:	000fea40 	call	1000fea4 <usleep>

			if(usb_ctl_val & no_device)
10001e38:	d0a8968b 	ldhu	r2,-23974(gp)
10001e3c:	e0ffff8b 	ldhu	r3,-2(fp)
10001e40:	1884703a 	and	r2,r3,r2
10001e44:	10bfffcc 	andi	r2,r2,65535
10001e48:	10000126 	beq	r2,zero,10001e50 <main+0xd7c>
				goto USB_HOT_PLUG;
10001e4c:	003cad06 	br	10001104 <main+0x30>

			usleep(200);
10001e50:	01003204 	movi	r4,200
10001e54:	000fea40 	call	1000fea4 <usleep>
		while (!(usb_ctl_val & no_device))
10001e58:	d0a8968b 	ldhu	r2,-23974(gp)
10001e5c:	e0ffff8b 	ldhu	r3,-2(fp)
10001e60:	1884703a 	and	r2,r3,r2
10001e64:	10bfffcc 	andi	r2,r2,65535
10001e68:	103fde26 	beq	r2,zero,10001de4 <main+0xd10>
		toggle++;
10001e6c:	003f5606 	br	10001bc8 <main+0xaf4>

10001e70 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001e70:	defffc04 	addi	sp,sp,-16
10001e74:	dfc00315 	stw	ra,12(sp)
10001e78:	df000215 	stw	fp,8(sp)
10001e7c:	df000204 	addi	fp,sp,8
10001e80:	2005883a 	mov	r2,r4
10001e84:	2807883a 	mov	r3,r5
10001e88:	e0bfff0d 	sth	r2,-4(fp)
10001e8c:	1805883a 	mov	r2,r3
10001e90:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001e94:	e0bfff0b 	ldhu	r2,-4(fp)
10001e98:	100b883a 	mov	r5,r2
10001e9c:	01000084 	movi	r4,2
10001ea0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA, Data);
10001ea4:	e0bffe0b 	ldhu	r2,-8(fp)
10001ea8:	100b883a 	mov	r5,r2
10001eac:	0009883a 	mov	r4,zero
10001eb0:	0000ff80 	call	10000ff8 <IO_write>
}
10001eb4:	0001883a 	nop
10001eb8:	e037883a 	mov	sp,fp
10001ebc:	dfc00117 	ldw	ra,4(sp)
10001ec0:	df000017 	ldw	fp,0(sp)
10001ec4:	dec00204 	addi	sp,sp,8
10001ec8:	f800283a 	ret

10001ecc <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001ecc:	defffd04 	addi	sp,sp,-12
10001ed0:	dfc00215 	stw	ra,8(sp)
10001ed4:	df000115 	stw	fp,4(sp)
10001ed8:	df000104 	addi	fp,sp,4
10001edc:	2005883a 	mov	r2,r4
10001ee0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001ee4:	e0bfff0b 	ldhu	r2,-4(fp)
10001ee8:	100b883a 	mov	r5,r2
10001eec:	01000084 	movi	r4,2
10001ef0:	0000ff80 	call	10000ff8 <IO_write>
	return IO_read(HPI_DATA);
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	000106c0 	call	1000106c <IO_read>
}
10001efc:	e037883a 	mov	sp,fp
10001f00:	dfc00117 	ldw	ra,4(sp)
10001f04:	df000017 	ldw	fp,0(sp)
10001f08:	dec00204 	addi	sp,sp,8
10001f0c:	f800283a 	ret

10001f10 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001f10:	defffe04 	addi	sp,sp,-8
10001f14:	dfc00115 	stw	ra,4(sp)
10001f18:	df000015 	stw	fp,0(sp)
10001f1c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001f20:	017e9414 	movui	r5,64080
10001f24:	01000044 	movi	r4,1
10001f28:	0000ff80 	call	10000ff8 <IO_write>
	usleep(100000);
10001f2c:	010000b4 	movhi	r4,2
10001f30:	2121a804 	addi	r4,r4,-31072
10001f34:	000fea40 	call	1000fea4 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001f38:	01040074 	movhi	r4,4097
10001f3c:	2109e904 	addi	r4,r4,10148
10001f40:	000327c0 	call	1000327c <puts>

	usleep(500000);
10001f44:	01000234 	movhi	r4,8
10001f48:	21284804 	addi	r4,r4,-24288
10001f4c:	000fea40 	call	1000fea4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001f50:	01040074 	movhi	r4,4097
10001f54:	2109f004 	addi	r4,r4,10176
10001f58:	000327c0 	call	1000327c <puts>
	IO_read(HPI_MAILBOX);
10001f5c:	01000044 	movi	r4,1
10001f60:	000106c0 	call	1000106c <IO_read>
	IO_read(HPI_STATUS);
10001f64:	010000c4 	movi	r4,3
10001f68:	000106c0 	call	1000106c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001f6c:	01005104 	movi	r4,324
10001f70:	0001ecc0 	call	10001ecc <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001f74:	000b883a 	mov	r5,zero
10001f78:	01005104 	movi	r4,324
10001f7c:	0001e700 	call	10001e70 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001f80:	01005204 	movi	r4,328
10001f84:	0001ecc0 	call	10001ecc <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001f88:	000b883a 	mov	r5,zero
10001f8c:	01005204 	movi	r4,328
10001f90:	0001e700 	call	10001e70 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001f94:	017fffd4 	movui	r5,65535
10001f98:	01302414 	movui	r4,49296
10001f9c:	0001e700 	call	10001e70 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001fa0:	017fffd4 	movui	r5,65535
10001fa4:	01302c14 	movui	r4,49328
10001fa8:	0001e700 	call	10001e70 <UsbWrite>
}
10001fac:	0001883a 	nop
10001fb0:	e037883a 	mov	sp,fp
10001fb4:	dfc00117 	ldw	ra,4(sp)
10001fb8:	df000017 	ldw	fp,0(sp)
10001fbc:	dec00204 	addi	sp,sp,8
10001fc0:	f800283a 	ret

10001fc4 <UsbSetAddress>:


void UsbSetAddress()
{
10001fc4:	defffe04 	addi	sp,sp,-8
10001fc8:	dfc00115 	stw	ra,4(sp)
10001fcc:	df000015 	stw	fp,0(sp)
10001fd0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001fd4:	01414004 	movi	r5,1280
10001fd8:	01000084 	movi	r4,2
10001fdc:	0000ff80 	call	10000ff8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001fe0:	01414304 	movi	r5,1292
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001fec:	01400204 	movi	r5,8
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	0000ff80 	call	10000ff8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001ff8:	01403404 	movi	r5,208
10001ffc:	0009883a 	mov	r4,zero
10002000:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002004:	01400044 	movi	r5,1
10002008:	0009883a 	mov	r4,zero
1000200c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002010:	014004c4 	movi	r5,19
10002014:	0009883a 	mov	r4,zero
10002018:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000201c:	01414504 	movi	r5,1300
10002020:	0009883a 	mov	r4,zero
10002024:	0000ff80 	call	10000ff8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002028:	01414004 	movi	r5,1280
1000202c:	0009883a 	mov	r4,zero
10002030:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002034:	01400084 	movi	r5,2
10002038:	0009883a 	mov	r4,zero
1000203c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002040:	000b883a 	mov	r5,zero
10002044:	0009883a 	mov	r4,zero
10002048:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000204c:	000b883a 	mov	r5,zero
10002050:	0009883a 	mov	r4,zero
10002054:	0000ff80 	call	10000ff8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002058:	000b883a 	mov	r5,zero
1000205c:	0009883a 	mov	r4,zero
10002060:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002064:	000b883a 	mov	r5,zero
10002068:	0009883a 	mov	r4,zero
1000206c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002070:	01402404 	movi	r5,144
10002074:	0009883a 	mov	r4,zero
10002078:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000207c:	01401044 	movi	r5,65
10002080:	0009883a 	mov	r4,zero
10002084:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002088:	014004c4 	movi	r5,19
1000208c:	0009883a 	mov	r4,zero
10002090:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002094:	000b883a 	mov	r5,zero
10002098:	0009883a 	mov	r4,zero
1000209c:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020a0:	01414004 	movi	r5,1280
100020a4:	01006c04 	movi	r4,432
100020a8:	0001e700 	call	10001e70 <UsbWrite>
}
100020ac:	0001883a 	nop
100020b0:	e037883a 	mov	sp,fp
100020b4:	dfc00117 	ldw	ra,4(sp)
100020b8:	df000017 	ldw	fp,0(sp)
100020bc:	dec00204 	addi	sp,sp,8
100020c0:	f800283a 	ret

100020c4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100020c4:	defffe04 	addi	sp,sp,-8
100020c8:	dfc00115 	stw	ra,4(sp)
100020cc:	df000015 	stw	fp,0(sp)
100020d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100020d4:	01414004 	movi	r5,1280
100020d8:	01000084 	movi	r4,2
100020dc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
100020e0:	01414304 	movi	r5,1292
100020e4:	0009883a 	mov	r4,zero
100020e8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020ec:	01400204 	movi	r5,8
100020f0:	0009883a 	mov	r4,zero
100020f4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100020f8:	0140b404 	movi	r5,720
100020fc:	0009883a 	mov	r4,zero
10002100:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002104:	01400044 	movi	r5,1
10002108:	0009883a 	mov	r4,zero
1000210c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002110:	014004c4 	movi	r5,19
10002114:	0009883a 	mov	r4,zero
10002118:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000211c:	01414504 	movi	r5,1300
10002120:	0009883a 	mov	r4,zero
10002124:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002128:	0141a004 	movi	r5,1664
1000212c:	0009883a 	mov	r4,zero
10002130:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002134:	01404004 	movi	r5,256
10002138:	0009883a 	mov	r4,zero
1000213c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002140:	000b883a 	mov	r5,zero
10002144:	0009883a 	mov	r4,zero
10002148:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000214c:	01400204 	movi	r5,8
10002150:	0009883a 	mov	r4,zero
10002154:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002158:	01414b04 	movi	r5,1324
1000215c:	0009883a 	mov	r4,zero
10002160:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002164:	01400204 	movi	r5,8
10002168:	0009883a 	mov	r4,zero
1000216c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002170:	0140a404 	movi	r5,656
10002174:	0009883a 	mov	r4,zero
10002178:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000217c:	01401044 	movi	r5,65
10002180:	0009883a 	mov	r4,zero
10002184:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002188:	014004c4 	movi	r5,19
1000218c:	0009883a 	mov	r4,zero
10002190:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002194:	01414804 	movi	r5,1312
10002198:	0009883a 	mov	r4,zero
1000219c:	0000ff80 	call	10000ff8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100021a0:	000b883a 	mov	r5,zero
100021a4:	0009883a 	mov	r4,zero
100021a8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100021ac:	000b883a 	mov	r5,zero
100021b0:	0009883a 	mov	r4,zero
100021b4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100021b8:	01408404 	movi	r5,528
100021bc:	0009883a 	mov	r4,zero
100021c0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);
100021c4:	01401044 	movi	r5,65
100021c8:	0009883a 	mov	r4,zero
100021cc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100021d0:	014004c4 	movi	r5,19
100021d4:	0009883a 	mov	r4,zero
100021d8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
100021dc:	000b883a 	mov	r5,zero
100021e0:	0009883a 	mov	r4,zero
100021e4:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100021e8:	01414004 	movi	r5,1280
100021ec:	01006c04 	movi	r4,432
100021f0:	0001e700 	call	10001e70 <UsbWrite>
}
100021f4:	0001883a 	nop
100021f8:	e037883a 	mov	sp,fp
100021fc:	dfc00117 	ldw	ra,4(sp)
10002200:	df000017 	ldw	fp,0(sp)
10002204:	dec00204 	addi	sp,sp,8
10002208:	f800283a 	ret

1000220c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
1000220c:	defffe04 	addi	sp,sp,-8
10002210:	dfc00115 	stw	ra,4(sp)
10002214:	df000015 	stw	fp,0(sp)
10002218:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000221c:	01414004 	movi	r5,1280
10002220:	01000084 	movi	r4,2
10002224:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002228:	01414304 	movi	r5,1292
1000222c:	0009883a 	mov	r4,zero
10002230:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002234:	01400204 	movi	r5,8
10002238:	0009883a 	mov	r4,zero
1000223c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002240:	0140b404 	movi	r5,720
10002244:	0009883a 	mov	r4,zero
10002248:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000224c:	01400044 	movi	r5,1
10002250:	0009883a 	mov	r4,zero
10002254:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002258:	014004c4 	movi	r5,19
1000225c:	0009883a 	mov	r4,zero
10002260:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002264:	01414504 	movi	r5,1300
10002268:	0009883a 	mov	r4,zero
1000226c:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002270:	0141a004 	movi	r5,1664
10002274:	0009883a 	mov	r4,zero
10002278:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000227c:	01404004 	movi	r5,256
10002280:	0009883a 	mov	r4,zero
10002284:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002288:	000b883a 	mov	r5,zero
1000228c:	0009883a 	mov	r4,zero
10002290:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002294:	01400484 	movi	r5,18
10002298:	0009883a 	mov	r4,zero
1000229c:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100022a0:	01415104 	movi	r5,1348
100022a4:	0009883a 	mov	r4,zero
100022a8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100022ac:	01400204 	movi	r5,8
100022b0:	0009883a 	mov	r4,zero
100022b4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100022b8:	0140a404 	movi	r5,656
100022bc:	0009883a 	mov	r4,zero
100022c0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100022c4:	01401044 	movi	r5,65
100022c8:	0009883a 	mov	r4,zero
100022cc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100022d0:	014004c4 	movi	r5,19
100022d4:	0009883a 	mov	r4,zero
100022d8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100022dc:	01414804 	movi	r5,1312
100022e0:	0009883a 	mov	r4,zero
100022e4:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100022e8:	01415304 	movi	r5,1356
100022ec:	0009883a 	mov	r4,zero
100022f0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100022f4:	01400204 	movi	r5,8
100022f8:	0009883a 	mov	r4,zero
100022fc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002300:	0140a404 	movi	r5,656
10002304:	0009883a 	mov	r4,zero
10002308:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
1000230c:	01400044 	movi	r5,1
10002310:	0009883a 	mov	r4,zero
10002314:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002318:	014004c4 	movi	r5,19
1000231c:	0009883a 	mov	r4,zero
10002320:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002324:	01414b04 	movi	r5,1324
10002328:	0009883a 	mov	r4,zero
1000232c:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002330:	01415504 	movi	r5,1364
10002334:	0009883a 	mov	r4,zero
10002338:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000233c:	01400084 	movi	r5,2
10002340:	0009883a 	mov	r4,zero
10002344:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002348:	0140a404 	movi	r5,656
1000234c:	0009883a 	mov	r4,zero
10002350:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002354:	01401044 	movi	r5,65
10002358:	0009883a 	mov	r4,zero
1000235c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002360:	014004c4 	movi	r5,19
10002364:	0009883a 	mov	r4,zero
10002368:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000236c:	01414e04 	movi	r5,1336
10002370:	0009883a 	mov	r4,zero
10002374:	0000ff80 	call	10000ff8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002378:	000b883a 	mov	r5,zero
1000237c:	0009883a 	mov	r4,zero
10002380:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002384:	000b883a 	mov	r5,zero
10002388:	0009883a 	mov	r4,zero
1000238c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002390:	01408404 	movi	r5,528
10002394:	0009883a 	mov	r4,zero
10002398:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000239c:	01401044 	movi	r5,65
100023a0:	0009883a 	mov	r4,zero
100023a4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100023a8:	014004c4 	movi	r5,19
100023ac:	0009883a 	mov	r4,zero
100023b0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100023b4:	000b883a 	mov	r5,zero
100023b8:	0009883a 	mov	r4,zero
100023bc:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100023c0:	01414004 	movi	r5,1280
100023c4:	01006c04 	movi	r4,432
100023c8:	0001e700 	call	10001e70 <UsbWrite>
}
100023cc:	0001883a 	nop
100023d0:	e037883a 	mov	sp,fp
100023d4:	dfc00117 	ldw	ra,4(sp)
100023d8:	df000017 	ldw	fp,0(sp)
100023dc:	dec00204 	addi	sp,sp,8
100023e0:	f800283a 	ret

100023e4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100023e4:	defffe04 	addi	sp,sp,-8
100023e8:	dfc00115 	stw	ra,4(sp)
100023ec:	df000015 	stw	fp,0(sp)
100023f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100023f4:	01414004 	movi	r5,1280
100023f8:	01000084 	movi	r4,2
100023fc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002400:	01414304 	movi	r5,1292
10002404:	0009883a 	mov	r4,zero
10002408:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000240c:	01400204 	movi	r5,8
10002410:	0009883a 	mov	r4,zero
10002414:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002418:	0140b404 	movi	r5,720
1000241c:	0009883a 	mov	r4,zero
10002420:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002424:	01400044 	movi	r5,1
10002428:	0009883a 	mov	r4,zero
1000242c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002430:	014004c4 	movi	r5,19
10002434:	0009883a 	mov	r4,zero
10002438:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000243c:	01414504 	movi	r5,1300
10002440:	0009883a 	mov	r4,zero
10002444:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002448:	0141a004 	movi	r5,1664
1000244c:	0009883a 	mov	r4,zero
10002450:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002454:	01408004 	movi	r5,512
10002458:	0009883a 	mov	r4,zero
1000245c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002460:	000b883a 	mov	r5,zero
10002464:	0009883a 	mov	r4,zero
10002468:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
1000246c:	01400244 	movi	r5,9
10002470:	0009883a 	mov	r4,zero
10002474:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002478:	01415104 	movi	r5,1348
1000247c:	0009883a 	mov	r4,zero
10002480:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002484:	01400204 	movi	r5,8
10002488:	0009883a 	mov	r4,zero
1000248c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002490:	0140a404 	movi	r5,656
10002494:	0009883a 	mov	r4,zero
10002498:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000249c:	01401044 	movi	r5,65
100024a0:	0009883a 	mov	r4,zero
100024a4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100024a8:	014004c4 	movi	r5,19
100024ac:	0009883a 	mov	r4,zero
100024b0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100024b4:	01414804 	movi	r5,1312
100024b8:	0009883a 	mov	r4,zero
100024bc:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100024c0:	01415304 	movi	r5,1356
100024c4:	0009883a 	mov	r4,zero
100024c8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100024cc:	01400044 	movi	r5,1
100024d0:	0009883a 	mov	r4,zero
100024d4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100024d8:	0140a404 	movi	r5,656
100024dc:	0009883a 	mov	r4,zero
100024e0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100024e4:	01400044 	movi	r5,1
100024e8:	0009883a 	mov	r4,zero
100024ec:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100024f0:	014004c4 	movi	r5,19
100024f4:	0009883a 	mov	r4,zero
100024f8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100024fc:	01414b04 	movi	r5,1324
10002500:	0009883a 	mov	r4,zero
10002504:	0000ff80 	call	10000ff8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002508:	000b883a 	mov	r5,zero
1000250c:	0009883a 	mov	r4,zero
10002510:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002514:	000b883a 	mov	r5,zero
10002518:	0009883a 	mov	r4,zero
1000251c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002520:	01408404 	movi	r5,528
10002524:	0009883a 	mov	r4,zero
10002528:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000252c:	01401044 	movi	r5,65
10002530:	0009883a 	mov	r4,zero
10002534:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002538:	014004c4 	movi	r5,19
1000253c:	0009883a 	mov	r4,zero
10002540:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002544:	000b883a 	mov	r5,zero
10002548:	0009883a 	mov	r4,zero
1000254c:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002550:	01414004 	movi	r5,1280
10002554:	01006c04 	movi	r4,432
10002558:	0001e700 	call	10001e70 <UsbWrite>
}
1000255c:	0001883a 	nop
10002560:	e037883a 	mov	sp,fp
10002564:	dfc00117 	ldw	ra,4(sp)
10002568:	df000017 	ldw	fp,0(sp)
1000256c:	dec00204 	addi	sp,sp,8
10002570:	f800283a 	ret

10002574 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002574:	defffe04 	addi	sp,sp,-8
10002578:	dfc00115 	stw	ra,4(sp)
1000257c:	df000015 	stw	fp,0(sp)
10002580:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002584:	01414004 	movi	r5,1280
10002588:	01000084 	movi	r4,2
1000258c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002590:	01414304 	movi	r5,1292
10002594:	0009883a 	mov	r4,zero
10002598:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000259c:	01400204 	movi	r5,8
100025a0:	0009883a 	mov	r4,zero
100025a4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100025a8:	0140b404 	movi	r5,720
100025ac:	0009883a 	mov	r4,zero
100025b0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
100025b4:	01400044 	movi	r5,1
100025b8:	0009883a 	mov	r4,zero
100025bc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100025c0:	014004c4 	movi	r5,19
100025c4:	0009883a 	mov	r4,zero
100025c8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
100025cc:	01414504 	movi	r5,1300
100025d0:	0009883a 	mov	r4,zero
100025d4:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100025d8:	0141a004 	movi	r5,1664
100025dc:	0009883a 	mov	r4,zero
100025e0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100025e4:	01408004 	movi	r5,512
100025e8:	0009883a 	mov	r4,zero
100025ec:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100025f0:	000b883a 	mov	r5,zero
100025f4:	0009883a 	mov	r4,zero
100025f8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100025fc:	01403fc4 	movi	r5,255
10002600:	0009883a 	mov	r4,zero
10002604:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10002608:	01415704 	movi	r5,1372
1000260c:	0009883a 	mov	r4,zero
10002610:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002614:	01400204 	movi	r5,8
10002618:	0009883a 	mov	r4,zero
1000261c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002620:	0140a404 	movi	r5,656
10002624:	0009883a 	mov	r4,zero
10002628:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000262c:	01401044 	movi	r5,65
10002630:	0009883a 	mov	r4,zero
10002634:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002638:	014004c4 	movi	r5,19
1000263c:	0009883a 	mov	r4,zero
10002640:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002644:	01414804 	movi	r5,1312
10002648:	0009883a 	mov	r4,zero
1000264c:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002650:	01415904 	movi	r5,1380
10002654:	0009883a 	mov	r4,zero
10002658:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000265c:	01400204 	movi	r5,8
10002660:	0009883a 	mov	r4,zero
10002664:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002668:	0140a404 	movi	r5,656
1000266c:	0009883a 	mov	r4,zero
10002670:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002674:	01400044 	movi	r5,1
10002678:	0009883a 	mov	r4,zero
1000267c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002680:	014004c4 	movi	r5,19
10002684:	0009883a 	mov	r4,zero
10002688:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000268c:	01414b04 	movi	r5,1324
10002690:	0009883a 	mov	r4,zero
10002694:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002698:	01415b04 	movi	r5,1388
1000269c:	0009883a 	mov	r4,zero
100026a0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100026a4:	01400204 	movi	r5,8
100026a8:	0009883a 	mov	r4,zero
100026ac:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100026b0:	0140a404 	movi	r5,656
100026b4:	0009883a 	mov	r4,zero
100026b8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100026bc:	01401044 	movi	r5,65
100026c0:	0009883a 	mov	r4,zero
100026c4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100026c8:	014004c4 	movi	r5,19
100026cc:	0009883a 	mov	r4,zero
100026d0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100026d4:	01414e04 	movi	r5,1336
100026d8:	0009883a 	mov	r4,zero
100026dc:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100026e0:	01415d04 	movi	r5,1396
100026e4:	0009883a 	mov	r4,zero
100026e8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100026ec:	01400204 	movi	r5,8
100026f0:	0009883a 	mov	r4,zero
100026f4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100026f8:	0140a404 	movi	r5,656
100026fc:	0009883a 	mov	r4,zero
10002700:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002704:	01400044 	movi	r5,1
10002708:	0009883a 	mov	r4,zero
1000270c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002710:	014004c4 	movi	r5,19
10002714:	0009883a 	mov	r4,zero
10002718:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000271c:	01415104 	movi	r5,1348
10002720:	0009883a 	mov	r4,zero
10002724:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10002728:	01415f04 	movi	r5,1404
1000272c:	0009883a 	mov	r4,zero
10002730:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10002734:	01400084 	movi	r5,2
10002738:	0009883a 	mov	r4,zero
1000273c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002740:	0140a404 	movi	r5,656
10002744:	0009883a 	mov	r4,zero
10002748:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000274c:	01401044 	movi	r5,65
10002750:	0009883a 	mov	r4,zero
10002754:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002758:	014004c4 	movi	r5,19
1000275c:	0009883a 	mov	r4,zero
10002760:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002764:	01415404 	movi	r5,1360
10002768:	0009883a 	mov	r4,zero
1000276c:	0000ff80 	call	10000ff8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002770:	000b883a 	mov	r5,zero
10002774:	0009883a 	mov	r4,zero
10002778:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000277c:	000b883a 	mov	r5,zero
10002780:	0009883a 	mov	r4,zero
10002784:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002788:	01408404 	movi	r5,528
1000278c:	0009883a 	mov	r4,zero
10002790:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002794:	01401044 	movi	r5,65
10002798:	0009883a 	mov	r4,zero
1000279c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100027a0:	014004c4 	movi	r5,19
100027a4:	0009883a 	mov	r4,zero
100027a8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100027ac:	000b883a 	mov	r5,zero
100027b0:	0009883a 	mov	r4,zero
100027b4:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100027b8:	01414004 	movi	r5,1280
100027bc:	01006c04 	movi	r4,432
100027c0:	0001e700 	call	10001e70 <UsbWrite>
}
100027c4:	0001883a 	nop
100027c8:	e037883a 	mov	sp,fp
100027cc:	dfc00117 	ldw	ra,4(sp)
100027d0:	df000017 	ldw	fp,0(sp)
100027d4:	dec00204 	addi	sp,sp,8
100027d8:	f800283a 	ret

100027dc <UsbSetConfig>:

void UsbSetConfig()
{
100027dc:	defffe04 	addi	sp,sp,-8
100027e0:	dfc00115 	stw	ra,4(sp)
100027e4:	df000015 	stw	fp,0(sp)
100027e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100027ec:	01414004 	movi	r5,1280
100027f0:	01000084 	movi	r4,2
100027f4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
100027f8:	01414304 	movi	r5,1292
100027fc:	0009883a 	mov	r4,zero
10002800:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002804:	01400204 	movi	r5,8
10002808:	0009883a 	mov	r4,zero
1000280c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002810:	0140b404 	movi	r5,720
10002814:	0009883a 	mov	r4,zero
10002818:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000281c:	01400044 	movi	r5,1
10002820:	0009883a 	mov	r4,zero
10002824:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002828:	014004c4 	movi	r5,19
1000282c:	0009883a 	mov	r4,zero
10002830:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002834:	01414504 	movi	r5,1300
10002838:	0009883a 	mov	r4,zero
1000283c:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10002840:	01424004 	movi	r5,2304
10002844:	0009883a 	mov	r4,zero
10002848:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
1000284c:	01400044 	movi	r5,1
10002850:	0009883a 	mov	r4,zero
10002854:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002858:	000b883a 	mov	r5,zero
1000285c:	0009883a 	mov	r4,zero
10002860:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002864:	000b883a 	mov	r5,zero
10002868:	0009883a 	mov	r4,zero
1000286c:	0000ff80 	call	10000ff8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002870:	000b883a 	mov	r5,zero
10002874:	0009883a 	mov	r4,zero
10002878:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000287c:	000b883a 	mov	r5,zero
10002880:	0009883a 	mov	r4,zero
10002884:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002888:	0140a404 	movi	r5,656
1000288c:	0009883a 	mov	r4,zero
10002890:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002894:	01401044 	movi	r5,65
10002898:	0009883a 	mov	r4,zero
1000289c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100028a0:	014004c4 	movi	r5,19
100028a4:	0009883a 	mov	r4,zero
100028a8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
100028ac:	000b883a 	mov	r5,zero
100028b0:	0009883a 	mov	r4,zero
100028b4:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100028b8:	01414004 	movi	r5,1280
100028bc:	01006c04 	movi	r4,432
100028c0:	0001e700 	call	10001e70 <UsbWrite>

}
100028c4:	0001883a 	nop
100028c8:	e037883a 	mov	sp,fp
100028cc:	dfc00117 	ldw	ra,4(sp)
100028d0:	df000017 	ldw	fp,0(sp)
100028d4:	dec00204 	addi	sp,sp,8
100028d8:	f800283a 	ret

100028dc <UsbClassRequest>:

void UsbClassRequest()
{
100028dc:	defffe04 	addi	sp,sp,-8
100028e0:	dfc00115 	stw	ra,4(sp)
100028e4:	df000015 	stw	fp,0(sp)
100028e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100028ec:	01414004 	movi	r5,1280
100028f0:	01000084 	movi	r4,2
100028f4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
100028f8:	01414304 	movi	r5,1292
100028fc:	0009883a 	mov	r4,zero
10002900:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002904:	01400204 	movi	r5,8
10002908:	0009883a 	mov	r4,zero
1000290c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002910:	0140b404 	movi	r5,720
10002914:	0009883a 	mov	r4,zero
10002918:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000291c:	01400044 	movi	r5,1
10002920:	0009883a 	mov	r4,zero
10002924:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002928:	014004c4 	movi	r5,19
1000292c:	0009883a 	mov	r4,zero
10002930:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002934:	01414504 	movi	r5,1300
10002938:	0009883a 	mov	r4,zero
1000293c:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10002940:	01428844 	movi	r5,2593
10002944:	0009883a 	mov	r4,zero
10002948:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
1000294c:	000b883a 	mov	r5,zero
10002950:	0009883a 	mov	r4,zero
10002954:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002958:	000b883a 	mov	r5,zero
1000295c:	0009883a 	mov	r4,zero
10002960:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002964:	000b883a 	mov	r5,zero
10002968:	0009883a 	mov	r4,zero
1000296c:	0000ff80 	call	10000ff8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002970:	000b883a 	mov	r5,zero
10002974:	0009883a 	mov	r4,zero
10002978:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
1000297c:	000b883a 	mov	r5,zero
10002980:	0009883a 	mov	r4,zero
10002984:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002988:	0140a404 	movi	r5,656
1000298c:	0009883a 	mov	r4,zero
10002990:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002994:	01401044 	movi	r5,65
10002998:	0009883a 	mov	r4,zero
1000299c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100029a0:	014004c4 	movi	r5,19
100029a4:	0009883a 	mov	r4,zero
100029a8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);
100029ac:	000b883a 	mov	r5,zero
100029b0:	0009883a 	mov	r4,zero
100029b4:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100029b8:	01414004 	movi	r5,1280
100029bc:	01006c04 	movi	r4,432
100029c0:	0001e700 	call	10001e70 <UsbWrite>
}
100029c4:	0001883a 	nop
100029c8:	e037883a 	mov	sp,fp
100029cc:	dfc00117 	ldw	ra,4(sp)
100029d0:	df000017 	ldw	fp,0(sp)
100029d4:	dec00204 	addi	sp,sp,8
100029d8:	f800283a 	ret

100029dc <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100029dc:	defffe04 	addi	sp,sp,-8
100029e0:	dfc00115 	stw	ra,4(sp)
100029e4:	df000015 	stw	fp,0(sp)
100029e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100029ec:	01414004 	movi	r5,1280
100029f0:	01000084 	movi	r4,2
100029f4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
100029f8:	01414304 	movi	r5,1292
100029fc:	0009883a 	mov	r4,zero
10002a00:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002a04:	01400204 	movi	r5,8
10002a08:	0009883a 	mov	r4,zero
10002a0c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002a10:	0140b404 	movi	r5,720
10002a14:	0009883a 	mov	r4,zero
10002a18:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002a1c:	01400044 	movi	r5,1
10002a20:	0009883a 	mov	r4,zero
10002a24:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a28:	014004c4 	movi	r5,19
10002a2c:	0009883a 	mov	r4,zero
10002a30:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002a34:	01414504 	movi	r5,1300
10002a38:	0009883a 	mov	r4,zero
10002a3c:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002a40:	0141a044 	movi	r5,1665
10002a44:	0009883a 	mov	r4,zero
10002a48:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10002a4c:	01484004 	movi	r5,8448
10002a50:	0009883a 	mov	r4,zero
10002a54:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002a58:	000b883a 	mov	r5,zero
10002a5c:	0009883a 	mov	r4,zero
10002a60:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002a64:	01401ec4 	movi	r5,123
10002a68:	0009883a 	mov	r4,zero
10002a6c:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002a70:	01415104 	movi	r5,1348
10002a74:	0009883a 	mov	r4,zero
10002a78:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002a7c:	01400204 	movi	r5,8
10002a80:	0009883a 	mov	r4,zero
10002a84:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002a88:	0140a404 	movi	r5,656
10002a8c:	0009883a 	mov	r4,zero
10002a90:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002a94:	01401044 	movi	r5,65
10002a98:	0009883a 	mov	r4,zero
10002a9c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002aa0:	014004c4 	movi	r5,19
10002aa4:	0009883a 	mov	r4,zero
10002aa8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002aac:	01414804 	movi	r5,1312
10002ab0:	0009883a 	mov	r4,zero
10002ab4:	0000ff80 	call	10000ff8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002ab8:	000b883a 	mov	r5,zero
10002abc:	0009883a 	mov	r4,zero
10002ac0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002ac4:	000b883a 	mov	r5,zero
10002ac8:	0009883a 	mov	r4,zero
10002acc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002ad0:	01408404 	movi	r5,528
10002ad4:	0009883a 	mov	r4,zero
10002ad8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002adc:	01401044 	movi	r5,65
10002ae0:	0009883a 	mov	r4,zero
10002ae4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002ae8:	014004c4 	movi	r5,19
10002aec:	0009883a 	mov	r4,zero
10002af0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002af4:	000b883a 	mov	r5,zero
10002af8:	0009883a 	mov	r4,zero
10002afc:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002b00:	01414004 	movi	r5,1280
10002b04:	01006c04 	movi	r4,432
10002b08:	0001e700 	call	10001e70 <UsbWrite>

}
10002b0c:	0001883a 	nop
10002b10:	e037883a 	mov	sp,fp
10002b14:	dfc00117 	ldw	ra,4(sp)
10002b18:	df000017 	ldw	fp,0(sp)
10002b1c:	dec00204 	addi	sp,sp,8
10002b20:	f800283a 	ret

10002b24 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10002b24:	defffe04 	addi	sp,sp,-8
10002b28:	dfc00115 	stw	ra,4(sp)
10002b2c:	df000015 	stw	fp,0(sp)
10002b30:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002b34:	01414004 	movi	r5,1280
10002b38:	01000084 	movi	r4,2
10002b3c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002b40:	01414304 	movi	r5,1292
10002b44:	0009883a 	mov	r4,zero
10002b48:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b4c:	01400204 	movi	r5,8
10002b50:	0009883a 	mov	r4,zero
10002b54:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002b58:	0140b404 	movi	r5,720
10002b5c:	0009883a 	mov	r4,zero
10002b60:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b64:	01400044 	movi	r5,1
10002b68:	0009883a 	mov	r4,zero
10002b6c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002b70:	014004c4 	movi	r5,19
10002b74:	0009883a 	mov	r4,zero
10002b78:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002b7c:	01414504 	movi	r5,1300
10002b80:	0009883a 	mov	r4,zero
10002b84:	0000ff80 	call	10000ff8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002b88:	0141a044 	movi	r5,1665
10002b8c:	0009883a 	mov	r4,zero
10002b90:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002b94:	01488004 	movi	r5,8704
10002b98:	0009883a 	mov	r4,zero
10002b9c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002ba0:	000b883a 	mov	r5,zero
10002ba4:	0009883a 	mov	r4,zero
10002ba8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002bac:	01401ec4 	movi	r5,123
10002bb0:	0009883a 	mov	r4,zero
10002bb4:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002bb8:	01416004 	movi	r5,1408
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002bc4:	01400204 	movi	r5,8
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002bd0:	0140a404 	movi	r5,656
10002bd4:	0009883a 	mov	r4,zero
10002bd8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002bdc:	01401044 	movi	r5,65
10002be0:	0009883a 	mov	r4,zero
10002be4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002be8:	014004c4 	movi	r5,19
10002bec:	0009883a 	mov	r4,zero
10002bf0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002bf4:	01414804 	movi	r5,1312
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002c00:	01416204 	movi	r5,1416
10002c04:	0009883a 	mov	r4,zero
10002c08:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002c0c:	01400204 	movi	r5,8
10002c10:	0009883a 	mov	r4,zero
10002c14:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002c18:	0140a404 	movi	r5,656
10002c1c:	0009883a 	mov	r4,zero
10002c20:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002c24:	01400044 	movi	r5,1
10002c28:	0009883a 	mov	r4,zero
10002c2c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002c30:	014004c4 	movi	r5,19
10002c34:	0009883a 	mov	r4,zero
10002c38:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002c3c:	01414b04 	movi	r5,1324
10002c40:	0009883a 	mov	r4,zero
10002c44:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002c48:	01416404 	movi	r5,1424
10002c4c:	0009883a 	mov	r4,zero
10002c50:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002c54:	01400204 	movi	r5,8
10002c58:	0009883a 	mov	r4,zero
10002c5c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002c60:	0140a404 	movi	r5,656
10002c64:	0009883a 	mov	r4,zero
10002c68:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002c6c:	01401044 	movi	r5,65
10002c70:	0009883a 	mov	r4,zero
10002c74:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002c78:	014004c4 	movi	r5,19
10002c7c:	0009883a 	mov	r4,zero
10002c80:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002c84:	01414e04 	movi	r5,1336
10002c88:	0009883a 	mov	r4,zero
10002c8c:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002c90:	01416604 	movi	r5,1432
10002c94:	0009883a 	mov	r4,zero
10002c98:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002c9c:	01400204 	movi	r5,8
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002ca8:	0140a404 	movi	r5,656
10002cac:	0009883a 	mov	r4,zero
10002cb0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002cb4:	01400044 	movi	r5,1
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002cc0:	014004c4 	movi	r5,19
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002ccc:	01415104 	movi	r5,1348
10002cd0:	0009883a 	mov	r4,zero
10002cd4:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002cd8:	01416804 	movi	r5,1440
10002cdc:	0009883a 	mov	r4,zero
10002ce0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002ce4:	01400204 	movi	r5,8
10002ce8:	0009883a 	mov	r4,zero
10002cec:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002cf0:	0140a404 	movi	r5,656
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002cfc:	01401044 	movi	r5,65
10002d00:	0009883a 	mov	r4,zero
10002d04:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002d08:	014004c4 	movi	r5,19
10002d0c:	0009883a 	mov	r4,zero
10002d10:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002d14:	01415404 	movi	r5,1360
10002d18:	0009883a 	mov	r4,zero
10002d1c:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002d20:	01416a04 	movi	r5,1448
10002d24:	0009883a 	mov	r4,zero
10002d28:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002d2c:	01400204 	movi	r5,8
10002d30:	0009883a 	mov	r4,zero
10002d34:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002d38:	0140a404 	movi	r5,656
10002d3c:	0009883a 	mov	r4,zero
10002d40:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002d44:	01400044 	movi	r5,1
10002d48:	0009883a 	mov	r4,zero
10002d4c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002d50:	014004c4 	movi	r5,19
10002d54:	0009883a 	mov	r4,zero
10002d58:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002d5c:	01415704 	movi	r5,1372
10002d60:	0009883a 	mov	r4,zero
10002d64:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002d68:	01416c04 	movi	r5,1456
10002d6c:	0009883a 	mov	r4,zero
10002d70:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002d74:	01400204 	movi	r5,8
10002d78:	0009883a 	mov	r4,zero
10002d7c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002d80:	0140a404 	movi	r5,656
10002d84:	0009883a 	mov	r4,zero
10002d88:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002d8c:	01401044 	movi	r5,65
10002d90:	0009883a 	mov	r4,zero
10002d94:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002d98:	014004c4 	movi	r5,19
10002d9c:	0009883a 	mov	r4,zero
10002da0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002da4:	01415a04 	movi	r5,1384
10002da8:	0009883a 	mov	r4,zero
10002dac:	0000ff80 	call	10000ff8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002db0:	01416e04 	movi	r5,1464
10002db4:	0009883a 	mov	r4,zero
10002db8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002dbc:	014000c4 	movi	r5,3
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002dc8:	0140a404 	movi	r5,656
10002dcc:	0009883a 	mov	r4,zero
10002dd0:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002dd4:	01400044 	movi	r5,1
10002dd8:	0009883a 	mov	r4,zero
10002ddc:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002de0:	014004c4 	movi	r5,19
10002de4:	0009883a 	mov	r4,zero
10002de8:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002dec:	01415d04 	movi	r5,1396
10002df0:	0009883a 	mov	r4,zero
10002df4:	0000ff80 	call	10000ff8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002df8:	000b883a 	mov	r5,zero
10002dfc:	0009883a 	mov	r4,zero
10002e00:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002e04:	000b883a 	mov	r5,zero
10002e08:	0009883a 	mov	r4,zero
10002e0c:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002e10:	01408404 	movi	r5,528
10002e14:	0009883a 	mov	r4,zero
10002e18:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002e1c:	01401044 	movi	r5,65
10002e20:	0009883a 	mov	r4,zero
10002e24:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002e28:	014004c4 	movi	r5,19
10002e2c:	0009883a 	mov	r4,zero
10002e30:	0000ff80 	call	10000ff8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002e34:	000b883a 	mov	r5,zero
10002e38:	0009883a 	mov	r4,zero
10002e3c:	0000ff80 	call	10000ff8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e40:	01414004 	movi	r5,1280
10002e44:	01006c04 	movi	r4,432
10002e48:	0001e700 	call	10001e70 <UsbWrite>

}
10002e4c:	0001883a 	nop
10002e50:	e037883a 	mov	sp,fp
10002e54:	dfc00117 	ldw	ra,4(sp)
10002e58:	df000017 	ldw	fp,0(sp)
10002e5c:	dec00204 	addi	sp,sp,8
10002e60:	f800283a 	ret

10002e64 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002e64:	defffd04 	addi	sp,sp,-12
10002e68:	dfc00215 	stw	ra,8(sp)
10002e6c:	df000115 	stw	fp,4(sp)
10002e70:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002e74:	01005104 	movi	r4,324
10002e78:	0001ecc0 	call	10001ecc <UsbRead>
10002e7c:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e80:	000b883a 	mov	r5,zero
10002e84:	01005104 	movi	r4,324
10002e88:	0001e700 	call	10001e70 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002e8c:	00000d06 	br	10002ec4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002e90:	e0bfff8b 	ldhu	r2,-2(fp)
10002e94:	10000526 	beq	r2,zero,10002eac <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002e98:	e0bfff8b 	ldhu	r2,-2(fp)
10002e9c:	100b883a 	mov	r5,r2
10002ea0:	01040074 	movhi	r4,4097
10002ea4:	2109f904 	addi	r4,r4,10212
10002ea8:	00031780 	call	10003178 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002eac:	01005104 	movi	r4,324
10002eb0:	0001ecc0 	call	10001ecc <UsbRead>
10002eb4:	e0bfff8d 	sth	r2,-2(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002eb8:	000b883a 	mov	r5,zero
10002ebc:	01005104 	movi	r4,324
10002ec0:	0001e700 	call	10001e70 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002ec4:	e0bfff8b 	ldhu	r2,-2(fp)
10002ec8:	10840018 	cmpnei	r2,r2,4096
10002ecc:	103ff01e 	bne	r2,zero,10002e90 <UsbWaitTDListDone+0x2c>
	}

	return usb_ctl_val;
10002ed0:	e0bfff8b 	ldhu	r2,-2(fp)
}
10002ed4:	e037883a 	mov	sp,fp
10002ed8:	dfc00117 	ldw	ra,4(sp)
10002edc:	df000017 	ldw	fp,0(sp)
10002ee0:	dec00204 	addi	sp,sp,8
10002ee4:	f800283a 	ret

10002ee8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002ee8:	defffd04 	addi	sp,sp,-12
10002eec:	dfc00215 	stw	ra,8(sp)
10002ef0:	df000115 	stw	fp,4(sp)
10002ef4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002ef8:	010000c4 	movi	r4,3
10002efc:	000106c0 	call	1000106c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002f00:	01005104 	movi	r4,324
10002f04:	0001ecc0 	call	10001ecc <UsbRead>
10002f08:	10bfffcc 	andi	r2,r2,65535
10002f0c:	10840018 	cmpnei	r2,r2,4096
10002f10:	1000091e 	bne	r2,zero,10002f38 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002f14:	000b883a 	mov	r5,zero
10002f18:	01005104 	movi	r4,324
10002f1c:	0001e700 	call	10001e70 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002f20:	0001883a 	nop
10002f24:	010000c4 	movi	r4,3
10002f28:	000106c0 	call	1000106c <IO_read>
10002f2c:	10bfffcc 	andi	r2,r2,65535
10002f30:	1080040c 	andi	r2,r2,16
10002f34:	103ffb26 	beq	r2,zero,10002f24 <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002f38:	01414204 	movi	r5,1288
10002f3c:	01000084 	movi	r4,2
10002f40:	0000ff80 	call	10000ff8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002f44:	0009883a 	mov	r4,zero
10002f48:	000106c0 	call	1000106c <IO_read>
10002f4c:	e0bfff8d 	sth	r2,-2(fp)

	return usb_ctl_val;
10002f50:	e0bfff8b 	ldhu	r2,-2(fp)
}
10002f54:	e037883a 	mov	sp,fp
10002f58:	dfc00117 	ldw	ra,4(sp)
10002f5c:	df000017 	ldw	fp,0(sp)
10002f60:	dec00204 	addi	sp,sp,8
10002f64:	f800283a 	ret

10002f68 <UsbPrintMem>:


void UsbPrintMem()
{
10002f68:	defffc04 	addi	sp,sp,-16
10002f6c:	dfc00315 	stw	ra,12(sp)
10002f70:	df000215 	stw	fp,8(sp)
10002f74:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002f78:	01414004 	movi	r5,1280
10002f7c:	01000084 	movi	r4,2
10002f80:	0000ff80 	call	10000ff8 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002f84:	e03fff15 	stw	zero,-4(fp)
10002f88:	00000e06 	br	10002fc4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002f8c:	0009883a 	mov	r4,zero
10002f90:	000106c0 	call	1000106c <IO_read>
10002f94:	10bfffcc 	andi	r2,r2,65535
10002f98:	e0bffe15 	stw	r2,-8(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002f9c:	e0bfff17 	ldw	r2,-4(fp)
10002fa0:	10814004 	addi	r2,r2,1280
10002fa4:	e1bffe17 	ldw	r6,-8(fp)
10002fa8:	100b883a 	mov	r5,r2
10002fac:	01040074 	movhi	r4,4097
10002fb0:	210a0104 	addi	r4,r4,10244
10002fb4:	00031780 	call	10003178 <printf>
	for (i = 0; i <= 200; i += 2)
10002fb8:	e0bfff17 	ldw	r2,-4(fp)
10002fbc:	10800084 	addi	r2,r2,2
10002fc0:	e0bfff15 	stw	r2,-4(fp)
10002fc4:	e0bfff17 	ldw	r2,-4(fp)
10002fc8:	10803250 	cmplti	r2,r2,201
10002fcc:	103fef1e 	bne	r2,zero,10002f8c <UsbPrintMem+0x24>
	}
}
10002fd0:	0001883a 	nop
10002fd4:	e037883a 	mov	sp,fp
10002fd8:	dfc00117 	ldw	ra,4(sp)
10002fdc:	df000017 	ldw	fp,0(sp)
10002fe0:	dec00204 	addi	sp,sp,8
10002fe4:	f800283a 	ret

10002fe8 <__muldi3>:
10002fe8:	20bfffcc 	andi	r2,r4,65535
10002fec:	2012d43a 	srli	r9,r4,16
10002ff0:	32bfffcc 	andi	r10,r6,65535
10002ff4:	3018d43a 	srli	r12,r6,16
10002ff8:	1297383a 	mul	r11,r2,r10
10002ffc:	4a95383a 	mul	r10,r9,r10
10003000:	1311383a 	mul	r8,r2,r12
10003004:	5804d43a 	srli	r2,r11,16
10003008:	4b13383a 	mul	r9,r9,r12
1000300c:	4291883a 	add	r8,r8,r10
10003010:	1205883a 	add	r2,r2,r8
10003014:	1280022e 	bgeu	r2,r10,10003020 <__muldi3+0x38>
10003018:	00c00074 	movhi	r3,1
1000301c:	48d3883a 	add	r9,r9,r3
10003020:	1010d43a 	srli	r8,r2,16
10003024:	21c9383a 	mul	r4,r4,r7
10003028:	314d383a 	mul	r6,r6,r5
1000302c:	1004943a 	slli	r2,r2,16
10003030:	4253883a 	add	r9,r8,r9
10003034:	5affffcc 	andi	r11,r11,65535
10003038:	2249883a 	add	r4,r4,r9
1000303c:	12c5883a 	add	r2,r2,r11
10003040:	2187883a 	add	r3,r4,r6
10003044:	f800283a 	ret

10003048 <memcpy>:
10003048:	30c00430 	cmpltui	r3,r6,16
1000304c:	2005883a 	mov	r2,r4
10003050:	18002d1e 	bne	r3,zero,10003108 <memcpy+0xc0>
10003054:	2906b03a 	or	r3,r5,r4
10003058:	18c000cc 	andi	r3,r3,3
1000305c:	1800351e 	bne	r3,zero,10003134 <memcpy+0xec>
10003060:	32fffc04 	addi	r11,r6,-16
10003064:	5816d13a 	srli	r11,r11,4
10003068:	2007883a 	mov	r3,r4
1000306c:	280f883a 	mov	r7,r5
10003070:	5ac00044 	addi	r11,r11,1
10003074:	5816913a 	slli	r11,r11,4
10003078:	22c9883a 	add	r4,r4,r11
1000307c:	3a000017 	ldw	r8,0(r7)
10003080:	3a800117 	ldw	r10,4(r7)
10003084:	3a400217 	ldw	r9,8(r7)
10003088:	39c00404 	addi	r7,r7,16
1000308c:	1a000015 	stw	r8,0(r3)
10003090:	3a3fff17 	ldw	r8,-4(r7)
10003094:	1a800115 	stw	r10,4(r3)
10003098:	1a400215 	stw	r9,8(r3)
1000309c:	18c00404 	addi	r3,r3,16
100030a0:	1a3fff15 	stw	r8,-4(r3)
100030a4:	20fff51e 	bne	r4,r3,1000307c <memcpy+0x34>
100030a8:	3100030c 	andi	r4,r6,12
100030ac:	2acb883a 	add	r5,r5,r11
100030b0:	320003cc 	andi	r8,r6,15
100030b4:	20002226 	beq	r4,zero,10003140 <memcpy+0xf8>
100030b8:	2809883a 	mov	r4,r5
100030bc:	1813883a 	mov	r9,r3
100030c0:	21000104 	addi	r4,r4,4
100030c4:	22bfff17 	ldw	r10,-4(r4)
100030c8:	410fc83a 	sub	r7,r8,r4
100030cc:	4a400104 	addi	r9,r9,4
100030d0:	29cf883a 	add	r7,r5,r7
100030d4:	4abfff15 	stw	r10,-4(r9)
100030d8:	39c00128 	cmpgeui	r7,r7,4
100030dc:	383ff81e 	bne	r7,zero,100030c0 <memcpy+0x78>
100030e0:	413fff04 	addi	r4,r8,-4
100030e4:	2008d0ba 	srli	r4,r4,2
100030e8:	318000cc 	andi	r6,r6,3
100030ec:	31ffffc4 	addi	r7,r6,-1
100030f0:	21000044 	addi	r4,r4,1
100030f4:	200890ba 	slli	r4,r4,2
100030f8:	1907883a 	add	r3,r3,r4
100030fc:	290b883a 	add	r5,r5,r4
10003100:	3000041e 	bne	r6,zero,10003114 <memcpy+0xcc>
10003104:	f800283a 	ret
10003108:	2007883a 	mov	r3,r4
1000310c:	31ffffc4 	addi	r7,r6,-1
10003110:	303ffc26 	beq	r6,zero,10003104 <memcpy+0xbc>
10003114:	39c00044 	addi	r7,r7,1
10003118:	19cf883a 	add	r7,r3,r7
1000311c:	29400044 	addi	r5,r5,1
10003120:	29bfffc3 	ldbu	r6,-1(r5)
10003124:	18c00044 	addi	r3,r3,1
10003128:	19bfffc5 	stb	r6,-1(r3)
1000312c:	19fffb1e 	bne	r3,r7,1000311c <memcpy+0xd4>
10003130:	f800283a 	ret
10003134:	31ffffc4 	addi	r7,r6,-1
10003138:	2007883a 	mov	r3,r4
1000313c:	003ff506 	br	10003114 <memcpy+0xcc>
10003140:	400d883a 	mov	r6,r8
10003144:	003ff106 	br	1000310c <memcpy+0xc4>

10003148 <_printf_r>:
10003148:	defffd04 	addi	sp,sp,-12
1000314c:	2805883a 	mov	r2,r5
10003150:	dfc00015 	stw	ra,0(sp)
10003154:	d9800115 	stw	r6,4(sp)
10003158:	d9c00215 	stw	r7,8(sp)
1000315c:	21400217 	ldw	r5,8(r4)
10003160:	d9c00104 	addi	r7,sp,4
10003164:	100d883a 	mov	r6,r2
10003168:	00033240 	call	10003324 <___vfprintf_internal_r>
1000316c:	dfc00017 	ldw	ra,0(sp)
10003170:	dec00304 	addi	sp,sp,12
10003174:	f800283a 	ret

10003178 <printf>:
10003178:	defffc04 	addi	sp,sp,-16
1000317c:	dfc00015 	stw	ra,0(sp)
10003180:	d9400115 	stw	r5,4(sp)
10003184:	d9800215 	stw	r6,8(sp)
10003188:	d9c00315 	stw	r7,12(sp)
1000318c:	00840074 	movhi	r2,4097
10003190:	1093e117 	ldw	r2,20356(r2)
10003194:	200b883a 	mov	r5,r4
10003198:	d9800104 	addi	r6,sp,4
1000319c:	11000217 	ldw	r4,8(r2)
100031a0:	00054840 	call	10005484 <__vfprintf_internal>
100031a4:	dfc00017 	ldw	ra,0(sp)
100031a8:	dec00404 	addi	sp,sp,16
100031ac:	f800283a 	ret

100031b0 <_puts_r>:
100031b0:	defff504 	addi	sp,sp,-44
100031b4:	dc000815 	stw	r16,32(sp)
100031b8:	2021883a 	mov	r16,r4
100031bc:	2809883a 	mov	r4,r5
100031c0:	dc400915 	stw	r17,36(sp)
100031c4:	dfc00a15 	stw	ra,40(sp)
100031c8:	2823883a 	mov	r17,r5
100031cc:	000328c0 	call	1000328c <strlen>
100031d0:	11000044 	addi	r4,r2,1
100031d4:	d8800515 	stw	r2,20(sp)
100031d8:	00800044 	movi	r2,1
100031dc:	00c40074 	movhi	r3,4097
100031e0:	d8800715 	stw	r2,28(sp)
100031e4:	d8800404 	addi	r2,sp,16
100031e8:	18ca0604 	addi	r3,r3,10264
100031ec:	d8800115 	stw	r2,4(sp)
100031f0:	00800084 	movi	r2,2
100031f4:	dc400415 	stw	r17,16(sp)
100031f8:	d8c00615 	stw	r3,24(sp)
100031fc:	d9000315 	stw	r4,12(sp)
10003200:	d8800215 	stw	r2,8(sp)
10003204:	81400217 	ldw	r5,8(r16)
10003208:	80000226 	beq	r16,zero,10003214 <_puts_r+0x64>
1000320c:	80800e17 	ldw	r2,56(r16)
10003210:	10001326 	beq	r2,zero,10003260 <_puts_r+0xb0>
10003214:	2880030b 	ldhu	r2,12(r5)
10003218:	10c8000c 	andi	r3,r2,8192
1000321c:	1800061e 	bne	r3,zero,10003238 <_puts_r+0x88>
10003220:	28c01917 	ldw	r3,100(r5)
10003224:	0137ffc4 	movi	r4,-8193
10003228:	10880014 	ori	r2,r2,8192
1000322c:	1906703a 	and	r3,r3,r4
10003230:	2880030d 	sth	r2,12(r5)
10003234:	28c01915 	stw	r3,100(r5)
10003238:	d9800104 	addi	r6,sp,4
1000323c:	8009883a 	mov	r4,r16
10003240:	00079a00 	call	100079a0 <__sfvwrite_r>
10003244:	10000b1e 	bne	r2,zero,10003274 <_puts_r+0xc4>
10003248:	00800284 	movi	r2,10
1000324c:	dfc00a17 	ldw	ra,40(sp)
10003250:	dc400917 	ldw	r17,36(sp)
10003254:	dc000817 	ldw	r16,32(sp)
10003258:	dec00b04 	addi	sp,sp,44
1000325c:	f800283a 	ret
10003260:	8009883a 	mov	r4,r16
10003264:	d9400015 	stw	r5,0(sp)
10003268:	00075400 	call	10007540 <__sinit>
1000326c:	d9400017 	ldw	r5,0(sp)
10003270:	003fe806 	br	10003214 <_puts_r+0x64>
10003274:	00bfffc4 	movi	r2,-1
10003278:	003ff406 	br	1000324c <_puts_r+0x9c>

1000327c <puts>:
1000327c:	00840074 	movhi	r2,4097
10003280:	200b883a 	mov	r5,r4
10003284:	1113e117 	ldw	r4,20356(r2)
10003288:	00031b01 	jmpi	100031b0 <_puts_r>

1000328c <strlen>:
1000328c:	208000cc 	andi	r2,r4,3
10003290:	10002026 	beq	r2,zero,10003314 <strlen+0x88>
10003294:	20800007 	ldb	r2,0(r4)
10003298:	10002026 	beq	r2,zero,1000331c <strlen+0x90>
1000329c:	2005883a 	mov	r2,r4
100032a0:	00000206 	br	100032ac <strlen+0x20>
100032a4:	10c00007 	ldb	r3,0(r2)
100032a8:	18001826 	beq	r3,zero,1000330c <strlen+0x80>
100032ac:	10800044 	addi	r2,r2,1
100032b0:	10c000cc 	andi	r3,r2,3
100032b4:	183ffb1e 	bne	r3,zero,100032a4 <strlen+0x18>
100032b8:	11400017 	ldw	r5,0(r2)
100032bc:	01ffbff4 	movhi	r7,65279
100032c0:	39ffbfc4 	addi	r7,r7,-257
100032c4:	29c7883a 	add	r3,r5,r7
100032c8:	01a02074 	movhi	r6,32897
100032cc:	014a303a 	nor	r5,zero,r5
100032d0:	1946703a 	and	r3,r3,r5
100032d4:	31a02004 	addi	r6,r6,-32640
100032d8:	1986703a 	and	r3,r3,r6
100032dc:	1800091e 	bne	r3,zero,10003304 <strlen+0x78>
100032e0:	10800104 	addi	r2,r2,4
100032e4:	11400017 	ldw	r5,0(r2)
100032e8:	29c7883a 	add	r3,r5,r7
100032ec:	014a303a 	nor	r5,zero,r5
100032f0:	1946703a 	and	r3,r3,r5
100032f4:	1986703a 	and	r3,r3,r6
100032f8:	183ff926 	beq	r3,zero,100032e0 <strlen+0x54>
100032fc:	00000106 	br	10003304 <strlen+0x78>
10003300:	10800044 	addi	r2,r2,1
10003304:	10c00007 	ldb	r3,0(r2)
10003308:	183ffd1e 	bne	r3,zero,10003300 <strlen+0x74>
1000330c:	1105c83a 	sub	r2,r2,r4
10003310:	f800283a 	ret
10003314:	2005883a 	mov	r2,r4
10003318:	003fe706 	br	100032b8 <strlen+0x2c>
1000331c:	0005883a 	mov	r2,zero
10003320:	f800283a 	ret

10003324 <___vfprintf_internal_r>:
10003324:	deffbd04 	addi	sp,sp,-268
10003328:	dfc04215 	stw	ra,264(sp)
1000332c:	dd003d15 	stw	r20,244(sp)
10003330:	dcc03c15 	stw	r19,240(sp)
10003334:	dc003915 	stw	r16,228(sp)
10003338:	d9000515 	stw	r4,20(sp)
1000333c:	2021883a 	mov	r16,r4
10003340:	2827883a 	mov	r19,r5
10003344:	3029883a 	mov	r20,r6
10003348:	d9c00615 	stw	r7,24(sp)
1000334c:	df004115 	stw	fp,260(sp)
10003350:	ddc04015 	stw	r23,256(sp)
10003354:	dd803f15 	stw	r22,252(sp)
10003358:	dd403e15 	stw	r21,248(sp)
1000335c:	dc803b15 	stw	r18,236(sp)
10003360:	dc403a15 	stw	r17,232(sp)
10003364:	0007fc40 	call	10007fc4 <_localeconv_r>
10003368:	10800017 	ldw	r2,0(r2)
1000336c:	1009883a 	mov	r4,r2
10003370:	d8800d15 	stw	r2,52(sp)
10003374:	000328c0 	call	1000328c <strlen>
10003378:	d8800b15 	stw	r2,44(sp)
1000337c:	80000226 	beq	r16,zero,10003388 <___vfprintf_internal_r+0x64>
10003380:	80800e17 	ldw	r2,56(r16)
10003384:	1002da26 	beq	r2,zero,10003ef0 <___vfprintf_internal_r+0xbcc>
10003388:	9880030b 	ldhu	r2,12(r19)
1000338c:	10c8000c 	andi	r3,r2,8192
10003390:	1800061e 	bne	r3,zero,100033ac <___vfprintf_internal_r+0x88>
10003394:	98c01917 	ldw	r3,100(r19)
10003398:	0137ffc4 	movi	r4,-8193
1000339c:	10880014 	ori	r2,r2,8192
100033a0:	1906703a 	and	r3,r3,r4
100033a4:	9880030d 	sth	r2,12(r19)
100033a8:	98c01915 	stw	r3,100(r19)
100033ac:	10c0020c 	andi	r3,r2,8
100033b0:	18009a26 	beq	r3,zero,1000361c <___vfprintf_internal_r+0x2f8>
100033b4:	98c00417 	ldw	r3,16(r19)
100033b8:	18009826 	beq	r3,zero,1000361c <___vfprintf_internal_r+0x2f8>
100033bc:	1080068c 	andi	r2,r2,26
100033c0:	10800298 	cmpnei	r2,r2,10
100033c4:	10009d26 	beq	r2,zero,1000363c <___vfprintf_internal_r+0x318>
100033c8:	ddc02904 	addi	r23,sp,164
100033cc:	ddc01c15 	stw	r23,112(sp)
100033d0:	d8001e15 	stw	zero,120(sp)
100033d4:	d8001d15 	stw	zero,116(sp)
100033d8:	d8000815 	stw	zero,32(sp)
100033dc:	d8000915 	stw	zero,36(sp)
100033e0:	d8000a15 	stw	zero,40(sp)
100033e4:	b811883a 	mov	r8,r23
100033e8:	d8000c15 	stw	zero,48(sp)
100033ec:	d8001115 	stw	zero,68(sp)
100033f0:	d8000415 	stw	zero,16(sp)
100033f4:	a02d883a 	mov	r22,r20
100033f8:	b0800007 	ldb	r2,0(r22)
100033fc:	1000a226 	beq	r2,zero,10003688 <___vfprintf_internal_r+0x364>
10003400:	10800960 	cmpeqi	r2,r2,37
10003404:	10052e1e 	bne	r2,zero,100048c0 <___vfprintf_internal_r+0x159c>
10003408:	b021883a 	mov	r16,r22
1000340c:	00000206 	br	10003418 <___vfprintf_internal_r+0xf4>
10003410:	18009326 	beq	r3,zero,10003660 <___vfprintf_internal_r+0x33c>
10003414:	9021883a 	mov	r16,r18
10003418:	80800047 	ldb	r2,1(r16)
1000341c:	84800044 	addi	r18,r16,1
10003420:	10c00958 	cmpnei	r3,r2,37
10003424:	103ffa1e 	bne	r2,zero,10003410 <___vfprintf_internal_r+0xec>
10003428:	95a3c83a 	sub	r17,r18,r22
1000342c:	88009626 	beq	r17,zero,10003688 <___vfprintf_internal_r+0x364>
10003430:	d8c01e17 	ldw	r3,120(sp)
10003434:	d8801d17 	ldw	r2,116(sp)
10003438:	45800015 	stw	r22,0(r8)
1000343c:	1c47883a 	add	r3,r3,r17
10003440:	10800044 	addi	r2,r2,1
10003444:	d8801d15 	stw	r2,116(sp)
10003448:	44400115 	stw	r17,4(r8)
1000344c:	d8c01e15 	stw	r3,120(sp)
10003450:	10800208 	cmpgei	r2,r2,8
10003454:	1000851e 	bne	r2,zero,1000366c <___vfprintf_internal_r+0x348>
10003458:	42000204 	addi	r8,r8,8
1000345c:	d8c00417 	ldw	r3,16(sp)
10003460:	80800047 	ldb	r2,1(r16)
10003464:	1c47883a 	add	r3,r3,r17
10003468:	d8c00415 	stw	r3,16(sp)
1000346c:	10008626 	beq	r2,zero,10003688 <___vfprintf_internal_r+0x364>
10003470:	92800047 	ldb	r10,1(r18)
10003474:	95800044 	addi	r22,r18,1
10003478:	d8001545 	stb	zero,85(sp)
1000347c:	0009883a 	mov	r4,zero
10003480:	000b883a 	mov	r5,zero
10003484:	02ffffc4 	movi	r11,-1
10003488:	0023883a 	mov	r17,zero
1000348c:	0019883a 	mov	r12,zero
10003490:	b5800044 	addi	r22,r22,1
10003494:	5039883a 	mov	fp,r10
10003498:	e0bff804 	addi	r2,fp,-32
1000349c:	10c01668 	cmpgeui	r3,r2,89
100034a0:	18009b1e 	bne	r3,zero,10003710 <___vfprintf_internal_r+0x3ec>
100034a4:	100490ba 	slli	r2,r2,2
100034a8:	00c40034 	movhi	r3,4096
100034ac:	10c7883a 	add	r3,r2,r3
100034b0:	188d2e17 	ldw	r2,13496(r3)
100034b4:	1000683a 	jmp	r2
100034b8:	100037e0 	cmpeqi	zero,r2,223
100034bc:	10003710 	cmplti	zero,r2,220
100034c0:	10003710 	cmplti	zero,r2,220
100034c4:	100037d4 	ori	zero,r2,223
100034c8:	10003710 	cmplti	zero,r2,220
100034cc:	10003710 	cmplti	zero,r2,220
100034d0:	10003710 	cmplti	zero,r2,220
100034d4:	10003710 	cmplti	zero,r2,220
100034d8:	10003710 	cmplti	zero,r2,220
100034dc:	10003710 	cmplti	zero,r2,220
100034e0:	100037ac 	andhi	zero,r2,222
100034e4:	1000379c 	xori	zero,r2,222
100034e8:	10003710 	cmplti	zero,r2,220
100034ec:	10003784 	addi	zero,r2,222
100034f0:	10003740 	call	11000374 <_gp+0xfe33f8>
100034f4:	10003710 	cmplti	zero,r2,220
100034f8:	10003734 	orhi	zero,r2,220
100034fc:	100036e0 	cmpeqi	zero,r2,219
10003500:	100036e0 	cmpeqi	zero,r2,219
10003504:	100036e0 	cmpeqi	zero,r2,219
10003508:	100036e0 	cmpeqi	zero,r2,219
1000350c:	100036e0 	cmpeqi	zero,r2,219
10003510:	100036e0 	cmpeqi	zero,r2,219
10003514:	100036e0 	cmpeqi	zero,r2,219
10003518:	100036e0 	cmpeqi	zero,r2,219
1000351c:	100036e0 	cmpeqi	zero,r2,219
10003520:	10003710 	cmplti	zero,r2,220
10003524:	10003710 	cmplti	zero,r2,220
10003528:	10003710 	cmplti	zero,r2,220
1000352c:	10003710 	cmplti	zero,r2,220
10003530:	10003710 	cmplti	zero,r2,220
10003534:	10003710 	cmplti	zero,r2,220
10003538:	10003710 	cmplti	zero,r2,220
1000353c:	10003710 	cmplti	zero,r2,220
10003540:	10003710 	cmplti	zero,r2,220
10003544:	10003710 	cmplti	zero,r2,220
10003548:	10003cf4 	orhi	zero,r2,243
1000354c:	10003c14 	ori	zero,r2,240
10003550:	10003710 	cmplti	zero,r2,220
10003554:	10003c14 	ori	zero,r2,240
10003558:	10003710 	cmplti	zero,r2,220
1000355c:	10003710 	cmplti	zero,r2,220
10003560:	10003710 	cmplti	zero,r2,220
10003564:	10003710 	cmplti	zero,r2,220
10003568:	10003c08 	cmpgei	zero,r2,240
1000356c:	10003710 	cmplti	zero,r2,220
10003570:	10003710 	cmplti	zero,r2,220
10003574:	10003bd4 	ori	zero,r2,239
10003578:	10003710 	cmplti	zero,r2,220
1000357c:	10003710 	cmplti	zero,r2,220
10003580:	10003710 	cmplti	zero,r2,220
10003584:	10003710 	cmplti	zero,r2,220
10003588:	10003710 	cmplti	zero,r2,220
1000358c:	10003e14 	ori	zero,r2,248
10003590:	10003710 	cmplti	zero,r2,220
10003594:	10003710 	cmplti	zero,r2,220
10003598:	10003dcc 	andi	zero,r2,247
1000359c:	10003710 	cmplti	zero,r2,220
100035a0:	10003710 	cmplti	zero,r2,220
100035a4:	10003710 	cmplti	zero,r2,220
100035a8:	10003710 	cmplti	zero,r2,220
100035ac:	10003710 	cmplti	zero,r2,220
100035b0:	10003710 	cmplti	zero,r2,220
100035b4:	10003710 	cmplti	zero,r2,220
100035b8:	10003710 	cmplti	zero,r2,220
100035bc:	10003710 	cmplti	zero,r2,220
100035c0:	10003710 	cmplti	zero,r2,220
100035c4:	10003964 	muli	zero,r2,229
100035c8:	100038f0 	cmpltui	zero,r2,227
100035cc:	10003c14 	ori	zero,r2,240
100035d0:	10003c14 	ori	zero,r2,240
100035d4:	10003c14 	ori	zero,r2,240
100035d8:	10003ee4 	muli	zero,r2,251
100035dc:	100038f0 	cmpltui	zero,r2,227
100035e0:	10003710 	cmplti	zero,r2,220
100035e4:	10003710 	cmplti	zero,r2,220
100035e8:	10003ed0 	cmplti	zero,r2,251
100035ec:	10003710 	cmplti	zero,r2,220
100035f0:	10003b94 	ori	zero,r2,238
100035f4:	10003b54 	ori	zero,r2,237
100035f8:	10003e54 	ori	zero,r2,249
100035fc:	10003e48 	cmpgei	zero,r2,249
10003600:	10003710 	cmplti	zero,r2,220
10003604:	10003894 	ori	zero,r2,226
10003608:	10003710 	cmplti	zero,r2,220
1000360c:	10003854 	ori	zero,r2,225
10003610:	10003710 	cmplti	zero,r2,220
10003614:	10003710 	cmplti	zero,r2,220
10003618:	1000380c 	andi	zero,r2,224
1000361c:	d9000517 	ldw	r4,20(sp)
10003620:	980b883a 	mov	r5,r19
10003624:	000555c0 	call	1000555c <__swsetup_r>
10003628:	10074c1e 	bne	r2,zero,1000535c <___vfprintf_internal_r+0x2038>
1000362c:	9880030b 	ldhu	r2,12(r19)
10003630:	1080068c 	andi	r2,r2,26
10003634:	10800298 	cmpnei	r2,r2,10
10003638:	103f631e 	bne	r2,zero,100033c8 <___vfprintf_internal_r+0xa4>
1000363c:	9880038f 	ldh	r2,14(r19)
10003640:	103f6116 	blt	r2,zero,100033c8 <___vfprintf_internal_r+0xa4>
10003644:	d9c00617 	ldw	r7,24(sp)
10003648:	d9000517 	ldw	r4,20(sp)
1000364c:	a00d883a 	mov	r6,r20
10003650:	980b883a 	mov	r5,r19
10003654:	000549c0 	call	1000549c <__sbprintf>
10003658:	d8800415 	stw	r2,16(sp)
1000365c:	00001306 	br	100036ac <___vfprintf_internal_r+0x388>
10003660:	95a3c83a 	sub	r17,r18,r22
10003664:	883f8226 	beq	r17,zero,10003470 <___vfprintf_internal_r+0x14c>
10003668:	003f7106 	br	10003430 <___vfprintf_internal_r+0x10c>
1000366c:	d9000517 	ldw	r4,20(sp)
10003670:	d9801c04 	addi	r6,sp,112
10003674:	980b883a 	mov	r5,r19
10003678:	000a49c0 	call	1000a49c <__sprint_r>
1000367c:	1000081e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10003680:	b811883a 	mov	r8,r23
10003684:	003f7506 	br	1000345c <___vfprintf_internal_r+0x138>
10003688:	d8801e17 	ldw	r2,120(sp)
1000368c:	10000426 	beq	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10003690:	d9000517 	ldw	r4,20(sp)
10003694:	d9801c04 	addi	r6,sp,112
10003698:	980b883a 	mov	r5,r19
1000369c:	000a49c0 	call	1000a49c <__sprint_r>
100036a0:	9880030b 	ldhu	r2,12(r19)
100036a4:	1080100c 	andi	r2,r2,64
100036a8:	10072c1e 	bne	r2,zero,1000535c <___vfprintf_internal_r+0x2038>
100036ac:	d8800417 	ldw	r2,16(sp)
100036b0:	dfc04217 	ldw	ra,264(sp)
100036b4:	df004117 	ldw	fp,260(sp)
100036b8:	ddc04017 	ldw	r23,256(sp)
100036bc:	dd803f17 	ldw	r22,252(sp)
100036c0:	dd403e17 	ldw	r21,248(sp)
100036c4:	dd003d17 	ldw	r20,244(sp)
100036c8:	dcc03c17 	ldw	r19,240(sp)
100036cc:	dc803b17 	ldw	r18,236(sp)
100036d0:	dc403a17 	ldw	r17,232(sp)
100036d4:	dc003917 	ldw	r16,228(sp)
100036d8:	dec04304 	addi	sp,sp,268
100036dc:	f800283a 	ret
100036e0:	0023883a 	mov	r17,zero
100036e4:	e0bff404 	addi	r2,fp,-48
100036e8:	b5800044 	addi	r22,r22,1
100036ec:	8c4002a4 	muli	r17,r17,10
100036f0:	b73fffc7 	ldb	fp,-1(r22)
100036f4:	1463883a 	add	r17,r2,r17
100036f8:	e0bff404 	addi	r2,fp,-48
100036fc:	10c002b0 	cmpltui	r3,r2,10
10003700:	183ff91e 	bne	r3,zero,100036e8 <___vfprintf_internal_r+0x3c4>
10003704:	e0bff804 	addi	r2,fp,-32
10003708:	10c01668 	cmpgeui	r3,r2,89
1000370c:	183f6526 	beq	r3,zero,100034a4 <___vfprintf_internal_r+0x180>
10003710:	21003fcc 	andi	r4,r4,255
10003714:	20066d1e 	bne	r4,zero,100050cc <___vfprintf_internal_r+0x1da8>
10003718:	e03fdb26 	beq	fp,zero,10003688 <___vfprintf_internal_r+0x364>
1000371c:	df001f05 	stb	fp,124(sp)
10003720:	d8001545 	stb	zero,85(sp)
10003724:	05400044 	movi	r21,1
10003728:	05000044 	movi	r20,1
1000372c:	dc001f04 	addi	r16,sp,124
10003730:	00009506 	br	10003988 <___vfprintf_internal_r+0x664>
10003734:	63002014 	ori	r12,r12,128
10003738:	b2800007 	ldb	r10,0(r22)
1000373c:	003f5406 	br	10003490 <___vfprintf_internal_r+0x16c>
10003740:	b7000007 	ldb	fp,0(r22)
10003744:	b0c00044 	addi	r3,r22,1
10003748:	e0800aa0 	cmpeqi	r2,fp,42
1000374c:	1007411e 	bne	r2,zero,10005454 <___vfprintf_internal_r+0x2130>
10003750:	e0bff404 	addi	r2,fp,-48
10003754:	118002b0 	cmpltui	r6,r2,10
10003758:	182d883a 	mov	r22,r3
1000375c:	0017883a 	mov	r11,zero
10003760:	303f4d26 	beq	r6,zero,10003498 <___vfprintf_internal_r+0x174>
10003764:	b5800044 	addi	r22,r22,1
10003768:	5ac002a4 	muli	r11,r11,10
1000376c:	b73fffc7 	ldb	fp,-1(r22)
10003770:	5897883a 	add	r11,r11,r2
10003774:	e0bff404 	addi	r2,fp,-48
10003778:	10c002b0 	cmpltui	r3,r2,10
1000377c:	183ff91e 	bne	r3,zero,10003764 <___vfprintf_internal_r+0x440>
10003780:	003f4506 	br	10003498 <___vfprintf_internal_r+0x174>
10003784:	b7000003 	ldbu	fp,0(r22)
10003788:	e2803fcc 	andi	r10,fp,255
1000378c:	5280201c 	xori	r10,r10,128
10003790:	63000114 	ori	r12,r12,4
10003794:	52bfe004 	addi	r10,r10,-128
10003798:	003f3d06 	br	10003490 <___vfprintf_internal_r+0x16c>
1000379c:	01000044 	movi	r4,1
100037a0:	01400ac4 	movi	r5,43
100037a4:	b2800007 	ldb	r10,0(r22)
100037a8:	003f3906 	br	10003490 <___vfprintf_internal_r+0x16c>
100037ac:	d8800617 	ldw	r2,24(sp)
100037b0:	b7000003 	ldbu	fp,0(r22)
100037b4:	14400017 	ldw	r17,0(r2)
100037b8:	10800104 	addi	r2,r2,4
100037bc:	8804d716 	blt	r17,zero,10004b1c <___vfprintf_internal_r+0x17f8>
100037c0:	d8800615 	stw	r2,24(sp)
100037c4:	e2803fcc 	andi	r10,fp,255
100037c8:	5280201c 	xori	r10,r10,128
100037cc:	52bfe004 	addi	r10,r10,-128
100037d0:	003f2f06 	br	10003490 <___vfprintf_internal_r+0x16c>
100037d4:	63000054 	ori	r12,r12,1
100037d8:	b2800007 	ldb	r10,0(r22)
100037dc:	003f2c06 	br	10003490 <___vfprintf_internal_r+0x16c>
100037e0:	28803fcc 	andi	r2,r5,255
100037e4:	1080201c 	xori	r2,r2,128
100037e8:	10bfe004 	addi	r2,r2,-128
100037ec:	b7000003 	ldbu	fp,0(r22)
100037f0:	103ff41e 	bne	r2,zero,100037c4 <___vfprintf_internal_r+0x4a0>
100037f4:	e2803fcc 	andi	r10,fp,255
100037f8:	5280201c 	xori	r10,r10,128
100037fc:	01000044 	movi	r4,1
10003800:	01400804 	movi	r5,32
10003804:	52bfe004 	addi	r10,r10,-128
10003808:	003f2106 	br	10003490 <___vfprintf_internal_r+0x16c>
1000380c:	21003fcc 	andi	r4,r4,255
10003810:	2006b31e 	bne	r4,zero,100052e0 <___vfprintf_internal_r+0x1fbc>
10003814:	00840074 	movhi	r2,4097
10003818:	108a1004 	addi	r2,r2,10304
1000381c:	d8800c15 	stw	r2,48(sp)
10003820:	6080080c 	andi	r2,r12,32
10003824:	10017026 	beq	r2,zero,10003de8 <___vfprintf_internal_r+0xac4>
10003828:	d8800617 	ldw	r2,24(sp)
1000382c:	15400017 	ldw	r21,0(r2)
10003830:	15000117 	ldw	r20,4(r2)
10003834:	10800204 	addi	r2,r2,8
10003838:	d8800615 	stw	r2,24(sp)
1000383c:	6080004c 	andi	r2,r12,1
10003840:	10000226 	beq	r2,zero,1000384c <___vfprintf_internal_r+0x528>
10003844:	ad04b03a 	or	r2,r21,r20
10003848:	1004a71e 	bne	r2,zero,10004ae8 <___vfprintf_internal_r+0x17c4>
1000384c:	00800084 	movi	r2,2
10003850:	00018f06 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003854:	21003fcc 	andi	r4,r4,255
10003858:	20069f1e 	bne	r4,zero,100052d8 <___vfprintf_internal_r+0x1fb4>
1000385c:	6080080c 	andi	r2,r12,32
10003860:	1001b41e 	bne	r2,zero,10003f34 <___vfprintf_internal_r+0xc10>
10003864:	d8800617 	ldw	r2,24(sp)
10003868:	60c0040c 	andi	r3,r12,16
1000386c:	15400017 	ldw	r21,0(r2)
10003870:	10800104 	addi	r2,r2,4
10003874:	18016e1e 	bne	r3,zero,10003e30 <___vfprintf_internal_r+0xb0c>
10003878:	60c0100c 	andi	r3,r12,64
1000387c:	18059f26 	beq	r3,zero,10004efc <___vfprintf_internal_r+0x1bd8>
10003880:	d8800615 	stw	r2,24(sp)
10003884:	ad7fffcc 	andi	r21,r21,65535
10003888:	0029883a 	mov	r20,zero
1000388c:	00800044 	movi	r2,1
10003890:	00017f06 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003894:	d8800617 	ldw	r2,24(sp)
10003898:	d8001545 	stb	zero,85(sp)
1000389c:	14000017 	ldw	r16,0(r2)
100038a0:	14800104 	addi	r18,r2,4
100038a4:	8004c726 	beq	r16,zero,10004bc4 <___vfprintf_internal_r+0x18a0>
100038a8:	da000e15 	stw	r8,56(sp)
100038ac:	db000715 	stw	r12,28(sp)
100038b0:	58bfffe0 	cmpeqi	r2,r11,-1
100038b4:	1005691e 	bne	r2,zero,10004e5c <___vfprintf_internal_r+0x1b38>
100038b8:	580d883a 	mov	r6,r11
100038bc:	000b883a 	mov	r5,zero
100038c0:	8009883a 	mov	r4,r16
100038c4:	dac00615 	stw	r11,24(sp)
100038c8:	00089a40 	call	100089a4 <memchr>
100038cc:	dac00617 	ldw	r11,24(sp)
100038d0:	db000717 	ldw	r12,28(sp)
100038d4:	da000e17 	ldw	r8,56(sp)
100038d8:	10066726 	beq	r2,zero,10005278 <___vfprintf_internal_r+0x1f54>
100038dc:	1429c83a 	sub	r20,r2,r16
100038e0:	a02b883a 	mov	r21,r20
100038e4:	a005f716 	blt	r20,zero,100050c4 <___vfprintf_internal_r+0x1da0>
100038e8:	dc800615 	stw	r18,24(sp)
100038ec:	00002606 	br	10003988 <___vfprintf_internal_r+0x664>
100038f0:	21003fcc 	andi	r4,r4,255
100038f4:	2006761e 	bne	r4,zero,100052d0 <___vfprintf_internal_r+0x1fac>
100038f8:	6080080c 	andi	r2,r12,32
100038fc:	10017f1e 	bne	r2,zero,10003efc <___vfprintf_internal_r+0xbd8>
10003900:	d8800617 	ldw	r2,24(sp)
10003904:	60c0040c 	andi	r3,r12,16
10003908:	10800104 	addi	r2,r2,4
1000390c:	1801001e 	bne	r3,zero,10003d10 <___vfprintf_internal_r+0x9ec>
10003910:	60c0100c 	andi	r3,r12,64
10003914:	1800fe26 	beq	r3,zero,10003d10 <___vfprintf_internal_r+0x9ec>
10003918:	d8c00617 	ldw	r3,24(sp)
1000391c:	d8800615 	stw	r2,24(sp)
10003920:	1d40000f 	ldh	r21,0(r3)
10003924:	a829d7fa 	srai	r20,r21,31
10003928:	a005883a 	mov	r2,r20
1000392c:	1000fe16 	blt	r2,zero,10003d28 <___vfprintf_internal_r+0xa04>
10003930:	58bfffd8 	cmpnei	r2,r11,-1
10003934:	db401543 	ldbu	r13,85(sp)
10003938:	10018526 	beq	r2,zero,10003f50 <___vfprintf_internal_r+0xc2c>
1000393c:	00ffdfc4 	movi	r3,-129
10003940:	ad04b03a 	or	r2,r21,r20
10003944:	60d8703a 	and	r12,r12,r3
10003948:	1001811e 	bne	r2,zero,10003f50 <___vfprintf_internal_r+0xc2c>
1000394c:	5801831e 	bne	r11,zero,10003f5c <___vfprintf_internal_r+0xc38>
10003950:	6025883a 	mov	r18,r12
10003954:	0017883a 	mov	r11,zero
10003958:	0029883a 	mov	r20,zero
1000395c:	b821883a 	mov	r16,r23
10003960:	00018306 	br	10003f70 <___vfprintf_internal_r+0xc4c>
10003964:	d8c00617 	ldw	r3,24(sp)
10003968:	d8001545 	stb	zero,85(sp)
1000396c:	05400044 	movi	r21,1
10003970:	18800017 	ldw	r2,0(r3)
10003974:	18c00104 	addi	r3,r3,4
10003978:	d8c00615 	stw	r3,24(sp)
1000397c:	d8801f05 	stb	r2,124(sp)
10003980:	05000044 	movi	r20,1
10003984:	dc001f04 	addi	r16,sp,124
10003988:	6025883a 	mov	r18,r12
1000398c:	0017883a 	mov	r11,zero
10003990:	d8000715 	stw	zero,28(sp)
10003994:	9380008c 	andi	r14,r18,2
10003998:	70000126 	beq	r14,zero,100039a0 <___vfprintf_internal_r+0x67c>
1000399c:	ad400084 	addi	r21,r21,2
100039a0:	9340210c 	andi	r13,r18,132
100039a4:	d8c01e17 	ldw	r3,120(sp)
100039a8:	6800021e 	bne	r13,zero,100039b4 <___vfprintf_internal_r+0x690>
100039ac:	8d4fc83a 	sub	r7,r17,r21
100039b0:	01c2ce16 	blt	zero,r7,100044ec <___vfprintf_internal_r+0x11c8>
100039b4:	d8801547 	ldb	r2,85(sp)
100039b8:	10000c26 	beq	r2,zero,100039ec <___vfprintf_internal_r+0x6c8>
100039bc:	d8801d17 	ldw	r2,116(sp)
100039c0:	d9001544 	addi	r4,sp,85
100039c4:	18c00044 	addi	r3,r3,1
100039c8:	10800044 	addi	r2,r2,1
100039cc:	41000015 	stw	r4,0(r8)
100039d0:	01000044 	movi	r4,1
100039d4:	d8801d15 	stw	r2,116(sp)
100039d8:	41000115 	stw	r4,4(r8)
100039dc:	d8c01e15 	stw	r3,120(sp)
100039e0:	10800208 	cmpgei	r2,r2,8
100039e4:	1002fb1e 	bne	r2,zero,100045d4 <___vfprintf_internal_r+0x12b0>
100039e8:	42000204 	addi	r8,r8,8
100039ec:	70000c26 	beq	r14,zero,10003a20 <___vfprintf_internal_r+0x6fc>
100039f0:	d8801d17 	ldw	r2,116(sp)
100039f4:	d9001584 	addi	r4,sp,86
100039f8:	18c00084 	addi	r3,r3,2
100039fc:	10800044 	addi	r2,r2,1
10003a00:	41000015 	stw	r4,0(r8)
10003a04:	01000084 	movi	r4,2
10003a08:	d8801d15 	stw	r2,116(sp)
10003a0c:	41000115 	stw	r4,4(r8)
10003a10:	d8c01e15 	stw	r3,120(sp)
10003a14:	10800208 	cmpgei	r2,r2,8
10003a18:	1002fc1e 	bne	r2,zero,1000460c <___vfprintf_internal_r+0x12e8>
10003a1c:	42000204 	addi	r8,r8,8
10003a20:	6b402018 	cmpnei	r13,r13,128
10003a24:	6801cf26 	beq	r13,zero,10004164 <___vfprintf_internal_r+0xe40>
10003a28:	5d0fc83a 	sub	r7,r11,r20
10003a2c:	01c20616 	blt	zero,r7,10004248 <___vfprintf_internal_r+0xf24>
10003a30:	9080400c 	andi	r2,r18,256
10003a34:	10017c1e 	bne	r2,zero,10004028 <___vfprintf_internal_r+0xd04>
10003a38:	d8801d17 	ldw	r2,116(sp)
10003a3c:	1d07883a 	add	r3,r3,r20
10003a40:	44000015 	stw	r16,0(r8)
10003a44:	10800044 	addi	r2,r2,1
10003a48:	d8801d15 	stw	r2,116(sp)
10003a4c:	45000115 	stw	r20,4(r8)
10003a50:	d8c01e15 	stw	r3,120(sp)
10003a54:	10800208 	cmpgei	r2,r2,8
10003a58:	1002571e 	bne	r2,zero,100043b8 <___vfprintf_internal_r+0x1094>
10003a5c:	42000204 	addi	r8,r8,8
10003a60:	9480010c 	andi	r18,r18,4
10003a64:	90000226 	beq	r18,zero,10003a70 <___vfprintf_internal_r+0x74c>
10003a68:	8d61c83a 	sub	r16,r17,r21
10003a6c:	04000916 	blt	zero,r16,10003a94 <___vfprintf_internal_r+0x770>
10003a70:	8d40010e 	bge	r17,r21,10003a78 <___vfprintf_internal_r+0x754>
10003a74:	a823883a 	mov	r17,r21
10003a78:	d8800417 	ldw	r2,16(sp)
10003a7c:	1445883a 	add	r2,r2,r17
10003a80:	d8800415 	stw	r2,16(sp)
10003a84:	1802241e 	bne	r3,zero,10004318 <___vfprintf_internal_r+0xff4>
10003a88:	d8001d15 	stw	zero,116(sp)
10003a8c:	b811883a 	mov	r8,r23
10003a90:	003e5906 	br	100033f8 <___vfprintf_internal_r+0xd4>
10003a94:	03040074 	movhi	r12,4097
10003a98:	81000450 	cmplti	r4,r16,17
10003a9c:	630a1b84 	addi	r12,r12,10350
10003aa0:	d8801d17 	ldw	r2,116(sp)
10003aa4:	20001c1e 	bne	r4,zero,10003b18 <___vfprintf_internal_r+0x7f4>
10003aa8:	04800404 	movi	r18,16
10003aac:	dd000517 	ldw	r20,20(sp)
10003ab0:	6039883a 	mov	fp,r12
10003ab4:	00000406 	br	10003ac8 <___vfprintf_internal_r+0x7a4>
10003ab8:	843ffc04 	addi	r16,r16,-16
10003abc:	81000448 	cmpgei	r4,r16,17
10003ac0:	42000204 	addi	r8,r8,8
10003ac4:	20001326 	beq	r4,zero,10003b14 <___vfprintf_internal_r+0x7f0>
10003ac8:	10800044 	addi	r2,r2,1
10003acc:	18c00404 	addi	r3,r3,16
10003ad0:	47000015 	stw	fp,0(r8)
10003ad4:	44800115 	stw	r18,4(r8)
10003ad8:	d8c01e15 	stw	r3,120(sp)
10003adc:	d8801d15 	stw	r2,116(sp)
10003ae0:	11000208 	cmpgei	r4,r2,8
10003ae4:	203ff426 	beq	r4,zero,10003ab8 <___vfprintf_internal_r+0x794>
10003ae8:	d9801c04 	addi	r6,sp,112
10003aec:	980b883a 	mov	r5,r19
10003af0:	a009883a 	mov	r4,r20
10003af4:	000a49c0 	call	1000a49c <__sprint_r>
10003af8:	103ee91e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10003afc:	843ffc04 	addi	r16,r16,-16
10003b00:	81000448 	cmpgei	r4,r16,17
10003b04:	d8c01e17 	ldw	r3,120(sp)
10003b08:	d8801d17 	ldw	r2,116(sp)
10003b0c:	b811883a 	mov	r8,r23
10003b10:	203fed1e 	bne	r4,zero,10003ac8 <___vfprintf_internal_r+0x7a4>
10003b14:	e019883a 	mov	r12,fp
10003b18:	10800044 	addi	r2,r2,1
10003b1c:	1c07883a 	add	r3,r3,r16
10003b20:	d8801d15 	stw	r2,116(sp)
10003b24:	43000015 	stw	r12,0(r8)
10003b28:	44000115 	stw	r16,4(r8)
10003b2c:	d8c01e15 	stw	r3,120(sp)
10003b30:	10800210 	cmplti	r2,r2,8
10003b34:	103fce1e 	bne	r2,zero,10003a70 <___vfprintf_internal_r+0x74c>
10003b38:	d9000517 	ldw	r4,20(sp)
10003b3c:	d9801c04 	addi	r6,sp,112
10003b40:	980b883a 	mov	r5,r19
10003b44:	000a49c0 	call	1000a49c <__sprint_r>
10003b48:	103ed51e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10003b4c:	d8c01e17 	ldw	r3,120(sp)
10003b50:	003fc706 	br	10003a70 <___vfprintf_internal_r+0x74c>
10003b54:	21003fcc 	andi	r4,r4,255
10003b58:	2005d91e 	bne	r4,zero,100052c0 <___vfprintf_internal_r+0x1f9c>
10003b5c:	6080080c 	andi	r2,r12,32
10003b60:	1000ed1e 	bne	r2,zero,10003f18 <___vfprintf_internal_r+0xbf4>
10003b64:	d8800617 	ldw	r2,24(sp)
10003b68:	60c0040c 	andi	r3,r12,16
10003b6c:	15400017 	ldw	r21,0(r2)
10003b70:	10800104 	addi	r2,r2,4
10003b74:	18001e1e 	bne	r3,zero,10003bf0 <___vfprintf_internal_r+0x8cc>
10003b78:	60c0100c 	andi	r3,r12,64
10003b7c:	1804db26 	beq	r3,zero,10004eec <___vfprintf_internal_r+0x1bc8>
10003b80:	d8800615 	stw	r2,24(sp)
10003b84:	ad7fffcc 	andi	r21,r21,65535
10003b88:	0029883a 	mov	r20,zero
10003b8c:	0005883a 	mov	r2,zero
10003b90:	0000bf06 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003b94:	21003fcc 	andi	r4,r4,255
10003b98:	2005cb1e 	bne	r4,zero,100052c8 <___vfprintf_internal_r+0x1fa4>
10003b9c:	d9000617 	ldw	r4,24(sp)
10003ba0:	6080080c 	andi	r2,r12,32
10003ba4:	20c00104 	addi	r3,r4,4
10003ba8:	1003d51e 	bne	r2,zero,10004b00 <___vfprintf_internal_r+0x17dc>
10003bac:	6080040c 	andi	r2,r12,16
10003bb0:	1004301e 	bne	r2,zero,10004c74 <___vfprintf_internal_r+0x1950>
10003bb4:	6300100c 	andi	r12,r12,64
10003bb8:	60042e26 	beq	r12,zero,10004c74 <___vfprintf_internal_r+0x1950>
10003bbc:	d8800617 	ldw	r2,24(sp)
10003bc0:	d8c00615 	stw	r3,24(sp)
10003bc4:	d8c00417 	ldw	r3,16(sp)
10003bc8:	10800017 	ldw	r2,0(r2)
10003bcc:	10c0000d 	sth	r3,0(r2)
10003bd0:	003e0906 	br	100033f8 <___vfprintf_internal_r+0xd4>
10003bd4:	21003fcc 	andi	r4,r4,255
10003bd8:	2005c31e 	bne	r4,zero,100052e8 <___vfprintf_internal_r+0x1fc4>
10003bdc:	6080080c 	andi	r2,r12,32
10003be0:	63000414 	ori	r12,r12,16
10003be4:	1000cc1e 	bne	r2,zero,10003f18 <___vfprintf_internal_r+0xbf4>
10003be8:	d8800617 	ldw	r2,24(sp)
10003bec:	10800104 	addi	r2,r2,4
10003bf0:	d8c00617 	ldw	r3,24(sp)
10003bf4:	0029883a 	mov	r20,zero
10003bf8:	d8800615 	stw	r2,24(sp)
10003bfc:	1d400017 	ldw	r21,0(r3)
10003c00:	0005883a 	mov	r2,zero
10003c04:	0000a206 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003c08:	63000214 	ori	r12,r12,8
10003c0c:	b2800007 	ldb	r10,0(r22)
10003c10:	003e1f06 	br	10003490 <___vfprintf_internal_r+0x16c>
10003c14:	21003fcc 	andi	r4,r4,255
10003c18:	2005b71e 	bne	r4,zero,100052f8 <___vfprintf_internal_r+0x1fd4>
10003c1c:	d8c00617 	ldw	r3,24(sp)
10003c20:	00a00034 	movhi	r2,32768
10003c24:	10bfffc4 	addi	r2,r2,-1
10003c28:	1d000117 	ldw	r20,4(r3)
10003c2c:	1c800017 	ldw	r18,0(r3)
10003c30:	01dffc34 	movhi	r7,32752
10003c34:	a0a0703a 	and	r16,r20,r2
10003c38:	01bfffc4 	movi	r6,-1
10003c3c:	18800204 	addi	r2,r3,8
10003c40:	39ffffc4 	addi	r7,r7,-1
10003c44:	9009883a 	mov	r4,r18
10003c48:	800b883a 	mov	r5,r16
10003c4c:	da000f15 	stw	r8,60(sp)
10003c50:	dac00e15 	stw	r11,56(sp)
10003c54:	db000715 	stw	r12,28(sp)
10003c58:	dd000a15 	stw	r20,40(sp)
10003c5c:	dc800915 	stw	r18,36(sp)
10003c60:	d8800615 	stw	r2,24(sp)
10003c64:	000f4140 	call	1000f414 <__unorddf2>
10003c68:	db000717 	ldw	r12,28(sp)
10003c6c:	dac00e17 	ldw	r11,56(sp)
10003c70:	da000f17 	ldw	r8,60(sp)
10003c74:	1003161e 	bne	r2,zero,100048d0 <___vfprintf_internal_r+0x15ac>
10003c78:	01dffc34 	movhi	r7,32752
10003c7c:	01bfffc4 	movi	r6,-1
10003c80:	39ffffc4 	addi	r7,r7,-1
10003c84:	9009883a 	mov	r4,r18
10003c88:	800b883a 	mov	r5,r16
10003c8c:	000e32c0 	call	1000e32c <__ledf2>
10003c90:	db000717 	ldw	r12,28(sp)
10003c94:	dac00e17 	ldw	r11,56(sp)
10003c98:	da000f17 	ldw	r8,60(sp)
10003c9c:	00830c0e 	bge	zero,r2,100048d0 <___vfprintf_internal_r+0x15ac>
10003ca0:	000d883a 	mov	r6,zero
10003ca4:	000f883a 	mov	r7,zero
10003ca8:	9009883a 	mov	r4,r18
10003cac:	a00b883a 	mov	r5,r20
10003cb0:	da000e15 	stw	r8,56(sp)
10003cb4:	000e32c0 	call	1000e32c <__ledf2>
10003cb8:	db000717 	ldw	r12,28(sp)
10003cbc:	da000e17 	ldw	r8,56(sp)
10003cc0:	1004e216 	blt	r2,zero,1000504c <___vfprintf_internal_r+0x1d28>
10003cc4:	db401543 	ldbu	r13,85(sp)
10003cc8:	e0801210 	cmplti	r2,fp,72
10003ccc:	1004cb1e 	bne	r2,zero,10004ffc <___vfprintf_internal_r+0x1cd8>
10003cd0:	04040074 	movhi	r16,4097
10003cd4:	840a0804 	addi	r16,r16,10272
10003cd8:	04bfdfc4 	movi	r18,-129
10003cdc:	64a4703a 	and	r18,r12,r18
10003ce0:	054000c4 	movi	r21,3
10003ce4:	050000c4 	movi	r20,3
10003ce8:	0017883a 	mov	r11,zero
10003cec:	d8000715 	stw	zero,28(sp)
10003cf0:	0000a306 	br	10003f80 <___vfprintf_internal_r+0xc5c>
10003cf4:	21003fcc 	andi	r4,r4,255
10003cf8:	20057d1e 	bne	r4,zero,100052f0 <___vfprintf_internal_r+0x1fcc>
10003cfc:	6080080c 	andi	r2,r12,32
10003d00:	63000414 	ori	r12,r12,16
10003d04:	10007d1e 	bne	r2,zero,10003efc <___vfprintf_internal_r+0xbd8>
10003d08:	d8800617 	ldw	r2,24(sp)
10003d0c:	10800104 	addi	r2,r2,4
10003d10:	d8c00617 	ldw	r3,24(sp)
10003d14:	1d400017 	ldw	r21,0(r3)
10003d18:	d8800615 	stw	r2,24(sp)
10003d1c:	a829d7fa 	srai	r20,r21,31
10003d20:	a005883a 	mov	r2,r20
10003d24:	103f020e 	bge	r2,zero,10003930 <___vfprintf_internal_r+0x60c>
10003d28:	056bc83a 	sub	r21,zero,r21
10003d2c:	a804c03a 	cmpne	r2,r21,zero
10003d30:	0529c83a 	sub	r20,zero,r20
10003d34:	a0a9c83a 	sub	r20,r20,r2
10003d38:	00800b44 	movi	r2,45
10003d3c:	d8801545 	stb	r2,85(sp)
10003d40:	58ffffe0 	cmpeqi	r3,r11,-1
10003d44:	03400b44 	movi	r13,45
10003d48:	00800044 	movi	r2,1
10003d4c:	18005426 	beq	r3,zero,10003ea0 <___vfprintf_internal_r+0xb7c>
10003d50:	10c00060 	cmpeqi	r3,r2,1
10003d54:	18007e1e 	bne	r3,zero,10003f50 <___vfprintf_internal_r+0xc2c>
10003d58:	108000a0 	cmpeqi	r2,r2,2
10003d5c:	1002371e 	bne	r2,zero,1000463c <___vfprintf_internal_r+0x1318>
10003d60:	b807883a 	mov	r3,r23
10003d64:	00000106 	br	10003d6c <___vfprintf_internal_r+0xa48>
10003d68:	8007883a 	mov	r3,r16
10003d6c:	a808d0fa 	srli	r4,r21,3
10003d70:	a00a977a 	slli	r5,r20,29
10003d74:	a028d0fa 	srli	r20,r20,3
10003d78:	ad4001cc 	andi	r21,r21,7
10003d7c:	a8800c04 	addi	r2,r21,48
10003d80:	292ab03a 	or	r21,r5,r4
10003d84:	18bfffc5 	stb	r2,-1(r3)
10003d88:	ad08b03a 	or	r4,r21,r20
10003d8c:	1c3fffc4 	addi	r16,r3,-1
10003d90:	203ff51e 	bne	r4,zero,10003d68 <___vfprintf_internal_r+0xa44>
10003d94:	6100004c 	andi	r4,r12,1
10003d98:	2000a026 	beq	r4,zero,1000401c <___vfprintf_internal_r+0xcf8>
10003d9c:	10803fcc 	andi	r2,r2,255
10003da0:	1080201c 	xori	r2,r2,128
10003da4:	10bfe004 	addi	r2,r2,-128
10003da8:	10800c18 	cmpnei	r2,r2,48
10003dac:	10009b26 	beq	r2,zero,1000401c <___vfprintf_internal_r+0xcf8>
10003db0:	18ffff84 	addi	r3,r3,-2
10003db4:	00800c04 	movi	r2,48
10003db8:	80bfffc5 	stb	r2,-1(r16)
10003dbc:	b8e9c83a 	sub	r20,r23,r3
10003dc0:	6025883a 	mov	r18,r12
10003dc4:	1821883a 	mov	r16,r3
10003dc8:	00006906 	br	10003f70 <___vfprintf_internal_r+0xc4c>
10003dcc:	21003fcc 	andi	r4,r4,255
10003dd0:	2005391e 	bne	r4,zero,100052b8 <___vfprintf_internal_r+0x1f94>
10003dd4:	00840074 	movhi	r2,4097
10003dd8:	108a0b04 	addi	r2,r2,10284
10003ddc:	d8800c15 	stw	r2,48(sp)
10003de0:	6080080c 	andi	r2,r12,32
10003de4:	103e901e 	bne	r2,zero,10003828 <___vfprintf_internal_r+0x504>
10003de8:	d8c00617 	ldw	r3,24(sp)
10003dec:	6080040c 	andi	r2,r12,16
10003df0:	1d400017 	ldw	r21,0(r3)
10003df4:	18c00104 	addi	r3,r3,4
10003df8:	d8c00615 	stw	r3,24(sp)
10003dfc:	1002ae1e 	bne	r2,zero,100048b8 <___vfprintf_internal_r+0x1594>
10003e00:	6080100c 	andi	r2,r12,64
10003e04:	1002ac26 	beq	r2,zero,100048b8 <___vfprintf_internal_r+0x1594>
10003e08:	ad7fffcc 	andi	r21,r21,65535
10003e0c:	0029883a 	mov	r20,zero
10003e10:	003e8a06 	br	1000383c <___vfprintf_internal_r+0x518>
10003e14:	21003fcc 	andi	r4,r4,255
10003e18:	2005391e 	bne	r4,zero,10005300 <___vfprintf_internal_r+0x1fdc>
10003e1c:	6080080c 	andi	r2,r12,32
10003e20:	63000414 	ori	r12,r12,16
10003e24:	1000431e 	bne	r2,zero,10003f34 <___vfprintf_internal_r+0xc10>
10003e28:	d8800617 	ldw	r2,24(sp)
10003e2c:	10800104 	addi	r2,r2,4
10003e30:	d8c00617 	ldw	r3,24(sp)
10003e34:	0029883a 	mov	r20,zero
10003e38:	d8800615 	stw	r2,24(sp)
10003e3c:	1d400017 	ldw	r21,0(r3)
10003e40:	00800044 	movi	r2,1
10003e44:	00001206 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003e48:	63000814 	ori	r12,r12,32
10003e4c:	b2800007 	ldb	r10,0(r22)
10003e50:	003d8f06 	br	10003490 <___vfprintf_internal_r+0x16c>
10003e54:	d8c00617 	ldw	r3,24(sp)
10003e58:	00800c04 	movi	r2,48
10003e5c:	d8801585 	stb	r2,86(sp)
10003e60:	00801e04 	movi	r2,120
10003e64:	01040074 	movhi	r4,4097
10003e68:	d88015c5 	stb	r2,87(sp)
10003e6c:	1d400017 	ldw	r21,0(r3)
10003e70:	18800104 	addi	r2,r3,4
10003e74:	d8800615 	stw	r2,24(sp)
10003e78:	208a1004 	addi	r2,r4,10304
10003e7c:	d8800c15 	stw	r2,48(sp)
10003e80:	0029883a 	mov	r20,zero
10003e84:	63000094 	ori	r12,r12,2
10003e88:	00800084 	movi	r2,2
10003e8c:	07001e04 	movi	fp,120
10003e90:	d8001545 	stb	zero,85(sp)
10003e94:	58ffffe0 	cmpeqi	r3,r11,-1
10003e98:	001b883a 	mov	r13,zero
10003e9c:	183fac1e 	bne	r3,zero,10003d50 <___vfprintf_internal_r+0xa2c>
10003ea0:	04bfdfc4 	movi	r18,-129
10003ea4:	ad06b03a 	or	r3,r21,r20
10003ea8:	64a4703a 	and	r18,r12,r18
10003eac:	18018d1e 	bne	r3,zero,100044e4 <___vfprintf_internal_r+0x11c0>
10003eb0:	5803b91e 	bne	r11,zero,10004d98 <___vfprintf_internal_r+0x1a74>
10003eb4:	103ea71e 	bne	r2,zero,10003954 <___vfprintf_internal_r+0x630>
10003eb8:	6500004c 	andi	r20,r12,1
10003ebc:	a0028226 	beq	r20,zero,100048c8 <___vfprintf_internal_r+0x15a4>
10003ec0:	00800c04 	movi	r2,48
10003ec4:	d88028c5 	stb	r2,163(sp)
10003ec8:	dc0028c4 	addi	r16,sp,163
10003ecc:	00002806 	br	10003f70 <___vfprintf_internal_r+0xc4c>
10003ed0:	b2800007 	ldb	r10,0(r22)
10003ed4:	50801b18 	cmpnei	r2,r10,108
10003ed8:	10032926 	beq	r2,zero,10004b80 <___vfprintf_internal_r+0x185c>
10003edc:	63000414 	ori	r12,r12,16
10003ee0:	003d6b06 	br	10003490 <___vfprintf_internal_r+0x16c>
10003ee4:	63001014 	ori	r12,r12,64
10003ee8:	b2800007 	ldb	r10,0(r22)
10003eec:	003d6806 	br	10003490 <___vfprintf_internal_r+0x16c>
10003ef0:	d9000517 	ldw	r4,20(sp)
10003ef4:	00075400 	call	10007540 <__sinit>
10003ef8:	003d2306 	br	10003388 <___vfprintf_internal_r+0x64>
10003efc:	d8c00617 	ldw	r3,24(sp)
10003f00:	18800117 	ldw	r2,4(r3)
10003f04:	1d400017 	ldw	r21,0(r3)
10003f08:	18c00204 	addi	r3,r3,8
10003f0c:	d8c00615 	stw	r3,24(sp)
10003f10:	1029883a 	mov	r20,r2
10003f14:	003e8506 	br	1000392c <___vfprintf_internal_r+0x608>
10003f18:	d8c00617 	ldw	r3,24(sp)
10003f1c:	0005883a 	mov	r2,zero
10003f20:	1d400017 	ldw	r21,0(r3)
10003f24:	1d000117 	ldw	r20,4(r3)
10003f28:	18c00204 	addi	r3,r3,8
10003f2c:	d8c00615 	stw	r3,24(sp)
10003f30:	003fd706 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003f34:	d8c00617 	ldw	r3,24(sp)
10003f38:	00800044 	movi	r2,1
10003f3c:	1d400017 	ldw	r21,0(r3)
10003f40:	1d000117 	ldw	r20,4(r3)
10003f44:	18c00204 	addi	r3,r3,8
10003f48:	d8c00615 	stw	r3,24(sp)
10003f4c:	003fd006 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10003f50:	a000111e 	bne	r20,zero,10003f98 <___vfprintf_internal_r+0xc74>
10003f54:	a88002a8 	cmpgeui	r2,r21,10
10003f58:	10000f1e 	bne	r2,zero,10003f98 <___vfprintf_internal_r+0xc74>
10003f5c:	ad400c04 	addi	r21,r21,48
10003f60:	dd4028c5 	stb	r21,163(sp)
10003f64:	6025883a 	mov	r18,r12
10003f68:	05000044 	movi	r20,1
10003f6c:	dc0028c4 	addi	r16,sp,163
10003f70:	582b883a 	mov	r21,r11
10003f74:	5d00010e 	bge	r11,r20,10003f7c <___vfprintf_internal_r+0xc58>
10003f78:	a02b883a 	mov	r21,r20
10003f7c:	d8000715 	stw	zero,28(sp)
10003f80:	6b403fcc 	andi	r13,r13,255
10003f84:	6b40201c 	xori	r13,r13,128
10003f88:	6b7fe004 	addi	r13,r13,-128
10003f8c:	683e8126 	beq	r13,zero,10003994 <___vfprintf_internal_r+0x670>
10003f90:	ad400044 	addi	r21,r21,1
10003f94:	003e7f06 	br	10003994 <___vfprintf_internal_r+0x670>
10003f98:	dc400e15 	stw	r17,56(sp)
10003f9c:	b821883a 	mov	r16,r23
10003fa0:	a023883a 	mov	r17,r20
10003fa4:	db000715 	stw	r12,28(sp)
10003fa8:	9829883a 	mov	r20,r19
10003fac:	dac00f15 	stw	r11,60(sp)
10003fb0:	4025883a 	mov	r18,r8
10003fb4:	6827883a 	mov	r19,r13
10003fb8:	00000206 	br	10003fc4 <___vfprintf_internal_r+0xca0>
10003fbc:	102b883a 	mov	r21,r2
10003fc0:	1823883a 	mov	r17,r3
10003fc4:	a809883a 	mov	r4,r21
10003fc8:	880b883a 	mov	r5,r17
10003fcc:	01800284 	movi	r6,10
10003fd0:	000f883a 	mov	r7,zero
10003fd4:	000c87c0 	call	1000c87c <__umoddi3>
10003fd8:	10800c04 	addi	r2,r2,48
10003fdc:	843fffc4 	addi	r16,r16,-1
10003fe0:	a809883a 	mov	r4,r21
10003fe4:	880b883a 	mov	r5,r17
10003fe8:	80800005 	stb	r2,0(r16)
10003fec:	01800284 	movi	r6,10
10003ff0:	000f883a 	mov	r7,zero
10003ff4:	000c2e40 	call	1000c2e4 <__udivdi3>
10003ff8:	883ff01e 	bne	r17,zero,10003fbc <___vfprintf_internal_r+0xc98>
10003ffc:	ad4002a8 	cmpgeui	r21,r21,10
10004000:	a83fee1e 	bne	r21,zero,10003fbc <___vfprintf_internal_r+0xc98>
10004004:	db000717 	ldw	r12,28(sp)
10004008:	dc400e17 	ldw	r17,56(sp)
1000400c:	dac00f17 	ldw	r11,60(sp)
10004010:	981b883a 	mov	r13,r19
10004014:	9011883a 	mov	r8,r18
10004018:	a027883a 	mov	r19,r20
1000401c:	bc29c83a 	sub	r20,r23,r16
10004020:	6025883a 	mov	r18,r12
10004024:	003fd206 	br	10003f70 <___vfprintf_internal_r+0xc4c>
10004028:	e2801990 	cmplti	r10,fp,102
1000402c:	5000ea1e 	bne	r10,zero,100043d8 <___vfprintf_internal_r+0x10b4>
10004030:	d9000917 	ldw	r4,36(sp)
10004034:	d9400a17 	ldw	r5,40(sp)
10004038:	000d883a 	mov	r6,zero
1000403c:	000f883a 	mov	r7,zero
10004040:	da000f15 	stw	r8,60(sp)
10004044:	d8c00e15 	stw	r3,56(sp)
10004048:	000e1bc0 	call	1000e1bc <__eqdf2>
1000404c:	d8c00e17 	ldw	r3,56(sp)
10004050:	da000f17 	ldw	r8,60(sp)
10004054:	1001891e 	bne	r2,zero,1000467c <___vfprintf_internal_r+0x1358>
10004058:	d8801d17 	ldw	r2,116(sp)
1000405c:	01040074 	movhi	r4,4097
10004060:	210a1704 	addi	r4,r4,10332
10004064:	10800044 	addi	r2,r2,1
10004068:	18c00044 	addi	r3,r3,1
1000406c:	41000015 	stw	r4,0(r8)
10004070:	01000044 	movi	r4,1
10004074:	d8801d15 	stw	r2,116(sp)
10004078:	41000115 	stw	r4,4(r8)
1000407c:	d8c01e15 	stw	r3,120(sp)
10004080:	10800208 	cmpgei	r2,r2,8
10004084:	1003331e 	bne	r2,zero,10004d54 <___vfprintf_internal_r+0x1a30>
10004088:	42000204 	addi	r8,r8,8
1000408c:	d8801617 	ldw	r2,88(sp)
10004090:	d8c00817 	ldw	r3,32(sp)
10004094:	10c00416 	blt	r2,r3,100040a8 <___vfprintf_internal_r+0xd84>
10004098:	9080004c 	andi	r2,r18,1
1000409c:	1000021e 	bne	r2,zero,100040a8 <___vfprintf_internal_r+0xd84>
100040a0:	d8c01e17 	ldw	r3,120(sp)
100040a4:	003e6e06 	br	10003a60 <___vfprintf_internal_r+0x73c>
100040a8:	d8800d17 	ldw	r2,52(sp)
100040ac:	d8c01e17 	ldw	r3,120(sp)
100040b0:	d9000b17 	ldw	r4,44(sp)
100040b4:	40800015 	stw	r2,0(r8)
100040b8:	d8801d17 	ldw	r2,116(sp)
100040bc:	20c7883a 	add	r3,r4,r3
100040c0:	41000115 	stw	r4,4(r8)
100040c4:	10800044 	addi	r2,r2,1
100040c8:	d8801d15 	stw	r2,116(sp)
100040cc:	d8c01e15 	stw	r3,120(sp)
100040d0:	10800208 	cmpgei	r2,r2,8
100040d4:	1002b11e 	bne	r2,zero,10004b9c <___vfprintf_internal_r+0x1878>
100040d8:	42000204 	addi	r8,r8,8
100040dc:	d8800817 	ldw	r2,32(sp)
100040e0:	143fffc4 	addi	r16,r2,-1
100040e4:	043e5e0e 	bge	zero,r16,10003a60 <___vfprintf_internal_r+0x73c>
100040e8:	03040074 	movhi	r12,4097
100040ec:	81000450 	cmplti	r4,r16,17
100040f0:	630a1784 	addi	r12,r12,10334
100040f4:	d8801d17 	ldw	r2,116(sp)
100040f8:	2003731e 	bne	r4,zero,10004ec8 <___vfprintf_internal_r+0x1ba4>
100040fc:	dc400715 	stw	r17,28(sp)
10004100:	05000404 	movi	r20,16
10004104:	df000517 	ldw	fp,20(sp)
10004108:	6023883a 	mov	r17,r12
1000410c:	00000406 	br	10004120 <___vfprintf_internal_r+0xdfc>
10004110:	42000204 	addi	r8,r8,8
10004114:	843ffc04 	addi	r16,r16,-16
10004118:	81000448 	cmpgei	r4,r16,17
1000411c:	20036826 	beq	r4,zero,10004ec0 <___vfprintf_internal_r+0x1b9c>
10004120:	10800044 	addi	r2,r2,1
10004124:	18c00404 	addi	r3,r3,16
10004128:	44400015 	stw	r17,0(r8)
1000412c:	45000115 	stw	r20,4(r8)
10004130:	d8c01e15 	stw	r3,120(sp)
10004134:	d8801d15 	stw	r2,116(sp)
10004138:	11000208 	cmpgei	r4,r2,8
1000413c:	203ff426 	beq	r4,zero,10004110 <___vfprintf_internal_r+0xdec>
10004140:	d9801c04 	addi	r6,sp,112
10004144:	980b883a 	mov	r5,r19
10004148:	e009883a 	mov	r4,fp
1000414c:	000a49c0 	call	1000a49c <__sprint_r>
10004150:	103d531e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004154:	d8c01e17 	ldw	r3,120(sp)
10004158:	d8801d17 	ldw	r2,116(sp)
1000415c:	b811883a 	mov	r8,r23
10004160:	003fec06 	br	10004114 <___vfprintf_internal_r+0xdf0>
10004164:	8d4fc83a 	sub	r7,r17,r21
10004168:	01fe2f0e 	bge	zero,r7,10003a28 <___vfprintf_internal_r+0x704>
1000416c:	03040074 	movhi	r12,4097
10004170:	39000450 	cmplti	r4,r7,17
10004174:	630a1784 	addi	r12,r12,10334
10004178:	d8801d17 	ldw	r2,116(sp)
1000417c:	2000271e 	bne	r4,zero,1000421c <___vfprintf_internal_r+0xef8>
10004180:	dc000e15 	stw	r16,56(sp)
10004184:	dc800f15 	stw	r18,60(sp)
10004188:	dc401015 	stw	r17,64(sp)
1000418c:	03400404 	movi	r13,16
10004190:	3821883a 	mov	r16,r7
10004194:	dac01215 	stw	r11,72(sp)
10004198:	dc400517 	ldw	r17,20(sp)
1000419c:	6025883a 	mov	r18,r12
100041a0:	00000406 	br	100041b4 <___vfprintf_internal_r+0xe90>
100041a4:	843ffc04 	addi	r16,r16,-16
100041a8:	81000448 	cmpgei	r4,r16,17
100041ac:	42000204 	addi	r8,r8,8
100041b0:	20001426 	beq	r4,zero,10004204 <___vfprintf_internal_r+0xee0>
100041b4:	10800044 	addi	r2,r2,1
100041b8:	18c00404 	addi	r3,r3,16
100041bc:	44800015 	stw	r18,0(r8)
100041c0:	43400115 	stw	r13,4(r8)
100041c4:	d8c01e15 	stw	r3,120(sp)
100041c8:	d8801d15 	stw	r2,116(sp)
100041cc:	11000208 	cmpgei	r4,r2,8
100041d0:	203ff426 	beq	r4,zero,100041a4 <___vfprintf_internal_r+0xe80>
100041d4:	d9801c04 	addi	r6,sp,112
100041d8:	980b883a 	mov	r5,r19
100041dc:	8809883a 	mov	r4,r17
100041e0:	000a49c0 	call	1000a49c <__sprint_r>
100041e4:	103d2e1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
100041e8:	843ffc04 	addi	r16,r16,-16
100041ec:	81000448 	cmpgei	r4,r16,17
100041f0:	d8c01e17 	ldw	r3,120(sp)
100041f4:	d8801d17 	ldw	r2,116(sp)
100041f8:	b811883a 	mov	r8,r23
100041fc:	03400404 	movi	r13,16
10004200:	203fec1e 	bne	r4,zero,100041b4 <___vfprintf_internal_r+0xe90>
10004204:	800f883a 	mov	r7,r16
10004208:	9019883a 	mov	r12,r18
1000420c:	dc000e17 	ldw	r16,56(sp)
10004210:	dc401017 	ldw	r17,64(sp)
10004214:	dac01217 	ldw	r11,72(sp)
10004218:	dc800f17 	ldw	r18,60(sp)
1000421c:	10800044 	addi	r2,r2,1
10004220:	19c7883a 	add	r3,r3,r7
10004224:	d8801d15 	stw	r2,116(sp)
10004228:	43000015 	stw	r12,0(r8)
1000422c:	41c00115 	stw	r7,4(r8)
10004230:	d8c01e15 	stw	r3,120(sp)
10004234:	10800208 	cmpgei	r2,r2,8
10004238:	1002cd1e 	bne	r2,zero,10004d70 <___vfprintf_internal_r+0x1a4c>
1000423c:	5d0fc83a 	sub	r7,r11,r20
10004240:	42000204 	addi	r8,r8,8
10004244:	01fdfa0e 	bge	zero,r7,10003a30 <___vfprintf_internal_r+0x70c>
10004248:	03040074 	movhi	r12,4097
1000424c:	39000450 	cmplti	r4,r7,17
10004250:	630a1784 	addi	r12,r12,10334
10004254:	d8801d17 	ldw	r2,116(sp)
10004258:	2000251e 	bne	r4,zero,100042f0 <___vfprintf_internal_r+0xfcc>
1000425c:	dc000e15 	stw	r16,56(sp)
10004260:	dc800f15 	stw	r18,60(sp)
10004264:	dc401015 	stw	r17,64(sp)
10004268:	02c00404 	movi	r11,16
1000426c:	3821883a 	mov	r16,r7
10004270:	dc400517 	ldw	r17,20(sp)
10004274:	6025883a 	mov	r18,r12
10004278:	00000406 	br	1000428c <___vfprintf_internal_r+0xf68>
1000427c:	843ffc04 	addi	r16,r16,-16
10004280:	81000448 	cmpgei	r4,r16,17
10004284:	42000204 	addi	r8,r8,8
10004288:	20001426 	beq	r4,zero,100042dc <___vfprintf_internal_r+0xfb8>
1000428c:	10800044 	addi	r2,r2,1
10004290:	18c00404 	addi	r3,r3,16
10004294:	44800015 	stw	r18,0(r8)
10004298:	42c00115 	stw	r11,4(r8)
1000429c:	d8c01e15 	stw	r3,120(sp)
100042a0:	d8801d15 	stw	r2,116(sp)
100042a4:	11000208 	cmpgei	r4,r2,8
100042a8:	203ff426 	beq	r4,zero,1000427c <___vfprintf_internal_r+0xf58>
100042ac:	d9801c04 	addi	r6,sp,112
100042b0:	980b883a 	mov	r5,r19
100042b4:	8809883a 	mov	r4,r17
100042b8:	000a49c0 	call	1000a49c <__sprint_r>
100042bc:	103cf81e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
100042c0:	843ffc04 	addi	r16,r16,-16
100042c4:	81000448 	cmpgei	r4,r16,17
100042c8:	d8c01e17 	ldw	r3,120(sp)
100042cc:	d8801d17 	ldw	r2,116(sp)
100042d0:	b811883a 	mov	r8,r23
100042d4:	02c00404 	movi	r11,16
100042d8:	203fec1e 	bne	r4,zero,1000428c <___vfprintf_internal_r+0xf68>
100042dc:	800f883a 	mov	r7,r16
100042e0:	9019883a 	mov	r12,r18
100042e4:	dc401017 	ldw	r17,64(sp)
100042e8:	dc000e17 	ldw	r16,56(sp)
100042ec:	dc800f17 	ldw	r18,60(sp)
100042f0:	10800044 	addi	r2,r2,1
100042f4:	19c7883a 	add	r3,r3,r7
100042f8:	d8801d15 	stw	r2,116(sp)
100042fc:	43000015 	stw	r12,0(r8)
10004300:	41c00115 	stw	r7,4(r8)
10004304:	d8c01e15 	stw	r3,120(sp)
10004308:	10800208 	cmpgei	r2,r2,8
1000430c:	1001621e 	bne	r2,zero,10004898 <___vfprintf_internal_r+0x1574>
10004310:	42000204 	addi	r8,r8,8
10004314:	003dc606 	br	10003a30 <___vfprintf_internal_r+0x70c>
10004318:	d9000517 	ldw	r4,20(sp)
1000431c:	d9801c04 	addi	r6,sp,112
10004320:	980b883a 	mov	r5,r19
10004324:	000a49c0 	call	1000a49c <__sprint_r>
10004328:	103dd726 	beq	r2,zero,10003a88 <___vfprintf_internal_r+0x764>
1000432c:	003cdc06 	br	100036a0 <___vfprintf_internal_r+0x37c>
10004330:	d9000517 	ldw	r4,20(sp)
10004334:	d9801c04 	addi	r6,sp,112
10004338:	980b883a 	mov	r5,r19
1000433c:	000a49c0 	call	1000a49c <__sprint_r>
10004340:	103cd71e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004344:	d9001617 	ldw	r4,88(sp)
10004348:	d8c01e17 	ldw	r3,120(sp)
1000434c:	b811883a 	mov	r8,r23
10004350:	2002951e 	bne	r4,zero,10004da8 <___vfprintf_internal_r+0x1a84>
10004354:	d9000817 	ldw	r4,32(sp)
10004358:	9080004c 	andi	r2,r18,1
1000435c:	1104b03a 	or	r2,r2,r4
10004360:	103dbf26 	beq	r2,zero,10003a60 <___vfprintf_internal_r+0x73c>
10004364:	d8800d17 	ldw	r2,52(sp)
10004368:	d9000b17 	ldw	r4,44(sp)
1000436c:	40800015 	stw	r2,0(r8)
10004370:	d8801d17 	ldw	r2,116(sp)
10004374:	20c7883a 	add	r3,r4,r3
10004378:	41000115 	stw	r4,4(r8)
1000437c:	10800044 	addi	r2,r2,1
10004380:	d8c01e15 	stw	r3,120(sp)
10004384:	d8801d15 	stw	r2,116(sp)
10004388:	11000208 	cmpgei	r4,r2,8
1000438c:	2003641e 	bne	r4,zero,10005120 <___vfprintf_internal_r+0x1dfc>
10004390:	42000204 	addi	r8,r8,8
10004394:	d9000817 	ldw	r4,32(sp)
10004398:	10800044 	addi	r2,r2,1
1000439c:	d8801d15 	stw	r2,116(sp)
100043a0:	20c7883a 	add	r3,r4,r3
100043a4:	44000015 	stw	r16,0(r8)
100043a8:	41000115 	stw	r4,4(r8)
100043ac:	d8c01e15 	stw	r3,120(sp)
100043b0:	10800208 	cmpgei	r2,r2,8
100043b4:	103da926 	beq	r2,zero,10003a5c <___vfprintf_internal_r+0x738>
100043b8:	d9000517 	ldw	r4,20(sp)
100043bc:	d9801c04 	addi	r6,sp,112
100043c0:	980b883a 	mov	r5,r19
100043c4:	000a49c0 	call	1000a49c <__sprint_r>
100043c8:	103cb51e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
100043cc:	d8c01e17 	ldw	r3,120(sp)
100043d0:	b811883a 	mov	r8,r23
100043d4:	003da206 	br	10003a60 <___vfprintf_internal_r+0x73c>
100043d8:	d8800817 	ldw	r2,32(sp)
100043dc:	df001d17 	ldw	fp,116(sp)
100043e0:	18c00044 	addi	r3,r3,1
100043e4:	10800088 	cmpgei	r2,r2,2
100043e8:	e5000044 	addi	r20,fp,1
100043ec:	42800204 	addi	r10,r8,8
100043f0:	1000fb26 	beq	r2,zero,100047e0 <___vfprintf_internal_r+0x14bc>
100043f4:	00800044 	movi	r2,1
100043f8:	40800115 	stw	r2,4(r8)
100043fc:	44000015 	stw	r16,0(r8)
10004400:	d8c01e15 	stw	r3,120(sp)
10004404:	dd001d15 	stw	r20,116(sp)
10004408:	a0800210 	cmplti	r2,r20,8
1000440c:	10022c26 	beq	r2,zero,10004cc0 <___vfprintf_internal_r+0x199c>
10004410:	d8800b17 	ldw	r2,44(sp)
10004414:	d9000d17 	ldw	r4,52(sp)
10004418:	a5000044 	addi	r20,r20,1
1000441c:	1887883a 	add	r3,r3,r2
10004420:	50800115 	stw	r2,4(r10)
10004424:	51000015 	stw	r4,0(r10)
10004428:	d8c01e15 	stw	r3,120(sp)
1000442c:	dd001d15 	stw	r20,116(sp)
10004430:	a0800208 	cmpgei	r2,r20,8
10004434:	1002191e 	bne	r2,zero,10004c9c <___vfprintf_internal_r+0x1978>
10004438:	52800204 	addi	r10,r10,8
1000443c:	d8800817 	ldw	r2,32(sp)
10004440:	d9000917 	ldw	r4,36(sp)
10004444:	d9400a17 	ldw	r5,40(sp)
10004448:	52000204 	addi	r8,r10,8
1000444c:	12ffffc4 	addi	r11,r2,-1
10004450:	a7000044 	addi	fp,r20,1
10004454:	000d883a 	mov	r6,zero
10004458:	000f883a 	mov	r7,zero
1000445c:	d8c01215 	stw	r3,72(sp)
10004460:	da800f15 	stw	r10,60(sp)
10004464:	da000e15 	stw	r8,56(sp)
10004468:	dac00715 	stw	r11,28(sp)
1000446c:	df001015 	stw	fp,64(sp)
10004470:	000e1bc0 	call	1000e1bc <__eqdf2>
10004474:	dac00717 	ldw	r11,28(sp)
10004478:	da000e17 	ldw	r8,56(sp)
1000447c:	da800f17 	ldw	r10,60(sp)
10004480:	db401017 	ldw	r13,64(sp)
10004484:	d8c01217 	ldw	r3,72(sp)
10004488:	1000e126 	beq	r2,zero,10004810 <___vfprintf_internal_r+0x14ec>
1000448c:	84000044 	addi	r16,r16,1
10004490:	1ac7883a 	add	r3,r3,r11
10004494:	df001d15 	stw	fp,116(sp)
10004498:	54000015 	stw	r16,0(r10)
1000449c:	52c00115 	stw	r11,4(r10)
100044a0:	d8c01e15 	stw	r3,120(sp)
100044a4:	e7000208 	cmpgei	fp,fp,8
100044a8:	e001aa1e 	bne	fp,zero,10004b54 <___vfprintf_internal_r+0x1830>
100044ac:	50800404 	addi	r2,r10,16
100044b0:	a7000084 	addi	fp,r20,2
100044b4:	4015883a 	mov	r10,r8
100044b8:	1011883a 	mov	r8,r2
100044bc:	d9001117 	ldw	r4,68(sp)
100044c0:	d8801844 	addi	r2,sp,97
100044c4:	df001d15 	stw	fp,116(sp)
100044c8:	20c7883a 	add	r3,r4,r3
100044cc:	50800015 	stw	r2,0(r10)
100044d0:	51000115 	stw	r4,4(r10)
100044d4:	d8c01e15 	stw	r3,120(sp)
100044d8:	e7000210 	cmplti	fp,fp,8
100044dc:	e03d601e 	bne	fp,zero,10003a60 <___vfprintf_internal_r+0x73c>
100044e0:	003fb506 	br	100043b8 <___vfprintf_internal_r+0x1094>
100044e4:	9019883a 	mov	r12,r18
100044e8:	003e1906 	br	10003d50 <___vfprintf_internal_r+0xa2c>
100044ec:	03040074 	movhi	r12,4097
100044f0:	39000450 	cmplti	r4,r7,17
100044f4:	630a1b84 	addi	r12,r12,10350
100044f8:	d8801d17 	ldw	r2,116(sp)
100044fc:	20002b1e 	bne	r4,zero,100045ac <___vfprintf_internal_r+0x1288>
10004500:	dc001015 	stw	r16,64(sp)
10004504:	dc801215 	stw	r18,72(sp)
10004508:	dc401315 	stw	r17,76(sp)
1000450c:	03c00404 	movi	r15,16
10004510:	db800e15 	stw	r14,56(sp)
10004514:	db400f15 	stw	r13,60(sp)
10004518:	dac01415 	stw	r11,80(sp)
1000451c:	3821883a 	mov	r16,r7
10004520:	dc400517 	ldw	r17,20(sp)
10004524:	6025883a 	mov	r18,r12
10004528:	00000406 	br	1000453c <___vfprintf_internal_r+0x1218>
1000452c:	843ffc04 	addi	r16,r16,-16
10004530:	81000448 	cmpgei	r4,r16,17
10004534:	42000204 	addi	r8,r8,8
10004538:	20001426 	beq	r4,zero,1000458c <___vfprintf_internal_r+0x1268>
1000453c:	10800044 	addi	r2,r2,1
10004540:	18c00404 	addi	r3,r3,16
10004544:	44800015 	stw	r18,0(r8)
10004548:	43c00115 	stw	r15,4(r8)
1000454c:	d8c01e15 	stw	r3,120(sp)
10004550:	d8801d15 	stw	r2,116(sp)
10004554:	11000208 	cmpgei	r4,r2,8
10004558:	203ff426 	beq	r4,zero,1000452c <___vfprintf_internal_r+0x1208>
1000455c:	d9801c04 	addi	r6,sp,112
10004560:	980b883a 	mov	r5,r19
10004564:	8809883a 	mov	r4,r17
10004568:	000a49c0 	call	1000a49c <__sprint_r>
1000456c:	103c4c1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004570:	843ffc04 	addi	r16,r16,-16
10004574:	81000448 	cmpgei	r4,r16,17
10004578:	d8c01e17 	ldw	r3,120(sp)
1000457c:	d8801d17 	ldw	r2,116(sp)
10004580:	b811883a 	mov	r8,r23
10004584:	03c00404 	movi	r15,16
10004588:	203fec1e 	bne	r4,zero,1000453c <___vfprintf_internal_r+0x1218>
1000458c:	800f883a 	mov	r7,r16
10004590:	9019883a 	mov	r12,r18
10004594:	db800e17 	ldw	r14,56(sp)
10004598:	db400f17 	ldw	r13,60(sp)
1000459c:	dc401317 	ldw	r17,76(sp)
100045a0:	dac01417 	ldw	r11,80(sp)
100045a4:	dc001017 	ldw	r16,64(sp)
100045a8:	dc801217 	ldw	r18,72(sp)
100045ac:	10800044 	addi	r2,r2,1
100045b0:	19c7883a 	add	r3,r3,r7
100045b4:	d8801d15 	stw	r2,116(sp)
100045b8:	43000015 	stw	r12,0(r8)
100045bc:	41c00115 	stw	r7,4(r8)
100045c0:	d8c01e15 	stw	r3,120(sp)
100045c4:	10800208 	cmpgei	r2,r2,8
100045c8:	1001d41e 	bne	r2,zero,10004d1c <___vfprintf_internal_r+0x19f8>
100045cc:	42000204 	addi	r8,r8,8
100045d0:	003cf806 	br	100039b4 <___vfprintf_internal_r+0x690>
100045d4:	d9000517 	ldw	r4,20(sp)
100045d8:	d9801c04 	addi	r6,sp,112
100045dc:	980b883a 	mov	r5,r19
100045e0:	dac01015 	stw	r11,64(sp)
100045e4:	db400f15 	stw	r13,60(sp)
100045e8:	db800e15 	stw	r14,56(sp)
100045ec:	000a49c0 	call	1000a49c <__sprint_r>
100045f0:	103c2b1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
100045f4:	d8c01e17 	ldw	r3,120(sp)
100045f8:	b811883a 	mov	r8,r23
100045fc:	dac01017 	ldw	r11,64(sp)
10004600:	db400f17 	ldw	r13,60(sp)
10004604:	db800e17 	ldw	r14,56(sp)
10004608:	003cf806 	br	100039ec <___vfprintf_internal_r+0x6c8>
1000460c:	d9000517 	ldw	r4,20(sp)
10004610:	d9801c04 	addi	r6,sp,112
10004614:	980b883a 	mov	r5,r19
10004618:	dac00f15 	stw	r11,60(sp)
1000461c:	db400e15 	stw	r13,56(sp)
10004620:	000a49c0 	call	1000a49c <__sprint_r>
10004624:	103c1e1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004628:	d8c01e17 	ldw	r3,120(sp)
1000462c:	b811883a 	mov	r8,r23
10004630:	dac00f17 	ldw	r11,60(sp)
10004634:	db400e17 	ldw	r13,56(sp)
10004638:	003cf906 	br	10003a20 <___vfprintf_internal_r+0x6fc>
1000463c:	d9000c17 	ldw	r4,48(sp)
10004640:	b821883a 	mov	r16,r23
10004644:	a88003cc 	andi	r2,r21,15
10004648:	a006973a 	slli	r3,r20,28
1000464c:	2085883a 	add	r2,r4,r2
10004650:	a82ad13a 	srli	r21,r21,4
10004654:	10800003 	ldbu	r2,0(r2)
10004658:	a028d13a 	srli	r20,r20,4
1000465c:	843fffc4 	addi	r16,r16,-1
10004660:	1d6ab03a 	or	r21,r3,r21
10004664:	80800005 	stb	r2,0(r16)
10004668:	ad04b03a 	or	r2,r21,r20
1000466c:	103ff51e 	bne	r2,zero,10004644 <___vfprintf_internal_r+0x1320>
10004670:	bc29c83a 	sub	r20,r23,r16
10004674:	6025883a 	mov	r18,r12
10004678:	003e3d06 	br	10003f70 <___vfprintf_internal_r+0xc4c>
1000467c:	d9001617 	ldw	r4,88(sp)
10004680:	0101980e 	bge	zero,r4,10004ce4 <___vfprintf_internal_r+0x19c0>
10004684:	d8800717 	ldw	r2,28(sp)
10004688:	d9000817 	ldw	r4,32(sp)
1000468c:	1039883a 	mov	fp,r2
10004690:	20812516 	blt	r4,r2,10004b28 <___vfprintf_internal_r+0x1804>
10004694:	07000a0e 	bge	zero,fp,100046c0 <___vfprintf_internal_r+0x139c>
10004698:	d8801d17 	ldw	r2,116(sp)
1000469c:	1f07883a 	add	r3,r3,fp
100046a0:	44000015 	stw	r16,0(r8)
100046a4:	10800044 	addi	r2,r2,1
100046a8:	d8801d15 	stw	r2,116(sp)
100046ac:	47000115 	stw	fp,4(r8)
100046b0:	d8c01e15 	stw	r3,120(sp)
100046b4:	10800208 	cmpgei	r2,r2,8
100046b8:	1002d91e 	bne	r2,zero,10005220 <___vfprintf_internal_r+0x1efc>
100046bc:	42000204 	addi	r8,r8,8
100046c0:	e0013e16 	blt	fp,zero,10004bbc <___vfprintf_internal_r+0x1898>
100046c4:	d8800717 	ldw	r2,28(sp)
100046c8:	1739c83a 	sub	fp,r2,fp
100046cc:	07014516 	blt	zero,fp,10004be4 <___vfprintf_internal_r+0x18c0>
100046d0:	d9001617 	ldw	r4,88(sp)
100046d4:	d8800817 	ldw	r2,32(sp)
100046d8:	2081160e 	bge	r4,r2,10004b34 <___vfprintf_internal_r+0x1810>
100046dc:	d8800d17 	ldw	r2,52(sp)
100046e0:	d9400b17 	ldw	r5,44(sp)
100046e4:	40800015 	stw	r2,0(r8)
100046e8:	d8801d17 	ldw	r2,116(sp)
100046ec:	1947883a 	add	r3,r3,r5
100046f0:	41400115 	stw	r5,4(r8)
100046f4:	10800044 	addi	r2,r2,1
100046f8:	d8801d15 	stw	r2,116(sp)
100046fc:	d8c01e15 	stw	r3,120(sp)
10004700:	10800208 	cmpgei	r2,r2,8
10004704:	1002601e 	bne	r2,zero,10005088 <___vfprintf_internal_r+0x1d64>
10004708:	42000204 	addi	r8,r8,8
1000470c:	d8800817 	ldw	r2,32(sp)
10004710:	d9400717 	ldw	r5,28(sp)
10004714:	1105c83a 	sub	r2,r2,r4
10004718:	29015c0e 	bge	r5,r4,10004c8c <___vfprintf_internal_r+0x1968>
1000471c:	1039883a 	mov	fp,r2
10004720:	07000c0e 	bge	zero,fp,10004754 <___vfprintf_internal_r+0x1430>
10004724:	d9000717 	ldw	r4,28(sp)
10004728:	1f07883a 	add	r3,r3,fp
1000472c:	47000115 	stw	fp,4(r8)
10004730:	8121883a 	add	r16,r16,r4
10004734:	d9001d17 	ldw	r4,116(sp)
10004738:	44000015 	stw	r16,0(r8)
1000473c:	d8c01e15 	stw	r3,120(sp)
10004740:	21000044 	addi	r4,r4,1
10004744:	d9001d15 	stw	r4,116(sp)
10004748:	21000208 	cmpgei	r4,r4,8
1000474c:	2002bf1e 	bne	r4,zero,1000524c <___vfprintf_internal_r+0x1f28>
10004750:	42000204 	addi	r8,r8,8
10004754:	e000010e 	bge	fp,zero,1000475c <___vfprintf_internal_r+0x1438>
10004758:	0039883a 	mov	fp,zero
1000475c:	1739c83a 	sub	fp,r2,fp
10004760:	073cbf0e 	bge	zero,fp,10003a60 <___vfprintf_internal_r+0x73c>
10004764:	03040074 	movhi	r12,4097
10004768:	e1000450 	cmplti	r4,fp,17
1000476c:	630a1784 	addi	r12,r12,10334
10004770:	d8801d17 	ldw	r2,116(sp)
10004774:	20023b1e 	bne	r4,zero,10005064 <___vfprintf_internal_r+0x1d40>
10004778:	dc400715 	stw	r17,28(sp)
1000477c:	05000404 	movi	r20,16
10004780:	dc000517 	ldw	r16,20(sp)
10004784:	6023883a 	mov	r17,r12
10004788:	00000406 	br	1000479c <___vfprintf_internal_r+0x1478>
1000478c:	42000204 	addi	r8,r8,8
10004790:	e73ffc04 	addi	fp,fp,-16
10004794:	e1000448 	cmpgei	r4,fp,17
10004798:	20023026 	beq	r4,zero,1000505c <___vfprintf_internal_r+0x1d38>
1000479c:	10800044 	addi	r2,r2,1
100047a0:	18c00404 	addi	r3,r3,16
100047a4:	44400015 	stw	r17,0(r8)
100047a8:	45000115 	stw	r20,4(r8)
100047ac:	d8c01e15 	stw	r3,120(sp)
100047b0:	d8801d15 	stw	r2,116(sp)
100047b4:	11000208 	cmpgei	r4,r2,8
100047b8:	203ff426 	beq	r4,zero,1000478c <___vfprintf_internal_r+0x1468>
100047bc:	d9801c04 	addi	r6,sp,112
100047c0:	980b883a 	mov	r5,r19
100047c4:	8009883a 	mov	r4,r16
100047c8:	000a49c0 	call	1000a49c <__sprint_r>
100047cc:	103bb41e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
100047d0:	d8c01e17 	ldw	r3,120(sp)
100047d4:	d8801d17 	ldw	r2,116(sp)
100047d8:	b811883a 	mov	r8,r23
100047dc:	003fec06 	br	10004790 <___vfprintf_internal_r+0x146c>
100047e0:	9080004c 	andi	r2,r18,1
100047e4:	103f031e 	bne	r2,zero,100043f4 <___vfprintf_internal_r+0x10d0>
100047e8:	00800044 	movi	r2,1
100047ec:	dd001d15 	stw	r20,116(sp)
100047f0:	44000015 	stw	r16,0(r8)
100047f4:	40800115 	stw	r2,4(r8)
100047f8:	d8c01e15 	stw	r3,120(sp)
100047fc:	a5000208 	cmpgei	r20,r20,8
10004800:	a000d41e 	bne	r20,zero,10004b54 <___vfprintf_internal_r+0x1830>
10004804:	e7000084 	addi	fp,fp,2
10004808:	42000404 	addi	r8,r8,16
1000480c:	003f2b06 	br	100044bc <___vfprintf_internal_r+0x1198>
10004810:	02ff2a0e 	bge	zero,r11,100044bc <___vfprintf_internal_r+0x1198>
10004814:	58800450 	cmplti	r2,r11,17
10004818:	03040074 	movhi	r12,4097
1000481c:	1002f81e 	bne	r2,zero,10005400 <___vfprintf_internal_r+0x20dc>
10004820:	630a1784 	addi	r12,r12,10334
10004824:	dc800715 	stw	r18,28(sp)
10004828:	dc400e15 	stw	r17,56(sp)
1000482c:	04000404 	movi	r16,16
10004830:	5823883a 	mov	r17,r11
10004834:	df000517 	ldw	fp,20(sp)
10004838:	6025883a 	mov	r18,r12
1000483c:	6829883a 	mov	r20,r13
10004840:	00000506 	br	10004858 <___vfprintf_internal_r+0x1534>
10004844:	52800204 	addi	r10,r10,8
10004848:	8c7ffc04 	addi	r17,r17,-16
1000484c:	88800448 	cmpgei	r2,r17,17
10004850:	10018a26 	beq	r2,zero,10004e7c <___vfprintf_internal_r+0x1b58>
10004854:	a5000044 	addi	r20,r20,1
10004858:	18c00404 	addi	r3,r3,16
1000485c:	54800015 	stw	r18,0(r10)
10004860:	54000115 	stw	r16,4(r10)
10004864:	d8c01e15 	stw	r3,120(sp)
10004868:	dd001d15 	stw	r20,116(sp)
1000486c:	a0800208 	cmpgei	r2,r20,8
10004870:	103ff426 	beq	r2,zero,10004844 <___vfprintf_internal_r+0x1520>
10004874:	d9801c04 	addi	r6,sp,112
10004878:	980b883a 	mov	r5,r19
1000487c:	e009883a 	mov	r4,fp
10004880:	000a49c0 	call	1000a49c <__sprint_r>
10004884:	103b861e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004888:	dd001d17 	ldw	r20,116(sp)
1000488c:	d8c01e17 	ldw	r3,120(sp)
10004890:	b815883a 	mov	r10,r23
10004894:	003fec06 	br	10004848 <___vfprintf_internal_r+0x1524>
10004898:	d9000517 	ldw	r4,20(sp)
1000489c:	d9801c04 	addi	r6,sp,112
100048a0:	980b883a 	mov	r5,r19
100048a4:	000a49c0 	call	1000a49c <__sprint_r>
100048a8:	103b7d1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
100048ac:	d8c01e17 	ldw	r3,120(sp)
100048b0:	b811883a 	mov	r8,r23
100048b4:	003c5e06 	br	10003a30 <___vfprintf_internal_r+0x70c>
100048b8:	0029883a 	mov	r20,zero
100048bc:	003bdf06 	br	1000383c <___vfprintf_internal_r+0x518>
100048c0:	b025883a 	mov	r18,r22
100048c4:	003aea06 	br	10003470 <___vfprintf_internal_r+0x14c>
100048c8:	b821883a 	mov	r16,r23
100048cc:	003da806 	br	10003f70 <___vfprintf_internal_r+0xc4c>
100048d0:	d9000917 	ldw	r4,36(sp)
100048d4:	d9400a17 	ldw	r5,40(sp)
100048d8:	da000f15 	stw	r8,60(sp)
100048dc:	200d883a 	mov	r6,r4
100048e0:	280f883a 	mov	r7,r5
100048e4:	dac00e15 	stw	r11,56(sp)
100048e8:	db000715 	stw	r12,28(sp)
100048ec:	000f4140 	call	1000f414 <__unorddf2>
100048f0:	db000717 	ldw	r12,28(sp)
100048f4:	dac00e17 	ldw	r11,56(sp)
100048f8:	da000f17 	ldw	r8,60(sp)
100048fc:	1002af1e 	bne	r2,zero,100053bc <___vfprintf_internal_r+0x2098>
10004900:	00fff7c4 	movi	r3,-33
10004904:	e0c6703a 	and	r3,fp,r3
10004908:	58bfffe0 	cmpeqi	r2,r11,-1
1000490c:	d8c00715 	stw	r3,28(sp)
10004910:	10024c1e 	bne	r2,zero,10005244 <___vfprintf_internal_r+0x1f20>
10004914:	188011d8 	cmpnei	r2,r3,71
10004918:	1001fe26 	beq	r2,zero,10005114 <___vfprintf_internal_r+0x1df0>
1000491c:	d8800a17 	ldw	r2,40(sp)
10004920:	64804014 	ori	r18,r12,256
10004924:	1001e116 	blt	r2,zero,100050ac <___vfprintf_internal_r+0x1d88>
10004928:	dd400a17 	ldw	r21,40(sp)
1000492c:	d8000e05 	stb	zero,56(sp)
10004930:	e08019a0 	cmpeqi	r2,fp,102
10004934:	d8800f15 	stw	r2,60(sp)
10004938:	1001741e 	bne	r2,zero,10004f0c <___vfprintf_internal_r+0x1be8>
1000493c:	e08011a0 	cmpeqi	r2,fp,70
10004940:	1001721e 	bne	r2,zero,10004f0c <___vfprintf_internal_r+0x1be8>
10004944:	d8800717 	ldw	r2,28(sp)
10004948:	da001215 	stw	r8,72(sp)
1000494c:	db001015 	stw	r12,64(sp)
10004950:	10801158 	cmpnei	r2,r2,69
10004954:	10020526 	beq	r2,zero,1000516c <___vfprintf_internal_r+0x1e48>
10004958:	d8801a04 	addi	r2,sp,104
1000495c:	d8800315 	stw	r2,12(sp)
10004960:	d9400917 	ldw	r5,36(sp)
10004964:	d8801704 	addi	r2,sp,92
10004968:	d9000517 	ldw	r4,20(sp)
1000496c:	d8800215 	stw	r2,8(sp)
10004970:	d8801604 	addi	r2,sp,88
10004974:	dac00015 	stw	r11,0(sp)
10004978:	d8800115 	stw	r2,4(sp)
1000497c:	01c00084 	movi	r7,2
10004980:	a80d883a 	mov	r6,r21
10004984:	dac00815 	stw	r11,32(sp)
10004988:	00058cc0 	call	100058cc <_dtoa_r>
1000498c:	dac00817 	ldw	r11,32(sp)
10004990:	1021883a 	mov	r16,r2
10004994:	e08019d8 	cmpnei	r2,fp,103
10004998:	db001017 	ldw	r12,64(sp)
1000499c:	da001217 	ldw	r8,72(sp)
100049a0:	5829883a 	mov	r20,r11
100049a4:	1002031e 	bne	r2,zero,100051b4 <___vfprintf_internal_r+0x1e90>
100049a8:	6080004c 	andi	r2,r12,1
100049ac:	1002031e 	bne	r2,zero,100051bc <___vfprintf_internal_r+0x1e98>
100049b0:	d8c01617 	ldw	r3,88(sp)
100049b4:	d8800717 	ldw	r2,28(sp)
100049b8:	d8c00715 	stw	r3,28(sp)
100049bc:	d8c01a17 	ldw	r3,104(sp)
100049c0:	108011e0 	cmpeqi	r2,r2,71
100049c4:	1c07c83a 	sub	r3,r3,r16
100049c8:	d8c00815 	stw	r3,32(sp)
100049cc:	10000526 	beq	r2,zero,100049e4 <___vfprintf_internal_r+0x16c0>
100049d0:	d8c00717 	ldw	r3,28(sp)
100049d4:	18bfff50 	cmplti	r2,r3,-3
100049d8:	1000011e 	bne	r2,zero,100049e0 <___vfprintf_internal_r+0x16bc>
100049dc:	58c2050e 	bge	r11,r3,100051f4 <___vfprintf_internal_r+0x1ed0>
100049e0:	e73fff84 	addi	fp,fp,-2
100049e4:	d8800717 	ldw	r2,28(sp)
100049e8:	df001845 	stb	fp,97(sp)
100049ec:	153fffc4 	addi	r20,r2,-1
100049f0:	dd001615 	stw	r20,88(sp)
100049f4:	a0027916 	blt	r20,zero,100053dc <___vfprintf_internal_r+0x20b8>
100049f8:	00800ac4 	movi	r2,43
100049fc:	d8801885 	stb	r2,98(sp)
10004a00:	a0800290 	cmplti	r2,r20,10
10004a04:	1002581e 	bne	r2,zero,10005368 <___vfprintf_internal_r+0x2044>
10004a08:	dc000715 	stw	r16,28(sp)
10004a0c:	dd401bc4 	addi	r21,sp,111
10004a10:	a021883a 	mov	r16,r20
10004a14:	db000f15 	stw	r12,60(sp)
10004a18:	9829883a 	mov	r20,r19
10004a1c:	4027883a 	mov	r19,r8
10004a20:	00000206 	br	10004a2c <___vfprintf_internal_r+0x1708>
10004a24:	202b883a 	mov	r21,r4
10004a28:	1021883a 	mov	r16,r2
10004a2c:	8009883a 	mov	r4,r16
10004a30:	01400284 	movi	r5,10
10004a34:	000ce3c0 	call	1000ce3c <__modsi3>
10004a38:	10800c04 	addi	r2,r2,48
10004a3c:	8009883a 	mov	r4,r16
10004a40:	a8bfffc5 	stb	r2,-1(r21)
10004a44:	01400284 	movi	r5,10
10004a48:	000cdbc0 	call	1000cdbc <__divsi3>
10004a4c:	80c01908 	cmpgei	r3,r16,100
10004a50:	a93fffc4 	addi	r4,r21,-1
10004a54:	183ff31e 	bne	r3,zero,10004a24 <___vfprintf_internal_r+0x1700>
10004a58:	10800c04 	addi	r2,r2,48
10004a5c:	20bfffc5 	stb	r2,-1(r4)
10004a60:	a8ffff84 	addi	r3,r21,-2
10004a64:	d9001bc4 	addi	r4,sp,111
10004a68:	9811883a 	mov	r8,r19
10004a6c:	dc000717 	ldw	r16,28(sp)
10004a70:	db000f17 	ldw	r12,60(sp)
10004a74:	a027883a 	mov	r19,r20
10004a78:	1902732e 	bgeu	r3,r4,10005448 <___vfprintf_internal_r+0x2124>
10004a7c:	d90018c4 	addi	r4,sp,99
10004a80:	00000106 	br	10004a88 <___vfprintf_internal_r+0x1764>
10004a84:	18800003 	ldbu	r2,0(r3)
10004a88:	21000044 	addi	r4,r4,1
10004a8c:	20bfffc5 	stb	r2,-1(r4)
10004a90:	18c00044 	addi	r3,r3,1
10004a94:	d8801bc4 	addi	r2,sp,111
10004a98:	18bffa1e 	bne	r3,r2,10004a84 <___vfprintf_internal_r+0x1760>
10004a9c:	d8801c44 	addi	r2,sp,113
10004aa0:	d8c018c4 	addi	r3,sp,99
10004aa4:	1545c83a 	sub	r2,r2,r21
10004aa8:	1885883a 	add	r2,r3,r2
10004aac:	d8c01844 	addi	r3,sp,97
10004ab0:	10c5c83a 	sub	r2,r2,r3
10004ab4:	d8801115 	stw	r2,68(sp)
10004ab8:	d8c00817 	ldw	r3,32(sp)
10004abc:	d9001117 	ldw	r4,68(sp)
10004ac0:	18800088 	cmpgei	r2,r3,2
10004ac4:	1929883a 	add	r20,r3,r4
10004ac8:	10024926 	beq	r2,zero,100053f0 <___vfprintf_internal_r+0x20cc>
10004acc:	d8800b17 	ldw	r2,44(sp)
10004ad0:	a0a9883a 	add	r20,r20,r2
10004ad4:	a02b883a 	mov	r21,r20
10004ad8:	a000010e 	bge	r20,zero,10004ae0 <___vfprintf_internal_r+0x17bc>
10004adc:	002b883a 	mov	r21,zero
10004ae0:	d8000715 	stw	zero,28(sp)
10004ae4:	00013f06 	br	10004fe4 <___vfprintf_internal_r+0x1cc0>
10004ae8:	00800c04 	movi	r2,48
10004aec:	d8801585 	stb	r2,86(sp)
10004af0:	df0015c5 	stb	fp,87(sp)
10004af4:	63000094 	ori	r12,r12,2
10004af8:	00800084 	movi	r2,2
10004afc:	003ce406 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10004b00:	d9400417 	ldw	r5,16(sp)
10004b04:	20800017 	ldw	r2,0(r4)
10004b08:	d8c00615 	stw	r3,24(sp)
10004b0c:	2809d7fa 	srai	r4,r5,31
10004b10:	11400015 	stw	r5,0(r2)
10004b14:	11000115 	stw	r4,4(r2)
10004b18:	003a3706 	br	100033f8 <___vfprintf_internal_r+0xd4>
10004b1c:	0463c83a 	sub	r17,zero,r17
10004b20:	d8800615 	stw	r2,24(sp)
10004b24:	003b1806 	br	10003788 <___vfprintf_internal_r+0x464>
10004b28:	2039883a 	mov	fp,r4
10004b2c:	073eda16 	blt	zero,fp,10004698 <___vfprintf_internal_r+0x1374>
10004b30:	003ee306 	br	100046c0 <___vfprintf_internal_r+0x139c>
10004b34:	9080004c 	andi	r2,r18,1
10004b38:	103ee81e 	bne	r2,zero,100046dc <___vfprintf_internal_r+0x13b8>
10004b3c:	d8800817 	ldw	r2,32(sp)
10004b40:	d9400717 	ldw	r5,28(sp)
10004b44:	1105c83a 	sub	r2,r2,r4
10004b48:	2900500e 	bge	r5,r4,10004c8c <___vfprintf_internal_r+0x1968>
10004b4c:	1039883a 	mov	fp,r2
10004b50:	003f0006 	br	10004754 <___vfprintf_internal_r+0x1430>
10004b54:	d9000517 	ldw	r4,20(sp)
10004b58:	d9801c04 	addi	r6,sp,112
10004b5c:	980b883a 	mov	r5,r19
10004b60:	000a49c0 	call	1000a49c <__sprint_r>
10004b64:	103ace1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004b68:	df001d17 	ldw	fp,116(sp)
10004b6c:	d8c01e17 	ldw	r3,120(sp)
10004b70:	da002b04 	addi	r8,sp,172
10004b74:	e7000044 	addi	fp,fp,1
10004b78:	b815883a 	mov	r10,r23
10004b7c:	003e4f06 	br	100044bc <___vfprintf_internal_r+0x1198>
10004b80:	b7000043 	ldbu	fp,1(r22)
10004b84:	63000814 	ori	r12,r12,32
10004b88:	b5800044 	addi	r22,r22,1
10004b8c:	e2803fcc 	andi	r10,fp,255
10004b90:	5280201c 	xori	r10,r10,128
10004b94:	52bfe004 	addi	r10,r10,-128
10004b98:	003a3d06 	br	10003490 <___vfprintf_internal_r+0x16c>
10004b9c:	d9000517 	ldw	r4,20(sp)
10004ba0:	d9801c04 	addi	r6,sp,112
10004ba4:	980b883a 	mov	r5,r19
10004ba8:	000a49c0 	call	1000a49c <__sprint_r>
10004bac:	103abc1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004bb0:	d8c01e17 	ldw	r3,120(sp)
10004bb4:	b811883a 	mov	r8,r23
10004bb8:	003d4806 	br	100040dc <___vfprintf_internal_r+0xdb8>
10004bbc:	0039883a 	mov	fp,zero
10004bc0:	003ec006 	br	100046c4 <___vfprintf_internal_r+0x13a0>
10004bc4:	588001f0 	cmpltui	r2,r11,7
10004bc8:	5829883a 	mov	r20,r11
10004bcc:	10013b26 	beq	r2,zero,100050bc <___vfprintf_internal_r+0x1d98>
10004bd0:	04040074 	movhi	r16,4097
10004bd4:	a02b883a 	mov	r21,r20
10004bd8:	dc800615 	stw	r18,24(sp)
10004bdc:	840a1504 	addi	r16,r16,10324
10004be0:	003b6906 	br	10003988 <___vfprintf_internal_r+0x664>
10004be4:	03040074 	movhi	r12,4097
10004be8:	e1000450 	cmplti	r4,fp,17
10004bec:	630a1784 	addi	r12,r12,10334
10004bf0:	d8801d17 	ldw	r2,116(sp)
10004bf4:	20010b1e 	bne	r4,zero,10005024 <___vfprintf_internal_r+0x1d00>
10004bf8:	b009883a 	mov	r4,r22
10004bfc:	dc000e15 	stw	r16,56(sp)
10004c00:	dc800f15 	stw	r18,60(sp)
10004c04:	882d883a 	mov	r22,r17
10004c08:	05000404 	movi	r20,16
10004c0c:	e023883a 	mov	r17,fp
10004c10:	dc000517 	ldw	r16,20(sp)
10004c14:	6025883a 	mov	r18,r12
10004c18:	2039883a 	mov	fp,r4
10004c1c:	00000406 	br	10004c30 <___vfprintf_internal_r+0x190c>
10004c20:	42000204 	addi	r8,r8,8
10004c24:	8c7ffc04 	addi	r17,r17,-16
10004c28:	89000448 	cmpgei	r4,r17,17
10004c2c:	2000f626 	beq	r4,zero,10005008 <___vfprintf_internal_r+0x1ce4>
10004c30:	10800044 	addi	r2,r2,1
10004c34:	18c00404 	addi	r3,r3,16
10004c38:	44800015 	stw	r18,0(r8)
10004c3c:	45000115 	stw	r20,4(r8)
10004c40:	d8c01e15 	stw	r3,120(sp)
10004c44:	d8801d15 	stw	r2,116(sp)
10004c48:	11000208 	cmpgei	r4,r2,8
10004c4c:	203ff426 	beq	r4,zero,10004c20 <___vfprintf_internal_r+0x18fc>
10004c50:	d9801c04 	addi	r6,sp,112
10004c54:	980b883a 	mov	r5,r19
10004c58:	8009883a 	mov	r4,r16
10004c5c:	000a49c0 	call	1000a49c <__sprint_r>
10004c60:	103a8f1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004c64:	d8c01e17 	ldw	r3,120(sp)
10004c68:	d8801d17 	ldw	r2,116(sp)
10004c6c:	b811883a 	mov	r8,r23
10004c70:	003fec06 	br	10004c24 <___vfprintf_internal_r+0x1900>
10004c74:	d8800617 	ldw	r2,24(sp)
10004c78:	10800017 	ldw	r2,0(r2)
10004c7c:	d8c00615 	stw	r3,24(sp)
10004c80:	d8c00417 	ldw	r3,16(sp)
10004c84:	10c00015 	stw	r3,0(r2)
10004c88:	0039db06 	br	100033f8 <___vfprintf_internal_r+0xd4>
10004c8c:	d9000817 	ldw	r4,32(sp)
10004c90:	d9400717 	ldw	r5,28(sp)
10004c94:	2179c83a 	sub	fp,r4,r5
10004c98:	003ea106 	br	10004720 <___vfprintf_internal_r+0x13fc>
10004c9c:	d9000517 	ldw	r4,20(sp)
10004ca0:	d9801c04 	addi	r6,sp,112
10004ca4:	980b883a 	mov	r5,r19
10004ca8:	000a49c0 	call	1000a49c <__sprint_r>
10004cac:	103a7c1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004cb0:	d8c01e17 	ldw	r3,120(sp)
10004cb4:	dd001d17 	ldw	r20,116(sp)
10004cb8:	b815883a 	mov	r10,r23
10004cbc:	003ddf06 	br	1000443c <___vfprintf_internal_r+0x1118>
10004cc0:	d9000517 	ldw	r4,20(sp)
10004cc4:	d9801c04 	addi	r6,sp,112
10004cc8:	980b883a 	mov	r5,r19
10004ccc:	000a49c0 	call	1000a49c <__sprint_r>
10004cd0:	103a731e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004cd4:	d8c01e17 	ldw	r3,120(sp)
10004cd8:	dd001d17 	ldw	r20,116(sp)
10004cdc:	b815883a 	mov	r10,r23
10004ce0:	003dcb06 	br	10004410 <___vfprintf_internal_r+0x10ec>
10004ce4:	d8801d17 	ldw	r2,116(sp)
10004ce8:	01440074 	movhi	r5,4097
10004cec:	294a1704 	addi	r5,r5,10332
10004cf0:	10800044 	addi	r2,r2,1
10004cf4:	18c00044 	addi	r3,r3,1
10004cf8:	41400015 	stw	r5,0(r8)
10004cfc:	01400044 	movi	r5,1
10004d00:	d8801d15 	stw	r2,116(sp)
10004d04:	41400115 	stw	r5,4(r8)
10004d08:	d8c01e15 	stw	r3,120(sp)
10004d0c:	10800208 	cmpgei	r2,r2,8
10004d10:	103d871e 	bne	r2,zero,10004330 <___vfprintf_internal_r+0x100c>
10004d14:	42000204 	addi	r8,r8,8
10004d18:	003d8d06 	br	10004350 <___vfprintf_internal_r+0x102c>
10004d1c:	d9000517 	ldw	r4,20(sp)
10004d20:	d9801c04 	addi	r6,sp,112
10004d24:	980b883a 	mov	r5,r19
10004d28:	dac01015 	stw	r11,64(sp)
10004d2c:	db400f15 	stw	r13,60(sp)
10004d30:	db800e15 	stw	r14,56(sp)
10004d34:	000a49c0 	call	1000a49c <__sprint_r>
10004d38:	103a591e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004d3c:	d8c01e17 	ldw	r3,120(sp)
10004d40:	b811883a 	mov	r8,r23
10004d44:	dac01017 	ldw	r11,64(sp)
10004d48:	db400f17 	ldw	r13,60(sp)
10004d4c:	db800e17 	ldw	r14,56(sp)
10004d50:	003b1806 	br	100039b4 <___vfprintf_internal_r+0x690>
10004d54:	d9000517 	ldw	r4,20(sp)
10004d58:	d9801c04 	addi	r6,sp,112
10004d5c:	980b883a 	mov	r5,r19
10004d60:	000a49c0 	call	1000a49c <__sprint_r>
10004d64:	103a4e1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004d68:	b811883a 	mov	r8,r23
10004d6c:	003cc706 	br	1000408c <___vfprintf_internal_r+0xd68>
10004d70:	d9000517 	ldw	r4,20(sp)
10004d74:	d9801c04 	addi	r6,sp,112
10004d78:	980b883a 	mov	r5,r19
10004d7c:	dac00e15 	stw	r11,56(sp)
10004d80:	000a49c0 	call	1000a49c <__sprint_r>
10004d84:	103a461e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004d88:	d8c01e17 	ldw	r3,120(sp)
10004d8c:	b811883a 	mov	r8,r23
10004d90:	dac00e17 	ldw	r11,56(sp)
10004d94:	003b2406 	br	10003a28 <___vfprintf_internal_r+0x704>
10004d98:	10c00060 	cmpeqi	r3,r2,1
10004d9c:	9019883a 	mov	r12,r18
10004da0:	183bed26 	beq	r3,zero,10003d58 <___vfprintf_internal_r+0xa34>
10004da4:	003c6d06 	br	10003f5c <___vfprintf_internal_r+0xc38>
10004da8:	d8800d17 	ldw	r2,52(sp)
10004dac:	d9400b17 	ldw	r5,44(sp)
10004db0:	40800015 	stw	r2,0(r8)
10004db4:	d8801d17 	ldw	r2,116(sp)
10004db8:	28c7883a 	add	r3,r5,r3
10004dbc:	41400115 	stw	r5,4(r8)
10004dc0:	10800044 	addi	r2,r2,1
10004dc4:	d8c01e15 	stw	r3,120(sp)
10004dc8:	d8801d15 	stw	r2,116(sp)
10004dcc:	11400208 	cmpgei	r5,r2,8
10004dd0:	2800d31e 	bne	r5,zero,10005120 <___vfprintf_internal_r+0x1dfc>
10004dd4:	42000204 	addi	r8,r8,8
10004dd8:	203d6e0e 	bge	r4,zero,10004394 <___vfprintf_internal_r+0x1070>
10004ddc:	03040074 	movhi	r12,4097
10004de0:	217ffc08 	cmpgei	r5,r4,-16
10004de4:	630a1784 	addi	r12,r12,10334
10004de8:	0129c83a 	sub	r20,zero,r4
10004dec:	28014a1e 	bne	r5,zero,10005318 <___vfprintf_internal_r+0x1ff4>
10004df0:	dc000715 	stw	r16,28(sp)
10004df4:	07000404 	movi	fp,16
10004df8:	a021883a 	mov	r16,r20
10004dfc:	8829883a 	mov	r20,r17
10004e00:	6023883a 	mov	r17,r12
10004e04:	00000406 	br	10004e18 <___vfprintf_internal_r+0x1af4>
10004e08:	42000204 	addi	r8,r8,8
10004e0c:	843ffc04 	addi	r16,r16,-16
10004e10:	81000448 	cmpgei	r4,r16,17
10004e14:	20013c26 	beq	r4,zero,10005308 <___vfprintf_internal_r+0x1fe4>
10004e18:	10800044 	addi	r2,r2,1
10004e1c:	18c00404 	addi	r3,r3,16
10004e20:	44400015 	stw	r17,0(r8)
10004e24:	47000115 	stw	fp,4(r8)
10004e28:	d8c01e15 	stw	r3,120(sp)
10004e2c:	d8801d15 	stw	r2,116(sp)
10004e30:	11000208 	cmpgei	r4,r2,8
10004e34:	203ff426 	beq	r4,zero,10004e08 <___vfprintf_internal_r+0x1ae4>
10004e38:	d9000517 	ldw	r4,20(sp)
10004e3c:	d9801c04 	addi	r6,sp,112
10004e40:	980b883a 	mov	r5,r19
10004e44:	000a49c0 	call	1000a49c <__sprint_r>
10004e48:	103a151e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10004e4c:	d8c01e17 	ldw	r3,120(sp)
10004e50:	d8801d17 	ldw	r2,116(sp)
10004e54:	b811883a 	mov	r8,r23
10004e58:	003fec06 	br	10004e0c <___vfprintf_internal_r+0x1ae8>
10004e5c:	8009883a 	mov	r4,r16
10004e60:	000328c0 	call	1000328c <strlen>
10004e64:	1029883a 	mov	r20,r2
10004e68:	102b883a 	mov	r21,r2
10004e6c:	dc800615 	stw	r18,24(sp)
10004e70:	db000717 	ldw	r12,28(sp)
10004e74:	da000e17 	ldw	r8,56(sp)
10004e78:	003ac306 	br	10003988 <___vfprintf_internal_r+0x664>
10004e7c:	8817883a 	mov	r11,r17
10004e80:	9019883a 	mov	r12,r18
10004e84:	dc400e17 	ldw	r17,56(sp)
10004e88:	dc800717 	ldw	r18,28(sp)
10004e8c:	a7000044 	addi	fp,r20,1
10004e90:	50800204 	addi	r2,r10,8
10004e94:	1ac7883a 	add	r3,r3,r11
10004e98:	53000015 	stw	r12,0(r10)
10004e9c:	52c00115 	stw	r11,4(r10)
10004ea0:	d8c01e15 	stw	r3,120(sp)
10004ea4:	df001d15 	stw	fp,116(sp)
10004ea8:	e1000208 	cmpgei	r4,fp,8
10004eac:	203f291e 	bne	r4,zero,10004b54 <___vfprintf_internal_r+0x1830>
10004eb0:	e7000044 	addi	fp,fp,1
10004eb4:	12000204 	addi	r8,r2,8
10004eb8:	1015883a 	mov	r10,r2
10004ebc:	003d7f06 	br	100044bc <___vfprintf_internal_r+0x1198>
10004ec0:	8819883a 	mov	r12,r17
10004ec4:	dc400717 	ldw	r17,28(sp)
10004ec8:	10800044 	addi	r2,r2,1
10004ecc:	1c07883a 	add	r3,r3,r16
10004ed0:	d8801d15 	stw	r2,116(sp)
10004ed4:	43000015 	stw	r12,0(r8)
10004ed8:	44000115 	stw	r16,4(r8)
10004edc:	d8c01e15 	stw	r3,120(sp)
10004ee0:	10800208 	cmpgei	r2,r2,8
10004ee4:	103add26 	beq	r2,zero,10003a5c <___vfprintf_internal_r+0x738>
10004ee8:	003d3306 	br	100043b8 <___vfprintf_internal_r+0x1094>
10004eec:	d8800615 	stw	r2,24(sp)
10004ef0:	0029883a 	mov	r20,zero
10004ef4:	0005883a 	mov	r2,zero
10004ef8:	003be506 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10004efc:	d8800615 	stw	r2,24(sp)
10004f00:	0029883a 	mov	r20,zero
10004f04:	00800044 	movi	r2,1
10004f08:	003be106 	br	10003e90 <___vfprintf_internal_r+0xb6c>
10004f0c:	d8801a04 	addi	r2,sp,104
10004f10:	d8800315 	stw	r2,12(sp)
10004f14:	d9400917 	ldw	r5,36(sp)
10004f18:	d8801704 	addi	r2,sp,92
10004f1c:	d9000517 	ldw	r4,20(sp)
10004f20:	d8800215 	stw	r2,8(sp)
10004f24:	d8801604 	addi	r2,sp,88
10004f28:	dac00015 	stw	r11,0(sp)
10004f2c:	d8800115 	stw	r2,4(sp)
10004f30:	01c000c4 	movi	r7,3
10004f34:	a80d883a 	mov	r6,r21
10004f38:	da001215 	stw	r8,72(sp)
10004f3c:	db001015 	stw	r12,64(sp)
10004f40:	dac00815 	stw	r11,32(sp)
10004f44:	00058cc0 	call	100058cc <_dtoa_r>
10004f48:	dac00817 	ldw	r11,32(sp)
10004f4c:	1021883a 	mov	r16,r2
10004f50:	db001017 	ldw	r12,64(sp)
10004f54:	12e9883a 	add	r20,r2,r11
10004f58:	80800007 	ldb	r2,0(r16)
10004f5c:	da001217 	ldw	r8,72(sp)
10004f60:	10800c20 	cmpeqi	r2,r2,48
10004f64:	10005b1e 	bne	r2,zero,100050d4 <___vfprintf_internal_r+0x1db0>
10004f68:	d8801617 	ldw	r2,88(sp)
10004f6c:	a0a9883a 	add	r20,r20,r2
10004f70:	d9000917 	ldw	r4,36(sp)
10004f74:	000d883a 	mov	r6,zero
10004f78:	000f883a 	mov	r7,zero
10004f7c:	a80b883a 	mov	r5,r21
10004f80:	da001215 	stw	r8,72(sp)
10004f84:	dac01015 	stw	r11,64(sp)
10004f88:	db000815 	stw	r12,32(sp)
10004f8c:	000e1bc0 	call	1000e1bc <__eqdf2>
10004f90:	db000817 	ldw	r12,32(sp)
10004f94:	dac01017 	ldw	r11,64(sp)
10004f98:	da001217 	ldw	r8,72(sp)
10004f9c:	1000891e 	bne	r2,zero,100051c4 <___vfprintf_internal_r+0x1ea0>
10004fa0:	a005883a 	mov	r2,r20
10004fa4:	1405c83a 	sub	r2,r2,r16
10004fa8:	d8c00717 	ldw	r3,28(sp)
10004fac:	d8800815 	stw	r2,32(sp)
10004fb0:	d8801617 	ldw	r2,88(sp)
10004fb4:	18c011d8 	cmpnei	r3,r3,71
10004fb8:	d8800715 	stw	r2,28(sp)
10004fbc:	183e8426 	beq	r3,zero,100049d0 <___vfprintf_internal_r+0x16ac>
10004fc0:	d8800f17 	ldw	r2,60(sp)
10004fc4:	103e8726 	beq	r2,zero,100049e4 <___vfprintf_internal_r+0x16c0>
10004fc8:	d8c00717 	ldw	r3,28(sp)
10004fcc:	6080004c 	andi	r2,r12,1
10004fd0:	12c4b03a 	or	r2,r2,r11
10004fd4:	00c10d0e 	bge	zero,r3,1000540c <___vfprintf_internal_r+0x20e8>
10004fd8:	1000f11e 	bne	r2,zero,100053a0 <___vfprintf_internal_r+0x207c>
10004fdc:	dd000717 	ldw	r20,28(sp)
10004fe0:	a02b883a 	mov	r21,r20
10004fe4:	d8800e07 	ldb	r2,56(sp)
10004fe8:	10007f26 	beq	r2,zero,100051e8 <___vfprintf_internal_r+0x1ec4>
10004fec:	00800b44 	movi	r2,45
10004ff0:	d8801545 	stb	r2,85(sp)
10004ff4:	0017883a 	mov	r11,zero
10004ff8:	003be506 	br	10003f90 <___vfprintf_internal_r+0xc6c>
10004ffc:	04040074 	movhi	r16,4097
10005000:	840a0704 	addi	r16,r16,10268
10005004:	003b3406 	br	10003cd8 <___vfprintf_internal_r+0x9b4>
10005008:	9019883a 	mov	r12,r18
1000500c:	dc000e17 	ldw	r16,56(sp)
10005010:	dc800f17 	ldw	r18,60(sp)
10005014:	e009883a 	mov	r4,fp
10005018:	8839883a 	mov	fp,r17
1000501c:	b023883a 	mov	r17,r22
10005020:	202d883a 	mov	r22,r4
10005024:	10800044 	addi	r2,r2,1
10005028:	1f07883a 	add	r3,r3,fp
1000502c:	d8801d15 	stw	r2,116(sp)
10005030:	43000015 	stw	r12,0(r8)
10005034:	47000115 	stw	fp,4(r8)
10005038:	d8c01e15 	stw	r3,120(sp)
1000503c:	10800208 	cmpgei	r2,r2,8
10005040:	1000421e 	bne	r2,zero,1000514c <___vfprintf_internal_r+0x1e28>
10005044:	42000204 	addi	r8,r8,8
10005048:	003da106 	br	100046d0 <___vfprintf_internal_r+0x13ac>
1000504c:	00800b44 	movi	r2,45
10005050:	d8801545 	stb	r2,85(sp)
10005054:	03400b44 	movi	r13,45
10005058:	003b1b06 	br	10003cc8 <___vfprintf_internal_r+0x9a4>
1000505c:	8819883a 	mov	r12,r17
10005060:	dc400717 	ldw	r17,28(sp)
10005064:	10800044 	addi	r2,r2,1
10005068:	1f07883a 	add	r3,r3,fp
1000506c:	d8801d15 	stw	r2,116(sp)
10005070:	43000015 	stw	r12,0(r8)
10005074:	47000115 	stw	fp,4(r8)
10005078:	d8c01e15 	stw	r3,120(sp)
1000507c:	10800208 	cmpgei	r2,r2,8
10005080:	103a7626 	beq	r2,zero,10003a5c <___vfprintf_internal_r+0x738>
10005084:	003ccc06 	br	100043b8 <___vfprintf_internal_r+0x1094>
10005088:	d9000517 	ldw	r4,20(sp)
1000508c:	d9801c04 	addi	r6,sp,112
10005090:	980b883a 	mov	r5,r19
10005094:	000a49c0 	call	1000a49c <__sprint_r>
10005098:	1039811e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
1000509c:	d9001617 	ldw	r4,88(sp)
100050a0:	d8c01e17 	ldw	r3,120(sp)
100050a4:	b811883a 	mov	r8,r23
100050a8:	003d9806 	br	1000470c <___vfprintf_internal_r+0x13e8>
100050ac:	1560003c 	xorhi	r21,r2,32768
100050b0:	00800b44 	movi	r2,45
100050b4:	d8800e05 	stb	r2,56(sp)
100050b8:	003e1d06 	br	10004930 <___vfprintf_internal_r+0x160c>
100050bc:	05000184 	movi	r20,6
100050c0:	003ec306 	br	10004bd0 <___vfprintf_internal_r+0x18ac>
100050c4:	002b883a 	mov	r21,zero
100050c8:	003a0706 	br	100038e8 <___vfprintf_internal_r+0x5c4>
100050cc:	d9401545 	stb	r5,85(sp)
100050d0:	00399106 	br	10003718 <___vfprintf_internal_r+0x3f4>
100050d4:	d9000917 	ldw	r4,36(sp)
100050d8:	000d883a 	mov	r6,zero
100050dc:	000f883a 	mov	r7,zero
100050e0:	a80b883a 	mov	r5,r21
100050e4:	da001215 	stw	r8,72(sp)
100050e8:	dac01015 	stw	r11,64(sp)
100050ec:	db000815 	stw	r12,32(sp)
100050f0:	000e1bc0 	call	1000e1bc <__eqdf2>
100050f4:	db000817 	ldw	r12,32(sp)
100050f8:	dac01017 	ldw	r11,64(sp)
100050fc:	da001217 	ldw	r8,72(sp)
10005100:	103f9926 	beq	r2,zero,10004f68 <___vfprintf_internal_r+0x1c44>
10005104:	00800044 	movi	r2,1
10005108:	12c5c83a 	sub	r2,r2,r11
1000510c:	d8801615 	stw	r2,88(sp)
10005110:	003f9606 	br	10004f6c <___vfprintf_internal_r+0x1c48>
10005114:	583e011e 	bne	r11,zero,1000491c <___vfprintf_internal_r+0x15f8>
10005118:	02c00044 	movi	r11,1
1000511c:	003dff06 	br	1000491c <___vfprintf_internal_r+0x15f8>
10005120:	d9000517 	ldw	r4,20(sp)
10005124:	d9801c04 	addi	r6,sp,112
10005128:	980b883a 	mov	r5,r19
1000512c:	000a49c0 	call	1000a49c <__sprint_r>
10005130:	10395b1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10005134:	d9001617 	ldw	r4,88(sp)
10005138:	d8c01e17 	ldw	r3,120(sp)
1000513c:	d8801d17 	ldw	r2,116(sp)
10005140:	b811883a 	mov	r8,r23
10005144:	203c930e 	bge	r4,zero,10004394 <___vfprintf_internal_r+0x1070>
10005148:	003f2406 	br	10004ddc <___vfprintf_internal_r+0x1ab8>
1000514c:	d9000517 	ldw	r4,20(sp)
10005150:	d9801c04 	addi	r6,sp,112
10005154:	980b883a 	mov	r5,r19
10005158:	000a49c0 	call	1000a49c <__sprint_r>
1000515c:	1039501e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10005160:	d8c01e17 	ldw	r3,120(sp)
10005164:	b811883a 	mov	r8,r23
10005168:	003d5906 	br	100046d0 <___vfprintf_internal_r+0x13ac>
1000516c:	d8801a04 	addi	r2,sp,104
10005170:	d8800315 	stw	r2,12(sp)
10005174:	d9400917 	ldw	r5,36(sp)
10005178:	d8801704 	addi	r2,sp,92
1000517c:	d9000517 	ldw	r4,20(sp)
10005180:	5d000044 	addi	r20,r11,1
10005184:	d8800215 	stw	r2,8(sp)
10005188:	d8801604 	addi	r2,sp,88
1000518c:	d8800115 	stw	r2,4(sp)
10005190:	dd000015 	stw	r20,0(sp)
10005194:	01c00084 	movi	r7,2
10005198:	a80d883a 	mov	r6,r21
1000519c:	dac00815 	stw	r11,32(sp)
100051a0:	00058cc0 	call	100058cc <_dtoa_r>
100051a4:	dac00817 	ldw	r11,32(sp)
100051a8:	db001017 	ldw	r12,64(sp)
100051ac:	da001217 	ldw	r8,72(sp)
100051b0:	1021883a 	mov	r16,r2
100051b4:	e08011d8 	cmpnei	r2,fp,71
100051b8:	103dfb26 	beq	r2,zero,100049a8 <___vfprintf_internal_r+0x1684>
100051bc:	8529883a 	add	r20,r16,r20
100051c0:	003f6b06 	br	10004f70 <___vfprintf_internal_r+0x1c4c>
100051c4:	d8801a17 	ldw	r2,104(sp)
100051c8:	01000c04 	movi	r4,48
100051cc:	153f752e 	bgeu	r2,r20,10004fa4 <___vfprintf_internal_r+0x1c80>
100051d0:	10c00044 	addi	r3,r2,1
100051d4:	d8c01a15 	stw	r3,104(sp)
100051d8:	11000005 	stb	r4,0(r2)
100051dc:	d8801a17 	ldw	r2,104(sp)
100051e0:	153ffb36 	bltu	r2,r20,100051d0 <___vfprintf_internal_r+0x1eac>
100051e4:	003f6f06 	br	10004fa4 <___vfprintf_internal_r+0x1c80>
100051e8:	db401543 	ldbu	r13,85(sp)
100051ec:	0017883a 	mov	r11,zero
100051f0:	003b6306 	br	10003f80 <___vfprintf_internal_r+0xc5c>
100051f4:	d8800717 	ldw	r2,28(sp)
100051f8:	d8c00817 	ldw	r3,32(sp)
100051fc:	10c02216 	blt	r2,r3,10005288 <___vfprintf_internal_r+0x1f64>
10005200:	6300004c 	andi	r12,r12,1
10005204:	60005f1e 	bne	r12,zero,10005384 <___vfprintf_internal_r+0x2060>
10005208:	102b883a 	mov	r21,r2
1000520c:	1000010e 	bge	r2,zero,10005214 <___vfprintf_internal_r+0x1ef0>
10005210:	002b883a 	mov	r21,zero
10005214:	dd000717 	ldw	r20,28(sp)
10005218:	070019c4 	movi	fp,103
1000521c:	003f7106 	br	10004fe4 <___vfprintf_internal_r+0x1cc0>
10005220:	d9000517 	ldw	r4,20(sp)
10005224:	d9801c04 	addi	r6,sp,112
10005228:	980b883a 	mov	r5,r19
1000522c:	000a49c0 	call	1000a49c <__sprint_r>
10005230:	10391b1e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10005234:	d8c01e17 	ldw	r3,120(sp)
10005238:	b811883a 	mov	r8,r23
1000523c:	e03d210e 	bge	fp,zero,100046c4 <___vfprintf_internal_r+0x13a0>
10005240:	003e5e06 	br	10004bbc <___vfprintf_internal_r+0x1898>
10005244:	02c00184 	movi	r11,6
10005248:	003db406 	br	1000491c <___vfprintf_internal_r+0x15f8>
1000524c:	d9000517 	ldw	r4,20(sp)
10005250:	d9801c04 	addi	r6,sp,112
10005254:	980b883a 	mov	r5,r19
10005258:	000a49c0 	call	1000a49c <__sprint_r>
1000525c:	1039101e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
10005260:	d8801617 	ldw	r2,88(sp)
10005264:	d9000817 	ldw	r4,32(sp)
10005268:	d8c01e17 	ldw	r3,120(sp)
1000526c:	b811883a 	mov	r8,r23
10005270:	2085c83a 	sub	r2,r4,r2
10005274:	003d3706 	br	10004754 <___vfprintf_internal_r+0x1430>
10005278:	582b883a 	mov	r21,r11
1000527c:	dc800615 	stw	r18,24(sp)
10005280:	5829883a 	mov	r20,r11
10005284:	0039c006 	br	10003988 <___vfprintf_internal_r+0x664>
10005288:	d8800817 	ldw	r2,32(sp)
1000528c:	d8c00b17 	ldw	r3,44(sp)
10005290:	10e9883a 	add	r20,r2,r3
10005294:	d8800717 	ldw	r2,28(sp)
10005298:	00800316 	blt	zero,r2,100052a8 <___vfprintf_internal_r+0x1f84>
1000529c:	d8800717 	ldw	r2,28(sp)
100052a0:	a0b9c83a 	sub	fp,r20,r2
100052a4:	e5000044 	addi	r20,fp,1
100052a8:	a02b883a 	mov	r21,r20
100052ac:	a0003a16 	blt	r20,zero,10005398 <___vfprintf_internal_r+0x2074>
100052b0:	070019c4 	movi	fp,103
100052b4:	003f4b06 	br	10004fe4 <___vfprintf_internal_r+0x1cc0>
100052b8:	d9401545 	stb	r5,85(sp)
100052bc:	003ac506 	br	10003dd4 <___vfprintf_internal_r+0xab0>
100052c0:	d9401545 	stb	r5,85(sp)
100052c4:	003a2506 	br	10003b5c <___vfprintf_internal_r+0x838>
100052c8:	d9401545 	stb	r5,85(sp)
100052cc:	003a3306 	br	10003b9c <___vfprintf_internal_r+0x878>
100052d0:	d9401545 	stb	r5,85(sp)
100052d4:	00398806 	br	100038f8 <___vfprintf_internal_r+0x5d4>
100052d8:	d9401545 	stb	r5,85(sp)
100052dc:	00395f06 	br	1000385c <___vfprintf_internal_r+0x538>
100052e0:	d9401545 	stb	r5,85(sp)
100052e4:	00394b06 	br	10003814 <___vfprintf_internal_r+0x4f0>
100052e8:	d9401545 	stb	r5,85(sp)
100052ec:	003a3b06 	br	10003bdc <___vfprintf_internal_r+0x8b8>
100052f0:	d9401545 	stb	r5,85(sp)
100052f4:	003a8106 	br	10003cfc <___vfprintf_internal_r+0x9d8>
100052f8:	d9401545 	stb	r5,85(sp)
100052fc:	003a4706 	br	10003c1c <___vfprintf_internal_r+0x8f8>
10005300:	d9401545 	stb	r5,85(sp)
10005304:	003ac506 	br	10003e1c <___vfprintf_internal_r+0xaf8>
10005308:	8819883a 	mov	r12,r17
1000530c:	a023883a 	mov	r17,r20
10005310:	8029883a 	mov	r20,r16
10005314:	dc000717 	ldw	r16,28(sp)
10005318:	10800044 	addi	r2,r2,1
1000531c:	1d07883a 	add	r3,r3,r20
10005320:	43000015 	stw	r12,0(r8)
10005324:	45000115 	stw	r20,4(r8)
10005328:	d8c01e15 	stw	r3,120(sp)
1000532c:	d8801d15 	stw	r2,116(sp)
10005330:	11000208 	cmpgei	r4,r2,8
10005334:	203c1626 	beq	r4,zero,10004390 <___vfprintf_internal_r+0x106c>
10005338:	d9000517 	ldw	r4,20(sp)
1000533c:	d9801c04 	addi	r6,sp,112
10005340:	980b883a 	mov	r5,r19
10005344:	000a49c0 	call	1000a49c <__sprint_r>
10005348:	1038d51e 	bne	r2,zero,100036a0 <___vfprintf_internal_r+0x37c>
1000534c:	d8c01e17 	ldw	r3,120(sp)
10005350:	d8801d17 	ldw	r2,116(sp)
10005354:	b811883a 	mov	r8,r23
10005358:	003c0e06 	br	10004394 <___vfprintf_internal_r+0x1070>
1000535c:	00bfffc4 	movi	r2,-1
10005360:	d8800415 	stw	r2,16(sp)
10005364:	0038d106 	br	100036ac <___vfprintf_internal_r+0x388>
10005368:	00800c04 	movi	r2,48
1000536c:	a0c00c04 	addi	r3,r20,48
10005370:	d88018c5 	stb	r2,99(sp)
10005374:	00800104 	movi	r2,4
10005378:	d8c01905 	stb	r3,100(sp)
1000537c:	d8801115 	stw	r2,68(sp)
10005380:	003dcd06 	br	10004ab8 <___vfprintf_internal_r+0x1794>
10005384:	d8800717 	ldw	r2,28(sp)
10005388:	d8c00b17 	ldw	r3,44(sp)
1000538c:	10e9883a 	add	r20,r2,r3
10005390:	a02b883a 	mov	r21,r20
10005394:	a03fc60e 	bge	r20,zero,100052b0 <___vfprintf_internal_r+0x1f8c>
10005398:	002b883a 	mov	r21,zero
1000539c:	003fc406 	br	100052b0 <___vfprintf_internal_r+0x1f8c>
100053a0:	d8800b17 	ldw	r2,44(sp)
100053a4:	1885883a 	add	r2,r3,r2
100053a8:	12e9883a 	add	r20,r2,r11
100053ac:	a02b883a 	mov	r21,r20
100053b0:	a03f0c0e 	bge	r20,zero,10004fe4 <___vfprintf_internal_r+0x1cc0>
100053b4:	002b883a 	mov	r21,zero
100053b8:	003f0a06 	br	10004fe4 <___vfprintf_internal_r+0x1cc0>
100053bc:	d8800a17 	ldw	r2,40(sp)
100053c0:	10001d16 	blt	r2,zero,10005438 <___vfprintf_internal_r+0x2114>
100053c4:	db401543 	ldbu	r13,85(sp)
100053c8:	e0801210 	cmplti	r2,fp,72
100053cc:	1000171e 	bne	r2,zero,1000542c <___vfprintf_internal_r+0x2108>
100053d0:	04040074 	movhi	r16,4097
100053d4:	840a0a04 	addi	r16,r16,10280
100053d8:	003a3f06 	br	10003cd8 <___vfprintf_internal_r+0x9b4>
100053dc:	00c00044 	movi	r3,1
100053e0:	18a9c83a 	sub	r20,r3,r2
100053e4:	00800b44 	movi	r2,45
100053e8:	d8801885 	stb	r2,98(sp)
100053ec:	003d8406 	br	10004a00 <___vfprintf_internal_r+0x16dc>
100053f0:	6080004c 	andi	r2,r12,1
100053f4:	d8800715 	stw	r2,28(sp)
100053f8:	103db41e 	bne	r2,zero,10004acc <___vfprintf_internal_r+0x17a8>
100053fc:	003feb06 	br	100053ac <___vfprintf_internal_r+0x2088>
10005400:	4005883a 	mov	r2,r8
10005404:	630a1784 	addi	r12,r12,10334
10005408:	003ea206 	br	10004e94 <___vfprintf_internal_r+0x1b70>
1000540c:	1000031e 	bne	r2,zero,1000541c <___vfprintf_internal_r+0x20f8>
10005410:	05400044 	movi	r21,1
10005414:	05000044 	movi	r20,1
10005418:	003ef206 	br	10004fe4 <___vfprintf_internal_r+0x1cc0>
1000541c:	d8800b17 	ldw	r2,44(sp)
10005420:	10800044 	addi	r2,r2,1
10005424:	12e9883a 	add	r20,r2,r11
10005428:	003fe006 	br	100053ac <___vfprintf_internal_r+0x2088>
1000542c:	04040074 	movhi	r16,4097
10005430:	840a0904 	addi	r16,r16,10276
10005434:	003a2806 	br	10003cd8 <___vfprintf_internal_r+0x9b4>
10005438:	00800b44 	movi	r2,45
1000543c:	d8801545 	stb	r2,85(sp)
10005440:	03400b44 	movi	r13,45
10005444:	003fe006 	br	100053c8 <___vfprintf_internal_r+0x20a4>
10005448:	00800084 	movi	r2,2
1000544c:	d8801115 	stw	r2,68(sp)
10005450:	003d9906 	br	10004ab8 <___vfprintf_internal_r+0x1794>
10005454:	d8800617 	ldw	r2,24(sp)
10005458:	12c00017 	ldw	r11,0(r2)
1000545c:	10800104 	addi	r2,r2,4
10005460:	5800010e 	bge	r11,zero,10005468 <___vfprintf_internal_r+0x2144>
10005464:	02ffffc4 	movi	r11,-1
10005468:	b7000043 	ldbu	fp,1(r22)
1000546c:	d8800615 	stw	r2,24(sp)
10005470:	182d883a 	mov	r22,r3
10005474:	e2803fcc 	andi	r10,fp,255
10005478:	5280201c 	xori	r10,r10,128
1000547c:	52bfe004 	addi	r10,r10,-128
10005480:	00380306 	br	10003490 <___vfprintf_internal_r+0x16c>

10005484 <__vfprintf_internal>:
10005484:	00840074 	movhi	r2,4097
10005488:	300f883a 	mov	r7,r6
1000548c:	280d883a 	mov	r6,r5
10005490:	200b883a 	mov	r5,r4
10005494:	1113e117 	ldw	r4,20356(r2)
10005498:	00033241 	jmpi	10003324 <___vfprintf_internal_r>

1000549c <__sbprintf>:
1000549c:	2880030b 	ldhu	r2,12(r5)
100054a0:	2b001917 	ldw	r12,100(r5)
100054a4:	2ac0038b 	ldhu	r11,14(r5)
100054a8:	2a800717 	ldw	r10,28(r5)
100054ac:	2a400917 	ldw	r9,36(r5)
100054b0:	defee204 	addi	sp,sp,-1144
100054b4:	da001a04 	addi	r8,sp,104
100054b8:	00c10004 	movi	r3,1024
100054bc:	dc011a15 	stw	r16,1128(sp)
100054c0:	10bfff4c 	andi	r2,r2,65533
100054c4:	2821883a 	mov	r16,r5
100054c8:	d80b883a 	mov	r5,sp
100054cc:	dc811c15 	stw	r18,1136(sp)
100054d0:	dc411b15 	stw	r17,1132(sp)
100054d4:	dfc11d15 	stw	ra,1140(sp)
100054d8:	2025883a 	mov	r18,r4
100054dc:	d880030d 	sth	r2,12(sp)
100054e0:	db001915 	stw	r12,100(sp)
100054e4:	dac0038d 	sth	r11,14(sp)
100054e8:	da800715 	stw	r10,28(sp)
100054ec:	da400915 	stw	r9,36(sp)
100054f0:	da000015 	stw	r8,0(sp)
100054f4:	da000415 	stw	r8,16(sp)
100054f8:	d8c00215 	stw	r3,8(sp)
100054fc:	d8c00515 	stw	r3,20(sp)
10005500:	d8000615 	stw	zero,24(sp)
10005504:	00033240 	call	10003324 <___vfprintf_internal_r>
10005508:	1023883a 	mov	r17,r2
1000550c:	10000d0e 	bge	r2,zero,10005544 <__sbprintf+0xa8>
10005510:	d880030b 	ldhu	r2,12(sp)
10005514:	1080100c 	andi	r2,r2,64
10005518:	10000326 	beq	r2,zero,10005528 <__sbprintf+0x8c>
1000551c:	8080030b 	ldhu	r2,12(r16)
10005520:	10801014 	ori	r2,r2,64
10005524:	8080030d 	sth	r2,12(r16)
10005528:	8805883a 	mov	r2,r17
1000552c:	dfc11d17 	ldw	ra,1140(sp)
10005530:	dc811c17 	ldw	r18,1136(sp)
10005534:	dc411b17 	ldw	r17,1132(sp)
10005538:	dc011a17 	ldw	r16,1128(sp)
1000553c:	dec11e04 	addi	sp,sp,1144
10005540:	f800283a 	ret
10005544:	d80b883a 	mov	r5,sp
10005548:	9009883a 	mov	r4,r18
1000554c:	00071bc0 	call	100071bc <_fflush_r>
10005550:	103fef26 	beq	r2,zero,10005510 <__sbprintf+0x74>
10005554:	047fffc4 	movi	r17,-1
10005558:	003fed06 	br	10005510 <__sbprintf+0x74>

1000555c <__swsetup_r>:
1000555c:	00840074 	movhi	r2,4097
10005560:	1093e117 	ldw	r2,20356(r2)
10005564:	defffd04 	addi	sp,sp,-12
10005568:	dc400115 	stw	r17,4(sp)
1000556c:	dc000015 	stw	r16,0(sp)
10005570:	dfc00215 	stw	ra,8(sp)
10005574:	2023883a 	mov	r17,r4
10005578:	2821883a 	mov	r16,r5
1000557c:	10000226 	beq	r2,zero,10005588 <__swsetup_r+0x2c>
10005580:	10c00e17 	ldw	r3,56(r2)
10005584:	18002026 	beq	r3,zero,10005608 <__swsetup_r+0xac>
10005588:	8080030b 	ldhu	r2,12(r16)
1000558c:	10c0020c 	andi	r3,r2,8
10005590:	1009883a 	mov	r4,r2
10005594:	18002226 	beq	r3,zero,10005620 <__swsetup_r+0xc4>
10005598:	80c00417 	ldw	r3,16(r16)
1000559c:	18002826 	beq	r3,zero,10005640 <__swsetup_r+0xe4>
100055a0:	1100004c 	andi	r4,r2,1
100055a4:	20000b1e 	bne	r4,zero,100055d4 <__swsetup_r+0x78>
100055a8:	1080008c 	andi	r2,r2,2
100055ac:	10002d1e 	bne	r2,zero,10005664 <__swsetup_r+0x108>
100055b0:	80800517 	ldw	r2,20(r16)
100055b4:	80800215 	stw	r2,8(r16)
100055b8:	18000b26 	beq	r3,zero,100055e8 <__swsetup_r+0x8c>
100055bc:	0005883a 	mov	r2,zero
100055c0:	dfc00217 	ldw	ra,8(sp)
100055c4:	dc400117 	ldw	r17,4(sp)
100055c8:	dc000017 	ldw	r16,0(sp)
100055cc:	dec00304 	addi	sp,sp,12
100055d0:	f800283a 	ret
100055d4:	80800517 	ldw	r2,20(r16)
100055d8:	80000215 	stw	zero,8(r16)
100055dc:	0085c83a 	sub	r2,zero,r2
100055e0:	80800615 	stw	r2,24(r16)
100055e4:	183ff51e 	bne	r3,zero,100055bc <__swsetup_r+0x60>
100055e8:	80c0030b 	ldhu	r3,12(r16)
100055ec:	0005883a 	mov	r2,zero
100055f0:	1900200c 	andi	r4,r3,128
100055f4:	203ff226 	beq	r4,zero,100055c0 <__swsetup_r+0x64>
100055f8:	18c01014 	ori	r3,r3,64
100055fc:	80c0030d 	sth	r3,12(r16)
10005600:	00bfffc4 	movi	r2,-1
10005604:	003fee06 	br	100055c0 <__swsetup_r+0x64>
10005608:	1009883a 	mov	r4,r2
1000560c:	00075400 	call	10007540 <__sinit>
10005610:	8080030b 	ldhu	r2,12(r16)
10005614:	10c0020c 	andi	r3,r2,8
10005618:	1009883a 	mov	r4,r2
1000561c:	183fde1e 	bne	r3,zero,10005598 <__swsetup_r+0x3c>
10005620:	2080040c 	andi	r2,r4,16
10005624:	10001f26 	beq	r2,zero,100056a4 <__swsetup_r+0x148>
10005628:	2080010c 	andi	r2,r4,4
1000562c:	10000f1e 	bne	r2,zero,1000566c <__swsetup_r+0x110>
10005630:	80c00417 	ldw	r3,16(r16)
10005634:	20800214 	ori	r2,r4,8
10005638:	8080030d 	sth	r2,12(r16)
1000563c:	183fd81e 	bne	r3,zero,100055a0 <__swsetup_r+0x44>
10005640:	1100a00c 	andi	r4,r2,640
10005644:	21008020 	cmpeqi	r4,r4,512
10005648:	203fd51e 	bne	r4,zero,100055a0 <__swsetup_r+0x44>
1000564c:	800b883a 	mov	r5,r16
10005650:	8809883a 	mov	r4,r17
10005654:	00080740 	call	10008074 <__smakebuf_r>
10005658:	8080030b 	ldhu	r2,12(r16)
1000565c:	80c00417 	ldw	r3,16(r16)
10005660:	003fcf06 	br	100055a0 <__swsetup_r+0x44>
10005664:	0005883a 	mov	r2,zero
10005668:	003fd206 	br	100055b4 <__swsetup_r+0x58>
1000566c:	81400c17 	ldw	r5,48(r16)
10005670:	28000626 	beq	r5,zero,1000568c <__swsetup_r+0x130>
10005674:	80801004 	addi	r2,r16,64
10005678:	28800326 	beq	r5,r2,10005688 <__swsetup_r+0x12c>
1000567c:	8809883a 	mov	r4,r17
10005680:	00076a40 	call	100076a4 <_free_r>
10005684:	8100030b 	ldhu	r4,12(r16)
10005688:	80000c15 	stw	zero,48(r16)
1000568c:	80c00417 	ldw	r3,16(r16)
10005690:	00bff6c4 	movi	r2,-37
10005694:	1108703a 	and	r4,r2,r4
10005698:	80000115 	stw	zero,4(r16)
1000569c:	80c00015 	stw	r3,0(r16)
100056a0:	003fe406 	br	10005634 <__swsetup_r+0xd8>
100056a4:	00800244 	movi	r2,9
100056a8:	88800015 	stw	r2,0(r17)
100056ac:	20801014 	ori	r2,r4,64
100056b0:	8080030d 	sth	r2,12(r16)
100056b4:	00bfffc4 	movi	r2,-1
100056b8:	003fc106 	br	100055c0 <__swsetup_r+0x64>

100056bc <quorem>:
100056bc:	defff504 	addi	sp,sp,-44
100056c0:	dc800315 	stw	r18,12(sp)
100056c4:	20800417 	ldw	r2,16(r4)
100056c8:	2c800417 	ldw	r18,16(r5)
100056cc:	dfc00a15 	stw	ra,40(sp)
100056d0:	df000915 	stw	fp,36(sp)
100056d4:	ddc00815 	stw	r23,32(sp)
100056d8:	dd800715 	stw	r22,28(sp)
100056dc:	dd400615 	stw	r21,24(sp)
100056e0:	dd000515 	stw	r20,20(sp)
100056e4:	dcc00415 	stw	r19,16(sp)
100056e8:	dc400215 	stw	r17,8(sp)
100056ec:	dc000115 	stw	r16,4(sp)
100056f0:	14807416 	blt	r2,r18,100058c4 <quorem+0x208>
100056f4:	94bfffc4 	addi	r18,r18,-1
100056f8:	902e90ba 	slli	r23,r18,2
100056fc:	2c400504 	addi	r17,r5,20
10005700:	25400504 	addi	r21,r4,20
10005704:	8de9883a 	add	r20,r17,r23
10005708:	a7000017 	ldw	fp,0(r20)
1000570c:	adef883a 	add	r23,r21,r23
10005710:	b8c00017 	ldw	r3,0(r23)
10005714:	e7000044 	addi	fp,fp,1
10005718:	282d883a 	mov	r22,r5
1000571c:	2021883a 	mov	r16,r4
10005720:	e00b883a 	mov	r5,fp
10005724:	1809883a 	mov	r4,r3
10005728:	d8c00015 	stw	r3,0(sp)
1000572c:	000ceb40 	call	1000ceb4 <__udivsi3>
10005730:	d8c00017 	ldw	r3,0(sp)
10005734:	1027883a 	mov	r19,r2
10005738:	1f002c36 	bltu	r3,fp,100057ec <quorem+0x130>
1000573c:	8811883a 	mov	r8,r17
10005740:	a80b883a 	mov	r5,r21
10005744:	0013883a 	mov	r9,zero
10005748:	0007883a 	mov	r3,zero
1000574c:	42000104 	addi	r8,r8,4
10005750:	41ffff17 	ldw	r7,-4(r8)
10005754:	29800017 	ldw	r6,0(r5)
10005758:	29400104 	addi	r5,r5,4
1000575c:	38bfffcc 	andi	r2,r7,65535
10005760:	14c5383a 	mul	r2,r2,r19
10005764:	3808d43a 	srli	r4,r7,16
10005768:	32bfffcc 	andi	r10,r6,65535
1000576c:	1245883a 	add	r2,r2,r9
10005770:	1012d43a 	srli	r9,r2,16
10005774:	11ffffcc 	andi	r7,r2,65535
10005778:	24c9383a 	mul	r4,r4,r19
1000577c:	19c7c83a 	sub	r3,r3,r7
10005780:	1a8f883a 	add	r7,r3,r10
10005784:	3006d43a 	srli	r3,r6,16
10005788:	2249883a 	add	r4,r4,r9
1000578c:	3805d43a 	srai	r2,r7,16
10005790:	21bfffcc 	andi	r6,r4,65535
10005794:	1987c83a 	sub	r3,r3,r6
10005798:	1887883a 	add	r3,r3,r2
1000579c:	180c943a 	slli	r6,r3,16
100057a0:	39ffffcc 	andi	r7,r7,65535
100057a4:	2012d43a 	srli	r9,r4,16
100057a8:	31ceb03a 	or	r7,r6,r7
100057ac:	29ffff15 	stw	r7,-4(r5)
100057b0:	1807d43a 	srai	r3,r3,16
100057b4:	a23fe52e 	bgeu	r20,r8,1000574c <quorem+0x90>
100057b8:	b8800017 	ldw	r2,0(r23)
100057bc:	10000b1e 	bne	r2,zero,100057ec <quorem+0x130>
100057c0:	b8bfff04 	addi	r2,r23,-4
100057c4:	a880082e 	bgeu	r21,r2,100057e8 <quorem+0x12c>
100057c8:	b8ffff17 	ldw	r3,-4(r23)
100057cc:	18000326 	beq	r3,zero,100057dc <quorem+0x120>
100057d0:	00000506 	br	100057e8 <quorem+0x12c>
100057d4:	10c00017 	ldw	r3,0(r2)
100057d8:	1800031e 	bne	r3,zero,100057e8 <quorem+0x12c>
100057dc:	10bfff04 	addi	r2,r2,-4
100057e0:	94bfffc4 	addi	r18,r18,-1
100057e4:	a8bffb36 	bltu	r21,r2,100057d4 <quorem+0x118>
100057e8:	84800415 	stw	r18,16(r16)
100057ec:	b00b883a 	mov	r5,r22
100057f0:	8009883a 	mov	r4,r16
100057f4:	000952c0 	call	1000952c <__mcmp>
100057f8:	10002516 	blt	r2,zero,10005890 <quorem+0x1d4>
100057fc:	9cc00044 	addi	r19,r19,1
10005800:	a80d883a 	mov	r6,r21
10005804:	0007883a 	mov	r3,zero
10005808:	8c400104 	addi	r17,r17,4
1000580c:	893fff17 	ldw	r4,-4(r17)
10005810:	31400017 	ldw	r5,0(r6)
10005814:	31800104 	addi	r6,r6,4
10005818:	20bfffcc 	andi	r2,r4,65535
1000581c:	1887c83a 	sub	r3,r3,r2
10005820:	28bfffcc 	andi	r2,r5,65535
10005824:	1885883a 	add	r2,r3,r2
10005828:	2008d43a 	srli	r4,r4,16
1000582c:	2806d43a 	srli	r3,r5,16
10005830:	100fd43a 	srai	r7,r2,16
10005834:	117fffcc 	andi	r5,r2,65535
10005838:	1907c83a 	sub	r3,r3,r4
1000583c:	19c7883a 	add	r3,r3,r7
10005840:	1804943a 	slli	r2,r3,16
10005844:	1807d43a 	srai	r3,r3,16
10005848:	1144b03a 	or	r2,r2,r5
1000584c:	30bfff15 	stw	r2,-4(r6)
10005850:	a47fed2e 	bgeu	r20,r17,10005808 <quorem+0x14c>
10005854:	900690ba 	slli	r3,r18,2
10005858:	a8c7883a 	add	r3,r21,r3
1000585c:	18800017 	ldw	r2,0(r3)
10005860:	10000b1e 	bne	r2,zero,10005890 <quorem+0x1d4>
10005864:	18bfff04 	addi	r2,r3,-4
10005868:	a880082e 	bgeu	r21,r2,1000588c <quorem+0x1d0>
1000586c:	18ffff17 	ldw	r3,-4(r3)
10005870:	18000326 	beq	r3,zero,10005880 <quorem+0x1c4>
10005874:	00000506 	br	1000588c <quorem+0x1d0>
10005878:	10c00017 	ldw	r3,0(r2)
1000587c:	1800031e 	bne	r3,zero,1000588c <quorem+0x1d0>
10005880:	10bfff04 	addi	r2,r2,-4
10005884:	94bfffc4 	addi	r18,r18,-1
10005888:	a8bffb36 	bltu	r21,r2,10005878 <quorem+0x1bc>
1000588c:	84800415 	stw	r18,16(r16)
10005890:	9805883a 	mov	r2,r19
10005894:	dfc00a17 	ldw	ra,40(sp)
10005898:	df000917 	ldw	fp,36(sp)
1000589c:	ddc00817 	ldw	r23,32(sp)
100058a0:	dd800717 	ldw	r22,28(sp)
100058a4:	dd400617 	ldw	r21,24(sp)
100058a8:	dd000517 	ldw	r20,20(sp)
100058ac:	dcc00417 	ldw	r19,16(sp)
100058b0:	dc800317 	ldw	r18,12(sp)
100058b4:	dc400217 	ldw	r17,8(sp)
100058b8:	dc000117 	ldw	r16,4(sp)
100058bc:	dec00b04 	addi	sp,sp,44
100058c0:	f800283a 	ret
100058c4:	0005883a 	mov	r2,zero
100058c8:	003ff206 	br	10005894 <quorem+0x1d8>

100058cc <_dtoa_r>:
100058cc:	20801017 	ldw	r2,64(r4)
100058d0:	deffe204 	addi	sp,sp,-120
100058d4:	df001c15 	stw	fp,112(sp)
100058d8:	dcc01715 	stw	r19,92(sp)
100058dc:	dc401515 	stw	r17,84(sp)
100058e0:	dc001415 	stw	r16,80(sp)
100058e4:	dfc01d15 	stw	ra,116(sp)
100058e8:	ddc01b15 	stw	r23,108(sp)
100058ec:	dd801a15 	stw	r22,104(sp)
100058f0:	dd401915 	stw	r21,100(sp)
100058f4:	dd001815 	stw	r20,96(sp)
100058f8:	dc801615 	stw	r18,88(sp)
100058fc:	d9400115 	stw	r5,4(sp)
10005900:	d9c00215 	stw	r7,8(sp)
10005904:	2039883a 	mov	fp,r4
10005908:	3027883a 	mov	r19,r6
1000590c:	dc002017 	ldw	r16,128(sp)
10005910:	3023883a 	mov	r17,r6
10005914:	10000826 	beq	r2,zero,10005938 <_dtoa_r+0x6c>
10005918:	21801117 	ldw	r6,68(r4)
1000591c:	00c00044 	movi	r3,1
10005920:	100b883a 	mov	r5,r2
10005924:	1986983a 	sll	r3,r3,r6
10005928:	11800115 	stw	r6,4(r2)
1000592c:	10c00215 	stw	r3,8(r2)
10005930:	0008d4c0 	call	10008d4c <_Bfree>
10005934:	e0001015 	stw	zero,64(fp)
10005938:	98018116 	blt	r19,zero,10005f40 <_dtoa_r+0x674>
1000593c:	80000015 	stw	zero,0(r16)
10005940:	989ffc2c 	andhi	r2,r19,32752
10005944:	00dffc34 	movhi	r3,32752
10005948:	10c18626 	beq	r2,r3,10005f64 <_dtoa_r+0x698>
1000594c:	d9000117 	ldw	r4,4(sp)
10005950:	000d883a 	mov	r6,zero
10005954:	000f883a 	mov	r7,zero
10005958:	880b883a 	mov	r5,r17
1000595c:	000e1bc0 	call	1000e1bc <__eqdf2>
10005960:	1000191e 	bne	r2,zero,100059c8 <_dtoa_r+0xfc>
10005964:	d8c01f17 	ldw	r3,124(sp)
10005968:	00800044 	movi	r2,1
1000596c:	18800015 	stw	r2,0(r3)
10005970:	d8802117 	ldw	r2,132(sp)
10005974:	10032426 	beq	r2,zero,10006608 <_dtoa_r+0xd3c>
10005978:	d9002117 	ldw	r4,132(sp)
1000597c:	00840074 	movhi	r2,4097
10005980:	108a1744 	addi	r2,r2,10333
10005984:	00c40074 	movhi	r3,4097
10005988:	20800015 	stw	r2,0(r4)
1000598c:	188a1704 	addi	r2,r3,10332
10005990:	d8800315 	stw	r2,12(sp)
10005994:	d8800317 	ldw	r2,12(sp)
10005998:	dfc01d17 	ldw	ra,116(sp)
1000599c:	df001c17 	ldw	fp,112(sp)
100059a0:	ddc01b17 	ldw	r23,108(sp)
100059a4:	dd801a17 	ldw	r22,104(sp)
100059a8:	dd401917 	ldw	r21,100(sp)
100059ac:	dd001817 	ldw	r20,96(sp)
100059b0:	dcc01717 	ldw	r19,92(sp)
100059b4:	dc801617 	ldw	r18,88(sp)
100059b8:	dc401517 	ldw	r17,84(sp)
100059bc:	dc001417 	ldw	r16,80(sp)
100059c0:	dec01e04 	addi	sp,sp,120
100059c4:	f800283a 	ret
100059c8:	dc800117 	ldw	r18,4(sp)
100059cc:	d8801204 	addi	r2,sp,72
100059d0:	9820d53a 	srli	r16,r19,20
100059d4:	d8800015 	stw	r2,0(sp)
100059d8:	d9c01304 	addi	r7,sp,76
100059dc:	900b883a 	mov	r5,r18
100059e0:	880d883a 	mov	r6,r17
100059e4:	e009883a 	mov	r4,fp
100059e8:	00098a00 	call	100098a0 <__d2b>
100059ec:	102b883a 	mov	r21,r2
100059f0:	8001701e 	bne	r16,zero,10005fb4 <_dtoa_r+0x6e8>
100059f4:	dc801217 	ldw	r18,72(sp)
100059f8:	dc001317 	ldw	r16,76(sp)
100059fc:	9421883a 	add	r16,r18,r16
10005a00:	80810c84 	addi	r2,r16,1074
10005a04:	10c00850 	cmplti	r3,r2,33
10005a08:	18030f1e 	bne	r3,zero,10006648 <_dtoa_r+0xd7c>
10005a0c:	01001004 	movi	r4,64
10005a10:	2085c83a 	sub	r2,r4,r2
10005a14:	98a6983a 	sll	r19,r19,r2
10005a18:	d8800117 	ldw	r2,4(sp)
10005a1c:	81010484 	addi	r4,r16,1042
10005a20:	1108d83a 	srl	r4,r2,r4
10005a24:	9908b03a 	or	r4,r19,r4
10005a28:	000f5b00 	call	1000f5b0 <__floatunsidf>
10005a2c:	1009883a 	mov	r4,r2
10005a30:	017f8434 	movhi	r5,65040
10005a34:	00800044 	movi	r2,1
10005a38:	194b883a 	add	r5,r3,r5
10005a3c:	843fffc4 	addi	r16,r16,-1
10005a40:	d8800a15 	stw	r2,40(sp)
10005a44:	000d883a 	mov	r6,zero
10005a48:	01cffe34 	movhi	r7,16376
10005a4c:	000eaa80 	call	1000eaa8 <__subdf3>
10005a50:	0198dbf4 	movhi	r6,25455
10005a54:	01cff4f4 	movhi	r7,16339
10005a58:	3190d844 	addi	r6,r6,17249
10005a5c:	39e1e9c4 	addi	r7,r7,-30809
10005a60:	1009883a 	mov	r4,r2
10005a64:	180b883a 	mov	r5,r3
10005a68:	000e41c0 	call	1000e41c <__muldf3>
10005a6c:	01a2d874 	movhi	r6,35681
10005a70:	01cff1f4 	movhi	r7,16327
10005a74:	31b22cc4 	addi	r6,r6,-14157
10005a78:	39e28a04 	addi	r7,r7,-30168
10005a7c:	180b883a 	mov	r5,r3
10005a80:	1009883a 	mov	r4,r2
10005a84:	000cf740 	call	1000cf74 <__adddf3>
10005a88:	8009883a 	mov	r4,r16
10005a8c:	1029883a 	mov	r20,r2
10005a90:	1827883a 	mov	r19,r3
10005a94:	000f4e80 	call	1000f4e8 <__floatsidf>
10005a98:	019427f4 	movhi	r6,20639
10005a9c:	01cff4f4 	movhi	r7,16339
10005aa0:	319e7ec4 	addi	r6,r6,31227
10005aa4:	39d104c4 	addi	r7,r7,17427
10005aa8:	1009883a 	mov	r4,r2
10005aac:	180b883a 	mov	r5,r3
10005ab0:	000e41c0 	call	1000e41c <__muldf3>
10005ab4:	100d883a 	mov	r6,r2
10005ab8:	180f883a 	mov	r7,r3
10005abc:	a009883a 	mov	r4,r20
10005ac0:	980b883a 	mov	r5,r19
10005ac4:	000cf740 	call	1000cf74 <__adddf3>
10005ac8:	1009883a 	mov	r4,r2
10005acc:	180b883a 	mov	r5,r3
10005ad0:	1029883a 	mov	r20,r2
10005ad4:	1827883a 	mov	r19,r3
10005ad8:	000f4680 	call	1000f468 <__fixdfsi>
10005adc:	000d883a 	mov	r6,zero
10005ae0:	000f883a 	mov	r7,zero
10005ae4:	a009883a 	mov	r4,r20
10005ae8:	980b883a 	mov	r5,r19
10005aec:	102d883a 	mov	r22,r2
10005af0:	000e32c0 	call	1000e32c <__ledf2>
10005af4:	1002ba16 	blt	r2,zero,100065e0 <_dtoa_r+0xd14>
10005af8:	9421c83a 	sub	r16,r18,r16
10005afc:	b08005e8 	cmpgeui	r2,r22,23
10005b00:	853fffc4 	addi	r20,r16,-1
10005b04:	1002ae1e 	bne	r2,zero,100065c0 <_dtoa_r+0xcf4>
10005b08:	b00690fa 	slli	r3,r22,3
10005b0c:	00840074 	movhi	r2,4097
10005b10:	108a3b04 	addi	r2,r2,10476
10005b14:	10c5883a 	add	r2,r2,r3
10005b18:	11800017 	ldw	r6,0(r2)
10005b1c:	11c00117 	ldw	r7,4(r2)
10005b20:	d9000117 	ldw	r4,4(sp)
10005b24:	880b883a 	mov	r5,r17
10005b28:	000e32c0 	call	1000e32c <__ledf2>
10005b2c:	10026f0e 	bge	r2,zero,100064ec <_dtoa_r+0xc20>
10005b30:	d8000915 	stw	zero,36(sp)
10005b34:	b5bfffc4 	addi	r22,r22,-1
10005b38:	a002a416 	blt	r20,zero,100065cc <_dtoa_r+0xd00>
10005b3c:	d8000515 	stw	zero,20(sp)
10005b40:	b0026d0e 	bge	r22,zero,100064f8 <_dtoa_r+0xc2c>
10005b44:	d8800517 	ldw	r2,20(sp)
10005b48:	d8c00217 	ldw	r3,8(sp)
10005b4c:	dd800415 	stw	r22,16(sp)
10005b50:	1585c83a 	sub	r2,r2,r22
10005b54:	d8800515 	stw	r2,20(sp)
10005b58:	0585c83a 	sub	r2,zero,r22
10005b5c:	d8800815 	stw	r2,32(sp)
10005b60:	188002a8 	cmpgeui	r2,r3,10
10005b64:	002d883a 	mov	r22,zero
10005b68:	1002691e 	bne	r2,zero,10006510 <_dtoa_r+0xc44>
10005b6c:	18800190 	cmplti	r2,r3,6
10005b70:	1002ba1e 	bne	r2,zero,1000665c <_dtoa_r+0xd90>
10005b74:	18bfff04 	addi	r2,r3,-4
10005b78:	d8800215 	stw	r2,8(sp)
10005b7c:	0021883a 	mov	r16,zero
10005b80:	d8c00217 	ldw	r3,8(sp)
10005b84:	188000e0 	cmpeqi	r2,r3,3
10005b88:	10039d1e 	bne	r2,zero,10006a00 <_dtoa_r+0x1134>
10005b8c:	18800108 	cmpgei	r2,r3,4
10005b90:	10027a26 	beq	r2,zero,1000657c <_dtoa_r+0xcb0>
10005b94:	d8c00217 	ldw	r3,8(sp)
10005b98:	18800120 	cmpeqi	r2,r3,4
10005b9c:	10026926 	beq	r2,zero,10006544 <_dtoa_r+0xc78>
10005ba0:	00800044 	movi	r2,1
10005ba4:	d8800715 	stw	r2,28(sp)
10005ba8:	d8801e17 	ldw	r2,120(sp)
10005bac:	0083670e 	bge	zero,r2,1000694c <_dtoa_r+0x1080>
10005bb0:	d8800b15 	stw	r2,44(sp)
10005bb4:	d8800615 	stw	r2,24(sp)
10005bb8:	100d883a 	mov	r6,r2
10005bbc:	e0001115 	stw	zero,68(fp)
10005bc0:	30800610 	cmplti	r2,r6,24
10005bc4:	dc800617 	ldw	r18,24(sp)
10005bc8:	1004eb1e 	bne	r2,zero,10006f78 <_dtoa_r+0x16ac>
10005bcc:	00c00044 	movi	r3,1
10005bd0:	00800104 	movi	r2,4
10005bd4:	1085883a 	add	r2,r2,r2
10005bd8:	11000504 	addi	r4,r2,20
10005bdc:	180b883a 	mov	r5,r3
10005be0:	18c00044 	addi	r3,r3,1
10005be4:	313ffb2e 	bgeu	r6,r4,10005bd4 <_dtoa_r+0x308>
10005be8:	e1401115 	stw	r5,68(fp)
10005bec:	e009883a 	mov	r4,fp
10005bf0:	0008ca80 	call	10008ca8 <_Balloc>
10005bf4:	d8800315 	stw	r2,12(sp)
10005bf8:	e0801015 	stw	r2,64(fp)
10005bfc:	948003e8 	cmpgeui	r18,r18,15
10005c00:	9000fe1e 	bne	r18,zero,10005ffc <_dtoa_r+0x730>
10005c04:	8000fd26 	beq	r16,zero,10005ffc <_dtoa_r+0x730>
10005c08:	d9000417 	ldw	r4,16(sp)
10005c0c:	0103c60e 	bge	zero,r4,10006b28 <_dtoa_r+0x125c>
10005c10:	208003cc 	andi	r2,r4,15
10005c14:	100690fa 	slli	r3,r2,3
10005c18:	202fd13a 	srai	r23,r4,4
10005c1c:	00840074 	movhi	r2,4097
10005c20:	108a3b04 	addi	r2,r2,10476
10005c24:	10c5883a 	add	r2,r2,r3
10005c28:	b8c0040c 	andi	r3,r23,16
10005c2c:	12800017 	ldw	r10,0(r2)
10005c30:	12400117 	ldw	r9,4(r2)
10005c34:	1803621e 	bne	r3,zero,100069c0 <_dtoa_r+0x10f4>
10005c38:	d8800117 	ldw	r2,4(sp)
10005c3c:	8827883a 	mov	r19,r17
10005c40:	04000084 	movi	r16,2
10005c44:	d8800c15 	stw	r2,48(sp)
10005c48:	04840074 	movhi	r18,4097
10005c4c:	948a3104 	addi	r18,r18,10436
10005c50:	b8000f26 	beq	r23,zero,10005c90 <_dtoa_r+0x3c4>
10005c54:	5005883a 	mov	r2,r10
10005c58:	4807883a 	mov	r3,r9
10005c5c:	b980004c 	andi	r6,r23,1
10005c60:	1009883a 	mov	r4,r2
10005c64:	b82fd07a 	srai	r23,r23,1
10005c68:	180b883a 	mov	r5,r3
10005c6c:	30000426 	beq	r6,zero,10005c80 <_dtoa_r+0x3b4>
10005c70:	91800017 	ldw	r6,0(r18)
10005c74:	91c00117 	ldw	r7,4(r18)
10005c78:	84000044 	addi	r16,r16,1
10005c7c:	000e41c0 	call	1000e41c <__muldf3>
10005c80:	94800204 	addi	r18,r18,8
10005c84:	b83ff51e 	bne	r23,zero,10005c5c <_dtoa_r+0x390>
10005c88:	1015883a 	mov	r10,r2
10005c8c:	1813883a 	mov	r9,r3
10005c90:	d9000c17 	ldw	r4,48(sp)
10005c94:	980b883a 	mov	r5,r19
10005c98:	500d883a 	mov	r6,r10
10005c9c:	480f883a 	mov	r7,r9
10005ca0:	000d9140 	call	1000d914 <__divdf3>
10005ca4:	1025883a 	mov	r18,r2
10005ca8:	1827883a 	mov	r19,r3
10005cac:	d8800917 	ldw	r2,36(sp)
10005cb0:	10000626 	beq	r2,zero,10005ccc <_dtoa_r+0x400>
10005cb4:	000d883a 	mov	r6,zero
10005cb8:	01cffc34 	movhi	r7,16368
10005cbc:	9009883a 	mov	r4,r18
10005cc0:	980b883a 	mov	r5,r19
10005cc4:	000e32c0 	call	1000e32c <__ledf2>
10005cc8:	10042616 	blt	r2,zero,10006d64 <_dtoa_r+0x1498>
10005ccc:	8009883a 	mov	r4,r16
10005cd0:	000f4e80 	call	1000f4e8 <__floatsidf>
10005cd4:	900d883a 	mov	r6,r18
10005cd8:	980f883a 	mov	r7,r19
10005cdc:	1009883a 	mov	r4,r2
10005ce0:	180b883a 	mov	r5,r3
10005ce4:	000e41c0 	call	1000e41c <__muldf3>
10005ce8:	000d883a 	mov	r6,zero
10005cec:	01d00734 	movhi	r7,16412
10005cf0:	1009883a 	mov	r4,r2
10005cf4:	180b883a 	mov	r5,r3
10005cf8:	000cf740 	call	1000cf74 <__adddf3>
10005cfc:	d8800c15 	stw	r2,48(sp)
10005d00:	00bf3034 	movhi	r2,64704
10005d04:	1885883a 	add	r2,r3,r2
10005d08:	d8800d15 	stw	r2,52(sp)
10005d0c:	d8800617 	ldw	r2,24(sp)
10005d10:	10036d26 	beq	r2,zero,10006ac8 <_dtoa_r+0x11fc>
10005d14:	d8800417 	ldw	r2,16(sp)
10005d18:	d8800f15 	stw	r2,60(sp)
10005d1c:	d8800617 	ldw	r2,24(sp)
10005d20:	d8800e15 	stw	r2,56(sp)
10005d24:	980b883a 	mov	r5,r19
10005d28:	9009883a 	mov	r4,r18
10005d2c:	000f4680 	call	1000f468 <__fixdfsi>
10005d30:	1009883a 	mov	r4,r2
10005d34:	102f883a 	mov	r23,r2
10005d38:	000f4e80 	call	1000f4e8 <__floatsidf>
10005d3c:	100d883a 	mov	r6,r2
10005d40:	180f883a 	mov	r7,r3
10005d44:	9009883a 	mov	r4,r18
10005d48:	980b883a 	mov	r5,r19
10005d4c:	000eaa80 	call	1000eaa8 <__subdf3>
10005d50:	1025883a 	mov	r18,r2
10005d54:	d8800e17 	ldw	r2,56(sp)
10005d58:	1821883a 	mov	r16,r3
10005d5c:	ba400c04 	addi	r9,r23,48
10005d60:	10bfffc4 	addi	r2,r2,-1
10005d64:	100690fa 	slli	r3,r2,3
10005d68:	00840074 	movhi	r2,4097
10005d6c:	108a3b04 	addi	r2,r2,10476
10005d70:	10c5883a 	add	r2,r2,r3
10005d74:	11800017 	ldw	r6,0(r2)
10005d78:	d8c00317 	ldw	r3,12(sp)
10005d7c:	11c00117 	ldw	r7,4(r2)
10005d80:	d8800717 	ldw	r2,28(sp)
10005d84:	4811883a 	mov	r8,r9
10005d88:	da001015 	stw	r8,64(sp)
10005d8c:	1dc00044 	addi	r23,r3,1
10005d90:	1003a226 	beq	r2,zero,10006c1c <_dtoa_r+0x1350>
10005d94:	0009883a 	mov	r4,zero
10005d98:	014ff834 	movhi	r5,16352
10005d9c:	da401115 	stw	r9,68(sp)
10005da0:	000d9140 	call	1000d914 <__divdf3>
10005da4:	d9800c17 	ldw	r6,48(sp)
10005da8:	d9c00d17 	ldw	r7,52(sp)
10005dac:	1009883a 	mov	r4,r2
10005db0:	180b883a 	mov	r5,r3
10005db4:	000eaa80 	call	1000eaa8 <__subdf3>
10005db8:	1827883a 	mov	r19,r3
10005dbc:	da401117 	ldw	r9,68(sp)
10005dc0:	d8c00317 	ldw	r3,12(sp)
10005dc4:	900d883a 	mov	r6,r18
10005dc8:	800f883a 	mov	r7,r16
10005dcc:	1a400005 	stb	r9,0(r3)
10005dd0:	1009883a 	mov	r4,r2
10005dd4:	980b883a 	mov	r5,r19
10005dd8:	d8800c15 	stw	r2,48(sp)
10005ddc:	000e23c0 	call	1000e23c <__gedf2>
10005de0:	da001017 	ldw	r8,64(sp)
10005de4:	00804816 	blt	zero,r2,10005f08 <_dtoa_r+0x63c>
10005de8:	900d883a 	mov	r6,r18
10005dec:	800f883a 	mov	r7,r16
10005df0:	0009883a 	mov	r4,zero
10005df4:	014ffc34 	movhi	r5,16368
10005df8:	da000d15 	stw	r8,52(sp)
10005dfc:	000eaa80 	call	1000eaa8 <__subdf3>
10005e00:	d9000c17 	ldw	r4,48(sp)
10005e04:	100d883a 	mov	r6,r2
10005e08:	180f883a 	mov	r7,r3
10005e0c:	980b883a 	mov	r5,r19
10005e10:	000e23c0 	call	1000e23c <__gedf2>
10005e14:	da000d17 	ldw	r8,52(sp)
10005e18:	00844e16 	blt	zero,r2,10006f54 <_dtoa_r+0x1688>
10005e1c:	d8c00e17 	ldw	r3,56(sp)
10005e20:	18800060 	cmpeqi	r2,r3,1
10005e24:	1000751e 	bne	r2,zero,10005ffc <_dtoa_r+0x730>
10005e28:	d8800317 	ldw	r2,12(sp)
10005e2c:	dd800d15 	stw	r22,52(sp)
10005e30:	dd000e15 	stw	r20,56(sp)
10005e34:	10c5883a 	add	r2,r2,r3
10005e38:	dd000c17 	ldw	r20,48(sp)
10005e3c:	102d883a 	mov	r22,r2
10005e40:	dc400c15 	stw	r17,48(sp)
10005e44:	00000806 	br	10005e68 <_dtoa_r+0x59c>
10005e48:	000eaa80 	call	1000eaa8 <__subdf3>
10005e4c:	a00d883a 	mov	r6,r20
10005e50:	980f883a 	mov	r7,r19
10005e54:	1009883a 	mov	r4,r2
10005e58:	180b883a 	mov	r5,r3
10005e5c:	000e32c0 	call	1000e32c <__ledf2>
10005e60:	10042316 	blt	r2,zero,10006ef0 <_dtoa_r+0x1624>
10005e64:	bd806226 	beq	r23,r22,10005ff0 <_dtoa_r+0x724>
10005e68:	a009883a 	mov	r4,r20
10005e6c:	980b883a 	mov	r5,r19
10005e70:	000d883a 	mov	r6,zero
10005e74:	01d00934 	movhi	r7,16420
10005e78:	000e41c0 	call	1000e41c <__muldf3>
10005e7c:	000d883a 	mov	r6,zero
10005e80:	01d00934 	movhi	r7,16420
10005e84:	9009883a 	mov	r4,r18
10005e88:	800b883a 	mov	r5,r16
10005e8c:	1029883a 	mov	r20,r2
10005e90:	1827883a 	mov	r19,r3
10005e94:	000e41c0 	call	1000e41c <__muldf3>
10005e98:	180b883a 	mov	r5,r3
10005e9c:	1009883a 	mov	r4,r2
10005ea0:	1821883a 	mov	r16,r3
10005ea4:	1025883a 	mov	r18,r2
10005ea8:	000f4680 	call	1000f468 <__fixdfsi>
10005eac:	1009883a 	mov	r4,r2
10005eb0:	1023883a 	mov	r17,r2
10005eb4:	000f4e80 	call	1000f4e8 <__floatsidf>
10005eb8:	9009883a 	mov	r4,r18
10005ebc:	800b883a 	mov	r5,r16
10005ec0:	100d883a 	mov	r6,r2
10005ec4:	180f883a 	mov	r7,r3
10005ec8:	000eaa80 	call	1000eaa8 <__subdf3>
10005ecc:	bdc00044 	addi	r23,r23,1
10005ed0:	8c400c04 	addi	r17,r17,48
10005ed4:	a00d883a 	mov	r6,r20
10005ed8:	980f883a 	mov	r7,r19
10005edc:	1009883a 	mov	r4,r2
10005ee0:	180b883a 	mov	r5,r3
10005ee4:	bc7fffc5 	stb	r17,-1(r23)
10005ee8:	1025883a 	mov	r18,r2
10005eec:	1821883a 	mov	r16,r3
10005ef0:	000e32c0 	call	1000e32c <__ledf2>
10005ef4:	900d883a 	mov	r6,r18
10005ef8:	800f883a 	mov	r7,r16
10005efc:	0009883a 	mov	r4,zero
10005f00:	014ffc34 	movhi	r5,16368
10005f04:	103fd00e 	bge	r2,zero,10005e48 <_dtoa_r+0x57c>
10005f08:	d8800f17 	ldw	r2,60(sp)
10005f0c:	10800044 	addi	r2,r2,1
10005f10:	d8800415 	stw	r2,16(sp)
10005f14:	a80b883a 	mov	r5,r21
10005f18:	e009883a 	mov	r4,fp
10005f1c:	0008d4c0 	call	10008d4c <_Bfree>
10005f20:	d8801f17 	ldw	r2,124(sp)
10005f24:	d8c00417 	ldw	r3,16(sp)
10005f28:	b8000005 	stb	zero,0(r23)
10005f2c:	10c00015 	stw	r3,0(r2)
10005f30:	d8802117 	ldw	r2,132(sp)
10005f34:	103e9726 	beq	r2,zero,10005994 <_dtoa_r+0xc8>
10005f38:	15c00015 	stw	r23,0(r2)
10005f3c:	003e9506 	br	10005994 <_dtoa_r+0xc8>
10005f40:	04600034 	movhi	r17,32768
10005f44:	8c7fffc4 	addi	r17,r17,-1
10005f48:	9c62703a 	and	r17,r19,r17
10005f4c:	00800044 	movi	r2,1
10005f50:	8827883a 	mov	r19,r17
10005f54:	80800015 	stw	r2,0(r16)
10005f58:	00dffc34 	movhi	r3,32752
10005f5c:	989ffc2c 	andhi	r2,r19,32752
10005f60:	10fe7a1e 	bne	r2,r3,1000594c <_dtoa_r+0x80>
10005f64:	00800434 	movhi	r2,16
10005f68:	d8c01f17 	ldw	r3,124(sp)
10005f6c:	10bfffc4 	addi	r2,r2,-1
10005f70:	98a6703a 	and	r19,r19,r2
10005f74:	0089c3c4 	movi	r2,9999
10005f78:	18800015 	stw	r2,0(r3)
10005f7c:	d8800117 	ldw	r2,4(sp)
10005f80:	98aab03a 	or	r21,r19,r2
10005f84:	a800141e 	bne	r21,zero,10005fd8 <_dtoa_r+0x70c>
10005f88:	d8802117 	ldw	r2,132(sp)
10005f8c:	1003f626 	beq	r2,zero,10006f68 <_dtoa_r+0x169c>
10005f90:	00840074 	movhi	r2,4097
10005f94:	1007883a 	mov	r3,r2
10005f98:	18ca2104 	addi	r3,r3,10372
10005f9c:	00840074 	movhi	r2,4097
10005fa0:	d8c00315 	stw	r3,12(sp)
10005fa4:	108a2304 	addi	r2,r2,10380
10005fa8:	d8c02117 	ldw	r3,132(sp)
10005fac:	18800015 	stw	r2,0(r3)
10005fb0:	003e7806 	br	10005994 <_dtoa_r+0xc8>
10005fb4:	01400434 	movhi	r5,16
10005fb8:	297fffc4 	addi	r5,r5,-1
10005fbc:	894a703a 	and	r5,r17,r5
10005fc0:	9009883a 	mov	r4,r18
10005fc4:	294ffc34 	orhi	r5,r5,16368
10005fc8:	843f0044 	addi	r16,r16,-1023
10005fcc:	dc801217 	ldw	r18,72(sp)
10005fd0:	d8000a15 	stw	zero,40(sp)
10005fd4:	003e9b06 	br	10005a44 <_dtoa_r+0x178>
10005fd8:	d8802117 	ldw	r2,132(sp)
10005fdc:	1002461e 	bne	r2,zero,100068f8 <_dtoa_r+0x102c>
10005fe0:	00840074 	movhi	r2,4097
10005fe4:	108a2004 	addi	r2,r2,10368
10005fe8:	d8800315 	stw	r2,12(sp)
10005fec:	003e6906 	br	10005994 <_dtoa_r+0xc8>
10005ff0:	dd800d17 	ldw	r22,52(sp)
10005ff4:	dd000e17 	ldw	r20,56(sp)
10005ff8:	dc400c17 	ldw	r17,48(sp)
10005ffc:	d8801317 	ldw	r2,76(sp)
10006000:	10009f16 	blt	r2,zero,10006280 <_dtoa_r+0x9b4>
10006004:	d9000417 	ldw	r4,16(sp)
10006008:	20c003c8 	cmpgei	r3,r4,15
1000600c:	18009c1e 	bne	r3,zero,10006280 <_dtoa_r+0x9b4>
10006010:	200690fa 	slli	r3,r4,3
10006014:	00840074 	movhi	r2,4097
10006018:	108a3b04 	addi	r2,r2,10476
1000601c:	10c5883a 	add	r2,r2,r3
10006020:	14000017 	ldw	r16,0(r2)
10006024:	14800117 	ldw	r18,4(r2)
10006028:	d8801e17 	ldw	r2,120(sp)
1000602c:	1000140e 	bge	r2,zero,10006080 <_dtoa_r+0x7b4>
10006030:	d8800617 	ldw	r2,24(sp)
10006034:	00801216 	blt	zero,r2,10006080 <_dtoa_r+0x7b4>
10006038:	1002b81e 	bne	r2,zero,10006b1c <_dtoa_r+0x1250>
1000603c:	8009883a 	mov	r4,r16
10006040:	900b883a 	mov	r5,r18
10006044:	000d883a 	mov	r6,zero
10006048:	01d00534 	movhi	r7,16404
1000604c:	000e41c0 	call	1000e41c <__muldf3>
10006050:	d9800117 	ldw	r6,4(sp)
10006054:	880f883a 	mov	r7,r17
10006058:	1009883a 	mov	r4,r2
1000605c:	180b883a 	mov	r5,r3
10006060:	000e23c0 	call	1000e23c <__gedf2>
10006064:	0025883a 	mov	r18,zero
10006068:	0021883a 	mov	r16,zero
1000606c:	1001fd16 	blt	r2,zero,10006864 <_dtoa_r+0xf98>
10006070:	d8801e17 	ldw	r2,120(sp)
10006074:	ddc00317 	ldw	r23,12(sp)
10006078:	00a2303a 	nor	r17,zero,r2
1000607c:	0001ff06 	br	1000687c <_dtoa_r+0xfb0>
10006080:	dcc00117 	ldw	r19,4(sp)
10006084:	800d883a 	mov	r6,r16
10006088:	900f883a 	mov	r7,r18
1000608c:	880b883a 	mov	r5,r17
10006090:	9809883a 	mov	r4,r19
10006094:	000d9140 	call	1000d914 <__divdf3>
10006098:	180b883a 	mov	r5,r3
1000609c:	1009883a 	mov	r4,r2
100060a0:	000f4680 	call	1000f468 <__fixdfsi>
100060a4:	1009883a 	mov	r4,r2
100060a8:	102d883a 	mov	r22,r2
100060ac:	000f4e80 	call	1000f4e8 <__floatsidf>
100060b0:	800d883a 	mov	r6,r16
100060b4:	900f883a 	mov	r7,r18
100060b8:	1009883a 	mov	r4,r2
100060bc:	180b883a 	mov	r5,r3
100060c0:	000e41c0 	call	1000e41c <__muldf3>
100060c4:	880b883a 	mov	r5,r17
100060c8:	100d883a 	mov	r6,r2
100060cc:	180f883a 	mov	r7,r3
100060d0:	9809883a 	mov	r4,r19
100060d4:	000eaa80 	call	1000eaa8 <__subdf3>
100060d8:	dc400317 	ldw	r17,12(sp)
100060dc:	1009883a 	mov	r4,r2
100060e0:	d9c00417 	ldw	r7,16(sp)
100060e4:	b0800c04 	addi	r2,r22,48
100060e8:	88800005 	stb	r2,0(r17)
100060ec:	d8800617 	ldw	r2,24(sp)
100060f0:	39c00044 	addi	r7,r7,1
100060f4:	d9c00415 	stw	r7,16(sp)
100060f8:	11800060 	cmpeqi	r6,r2,1
100060fc:	180b883a 	mov	r5,r3
10006100:	2005883a 	mov	r2,r4
10006104:	8dc00044 	addi	r23,r17,1
10006108:	3000391e 	bne	r6,zero,100061f0 <_dtoa_r+0x924>
1000610c:	01d00934 	movhi	r7,16420
10006110:	000e41c0 	call	1000e41c <__muldf3>
10006114:	000d883a 	mov	r6,zero
10006118:	000f883a 	mov	r7,zero
1000611c:	1009883a 	mov	r4,r2
10006120:	180b883a 	mov	r5,r3
10006124:	1027883a 	mov	r19,r2
10006128:	1829883a 	mov	r20,r3
1000612c:	000e1bc0 	call	1000e1bc <__eqdf2>
10006130:	103f7826 	beq	r2,zero,10005f14 <_dtoa_r+0x648>
10006134:	d8c00617 	ldw	r3,24(sp)
10006138:	8805883a 	mov	r2,r17
1000613c:	dd400115 	stw	r21,4(sp)
10006140:	8c400084 	addi	r17,r17,2
10006144:	10ed883a 	add	r22,r2,r3
10006148:	00000a06 	br	10006174 <_dtoa_r+0x8a8>
1000614c:	000e41c0 	call	1000e41c <__muldf3>
10006150:	000d883a 	mov	r6,zero
10006154:	000f883a 	mov	r7,zero
10006158:	1009883a 	mov	r4,r2
1000615c:	180b883a 	mov	r5,r3
10006160:	1027883a 	mov	r19,r2
10006164:	1829883a 	mov	r20,r3
10006168:	8c400044 	addi	r17,r17,1
1000616c:	000e1bc0 	call	1000e1bc <__eqdf2>
10006170:	10029d26 	beq	r2,zero,10006be8 <_dtoa_r+0x131c>
10006174:	800d883a 	mov	r6,r16
10006178:	900f883a 	mov	r7,r18
1000617c:	9809883a 	mov	r4,r19
10006180:	a00b883a 	mov	r5,r20
10006184:	000d9140 	call	1000d914 <__divdf3>
10006188:	180b883a 	mov	r5,r3
1000618c:	1009883a 	mov	r4,r2
10006190:	000f4680 	call	1000f468 <__fixdfsi>
10006194:	1009883a 	mov	r4,r2
10006198:	102b883a 	mov	r21,r2
1000619c:	000f4e80 	call	1000f4e8 <__floatsidf>
100061a0:	800d883a 	mov	r6,r16
100061a4:	900f883a 	mov	r7,r18
100061a8:	1009883a 	mov	r4,r2
100061ac:	180b883a 	mov	r5,r3
100061b0:	000e41c0 	call	1000e41c <__muldf3>
100061b4:	100d883a 	mov	r6,r2
100061b8:	180f883a 	mov	r7,r3
100061bc:	9809883a 	mov	r4,r19
100061c0:	a00b883a 	mov	r5,r20
100061c4:	000eaa80 	call	1000eaa8 <__subdf3>
100061c8:	aa400c04 	addi	r9,r21,48
100061cc:	8a7fffc5 	stb	r9,-1(r17)
100061d0:	000d883a 	mov	r6,zero
100061d4:	01d00934 	movhi	r7,16420
100061d8:	1009883a 	mov	r4,r2
100061dc:	180b883a 	mov	r5,r3
100061e0:	882f883a 	mov	r23,r17
100061e4:	b47fd91e 	bne	r22,r17,1000614c <_dtoa_r+0x880>
100061e8:	a82d883a 	mov	r22,r21
100061ec:	dd400117 	ldw	r21,4(sp)
100061f0:	100d883a 	mov	r6,r2
100061f4:	180f883a 	mov	r7,r3
100061f8:	1009883a 	mov	r4,r2
100061fc:	180b883a 	mov	r5,r3
10006200:	000cf740 	call	1000cf74 <__adddf3>
10006204:	800d883a 	mov	r6,r16
10006208:	900f883a 	mov	r7,r18
1000620c:	1009883a 	mov	r4,r2
10006210:	180b883a 	mov	r5,r3
10006214:	1027883a 	mov	r19,r2
10006218:	1823883a 	mov	r17,r3
1000621c:	000e23c0 	call	1000e23c <__gedf2>
10006220:	00800816 	blt	zero,r2,10006244 <_dtoa_r+0x978>
10006224:	800d883a 	mov	r6,r16
10006228:	900f883a 	mov	r7,r18
1000622c:	9809883a 	mov	r4,r19
10006230:	880b883a 	mov	r5,r17
10006234:	000e1bc0 	call	1000e1bc <__eqdf2>
10006238:	103f361e 	bne	r2,zero,10005f14 <_dtoa_r+0x648>
1000623c:	b580004c 	andi	r22,r22,1
10006240:	b03f3426 	beq	r22,zero,10005f14 <_dtoa_r+0x648>
10006244:	ba3fffc3 	ldbu	r8,-1(r23)
10006248:	d9000317 	ldw	r4,12(sp)
1000624c:	00000306 	br	1000625c <_dtoa_r+0x990>
10006250:	20c30e26 	beq	r4,r3,10006e8c <_dtoa_r+0x15c0>
10006254:	1a3fffc3 	ldbu	r8,-1(r3)
10006258:	182f883a 	mov	r23,r3
1000625c:	40803fcc 	andi	r2,r8,255
10006260:	1080201c 	xori	r2,r2,128
10006264:	10bfe004 	addi	r2,r2,-128
10006268:	10800e60 	cmpeqi	r2,r2,57
1000626c:	b8ffffc4 	addi	r3,r23,-1
10006270:	103ff71e 	bne	r2,zero,10006250 <_dtoa_r+0x984>
10006274:	42000044 	addi	r8,r8,1
10006278:	1a000005 	stb	r8,0(r3)
1000627c:	003f2506 	br	10005f14 <_dtoa_r+0x648>
10006280:	d8c00717 	ldw	r3,28(sp)
10006284:	1800e426 	beq	r3,zero,10006618 <_dtoa_r+0xd4c>
10006288:	d8c00217 	ldw	r3,8(sp)
1000628c:	18c00088 	cmpgei	r3,r3,2
10006290:	1801ec26 	beq	r3,zero,10006a44 <_dtoa_r+0x1178>
10006294:	d8800617 	ldw	r2,24(sp)
10006298:	14bfffc4 	addi	r18,r2,-1
1000629c:	d8800817 	ldw	r2,32(sp)
100062a0:	1481c50e 	bge	r2,r18,100069b8 <_dtoa_r+0x10ec>
100062a4:	d8800817 	ldw	r2,32(sp)
100062a8:	dc800815 	stw	r18,32(sp)
100062ac:	9085c83a 	sub	r2,r18,r2
100062b0:	b0ad883a 	add	r22,r22,r2
100062b4:	0025883a 	mov	r18,zero
100062b8:	d8800617 	ldw	r2,24(sp)
100062bc:	10024c16 	blt	r2,zero,10006bf0 <_dtoa_r+0x1324>
100062c0:	d8c00517 	ldw	r3,20(sp)
100062c4:	a0a9883a 	add	r20,r20,r2
100062c8:	1885883a 	add	r2,r3,r2
100062cc:	1827883a 	mov	r19,r3
100062d0:	d8800515 	stw	r2,20(sp)
100062d4:	01400044 	movi	r5,1
100062d8:	e009883a 	mov	r4,fp
100062dc:	00090a80 	call	100090a8 <__i2b>
100062e0:	1021883a 	mov	r16,r2
100062e4:	04c0080e 	bge	zero,r19,10006308 <_dtoa_r+0xa3c>
100062e8:	0500070e 	bge	zero,r20,10006308 <_dtoa_r+0xa3c>
100062ec:	9805883a 	mov	r2,r19
100062f0:	a4c1a916 	blt	r20,r19,10006998 <_dtoa_r+0x10cc>
100062f4:	d8c00517 	ldw	r3,20(sp)
100062f8:	98a7c83a 	sub	r19,r19,r2
100062fc:	a0a9c83a 	sub	r20,r20,r2
10006300:	1887c83a 	sub	r3,r3,r2
10006304:	d8c00515 	stw	r3,20(sp)
10006308:	d8800817 	ldw	r2,32(sp)
1000630c:	10001426 	beq	r2,zero,10006360 <_dtoa_r+0xa94>
10006310:	d8800717 	ldw	r2,28(sp)
10006314:	10017226 	beq	r2,zero,100068e0 <_dtoa_r+0x1014>
10006318:	04800e0e 	bge	zero,r18,10006354 <_dtoa_r+0xa88>
1000631c:	800b883a 	mov	r5,r16
10006320:	900d883a 	mov	r6,r18
10006324:	e009883a 	mov	r4,fp
10006328:	00092c80 	call	100092c8 <__pow5mult>
1000632c:	a80d883a 	mov	r6,r21
10006330:	100b883a 	mov	r5,r2
10006334:	e009883a 	mov	r4,fp
10006338:	1021883a 	mov	r16,r2
1000633c:	00090dc0 	call	100090dc <__multiply>
10006340:	102f883a 	mov	r23,r2
10006344:	a80b883a 	mov	r5,r21
10006348:	e009883a 	mov	r4,fp
1000634c:	0008d4c0 	call	10008d4c <_Bfree>
10006350:	b82b883a 	mov	r21,r23
10006354:	d8800817 	ldw	r2,32(sp)
10006358:	148dc83a 	sub	r6,r2,r18
1000635c:	3001611e 	bne	r6,zero,100068e4 <_dtoa_r+0x1018>
10006360:	01400044 	movi	r5,1
10006364:	e009883a 	mov	r4,fp
10006368:	00090a80 	call	100090a8 <__i2b>
1000636c:	1025883a 	mov	r18,r2
10006370:	0580bc16 	blt	zero,r22,10006664 <_dtoa_r+0xd98>
10006374:	d8800217 	ldw	r2,8(sp)
10006378:	10800088 	cmpgei	r2,r2,2
1000637c:	10016526 	beq	r2,zero,10006914 <_dtoa_r+0x1048>
10006380:	0023883a 	mov	r17,zero
10006384:	00800044 	movi	r2,1
10006388:	b000bf1e 	bne	r22,zero,10006688 <_dtoa_r+0xdbc>
1000638c:	1505883a 	add	r2,r2,r20
10006390:	108007cc 	andi	r2,r2,31
10006394:	1000aa26 	beq	r2,zero,10006640 <_dtoa_r+0xd74>
10006398:	00c00804 	movi	r3,32
1000639c:	1887c83a 	sub	r3,r3,r2
100063a0:	19000150 	cmplti	r4,r3,5
100063a4:	2002f61e 	bne	r4,zero,10006f80 <_dtoa_r+0x16b4>
100063a8:	00c00704 	movi	r3,28
100063ac:	1885c83a 	sub	r2,r3,r2
100063b0:	d8c00517 	ldw	r3,20(sp)
100063b4:	98a7883a 	add	r19,r19,r2
100063b8:	a0a9883a 	add	r20,r20,r2
100063bc:	1887883a 	add	r3,r3,r2
100063c0:	d8c00515 	stw	r3,20(sp)
100063c4:	d8800517 	ldw	r2,20(sp)
100063c8:	00809716 	blt	zero,r2,10006628 <_dtoa_r+0xd5c>
100063cc:	0500050e 	bge	zero,r20,100063e4 <_dtoa_r+0xb18>
100063d0:	900b883a 	mov	r5,r18
100063d4:	a00d883a 	mov	r6,r20
100063d8:	e009883a 	mov	r4,fp
100063dc:	00093f00 	call	100093f0 <__lshift>
100063e0:	1025883a 	mov	r18,r2
100063e4:	d8800917 	ldw	r2,36(sp)
100063e8:	10012b1e 	bne	r2,zero,10006898 <_dtoa_r+0xfcc>
100063ec:	d8800617 	ldw	r2,24(sp)
100063f0:	00810d0e 	bge	zero,r2,10006828 <_dtoa_r+0xf5c>
100063f4:	d8800417 	ldw	r2,16(sp)
100063f8:	10800044 	addi	r2,r2,1
100063fc:	d8800415 	stw	r2,16(sp)
10006400:	d8800717 	ldw	r2,28(sp)
10006404:	1000b21e 	bne	r2,zero,100066d0 <_dtoa_r+0xe04>
10006408:	ddc00317 	ldw	r23,12(sp)
1000640c:	04400044 	movi	r17,1
10006410:	dcc00617 	ldw	r19,24(sp)
10006414:	00000306 	br	10006424 <_dtoa_r+0xb58>
10006418:	0008d700 	call	10008d70 <__multadd>
1000641c:	102b883a 	mov	r21,r2
10006420:	8c400044 	addi	r17,r17,1
10006424:	900b883a 	mov	r5,r18
10006428:	a809883a 	mov	r4,r21
1000642c:	00056bc0 	call	100056bc <quorem>
10006430:	10800c04 	addi	r2,r2,48
10006434:	bdc00044 	addi	r23,r23,1
10006438:	b8bfffc5 	stb	r2,-1(r23)
1000643c:	000f883a 	mov	r7,zero
10006440:	01800284 	movi	r6,10
10006444:	a80b883a 	mov	r5,r21
10006448:	e009883a 	mov	r4,fp
1000644c:	8cfff216 	blt	r17,r19,10006418 <_dtoa_r+0xb4c>
10006450:	1011883a 	mov	r8,r2
10006454:	0029883a 	mov	r20,zero
10006458:	a80b883a 	mov	r5,r21
1000645c:	01800044 	movi	r6,1
10006460:	e009883a 	mov	r4,fp
10006464:	da000115 	stw	r8,4(sp)
10006468:	00093f00 	call	100093f0 <__lshift>
1000646c:	900b883a 	mov	r5,r18
10006470:	1009883a 	mov	r4,r2
10006474:	102b883a 	mov	r21,r2
10006478:	000952c0 	call	1000952c <__mcmp>
1000647c:	b8ffffc3 	ldbu	r3,-1(r23)
10006480:	0081610e 	bge	zero,r2,10006a08 <_dtoa_r+0x113c>
10006484:	d9400317 	ldw	r5,12(sp)
10006488:	00000306 	br	10006498 <_dtoa_r+0xbcc>
1000648c:	29017726 	beq	r5,r4,10006a6c <_dtoa_r+0x11a0>
10006490:	20ffffc3 	ldbu	r3,-1(r4)
10006494:	202f883a 	mov	r23,r4
10006498:	18803fcc 	andi	r2,r3,255
1000649c:	1080201c 	xori	r2,r2,128
100064a0:	10bfe004 	addi	r2,r2,-128
100064a4:	10800e60 	cmpeqi	r2,r2,57
100064a8:	b93fffc4 	addi	r4,r23,-1
100064ac:	103ff71e 	bne	r2,zero,1000648c <_dtoa_r+0xbc0>
100064b0:	18c00044 	addi	r3,r3,1
100064b4:	20c00005 	stb	r3,0(r4)
100064b8:	900b883a 	mov	r5,r18
100064bc:	e009883a 	mov	r4,fp
100064c0:	0008d4c0 	call	10008d4c <_Bfree>
100064c4:	803e9326 	beq	r16,zero,10005f14 <_dtoa_r+0x648>
100064c8:	a0000426 	beq	r20,zero,100064dc <_dtoa_r+0xc10>
100064cc:	a4000326 	beq	r20,r16,100064dc <_dtoa_r+0xc10>
100064d0:	a00b883a 	mov	r5,r20
100064d4:	e009883a 	mov	r4,fp
100064d8:	0008d4c0 	call	10008d4c <_Bfree>
100064dc:	800b883a 	mov	r5,r16
100064e0:	e009883a 	mov	r4,fp
100064e4:	0008d4c0 	call	10008d4c <_Bfree>
100064e8:	003e8a06 	br	10005f14 <_dtoa_r+0x648>
100064ec:	d8000915 	stw	zero,36(sp)
100064f0:	a0003616 	blt	r20,zero,100065cc <_dtoa_r+0xd00>
100064f4:	d8000515 	stw	zero,20(sp)
100064f8:	d8c00217 	ldw	r3,8(sp)
100064fc:	dd800415 	stw	r22,16(sp)
10006500:	d8000815 	stw	zero,32(sp)
10006504:	188002a8 	cmpgeui	r2,r3,10
10006508:	a5a9883a 	add	r20,r20,r22
1000650c:	103d9726 	beq	r2,zero,10005b6c <_dtoa_r+0x2a0>
10006510:	00800044 	movi	r2,1
10006514:	d8800715 	stw	r2,28(sp)
10006518:	00bfffc4 	movi	r2,-1
1000651c:	04bfffc4 	movi	r18,-1
10006520:	04000044 	movi	r16,1
10006524:	d8000215 	stw	zero,8(sp)
10006528:	d8800615 	stw	r2,24(sp)
1000652c:	d8001e15 	stw	zero,120(sp)
10006530:	d8800617 	ldw	r2,24(sp)
10006534:	e0001115 	stw	zero,68(fp)
10006538:	000b883a 	mov	r5,zero
1000653c:	d8800b15 	stw	r2,44(sp)
10006540:	003daa06 	br	10005bec <_dtoa_r+0x320>
10006544:	18800160 	cmpeqi	r2,r3,5
10006548:	00c00044 	movi	r3,1
1000654c:	d8c00715 	stw	r3,28(sp)
10006550:	10000d26 	beq	r2,zero,10006588 <_dtoa_r+0xcbc>
10006554:	d8801e17 	ldw	r2,120(sp)
10006558:	d8c00417 	ldw	r3,16(sp)
1000655c:	10c5883a 	add	r2,r2,r3
10006560:	d8800b15 	stw	r2,44(sp)
10006564:	10800044 	addi	r2,r2,1
10006568:	d8800615 	stw	r2,24(sp)
1000656c:	100d883a 	mov	r6,r2
10006570:	00bd9216 	blt	zero,r2,10005bbc <_dtoa_r+0x2f0>
10006574:	01800044 	movi	r6,1
10006578:	003d9006 	br	10005bbc <_dtoa_r+0x2f0>
1000657c:	188000a0 	cmpeqi	r2,r3,2
10006580:	d8000715 	stw	zero,28(sp)
10006584:	103d881e 	bne	r2,zero,10005ba8 <_dtoa_r+0x2dc>
10006588:	e0001115 	stw	zero,68(fp)
1000658c:	000b883a 	mov	r5,zero
10006590:	e009883a 	mov	r4,fp
10006594:	0008ca80 	call	10008ca8 <_Balloc>
10006598:	d8800315 	stw	r2,12(sp)
1000659c:	e0801015 	stw	r2,64(fp)
100065a0:	00bfffc4 	movi	r2,-1
100065a4:	d8800b15 	stw	r2,44(sp)
100065a8:	00800044 	movi	r2,1
100065ac:	d8800715 	stw	r2,28(sp)
100065b0:	00bfffc4 	movi	r2,-1
100065b4:	d8001e15 	stw	zero,120(sp)
100065b8:	d8800615 	stw	r2,24(sp)
100065bc:	003e8f06 	br	10005ffc <_dtoa_r+0x730>
100065c0:	00800044 	movi	r2,1
100065c4:	d8800915 	stw	r2,36(sp)
100065c8:	a03d5c0e 	bge	r20,zero,10005b3c <_dtoa_r+0x270>
100065cc:	04800044 	movi	r18,1
100065d0:	9405c83a 	sub	r2,r18,r16
100065d4:	d8800515 	stw	r2,20(sp)
100065d8:	0029883a 	mov	r20,zero
100065dc:	003d5806 	br	10005b40 <_dtoa_r+0x274>
100065e0:	b009883a 	mov	r4,r22
100065e4:	000f4e80 	call	1000f4e8 <__floatsidf>
100065e8:	a00d883a 	mov	r6,r20
100065ec:	980f883a 	mov	r7,r19
100065f0:	1009883a 	mov	r4,r2
100065f4:	180b883a 	mov	r5,r3
100065f8:	000e1bc0 	call	1000e1bc <__eqdf2>
100065fc:	103d3e26 	beq	r2,zero,10005af8 <_dtoa_r+0x22c>
10006600:	b5bfffc4 	addi	r22,r22,-1
10006604:	003d3c06 	br	10005af8 <_dtoa_r+0x22c>
10006608:	00840074 	movhi	r2,4097
1000660c:	108a1704 	addi	r2,r2,10332
10006610:	d8800315 	stw	r2,12(sp)
10006614:	003cdf06 	br	10005994 <_dtoa_r+0xc8>
10006618:	dc800817 	ldw	r18,32(sp)
1000661c:	dcc00517 	ldw	r19,20(sp)
10006620:	0021883a 	mov	r16,zero
10006624:	003f2f06 	br	100062e4 <_dtoa_r+0xa18>
10006628:	a80b883a 	mov	r5,r21
1000662c:	100d883a 	mov	r6,r2
10006630:	e009883a 	mov	r4,fp
10006634:	00093f00 	call	100093f0 <__lshift>
10006638:	102b883a 	mov	r21,r2
1000663c:	003f6306 	br	100063cc <_dtoa_r+0xb00>
10006640:	00800704 	movi	r2,28
10006644:	003f5a06 	br	100063b0 <_dtoa_r+0xae4>
10006648:	01000804 	movi	r4,32
1000664c:	2089c83a 	sub	r4,r4,r2
10006650:	d8800117 	ldw	r2,4(sp)
10006654:	1108983a 	sll	r4,r2,r4
10006658:	003cf306 	br	10005a28 <_dtoa_r+0x15c>
1000665c:	04000044 	movi	r16,1
10006660:	003d4706 	br	10005b80 <_dtoa_r+0x2b4>
10006664:	b00d883a 	mov	r6,r22
10006668:	100b883a 	mov	r5,r2
1000666c:	e009883a 	mov	r4,fp
10006670:	00092c80 	call	100092c8 <__pow5mult>
10006674:	1025883a 	mov	r18,r2
10006678:	d8800217 	ldw	r2,8(sp)
1000667c:	10800090 	cmplti	r2,r2,2
10006680:	10012f1e 	bne	r2,zero,10006b40 <_dtoa_r+0x1274>
10006684:	0023883a 	mov	r17,zero
10006688:	90800417 	ldw	r2,16(r18)
1000668c:	10800104 	addi	r2,r2,4
10006690:	100490ba 	slli	r2,r2,2
10006694:	9085883a 	add	r2,r18,r2
10006698:	11000017 	ldw	r4,0(r2)
1000669c:	0008f940 	call	10008f94 <__hi0bits>
100066a0:	00c00804 	movi	r3,32
100066a4:	1885c83a 	sub	r2,r3,r2
100066a8:	003f3806 	br	1000638c <_dtoa_r+0xac0>
100066ac:	800b883a 	mov	r5,r16
100066b0:	000f883a 	mov	r7,zero
100066b4:	01800284 	movi	r6,10
100066b8:	e009883a 	mov	r4,fp
100066bc:	0008d700 	call	10008d70 <__multadd>
100066c0:	1021883a 	mov	r16,r2
100066c4:	d8800b17 	ldw	r2,44(sp)
100066c8:	00821b0e 	bge	zero,r2,10006f38 <_dtoa_r+0x166c>
100066cc:	d8800615 	stw	r2,24(sp)
100066d0:	04c0b316 	blt	zero,r19,100069a0 <_dtoa_r+0x10d4>
100066d4:	8801341e 	bne	r17,zero,10006ba8 <_dtoa_r+0x12dc>
100066d8:	8027883a 	mov	r19,r16
100066dc:	dc400317 	ldw	r17,12(sp)
100066e0:	d8c00617 	ldw	r3,24(sp)
100066e4:	d8800117 	ldw	r2,4(sp)
100066e8:	8dffffc4 	addi	r23,r17,-1
100066ec:	b8c7883a 	add	r3,r23,r3
100066f0:	d8c00615 	stw	r3,24(sp)
100066f4:	d8c00217 	ldw	r3,8(sp)
100066f8:	1080004c 	andi	r2,r2,1
100066fc:	d8800815 	stw	r2,32(sp)
10006700:	10c4b03a 	or	r2,r2,r3
10006704:	d8800715 	stw	r2,28(sp)
10006708:	00002c06 	br	100067bc <_dtoa_r+0xef0>
1000670c:	b80b883a 	mov	r5,r23
10006710:	a809883a 	mov	r4,r21
10006714:	da000515 	stw	r8,20(sp)
10006718:	000952c0 	call	1000952c <__mcmp>
1000671c:	b80b883a 	mov	r5,r23
10006720:	e009883a 	mov	r4,fp
10006724:	d8800115 	stw	r2,4(sp)
10006728:	0008d4c0 	call	10008d4c <_Bfree>
1000672c:	d8800117 	ldw	r2,4(sp)
10006730:	da000517 	ldw	r8,20(sp)
10006734:	1000021e 	bne	r2,zero,10006740 <_dtoa_r+0xe74>
10006738:	d8c00717 	ldw	r3,28(sp)
1000673c:	1801f226 	beq	r3,zero,10006f08 <_dtoa_r+0x163c>
10006740:	8dc00044 	addi	r23,r17,1
10006744:	a0010516 	blt	r20,zero,10006b5c <_dtoa_r+0x1290>
10006748:	d8c00217 	ldw	r3,8(sp)
1000674c:	a0e8b03a 	or	r20,r20,r3
10006750:	d8c00817 	ldw	r3,32(sp)
10006754:	1d28b03a 	or	r20,r3,r20
10006758:	a0010026 	beq	r20,zero,10006b5c <_dtoa_r+0x1290>
1000675c:	00812816 	blt	zero,r2,10006c00 <_dtoa_r+0x1334>
10006760:	d8800617 	ldw	r2,24(sp)
10006764:	8a000005 	stb	r8,0(r17)
10006768:	14412926 	beq	r2,r17,10006c10 <_dtoa_r+0x1344>
1000676c:	a80b883a 	mov	r5,r21
10006770:	000f883a 	mov	r7,zero
10006774:	01800284 	movi	r6,10
10006778:	e009883a 	mov	r4,fp
1000677c:	0008d700 	call	10008d70 <__multadd>
10006780:	102b883a 	mov	r21,r2
10006784:	000f883a 	mov	r7,zero
10006788:	01800284 	movi	r6,10
1000678c:	800b883a 	mov	r5,r16
10006790:	e009883a 	mov	r4,fp
10006794:	84c02026 	beq	r16,r19,10006818 <_dtoa_r+0xf4c>
10006798:	0008d700 	call	10008d70 <__multadd>
1000679c:	980b883a 	mov	r5,r19
100067a0:	000f883a 	mov	r7,zero
100067a4:	01800284 	movi	r6,10
100067a8:	e009883a 	mov	r4,fp
100067ac:	1021883a 	mov	r16,r2
100067b0:	0008d700 	call	10008d70 <__multadd>
100067b4:	1027883a 	mov	r19,r2
100067b8:	b823883a 	mov	r17,r23
100067bc:	900b883a 	mov	r5,r18
100067c0:	a809883a 	mov	r4,r21
100067c4:	00056bc0 	call	100056bc <quorem>
100067c8:	800b883a 	mov	r5,r16
100067cc:	a809883a 	mov	r4,r21
100067d0:	102d883a 	mov	r22,r2
100067d4:	000952c0 	call	1000952c <__mcmp>
100067d8:	980d883a 	mov	r6,r19
100067dc:	900b883a 	mov	r5,r18
100067e0:	e009883a 	mov	r4,fp
100067e4:	1029883a 	mov	r20,r2
100067e8:	00095840 	call	10009584 <__mdiff>
100067ec:	102f883a 	mov	r23,r2
100067f0:	10800317 	ldw	r2,12(r2)
100067f4:	b2000c04 	addi	r8,r22,48
100067f8:	103fc426 	beq	r2,zero,1000670c <_dtoa_r+0xe40>
100067fc:	b80b883a 	mov	r5,r23
10006800:	e009883a 	mov	r4,fp
10006804:	da000115 	stw	r8,4(sp)
10006808:	0008d4c0 	call	10008d4c <_Bfree>
1000680c:	00800044 	movi	r2,1
10006810:	da000117 	ldw	r8,4(sp)
10006814:	003fca06 	br	10006740 <_dtoa_r+0xe74>
10006818:	0008d700 	call	10008d70 <__multadd>
1000681c:	1021883a 	mov	r16,r2
10006820:	1027883a 	mov	r19,r2
10006824:	003fe406 	br	100067b8 <_dtoa_r+0xeec>
10006828:	d8800217 	ldw	r2,8(sp)
1000682c:	108000d0 	cmplti	r2,r2,3
10006830:	10004b1e 	bne	r2,zero,10006960 <_dtoa_r+0x1094>
10006834:	d8800617 	ldw	r2,24(sp)
10006838:	103e0d1e 	bne	r2,zero,10006070 <_dtoa_r+0x7a4>
1000683c:	900b883a 	mov	r5,r18
10006840:	e009883a 	mov	r4,fp
10006844:	000f883a 	mov	r7,zero
10006848:	01800144 	movi	r6,5
1000684c:	0008d700 	call	10008d70 <__multadd>
10006850:	100b883a 	mov	r5,r2
10006854:	a809883a 	mov	r4,r21
10006858:	1025883a 	mov	r18,r2
1000685c:	000952c0 	call	1000952c <__mcmp>
10006860:	00be030e 	bge	zero,r2,10006070 <_dtoa_r+0x7a4>
10006864:	d8c00317 	ldw	r3,12(sp)
10006868:	00800c44 	movi	r2,49
1000686c:	18800005 	stb	r2,0(r3)
10006870:	d8800417 	ldw	r2,16(sp)
10006874:	1dc00044 	addi	r23,r3,1
10006878:	14400044 	addi	r17,r2,1
1000687c:	900b883a 	mov	r5,r18
10006880:	e009883a 	mov	r4,fp
10006884:	0008d4c0 	call	10008d4c <_Bfree>
10006888:	88800044 	addi	r2,r17,1
1000688c:	d8800415 	stw	r2,16(sp)
10006890:	803f121e 	bne	r16,zero,100064dc <_dtoa_r+0xc10>
10006894:	003d9f06 	br	10005f14 <_dtoa_r+0x648>
10006898:	900b883a 	mov	r5,r18
1000689c:	a809883a 	mov	r4,r21
100068a0:	000952c0 	call	1000952c <__mcmp>
100068a4:	103ed10e 	bge	r2,zero,100063ec <_dtoa_r+0xb20>
100068a8:	a80b883a 	mov	r5,r21
100068ac:	000f883a 	mov	r7,zero
100068b0:	01800284 	movi	r6,10
100068b4:	e009883a 	mov	r4,fp
100068b8:	0008d700 	call	10008d70 <__multadd>
100068bc:	102b883a 	mov	r21,r2
100068c0:	d8800417 	ldw	r2,16(sp)
100068c4:	153fffc4 	addi	r20,r2,-1
100068c8:	d8800717 	ldw	r2,28(sp)
100068cc:	103f771e 	bne	r2,zero,100066ac <_dtoa_r+0xde0>
100068d0:	d8800b17 	ldw	r2,44(sp)
100068d4:	0081910e 	bge	zero,r2,10006f1c <_dtoa_r+0x1650>
100068d8:	d8800615 	stw	r2,24(sp)
100068dc:	003eca06 	br	10006408 <_dtoa_r+0xb3c>
100068e0:	d9800817 	ldw	r6,32(sp)
100068e4:	a80b883a 	mov	r5,r21
100068e8:	e009883a 	mov	r4,fp
100068ec:	00092c80 	call	100092c8 <__pow5mult>
100068f0:	102b883a 	mov	r21,r2
100068f4:	003e9a06 	br	10006360 <_dtoa_r+0xa94>
100068f8:	00840074 	movhi	r2,4097
100068fc:	1007883a 	mov	r3,r2
10006900:	18ca2004 	addi	r3,r3,10368
10006904:	00840074 	movhi	r2,4097
10006908:	d8c00315 	stw	r3,12(sp)
1000690c:	108a20c4 	addi	r2,r2,10371
10006910:	003da506 	br	10005fa8 <_dtoa_r+0x6dc>
10006914:	d8800117 	ldw	r2,4(sp)
10006918:	103e991e 	bne	r2,zero,10006380 <_dtoa_r+0xab4>
1000691c:	00800434 	movhi	r2,16
10006920:	10bfffc4 	addi	r2,r2,-1
10006924:	8884703a 	and	r2,r17,r2
10006928:	103e951e 	bne	r2,zero,10006380 <_dtoa_r+0xab4>
1000692c:	8c5ffc2c 	andhi	r17,r17,32752
10006930:	883e9326 	beq	r17,zero,10006380 <_dtoa_r+0xab4>
10006934:	d8800517 	ldw	r2,20(sp)
10006938:	a5000044 	addi	r20,r20,1
1000693c:	04400044 	movi	r17,1
10006940:	10800044 	addi	r2,r2,1
10006944:	d8800515 	stw	r2,20(sp)
10006948:	003e8e06 	br	10006384 <_dtoa_r+0xab8>
1000694c:	00800044 	movi	r2,1
10006950:	04800044 	movi	r18,1
10006954:	d8800615 	stw	r2,24(sp)
10006958:	d8801e15 	stw	r2,120(sp)
1000695c:	003ef406 	br	10006530 <_dtoa_r+0xc64>
10006960:	d8800417 	ldw	r2,16(sp)
10006964:	10800044 	addi	r2,r2,1
10006968:	d8800415 	stw	r2,16(sp)
1000696c:	d8800717 	ldw	r2,28(sp)
10006970:	103f571e 	bne	r2,zero,100066d0 <_dtoa_r+0xe04>
10006974:	900b883a 	mov	r5,r18
10006978:	a809883a 	mov	r4,r21
1000697c:	00056bc0 	call	100056bc <quorem>
10006980:	12000c04 	addi	r8,r2,48
10006984:	d8800317 	ldw	r2,12(sp)
10006988:	0029883a 	mov	r20,zero
1000698c:	15c00044 	addi	r23,r2,1
10006990:	12000005 	stb	r8,0(r2)
10006994:	003eb006 	br	10006458 <_dtoa_r+0xb8c>
10006998:	a005883a 	mov	r2,r20
1000699c:	003e5506 	br	100062f4 <_dtoa_r+0xa28>
100069a0:	800b883a 	mov	r5,r16
100069a4:	980d883a 	mov	r6,r19
100069a8:	e009883a 	mov	r4,fp
100069ac:	00093f00 	call	100093f0 <__lshift>
100069b0:	1021883a 	mov	r16,r2
100069b4:	003f4706 	br	100066d4 <_dtoa_r+0xe08>
100069b8:	14a5c83a 	sub	r18,r2,r18
100069bc:	003e3e06 	br	100062b8 <_dtoa_r+0x9ec>
100069c0:	00840074 	movhi	r2,4097
100069c4:	108a3104 	addi	r2,r2,10436
100069c8:	11800817 	ldw	r6,32(r2)
100069cc:	11c00917 	ldw	r7,36(r2)
100069d0:	d9000117 	ldw	r4,4(sp)
100069d4:	880b883a 	mov	r5,r17
100069d8:	da400e15 	stw	r9,56(sp)
100069dc:	da800d15 	stw	r10,52(sp)
100069e0:	000d9140 	call	1000d914 <__divdf3>
100069e4:	d8800c15 	stw	r2,48(sp)
100069e8:	1827883a 	mov	r19,r3
100069ec:	bdc003cc 	andi	r23,r23,15
100069f0:	040000c4 	movi	r16,3
100069f4:	da800d17 	ldw	r10,52(sp)
100069f8:	da400e17 	ldw	r9,56(sp)
100069fc:	003c9206 	br	10005c48 <_dtoa_r+0x37c>
10006a00:	d8000715 	stw	zero,28(sp)
10006a04:	003ed306 	br	10006554 <_dtoa_r+0xc88>
10006a08:	1000031e 	bne	r2,zero,10006a18 <_dtoa_r+0x114c>
10006a0c:	da000117 	ldw	r8,4(sp)
10006a10:	4200004c 	andi	r8,r8,1
10006a14:	403e9b1e 	bne	r8,zero,10006484 <_dtoa_r+0xbb8>
10006a18:	1805883a 	mov	r2,r3
10006a1c:	00000206 	br	10006a28 <_dtoa_r+0x115c>
10006a20:	b8bfff83 	ldbu	r2,-2(r23)
10006a24:	182f883a 	mov	r23,r3
10006a28:	10803fcc 	andi	r2,r2,255
10006a2c:	1080201c 	xori	r2,r2,128
10006a30:	10bfe004 	addi	r2,r2,-128
10006a34:	10800c18 	cmpnei	r2,r2,48
10006a38:	b8ffffc4 	addi	r3,r23,-1
10006a3c:	103ff826 	beq	r2,zero,10006a20 <_dtoa_r+0x1154>
10006a40:	003e9d06 	br	100064b8 <_dtoa_r+0xbec>
10006a44:	d8c00a17 	ldw	r3,40(sp)
10006a48:	1800bc26 	beq	r3,zero,10006d3c <_dtoa_r+0x1470>
10006a4c:	d8c00517 	ldw	r3,20(sp)
10006a50:	10810cc4 	addi	r2,r2,1075
10006a54:	a0a9883a 	add	r20,r20,r2
10006a58:	1885883a 	add	r2,r3,r2
10006a5c:	1827883a 	mov	r19,r3
10006a60:	dc800817 	ldw	r18,32(sp)
10006a64:	d8800515 	stw	r2,20(sp)
10006a68:	003e1a06 	br	100062d4 <_dtoa_r+0xa08>
10006a6c:	d8c00317 	ldw	r3,12(sp)
10006a70:	00800c44 	movi	r2,49
10006a74:	18800005 	stb	r2,0(r3)
10006a78:	d8800417 	ldw	r2,16(sp)
10006a7c:	10800044 	addi	r2,r2,1
10006a80:	d8800415 	stw	r2,16(sp)
10006a84:	003e8c06 	br	100064b8 <_dtoa_r+0xbec>
10006a88:	8009883a 	mov	r4,r16
10006a8c:	000f4e80 	call	1000f4e8 <__floatsidf>
10006a90:	900d883a 	mov	r6,r18
10006a94:	980f883a 	mov	r7,r19
10006a98:	1009883a 	mov	r4,r2
10006a9c:	180b883a 	mov	r5,r3
10006aa0:	000e41c0 	call	1000e41c <__muldf3>
10006aa4:	000d883a 	mov	r6,zero
10006aa8:	01d00734 	movhi	r7,16412
10006aac:	1009883a 	mov	r4,r2
10006ab0:	180b883a 	mov	r5,r3
10006ab4:	000cf740 	call	1000cf74 <__adddf3>
10006ab8:	d8800c15 	stw	r2,48(sp)
10006abc:	00bf3034 	movhi	r2,64704
10006ac0:	1885883a 	add	r2,r3,r2
10006ac4:	d8800d15 	stw	r2,52(sp)
10006ac8:	9009883a 	mov	r4,r18
10006acc:	980b883a 	mov	r5,r19
10006ad0:	000d883a 	mov	r6,zero
10006ad4:	01d00534 	movhi	r7,16404
10006ad8:	000eaa80 	call	1000eaa8 <__subdf3>
10006adc:	ddc00c17 	ldw	r23,48(sp)
10006ae0:	dcc00d17 	ldw	r19,52(sp)
10006ae4:	1009883a 	mov	r4,r2
10006ae8:	b80d883a 	mov	r6,r23
10006aec:	980f883a 	mov	r7,r19
10006af0:	180b883a 	mov	r5,r3
10006af4:	1025883a 	mov	r18,r2
10006af8:	1821883a 	mov	r16,r3
10006afc:	000e23c0 	call	1000e23c <__gedf2>
10006b00:	0080ee16 	blt	zero,r2,10006ebc <_dtoa_r+0x15f0>
10006b04:	99e0003c 	xorhi	r7,r19,32768
10006b08:	b80d883a 	mov	r6,r23
10006b0c:	9009883a 	mov	r4,r18
10006b10:	800b883a 	mov	r5,r16
10006b14:	000e32c0 	call	1000e32c <__ledf2>
10006b18:	103d380e 	bge	r2,zero,10005ffc <_dtoa_r+0x730>
10006b1c:	0025883a 	mov	r18,zero
10006b20:	0021883a 	mov	r16,zero
10006b24:	003d5206 	br	10006070 <_dtoa_r+0x7a4>
10006b28:	d8800417 	ldw	r2,16(sp)
10006b2c:	1000ad1e 	bne	r2,zero,10006de4 <_dtoa_r+0x1518>
10006b30:	dc800117 	ldw	r18,4(sp)
10006b34:	8827883a 	mov	r19,r17
10006b38:	04000084 	movi	r16,2
10006b3c:	003c5b06 	br	10005cac <_dtoa_r+0x3e0>
10006b40:	d8800117 	ldw	r2,4(sp)
10006b44:	103ecf1e 	bne	r2,zero,10006684 <_dtoa_r+0xdb8>
10006b48:	00800434 	movhi	r2,16
10006b4c:	10bfffc4 	addi	r2,r2,-1
10006b50:	8884703a 	and	r2,r17,r2
10006b54:	103f7526 	beq	r2,zero,1000692c <_dtoa_r+0x1060>
10006b58:	003eca06 	br	10006684 <_dtoa_r+0xdb8>
10006b5c:	00800e0e 	bge	zero,r2,10006b98 <_dtoa_r+0x12cc>
10006b60:	a80b883a 	mov	r5,r21
10006b64:	01800044 	movi	r6,1
10006b68:	e009883a 	mov	r4,fp
10006b6c:	da000115 	stw	r8,4(sp)
10006b70:	00093f00 	call	100093f0 <__lshift>
10006b74:	900b883a 	mov	r5,r18
10006b78:	1009883a 	mov	r4,r2
10006b7c:	102b883a 	mov	r21,r2
10006b80:	000952c0 	call	1000952c <__mcmp>
10006b84:	da000117 	ldw	r8,4(sp)
10006b88:	0080d50e 	bge	zero,r2,10006ee0 <_dtoa_r+0x1614>
10006b8c:	42000e60 	cmpeqi	r8,r8,57
10006b90:	4000c31e 	bne	r8,zero,10006ea0 <_dtoa_r+0x15d4>
10006b94:	b2000c44 	addi	r8,r22,49
10006b98:	8029883a 	mov	r20,r16
10006b9c:	8a000005 	stb	r8,0(r17)
10006ba0:	9821883a 	mov	r16,r19
10006ba4:	003e4406 	br	100064b8 <_dtoa_r+0xbec>
10006ba8:	81400117 	ldw	r5,4(r16)
10006bac:	e009883a 	mov	r4,fp
10006bb0:	0008ca80 	call	10008ca8 <_Balloc>
10006bb4:	81800417 	ldw	r6,16(r16)
10006bb8:	81400304 	addi	r5,r16,12
10006bbc:	11000304 	addi	r4,r2,12
10006bc0:	31800084 	addi	r6,r6,2
10006bc4:	300c90ba 	slli	r6,r6,2
10006bc8:	1023883a 	mov	r17,r2
10006bcc:	00030480 	call	10003048 <memcpy>
10006bd0:	01800044 	movi	r6,1
10006bd4:	880b883a 	mov	r5,r17
10006bd8:	e009883a 	mov	r4,fp
10006bdc:	00093f00 	call	100093f0 <__lshift>
10006be0:	1027883a 	mov	r19,r2
10006be4:	003ebd06 	br	100066dc <_dtoa_r+0xe10>
10006be8:	dd400117 	ldw	r21,4(sp)
10006bec:	003cc906 	br	10005f14 <_dtoa_r+0x648>
10006bf0:	d8800517 	ldw	r2,20(sp)
10006bf4:	d8c00617 	ldw	r3,24(sp)
10006bf8:	10e7c83a 	sub	r19,r2,r3
10006bfc:	003db506 	br	100062d4 <_dtoa_r+0xa08>
10006c00:	40800e58 	cmpnei	r2,r8,57
10006c04:	1000a626 	beq	r2,zero,10006ea0 <_dtoa_r+0x15d4>
10006c08:	42000044 	addi	r8,r8,1
10006c0c:	003fe206 	br	10006b98 <_dtoa_r+0x12cc>
10006c10:	8029883a 	mov	r20,r16
10006c14:	9821883a 	mov	r16,r19
10006c18:	003e0f06 	br	10006458 <_dtoa_r+0xb8c>
10006c1c:	d9000c17 	ldw	r4,48(sp)
10006c20:	d9400d17 	ldw	r5,52(sp)
10006c24:	da401015 	stw	r9,64(sp)
10006c28:	000e41c0 	call	1000e41c <__muldf3>
10006c2c:	d9000e17 	ldw	r4,56(sp)
10006c30:	d8c00d15 	stw	r3,52(sp)
10006c34:	da401017 	ldw	r9,64(sp)
10006c38:	d8c00317 	ldw	r3,12(sp)
10006c3c:	d8800c15 	stw	r2,48(sp)
10006c40:	20800058 	cmpnei	r2,r4,1
10006c44:	1a400005 	stb	r9,0(r3)
10006c48:	1907883a 	add	r3,r3,r4
10006c4c:	1809883a 	mov	r4,r3
10006c50:	10001d26 	beq	r2,zero,10006cc8 <_dtoa_r+0x13fc>
10006c54:	8007883a 	mov	r3,r16
10006c58:	9005883a 	mov	r2,r18
10006c5c:	dc400e15 	stw	r17,56(sp)
10006c60:	2021883a 	mov	r16,r4
10006c64:	000d883a 	mov	r6,zero
10006c68:	01d00934 	movhi	r7,16420
10006c6c:	1009883a 	mov	r4,r2
10006c70:	180b883a 	mov	r5,r3
10006c74:	000e41c0 	call	1000e41c <__muldf3>
10006c78:	180b883a 	mov	r5,r3
10006c7c:	1009883a 	mov	r4,r2
10006c80:	1825883a 	mov	r18,r3
10006c84:	1023883a 	mov	r17,r2
10006c88:	000f4680 	call	1000f468 <__fixdfsi>
10006c8c:	1009883a 	mov	r4,r2
10006c90:	1027883a 	mov	r19,r2
10006c94:	000f4e80 	call	1000f4e8 <__floatsidf>
10006c98:	100d883a 	mov	r6,r2
10006c9c:	180f883a 	mov	r7,r3
10006ca0:	8809883a 	mov	r4,r17
10006ca4:	900b883a 	mov	r5,r18
10006ca8:	bdc00044 	addi	r23,r23,1
10006cac:	9cc00c04 	addi	r19,r19,48
10006cb0:	000eaa80 	call	1000eaa8 <__subdf3>
10006cb4:	bcffffc5 	stb	r19,-1(r23)
10006cb8:	bc3fea1e 	bne	r23,r16,10006c64 <_dtoa_r+0x1398>
10006cbc:	dc400e17 	ldw	r17,56(sp)
10006cc0:	1025883a 	mov	r18,r2
10006cc4:	1821883a 	mov	r16,r3
10006cc8:	d9000c17 	ldw	r4,48(sp)
10006ccc:	d9400d17 	ldw	r5,52(sp)
10006cd0:	000d883a 	mov	r6,zero
10006cd4:	01cff834 	movhi	r7,16352
10006cd8:	000cf740 	call	1000cf74 <__adddf3>
10006cdc:	100d883a 	mov	r6,r2
10006ce0:	180f883a 	mov	r7,r3
10006ce4:	9009883a 	mov	r4,r18
10006ce8:	800b883a 	mov	r5,r16
10006cec:	000e23c0 	call	1000e23c <__gedf2>
10006cf0:	00807516 	blt	zero,r2,10006ec8 <_dtoa_r+0x15fc>
10006cf4:	d9800c17 	ldw	r6,48(sp)
10006cf8:	d9c00d17 	ldw	r7,52(sp)
10006cfc:	0009883a 	mov	r4,zero
10006d00:	014ff834 	movhi	r5,16352
10006d04:	000eaa80 	call	1000eaa8 <__subdf3>
10006d08:	100d883a 	mov	r6,r2
10006d0c:	180f883a 	mov	r7,r3
10006d10:	9009883a 	mov	r4,r18
10006d14:	800b883a 	mov	r5,r16
10006d18:	000e32c0 	call	1000e32c <__ledf2>
10006d1c:	103cb70e 	bge	r2,zero,10005ffc <_dtoa_r+0x730>
10006d20:	00000106 	br	10006d28 <_dtoa_r+0x145c>
10006d24:	182f883a 	mov	r23,r3
10006d28:	b8bfffc7 	ldb	r2,-1(r23)
10006d2c:	b8ffffc4 	addi	r3,r23,-1
10006d30:	10800c20 	cmpeqi	r2,r2,48
10006d34:	103ffb1e 	bne	r2,zero,10006d24 <_dtoa_r+0x1458>
10006d38:	003c7306 	br	10005f08 <_dtoa_r+0x63c>
10006d3c:	d8c01217 	ldw	r3,72(sp)
10006d40:	d9000517 	ldw	r4,20(sp)
10006d44:	00800d84 	movi	r2,54
10006d48:	10c5c83a 	sub	r2,r2,r3
10006d4c:	a0a9883a 	add	r20,r20,r2
10006d50:	2085883a 	add	r2,r4,r2
10006d54:	2027883a 	mov	r19,r4
10006d58:	dc800817 	ldw	r18,32(sp)
10006d5c:	d8800515 	stw	r2,20(sp)
10006d60:	003d5c06 	br	100062d4 <_dtoa_r+0xa08>
10006d64:	d8800617 	ldw	r2,24(sp)
10006d68:	103f4726 	beq	r2,zero,10006a88 <_dtoa_r+0x11bc>
10006d6c:	ddc00b17 	ldw	r23,44(sp)
10006d70:	05fca20e 	bge	zero,r23,10005ffc <_dtoa_r+0x730>
10006d74:	980b883a 	mov	r5,r19
10006d78:	000d883a 	mov	r6,zero
10006d7c:	01d00934 	movhi	r7,16420
10006d80:	9009883a 	mov	r4,r18
10006d84:	000e41c0 	call	1000e41c <__muldf3>
10006d88:	81000044 	addi	r4,r16,1
10006d8c:	1025883a 	mov	r18,r2
10006d90:	1827883a 	mov	r19,r3
10006d94:	000f4e80 	call	1000f4e8 <__floatsidf>
10006d98:	900d883a 	mov	r6,r18
10006d9c:	980f883a 	mov	r7,r19
10006da0:	1009883a 	mov	r4,r2
10006da4:	180b883a 	mov	r5,r3
10006da8:	000e41c0 	call	1000e41c <__muldf3>
10006dac:	000d883a 	mov	r6,zero
10006db0:	01d00734 	movhi	r7,16412
10006db4:	1009883a 	mov	r4,r2
10006db8:	180b883a 	mov	r5,r3
10006dbc:	000cf740 	call	1000cf74 <__adddf3>
10006dc0:	d8800c15 	stw	r2,48(sp)
10006dc4:	d8800417 	ldw	r2,16(sp)
10006dc8:	ddc00e15 	stw	r23,56(sp)
10006dcc:	10bfffc4 	addi	r2,r2,-1
10006dd0:	d8800f15 	stw	r2,60(sp)
10006dd4:	00bf3034 	movhi	r2,64704
10006dd8:	1885883a 	add	r2,r3,r2
10006ddc:	d8800d15 	stw	r2,52(sp)
10006de0:	003bd006 	br	10005d24 <_dtoa_r+0x458>
10006de4:	d8800417 	ldw	r2,16(sp)
10006de8:	d9000117 	ldw	r4,4(sp)
10006dec:	880b883a 	mov	r5,r17
10006df0:	00afc83a 	sub	r23,zero,r2
10006df4:	b88003cc 	andi	r2,r23,15
10006df8:	100690fa 	slli	r3,r2,3
10006dfc:	00840074 	movhi	r2,4097
10006e00:	108a3b04 	addi	r2,r2,10476
10006e04:	10c5883a 	add	r2,r2,r3
10006e08:	11800017 	ldw	r6,0(r2)
10006e0c:	11c00117 	ldw	r7,4(r2)
10006e10:	b82fd13a 	srai	r23,r23,4
10006e14:	000e41c0 	call	1000e41c <__muldf3>
10006e18:	1025883a 	mov	r18,r2
10006e1c:	1827883a 	mov	r19,r3
10006e20:	b8004a26 	beq	r23,zero,10006f4c <_dtoa_r+0x1680>
10006e24:	02040074 	movhi	r8,4097
10006e28:	04000084 	movi	r16,2
10006e2c:	420a3104 	addi	r8,r8,10436
10006e30:	dc400c15 	stw	r17,48(sp)
10006e34:	000f883a 	mov	r7,zero
10006e38:	8023883a 	mov	r17,r16
10006e3c:	4021883a 	mov	r16,r8
10006e40:	b980004c 	andi	r6,r23,1
10006e44:	1009883a 	mov	r4,r2
10006e48:	b82fd07a 	srai	r23,r23,1
10006e4c:	180b883a 	mov	r5,r3
10006e50:	30000526 	beq	r6,zero,10006e68 <_dtoa_r+0x159c>
10006e54:	81c00117 	ldw	r7,4(r16)
10006e58:	81800017 	ldw	r6,0(r16)
10006e5c:	8c400044 	addi	r17,r17,1
10006e60:	000e41c0 	call	1000e41c <__muldf3>
10006e64:	01c00044 	movi	r7,1
10006e68:	84000204 	addi	r16,r16,8
10006e6c:	b83ff41e 	bne	r23,zero,10006e40 <_dtoa_r+0x1574>
10006e70:	39c03fcc 	andi	r7,r7,255
10006e74:	8821883a 	mov	r16,r17
10006e78:	dc400c17 	ldw	r17,48(sp)
10006e7c:	383b8b26 	beq	r7,zero,10005cac <_dtoa_r+0x3e0>
10006e80:	1025883a 	mov	r18,r2
10006e84:	1827883a 	mov	r19,r3
10006e88:	003b8806 	br	10005cac <_dtoa_r+0x3e0>
10006e8c:	d8800417 	ldw	r2,16(sp)
10006e90:	02000c44 	movi	r8,49
10006e94:	10800044 	addi	r2,r2,1
10006e98:	d8800415 	stw	r2,16(sp)
10006e9c:	003cf606 	br	10006278 <_dtoa_r+0x9ac>
10006ea0:	00800e44 	movi	r2,57
10006ea4:	8029883a 	mov	r20,r16
10006ea8:	88800005 	stb	r2,0(r17)
10006eac:	9821883a 	mov	r16,r19
10006eb0:	00c00e44 	movi	r3,57
10006eb4:	d9400317 	ldw	r5,12(sp)
10006eb8:	003d7706 	br	10006498 <_dtoa_r+0xbcc>
10006ebc:	0025883a 	mov	r18,zero
10006ec0:	0021883a 	mov	r16,zero
10006ec4:	003e6706 	br	10006864 <_dtoa_r+0xf98>
10006ec8:	d8800f17 	ldw	r2,60(sp)
10006ecc:	ba3fffc3 	ldbu	r8,-1(r23)
10006ed0:	d9000317 	ldw	r4,12(sp)
10006ed4:	10800044 	addi	r2,r2,1
10006ed8:	d8800415 	stw	r2,16(sp)
10006edc:	003cdf06 	br	1000625c <_dtoa_r+0x990>
10006ee0:	103f2d1e 	bne	r2,zero,10006b98 <_dtoa_r+0x12cc>
10006ee4:	4080004c 	andi	r2,r8,1
10006ee8:	103f281e 	bne	r2,zero,10006b8c <_dtoa_r+0x12c0>
10006eec:	003f2a06 	br	10006b98 <_dtoa_r+0x12cc>
10006ef0:	d8800f17 	ldw	r2,60(sp)
10006ef4:	8811883a 	mov	r8,r17
10006ef8:	d9000317 	ldw	r4,12(sp)
10006efc:	10800044 	addi	r2,r2,1
10006f00:	d8800415 	stw	r2,16(sp)
10006f04:	003cd506 	br	1000625c <_dtoa_r+0x990>
10006f08:	40800e60 	cmpeqi	r2,r8,57
10006f0c:	8dc00044 	addi	r23,r17,1
10006f10:	103fe31e 	bne	r2,zero,10006ea0 <_dtoa_r+0x15d4>
10006f14:	053f1f16 	blt	zero,r20,10006b94 <_dtoa_r+0x12c8>
10006f18:	003f1f06 	br	10006b98 <_dtoa_r+0x12cc>
10006f1c:	d8800217 	ldw	r2,8(sp)
10006f20:	108000c8 	cmpgei	r2,r2,3
10006f24:	103e9326 	beq	r2,zero,10006974 <_dtoa_r+0x10a8>
10006f28:	d8800b17 	ldw	r2,44(sp)
10006f2c:	dd000415 	stw	r20,16(sp)
10006f30:	d8800615 	stw	r2,24(sp)
10006f34:	003e3f06 	br	10006834 <_dtoa_r+0xf68>
10006f38:	d8800217 	ldw	r2,8(sp)
10006f3c:	108000c8 	cmpgei	r2,r2,3
10006f40:	103ff91e 	bne	r2,zero,10006f28 <_dtoa_r+0x165c>
10006f44:	d8800b17 	ldw	r2,44(sp)
10006f48:	003de006 	br	100066cc <_dtoa_r+0xe00>
10006f4c:	04000084 	movi	r16,2
10006f50:	003b5606 	br	10005cac <_dtoa_r+0x3e0>
10006f54:	d8800f17 	ldw	r2,60(sp)
10006f58:	d9000317 	ldw	r4,12(sp)
10006f5c:	10800044 	addi	r2,r2,1
10006f60:	d8800415 	stw	r2,16(sp)
10006f64:	003cbd06 	br	1000625c <_dtoa_r+0x990>
10006f68:	00840074 	movhi	r2,4097
10006f6c:	108a2104 	addi	r2,r2,10372
10006f70:	d8800315 	stw	r2,12(sp)
10006f74:	003a8706 	br	10005994 <_dtoa_r+0xc8>
10006f78:	000b883a 	mov	r5,zero
10006f7c:	003b1b06 	br	10005bec <_dtoa_r+0x320>
10006f80:	18c00120 	cmpeqi	r3,r3,4
10006f84:	183d0f1e 	bne	r3,zero,100063c4 <_dtoa_r+0xaf8>
10006f88:	00c00f04 	movi	r3,60
10006f8c:	1885c83a 	sub	r2,r3,r2
10006f90:	003d0706 	br	100063b0 <_dtoa_r+0xae4>

10006f94 <__sflush_r>:
10006f94:	2880030b 	ldhu	r2,12(r5)
10006f98:	defffb04 	addi	sp,sp,-20
10006f9c:	dcc00315 	stw	r19,12(sp)
10006fa0:	dc000015 	stw	r16,0(sp)
10006fa4:	dfc00415 	stw	ra,16(sp)
10006fa8:	dc800215 	stw	r18,8(sp)
10006fac:	dc400115 	stw	r17,4(sp)
10006fb0:	10c0020c 	andi	r3,r2,8
10006fb4:	2821883a 	mov	r16,r5
10006fb8:	2027883a 	mov	r19,r4
10006fbc:	18003f1e 	bne	r3,zero,100070bc <__sflush_r+0x128>
10006fc0:	28c00117 	ldw	r3,4(r5)
10006fc4:	10820014 	ori	r2,r2,2048
10006fc8:	2880030d 	sth	r2,12(r5)
10006fcc:	00c0550e 	bge	zero,r3,10007124 <__sflush_r+0x190>
10006fd0:	82000a17 	ldw	r8,40(r16)
10006fd4:	40003126 	beq	r8,zero,1000709c <__sflush_r+0x108>
10006fd8:	9c400017 	ldw	r17,0(r19)
10006fdc:	1104000c 	andi	r4,r2,4096
10006fe0:	98000015 	stw	zero,0(r19)
10006fe4:	1007883a 	mov	r3,r2
10006fe8:	81400717 	ldw	r5,28(r16)
10006fec:	2000521e 	bne	r4,zero,10007138 <__sflush_r+0x1a4>
10006ff0:	01c00044 	movi	r7,1
10006ff4:	000d883a 	mov	r6,zero
10006ff8:	9809883a 	mov	r4,r19
10006ffc:	403ee83a 	callr	r8
10007000:	10ffffd8 	cmpnei	r3,r2,-1
10007004:	18005826 	beq	r3,zero,10007168 <__sflush_r+0x1d4>
10007008:	80c0030b 	ldhu	r3,12(r16)
1000700c:	82000a17 	ldw	r8,40(r16)
10007010:	81400717 	ldw	r5,28(r16)
10007014:	18c0010c 	andi	r3,r3,4
10007018:	18000626 	beq	r3,zero,10007034 <__sflush_r+0xa0>
1000701c:	81000117 	ldw	r4,4(r16)
10007020:	80c00c17 	ldw	r3,48(r16)
10007024:	1105c83a 	sub	r2,r2,r4
10007028:	18000226 	beq	r3,zero,10007034 <__sflush_r+0xa0>
1000702c:	80c00f17 	ldw	r3,60(r16)
10007030:	10c5c83a 	sub	r2,r2,r3
10007034:	000f883a 	mov	r7,zero
10007038:	100d883a 	mov	r6,r2
1000703c:	9809883a 	mov	r4,r19
10007040:	403ee83a 	callr	r8
10007044:	10ffffd8 	cmpnei	r3,r2,-1
10007048:	18003d1e 	bne	r3,zero,10007140 <__sflush_r+0x1ac>
1000704c:	99000017 	ldw	r4,0(r19)
10007050:	80c0030b 	ldhu	r3,12(r16)
10007054:	20004e26 	beq	r4,zero,10007190 <__sflush_r+0x1fc>
10007058:	21400760 	cmpeqi	r5,r4,29
1000705c:	2800021e 	bne	r5,zero,10007068 <__sflush_r+0xd4>
10007060:	210005a0 	cmpeqi	r4,r4,22
10007064:	20002c26 	beq	r4,zero,10007118 <__sflush_r+0x184>
10007068:	80800417 	ldw	r2,16(r16)
1000706c:	18fdffcc 	andi	r3,r3,63487
10007070:	80c0030d 	sth	r3,12(r16)
10007074:	80000115 	stw	zero,4(r16)
10007078:	80800015 	stw	r2,0(r16)
1000707c:	81400c17 	ldw	r5,48(r16)
10007080:	9c400015 	stw	r17,0(r19)
10007084:	28000526 	beq	r5,zero,1000709c <__sflush_r+0x108>
10007088:	80801004 	addi	r2,r16,64
1000708c:	28800226 	beq	r5,r2,10007098 <__sflush_r+0x104>
10007090:	9809883a 	mov	r4,r19
10007094:	00076a40 	call	100076a4 <_free_r>
10007098:	80000c15 	stw	zero,48(r16)
1000709c:	0005883a 	mov	r2,zero
100070a0:	dfc00417 	ldw	ra,16(sp)
100070a4:	dcc00317 	ldw	r19,12(sp)
100070a8:	dc800217 	ldw	r18,8(sp)
100070ac:	dc400117 	ldw	r17,4(sp)
100070b0:	dc000017 	ldw	r16,0(sp)
100070b4:	dec00504 	addi	sp,sp,20
100070b8:	f800283a 	ret
100070bc:	2c800417 	ldw	r18,16(r5)
100070c0:	903ff626 	beq	r18,zero,1000709c <__sflush_r+0x108>
100070c4:	2c400017 	ldw	r17,0(r5)
100070c8:	108000cc 	andi	r2,r2,3
100070cc:	2c800015 	stw	r18,0(r5)
100070d0:	8ca3c83a 	sub	r17,r17,r18
100070d4:	1000161e 	bne	r2,zero,10007130 <__sflush_r+0x19c>
100070d8:	28800517 	ldw	r2,20(r5)
100070dc:	80800215 	stw	r2,8(r16)
100070e0:	04400316 	blt	zero,r17,100070f0 <__sflush_r+0x15c>
100070e4:	003fed06 	br	1000709c <__sflush_r+0x108>
100070e8:	90a5883a 	add	r18,r18,r2
100070ec:	047feb0e 	bge	zero,r17,1000709c <__sflush_r+0x108>
100070f0:	80800917 	ldw	r2,36(r16)
100070f4:	81400717 	ldw	r5,28(r16)
100070f8:	880f883a 	mov	r7,r17
100070fc:	900d883a 	mov	r6,r18
10007100:	9809883a 	mov	r4,r19
10007104:	103ee83a 	callr	r2
10007108:	88a3c83a 	sub	r17,r17,r2
1000710c:	00bff616 	blt	zero,r2,100070e8 <__sflush_r+0x154>
10007110:	80c0030b 	ldhu	r3,12(r16)
10007114:	00bfffc4 	movi	r2,-1
10007118:	18c01014 	ori	r3,r3,64
1000711c:	80c0030d 	sth	r3,12(r16)
10007120:	003fdf06 	br	100070a0 <__sflush_r+0x10c>
10007124:	28c00f17 	ldw	r3,60(r5)
10007128:	00ffa916 	blt	zero,r3,10006fd0 <__sflush_r+0x3c>
1000712c:	003fdb06 	br	1000709c <__sflush_r+0x108>
10007130:	0005883a 	mov	r2,zero
10007134:	003fe906 	br	100070dc <__sflush_r+0x148>
10007138:	80801417 	ldw	r2,80(r16)
1000713c:	003fb506 	br	10007014 <__sflush_r+0x80>
10007140:	80c0030b 	ldhu	r3,12(r16)
10007144:	81000417 	ldw	r4,16(r16)
10007148:	80000115 	stw	zero,4(r16)
1000714c:	197dffcc 	andi	r5,r3,63487
10007150:	8140030d 	sth	r5,12(r16)
10007154:	81000015 	stw	r4,0(r16)
10007158:	18c4000c 	andi	r3,r3,4096
1000715c:	183fc726 	beq	r3,zero,1000707c <__sflush_r+0xe8>
10007160:	80801415 	stw	r2,80(r16)
10007164:	003fc506 	br	1000707c <__sflush_r+0xe8>
10007168:	98c00017 	ldw	r3,0(r19)
1000716c:	183fa626 	beq	r3,zero,10007008 <__sflush_r+0x74>
10007170:	19000760 	cmpeqi	r4,r3,29
10007174:	20000e1e 	bne	r4,zero,100071b0 <__sflush_r+0x21c>
10007178:	18c00598 	cmpnei	r3,r3,22
1000717c:	18000c26 	beq	r3,zero,100071b0 <__sflush_r+0x21c>
10007180:	80c0030b 	ldhu	r3,12(r16)
10007184:	18c01014 	ori	r3,r3,64
10007188:	80c0030d 	sth	r3,12(r16)
1000718c:	003fc406 	br	100070a0 <__sflush_r+0x10c>
10007190:	81000417 	ldw	r4,16(r16)
10007194:	197dffcc 	andi	r5,r3,63487
10007198:	8140030d 	sth	r5,12(r16)
1000719c:	80000115 	stw	zero,4(r16)
100071a0:	81000015 	stw	r4,0(r16)
100071a4:	18c4000c 	andi	r3,r3,4096
100071a8:	183fb426 	beq	r3,zero,1000707c <__sflush_r+0xe8>
100071ac:	003fec06 	br	10007160 <__sflush_r+0x1cc>
100071b0:	9c400015 	stw	r17,0(r19)
100071b4:	0005883a 	mov	r2,zero
100071b8:	003fb906 	br	100070a0 <__sflush_r+0x10c>

100071bc <_fflush_r>:
100071bc:	defffd04 	addi	sp,sp,-12
100071c0:	dc000115 	stw	r16,4(sp)
100071c4:	dfc00215 	stw	ra,8(sp)
100071c8:	2021883a 	mov	r16,r4
100071cc:	20000226 	beq	r4,zero,100071d8 <_fflush_r+0x1c>
100071d0:	20800e17 	ldw	r2,56(r4)
100071d4:	10000726 	beq	r2,zero,100071f4 <_fflush_r+0x38>
100071d8:	2880030f 	ldh	r2,12(r5)
100071dc:	10000a1e 	bne	r2,zero,10007208 <_fflush_r+0x4c>
100071e0:	0005883a 	mov	r2,zero
100071e4:	dfc00217 	ldw	ra,8(sp)
100071e8:	dc000117 	ldw	r16,4(sp)
100071ec:	dec00304 	addi	sp,sp,12
100071f0:	f800283a 	ret
100071f4:	d9400015 	stw	r5,0(sp)
100071f8:	00075400 	call	10007540 <__sinit>
100071fc:	d9400017 	ldw	r5,0(sp)
10007200:	2880030f 	ldh	r2,12(r5)
10007204:	103ff626 	beq	r2,zero,100071e0 <_fflush_r+0x24>
10007208:	8009883a 	mov	r4,r16
1000720c:	dfc00217 	ldw	ra,8(sp)
10007210:	dc000117 	ldw	r16,4(sp)
10007214:	dec00304 	addi	sp,sp,12
10007218:	0006f941 	jmpi	10006f94 <__sflush_r>

1000721c <fflush>:
1000721c:	200b883a 	mov	r5,r4
10007220:	20000326 	beq	r4,zero,10007230 <fflush+0x14>
10007224:	00840074 	movhi	r2,4097
10007228:	1113e117 	ldw	r4,20356(r2)
1000722c:	00071bc1 	jmpi	100071bc <_fflush_r>
10007230:	00840074 	movhi	r2,4097
10007234:	1113e017 	ldw	r4,20352(r2)
10007238:	01440034 	movhi	r5,4096
1000723c:	295c6f04 	addi	r5,r5,29116
10007240:	0007f081 	jmpi	10007f08 <_fwalk_reent>

10007244 <__fp_lock>:
10007244:	0005883a 	mov	r2,zero
10007248:	f800283a 	ret

1000724c <_cleanup_r>:
1000724c:	01440074 	movhi	r5,4097
10007250:	296e8b04 	addi	r5,r5,-17876
10007254:	0007f081 	jmpi	10007f08 <_fwalk_reent>

10007258 <__sinit.part.0>:
10007258:	00c40034 	movhi	r3,4096
1000725c:	20800117 	ldw	r2,4(r4)
10007260:	18dc9304 	addi	r3,r3,29260
10007264:	20c00f15 	stw	r3,60(r4)
10007268:	2140bb04 	addi	r5,r4,748
1000726c:	00c000c4 	movi	r3,3
10007270:	20c0b915 	stw	r3,740(r4)
10007274:	2140ba15 	stw	r5,744(r4)
10007278:	2000b815 	stw	zero,736(r4)
1000727c:	10001705 	stb	zero,92(r2)
10007280:	10001745 	stb	zero,93(r2)
10007284:	10001785 	stb	zero,94(r2)
10007288:	100017c5 	stb	zero,95(r2)
1000728c:	10001805 	stb	zero,96(r2)
10007290:	10001845 	stb	zero,97(r2)
10007294:	10001885 	stb	zero,98(r2)
10007298:	100018c5 	stb	zero,99(r2)
1000729c:	00c00104 	movi	r3,4
100072a0:	10c00315 	stw	r3,12(r2)
100072a4:	02040074 	movhi	r8,4097
100072a8:	20c00217 	ldw	r3,8(r4)
100072ac:	01c40074 	movhi	r7,4097
100072b0:	01840074 	movhi	r6,4097
100072b4:	01440074 	movhi	r5,4097
100072b8:	42289a04 	addi	r8,r8,-23960
100072bc:	39e8b104 	addi	r7,r7,-23868
100072c0:	31a8d104 	addi	r6,r6,-23740
100072c4:	2968e804 	addi	r5,r5,-23648
100072c8:	02400074 	movhi	r9,1
100072cc:	10001915 	stw	zero,100(r2)
100072d0:	10000015 	stw	zero,0(r2)
100072d4:	10000115 	stw	zero,4(r2)
100072d8:	10000215 	stw	zero,8(r2)
100072dc:	10000415 	stw	zero,16(r2)
100072e0:	10000515 	stw	zero,20(r2)
100072e4:	10000615 	stw	zero,24(r2)
100072e8:	10800715 	stw	r2,28(r2)
100072ec:	12000815 	stw	r8,32(r2)
100072f0:	11c00915 	stw	r7,36(r2)
100072f4:	11800a15 	stw	r6,40(r2)
100072f8:	11400b15 	stw	r5,44(r2)
100072fc:	4a400284 	addi	r9,r9,10
10007300:	1a400315 	stw	r9,12(r3)
10007304:	18001915 	stw	zero,100(r3)
10007308:	18000015 	stw	zero,0(r3)
1000730c:	18000115 	stw	zero,4(r3)
10007310:	18000215 	stw	zero,8(r3)
10007314:	18000415 	stw	zero,16(r3)
10007318:	18001705 	stb	zero,92(r3)
1000731c:	18001745 	stb	zero,93(r3)
10007320:	18001785 	stb	zero,94(r3)
10007324:	180017c5 	stb	zero,95(r3)
10007328:	18001805 	stb	zero,96(r3)
1000732c:	18001845 	stb	zero,97(r3)
10007330:	18001885 	stb	zero,98(r3)
10007334:	180018c5 	stb	zero,99(r3)
10007338:	20800317 	ldw	r2,12(r4)
1000733c:	024000b4 	movhi	r9,2
10007340:	18000515 	stw	zero,20(r3)
10007344:	18000615 	stw	zero,24(r3)
10007348:	18c00715 	stw	r3,28(r3)
1000734c:	1a000815 	stw	r8,32(r3)
10007350:	19c00915 	stw	r7,36(r3)
10007354:	19800a15 	stw	r6,40(r3)
10007358:	19400b15 	stw	r5,44(r3)
1000735c:	4a400484 	addi	r9,r9,18
10007360:	10001915 	stw	zero,100(r2)
10007364:	10000015 	stw	zero,0(r2)
10007368:	10000115 	stw	zero,4(r2)
1000736c:	10000215 	stw	zero,8(r2)
10007370:	12400315 	stw	r9,12(r2)
10007374:	10000415 	stw	zero,16(r2)
10007378:	10000515 	stw	zero,20(r2)
1000737c:	10000615 	stw	zero,24(r2)
10007380:	10001705 	stb	zero,92(r2)
10007384:	10001745 	stb	zero,93(r2)
10007388:	10001785 	stb	zero,94(r2)
1000738c:	100017c5 	stb	zero,95(r2)
10007390:	10001805 	stb	zero,96(r2)
10007394:	10001845 	stb	zero,97(r2)
10007398:	10001885 	stb	zero,98(r2)
1000739c:	100018c5 	stb	zero,99(r2)
100073a0:	10800715 	stw	r2,28(r2)
100073a4:	12000815 	stw	r8,32(r2)
100073a8:	11c00915 	stw	r7,36(r2)
100073ac:	11800a15 	stw	r6,40(r2)
100073b0:	11400b15 	stw	r5,44(r2)
100073b4:	00800044 	movi	r2,1
100073b8:	20800e15 	stw	r2,56(r4)
100073bc:	f800283a 	ret

100073c0 <__fp_unlock>:
100073c0:	0005883a 	mov	r2,zero
100073c4:	f800283a 	ret

100073c8 <__sfmoreglue>:
100073c8:	defffc04 	addi	sp,sp,-16
100073cc:	dc400115 	stw	r17,4(sp)
100073d0:	2c7fffc4 	addi	r17,r5,-1
100073d4:	8c401a24 	muli	r17,r17,104
100073d8:	dc800215 	stw	r18,8(sp)
100073dc:	2825883a 	mov	r18,r5
100073e0:	89401d04 	addi	r5,r17,116
100073e4:	dc000015 	stw	r16,0(sp)
100073e8:	dfc00315 	stw	ra,12(sp)
100073ec:	00081b00 	call	100081b0 <_malloc_r>
100073f0:	1021883a 	mov	r16,r2
100073f4:	10000726 	beq	r2,zero,10007414 <__sfmoreglue+0x4c>
100073f8:	11000304 	addi	r4,r2,12
100073fc:	10000015 	stw	zero,0(r2)
10007400:	14800115 	stw	r18,4(r2)
10007404:	11000215 	stw	r4,8(r2)
10007408:	89801a04 	addi	r6,r17,104
1000740c:	000b883a 	mov	r5,zero
10007410:	0008bb80 	call	10008bb8 <memset>
10007414:	8005883a 	mov	r2,r16
10007418:	dfc00317 	ldw	ra,12(sp)
1000741c:	dc800217 	ldw	r18,8(sp)
10007420:	dc400117 	ldw	r17,4(sp)
10007424:	dc000017 	ldw	r16,0(sp)
10007428:	dec00404 	addi	sp,sp,16
1000742c:	f800283a 	ret

10007430 <__sfp>:
10007430:	defffd04 	addi	sp,sp,-12
10007434:	00840074 	movhi	r2,4097
10007438:	dc000015 	stw	r16,0(sp)
1000743c:	1413e017 	ldw	r16,20352(r2)
10007440:	dc400115 	stw	r17,4(sp)
10007444:	dfc00215 	stw	ra,8(sp)
10007448:	80800e17 	ldw	r2,56(r16)
1000744c:	2023883a 	mov	r17,r4
10007450:	10002b26 	beq	r2,zero,10007500 <__sfp+0xd0>
10007454:	8400b804 	addi	r16,r16,736
10007458:	80c00117 	ldw	r3,4(r16)
1000745c:	80800217 	ldw	r2,8(r16)
10007460:	18ffffc4 	addi	r3,r3,-1
10007464:	1800050e 	bge	r3,zero,1000747c <__sfp+0x4c>
10007468:	00002106 	br	100074f0 <__sfp+0xc0>
1000746c:	18ffffc4 	addi	r3,r3,-1
10007470:	193fffd8 	cmpnei	r4,r3,-1
10007474:	10801a04 	addi	r2,r2,104
10007478:	20001d26 	beq	r4,zero,100074f0 <__sfp+0xc0>
1000747c:	1100030f 	ldh	r4,12(r2)
10007480:	203ffa1e 	bne	r4,zero,1000746c <__sfp+0x3c>
10007484:	00fffff4 	movhi	r3,65535
10007488:	18c00044 	addi	r3,r3,1
1000748c:	10001915 	stw	zero,100(r2)
10007490:	10000015 	stw	zero,0(r2)
10007494:	10000115 	stw	zero,4(r2)
10007498:	10000215 	stw	zero,8(r2)
1000749c:	10c00315 	stw	r3,12(r2)
100074a0:	10000415 	stw	zero,16(r2)
100074a4:	10000515 	stw	zero,20(r2)
100074a8:	10000615 	stw	zero,24(r2)
100074ac:	10001705 	stb	zero,92(r2)
100074b0:	10001745 	stb	zero,93(r2)
100074b4:	10001785 	stb	zero,94(r2)
100074b8:	100017c5 	stb	zero,95(r2)
100074bc:	10001805 	stb	zero,96(r2)
100074c0:	10001845 	stb	zero,97(r2)
100074c4:	10001885 	stb	zero,98(r2)
100074c8:	100018c5 	stb	zero,99(r2)
100074cc:	10000c15 	stw	zero,48(r2)
100074d0:	10000d15 	stw	zero,52(r2)
100074d4:	10001115 	stw	zero,68(r2)
100074d8:	10001215 	stw	zero,72(r2)
100074dc:	dfc00217 	ldw	ra,8(sp)
100074e0:	dc400117 	ldw	r17,4(sp)
100074e4:	dc000017 	ldw	r16,0(sp)
100074e8:	dec00304 	addi	sp,sp,12
100074ec:	f800283a 	ret
100074f0:	80800017 	ldw	r2,0(r16)
100074f4:	10000526 	beq	r2,zero,1000750c <__sfp+0xdc>
100074f8:	1021883a 	mov	r16,r2
100074fc:	003fd606 	br	10007458 <__sfp+0x28>
10007500:	8009883a 	mov	r4,r16
10007504:	00072580 	call	10007258 <__sinit.part.0>
10007508:	003fd206 	br	10007454 <__sfp+0x24>
1000750c:	01400104 	movi	r5,4
10007510:	8809883a 	mov	r4,r17
10007514:	00073c80 	call	100073c8 <__sfmoreglue>
10007518:	80800015 	stw	r2,0(r16)
1000751c:	103ff61e 	bne	r2,zero,100074f8 <__sfp+0xc8>
10007520:	00c00304 	movi	r3,12
10007524:	88c00015 	stw	r3,0(r17)
10007528:	003fec06 	br	100074dc <__sfp+0xac>

1000752c <_cleanup>:
1000752c:	00840074 	movhi	r2,4097
10007530:	1113e017 	ldw	r4,20352(r2)
10007534:	01440074 	movhi	r5,4097
10007538:	296e8b04 	addi	r5,r5,-17876
1000753c:	0007f081 	jmpi	10007f08 <_fwalk_reent>

10007540 <__sinit>:
10007540:	20800e17 	ldw	r2,56(r4)
10007544:	10000126 	beq	r2,zero,1000754c <__sinit+0xc>
10007548:	f800283a 	ret
1000754c:	00072581 	jmpi	10007258 <__sinit.part.0>

10007550 <__sfp_lock_acquire>:
10007550:	f800283a 	ret

10007554 <__sfp_lock_release>:
10007554:	f800283a 	ret

10007558 <__sinit_lock_acquire>:
10007558:	f800283a 	ret

1000755c <__sinit_lock_release>:
1000755c:	f800283a 	ret

10007560 <__fp_lock_all>:
10007560:	00840074 	movhi	r2,4097
10007564:	1113e117 	ldw	r4,20356(r2)
10007568:	01440034 	movhi	r5,4096
1000756c:	295c9104 	addi	r5,r5,29252
10007570:	0007e641 	jmpi	10007e64 <_fwalk>

10007574 <__fp_unlock_all>:
10007574:	00840074 	movhi	r2,4097
10007578:	1113e117 	ldw	r4,20356(r2)
1000757c:	01440034 	movhi	r5,4096
10007580:	295cf004 	addi	r5,r5,29632
10007584:	0007e641 	jmpi	10007e64 <_fwalk>

10007588 <_malloc_trim_r>:
10007588:	defffb04 	addi	sp,sp,-20
1000758c:	dcc00315 	stw	r19,12(sp)
10007590:	04c40074 	movhi	r19,4097
10007594:	dc800215 	stw	r18,8(sp)
10007598:	dc400115 	stw	r17,4(sp)
1000759c:	dc000015 	stw	r16,0(sp)
100075a0:	dfc00415 	stw	ra,16(sp)
100075a4:	2821883a 	mov	r16,r5
100075a8:	9cce0004 	addi	r19,r19,14336
100075ac:	2025883a 	mov	r18,r4
100075b0:	000fc1c0 	call	1000fc1c <__malloc_lock>
100075b4:	98800217 	ldw	r2,8(r19)
100075b8:	14400117 	ldw	r17,4(r2)
100075bc:	00bfff04 	movi	r2,-4
100075c0:	88a2703a 	and	r17,r17,r2
100075c4:	8c21c83a 	sub	r16,r17,r16
100075c8:	8403fbc4 	addi	r16,r16,4079
100075cc:	8020d33a 	srli	r16,r16,12
100075d0:	843fffc4 	addi	r16,r16,-1
100075d4:	8020933a 	slli	r16,r16,12
100075d8:	80840008 	cmpgei	r2,r16,4096
100075dc:	10000626 	beq	r2,zero,100075f8 <_malloc_trim_r+0x70>
100075e0:	000b883a 	mov	r5,zero
100075e4:	9009883a 	mov	r4,r18
100075e8:	000a2100 	call	1000a210 <_sbrk_r>
100075ec:	98c00217 	ldw	r3,8(r19)
100075f0:	1c47883a 	add	r3,r3,r17
100075f4:	10c00a26 	beq	r2,r3,10007620 <_malloc_trim_r+0x98>
100075f8:	9009883a 	mov	r4,r18
100075fc:	000fc400 	call	1000fc40 <__malloc_unlock>
10007600:	0005883a 	mov	r2,zero
10007604:	dfc00417 	ldw	ra,16(sp)
10007608:	dcc00317 	ldw	r19,12(sp)
1000760c:	dc800217 	ldw	r18,8(sp)
10007610:	dc400117 	ldw	r17,4(sp)
10007614:	dc000017 	ldw	r16,0(sp)
10007618:	dec00504 	addi	sp,sp,20
1000761c:	f800283a 	ret
10007620:	040bc83a 	sub	r5,zero,r16
10007624:	9009883a 	mov	r4,r18
10007628:	000a2100 	call	1000a210 <_sbrk_r>
1000762c:	10bfffd8 	cmpnei	r2,r2,-1
10007630:	10000d26 	beq	r2,zero,10007668 <_malloc_trim_r+0xe0>
10007634:	00840074 	movhi	r2,4097
10007638:	109c8217 	ldw	r2,29192(r2)
1000763c:	98c00217 	ldw	r3,8(r19)
10007640:	8c23c83a 	sub	r17,r17,r16
10007644:	8c400054 	ori	r17,r17,1
10007648:	1421c83a 	sub	r16,r2,r16
1000764c:	1c400115 	stw	r17,4(r3)
10007650:	00840074 	movhi	r2,4097
10007654:	9009883a 	mov	r4,r18
10007658:	141c8215 	stw	r16,29192(r2)
1000765c:	000fc400 	call	1000fc40 <__malloc_unlock>
10007660:	00800044 	movi	r2,1
10007664:	003fe706 	br	10007604 <_malloc_trim_r+0x7c>
10007668:	000b883a 	mov	r5,zero
1000766c:	9009883a 	mov	r4,r18
10007670:	000a2100 	call	1000a210 <_sbrk_r>
10007674:	99000217 	ldw	r4,8(r19)
10007678:	1107c83a 	sub	r3,r2,r4
1000767c:	19400410 	cmplti	r5,r3,16
10007680:	283fdd1e 	bne	r5,zero,100075f8 <_malloc_trim_r+0x70>
10007684:	01440074 	movhi	r5,4097
10007688:	2953e217 	ldw	r5,20360(r5)
1000768c:	18c00054 	ori	r3,r3,1
10007690:	20c00115 	stw	r3,4(r4)
10007694:	1145c83a 	sub	r2,r2,r5
10007698:	01440074 	movhi	r5,4097
1000769c:	289c8215 	stw	r2,29192(r5)
100076a0:	003fd506 	br	100075f8 <_malloc_trim_r+0x70>

100076a4 <_free_r>:
100076a4:	28004f26 	beq	r5,zero,100077e4 <_free_r+0x140>
100076a8:	defffd04 	addi	sp,sp,-12
100076ac:	dc400115 	stw	r17,4(sp)
100076b0:	dc000015 	stw	r16,0(sp)
100076b4:	2023883a 	mov	r17,r4
100076b8:	2821883a 	mov	r16,r5
100076bc:	dfc00215 	stw	ra,8(sp)
100076c0:	000fc1c0 	call	1000fc1c <__malloc_lock>
100076c4:	81ffff17 	ldw	r7,-4(r16)
100076c8:	00bfff84 	movi	r2,-2
100076cc:	80fffe04 	addi	r3,r16,-8
100076d0:	3884703a 	and	r2,r7,r2
100076d4:	01840074 	movhi	r6,4097
100076d8:	1889883a 	add	r4,r3,r2
100076dc:	318e0004 	addi	r6,r6,14336
100076e0:	21400117 	ldw	r5,4(r4)
100076e4:	32000217 	ldw	r8,8(r6)
100076e8:	027fff04 	movi	r9,-4
100076ec:	2a4a703a 	and	r5,r5,r9
100076f0:	41006426 	beq	r8,r4,10007884 <_free_r+0x1e0>
100076f4:	21400115 	stw	r5,4(r4)
100076f8:	39c0004c 	andi	r7,r7,1
100076fc:	2151883a 	add	r8,r4,r5
10007700:	3800281e 	bne	r7,zero,100077a4 <_free_r+0x100>
10007704:	82bffe17 	ldw	r10,-8(r16)
10007708:	42000117 	ldw	r8,4(r8)
1000770c:	01c40074 	movhi	r7,4097
10007710:	1a87c83a 	sub	r3,r3,r10
10007714:	1a400217 	ldw	r9,8(r3)
10007718:	39ce0204 	addi	r7,r7,14344
1000771c:	1285883a 	add	r2,r2,r10
10007720:	4200004c 	andi	r8,r8,1
10007724:	49c04c26 	beq	r9,r7,10007858 <_free_r+0x1b4>
10007728:	1a800317 	ldw	r10,12(r3)
1000772c:	4a800315 	stw	r10,12(r9)
10007730:	52400215 	stw	r9,8(r10)
10007734:	40007126 	beq	r8,zero,100078fc <_free_r+0x258>
10007738:	11400054 	ori	r5,r2,1
1000773c:	19400115 	stw	r5,4(r3)
10007740:	20800015 	stw	r2,0(r4)
10007744:	11008028 	cmpgeui	r4,r2,512
10007748:	20002c1e 	bne	r4,zero,100077fc <_free_r+0x158>
1000774c:	1008d0fa 	srli	r4,r2,3
10007750:	31c00117 	ldw	r7,4(r6)
10007754:	20800044 	addi	r2,r4,1
10007758:	200bd0ba 	srai	r5,r4,2
1000775c:	100490fa 	slli	r2,r2,3
10007760:	01000044 	movi	r4,1
10007764:	2148983a 	sll	r4,r4,r5
10007768:	3085883a 	add	r2,r6,r2
1000776c:	11400017 	ldw	r5,0(r2)
10007770:	21c8b03a 	or	r4,r4,r7
10007774:	11fffe04 	addi	r7,r2,-8
10007778:	19c00315 	stw	r7,12(r3)
1000777c:	19400215 	stw	r5,8(r3)
10007780:	31000115 	stw	r4,4(r6)
10007784:	10c00015 	stw	r3,0(r2)
10007788:	28c00315 	stw	r3,12(r5)
1000778c:	8809883a 	mov	r4,r17
10007790:	dfc00217 	ldw	ra,8(sp)
10007794:	dc400117 	ldw	r17,4(sp)
10007798:	dc000017 	ldw	r16,0(sp)
1000779c:	dec00304 	addi	sp,sp,12
100077a0:	000fc401 	jmpi	1000fc40 <__malloc_unlock>
100077a4:	41c00117 	ldw	r7,4(r8)
100077a8:	39c0004c 	andi	r7,r7,1
100077ac:	38000e1e 	bne	r7,zero,100077e8 <_free_r+0x144>
100077b0:	01c40074 	movhi	r7,4097
100077b4:	1145883a 	add	r2,r2,r5
100077b8:	39ce0204 	addi	r7,r7,14344
100077bc:	21400217 	ldw	r5,8(r4)
100077c0:	12400054 	ori	r9,r2,1
100077c4:	1891883a 	add	r8,r3,r2
100077c8:	29c05226 	beq	r5,r7,10007914 <_free_r+0x270>
100077cc:	21000317 	ldw	r4,12(r4)
100077d0:	29000315 	stw	r4,12(r5)
100077d4:	21400215 	stw	r5,8(r4)
100077d8:	1a400115 	stw	r9,4(r3)
100077dc:	40800015 	stw	r2,0(r8)
100077e0:	003fd806 	br	10007744 <_free_r+0xa0>
100077e4:	f800283a 	ret
100077e8:	11400054 	ori	r5,r2,1
100077ec:	817fff15 	stw	r5,-4(r16)
100077f0:	20800015 	stw	r2,0(r4)
100077f4:	11008028 	cmpgeui	r4,r2,512
100077f8:	203fd426 	beq	r4,zero,1000774c <_free_r+0xa8>
100077fc:	1008d27a 	srli	r4,r2,9
10007800:	21400168 	cmpgeui	r5,r4,5
10007804:	2800341e 	bne	r5,zero,100078d8 <_free_r+0x234>
10007808:	1008d1ba 	srli	r4,r2,6
1000780c:	21c00e44 	addi	r7,r4,57
10007810:	380e90fa 	slli	r7,r7,3
10007814:	21400e04 	addi	r5,r4,56
10007818:	31cf883a 	add	r7,r6,r7
1000781c:	39000017 	ldw	r4,0(r7)
10007820:	39fffe04 	addi	r7,r7,-8
10007824:	39004226 	beq	r7,r4,10007930 <_free_r+0x28c>
10007828:	01bfff04 	movi	r6,-4
1000782c:	21400117 	ldw	r5,4(r4)
10007830:	298a703a 	and	r5,r5,r6
10007834:	1140022e 	bgeu	r2,r5,10007840 <_free_r+0x19c>
10007838:	21000217 	ldw	r4,8(r4)
1000783c:	393ffb1e 	bne	r7,r4,1000782c <_free_r+0x188>
10007840:	21c00317 	ldw	r7,12(r4)
10007844:	19c00315 	stw	r7,12(r3)
10007848:	19000215 	stw	r4,8(r3)
1000784c:	38c00215 	stw	r3,8(r7)
10007850:	20c00315 	stw	r3,12(r4)
10007854:	003fcd06 	br	1000778c <_free_r+0xe8>
10007858:	40004d1e 	bne	r8,zero,10007990 <_free_r+0x2ec>
1000785c:	21800317 	ldw	r6,12(r4)
10007860:	21000217 	ldw	r4,8(r4)
10007864:	2885883a 	add	r2,r5,r2
10007868:	11400054 	ori	r5,r2,1
1000786c:	21800315 	stw	r6,12(r4)
10007870:	31000215 	stw	r4,8(r6)
10007874:	19400115 	stw	r5,4(r3)
10007878:	1887883a 	add	r3,r3,r2
1000787c:	18800015 	stw	r2,0(r3)
10007880:	003fc206 	br	1000778c <_free_r+0xe8>
10007884:	39c0004c 	andi	r7,r7,1
10007888:	1145883a 	add	r2,r2,r5
1000788c:	3800071e 	bne	r7,zero,100078ac <_free_r+0x208>
10007890:	81fffe17 	ldw	r7,-8(r16)
10007894:	19c7c83a 	sub	r3,r3,r7
10007898:	19000317 	ldw	r4,12(r3)
1000789c:	19400217 	ldw	r5,8(r3)
100078a0:	11c5883a 	add	r2,r2,r7
100078a4:	29000315 	stw	r4,12(r5)
100078a8:	21400215 	stw	r5,8(r4)
100078ac:	01040074 	movhi	r4,4097
100078b0:	11400054 	ori	r5,r2,1
100078b4:	2113e317 	ldw	r4,20364(r4)
100078b8:	19400115 	stw	r5,4(r3)
100078bc:	30c00215 	stw	r3,8(r6)
100078c0:	113fb236 	bltu	r2,r4,1000778c <_free_r+0xe8>
100078c4:	00840074 	movhi	r2,4097
100078c8:	115c7817 	ldw	r5,29152(r2)
100078cc:	8809883a 	mov	r4,r17
100078d0:	00075880 	call	10007588 <_malloc_trim_r>
100078d4:	003fad06 	br	1000778c <_free_r+0xe8>
100078d8:	21400568 	cmpgeui	r5,r4,21
100078dc:	28000926 	beq	r5,zero,10007904 <_free_r+0x260>
100078e0:	21401568 	cmpgeui	r5,r4,85
100078e4:	2800191e 	bne	r5,zero,1000794c <_free_r+0x2a8>
100078e8:	1008d33a 	srli	r4,r2,12
100078ec:	21c01bc4 	addi	r7,r4,111
100078f0:	21401b84 	addi	r5,r4,110
100078f4:	380e90fa 	slli	r7,r7,3
100078f8:	003fc706 	br	10007818 <_free_r+0x174>
100078fc:	1145883a 	add	r2,r2,r5
10007900:	003fae06 	br	100077bc <_free_r+0x118>
10007904:	21c01704 	addi	r7,r4,92
10007908:	214016c4 	addi	r5,r4,91
1000790c:	380e90fa 	slli	r7,r7,3
10007910:	003fc106 	br	10007818 <_free_r+0x174>
10007914:	30c00515 	stw	r3,20(r6)
10007918:	30c00415 	stw	r3,16(r6)
1000791c:	19c00315 	stw	r7,12(r3)
10007920:	19c00215 	stw	r7,8(r3)
10007924:	1a400115 	stw	r9,4(r3)
10007928:	40800015 	stw	r2,0(r8)
1000792c:	003f9706 	br	1000778c <_free_r+0xe8>
10007930:	280bd0ba 	srai	r5,r5,2
10007934:	00800044 	movi	r2,1
10007938:	32000117 	ldw	r8,4(r6)
1000793c:	114a983a 	sll	r5,r2,r5
10007940:	2a0ab03a 	or	r5,r5,r8
10007944:	31400115 	stw	r5,4(r6)
10007948:	003fbe06 	br	10007844 <_free_r+0x1a0>
1000794c:	21405568 	cmpgeui	r5,r4,341
10007950:	2800051e 	bne	r5,zero,10007968 <_free_r+0x2c4>
10007954:	1008d3fa 	srli	r4,r2,15
10007958:	21c01e04 	addi	r7,r4,120
1000795c:	21401dc4 	addi	r5,r4,119
10007960:	380e90fa 	slli	r7,r7,3
10007964:	003fac06 	br	10007818 <_free_r+0x174>
10007968:	21015568 	cmpgeui	r4,r4,1365
1000796c:	2000051e 	bne	r4,zero,10007984 <_free_r+0x2e0>
10007970:	1008d4ba 	srli	r4,r2,18
10007974:	21c01f44 	addi	r7,r4,125
10007978:	21401f04 	addi	r5,r4,124
1000797c:	380e90fa 	slli	r7,r7,3
10007980:	003fa506 	br	10007818 <_free_r+0x174>
10007984:	01c0fe04 	movi	r7,1016
10007988:	01401f84 	movi	r5,126
1000798c:	003fa206 	br	10007818 <_free_r+0x174>
10007990:	11400054 	ori	r5,r2,1
10007994:	19400115 	stw	r5,4(r3)
10007998:	20800015 	stw	r2,0(r4)
1000799c:	003f7b06 	br	1000778c <_free_r+0xe8>

100079a0 <__sfvwrite_r>:
100079a0:	30800217 	ldw	r2,8(r6)
100079a4:	1000c926 	beq	r2,zero,10007ccc <__sfvwrite_r+0x32c>
100079a8:	2880030b 	ldhu	r2,12(r5)
100079ac:	defff304 	addi	sp,sp,-52
100079b0:	dd000715 	stw	r20,28(sp)
100079b4:	dc000315 	stw	r16,12(sp)
100079b8:	dfc00c15 	stw	ra,48(sp)
100079bc:	df000b15 	stw	fp,44(sp)
100079c0:	ddc00a15 	stw	r23,40(sp)
100079c4:	dd800915 	stw	r22,36(sp)
100079c8:	dd400815 	stw	r21,32(sp)
100079cc:	dcc00615 	stw	r19,24(sp)
100079d0:	dc800515 	stw	r18,20(sp)
100079d4:	dc400415 	stw	r17,16(sp)
100079d8:	d9000015 	stw	r4,0(sp)
100079dc:	10c0020c 	andi	r3,r2,8
100079e0:	2821883a 	mov	r16,r5
100079e4:	3029883a 	mov	r20,r6
100079e8:	18002426 	beq	r3,zero,10007a7c <__sfvwrite_r+0xdc>
100079ec:	28c00417 	ldw	r3,16(r5)
100079f0:	18002226 	beq	r3,zero,10007a7c <__sfvwrite_r+0xdc>
100079f4:	10c0008c 	andi	r3,r2,2
100079f8:	a4400017 	ldw	r17,0(r20)
100079fc:	18002726 	beq	r3,zero,10007a9c <__sfvwrite_r+0xfc>
10007a00:	80c00917 	ldw	r3,36(r16)
10007a04:	80800717 	ldw	r2,28(r16)
10007a08:	05600034 	movhi	r21,32768
10007a0c:	0027883a 	mov	r19,zero
10007a10:	0025883a 	mov	r18,zero
10007a14:	ad7f0004 	addi	r21,r21,-1024
10007a18:	980d883a 	mov	r6,r19
10007a1c:	100b883a 	mov	r5,r2
10007a20:	d9000017 	ldw	r4,0(sp)
10007a24:	90001126 	beq	r18,zero,10007a6c <__sfvwrite_r+0xcc>
10007a28:	900f883a 	mov	r7,r18
10007a2c:	ac80012e 	bgeu	r21,r18,10007a34 <__sfvwrite_r+0x94>
10007a30:	a80f883a 	mov	r7,r21
10007a34:	183ee83a 	callr	r3
10007a38:	00809f0e 	bge	zero,r2,10007cb8 <__sfvwrite_r+0x318>
10007a3c:	a0c00217 	ldw	r3,8(r20)
10007a40:	98a7883a 	add	r19,r19,r2
10007a44:	90a5c83a 	sub	r18,r18,r2
10007a48:	1885c83a 	sub	r2,r3,r2
10007a4c:	a0800215 	stw	r2,8(r20)
10007a50:	10006326 	beq	r2,zero,10007be0 <__sfvwrite_r+0x240>
10007a54:	80800717 	ldw	r2,28(r16)
10007a58:	80c00917 	ldw	r3,36(r16)
10007a5c:	980d883a 	mov	r6,r19
10007a60:	100b883a 	mov	r5,r2
10007a64:	d9000017 	ldw	r4,0(sp)
10007a68:	903fef1e 	bne	r18,zero,10007a28 <__sfvwrite_r+0x88>
10007a6c:	8cc00017 	ldw	r19,0(r17)
10007a70:	8c800117 	ldw	r18,4(r17)
10007a74:	8c400204 	addi	r17,r17,8
10007a78:	003fe706 	br	10007a18 <__sfvwrite_r+0x78>
10007a7c:	d9000017 	ldw	r4,0(sp)
10007a80:	800b883a 	mov	r5,r16
10007a84:	000555c0 	call	1000555c <__swsetup_r>
10007a88:	1000f41e 	bne	r2,zero,10007e5c <__sfvwrite_r+0x4bc>
10007a8c:	8080030b 	ldhu	r2,12(r16)
10007a90:	a4400017 	ldw	r17,0(r20)
10007a94:	10c0008c 	andi	r3,r2,2
10007a98:	183fd91e 	bne	r3,zero,10007a00 <__sfvwrite_r+0x60>
10007a9c:	10c0004c 	andi	r3,r2,1
10007aa0:	84800217 	ldw	r18,8(r16)
10007aa4:	87000017 	ldw	fp,0(r16)
10007aa8:	18008a1e 	bne	r3,zero,10007cd4 <__sfvwrite_r+0x334>
10007aac:	00e00034 	movhi	r3,32768
10007ab0:	18ffff84 	addi	r3,r3,-2
10007ab4:	01200034 	movhi	r4,32768
10007ab8:	d8c00115 	stw	r3,4(sp)
10007abc:	20ffffc4 	addi	r3,r4,-1
10007ac0:	002d883a 	mov	r22,zero
10007ac4:	002f883a 	mov	r23,zero
10007ac8:	d8c00215 	stw	r3,8(sp)
10007acc:	b8004026 	beq	r23,zero,10007bd0 <__sfvwrite_r+0x230>
10007ad0:	1100800c 	andi	r4,r2,512
10007ad4:	20009026 	beq	r4,zero,10007d18 <__sfvwrite_r+0x378>
10007ad8:	902b883a 	mov	r21,r18
10007adc:	bc80b436 	bltu	r23,r18,10007db0 <__sfvwrite_r+0x410>
10007ae0:	1101200c 	andi	r4,r2,1152
10007ae4:	20002526 	beq	r4,zero,10007b7c <__sfvwrite_r+0x1dc>
10007ae8:	81800517 	ldw	r6,20(r16)
10007aec:	81400417 	ldw	r5,16(r16)
10007af0:	b9000044 	addi	r4,r23,1
10007af4:	318000e4 	muli	r6,r6,3
10007af8:	e167c83a 	sub	r19,fp,r5
10007afc:	24c9883a 	add	r4,r4,r19
10007b00:	3024d7fa 	srli	r18,r6,31
10007b04:	91a5883a 	add	r18,r18,r6
10007b08:	9025d07a 	srai	r18,r18,1
10007b0c:	900d883a 	mov	r6,r18
10007b10:	9100022e 	bgeu	r18,r4,10007b1c <__sfvwrite_r+0x17c>
10007b14:	2025883a 	mov	r18,r4
10007b18:	200d883a 	mov	r6,r4
10007b1c:	1081000c 	andi	r2,r2,1024
10007b20:	1000bc26 	beq	r2,zero,10007e14 <__sfvwrite_r+0x474>
10007b24:	d9000017 	ldw	r4,0(sp)
10007b28:	300b883a 	mov	r5,r6
10007b2c:	00081b00 	call	100081b0 <_malloc_r>
10007b30:	1000c526 	beq	r2,zero,10007e48 <__sfvwrite_r+0x4a8>
10007b34:	81400417 	ldw	r5,16(r16)
10007b38:	980d883a 	mov	r6,r19
10007b3c:	1009883a 	mov	r4,r2
10007b40:	00030480 	call	10003048 <memcpy>
10007b44:	100f883a 	mov	r7,r2
10007b48:	8080030b 	ldhu	r2,12(r16)
10007b4c:	00fedfc4 	movi	r3,-1153
10007b50:	10c4703a 	and	r2,r2,r3
10007b54:	10802014 	ori	r2,r2,128
10007b58:	8080030d 	sth	r2,12(r16)
10007b5c:	94c5c83a 	sub	r2,r18,r19
10007b60:	3cf9883a 	add	fp,r7,r19
10007b64:	84800515 	stw	r18,20(r16)
10007b68:	81c00415 	stw	r7,16(r16)
10007b6c:	87000015 	stw	fp,0(r16)
10007b70:	b825883a 	mov	r18,r23
10007b74:	80800215 	stw	r2,8(r16)
10007b78:	b82b883a 	mov	r21,r23
10007b7c:	a80d883a 	mov	r6,r21
10007b80:	b00b883a 	mov	r5,r22
10007b84:	e009883a 	mov	r4,fp
10007b88:	0008a8c0 	call	10008a8c <memmove>
10007b8c:	80800217 	ldw	r2,8(r16)
10007b90:	81800017 	ldw	r6,0(r16)
10007b94:	b827883a 	mov	r19,r23
10007b98:	14a5c83a 	sub	r18,r2,r18
10007b9c:	354d883a 	add	r6,r6,r21
10007ba0:	84800215 	stw	r18,8(r16)
10007ba4:	81800015 	stw	r6,0(r16)
10007ba8:	002f883a 	mov	r23,zero
10007bac:	a0800217 	ldw	r2,8(r20)
10007bb0:	b4ed883a 	add	r22,r22,r19
10007bb4:	14e7c83a 	sub	r19,r2,r19
10007bb8:	a4c00215 	stw	r19,8(r20)
10007bbc:	98000826 	beq	r19,zero,10007be0 <__sfvwrite_r+0x240>
10007bc0:	8080030b 	ldhu	r2,12(r16)
10007bc4:	84800217 	ldw	r18,8(r16)
10007bc8:	87000017 	ldw	fp,0(r16)
10007bcc:	b83fc01e 	bne	r23,zero,10007ad0 <__sfvwrite_r+0x130>
10007bd0:	8d800017 	ldw	r22,0(r17)
10007bd4:	8dc00117 	ldw	r23,4(r17)
10007bd8:	8c400204 	addi	r17,r17,8
10007bdc:	003fbb06 	br	10007acc <__sfvwrite_r+0x12c>
10007be0:	0005883a 	mov	r2,zero
10007be4:	dfc00c17 	ldw	ra,48(sp)
10007be8:	df000b17 	ldw	fp,44(sp)
10007bec:	ddc00a17 	ldw	r23,40(sp)
10007bf0:	dd800917 	ldw	r22,36(sp)
10007bf4:	dd400817 	ldw	r21,32(sp)
10007bf8:	dd000717 	ldw	r20,28(sp)
10007bfc:	dcc00617 	ldw	r19,24(sp)
10007c00:	dc800517 	ldw	r18,20(sp)
10007c04:	dc400417 	ldw	r17,16(sp)
10007c08:	dc000317 	ldw	r16,12(sp)
10007c0c:	dec00d04 	addi	sp,sp,52
10007c10:	f800283a 	ret
10007c14:	b1c06e16 	blt	r22,r7,10007dd0 <__sfvwrite_r+0x430>
10007c18:	80800917 	ldw	r2,36(r16)
10007c1c:	81400717 	ldw	r5,28(r16)
10007c20:	d9000017 	ldw	r4,0(sp)
10007c24:	b80d883a 	mov	r6,r23
10007c28:	103ee83a 	callr	r2
10007c2c:	1025883a 	mov	r18,r2
10007c30:	0080210e 	bge	zero,r2,10007cb8 <__sfvwrite_r+0x318>
10007c34:	acabc83a 	sub	r21,r21,r18
10007c38:	a8006026 	beq	r21,zero,10007dbc <__sfvwrite_r+0x41c>
10007c3c:	00800044 	movi	r2,1
10007c40:	a0c00217 	ldw	r3,8(r20)
10007c44:	bcaf883a 	add	r23,r23,r18
10007c48:	9ca7c83a 	sub	r19,r19,r18
10007c4c:	1ca5c83a 	sub	r18,r3,r18
10007c50:	a4800215 	stw	r18,8(r20)
10007c54:	903fe226 	beq	r18,zero,10007be0 <__sfvwrite_r+0x240>
10007c58:	84800217 	ldw	r18,8(r16)
10007c5c:	87000017 	ldw	fp,0(r16)
10007c60:	98002126 	beq	r19,zero,10007ce8 <__sfvwrite_r+0x348>
10007c64:	10002426 	beq	r2,zero,10007cf8 <__sfvwrite_r+0x358>
10007c68:	a805883a 	mov	r2,r21
10007c6c:	982d883a 	mov	r22,r19
10007c70:	14c0012e 	bgeu	r2,r19,10007c78 <__sfvwrite_r+0x2d8>
10007c74:	102d883a 	mov	r22,r2
10007c78:	80800417 	ldw	r2,16(r16)
10007c7c:	81c00517 	ldw	r7,20(r16)
10007c80:	173fe42e 	bgeu	r2,fp,10007c14 <__sfvwrite_r+0x274>
10007c84:	3ca5883a 	add	r18,r7,r18
10007c88:	95bfe20e 	bge	r18,r22,10007c14 <__sfvwrite_r+0x274>
10007c8c:	b80b883a 	mov	r5,r23
10007c90:	e009883a 	mov	r4,fp
10007c94:	900d883a 	mov	r6,r18
10007c98:	0008a8c0 	call	10008a8c <memmove>
10007c9c:	80800017 	ldw	r2,0(r16)
10007ca0:	d9000017 	ldw	r4,0(sp)
10007ca4:	800b883a 	mov	r5,r16
10007ca8:	1485883a 	add	r2,r2,r18
10007cac:	80800015 	stw	r2,0(r16)
10007cb0:	00071bc0 	call	100071bc <_fflush_r>
10007cb4:	103fdf26 	beq	r2,zero,10007c34 <__sfvwrite_r+0x294>
10007cb8:	8080030b 	ldhu	r2,12(r16)
10007cbc:	10801014 	ori	r2,r2,64
10007cc0:	8080030d 	sth	r2,12(r16)
10007cc4:	00bfffc4 	movi	r2,-1
10007cc8:	003fc606 	br	10007be4 <__sfvwrite_r+0x244>
10007ccc:	0005883a 	mov	r2,zero
10007cd0:	f800283a 	ret
10007cd4:	0027883a 	mov	r19,zero
10007cd8:	002b883a 	mov	r21,zero
10007cdc:	0005883a 	mov	r2,zero
10007ce0:	002f883a 	mov	r23,zero
10007ce4:	983fdf1e 	bne	r19,zero,10007c64 <__sfvwrite_r+0x2c4>
10007ce8:	8cc00117 	ldw	r19,4(r17)
10007cec:	8dc00017 	ldw	r23,0(r17)
10007cf0:	8c400204 	addi	r17,r17,8
10007cf4:	983ffc26 	beq	r19,zero,10007ce8 <__sfvwrite_r+0x348>
10007cf8:	980d883a 	mov	r6,r19
10007cfc:	01400284 	movi	r5,10
10007d00:	b809883a 	mov	r4,r23
10007d04:	00089a40 	call	100089a4 <memchr>
10007d08:	10003f26 	beq	r2,zero,10007e08 <__sfvwrite_r+0x468>
10007d0c:	10800044 	addi	r2,r2,1
10007d10:	15ebc83a 	sub	r21,r2,r23
10007d14:	003fd406 	br	10007c68 <__sfvwrite_r+0x2c8>
10007d18:	80800417 	ldw	r2,16(r16)
10007d1c:	17001136 	bltu	r2,fp,10007d64 <__sfvwrite_r+0x3c4>
10007d20:	84c00517 	ldw	r19,20(r16)
10007d24:	bcc00f36 	bltu	r23,r19,10007d64 <__sfvwrite_r+0x3c4>
10007d28:	d8800117 	ldw	r2,4(sp)
10007d2c:	15c0342e 	bgeu	r2,r23,10007e00 <__sfvwrite_r+0x460>
10007d30:	d9000217 	ldw	r4,8(sp)
10007d34:	980b883a 	mov	r5,r19
10007d38:	000cdbc0 	call	1000cdbc <__divsi3>
10007d3c:	14cf383a 	mul	r7,r2,r19
10007d40:	81400717 	ldw	r5,28(r16)
10007d44:	80800917 	ldw	r2,36(r16)
10007d48:	d9000017 	ldw	r4,0(sp)
10007d4c:	b00d883a 	mov	r6,r22
10007d50:	103ee83a 	callr	r2
10007d54:	00bfd80e 	bge	zero,r2,10007cb8 <__sfvwrite_r+0x318>
10007d58:	1027883a 	mov	r19,r2
10007d5c:	bcefc83a 	sub	r23,r23,r19
10007d60:	003f9206 	br	10007bac <__sfvwrite_r+0x20c>
10007d64:	9027883a 	mov	r19,r18
10007d68:	bc80012e 	bgeu	r23,r18,10007d70 <__sfvwrite_r+0x3d0>
10007d6c:	b827883a 	mov	r19,r23
10007d70:	e009883a 	mov	r4,fp
10007d74:	980d883a 	mov	r6,r19
10007d78:	b00b883a 	mov	r5,r22
10007d7c:	0008a8c0 	call	10008a8c <memmove>
10007d80:	80800217 	ldw	r2,8(r16)
10007d84:	81000017 	ldw	r4,0(r16)
10007d88:	14c5c83a 	sub	r2,r2,r19
10007d8c:	24c9883a 	add	r4,r4,r19
10007d90:	80800215 	stw	r2,8(r16)
10007d94:	81000015 	stw	r4,0(r16)
10007d98:	103ff01e 	bne	r2,zero,10007d5c <__sfvwrite_r+0x3bc>
10007d9c:	d9000017 	ldw	r4,0(sp)
10007da0:	800b883a 	mov	r5,r16
10007da4:	00071bc0 	call	100071bc <_fflush_r>
10007da8:	103fec26 	beq	r2,zero,10007d5c <__sfvwrite_r+0x3bc>
10007dac:	003fc206 	br	10007cb8 <__sfvwrite_r+0x318>
10007db0:	b825883a 	mov	r18,r23
10007db4:	b82b883a 	mov	r21,r23
10007db8:	003f7006 	br	10007b7c <__sfvwrite_r+0x1dc>
10007dbc:	d9000017 	ldw	r4,0(sp)
10007dc0:	800b883a 	mov	r5,r16
10007dc4:	00071bc0 	call	100071bc <_fflush_r>
10007dc8:	103f9d26 	beq	r2,zero,10007c40 <__sfvwrite_r+0x2a0>
10007dcc:	003fba06 	br	10007cb8 <__sfvwrite_r+0x318>
10007dd0:	b00d883a 	mov	r6,r22
10007dd4:	b80b883a 	mov	r5,r23
10007dd8:	e009883a 	mov	r4,fp
10007ddc:	0008a8c0 	call	10008a8c <memmove>
10007de0:	80c00217 	ldw	r3,8(r16)
10007de4:	80800017 	ldw	r2,0(r16)
10007de8:	b025883a 	mov	r18,r22
10007dec:	1d87c83a 	sub	r3,r3,r22
10007df0:	15ad883a 	add	r22,r2,r22
10007df4:	80c00215 	stw	r3,8(r16)
10007df8:	85800015 	stw	r22,0(r16)
10007dfc:	003f8d06 	br	10007c34 <__sfvwrite_r+0x294>
10007e00:	b809883a 	mov	r4,r23
10007e04:	003fcb06 	br	10007d34 <__sfvwrite_r+0x394>
10007e08:	98800044 	addi	r2,r19,1
10007e0c:	102b883a 	mov	r21,r2
10007e10:	003f9606 	br	10007c6c <__sfvwrite_r+0x2cc>
10007e14:	d9000017 	ldw	r4,0(sp)
10007e18:	0009be40 	call	10009be4 <_realloc_r>
10007e1c:	100f883a 	mov	r7,r2
10007e20:	103f4e1e 	bne	r2,zero,10007b5c <__sfvwrite_r+0x1bc>
10007e24:	dc400017 	ldw	r17,0(sp)
10007e28:	81400417 	ldw	r5,16(r16)
10007e2c:	8809883a 	mov	r4,r17
10007e30:	00076a40 	call	100076a4 <_free_r>
10007e34:	8080030b 	ldhu	r2,12(r16)
10007e38:	00c00304 	movi	r3,12
10007e3c:	88c00015 	stw	r3,0(r17)
10007e40:	10bfdfcc 	andi	r2,r2,65407
10007e44:	003f9d06 	br	10007cbc <__sfvwrite_r+0x31c>
10007e48:	d8c00017 	ldw	r3,0(sp)
10007e4c:	00800304 	movi	r2,12
10007e50:	18800015 	stw	r2,0(r3)
10007e54:	8080030b 	ldhu	r2,12(r16)
10007e58:	003f9806 	br	10007cbc <__sfvwrite_r+0x31c>
10007e5c:	00bfffc4 	movi	r2,-1
10007e60:	003f6006 	br	10007be4 <__sfvwrite_r+0x244>

10007e64 <_fwalk>:
10007e64:	defffa04 	addi	sp,sp,-24
10007e68:	dc800215 	stw	r18,8(sp)
10007e6c:	dfc00515 	stw	ra,20(sp)
10007e70:	dd000415 	stw	r20,16(sp)
10007e74:	dcc00315 	stw	r19,12(sp)
10007e78:	dc400115 	stw	r17,4(sp)
10007e7c:	dc000015 	stw	r16,0(sp)
10007e80:	2480b804 	addi	r18,r4,736
10007e84:	90001e26 	beq	r18,zero,10007f00 <_fwalk+0x9c>
10007e88:	2827883a 	mov	r19,r5
10007e8c:	0029883a 	mov	r20,zero
10007e90:	94400117 	ldw	r17,4(r18)
10007e94:	94000217 	ldw	r16,8(r18)
10007e98:	8c7fffc4 	addi	r17,r17,-1
10007e9c:	88000d16 	blt	r17,zero,10007ed4 <_fwalk+0x70>
10007ea0:	8080030b 	ldhu	r2,12(r16)
10007ea4:	8c7fffc4 	addi	r17,r17,-1
10007ea8:	108000b0 	cmpltui	r2,r2,2
10007eac:	1000061e 	bne	r2,zero,10007ec8 <_fwalk+0x64>
10007eb0:	8080038f 	ldh	r2,14(r16)
10007eb4:	8009883a 	mov	r4,r16
10007eb8:	10bfffe0 	cmpeqi	r2,r2,-1
10007ebc:	1000021e 	bne	r2,zero,10007ec8 <_fwalk+0x64>
10007ec0:	983ee83a 	callr	r19
10007ec4:	a0a8b03a 	or	r20,r20,r2
10007ec8:	88bfffd8 	cmpnei	r2,r17,-1
10007ecc:	84001a04 	addi	r16,r16,104
10007ed0:	103ff31e 	bne	r2,zero,10007ea0 <_fwalk+0x3c>
10007ed4:	94800017 	ldw	r18,0(r18)
10007ed8:	903fed1e 	bne	r18,zero,10007e90 <_fwalk+0x2c>
10007edc:	a005883a 	mov	r2,r20
10007ee0:	dfc00517 	ldw	ra,20(sp)
10007ee4:	dd000417 	ldw	r20,16(sp)
10007ee8:	dcc00317 	ldw	r19,12(sp)
10007eec:	dc800217 	ldw	r18,8(sp)
10007ef0:	dc400117 	ldw	r17,4(sp)
10007ef4:	dc000017 	ldw	r16,0(sp)
10007ef8:	dec00604 	addi	sp,sp,24
10007efc:	f800283a 	ret
10007f00:	0029883a 	mov	r20,zero
10007f04:	003ff506 	br	10007edc <_fwalk+0x78>

10007f08 <_fwalk_reent>:
10007f08:	defff904 	addi	sp,sp,-28
10007f0c:	dc800215 	stw	r18,8(sp)
10007f10:	dfc00615 	stw	ra,24(sp)
10007f14:	dd400515 	stw	r21,20(sp)
10007f18:	dd000415 	stw	r20,16(sp)
10007f1c:	dcc00315 	stw	r19,12(sp)
10007f20:	dc400115 	stw	r17,4(sp)
10007f24:	dc000015 	stw	r16,0(sp)
10007f28:	2480b804 	addi	r18,r4,736
10007f2c:	90002126 	beq	r18,zero,10007fb4 <_fwalk_reent+0xac>
10007f30:	2829883a 	mov	r20,r5
10007f34:	2027883a 	mov	r19,r4
10007f38:	002b883a 	mov	r21,zero
10007f3c:	94400117 	ldw	r17,4(r18)
10007f40:	94000217 	ldw	r16,8(r18)
10007f44:	8c7fffc4 	addi	r17,r17,-1
10007f48:	88000e16 	blt	r17,zero,10007f84 <_fwalk_reent+0x7c>
10007f4c:	8080030b 	ldhu	r2,12(r16)
10007f50:	8c7fffc4 	addi	r17,r17,-1
10007f54:	108000b0 	cmpltui	r2,r2,2
10007f58:	1000071e 	bne	r2,zero,10007f78 <_fwalk_reent+0x70>
10007f5c:	8080038f 	ldh	r2,14(r16)
10007f60:	800b883a 	mov	r5,r16
10007f64:	9809883a 	mov	r4,r19
10007f68:	10bfffe0 	cmpeqi	r2,r2,-1
10007f6c:	1000021e 	bne	r2,zero,10007f78 <_fwalk_reent+0x70>
10007f70:	a03ee83a 	callr	r20
10007f74:	a8aab03a 	or	r21,r21,r2
10007f78:	88bfffd8 	cmpnei	r2,r17,-1
10007f7c:	84001a04 	addi	r16,r16,104
10007f80:	103ff21e 	bne	r2,zero,10007f4c <_fwalk_reent+0x44>
10007f84:	94800017 	ldw	r18,0(r18)
10007f88:	903fec1e 	bne	r18,zero,10007f3c <_fwalk_reent+0x34>
10007f8c:	a805883a 	mov	r2,r21
10007f90:	dfc00617 	ldw	ra,24(sp)
10007f94:	dd400517 	ldw	r21,20(sp)
10007f98:	dd000417 	ldw	r20,16(sp)
10007f9c:	dcc00317 	ldw	r19,12(sp)
10007fa0:	dc800217 	ldw	r18,8(sp)
10007fa4:	dc400117 	ldw	r17,4(sp)
10007fa8:	dc000017 	ldw	r16,0(sp)
10007fac:	dec00704 	addi	sp,sp,28
10007fb0:	f800283a 	ret
10007fb4:	002b883a 	mov	r21,zero
10007fb8:	003ff406 	br	10007f8c <_fwalk_reent+0x84>

10007fbc <__localeconv_l>:
10007fbc:	20803c04 	addi	r2,r4,240
10007fc0:	f800283a 	ret

10007fc4 <_localeconv_r>:
10007fc4:	00840074 	movhi	r2,4097
10007fc8:	108f3e04 	addi	r2,r2,15608
10007fcc:	f800283a 	ret

10007fd0 <localeconv>:
10007fd0:	00840074 	movhi	r2,4097
10007fd4:	108f3e04 	addi	r2,r2,15608
10007fd8:	f800283a 	ret

10007fdc <__swhatbuf_r>:
10007fdc:	deffea04 	addi	sp,sp,-88
10007fe0:	dc001215 	stw	r16,72(sp)
10007fe4:	2821883a 	mov	r16,r5
10007fe8:	2940038f 	ldh	r5,14(r5)
10007fec:	dc801415 	stw	r18,80(sp)
10007ff0:	dc401315 	stw	r17,76(sp)
10007ff4:	dfc01515 	stw	ra,84(sp)
10007ff8:	3023883a 	mov	r17,r6
10007ffc:	3825883a 	mov	r18,r7
10008000:	28001016 	blt	r5,zero,10008044 <__swhatbuf_r+0x68>
10008004:	d80d883a 	mov	r6,sp
10008008:	000bd240 	call	1000bd24 <_fstat_r>
1000800c:	10000d16 	blt	r2,zero,10008044 <__swhatbuf_r+0x68>
10008010:	d8c00117 	ldw	r3,4(sp)
10008014:	00820004 	movi	r2,2048
10008018:	18fc000c 	andi	r3,r3,61440
1000801c:	18c80020 	cmpeqi	r3,r3,8192
10008020:	90c00015 	stw	r3,0(r18)
10008024:	00c10004 	movi	r3,1024
10008028:	88c00015 	stw	r3,0(r17)
1000802c:	dfc01517 	ldw	ra,84(sp)
10008030:	dc801417 	ldw	r18,80(sp)
10008034:	dc401317 	ldw	r17,76(sp)
10008038:	dc001217 	ldw	r16,72(sp)
1000803c:	dec01604 	addi	sp,sp,88
10008040:	f800283a 	ret
10008044:	8080030b 	ldhu	r2,12(r16)
10008048:	90000015 	stw	zero,0(r18)
1000804c:	1080200c 	andi	r2,r2,128
10008050:	10000426 	beq	r2,zero,10008064 <__swhatbuf_r+0x88>
10008054:	00801004 	movi	r2,64
10008058:	88800015 	stw	r2,0(r17)
1000805c:	0005883a 	mov	r2,zero
10008060:	003ff206 	br	1000802c <__swhatbuf_r+0x50>
10008064:	00810004 	movi	r2,1024
10008068:	88800015 	stw	r2,0(r17)
1000806c:	0005883a 	mov	r2,zero
10008070:	003fee06 	br	1000802c <__swhatbuf_r+0x50>

10008074 <__smakebuf_r>:
10008074:	28c0030b 	ldhu	r3,12(r5)
10008078:	defffa04 	addi	sp,sp,-24
1000807c:	dc000215 	stw	r16,8(sp)
10008080:	dfc00515 	stw	ra,20(sp)
10008084:	dc800415 	stw	r18,16(sp)
10008088:	dc400315 	stw	r17,12(sp)
1000808c:	18c0008c 	andi	r3,r3,2
10008090:	2821883a 	mov	r16,r5
10008094:	18000b26 	beq	r3,zero,100080c4 <__smakebuf_r+0x50>
10008098:	28c010c4 	addi	r3,r5,67
1000809c:	28c00015 	stw	r3,0(r5)
100080a0:	28c00415 	stw	r3,16(r5)
100080a4:	00c00044 	movi	r3,1
100080a8:	28c00515 	stw	r3,20(r5)
100080ac:	dfc00517 	ldw	ra,20(sp)
100080b0:	dc800417 	ldw	r18,16(sp)
100080b4:	dc400317 	ldw	r17,12(sp)
100080b8:	dc000217 	ldw	r16,8(sp)
100080bc:	dec00604 	addi	sp,sp,24
100080c0:	f800283a 	ret
100080c4:	d9c00104 	addi	r7,sp,4
100080c8:	d80d883a 	mov	r6,sp
100080cc:	2023883a 	mov	r17,r4
100080d0:	0007fdc0 	call	10007fdc <__swhatbuf_r>
100080d4:	1025883a 	mov	r18,r2
100080d8:	d8800117 	ldw	r2,4(sp)
100080dc:	1000131e 	bne	r2,zero,1000812c <__smakebuf_r+0xb8>
100080e0:	d9400017 	ldw	r5,0(sp)
100080e4:	8809883a 	mov	r4,r17
100080e8:	00081b00 	call	100081b0 <_malloc_r>
100080ec:	10001c26 	beq	r2,zero,10008160 <__smakebuf_r+0xec>
100080f0:	01040034 	movhi	r4,4096
100080f4:	211c9304 	addi	r4,r4,29260
100080f8:	80c0030b 	ldhu	r3,12(r16)
100080fc:	89000f15 	stw	r4,60(r17)
10008100:	80800015 	stw	r2,0(r16)
10008104:	80800415 	stw	r2,16(r16)
10008108:	d8800017 	ldw	r2,0(sp)
1000810c:	d9400117 	ldw	r5,4(sp)
10008110:	18c02014 	ori	r3,r3,128
10008114:	80c0030d 	sth	r3,12(r16)
10008118:	80800515 	stw	r2,20(r16)
1000811c:	28001c1e 	bne	r5,zero,10008190 <__smakebuf_r+0x11c>
10008120:	90c6b03a 	or	r3,r18,r3
10008124:	80c0030d 	sth	r3,12(r16)
10008128:	003fe006 	br	100080ac <__smakebuf_r+0x38>
1000812c:	8140038f 	ldh	r5,14(r16)
10008130:	8809883a 	mov	r4,r17
10008134:	000bd840 	call	1000bd84 <_isatty_r>
10008138:	103fe926 	beq	r2,zero,100080e0 <__smakebuf_r+0x6c>
1000813c:	8080030b 	ldhu	r2,12(r16)
10008140:	80c010c4 	addi	r3,r16,67
10008144:	80c00015 	stw	r3,0(r16)
10008148:	10800054 	ori	r2,r2,1
1000814c:	8080030d 	sth	r2,12(r16)
10008150:	00800044 	movi	r2,1
10008154:	80c00415 	stw	r3,16(r16)
10008158:	80800515 	stw	r2,20(r16)
1000815c:	003fe006 	br	100080e0 <__smakebuf_r+0x6c>
10008160:	8080030b 	ldhu	r2,12(r16)
10008164:	10c0800c 	andi	r3,r2,512
10008168:	183fd01e 	bne	r3,zero,100080ac <__smakebuf_r+0x38>
1000816c:	10bfff0c 	andi	r2,r2,65532
10008170:	10800094 	ori	r2,r2,2
10008174:	80c010c4 	addi	r3,r16,67
10008178:	8080030d 	sth	r2,12(r16)
1000817c:	00800044 	movi	r2,1
10008180:	80c00015 	stw	r3,0(r16)
10008184:	80c00415 	stw	r3,16(r16)
10008188:	80800515 	stw	r2,20(r16)
1000818c:	003fc706 	br	100080ac <__smakebuf_r+0x38>
10008190:	8140038f 	ldh	r5,14(r16)
10008194:	8809883a 	mov	r4,r17
10008198:	000bd840 	call	1000bd84 <_isatty_r>
1000819c:	80c0030b 	ldhu	r3,12(r16)
100081a0:	103fdf26 	beq	r2,zero,10008120 <__smakebuf_r+0xac>
100081a4:	18ffff0c 	andi	r3,r3,65532
100081a8:	18c00054 	ori	r3,r3,1
100081ac:	003fdc06 	br	10008120 <__smakebuf_r+0xac>

100081b0 <_malloc_r>:
100081b0:	defff604 	addi	sp,sp,-40
100081b4:	dc400115 	stw	r17,4(sp)
100081b8:	2c4002c4 	addi	r17,r5,11
100081bc:	dc800215 	stw	r18,8(sp)
100081c0:	dfc00915 	stw	ra,36(sp)
100081c4:	df000815 	stw	fp,32(sp)
100081c8:	ddc00715 	stw	r23,28(sp)
100081cc:	dd800615 	stw	r22,24(sp)
100081d0:	dd400515 	stw	r21,20(sp)
100081d4:	dd000415 	stw	r20,16(sp)
100081d8:	dcc00315 	stw	r19,12(sp)
100081dc:	dc000015 	stw	r16,0(sp)
100081e0:	888005e8 	cmpgeui	r2,r17,23
100081e4:	2025883a 	mov	r18,r4
100081e8:	10001b1e 	bne	r2,zero,10008258 <_malloc_r+0xa8>
100081ec:	29400468 	cmpgeui	r5,r5,17
100081f0:	2800951e 	bne	r5,zero,10008448 <_malloc_r+0x298>
100081f4:	000fc1c0 	call	1000fc1c <__malloc_lock>
100081f8:	04400404 	movi	r17,16
100081fc:	00800604 	movi	r2,24
10008200:	01800084 	movi	r6,2
10008204:	04c40074 	movhi	r19,4097
10008208:	9cce0004 	addi	r19,r19,14336
1000820c:	9885883a 	add	r2,r19,r2
10008210:	14000117 	ldw	r16,4(r2)
10008214:	10fffe04 	addi	r3,r2,-8
10008218:	80c09e26 	beq	r16,r3,10008494 <_malloc_r+0x2e4>
1000821c:	80800117 	ldw	r2,4(r16)
10008220:	81000317 	ldw	r4,12(r16)
10008224:	00ffff04 	movi	r3,-4
10008228:	10c4703a 	and	r2,r2,r3
1000822c:	81400217 	ldw	r5,8(r16)
10008230:	8085883a 	add	r2,r16,r2
10008234:	10c00117 	ldw	r3,4(r2)
10008238:	29000315 	stw	r4,12(r5)
1000823c:	21400215 	stw	r5,8(r4)
10008240:	18c00054 	ori	r3,r3,1
10008244:	10c00115 	stw	r3,4(r2)
10008248:	9009883a 	mov	r4,r18
1000824c:	000fc400 	call	1000fc40 <__malloc_unlock>
10008250:	80800204 	addi	r2,r16,8
10008254:	00007f06 	br	10008454 <_malloc_r+0x2a4>
10008258:	00bffe04 	movi	r2,-8
1000825c:	88a2703a 	and	r17,r17,r2
10008260:	88007916 	blt	r17,zero,10008448 <_malloc_r+0x298>
10008264:	89407836 	bltu	r17,r5,10008448 <_malloc_r+0x298>
10008268:	000fc1c0 	call	1000fc1c <__malloc_lock>
1000826c:	88807e28 	cmpgeui	r2,r17,504
10008270:	10013326 	beq	r2,zero,10008740 <_malloc_r+0x590>
10008274:	8804d27a 	srli	r2,r17,9
10008278:	10008226 	beq	r2,zero,10008484 <_malloc_r+0x2d4>
1000827c:	10c00168 	cmpgeui	r3,r2,5
10008280:	1801151e 	bne	r3,zero,100086d8 <_malloc_r+0x528>
10008284:	8804d1ba 	srli	r2,r17,6
10008288:	11800e44 	addi	r6,r2,57
1000828c:	300a90fa 	slli	r5,r6,3
10008290:	12000e04 	addi	r8,r2,56
10008294:	04c40074 	movhi	r19,4097
10008298:	9cce0004 	addi	r19,r19,14336
1000829c:	994b883a 	add	r5,r19,r5
100082a0:	2c000117 	ldw	r16,4(r5)
100082a4:	297ffe04 	addi	r5,r5,-8
100082a8:	2c001126 	beq	r5,r16,100082f0 <_malloc_r+0x140>
100082ac:	80800117 	ldw	r2,4(r16)
100082b0:	00ffff04 	movi	r3,-4
100082b4:	10c4703a 	and	r2,r2,r3
100082b8:	1447c83a 	sub	r3,r2,r17
100082bc:	19000408 	cmpgei	r4,r3,16
100082c0:	2000e81e 	bne	r4,zero,10008664 <_malloc_r+0x4b4>
100082c4:	1800e90e 	bge	r3,zero,1000866c <_malloc_r+0x4bc>
100082c8:	01ffff04 	movi	r7,-4
100082cc:	00000606 	br	100082e8 <_malloc_r+0x138>
100082d0:	80800117 	ldw	r2,4(r16)
100082d4:	11c4703a 	and	r2,r2,r7
100082d8:	1447c83a 	sub	r3,r2,r17
100082dc:	19000408 	cmpgei	r4,r3,16
100082e0:	2000e01e 	bne	r4,zero,10008664 <_malloc_r+0x4b4>
100082e4:	1800e10e 	bge	r3,zero,1000866c <_malloc_r+0x4bc>
100082e8:	84000317 	ldw	r16,12(r16)
100082ec:	2c3ff81e 	bne	r5,r16,100082d0 <_malloc_r+0x120>
100082f0:	9c000417 	ldw	r16,16(r19)
100082f4:	02040074 	movhi	r8,4097
100082f8:	420e0204 	addi	r8,r8,14344
100082fc:	82006c26 	beq	r16,r8,100084b0 <_malloc_r+0x300>
10008300:	80c00117 	ldw	r3,4(r16)
10008304:	00bfff04 	movi	r2,-4
10008308:	1884703a 	and	r2,r3,r2
1000830c:	1447c83a 	sub	r3,r2,r17
10008310:	19000410 	cmplti	r4,r3,16
10008314:	20011526 	beq	r4,zero,1000876c <_malloc_r+0x5bc>
10008318:	9a000515 	stw	r8,20(r19)
1000831c:	9a000415 	stw	r8,16(r19)
10008320:	18010a0e 	bge	r3,zero,1000874c <_malloc_r+0x59c>
10008324:	10c08028 	cmpgeui	r3,r2,512
10008328:	1800d21e 	bne	r3,zero,10008674 <_malloc_r+0x4c4>
1000832c:	1004d0fa 	srli	r2,r2,3
10008330:	99400117 	ldw	r5,4(r19)
10008334:	10c00044 	addi	r3,r2,1
10008338:	1009d0ba 	srai	r4,r2,2
1000833c:	180690fa 	slli	r3,r3,3
10008340:	00800044 	movi	r2,1
10008344:	1104983a 	sll	r2,r2,r4
10008348:	98c7883a 	add	r3,r19,r3
1000834c:	19000017 	ldw	r4,0(r3)
10008350:	1144b03a 	or	r2,r2,r5
10008354:	197ffe04 	addi	r5,r3,-8
10008358:	81400315 	stw	r5,12(r16)
1000835c:	81000215 	stw	r4,8(r16)
10008360:	98800115 	stw	r2,4(r19)
10008364:	1c000015 	stw	r16,0(r3)
10008368:	24000315 	stw	r16,12(r4)
1000836c:	3007d0ba 	srai	r3,r6,2
10008370:	01000044 	movi	r4,1
10008374:	20c8983a 	sll	r4,r4,r3
10008378:	11005236 	bltu	r2,r4,100084c4 <_malloc_r+0x314>
1000837c:	2086703a 	and	r3,r4,r2
10008380:	18000a1e 	bne	r3,zero,100083ac <_malloc_r+0x1fc>
10008384:	00ffff04 	movi	r3,-4
10008388:	2109883a 	add	r4,r4,r4
1000838c:	30cc703a 	and	r6,r6,r3
10008390:	2086703a 	and	r3,r4,r2
10008394:	31800104 	addi	r6,r6,4
10008398:	1800041e 	bne	r3,zero,100083ac <_malloc_r+0x1fc>
1000839c:	2109883a 	add	r4,r4,r4
100083a0:	2086703a 	and	r3,r4,r2
100083a4:	31800104 	addi	r6,r6,4
100083a8:	183ffc26 	beq	r3,zero,1000839c <_malloc_r+0x1ec>
100083ac:	027fff04 	movi	r9,-4
100083b0:	301490fa 	slli	r10,r6,3
100083b4:	3017883a 	mov	r11,r6
100083b8:	9a95883a 	add	r10,r19,r10
100083bc:	500f883a 	mov	r7,r10
100083c0:	3c000317 	ldw	r16,12(r7)
100083c4:	3c00cd26 	beq	r7,r16,100086fc <_malloc_r+0x54c>
100083c8:	80800117 	ldw	r2,4(r16)
100083cc:	1244703a 	and	r2,r2,r9
100083d0:	1447c83a 	sub	r3,r2,r17
100083d4:	19400408 	cmpgei	r5,r3,16
100083d8:	2800081e 	bne	r5,zero,100083fc <_malloc_r+0x24c>
100083dc:	1800cc0e 	bge	r3,zero,10008710 <_malloc_r+0x560>
100083e0:	84000317 	ldw	r16,12(r16)
100083e4:	3c00c526 	beq	r7,r16,100086fc <_malloc_r+0x54c>
100083e8:	80800117 	ldw	r2,4(r16)
100083ec:	1244703a 	and	r2,r2,r9
100083f0:	1447c83a 	sub	r3,r2,r17
100083f4:	19400410 	cmplti	r5,r3,16
100083f8:	283ff81e 	bne	r5,zero,100083dc <_malloc_r+0x22c>
100083fc:	81000317 	ldw	r4,12(r16)
10008400:	81400217 	ldw	r5,8(r16)
10008404:	89800054 	ori	r6,r17,1
10008408:	81800115 	stw	r6,4(r16)
1000840c:	29000315 	stw	r4,12(r5)
10008410:	21400215 	stw	r5,8(r4)
10008414:	8463883a 	add	r17,r16,r17
10008418:	9c400515 	stw	r17,20(r19)
1000841c:	9c400415 	stw	r17,16(r19)
10008420:	19000054 	ori	r4,r3,1
10008424:	89000115 	stw	r4,4(r17)
10008428:	8085883a 	add	r2,r16,r2
1000842c:	8a000315 	stw	r8,12(r17)
10008430:	8a000215 	stw	r8,8(r17)
10008434:	10c00015 	stw	r3,0(r2)
10008438:	9009883a 	mov	r4,r18
1000843c:	000fc400 	call	1000fc40 <__malloc_unlock>
10008440:	80800204 	addi	r2,r16,8
10008444:	00000306 	br	10008454 <_malloc_r+0x2a4>
10008448:	00800304 	movi	r2,12
1000844c:	90800015 	stw	r2,0(r18)
10008450:	0005883a 	mov	r2,zero
10008454:	dfc00917 	ldw	ra,36(sp)
10008458:	df000817 	ldw	fp,32(sp)
1000845c:	ddc00717 	ldw	r23,28(sp)
10008460:	dd800617 	ldw	r22,24(sp)
10008464:	dd400517 	ldw	r21,20(sp)
10008468:	dd000417 	ldw	r20,16(sp)
1000846c:	dcc00317 	ldw	r19,12(sp)
10008470:	dc800217 	ldw	r18,8(sp)
10008474:	dc400117 	ldw	r17,4(sp)
10008478:	dc000017 	ldw	r16,0(sp)
1000847c:	dec00a04 	addi	sp,sp,40
10008480:	f800283a 	ret
10008484:	01408004 	movi	r5,512
10008488:	01801004 	movi	r6,64
1000848c:	02000fc4 	movi	r8,63
10008490:	003f8006 	br	10008294 <_malloc_r+0xe4>
10008494:	14000317 	ldw	r16,12(r2)
10008498:	31800084 	addi	r6,r6,2
1000849c:	143f5f1e 	bne	r2,r16,1000821c <_malloc_r+0x6c>
100084a0:	9c000417 	ldw	r16,16(r19)
100084a4:	02040074 	movhi	r8,4097
100084a8:	420e0204 	addi	r8,r8,14344
100084ac:	823f941e 	bne	r16,r8,10008300 <_malloc_r+0x150>
100084b0:	3007d0ba 	srai	r3,r6,2
100084b4:	01000044 	movi	r4,1
100084b8:	98800117 	ldw	r2,4(r19)
100084bc:	20c8983a 	sll	r4,r4,r3
100084c0:	113fae2e 	bgeu	r2,r4,1000837c <_malloc_r+0x1cc>
100084c4:	9c000217 	ldw	r16,8(r19)
100084c8:	00bfff04 	movi	r2,-4
100084cc:	85000117 	ldw	r20,4(r16)
100084d0:	a0ac703a 	and	r22,r20,r2
100084d4:	b4400336 	bltu	r22,r17,100084e4 <_malloc_r+0x334>
100084d8:	b445c83a 	sub	r2,r22,r17
100084dc:	10c00408 	cmpgei	r3,r2,16
100084e0:	1800561e 	bne	r3,zero,1000863c <_malloc_r+0x48c>
100084e4:	00840074 	movhi	r2,4097
100084e8:	1093e217 	ldw	r2,20360(r2)
100084ec:	00c40074 	movhi	r3,4097
100084f0:	1d1c7817 	ldw	r20,29152(r3)
100084f4:	10bfffd8 	cmpnei	r2,r2,-1
100084f8:	85ab883a 	add	r21,r16,r22
100084fc:	8d29883a 	add	r20,r17,r20
10008500:	1000c826 	beq	r2,zero,10008824 <_malloc_r+0x674>
10008504:	a50403c4 	addi	r20,r20,4111
10008508:	00bc0004 	movi	r2,-4096
1000850c:	a0a8703a 	and	r20,r20,r2
10008510:	a00b883a 	mov	r5,r20
10008514:	9009883a 	mov	r4,r18
10008518:	000a2100 	call	1000a210 <_sbrk_r>
1000851c:	102f883a 	mov	r23,r2
10008520:	10bfffd8 	cmpnei	r2,r2,-1
10008524:	10009a26 	beq	r2,zero,10008790 <_malloc_r+0x5e0>
10008528:	bd409836 	bltu	r23,r21,1000878c <_malloc_r+0x5dc>
1000852c:	00840074 	movhi	r2,4097
10008530:	109c8217 	ldw	r2,29192(r2)
10008534:	00c40074 	movhi	r3,4097
10008538:	a085883a 	add	r2,r20,r2
1000853c:	189c8215 	stw	r2,29192(r3)
10008540:	1007883a 	mov	r3,r2
10008544:	adc0dd26 	beq	r21,r23,100088bc <_malloc_r+0x70c>
10008548:	00840074 	movhi	r2,4097
1000854c:	1093e217 	ldw	r2,20360(r2)
10008550:	10bfffd8 	cmpnei	r2,r2,-1
10008554:	1000e026 	beq	r2,zero,100088d8 <_malloc_r+0x728>
10008558:	bd6bc83a 	sub	r21,r23,r21
1000855c:	a8c7883a 	add	r3,r21,r3
10008560:	00840074 	movhi	r2,4097
10008564:	10dc8215 	stw	r3,29192(r2)
10008568:	bf0001cc 	andi	fp,r23,7
1000856c:	e000b626 	beq	fp,zero,10008848 <_malloc_r+0x698>
10008570:	bf2fc83a 	sub	r23,r23,fp
10008574:	bdc00204 	addi	r23,r23,8
10008578:	00840204 	movi	r2,4104
1000857c:	1705c83a 	sub	r2,r2,fp
10008580:	bd29883a 	add	r20,r23,r20
10008584:	1505c83a 	sub	r2,r2,r20
10008588:	1543ffcc 	andi	r21,r2,4095
1000858c:	a80b883a 	mov	r5,r21
10008590:	9009883a 	mov	r4,r18
10008594:	000a2100 	call	1000a210 <_sbrk_r>
10008598:	10ffffe0 	cmpeqi	r3,r2,-1
1000859c:	1800e41e 	bne	r3,zero,10008930 <_malloc_r+0x780>
100085a0:	15c5c83a 	sub	r2,r2,r23
100085a4:	1569883a 	add	r20,r2,r21
100085a8:	00840074 	movhi	r2,4097
100085ac:	109c8217 	ldw	r2,29192(r2)
100085b0:	9dc00215 	stw	r23,8(r19)
100085b4:	a5000054 	ori	r20,r20,1
100085b8:	a885883a 	add	r2,r21,r2
100085bc:	00c40074 	movhi	r3,4097
100085c0:	189c8215 	stw	r2,29192(r3)
100085c4:	bd000115 	stw	r20,4(r23)
100085c8:	84c0c626 	beq	r16,r19,100088e4 <_malloc_r+0x734>
100085cc:	b0c00428 	cmpgeui	r3,r22,16
100085d0:	1800c626 	beq	r3,zero,100088ec <_malloc_r+0x73c>
100085d4:	81000117 	ldw	r4,4(r16)
100085d8:	017ffe04 	movi	r5,-8
100085dc:	b0fffd04 	addi	r3,r22,-12
100085e0:	1946703a 	and	r3,r3,r5
100085e4:	2100004c 	andi	r4,r4,1
100085e8:	20c8b03a 	or	r4,r4,r3
100085ec:	81000115 	stw	r4,4(r16)
100085f0:	01400144 	movi	r5,5
100085f4:	80c9883a 	add	r4,r16,r3
100085f8:	21400115 	stw	r5,4(r4)
100085fc:	21400215 	stw	r5,8(r4)
10008600:	18c00428 	cmpgeui	r3,r3,16
10008604:	1800cf1e 	bne	r3,zero,10008944 <_malloc_r+0x794>
10008608:	bd000117 	ldw	r20,4(r23)
1000860c:	b821883a 	mov	r16,r23
10008610:	00c40074 	movhi	r3,4097
10008614:	18dc7717 	ldw	r3,29148(r3)
10008618:	1880022e 	bgeu	r3,r2,10008624 <_malloc_r+0x474>
1000861c:	00c40074 	movhi	r3,4097
10008620:	189c7715 	stw	r2,29148(r3)
10008624:	00c40074 	movhi	r3,4097
10008628:	18dc7617 	ldw	r3,29144(r3)
1000862c:	18805a2e 	bgeu	r3,r2,10008798 <_malloc_r+0x5e8>
10008630:	00c40074 	movhi	r3,4097
10008634:	189c7615 	stw	r2,29144(r3)
10008638:	00005706 	br	10008798 <_malloc_r+0x5e8>
1000863c:	88c00054 	ori	r3,r17,1
10008640:	80c00115 	stw	r3,4(r16)
10008644:	8463883a 	add	r17,r16,r17
10008648:	10800054 	ori	r2,r2,1
1000864c:	9c400215 	stw	r17,8(r19)
10008650:	88800115 	stw	r2,4(r17)
10008654:	9009883a 	mov	r4,r18
10008658:	000fc400 	call	1000fc40 <__malloc_unlock>
1000865c:	80800204 	addi	r2,r16,8
10008660:	003f7c06 	br	10008454 <_malloc_r+0x2a4>
10008664:	400d883a 	mov	r6,r8
10008668:	003f2106 	br	100082f0 <_malloc_r+0x140>
1000866c:	81000317 	ldw	r4,12(r16)
10008670:	003eee06 	br	1000822c <_malloc_r+0x7c>
10008674:	1006d27a 	srli	r3,r2,9
10008678:	19000168 	cmpgeui	r4,r3,5
1000867c:	20003e26 	beq	r4,zero,10008778 <_malloc_r+0x5c8>
10008680:	19000568 	cmpgeui	r4,r3,21
10008684:	20007a1e 	bne	r4,zero,10008870 <_malloc_r+0x6c0>
10008688:	19401704 	addi	r5,r3,92
1000868c:	280a90fa 	slli	r5,r5,3
10008690:	190016c4 	addi	r4,r3,91
10008694:	994b883a 	add	r5,r19,r5
10008698:	28c00017 	ldw	r3,0(r5)
1000869c:	297ffe04 	addi	r5,r5,-8
100086a0:	28c06226 	beq	r5,r3,1000882c <_malloc_r+0x67c>
100086a4:	01ffff04 	movi	r7,-4
100086a8:	19000117 	ldw	r4,4(r3)
100086ac:	21c8703a 	and	r4,r4,r7
100086b0:	1100022e 	bgeu	r2,r4,100086bc <_malloc_r+0x50c>
100086b4:	18c00217 	ldw	r3,8(r3)
100086b8:	28fffb1e 	bne	r5,r3,100086a8 <_malloc_r+0x4f8>
100086bc:	19400317 	ldw	r5,12(r3)
100086c0:	98800117 	ldw	r2,4(r19)
100086c4:	81400315 	stw	r5,12(r16)
100086c8:	80c00215 	stw	r3,8(r16)
100086cc:	2c000215 	stw	r16,8(r5)
100086d0:	1c000315 	stw	r16,12(r3)
100086d4:	003f2506 	br	1000836c <_malloc_r+0x1bc>
100086d8:	10c00568 	cmpgeui	r3,r2,21
100086dc:	18003826 	beq	r3,zero,100087c0 <_malloc_r+0x610>
100086e0:	10c01568 	cmpgeui	r3,r2,85
100086e4:	1800691e 	bne	r3,zero,1000888c <_malloc_r+0x6dc>
100086e8:	8804d33a 	srli	r2,r17,12
100086ec:	11801bc4 	addi	r6,r2,111
100086f0:	12001b84 	addi	r8,r2,110
100086f4:	300a90fa 	slli	r5,r6,3
100086f8:	003ee606 	br	10008294 <_malloc_r+0xe4>
100086fc:	5ac00044 	addi	r11,r11,1
10008700:	588000cc 	andi	r2,r11,3
10008704:	39c00204 	addi	r7,r7,8
10008708:	103f2d1e 	bne	r2,zero,100083c0 <_malloc_r+0x210>
1000870c:	00003306 	br	100087dc <_malloc_r+0x62c>
10008710:	8085883a 	add	r2,r16,r2
10008714:	10c00117 	ldw	r3,4(r2)
10008718:	81000317 	ldw	r4,12(r16)
1000871c:	81400217 	ldw	r5,8(r16)
10008720:	18c00054 	ori	r3,r3,1
10008724:	10c00115 	stw	r3,4(r2)
10008728:	29000315 	stw	r4,12(r5)
1000872c:	21400215 	stw	r5,8(r4)
10008730:	9009883a 	mov	r4,r18
10008734:	000fc400 	call	1000fc40 <__malloc_unlock>
10008738:	80800204 	addi	r2,r16,8
1000873c:	003f4506 	br	10008454 <_malloc_r+0x2a4>
10008740:	880cd0fa 	srli	r6,r17,3
10008744:	88800204 	addi	r2,r17,8
10008748:	003eae06 	br	10008204 <_malloc_r+0x54>
1000874c:	8085883a 	add	r2,r16,r2
10008750:	10c00117 	ldw	r3,4(r2)
10008754:	9009883a 	mov	r4,r18
10008758:	18c00054 	ori	r3,r3,1
1000875c:	10c00115 	stw	r3,4(r2)
10008760:	000fc400 	call	1000fc40 <__malloc_unlock>
10008764:	80800204 	addi	r2,r16,8
10008768:	003f3a06 	br	10008454 <_malloc_r+0x2a4>
1000876c:	89000054 	ori	r4,r17,1
10008770:	81000115 	stw	r4,4(r16)
10008774:	003f2706 	br	10008414 <_malloc_r+0x264>
10008778:	1006d1ba 	srli	r3,r2,6
1000877c:	19400e44 	addi	r5,r3,57
10008780:	19000e04 	addi	r4,r3,56
10008784:	280a90fa 	slli	r5,r5,3
10008788:	003fc206 	br	10008694 <_malloc_r+0x4e4>
1000878c:	84c04626 	beq	r16,r19,100088a8 <_malloc_r+0x6f8>
10008790:	9c000217 	ldw	r16,8(r19)
10008794:	85000117 	ldw	r20,4(r16)
10008798:	00bfff04 	movi	r2,-4
1000879c:	a0a8703a 	and	r20,r20,r2
100087a0:	a445c83a 	sub	r2,r20,r17
100087a4:	a4400236 	bltu	r20,r17,100087b0 <_malloc_r+0x600>
100087a8:	10c00408 	cmpgei	r3,r2,16
100087ac:	183fa31e 	bne	r3,zero,1000863c <_malloc_r+0x48c>
100087b0:	9009883a 	mov	r4,r18
100087b4:	000fc400 	call	1000fc40 <__malloc_unlock>
100087b8:	0005883a 	mov	r2,zero
100087bc:	003f2506 	br	10008454 <_malloc_r+0x2a4>
100087c0:	11801704 	addi	r6,r2,92
100087c4:	120016c4 	addi	r8,r2,91
100087c8:	300a90fa 	slli	r5,r6,3
100087cc:	003eb106 	br	10008294 <_malloc_r+0xe4>
100087d0:	50800217 	ldw	r2,8(r10)
100087d4:	31bfffc4 	addi	r6,r6,-1
100087d8:	1280701e 	bne	r2,r10,1000899c <_malloc_r+0x7ec>
100087dc:	308000cc 	andi	r2,r6,3
100087e0:	52bffe04 	addi	r10,r10,-8
100087e4:	103ffa1e 	bne	r2,zero,100087d0 <_malloc_r+0x620>
100087e8:	98c00117 	ldw	r3,4(r19)
100087ec:	0104303a 	nor	r2,zero,r4
100087f0:	10c4703a 	and	r2,r2,r3
100087f4:	98800115 	stw	r2,4(r19)
100087f8:	2109883a 	add	r4,r4,r4
100087fc:	113f3136 	bltu	r2,r4,100084c4 <_malloc_r+0x314>
10008800:	203f3026 	beq	r4,zero,100084c4 <_malloc_r+0x314>
10008804:	2086703a 	and	r3,r4,r2
10008808:	1800041e 	bne	r3,zero,1000881c <_malloc_r+0x66c>
1000880c:	2109883a 	add	r4,r4,r4
10008810:	2086703a 	and	r3,r4,r2
10008814:	5ac00104 	addi	r11,r11,4
10008818:	183ffc26 	beq	r3,zero,1000880c <_malloc_r+0x65c>
1000881c:	580d883a 	mov	r6,r11
10008820:	003ee306 	br	100083b0 <_malloc_r+0x200>
10008824:	a5000404 	addi	r20,r20,16
10008828:	003f3906 	br	10008510 <_malloc_r+0x360>
1000882c:	2009d0ba 	srai	r4,r4,2
10008830:	00800044 	movi	r2,1
10008834:	99c00117 	ldw	r7,4(r19)
10008838:	1104983a 	sll	r2,r2,r4
1000883c:	11c4b03a 	or	r2,r2,r7
10008840:	98800115 	stw	r2,4(r19)
10008844:	003f9f06 	br	100086c4 <_malloc_r+0x514>
10008848:	bd05883a 	add	r2,r23,r20
1000884c:	0085c83a 	sub	r2,zero,r2
10008850:	1543ffcc 	andi	r21,r2,4095
10008854:	a80b883a 	mov	r5,r21
10008858:	9009883a 	mov	r4,r18
1000885c:	000a2100 	call	1000a210 <_sbrk_r>
10008860:	10ffffe0 	cmpeqi	r3,r2,-1
10008864:	183f4e26 	beq	r3,zero,100085a0 <_malloc_r+0x3f0>
10008868:	002b883a 	mov	r21,zero
1000886c:	003f4e06 	br	100085a8 <_malloc_r+0x3f8>
10008870:	19001568 	cmpgeui	r4,r3,85
10008874:	2000201e 	bne	r4,zero,100088f8 <_malloc_r+0x748>
10008878:	1006d33a 	srli	r3,r2,12
1000887c:	19401bc4 	addi	r5,r3,111
10008880:	19001b84 	addi	r4,r3,110
10008884:	280a90fa 	slli	r5,r5,3
10008888:	003f8206 	br	10008694 <_malloc_r+0x4e4>
1000888c:	10c05568 	cmpgeui	r3,r2,341
10008890:	1800201e 	bne	r3,zero,10008914 <_malloc_r+0x764>
10008894:	8804d3fa 	srli	r2,r17,15
10008898:	11801e04 	addi	r6,r2,120
1000889c:	12001dc4 	addi	r8,r2,119
100088a0:	300a90fa 	slli	r5,r6,3
100088a4:	003e7b06 	br	10008294 <_malloc_r+0xe4>
100088a8:	00840074 	movhi	r2,4097
100088ac:	10dc8217 	ldw	r3,29192(r2)
100088b0:	a0c7883a 	add	r3,r20,r3
100088b4:	10dc8215 	stw	r3,29192(r2)
100088b8:	003f2306 	br	10008548 <_malloc_r+0x398>
100088bc:	a903ffcc 	andi	r4,r21,4095
100088c0:	203f211e 	bne	r4,zero,10008548 <_malloc_r+0x398>
100088c4:	9c000217 	ldw	r16,8(r19)
100088c8:	b529883a 	add	r20,r22,r20
100088cc:	a5000054 	ori	r20,r20,1
100088d0:	85000115 	stw	r20,4(r16)
100088d4:	003f4e06 	br	10008610 <_malloc_r+0x460>
100088d8:	00840074 	movhi	r2,4097
100088dc:	15d3e215 	stw	r23,20360(r2)
100088e0:	003f2106 	br	10008568 <_malloc_r+0x3b8>
100088e4:	b821883a 	mov	r16,r23
100088e8:	003f4906 	br	10008610 <_malloc_r+0x460>
100088ec:	00800044 	movi	r2,1
100088f0:	b8800115 	stw	r2,4(r23)
100088f4:	003fae06 	br	100087b0 <_malloc_r+0x600>
100088f8:	19005568 	cmpgeui	r4,r3,341
100088fc:	2000191e 	bne	r4,zero,10008964 <_malloc_r+0x7b4>
10008900:	1006d3fa 	srli	r3,r2,15
10008904:	19401e04 	addi	r5,r3,120
10008908:	19001dc4 	addi	r4,r3,119
1000890c:	280a90fa 	slli	r5,r5,3
10008910:	003f6006 	br	10008694 <_malloc_r+0x4e4>
10008914:	10815568 	cmpgeui	r2,r2,1365
10008918:	1000191e 	bne	r2,zero,10008980 <_malloc_r+0x7d0>
1000891c:	8804d4ba 	srli	r2,r17,18
10008920:	11801f44 	addi	r6,r2,125
10008924:	12001f04 	addi	r8,r2,124
10008928:	300a90fa 	slli	r5,r6,3
1000892c:	003e5906 	br	10008294 <_malloc_r+0xe4>
10008930:	e73ffe04 	addi	fp,fp,-8
10008934:	a729883a 	add	r20,r20,fp
10008938:	a5e9c83a 	sub	r20,r20,r23
1000893c:	002b883a 	mov	r21,zero
10008940:	003f1906 	br	100085a8 <_malloc_r+0x3f8>
10008944:	81400204 	addi	r5,r16,8
10008948:	9009883a 	mov	r4,r18
1000894c:	00076a40 	call	100076a4 <_free_r>
10008950:	9c000217 	ldw	r16,8(r19)
10008954:	00840074 	movhi	r2,4097
10008958:	109c8217 	ldw	r2,29192(r2)
1000895c:	85000117 	ldw	r20,4(r16)
10008960:	003f2b06 	br	10008610 <_malloc_r+0x460>
10008964:	18c15568 	cmpgeui	r3,r3,1365
10008968:	1800091e 	bne	r3,zero,10008990 <_malloc_r+0x7e0>
1000896c:	1006d4ba 	srli	r3,r2,18
10008970:	19401f44 	addi	r5,r3,125
10008974:	19001f04 	addi	r4,r3,124
10008978:	280a90fa 	slli	r5,r5,3
1000897c:	003f4506 	br	10008694 <_malloc_r+0x4e4>
10008980:	0140fe04 	movi	r5,1016
10008984:	01801fc4 	movi	r6,127
10008988:	02001f84 	movi	r8,126
1000898c:	003e4106 	br	10008294 <_malloc_r+0xe4>
10008990:	0140fe04 	movi	r5,1016
10008994:	01001f84 	movi	r4,126
10008998:	003f3e06 	br	10008694 <_malloc_r+0x4e4>
1000899c:	98800117 	ldw	r2,4(r19)
100089a0:	003f9506 	br	100087f8 <_malloc_r+0x648>

100089a4 <memchr>:
100089a4:	208000cc 	andi	r2,r4,3
100089a8:	280f883a 	mov	r7,r5
100089ac:	10003526 	beq	r2,zero,10008a84 <memchr+0xe0>
100089b0:	30bfffc4 	addi	r2,r6,-1
100089b4:	30001926 	beq	r6,zero,10008a1c <memchr+0x78>
100089b8:	20c00003 	ldbu	r3,0(r4)
100089bc:	29803fcc 	andi	r6,r5,255
100089c0:	30c0061e 	bne	r6,r3,100089dc <memchr+0x38>
100089c4:	00001706 	br	10008a24 <memchr+0x80>
100089c8:	10bfffc4 	addi	r2,r2,-1
100089cc:	10ffffe0 	cmpeqi	r3,r2,-1
100089d0:	1800121e 	bne	r3,zero,10008a1c <memchr+0x78>
100089d4:	20c00003 	ldbu	r3,0(r4)
100089d8:	19801226 	beq	r3,r6,10008a24 <memchr+0x80>
100089dc:	21000044 	addi	r4,r4,1
100089e0:	20c000cc 	andi	r3,r4,3
100089e4:	183ff81e 	bne	r3,zero,100089c8 <memchr+0x24>
100089e8:	10c00128 	cmpgeui	r3,r2,4
100089ec:	18000f1e 	bne	r3,zero,10008a2c <memchr+0x88>
100089f0:	10000a26 	beq	r2,zero,10008a1c <memchr+0x78>
100089f4:	20c00003 	ldbu	r3,0(r4)
100089f8:	29403fcc 	andi	r5,r5,255
100089fc:	19400926 	beq	r3,r5,10008a24 <memchr+0x80>
10008a00:	2085883a 	add	r2,r4,r2
10008a04:	39403fcc 	andi	r5,r7,255
10008a08:	00000206 	br	10008a14 <memchr+0x70>
10008a0c:	20c00003 	ldbu	r3,0(r4)
10008a10:	19400426 	beq	r3,r5,10008a24 <memchr+0x80>
10008a14:	21000044 	addi	r4,r4,1
10008a18:	113ffc1e 	bne	r2,r4,10008a0c <memchr+0x68>
10008a1c:	0005883a 	mov	r2,zero
10008a20:	f800283a 	ret
10008a24:	2005883a 	mov	r2,r4
10008a28:	f800283a 	ret
10008a2c:	280c923a 	slli	r6,r5,8
10008a30:	2a403fcc 	andi	r9,r5,255
10008a34:	02bfbff4 	movhi	r10,65279
10008a38:	31bfffcc 	andi	r6,r6,65535
10008a3c:	3246b03a 	or	r3,r6,r9
10008a40:	1812943a 	slli	r9,r3,16
10008a44:	02202074 	movhi	r8,32897
10008a48:	52bfbfc4 	addi	r10,r10,-257
10008a4c:	48d2b03a 	or	r9,r9,r3
10008a50:	42202004 	addi	r8,r8,-32640
10008a54:	20c00017 	ldw	r3,0(r4)
10008a58:	48c6f03a 	xor	r3,r9,r3
10008a5c:	1a8d883a 	add	r6,r3,r10
10008a60:	00c6303a 	nor	r3,zero,r3
10008a64:	30c6703a 	and	r3,r6,r3
10008a68:	1a06703a 	and	r3,r3,r8
10008a6c:	183fe11e 	bne	r3,zero,100089f4 <memchr+0x50>
10008a70:	10bfff04 	addi	r2,r2,-4
10008a74:	10c00128 	cmpgeui	r3,r2,4
10008a78:	21000104 	addi	r4,r4,4
10008a7c:	183ff51e 	bne	r3,zero,10008a54 <memchr+0xb0>
10008a80:	003fdb06 	br	100089f0 <memchr+0x4c>
10008a84:	3005883a 	mov	r2,r6
10008a88:	003fd706 	br	100089e8 <memchr+0x44>

10008a8c <memmove>:
10008a8c:	2005883a 	mov	r2,r4
10008a90:	29000a2e 	bgeu	r5,r4,10008abc <memmove+0x30>
10008a94:	2989883a 	add	r4,r5,r6
10008a98:	1100082e 	bgeu	r2,r4,10008abc <memmove+0x30>
10008a9c:	1187883a 	add	r3,r2,r6
10008aa0:	30003e26 	beq	r6,zero,10008b9c <memmove+0x110>
10008aa4:	213fffc4 	addi	r4,r4,-1
10008aa8:	21400003 	ldbu	r5,0(r4)
10008aac:	18ffffc4 	addi	r3,r3,-1
10008ab0:	19400005 	stb	r5,0(r3)
10008ab4:	10fffb1e 	bne	r2,r3,10008aa4 <memmove+0x18>
10008ab8:	f800283a 	ret
10008abc:	30c00430 	cmpltui	r3,r6,16
10008ac0:	18000b26 	beq	r3,zero,10008af0 <memmove+0x64>
10008ac4:	1007883a 	mov	r3,r2
10008ac8:	31ffffc4 	addi	r7,r6,-1
10008acc:	30003726 	beq	r6,zero,10008bac <memmove+0x120>
10008ad0:	39c00044 	addi	r7,r7,1
10008ad4:	29cf883a 	add	r7,r5,r7
10008ad8:	29400044 	addi	r5,r5,1
10008adc:	29bfffc3 	ldbu	r6,-1(r5)
10008ae0:	18c00044 	addi	r3,r3,1
10008ae4:	19bfffc5 	stb	r6,-1(r3)
10008ae8:	29fffb1e 	bne	r5,r7,10008ad8 <memmove+0x4c>
10008aec:	f800283a 	ret
10008af0:	2886b03a 	or	r3,r5,r2
10008af4:	18c000cc 	andi	r3,r3,3
10008af8:	1800291e 	bne	r3,zero,10008ba0 <memmove+0x114>
10008afc:	327ffc04 	addi	r9,r6,-16
10008b00:	4812d13a 	srli	r9,r9,4
10008b04:	280f883a 	mov	r7,r5
10008b08:	1007883a 	mov	r3,r2
10008b0c:	4a400044 	addi	r9,r9,1
10008b10:	4812913a 	slli	r9,r9,4
10008b14:	1251883a 	add	r8,r2,r9
10008b18:	39000017 	ldw	r4,0(r7)
10008b1c:	18c00404 	addi	r3,r3,16
10008b20:	39c00404 	addi	r7,r7,16
10008b24:	193ffc15 	stw	r4,-16(r3)
10008b28:	393ffd17 	ldw	r4,-12(r7)
10008b2c:	193ffd15 	stw	r4,-12(r3)
10008b30:	393ffe17 	ldw	r4,-8(r7)
10008b34:	193ffe15 	stw	r4,-8(r3)
10008b38:	393fff17 	ldw	r4,-4(r7)
10008b3c:	193fff15 	stw	r4,-4(r3)
10008b40:	40fff51e 	bne	r8,r3,10008b18 <memmove+0x8c>
10008b44:	3100030c 	andi	r4,r6,12
10008b48:	2a4b883a 	add	r5,r5,r9
10008b4c:	320003cc 	andi	r8,r6,15
10008b50:	20001726 	beq	r4,zero,10008bb0 <memmove+0x124>
10008b54:	2813883a 	mov	r9,r5
10008b58:	180f883a 	mov	r7,r3
10008b5c:	4a400104 	addi	r9,r9,4
10008b60:	39c00104 	addi	r7,r7,4
10008b64:	4abfff17 	ldw	r10,-4(r9)
10008b68:	41c9c83a 	sub	r4,r8,r7
10008b6c:	1909883a 	add	r4,r3,r4
10008b70:	3abfff15 	stw	r10,-4(r7)
10008b74:	21000128 	cmpgeui	r4,r4,4
10008b78:	203ff81e 	bne	r4,zero,10008b5c <memmove+0xd0>
10008b7c:	413fff04 	addi	r4,r8,-4
10008b80:	2008d0ba 	srli	r4,r4,2
10008b84:	318000cc 	andi	r6,r6,3
10008b88:	21000044 	addi	r4,r4,1
10008b8c:	200890ba 	slli	r4,r4,2
10008b90:	1907883a 	add	r3,r3,r4
10008b94:	290b883a 	add	r5,r5,r4
10008b98:	003fcb06 	br	10008ac8 <memmove+0x3c>
10008b9c:	f800283a 	ret
10008ba0:	31ffffc4 	addi	r7,r6,-1
10008ba4:	1007883a 	mov	r3,r2
10008ba8:	003fc906 	br	10008ad0 <memmove+0x44>
10008bac:	f800283a 	ret
10008bb0:	400d883a 	mov	r6,r8
10008bb4:	003fc406 	br	10008ac8 <memmove+0x3c>

10008bb8 <memset>:
10008bb8:	20c000cc 	andi	r3,r4,3
10008bbc:	2005883a 	mov	r2,r4
10008bc0:	18003626 	beq	r3,zero,10008c9c <memset+0xe4>
10008bc4:	31ffffc4 	addi	r7,r6,-1
10008bc8:	30003326 	beq	r6,zero,10008c98 <memset+0xe0>
10008bcc:	2811883a 	mov	r8,r5
10008bd0:	2007883a 	mov	r3,r4
10008bd4:	00000306 	br	10008be4 <memset+0x2c>
10008bd8:	39ffffc4 	addi	r7,r7,-1
10008bdc:	39bfffe0 	cmpeqi	r6,r7,-1
10008be0:	30002d1e 	bne	r6,zero,10008c98 <memset+0xe0>
10008be4:	18c00044 	addi	r3,r3,1
10008be8:	1a3fffc5 	stb	r8,-1(r3)
10008bec:	198000cc 	andi	r6,r3,3
10008bf0:	303ff91e 	bne	r6,zero,10008bd8 <memset+0x20>
10008bf4:	39000130 	cmpltui	r4,r7,4
10008bf8:	2000221e 	bne	r4,zero,10008c84 <memset+0xcc>
10008bfc:	29003fcc 	andi	r4,r5,255
10008c00:	200c923a 	slli	r6,r4,8
10008c04:	3a000430 	cmpltui	r8,r7,16
10008c08:	3108b03a 	or	r4,r6,r4
10008c0c:	200c943a 	slli	r6,r4,16
10008c10:	310cb03a 	or	r6,r6,r4
10008c14:	40000e1e 	bne	r8,zero,10008c50 <memset+0x98>
10008c18:	3a3ffc04 	addi	r8,r7,-16
10008c1c:	4010d13a 	srli	r8,r8,4
10008c20:	42000044 	addi	r8,r8,1
10008c24:	4010913a 	slli	r8,r8,4
10008c28:	1a11883a 	add	r8,r3,r8
10008c2c:	19800015 	stw	r6,0(r3)
10008c30:	19800115 	stw	r6,4(r3)
10008c34:	19800215 	stw	r6,8(r3)
10008c38:	18c00404 	addi	r3,r3,16
10008c3c:	19bfff15 	stw	r6,-4(r3)
10008c40:	40fffa1e 	bne	r8,r3,10008c2c <memset+0x74>
10008c44:	3900030c 	andi	r4,r7,12
10008c48:	39c003cc 	andi	r7,r7,15
10008c4c:	20000d26 	beq	r4,zero,10008c84 <memset+0xcc>
10008c50:	1809883a 	mov	r4,r3
10008c54:	21000104 	addi	r4,r4,4
10008c58:	3911c83a 	sub	r8,r7,r4
10008c5c:	1a11883a 	add	r8,r3,r8
10008c60:	21bfff15 	stw	r6,-4(r4)
10008c64:	42000128 	cmpgeui	r8,r8,4
10008c68:	403ffa1e 	bne	r8,zero,10008c54 <memset+0x9c>
10008c6c:	393fff04 	addi	r4,r7,-4
10008c70:	2008d0ba 	srli	r4,r4,2
10008c74:	39c000cc 	andi	r7,r7,3
10008c78:	21000044 	addi	r4,r4,1
10008c7c:	200890ba 	slli	r4,r4,2
10008c80:	1907883a 	add	r3,r3,r4
10008c84:	38000426 	beq	r7,zero,10008c98 <memset+0xe0>
10008c88:	19cf883a 	add	r7,r3,r7
10008c8c:	18c00044 	addi	r3,r3,1
10008c90:	197fffc5 	stb	r5,-1(r3)
10008c94:	38fffd1e 	bne	r7,r3,10008c8c <memset+0xd4>
10008c98:	f800283a 	ret
10008c9c:	2007883a 	mov	r3,r4
10008ca0:	300f883a 	mov	r7,r6
10008ca4:	003fd306 	br	10008bf4 <memset+0x3c>

10008ca8 <_Balloc>:
10008ca8:	20801317 	ldw	r2,76(r4)
10008cac:	defffc04 	addi	sp,sp,-16
10008cb0:	dc400115 	stw	r17,4(sp)
10008cb4:	dc000015 	stw	r16,0(sp)
10008cb8:	dfc00315 	stw	ra,12(sp)
10008cbc:	dc800215 	stw	r18,8(sp)
10008cc0:	2021883a 	mov	r16,r4
10008cc4:	2823883a 	mov	r17,r5
10008cc8:	10000e26 	beq	r2,zero,10008d04 <_Balloc+0x5c>
10008ccc:	880690ba 	slli	r3,r17,2
10008cd0:	10c7883a 	add	r3,r2,r3
10008cd4:	18800017 	ldw	r2,0(r3)
10008cd8:	10001126 	beq	r2,zero,10008d20 <_Balloc+0x78>
10008cdc:	11000017 	ldw	r4,0(r2)
10008ce0:	19000015 	stw	r4,0(r3)
10008ce4:	10000415 	stw	zero,16(r2)
10008ce8:	10000315 	stw	zero,12(r2)
10008cec:	dfc00317 	ldw	ra,12(sp)
10008cf0:	dc800217 	ldw	r18,8(sp)
10008cf4:	dc400117 	ldw	r17,4(sp)
10008cf8:	dc000017 	ldw	r16,0(sp)
10008cfc:	dec00404 	addi	sp,sp,16
10008d00:	f800283a 	ret
10008d04:	01800844 	movi	r6,33
10008d08:	01400104 	movi	r5,4
10008d0c:	000b9740 	call	1000b974 <_calloc_r>
10008d10:	80801315 	stw	r2,76(r16)
10008d14:	103fed1e 	bne	r2,zero,10008ccc <_Balloc+0x24>
10008d18:	0005883a 	mov	r2,zero
10008d1c:	003ff306 	br	10008cec <_Balloc+0x44>
10008d20:	04800044 	movi	r18,1
10008d24:	9464983a 	sll	r18,r18,r17
10008d28:	01400044 	movi	r5,1
10008d2c:	8009883a 	mov	r4,r16
10008d30:	91800144 	addi	r6,r18,5
10008d34:	300c90ba 	slli	r6,r6,2
10008d38:	000b9740 	call	1000b974 <_calloc_r>
10008d3c:	103ff626 	beq	r2,zero,10008d18 <_Balloc+0x70>
10008d40:	14400115 	stw	r17,4(r2)
10008d44:	14800215 	stw	r18,8(r2)
10008d48:	003fe606 	br	10008ce4 <_Balloc+0x3c>

10008d4c <_Bfree>:
10008d4c:	28000726 	beq	r5,zero,10008d6c <_Bfree+0x20>
10008d50:	28c00117 	ldw	r3,4(r5)
10008d54:	20801317 	ldw	r2,76(r4)
10008d58:	180690ba 	slli	r3,r3,2
10008d5c:	10c5883a 	add	r2,r2,r3
10008d60:	10c00017 	ldw	r3,0(r2)
10008d64:	28c00015 	stw	r3,0(r5)
10008d68:	11400015 	stw	r5,0(r2)
10008d6c:	f800283a 	ret

10008d70 <__multadd>:
10008d70:	defffa04 	addi	sp,sp,-24
10008d74:	dc800315 	stw	r18,12(sp)
10008d78:	dc400215 	stw	r17,8(sp)
10008d7c:	dc000115 	stw	r16,4(sp)
10008d80:	2823883a 	mov	r17,r5
10008d84:	2c000417 	ldw	r16,16(r5)
10008d88:	2025883a 	mov	r18,r4
10008d8c:	dfc00515 	stw	ra,20(sp)
10008d90:	29000504 	addi	r4,r5,20
10008d94:	dcc00415 	stw	r19,16(sp)
10008d98:	000b883a 	mov	r5,zero
10008d9c:	20800017 	ldw	r2,0(r4)
10008da0:	21000104 	addi	r4,r4,4
10008da4:	29400044 	addi	r5,r5,1
10008da8:	10ffffcc 	andi	r3,r2,65535
10008dac:	1987383a 	mul	r3,r3,r6
10008db0:	1004d43a 	srli	r2,r2,16
10008db4:	19cf883a 	add	r7,r3,r7
10008db8:	1185383a 	mul	r2,r2,r6
10008dbc:	3810d43a 	srli	r8,r7,16
10008dc0:	38ffffcc 	andi	r3,r7,65535
10008dc4:	120f883a 	add	r7,r2,r8
10008dc8:	3804943a 	slli	r2,r7,16
10008dcc:	380ed43a 	srli	r7,r7,16
10008dd0:	10c7883a 	add	r3,r2,r3
10008dd4:	20ffff15 	stw	r3,-4(r4)
10008dd8:	2c3ff016 	blt	r5,r16,10008d9c <__multadd+0x2c>
10008ddc:	38000826 	beq	r7,zero,10008e00 <__multadd+0x90>
10008de0:	88800217 	ldw	r2,8(r17)
10008de4:	80800e0e 	bge	r16,r2,10008e20 <__multadd+0xb0>
10008de8:	80800144 	addi	r2,r16,5
10008dec:	100490ba 	slli	r2,r2,2
10008df0:	84000044 	addi	r16,r16,1
10008df4:	8885883a 	add	r2,r17,r2
10008df8:	11c00015 	stw	r7,0(r2)
10008dfc:	8c000415 	stw	r16,16(r17)
10008e00:	8805883a 	mov	r2,r17
10008e04:	dfc00517 	ldw	ra,20(sp)
10008e08:	dcc00417 	ldw	r19,16(sp)
10008e0c:	dc800317 	ldw	r18,12(sp)
10008e10:	dc400217 	ldw	r17,8(sp)
10008e14:	dc000117 	ldw	r16,4(sp)
10008e18:	dec00604 	addi	sp,sp,24
10008e1c:	f800283a 	ret
10008e20:	89400117 	ldw	r5,4(r17)
10008e24:	9009883a 	mov	r4,r18
10008e28:	d9c00015 	stw	r7,0(sp)
10008e2c:	29400044 	addi	r5,r5,1
10008e30:	0008ca80 	call	10008ca8 <_Balloc>
10008e34:	89800417 	ldw	r6,16(r17)
10008e38:	89400304 	addi	r5,r17,12
10008e3c:	11000304 	addi	r4,r2,12
10008e40:	31800084 	addi	r6,r6,2
10008e44:	300c90ba 	slli	r6,r6,2
10008e48:	1027883a 	mov	r19,r2
10008e4c:	00030480 	call	10003048 <memcpy>
10008e50:	d9c00017 	ldw	r7,0(sp)
10008e54:	88000926 	beq	r17,zero,10008e7c <__multadd+0x10c>
10008e58:	88c00117 	ldw	r3,4(r17)
10008e5c:	90801317 	ldw	r2,76(r18)
10008e60:	180690ba 	slli	r3,r3,2
10008e64:	10c5883a 	add	r2,r2,r3
10008e68:	10c00017 	ldw	r3,0(r2)
10008e6c:	88c00015 	stw	r3,0(r17)
10008e70:	14400015 	stw	r17,0(r2)
10008e74:	9823883a 	mov	r17,r19
10008e78:	003fdb06 	br	10008de8 <__multadd+0x78>
10008e7c:	9823883a 	mov	r17,r19
10008e80:	003fd906 	br	10008de8 <__multadd+0x78>

10008e84 <__s2b>:
10008e84:	defff904 	addi	sp,sp,-28
10008e88:	dc800215 	stw	r18,8(sp)
10008e8c:	dc000015 	stw	r16,0(sp)
10008e90:	2025883a 	mov	r18,r4
10008e94:	2821883a 	mov	r16,r5
10008e98:	39000204 	addi	r4,r7,8
10008e9c:	01400244 	movi	r5,9
10008ea0:	dcc00315 	stw	r19,12(sp)
10008ea4:	dc400115 	stw	r17,4(sp)
10008ea8:	dfc00615 	stw	ra,24(sp)
10008eac:	3823883a 	mov	r17,r7
10008eb0:	dd400515 	stw	r21,20(sp)
10008eb4:	dd000415 	stw	r20,16(sp)
10008eb8:	3027883a 	mov	r19,r6
10008ebc:	000cdbc0 	call	1000cdbc <__divsi3>
10008ec0:	88c00290 	cmplti	r3,r17,10
10008ec4:	1800311e 	bne	r3,zero,10008f8c <__s2b+0x108>
10008ec8:	00c00044 	movi	r3,1
10008ecc:	000b883a 	mov	r5,zero
10008ed0:	18c7883a 	add	r3,r3,r3
10008ed4:	29400044 	addi	r5,r5,1
10008ed8:	18bffd16 	blt	r3,r2,10008ed0 <__s2b+0x4c>
10008edc:	9009883a 	mov	r4,r18
10008ee0:	0008ca80 	call	10008ca8 <_Balloc>
10008ee4:	d8c00717 	ldw	r3,28(sp)
10008ee8:	10c00515 	stw	r3,20(r2)
10008eec:	00c00044 	movi	r3,1
10008ef0:	10c00415 	stw	r3,16(r2)
10008ef4:	98c00290 	cmplti	r3,r19,10
10008ef8:	1800211e 	bne	r3,zero,10008f80 <__s2b+0xfc>
10008efc:	85400244 	addi	r21,r16,9
10008f00:	84e9883a 	add	r20,r16,r19
10008f04:	a821883a 	mov	r16,r21
10008f08:	84000044 	addi	r16,r16,1
10008f0c:	81ffffc7 	ldb	r7,-1(r16)
10008f10:	01800284 	movi	r6,10
10008f14:	100b883a 	mov	r5,r2
10008f18:	39fff404 	addi	r7,r7,-48
10008f1c:	9009883a 	mov	r4,r18
10008f20:	0008d700 	call	10008d70 <__multadd>
10008f24:	a43ff81e 	bne	r20,r16,10008f08 <__s2b+0x84>
10008f28:	9c3ffe04 	addi	r16,r19,-8
10008f2c:	ac21883a 	add	r16,r21,r16
10008f30:	9c400a0e 	bge	r19,r17,10008f5c <__s2b+0xd8>
10008f34:	8ce3c83a 	sub	r17,r17,r19
10008f38:	8463883a 	add	r17,r16,r17
10008f3c:	84000044 	addi	r16,r16,1
10008f40:	81ffffc7 	ldb	r7,-1(r16)
10008f44:	01800284 	movi	r6,10
10008f48:	100b883a 	mov	r5,r2
10008f4c:	39fff404 	addi	r7,r7,-48
10008f50:	9009883a 	mov	r4,r18
10008f54:	0008d700 	call	10008d70 <__multadd>
10008f58:	8c3ff81e 	bne	r17,r16,10008f3c <__s2b+0xb8>
10008f5c:	dfc00617 	ldw	ra,24(sp)
10008f60:	dd400517 	ldw	r21,20(sp)
10008f64:	dd000417 	ldw	r20,16(sp)
10008f68:	dcc00317 	ldw	r19,12(sp)
10008f6c:	dc800217 	ldw	r18,8(sp)
10008f70:	dc400117 	ldw	r17,4(sp)
10008f74:	dc000017 	ldw	r16,0(sp)
10008f78:	dec00704 	addi	sp,sp,28
10008f7c:	f800283a 	ret
10008f80:	84000284 	addi	r16,r16,10
10008f84:	04c00244 	movi	r19,9
10008f88:	003fe906 	br	10008f30 <__s2b+0xac>
10008f8c:	000b883a 	mov	r5,zero
10008f90:	003fd206 	br	10008edc <__s2b+0x58>

10008f94 <__hi0bits>:
10008f94:	20bfffec 	andhi	r2,r4,65535
10008f98:	1000131e 	bne	r2,zero,10008fe8 <__hi0bits+0x54>
10008f9c:	2008943a 	slli	r4,r4,16
10008fa0:	00800404 	movi	r2,16
10008fa4:	20ffc02c 	andhi	r3,r4,65280
10008fa8:	1800021e 	bne	r3,zero,10008fb4 <__hi0bits+0x20>
10008fac:	2008923a 	slli	r4,r4,8
10008fb0:	10800204 	addi	r2,r2,8
10008fb4:	20fc002c 	andhi	r3,r4,61440
10008fb8:	1800021e 	bne	r3,zero,10008fc4 <__hi0bits+0x30>
10008fbc:	2008913a 	slli	r4,r4,4
10008fc0:	10800104 	addi	r2,r2,4
10008fc4:	20f0002c 	andhi	r3,r4,49152
10008fc8:	1800021e 	bne	r3,zero,10008fd4 <__hi0bits+0x40>
10008fcc:	200890ba 	slli	r4,r4,2
10008fd0:	10800084 	addi	r2,r2,2
10008fd4:	20000316 	blt	r4,zero,10008fe4 <__hi0bits+0x50>
10008fd8:	2110002c 	andhi	r4,r4,16384
10008fdc:	10800044 	addi	r2,r2,1
10008fe0:	20000326 	beq	r4,zero,10008ff0 <__hi0bits+0x5c>
10008fe4:	f800283a 	ret
10008fe8:	0005883a 	mov	r2,zero
10008fec:	003fed06 	br	10008fa4 <__hi0bits+0x10>
10008ff0:	00800804 	movi	r2,32
10008ff4:	f800283a 	ret

10008ff8 <__lo0bits>:
10008ff8:	20c00017 	ldw	r3,0(r4)
10008ffc:	188001cc 	andi	r2,r3,7
10009000:	10000826 	beq	r2,zero,10009024 <__lo0bits+0x2c>
10009004:	1880004c 	andi	r2,r3,1
10009008:	10001f1e 	bne	r2,zero,10009088 <__lo0bits+0x90>
1000900c:	1880008c 	andi	r2,r3,2
10009010:	10002126 	beq	r2,zero,10009098 <__lo0bits+0xa0>
10009014:	1806d07a 	srli	r3,r3,1
10009018:	00800044 	movi	r2,1
1000901c:	20c00015 	stw	r3,0(r4)
10009020:	f800283a 	ret
10009024:	18bfffcc 	andi	r2,r3,65535
10009028:	1000151e 	bne	r2,zero,10009080 <__lo0bits+0x88>
1000902c:	1806d43a 	srli	r3,r3,16
10009030:	00800404 	movi	r2,16
10009034:	19403fcc 	andi	r5,r3,255
10009038:	2800021e 	bne	r5,zero,10009044 <__lo0bits+0x4c>
1000903c:	1806d23a 	srli	r3,r3,8
10009040:	10800204 	addi	r2,r2,8
10009044:	194003cc 	andi	r5,r3,15
10009048:	2800021e 	bne	r5,zero,10009054 <__lo0bits+0x5c>
1000904c:	1806d13a 	srli	r3,r3,4
10009050:	10800104 	addi	r2,r2,4
10009054:	194000cc 	andi	r5,r3,3
10009058:	2800021e 	bne	r5,zero,10009064 <__lo0bits+0x6c>
1000905c:	1806d0ba 	srli	r3,r3,2
10009060:	10800084 	addi	r2,r2,2
10009064:	1940004c 	andi	r5,r3,1
10009068:	2800031e 	bne	r5,zero,10009078 <__lo0bits+0x80>
1000906c:	1806d07a 	srli	r3,r3,1
10009070:	10800044 	addi	r2,r2,1
10009074:	18000626 	beq	r3,zero,10009090 <__lo0bits+0x98>
10009078:	20c00015 	stw	r3,0(r4)
1000907c:	f800283a 	ret
10009080:	0005883a 	mov	r2,zero
10009084:	003feb06 	br	10009034 <__lo0bits+0x3c>
10009088:	0005883a 	mov	r2,zero
1000908c:	f800283a 	ret
10009090:	00800804 	movi	r2,32
10009094:	f800283a 	ret
10009098:	1806d0ba 	srli	r3,r3,2
1000909c:	00800084 	movi	r2,2
100090a0:	20c00015 	stw	r3,0(r4)
100090a4:	f800283a 	ret

100090a8 <__i2b>:
100090a8:	defffe04 	addi	sp,sp,-8
100090ac:	dc000015 	stw	r16,0(sp)
100090b0:	2821883a 	mov	r16,r5
100090b4:	01400044 	movi	r5,1
100090b8:	dfc00115 	stw	ra,4(sp)
100090bc:	0008ca80 	call	10008ca8 <_Balloc>
100090c0:	01000044 	movi	r4,1
100090c4:	14000515 	stw	r16,20(r2)
100090c8:	11000415 	stw	r4,16(r2)
100090cc:	dfc00117 	ldw	ra,4(sp)
100090d0:	dc000017 	ldw	r16,0(sp)
100090d4:	dec00204 	addi	sp,sp,8
100090d8:	f800283a 	ret

100090dc <__multiply>:
100090dc:	defffa04 	addi	sp,sp,-24
100090e0:	dd000415 	stw	r20,16(sp)
100090e4:	dcc00315 	stw	r19,12(sp)
100090e8:	35000417 	ldw	r20,16(r6)
100090ec:	2cc00417 	ldw	r19,16(r5)
100090f0:	dc800215 	stw	r18,8(sp)
100090f4:	dc400115 	stw	r17,4(sp)
100090f8:	dfc00515 	stw	ra,20(sp)
100090fc:	dc000015 	stw	r16,0(sp)
10009100:	2823883a 	mov	r17,r5
10009104:	3025883a 	mov	r18,r6
10009108:	9d000516 	blt	r19,r20,10009120 <__multiply+0x44>
1000910c:	a007883a 	mov	r3,r20
10009110:	2825883a 	mov	r18,r5
10009114:	9829883a 	mov	r20,r19
10009118:	3023883a 	mov	r17,r6
1000911c:	1827883a 	mov	r19,r3
10009120:	90800217 	ldw	r2,8(r18)
10009124:	a4e1883a 	add	r16,r20,r19
10009128:	91400117 	ldw	r5,4(r18)
1000912c:	1400010e 	bge	r2,r16,10009134 <__multiply+0x58>
10009130:	29400044 	addi	r5,r5,1
10009134:	0008ca80 	call	10008ca8 <_Balloc>
10009138:	801290ba 	slli	r9,r16,2
1000913c:	12800504 	addi	r10,r2,20
10009140:	5007883a 	mov	r3,r10
10009144:	5253883a 	add	r9,r10,r9
10009148:	5240032e 	bgeu	r10,r9,10009158 <__multiply+0x7c>
1000914c:	18000015 	stw	zero,0(r3)
10009150:	18c00104 	addi	r3,r3,4
10009154:	1a7ffd36 	bltu	r3,r9,1000914c <__multiply+0x70>
10009158:	981690ba 	slli	r11,r19,2
1000915c:	a01090ba 	slli	r8,r20,2
10009160:	89400504 	addi	r5,r17,20
10009164:	91800504 	addi	r6,r18,20
10009168:	2ad7883a 	add	r11,r5,r11
1000916c:	3211883a 	add	r8,r6,r8
10009170:	2ac00636 	bltu	r5,r11,1000918c <__multiply+0xb0>
10009174:	00004106 	br	1000927c <__multiply+0x1a0>
10009178:	701cd43a 	srli	r14,r14,16
1000917c:	7000221e 	bne	r14,zero,10009208 <__multiply+0x12c>
10009180:	29400104 	addi	r5,r5,4
10009184:	52800104 	addi	r10,r10,4
10009188:	2ac03c2e 	bgeu	r5,r11,1000927c <__multiply+0x1a0>
1000918c:	2b800017 	ldw	r14,0(r5)
10009190:	73ffffcc 	andi	r15,r14,65535
10009194:	783ff826 	beq	r15,zero,10009178 <__multiply+0x9c>
10009198:	501b883a 	mov	r13,r10
1000919c:	301d883a 	mov	r14,r6
100091a0:	003f883a 	mov	ra,zero
100091a4:	71000017 	ldw	r4,0(r14)
100091a8:	6b000017 	ldw	r12,0(r13)
100091ac:	6b400104 	addi	r13,r13,4
100091b0:	21ffffcc 	andi	r7,r4,65535
100091b4:	3bcf383a 	mul	r7,r7,r15
100091b8:	2006d43a 	srli	r3,r4,16
100091bc:	613fffcc 	andi	r4,r12,65535
100091c0:	390f883a 	add	r7,r7,r4
100091c4:	3fcf883a 	add	r7,r7,ra
100091c8:	1bc7383a 	mul	r3,r3,r15
100091cc:	6018d43a 	srli	r12,r12,16
100091d0:	3808d43a 	srli	r4,r7,16
100091d4:	39ffffcc 	andi	r7,r7,65535
100091d8:	1b07883a 	add	r3,r3,r12
100091dc:	1907883a 	add	r3,r3,r4
100091e0:	1808943a 	slli	r4,r3,16
100091e4:	73800104 	addi	r14,r14,4
100091e8:	183ed43a 	srli	ra,r3,16
100091ec:	21ceb03a 	or	r7,r4,r7
100091f0:	69ffff15 	stw	r7,-4(r13)
100091f4:	723feb36 	bltu	r14,r8,100091a4 <__multiply+0xc8>
100091f8:	6fc00015 	stw	ra,0(r13)
100091fc:	2b800017 	ldw	r14,0(r5)
10009200:	701cd43a 	srli	r14,r14,16
10009204:	703fde26 	beq	r14,zero,10009180 <__multiply+0xa4>
10009208:	50c00017 	ldw	r3,0(r10)
1000920c:	501b883a 	mov	r13,r10
10009210:	3019883a 	mov	r12,r6
10009214:	180f883a 	mov	r7,r3
10009218:	001f883a 	mov	r15,zero
1000921c:	6100000b 	ldhu	r4,0(r12)
10009220:	380ed43a 	srli	r7,r7,16
10009224:	18ffffcc 	andi	r3,r3,65535
10009228:	2389383a 	mul	r4,r4,r14
1000922c:	6b400104 	addi	r13,r13,4
10009230:	63000104 	addi	r12,r12,4
10009234:	21c9883a 	add	r4,r4,r7
10009238:	23c9883a 	add	r4,r4,r15
1000923c:	201e943a 	slli	r15,r4,16
10009240:	69c00017 	ldw	r7,0(r13)
10009244:	2008d43a 	srli	r4,r4,16
10009248:	78c6b03a 	or	r3,r15,r3
1000924c:	68ffff15 	stw	r3,-4(r13)
10009250:	60ffff8b 	ldhu	r3,-2(r12)
10009254:	3bffffcc 	andi	r15,r7,65535
10009258:	1b87383a 	mul	r3,r3,r14
1000925c:	1bc7883a 	add	r3,r3,r15
10009260:	1907883a 	add	r3,r3,r4
10009264:	181ed43a 	srli	r15,r3,16
10009268:	623fec36 	bltu	r12,r8,1000921c <__multiply+0x140>
1000926c:	68c00015 	stw	r3,0(r13)
10009270:	29400104 	addi	r5,r5,4
10009274:	52800104 	addi	r10,r10,4
10009278:	2affc436 	bltu	r5,r11,1000918c <__multiply+0xb0>
1000927c:	0400090e 	bge	zero,r16,100092a4 <__multiply+0x1c8>
10009280:	48ffff17 	ldw	r3,-4(r9)
10009284:	4a7fff04 	addi	r9,r9,-4
10009288:	18000326 	beq	r3,zero,10009298 <__multiply+0x1bc>
1000928c:	00000506 	br	100092a4 <__multiply+0x1c8>
10009290:	48c00017 	ldw	r3,0(r9)
10009294:	1800031e 	bne	r3,zero,100092a4 <__multiply+0x1c8>
10009298:	843fffc4 	addi	r16,r16,-1
1000929c:	4a7fff04 	addi	r9,r9,-4
100092a0:	803ffb1e 	bne	r16,zero,10009290 <__multiply+0x1b4>
100092a4:	14000415 	stw	r16,16(r2)
100092a8:	dfc00517 	ldw	ra,20(sp)
100092ac:	dd000417 	ldw	r20,16(sp)
100092b0:	dcc00317 	ldw	r19,12(sp)
100092b4:	dc800217 	ldw	r18,8(sp)
100092b8:	dc400117 	ldw	r17,4(sp)
100092bc:	dc000017 	ldw	r16,0(sp)
100092c0:	dec00604 	addi	sp,sp,24
100092c4:	f800283a 	ret

100092c8 <__pow5mult>:
100092c8:	defffb04 	addi	sp,sp,-20
100092cc:	dcc00315 	stw	r19,12(sp)
100092d0:	dc000015 	stw	r16,0(sp)
100092d4:	dfc00415 	stw	ra,16(sp)
100092d8:	dc800215 	stw	r18,8(sp)
100092dc:	dc400115 	stw	r17,4(sp)
100092e0:	308000cc 	andi	r2,r6,3
100092e4:	3021883a 	mov	r16,r6
100092e8:	2027883a 	mov	r19,r4
100092ec:	10002d1e 	bne	r2,zero,100093a4 <__pow5mult+0xdc>
100092f0:	2825883a 	mov	r18,r5
100092f4:	8021d0ba 	srai	r16,r16,2
100092f8:	80001926 	beq	r16,zero,10009360 <__pow5mult+0x98>
100092fc:	9c401217 	ldw	r17,72(r19)
10009300:	8800061e 	bne	r17,zero,1000931c <__pow5mult+0x54>
10009304:	00002f06 	br	100093c4 <__pow5mult+0xfc>
10009308:	8021d07a 	srai	r16,r16,1
1000930c:	80001426 	beq	r16,zero,10009360 <__pow5mult+0x98>
10009310:	88800017 	ldw	r2,0(r17)
10009314:	10001a26 	beq	r2,zero,10009380 <__pow5mult+0xb8>
10009318:	1023883a 	mov	r17,r2
1000931c:	8080004c 	andi	r2,r16,1
10009320:	103ff926 	beq	r2,zero,10009308 <__pow5mult+0x40>
10009324:	880d883a 	mov	r6,r17
10009328:	900b883a 	mov	r5,r18
1000932c:	9809883a 	mov	r4,r19
10009330:	00090dc0 	call	100090dc <__multiply>
10009334:	90001926 	beq	r18,zero,1000939c <__pow5mult+0xd4>
10009338:	91000117 	ldw	r4,4(r18)
1000933c:	98c01317 	ldw	r3,76(r19)
10009340:	8021d07a 	srai	r16,r16,1
10009344:	200890ba 	slli	r4,r4,2
10009348:	1907883a 	add	r3,r3,r4
1000934c:	19000017 	ldw	r4,0(r3)
10009350:	91000015 	stw	r4,0(r18)
10009354:	1c800015 	stw	r18,0(r3)
10009358:	1025883a 	mov	r18,r2
1000935c:	803fec1e 	bne	r16,zero,10009310 <__pow5mult+0x48>
10009360:	9005883a 	mov	r2,r18
10009364:	dfc00417 	ldw	ra,16(sp)
10009368:	dcc00317 	ldw	r19,12(sp)
1000936c:	dc800217 	ldw	r18,8(sp)
10009370:	dc400117 	ldw	r17,4(sp)
10009374:	dc000017 	ldw	r16,0(sp)
10009378:	dec00504 	addi	sp,sp,20
1000937c:	f800283a 	ret
10009380:	880d883a 	mov	r6,r17
10009384:	880b883a 	mov	r5,r17
10009388:	9809883a 	mov	r4,r19
1000938c:	00090dc0 	call	100090dc <__multiply>
10009390:	88800015 	stw	r2,0(r17)
10009394:	10000015 	stw	zero,0(r2)
10009398:	003fdf06 	br	10009318 <__pow5mult+0x50>
1000939c:	1025883a 	mov	r18,r2
100093a0:	003fd906 	br	10009308 <__pow5mult+0x40>
100093a4:	100490ba 	slli	r2,r2,2
100093a8:	00c40074 	movhi	r3,4097
100093ac:	000f883a 	mov	r7,zero
100093b0:	10c7883a 	add	r3,r2,r3
100093b4:	198a2317 	ldw	r6,10380(r3)
100093b8:	0008d700 	call	10008d70 <__multadd>
100093bc:	1025883a 	mov	r18,r2
100093c0:	003fcc06 	br	100092f4 <__pow5mult+0x2c>
100093c4:	01400044 	movi	r5,1
100093c8:	9809883a 	mov	r4,r19
100093cc:	0008ca80 	call	10008ca8 <_Balloc>
100093d0:	1023883a 	mov	r17,r2
100093d4:	00809c44 	movi	r2,625
100093d8:	88800515 	stw	r2,20(r17)
100093dc:	00800044 	movi	r2,1
100093e0:	88800415 	stw	r2,16(r17)
100093e4:	9c401215 	stw	r17,72(r19)
100093e8:	88000015 	stw	zero,0(r17)
100093ec:	003fcb06 	br	1000931c <__pow5mult+0x54>

100093f0 <__lshift>:
100093f0:	defff904 	addi	sp,sp,-28
100093f4:	dcc00315 	stw	r19,12(sp)
100093f8:	dc400115 	stw	r17,4(sp)
100093fc:	2cc00417 	ldw	r19,16(r5)
10009400:	3023d17a 	srai	r17,r6,5
10009404:	28800217 	ldw	r2,8(r5)
10009408:	dd400515 	stw	r21,20(sp)
1000940c:	8ce7883a 	add	r19,r17,r19
10009410:	dd000415 	stw	r20,16(sp)
10009414:	dc800215 	stw	r18,8(sp)
10009418:	dc000015 	stw	r16,0(sp)
1000941c:	dfc00615 	stw	ra,24(sp)
10009420:	9c000044 	addi	r16,r19,1
10009424:	2825883a 	mov	r18,r5
10009428:	302b883a 	mov	r21,r6
1000942c:	2029883a 	mov	r20,r4
10009430:	29400117 	ldw	r5,4(r5)
10009434:	1400030e 	bge	r2,r16,10009444 <__lshift+0x54>
10009438:	1085883a 	add	r2,r2,r2
1000943c:	29400044 	addi	r5,r5,1
10009440:	143ffd16 	blt	r2,r16,10009438 <__lshift+0x48>
10009444:	a009883a 	mov	r4,r20
10009448:	0008ca80 	call	10008ca8 <_Balloc>
1000944c:	11000504 	addi	r4,r2,20
10009450:	0440090e 	bge	zero,r17,10009478 <__lshift+0x88>
10009454:	8c400144 	addi	r17,r17,5
10009458:	882290ba 	slli	r17,r17,2
1000945c:	2007883a 	mov	r3,r4
10009460:	144b883a 	add	r5,r2,r17
10009464:	18c00104 	addi	r3,r3,4
10009468:	183fff15 	stw	zero,-4(r3)
1000946c:	28fffd1e 	bne	r5,r3,10009464 <__lshift+0x74>
10009470:	8c7ffb04 	addi	r17,r17,-20
10009474:	2449883a 	add	r4,r4,r17
10009478:	92000417 	ldw	r8,16(r18)
1000947c:	90c00504 	addi	r3,r18,20
10009480:	a98007cc 	andi	r6,r21,31
10009484:	401090ba 	slli	r8,r8,2
10009488:	1a11883a 	add	r8,r3,r8
1000948c:	30002126 	beq	r6,zero,10009514 <__lshift+0x124>
10009490:	02400804 	movi	r9,32
10009494:	4993c83a 	sub	r9,r9,r6
10009498:	000f883a 	mov	r7,zero
1000949c:	19400017 	ldw	r5,0(r3)
100094a0:	21000104 	addi	r4,r4,4
100094a4:	18c00104 	addi	r3,r3,4
100094a8:	298a983a 	sll	r5,r5,r6
100094ac:	29cab03a 	or	r5,r5,r7
100094b0:	217fff15 	stw	r5,-4(r4)
100094b4:	197fff17 	ldw	r5,-4(r3)
100094b8:	2a4ed83a 	srl	r7,r5,r9
100094bc:	1a3ff736 	bltu	r3,r8,1000949c <__lshift+0xac>
100094c0:	21c00015 	stw	r7,0(r4)
100094c4:	38000126 	beq	r7,zero,100094cc <__lshift+0xdc>
100094c8:	8027883a 	mov	r19,r16
100094cc:	14c00415 	stw	r19,16(r2)
100094d0:	90000726 	beq	r18,zero,100094f0 <__lshift+0x100>
100094d4:	91000117 	ldw	r4,4(r18)
100094d8:	a0c01317 	ldw	r3,76(r20)
100094dc:	200890ba 	slli	r4,r4,2
100094e0:	1907883a 	add	r3,r3,r4
100094e4:	19000017 	ldw	r4,0(r3)
100094e8:	91000015 	stw	r4,0(r18)
100094ec:	1c800015 	stw	r18,0(r3)
100094f0:	dfc00617 	ldw	ra,24(sp)
100094f4:	dd400517 	ldw	r21,20(sp)
100094f8:	dd000417 	ldw	r20,16(sp)
100094fc:	dcc00317 	ldw	r19,12(sp)
10009500:	dc800217 	ldw	r18,8(sp)
10009504:	dc400117 	ldw	r17,4(sp)
10009508:	dc000017 	ldw	r16,0(sp)
1000950c:	dec00704 	addi	sp,sp,28
10009510:	f800283a 	ret
10009514:	18c00104 	addi	r3,r3,4
10009518:	197fff17 	ldw	r5,-4(r3)
1000951c:	21000104 	addi	r4,r4,4
10009520:	217fff15 	stw	r5,-4(r4)
10009524:	1a3ffb36 	bltu	r3,r8,10009514 <__lshift+0x124>
10009528:	003fe806 	br	100094cc <__lshift+0xdc>

1000952c <__mcmp>:
1000952c:	20800417 	ldw	r2,16(r4)
10009530:	28c00417 	ldw	r3,16(r5)
10009534:	10c5c83a 	sub	r2,r2,r3
10009538:	10000e1e 	bne	r2,zero,10009574 <__mcmp+0x48>
1000953c:	180c90ba 	slli	r6,r3,2
10009540:	21000504 	addi	r4,r4,20
10009544:	29400504 	addi	r5,r5,20
10009548:	2187883a 	add	r3,r4,r6
1000954c:	298b883a 	add	r5,r5,r6
10009550:	00000106 	br	10009558 <__mcmp+0x2c>
10009554:	20c0082e 	bgeu	r4,r3,10009578 <__mcmp+0x4c>
10009558:	18ffff04 	addi	r3,r3,-4
1000955c:	297fff04 	addi	r5,r5,-4
10009560:	19c00017 	ldw	r7,0(r3)
10009564:	29800017 	ldw	r6,0(r5)
10009568:	39bffa26 	beq	r7,r6,10009554 <__mcmp+0x28>
1000956c:	3980032e 	bgeu	r7,r6,1000957c <__mcmp+0x50>
10009570:	00bfffc4 	movi	r2,-1
10009574:	f800283a 	ret
10009578:	f800283a 	ret
1000957c:	00800044 	movi	r2,1
10009580:	f800283a 	ret

10009584 <__mdiff>:
10009584:	defffa04 	addi	sp,sp,-24
10009588:	dc800215 	stw	r18,8(sp)
1000958c:	30c00417 	ldw	r3,16(r6)
10009590:	2c800417 	ldw	r18,16(r5)
10009594:	dd000415 	stw	r20,16(sp)
10009598:	dcc00315 	stw	r19,12(sp)
1000959c:	dc400115 	stw	r17,4(sp)
100095a0:	dc000015 	stw	r16,0(sp)
100095a4:	dfc00515 	stw	ra,20(sp)
100095a8:	90e5c83a 	sub	r18,r18,r3
100095ac:	2827883a 	mov	r19,r5
100095b0:	3029883a 	mov	r20,r6
100095b4:	2c000504 	addi	r16,r5,20
100095b8:	34400504 	addi	r17,r6,20
100095bc:	9000131e 	bne	r18,zero,1000960c <__mdiff+0x88>
100095c0:	180690ba 	slli	r3,r3,2
100095c4:	80c5883a 	add	r2,r16,r3
100095c8:	88c7883a 	add	r3,r17,r3
100095cc:	00000106 	br	100095d4 <__mdiff+0x50>
100095d0:	8080552e 	bgeu	r16,r2,10009728 <__mdiff+0x1a4>
100095d4:	10bfff04 	addi	r2,r2,-4
100095d8:	18ffff04 	addi	r3,r3,-4
100095dc:	11c00017 	ldw	r7,0(r2)
100095e0:	19400017 	ldw	r5,0(r3)
100095e4:	397ffa26 	beq	r7,r5,100095d0 <__mdiff+0x4c>
100095e8:	39400a2e 	bgeu	r7,r5,10009614 <__mdiff+0x90>
100095ec:	8007883a 	mov	r3,r16
100095f0:	9805883a 	mov	r2,r19
100095f4:	8821883a 	mov	r16,r17
100095f8:	a027883a 	mov	r19,r20
100095fc:	1823883a 	mov	r17,r3
10009600:	1029883a 	mov	r20,r2
10009604:	04800044 	movi	r18,1
10009608:	00000206 	br	10009614 <__mdiff+0x90>
1000960c:	903ff716 	blt	r18,zero,100095ec <__mdiff+0x68>
10009610:	0025883a 	mov	r18,zero
10009614:	99400117 	ldw	r5,4(r19)
10009618:	0008ca80 	call	10008ca8 <_Balloc>
1000961c:	9a400417 	ldw	r9,16(r19)
10009620:	a2c00417 	ldw	r11,16(r20)
10009624:	12800504 	addi	r10,r2,20
10009628:	481090ba 	slli	r8,r9,2
1000962c:	581690ba 	slli	r11,r11,2
10009630:	14800315 	stw	r18,12(r2)
10009634:	8211883a 	add	r8,r16,r8
10009638:	8ad7883a 	add	r11,r17,r11
1000963c:	0007883a 	mov	r3,zero
10009640:	00000106 	br	10009648 <__mdiff+0xc4>
10009644:	3815883a 	mov	r10,r7
10009648:	81000017 	ldw	r4,0(r16)
1000964c:	89800017 	ldw	r6,0(r17)
10009650:	51c00104 	addi	r7,r10,4
10009654:	217fffcc 	andi	r5,r4,65535
10009658:	28cb883a 	add	r5,r5,r3
1000965c:	30ffffcc 	andi	r3,r6,65535
10009660:	28cbc83a 	sub	r5,r5,r3
10009664:	300cd43a 	srli	r6,r6,16
10009668:	2006d43a 	srli	r3,r4,16
1000966c:	2809d43a 	srai	r4,r5,16
10009670:	297fffcc 	andi	r5,r5,65535
10009674:	1987c83a 	sub	r3,r3,r6
10009678:	1907883a 	add	r3,r3,r4
1000967c:	1808943a 	slli	r4,r3,16
10009680:	8c400104 	addi	r17,r17,4
10009684:	84000104 	addi	r16,r16,4
10009688:	214ab03a 	or	r5,r4,r5
1000968c:	397fff15 	stw	r5,-4(r7)
10009690:	1807d43a 	srai	r3,r3,16
10009694:	8affeb36 	bltu	r17,r11,10009644 <__mdiff+0xc0>
10009698:	8200152e 	bgeu	r16,r8,100096f0 <__mdiff+0x16c>
1000969c:	3815883a 	mov	r10,r7
100096a0:	800d883a 	mov	r6,r16
100096a4:	31000017 	ldw	r4,0(r6)
100096a8:	52800104 	addi	r10,r10,4
100096ac:	31800104 	addi	r6,r6,4
100096b0:	217fffcc 	andi	r5,r4,65535
100096b4:	28cb883a 	add	r5,r5,r3
100096b8:	2817d43a 	srai	r11,r5,16
100096bc:	2006d43a 	srli	r3,r4,16
100096c0:	293fffcc 	andi	r4,r5,65535
100096c4:	1ac7883a 	add	r3,r3,r11
100096c8:	180a943a 	slli	r5,r3,16
100096cc:	1807d43a 	srai	r3,r3,16
100096d0:	290ab03a 	or	r5,r5,r4
100096d4:	517fff15 	stw	r5,-4(r10)
100096d8:	323ff236 	bltu	r6,r8,100096a4 <__mdiff+0x120>
100096dc:	42bfffc4 	addi	r10,r8,-1
100096e0:	5415c83a 	sub	r10,r10,r16
100096e4:	5014d0ba 	srli	r10,r10,2
100096e8:	501490ba 	slli	r10,r10,2
100096ec:	3a95883a 	add	r10,r7,r10
100096f0:	2800041e 	bne	r5,zero,10009704 <__mdiff+0x180>
100096f4:	52bfff04 	addi	r10,r10,-4
100096f8:	50c00017 	ldw	r3,0(r10)
100096fc:	4a7fffc4 	addi	r9,r9,-1
10009700:	183ffc26 	beq	r3,zero,100096f4 <__mdiff+0x170>
10009704:	12400415 	stw	r9,16(r2)
10009708:	dfc00517 	ldw	ra,20(sp)
1000970c:	dd000417 	ldw	r20,16(sp)
10009710:	dcc00317 	ldw	r19,12(sp)
10009714:	dc800217 	ldw	r18,8(sp)
10009718:	dc400117 	ldw	r17,4(sp)
1000971c:	dc000017 	ldw	r16,0(sp)
10009720:	dec00604 	addi	sp,sp,24
10009724:	f800283a 	ret
10009728:	000b883a 	mov	r5,zero
1000972c:	0008ca80 	call	10008ca8 <_Balloc>
10009730:	00c00044 	movi	r3,1
10009734:	10c00415 	stw	r3,16(r2)
10009738:	10000515 	stw	zero,20(r2)
1000973c:	003ff206 	br	10009708 <__mdiff+0x184>

10009740 <__ulp>:
10009740:	295ffc2c 	andhi	r5,r5,32752
10009744:	00ff3034 	movhi	r3,64704
10009748:	28c7883a 	add	r3,r5,r3
1000974c:	00c0020e 	bge	zero,r3,10009758 <__ulp+0x18>
10009750:	0005883a 	mov	r2,zero
10009754:	f800283a 	ret
10009758:	00c7c83a 	sub	r3,zero,r3
1000975c:	1807d53a 	srai	r3,r3,20
10009760:	18800508 	cmpgei	r2,r3,20
10009764:	1000041e 	bne	r2,zero,10009778 <__ulp+0x38>
10009768:	01400234 	movhi	r5,8
1000976c:	28c7d83a 	sra	r3,r5,r3
10009770:	0005883a 	mov	r2,zero
10009774:	f800283a 	ret
10009778:	193ffb04 	addi	r4,r3,-20
1000977c:	208007c8 	cmpgei	r2,r4,31
10009780:	0007883a 	mov	r3,zero
10009784:	1000031e 	bne	r2,zero,10009794 <__ulp+0x54>
10009788:	00a00034 	movhi	r2,32768
1000978c:	1104d83a 	srl	r2,r2,r4
10009790:	f800283a 	ret
10009794:	00800044 	movi	r2,1
10009798:	f800283a 	ret

1000979c <__b2d>:
1000979c:	defffa04 	addi	sp,sp,-24
100097a0:	dc000015 	stw	r16,0(sp)
100097a4:	24000417 	ldw	r16,16(r4)
100097a8:	dc800215 	stw	r18,8(sp)
100097ac:	24800504 	addi	r18,r4,20
100097b0:	802090ba 	slli	r16,r16,2
100097b4:	dc400115 	stw	r17,4(sp)
100097b8:	dd000415 	stw	r20,16(sp)
100097bc:	9421883a 	add	r16,r18,r16
100097c0:	847fff17 	ldw	r17,-4(r16)
100097c4:	dcc00315 	stw	r19,12(sp)
100097c8:	2829883a 	mov	r20,r5
100097cc:	8809883a 	mov	r4,r17
100097d0:	dfc00515 	stw	ra,20(sp)
100097d4:	0008f940 	call	10008f94 <__hi0bits>
100097d8:	01000804 	movi	r4,32
100097dc:	2087c83a 	sub	r3,r4,r2
100097e0:	a0c00015 	stw	r3,0(r20)
100097e4:	10c002c8 	cmpgei	r3,r2,11
100097e8:	84ffff04 	addi	r19,r16,-4
100097ec:	18001f26 	beq	r3,zero,1000986c <__b2d+0xd0>
100097f0:	10fffd44 	addi	r3,r2,-11
100097f4:	94c00e2e 	bgeu	r18,r19,10009830 <__b2d+0x94>
100097f8:	80bffe17 	ldw	r2,-8(r16)
100097fc:	18001226 	beq	r3,zero,10009848 <__b2d+0xac>
10009800:	20c9c83a 	sub	r4,r4,r3
10009804:	110cd83a 	srl	r6,r2,r4
10009808:	88e2983a 	sll	r17,r17,r3
1000980c:	10c4983a 	sll	r2,r2,r3
10009810:	817ffe04 	addi	r5,r16,-8
10009814:	8986b03a 	or	r3,r17,r6
10009818:	18cffc34 	orhi	r3,r3,16368
1000981c:	91400b2e 	bgeu	r18,r5,1000984c <__b2d+0xb0>
10009820:	817ffd17 	ldw	r5,-12(r16)
10009824:	2908d83a 	srl	r4,r5,r4
10009828:	1104b03a 	or	r2,r2,r4
1000982c:	00000706 	br	1000984c <__b2d+0xb0>
10009830:	18000426 	beq	r3,zero,10009844 <__b2d+0xa8>
10009834:	88c6983a 	sll	r3,r17,r3
10009838:	0005883a 	mov	r2,zero
1000983c:	18cffc34 	orhi	r3,r3,16368
10009840:	00000206 	br	1000984c <__b2d+0xb0>
10009844:	0005883a 	mov	r2,zero
10009848:	88cffc34 	orhi	r3,r17,16368
1000984c:	dfc00517 	ldw	ra,20(sp)
10009850:	dd000417 	ldw	r20,16(sp)
10009854:	dcc00317 	ldw	r19,12(sp)
10009858:	dc800217 	ldw	r18,8(sp)
1000985c:	dc400117 	ldw	r17,4(sp)
10009860:	dc000017 	ldw	r16,0(sp)
10009864:	dec00604 	addi	sp,sp,24
10009868:	f800283a 	ret
1000986c:	014002c4 	movi	r5,11
10009870:	2889c83a 	sub	r4,r5,r2
10009874:	8906d83a 	srl	r3,r17,r4
10009878:	18cffc34 	orhi	r3,r3,16368
1000987c:	94c00536 	bltu	r18,r19,10009894 <__b2d+0xf8>
10009880:	000b883a 	mov	r5,zero
10009884:	10800544 	addi	r2,r2,21
10009888:	8884983a 	sll	r2,r17,r2
1000988c:	1144b03a 	or	r2,r2,r5
10009890:	003fee06 	br	1000984c <__b2d+0xb0>
10009894:	817ffe17 	ldw	r5,-8(r16)
10009898:	290ad83a 	srl	r5,r5,r4
1000989c:	003ff906 	br	10009884 <__b2d+0xe8>

100098a0 <__d2b>:
100098a0:	defff804 	addi	sp,sp,-32
100098a4:	dc400315 	stw	r17,12(sp)
100098a8:	3023883a 	mov	r17,r6
100098ac:	dd000615 	stw	r20,24(sp)
100098b0:	dc000215 	stw	r16,8(sp)
100098b4:	2829883a 	mov	r20,r5
100098b8:	8820d53a 	srli	r16,r17,20
100098bc:	01400044 	movi	r5,1
100098c0:	dcc00515 	stw	r19,20(sp)
100098c4:	dc800415 	stw	r18,16(sp)
100098c8:	dfc00715 	stw	ra,28(sp)
100098cc:	3825883a 	mov	r18,r7
100098d0:	0008ca80 	call	10008ca8 <_Balloc>
100098d4:	01800434 	movhi	r6,16
100098d8:	31bfffc4 	addi	r6,r6,-1
100098dc:	8401ffcc 	andi	r16,r16,2047
100098e0:	1027883a 	mov	r19,r2
100098e4:	89a2703a 	and	r17,r17,r6
100098e8:	80000126 	beq	r16,zero,100098f0 <__d2b+0x50>
100098ec:	8c400434 	orhi	r17,r17,16
100098f0:	dc400115 	stw	r17,4(sp)
100098f4:	a0002826 	beq	r20,zero,10009998 <__d2b+0xf8>
100098f8:	d809883a 	mov	r4,sp
100098fc:	dd000015 	stw	r20,0(sp)
10009900:	0008ff80 	call	10008ff8 <__lo0bits>
10009904:	d8c00117 	ldw	r3,4(sp)
10009908:	1000171e 	bne	r2,zero,10009968 <__d2b+0xc8>
1000990c:	d9000017 	ldw	r4,0(sp)
10009910:	98c00615 	stw	r3,24(r19)
10009914:	99000515 	stw	r4,20(r19)
10009918:	18001d1e 	bne	r3,zero,10009990 <__d2b+0xf0>
1000991c:	04400044 	movi	r17,1
10009920:	9c400415 	stw	r17,16(r19)
10009924:	80002526 	beq	r16,zero,100099bc <__d2b+0x11c>
10009928:	00c00d44 	movi	r3,53
1000992c:	843ef344 	addi	r16,r16,-1075
10009930:	80a1883a 	add	r16,r16,r2
10009934:	1885c83a 	sub	r2,r3,r2
10009938:	d8c00817 	ldw	r3,32(sp)
1000993c:	94000015 	stw	r16,0(r18)
10009940:	18800015 	stw	r2,0(r3)
10009944:	9805883a 	mov	r2,r19
10009948:	dfc00717 	ldw	ra,28(sp)
1000994c:	dd000617 	ldw	r20,24(sp)
10009950:	dcc00517 	ldw	r19,20(sp)
10009954:	dc800417 	ldw	r18,16(sp)
10009958:	dc400317 	ldw	r17,12(sp)
1000995c:	dc000217 	ldw	r16,8(sp)
10009960:	dec00804 	addi	sp,sp,32
10009964:	f800283a 	ret
10009968:	01000804 	movi	r4,32
1000996c:	2089c83a 	sub	r4,r4,r2
10009970:	1908983a 	sll	r4,r3,r4
10009974:	d9400017 	ldw	r5,0(sp)
10009978:	1886d83a 	srl	r3,r3,r2
1000997c:	2148b03a 	or	r4,r4,r5
10009980:	99000515 	stw	r4,20(r19)
10009984:	d8c00115 	stw	r3,4(sp)
10009988:	98c00615 	stw	r3,24(r19)
1000998c:	183fe326 	beq	r3,zero,1000991c <__d2b+0x7c>
10009990:	04400084 	movi	r17,2
10009994:	003fe206 	br	10009920 <__d2b+0x80>
10009998:	d9000104 	addi	r4,sp,4
1000999c:	0008ff80 	call	10008ff8 <__lo0bits>
100099a0:	00c00044 	movi	r3,1
100099a4:	98c00415 	stw	r3,16(r19)
100099a8:	d8c00117 	ldw	r3,4(sp)
100099ac:	10800804 	addi	r2,r2,32
100099b0:	04400044 	movi	r17,1
100099b4:	98c00515 	stw	r3,20(r19)
100099b8:	803fdb1e 	bne	r16,zero,10009928 <__d2b+0x88>
100099bc:	880690ba 	slli	r3,r17,2
100099c0:	10bef384 	addi	r2,r2,-1074
100099c4:	8822917a 	slli	r17,r17,5
100099c8:	98c7883a 	add	r3,r19,r3
100099cc:	19000417 	ldw	r4,16(r3)
100099d0:	90800015 	stw	r2,0(r18)
100099d4:	0008f940 	call	10008f94 <__hi0bits>
100099d8:	88a3c83a 	sub	r17,r17,r2
100099dc:	d8800817 	ldw	r2,32(sp)
100099e0:	14400015 	stw	r17,0(r2)
100099e4:	003fd706 	br	10009944 <__d2b+0xa4>

100099e8 <__ratio>:
100099e8:	defff904 	addi	sp,sp,-28
100099ec:	dc400315 	stw	r17,12(sp)
100099f0:	2823883a 	mov	r17,r5
100099f4:	d80b883a 	mov	r5,sp
100099f8:	dfc00615 	stw	ra,24(sp)
100099fc:	dcc00515 	stw	r19,20(sp)
10009a00:	dc800415 	stw	r18,16(sp)
10009a04:	2027883a 	mov	r19,r4
10009a08:	dc000215 	stw	r16,8(sp)
10009a0c:	000979c0 	call	1000979c <__b2d>
10009a10:	d9400104 	addi	r5,sp,4
10009a14:	8809883a 	mov	r4,r17
10009a18:	1025883a 	mov	r18,r2
10009a1c:	1821883a 	mov	r16,r3
10009a20:	000979c0 	call	1000979c <__b2d>
10009a24:	89400417 	ldw	r5,16(r17)
10009a28:	99000417 	ldw	r4,16(r19)
10009a2c:	d9800117 	ldw	r6,4(sp)
10009a30:	2149c83a 	sub	r4,r4,r5
10009a34:	d9400017 	ldw	r5,0(sp)
10009a38:	2008917a 	slli	r4,r4,5
10009a3c:	298bc83a 	sub	r5,r5,r6
10009a40:	2149883a 	add	r4,r4,r5
10009a44:	01000e0e 	bge	zero,r4,10009a80 <__ratio+0x98>
10009a48:	2008953a 	slli	r4,r4,20
10009a4c:	2421883a 	add	r16,r4,r16
10009a50:	100d883a 	mov	r6,r2
10009a54:	180f883a 	mov	r7,r3
10009a58:	9009883a 	mov	r4,r18
10009a5c:	800b883a 	mov	r5,r16
10009a60:	000d9140 	call	1000d914 <__divdf3>
10009a64:	dfc00617 	ldw	ra,24(sp)
10009a68:	dcc00517 	ldw	r19,20(sp)
10009a6c:	dc800417 	ldw	r18,16(sp)
10009a70:	dc400317 	ldw	r17,12(sp)
10009a74:	dc000217 	ldw	r16,8(sp)
10009a78:	dec00704 	addi	sp,sp,28
10009a7c:	f800283a 	ret
10009a80:	017ffc34 	movhi	r5,65520
10009a84:	2149383a 	mul	r4,r4,r5
10009a88:	20c7883a 	add	r3,r4,r3
10009a8c:	003ff006 	br	10009a50 <__ratio+0x68>

10009a90 <_mprec_log10>:
10009a90:	defffe04 	addi	sp,sp,-8
10009a94:	dc000015 	stw	r16,0(sp)
10009a98:	dfc00115 	stw	ra,4(sp)
10009a9c:	20800608 	cmpgei	r2,r4,24
10009aa0:	2021883a 	mov	r16,r4
10009aa4:	10000d26 	beq	r2,zero,10009adc <_mprec_log10+0x4c>
10009aa8:	0005883a 	mov	r2,zero
10009aac:	00cffc34 	movhi	r3,16368
10009ab0:	843fffc4 	addi	r16,r16,-1
10009ab4:	000d883a 	mov	r6,zero
10009ab8:	01d00934 	movhi	r7,16420
10009abc:	1009883a 	mov	r4,r2
10009ac0:	180b883a 	mov	r5,r3
10009ac4:	000e41c0 	call	1000e41c <__muldf3>
10009ac8:	803ff91e 	bne	r16,zero,10009ab0 <_mprec_log10+0x20>
10009acc:	dfc00117 	ldw	ra,4(sp)
10009ad0:	dc000017 	ldw	r16,0(sp)
10009ad4:	dec00204 	addi	sp,sp,8
10009ad8:	f800283a 	ret
10009adc:	202090fa 	slli	r16,r4,3
10009ae0:	00840074 	movhi	r2,4097
10009ae4:	108a3b04 	addi	r2,r2,10476
10009ae8:	1421883a 	add	r16,r2,r16
10009aec:	80800017 	ldw	r2,0(r16)
10009af0:	80c00117 	ldw	r3,4(r16)
10009af4:	dfc00117 	ldw	ra,4(sp)
10009af8:	dc000017 	ldw	r16,0(sp)
10009afc:	dec00204 	addi	sp,sp,8
10009b00:	f800283a 	ret

10009b04 <__copybits>:
10009b04:	29ffffc4 	addi	r7,r5,-1
10009b08:	380fd17a 	srai	r7,r7,5
10009b0c:	31400417 	ldw	r5,16(r6)
10009b10:	30800504 	addi	r2,r6,20
10009b14:	39c00044 	addi	r7,r7,1
10009b18:	280a90ba 	slli	r5,r5,2
10009b1c:	380e90ba 	slli	r7,r7,2
10009b20:	114b883a 	add	r5,r2,r5
10009b24:	21cf883a 	add	r7,r4,r7
10009b28:	11400c2e 	bgeu	r2,r5,10009b5c <__copybits+0x58>
10009b2c:	2007883a 	mov	r3,r4
10009b30:	10800104 	addi	r2,r2,4
10009b34:	123fff17 	ldw	r8,-4(r2)
10009b38:	18c00104 	addi	r3,r3,4
10009b3c:	1a3fff15 	stw	r8,-4(r3)
10009b40:	117ffb36 	bltu	r2,r5,10009b30 <__copybits+0x2c>
10009b44:	2985c83a 	sub	r2,r5,r6
10009b48:	10bffac4 	addi	r2,r2,-21
10009b4c:	1004d0ba 	srli	r2,r2,2
10009b50:	10800044 	addi	r2,r2,1
10009b54:	100490ba 	slli	r2,r2,2
10009b58:	2089883a 	add	r4,r4,r2
10009b5c:	21c0032e 	bgeu	r4,r7,10009b6c <__copybits+0x68>
10009b60:	21000104 	addi	r4,r4,4
10009b64:	203fff15 	stw	zero,-4(r4)
10009b68:	21fffd36 	bltu	r4,r7,10009b60 <__copybits+0x5c>
10009b6c:	f800283a 	ret

10009b70 <__any_on>:
10009b70:	20800417 	ldw	r2,16(r4)
10009b74:	280dd17a 	srai	r6,r5,5
10009b78:	21000504 	addi	r4,r4,20
10009b7c:	11800c0e 	bge	r2,r6,10009bb0 <__any_on+0x40>
10009b80:	100690ba 	slli	r3,r2,2
10009b84:	20c7883a 	add	r3,r4,r3
10009b88:	20c0142e 	bgeu	r4,r3,10009bdc <__any_on+0x6c>
10009b8c:	18bfff17 	ldw	r2,-4(r3)
10009b90:	18ffff04 	addi	r3,r3,-4
10009b94:	1000041e 	bne	r2,zero,10009ba8 <__any_on+0x38>
10009b98:	20c00f2e 	bgeu	r4,r3,10009bd8 <__any_on+0x68>
10009b9c:	18ffff04 	addi	r3,r3,-4
10009ba0:	19400017 	ldw	r5,0(r3)
10009ba4:	283ffc26 	beq	r5,zero,10009b98 <__any_on+0x28>
10009ba8:	00800044 	movi	r2,1
10009bac:	f800283a 	ret
10009bb0:	300690ba 	slli	r3,r6,2
10009bb4:	20c7883a 	add	r3,r4,r3
10009bb8:	30bff30e 	bge	r6,r2,10009b88 <__any_on+0x18>
10009bbc:	294007cc 	andi	r5,r5,31
10009bc0:	283ff126 	beq	r5,zero,10009b88 <__any_on+0x18>
10009bc4:	19800017 	ldw	r6,0(r3)
10009bc8:	3144d83a 	srl	r2,r6,r5
10009bcc:	114a983a 	sll	r5,r2,r5
10009bd0:	317ff51e 	bne	r6,r5,10009ba8 <__any_on+0x38>
10009bd4:	003fec06 	br	10009b88 <__any_on+0x18>
10009bd8:	f800283a 	ret
10009bdc:	0005883a 	mov	r2,zero
10009be0:	f800283a 	ret

10009be4 <_realloc_r>:
10009be4:	defff504 	addi	sp,sp,-44
10009be8:	dcc00415 	stw	r19,16(sp)
10009bec:	dfc00a15 	stw	ra,40(sp)
10009bf0:	df000915 	stw	fp,36(sp)
10009bf4:	ddc00815 	stw	r23,32(sp)
10009bf8:	dd800715 	stw	r22,28(sp)
10009bfc:	dd400615 	stw	r21,24(sp)
10009c00:	dd000515 	stw	r20,20(sp)
10009c04:	dc800315 	stw	r18,12(sp)
10009c08:	dc400215 	stw	r17,8(sp)
10009c0c:	dc000115 	stw	r16,4(sp)
10009c10:	3027883a 	mov	r19,r6
10009c14:	28008b26 	beq	r5,zero,10009e44 <_realloc_r+0x260>
10009c18:	282d883a 	mov	r22,r5
10009c1c:	202b883a 	mov	r21,r4
10009c20:	9c0002c4 	addi	r16,r19,11
10009c24:	000fc1c0 	call	1000fc1c <__malloc_lock>
10009c28:	808005f0 	cmpltui	r2,r16,23
10009c2c:	1000521e 	bne	r2,zero,10009d78 <_realloc_r+0x194>
10009c30:	017ffe04 	movi	r5,-8
10009c34:	8160703a 	and	r16,r16,r5
10009c38:	8007883a 	mov	r3,r16
10009c3c:	80005116 	blt	r16,zero,10009d84 <_realloc_r+0x1a0>
10009c40:	84c05036 	bltu	r16,r19,10009d84 <_realloc_r+0x1a0>
10009c44:	b0bfff17 	ldw	r2,-4(r22)
10009c48:	017fff04 	movi	r5,-4
10009c4c:	b4bffe04 	addi	r18,r22,-8
10009c50:	1162703a 	and	r17,r2,r5
10009c54:	9469883a 	add	r20,r18,r17
10009c58:	88c0390e 	bge	r17,r3,10009d40 <_realloc_r+0x15c>
10009c5c:	07040074 	movhi	fp,4097
10009c60:	e70e0004 	addi	fp,fp,14336
10009c64:	e2000217 	ldw	r8,8(fp)
10009c68:	a1000117 	ldw	r4,4(r20)
10009c6c:	45008e26 	beq	r8,r20,10009ea8 <_realloc_r+0x2c4>
10009c70:	01bfff84 	movi	r6,-2
10009c74:	218c703a 	and	r6,r4,r6
10009c78:	a18d883a 	add	r6,r20,r6
10009c7c:	31800117 	ldw	r6,4(r6)
10009c80:	3180004c 	andi	r6,r6,1
10009c84:	30004f1e 	bne	r6,zero,10009dc4 <_realloc_r+0x1e0>
10009c88:	2148703a 	and	r4,r4,r5
10009c8c:	890b883a 	add	r5,r17,r4
10009c90:	28c0cb0e 	bge	r5,r3,10009fc0 <_realloc_r+0x3dc>
10009c94:	1080004c 	andi	r2,r2,1
10009c98:	10004c1e 	bne	r2,zero,10009dcc <_realloc_r+0x1e8>
10009c9c:	b1fffe17 	ldw	r7,-8(r22)
10009ca0:	00bfff04 	movi	r2,-4
10009ca4:	91cfc83a 	sub	r7,r18,r7
10009ca8:	39400117 	ldw	r5,4(r7)
10009cac:	288a703a 	and	r5,r5,r2
10009cb0:	a0000426 	beq	r20,zero,10009cc4 <_realloc_r+0xe0>
10009cb4:	896f883a 	add	r23,r17,r5
10009cb8:	b92f883a 	add	r23,r23,r4
10009cbc:	4500cb26 	beq	r8,r20,10009fec <_realloc_r+0x408>
10009cc0:	b8c0930e 	bge	r23,r3,10009f10 <_realloc_r+0x32c>
10009cc4:	38004126 	beq	r7,zero,10009dcc <_realloc_r+0x1e8>
10009cc8:	896f883a 	add	r23,r17,r5
10009ccc:	b8c03f16 	blt	r23,r3,10009dcc <_realloc_r+0x1e8>
10009cd0:	38c00217 	ldw	r3,8(r7)
10009cd4:	38800317 	ldw	r2,12(r7)
10009cd8:	89bfff04 	addi	r6,r17,-4
10009cdc:	31000968 	cmpgeui	r4,r6,37
10009ce0:	18800315 	stw	r2,12(r3)
10009ce4:	10c00215 	stw	r3,8(r2)
10009ce8:	3de9883a 	add	r20,r7,r23
10009cec:	38c00204 	addi	r3,r7,8
10009cf0:	2000f81e 	bne	r4,zero,1000a0d4 <_realloc_r+0x4f0>
10009cf4:	30800530 	cmpltui	r2,r6,20
10009cf8:	b1000017 	ldw	r4,0(r22)
10009cfc:	1000eb1e 	bne	r2,zero,1000a0ac <_realloc_r+0x4c8>
10009d00:	39000215 	stw	r4,8(r7)
10009d04:	b1000117 	ldw	r4,4(r22)
10009d08:	30800728 	cmpgeui	r2,r6,28
10009d0c:	39000315 	stw	r4,12(r7)
10009d10:	1001041e 	bne	r2,zero,1000a124 <_realloc_r+0x540>
10009d14:	b1000217 	ldw	r4,8(r22)
10009d18:	38800404 	addi	r2,r7,16
10009d1c:	b5800204 	addi	r22,r22,8
10009d20:	11000015 	stw	r4,0(r2)
10009d24:	b1000117 	ldw	r4,4(r22)
10009d28:	b823883a 	mov	r17,r23
10009d2c:	3825883a 	mov	r18,r7
10009d30:	11000115 	stw	r4,4(r2)
10009d34:	b1000217 	ldw	r4,8(r22)
10009d38:	182d883a 	mov	r22,r3
10009d3c:	11000215 	stw	r4,8(r2)
10009d40:	91800117 	ldw	r6,4(r18)
10009d44:	8c05c83a 	sub	r2,r17,r16
10009d48:	10c00430 	cmpltui	r3,r2,16
10009d4c:	3180004c 	andi	r6,r6,1
10009d50:	18004926 	beq	r3,zero,10009e78 <_realloc_r+0x294>
10009d54:	898cb03a 	or	r6,r17,r6
10009d58:	91800115 	stw	r6,4(r18)
10009d5c:	a0800117 	ldw	r2,4(r20)
10009d60:	10800054 	ori	r2,r2,1
10009d64:	a0800115 	stw	r2,4(r20)
10009d68:	a809883a 	mov	r4,r21
10009d6c:	000fc400 	call	1000fc40 <__malloc_unlock>
10009d70:	b027883a 	mov	r19,r22
10009d74:	00000606 	br	10009d90 <_realloc_r+0x1ac>
10009d78:	04000404 	movi	r16,16
10009d7c:	00c00404 	movi	r3,16
10009d80:	84ffb02e 	bgeu	r16,r19,10009c44 <_realloc_r+0x60>
10009d84:	00800304 	movi	r2,12
10009d88:	a8800015 	stw	r2,0(r21)
10009d8c:	0027883a 	mov	r19,zero
10009d90:	9805883a 	mov	r2,r19
10009d94:	dfc00a17 	ldw	ra,40(sp)
10009d98:	df000917 	ldw	fp,36(sp)
10009d9c:	ddc00817 	ldw	r23,32(sp)
10009da0:	dd800717 	ldw	r22,28(sp)
10009da4:	dd400617 	ldw	r21,24(sp)
10009da8:	dd000517 	ldw	r20,20(sp)
10009dac:	dcc00417 	ldw	r19,16(sp)
10009db0:	dc800317 	ldw	r18,12(sp)
10009db4:	dc400217 	ldw	r17,8(sp)
10009db8:	dc000117 	ldw	r16,4(sp)
10009dbc:	dec00b04 	addi	sp,sp,44
10009dc0:	f800283a 	ret
10009dc4:	1080004c 	andi	r2,r2,1
10009dc8:	10007826 	beq	r2,zero,10009fac <_realloc_r+0x3c8>
10009dcc:	980b883a 	mov	r5,r19
10009dd0:	a809883a 	mov	r4,r21
10009dd4:	00081b00 	call	100081b0 <_malloc_r>
10009dd8:	1027883a 	mov	r19,r2
10009ddc:	10001626 	beq	r2,zero,10009e38 <_realloc_r+0x254>
10009de0:	b0bfff17 	ldw	r2,-4(r22)
10009de4:	013fff84 	movi	r4,-2
10009de8:	98fffe04 	addi	r3,r19,-8
10009dec:	1104703a 	and	r2,r2,r4
10009df0:	9085883a 	add	r2,r18,r2
10009df4:	10c06726 	beq	r2,r3,10009f94 <_realloc_r+0x3b0>
10009df8:	89bfff04 	addi	r6,r17,-4
10009dfc:	30800968 	cmpgeui	r2,r6,37
10009e00:	1000761e 	bne	r2,zero,10009fdc <_realloc_r+0x3f8>
10009e04:	30800530 	cmpltui	r2,r6,20
10009e08:	b1000017 	ldw	r4,0(r22)
10009e0c:	10003726 	beq	r2,zero,10009eec <_realloc_r+0x308>
10009e10:	9805883a 	mov	r2,r19
10009e14:	b007883a 	mov	r3,r22
10009e18:	11000015 	stw	r4,0(r2)
10009e1c:	19000117 	ldw	r4,4(r3)
10009e20:	11000115 	stw	r4,4(r2)
10009e24:	18c00217 	ldw	r3,8(r3)
10009e28:	10c00215 	stw	r3,8(r2)
10009e2c:	b00b883a 	mov	r5,r22
10009e30:	a809883a 	mov	r4,r21
10009e34:	00076a40 	call	100076a4 <_free_r>
10009e38:	a809883a 	mov	r4,r21
10009e3c:	000fc400 	call	1000fc40 <__malloc_unlock>
10009e40:	003fd306 	br	10009d90 <_realloc_r+0x1ac>
10009e44:	300b883a 	mov	r5,r6
10009e48:	dfc00a17 	ldw	ra,40(sp)
10009e4c:	df000917 	ldw	fp,36(sp)
10009e50:	ddc00817 	ldw	r23,32(sp)
10009e54:	dd800717 	ldw	r22,28(sp)
10009e58:	dd400617 	ldw	r21,24(sp)
10009e5c:	dd000517 	ldw	r20,20(sp)
10009e60:	dcc00417 	ldw	r19,16(sp)
10009e64:	dc800317 	ldw	r18,12(sp)
10009e68:	dc400217 	ldw	r17,8(sp)
10009e6c:	dc000117 	ldw	r16,4(sp)
10009e70:	dec00b04 	addi	sp,sp,44
10009e74:	00081b01 	jmpi	100081b0 <_malloc_r>
10009e78:	340cb03a 	or	r6,r6,r16
10009e7c:	91800115 	stw	r6,4(r18)
10009e80:	940b883a 	add	r5,r18,r16
10009e84:	10800054 	ori	r2,r2,1
10009e88:	28800115 	stw	r2,4(r5)
10009e8c:	a0800117 	ldw	r2,4(r20)
10009e90:	29400204 	addi	r5,r5,8
10009e94:	a809883a 	mov	r4,r21
10009e98:	10800054 	ori	r2,r2,1
10009e9c:	a0800115 	stw	r2,4(r20)
10009ea0:	00076a40 	call	100076a4 <_free_r>
10009ea4:	003fb006 	br	10009d68 <_realloc_r+0x184>
10009ea8:	2148703a 	and	r4,r4,r5
10009eac:	890b883a 	add	r5,r17,r4
10009eb0:	81800404 	addi	r6,r16,16
10009eb4:	29bf7716 	blt	r5,r6,10009c94 <_realloc_r+0xb0>
10009eb8:	9425883a 	add	r18,r18,r16
10009ebc:	2c05c83a 	sub	r2,r5,r16
10009ec0:	e4800215 	stw	r18,8(fp)
10009ec4:	10800054 	ori	r2,r2,1
10009ec8:	90800115 	stw	r2,4(r18)
10009ecc:	b0bfff17 	ldw	r2,-4(r22)
10009ed0:	a809883a 	mov	r4,r21
10009ed4:	b027883a 	mov	r19,r22
10009ed8:	1080004c 	andi	r2,r2,1
10009edc:	1420b03a 	or	r16,r2,r16
10009ee0:	b43fff15 	stw	r16,-4(r22)
10009ee4:	000fc400 	call	1000fc40 <__malloc_unlock>
10009ee8:	003fa906 	br	10009d90 <_realloc_r+0x1ac>
10009eec:	99000015 	stw	r4,0(r19)
10009ef0:	b0c00117 	ldw	r3,4(r22)
10009ef4:	30800728 	cmpgeui	r2,r6,28
10009ef8:	98c00115 	stw	r3,4(r19)
10009efc:	1000611e 	bne	r2,zero,1000a084 <_realloc_r+0x4a0>
10009f00:	b0c00204 	addi	r3,r22,8
10009f04:	98800204 	addi	r2,r19,8
10009f08:	b1000217 	ldw	r4,8(r22)
10009f0c:	003fc206 	br	10009e18 <_realloc_r+0x234>
10009f10:	a0800317 	ldw	r2,12(r20)
10009f14:	a0c00217 	ldw	r3,8(r20)
10009f18:	89bfff04 	addi	r6,r17,-4
10009f1c:	31000968 	cmpgeui	r4,r6,37
10009f20:	18800315 	stw	r2,12(r3)
10009f24:	10c00215 	stw	r3,8(r2)
10009f28:	38c00217 	ldw	r3,8(r7)
10009f2c:	38800317 	ldw	r2,12(r7)
10009f30:	3a000204 	addi	r8,r7,8
10009f34:	3de9883a 	add	r20,r7,r23
10009f38:	18800315 	stw	r2,12(r3)
10009f3c:	10c00215 	stw	r3,8(r2)
10009f40:	20006f1e 	bne	r4,zero,1000a100 <_realloc_r+0x51c>
10009f44:	30800530 	cmpltui	r2,r6,20
10009f48:	b0c00017 	ldw	r3,0(r22)
10009f4c:	10006a1e 	bne	r2,zero,1000a0f8 <_realloc_r+0x514>
10009f50:	38c00215 	stw	r3,8(r7)
10009f54:	b0c00117 	ldw	r3,4(r22)
10009f58:	30800728 	cmpgeui	r2,r6,28
10009f5c:	38c00315 	stw	r3,12(r7)
10009f60:	10007a1e 	bne	r2,zero,1000a14c <_realloc_r+0x568>
10009f64:	b0c00217 	ldw	r3,8(r22)
10009f68:	38800404 	addi	r2,r7,16
10009f6c:	b5800204 	addi	r22,r22,8
10009f70:	10c00015 	stw	r3,0(r2)
10009f74:	b0c00117 	ldw	r3,4(r22)
10009f78:	b823883a 	mov	r17,r23
10009f7c:	3825883a 	mov	r18,r7
10009f80:	10c00115 	stw	r3,4(r2)
10009f84:	b0c00217 	ldw	r3,8(r22)
10009f88:	402d883a 	mov	r22,r8
10009f8c:	10c00215 	stw	r3,8(r2)
10009f90:	003f6b06 	br	10009d40 <_realloc_r+0x15c>
10009f94:	98bfff17 	ldw	r2,-4(r19)
10009f98:	00ffff04 	movi	r3,-4
10009f9c:	10c4703a 	and	r2,r2,r3
10009fa0:	88a3883a 	add	r17,r17,r2
10009fa4:	9469883a 	add	r20,r18,r17
10009fa8:	003f6506 	br	10009d40 <_realloc_r+0x15c>
10009fac:	b1fffe17 	ldw	r7,-8(r22)
10009fb0:	91cfc83a 	sub	r7,r18,r7
10009fb4:	39000117 	ldw	r4,4(r7)
10009fb8:	214a703a 	and	r5,r4,r5
10009fbc:	003f4106 	br	10009cc4 <_realloc_r+0xe0>
10009fc0:	a0800317 	ldw	r2,12(r20)
10009fc4:	a0c00217 	ldw	r3,8(r20)
10009fc8:	2823883a 	mov	r17,r5
10009fcc:	9169883a 	add	r20,r18,r5
10009fd0:	18800315 	stw	r2,12(r3)
10009fd4:	10c00215 	stw	r3,8(r2)
10009fd8:	003f5906 	br	10009d40 <_realloc_r+0x15c>
10009fdc:	b00b883a 	mov	r5,r22
10009fe0:	9809883a 	mov	r4,r19
10009fe4:	0008a8c0 	call	10008a8c <memmove>
10009fe8:	003f9006 	br	10009e2c <_realloc_r+0x248>
10009fec:	80800404 	addi	r2,r16,16
10009ff0:	b8bf3416 	blt	r23,r2,10009cc4 <_realloc_r+0xe0>
10009ff4:	38800317 	ldw	r2,12(r7)
10009ff8:	38c00217 	ldw	r3,8(r7)
10009ffc:	89bfff04 	addi	r6,r17,-4
1000a000:	31000968 	cmpgeui	r4,r6,37
1000a004:	18800315 	stw	r2,12(r3)
1000a008:	10c00215 	stw	r3,8(r2)
1000a00c:	3cc00204 	addi	r19,r7,8
1000a010:	20005a1e 	bne	r4,zero,1000a17c <_realloc_r+0x598>
1000a014:	30800530 	cmpltui	r2,r6,20
1000a018:	b0c00017 	ldw	r3,0(r22)
1000a01c:	1000551e 	bne	r2,zero,1000a174 <_realloc_r+0x590>
1000a020:	38c00215 	stw	r3,8(r7)
1000a024:	b0c00117 	ldw	r3,4(r22)
1000a028:	30800728 	cmpgeui	r2,r6,28
1000a02c:	38c00315 	stw	r3,12(r7)
1000a030:	1000661e 	bne	r2,zero,1000a1cc <_realloc_r+0x5e8>
1000a034:	b0c00217 	ldw	r3,8(r22)
1000a038:	38800404 	addi	r2,r7,16
1000a03c:	b5800204 	addi	r22,r22,8
1000a040:	10c00015 	stw	r3,0(r2)
1000a044:	b0c00117 	ldw	r3,4(r22)
1000a048:	10c00115 	stw	r3,4(r2)
1000a04c:	b0c00217 	ldw	r3,8(r22)
1000a050:	10c00215 	stw	r3,8(r2)
1000a054:	3c07883a 	add	r3,r7,r16
1000a058:	bc05c83a 	sub	r2,r23,r16
1000a05c:	e0c00215 	stw	r3,8(fp)
1000a060:	10800054 	ori	r2,r2,1
1000a064:	18800115 	stw	r2,4(r3)
1000a068:	38800117 	ldw	r2,4(r7)
1000a06c:	a809883a 	mov	r4,r21
1000a070:	1080004c 	andi	r2,r2,1
1000a074:	1420b03a 	or	r16,r2,r16
1000a078:	3c000115 	stw	r16,4(r7)
1000a07c:	000fc400 	call	1000fc40 <__malloc_unlock>
1000a080:	003f4306 	br	10009d90 <_realloc_r+0x1ac>
1000a084:	b0800217 	ldw	r2,8(r22)
1000a088:	31800920 	cmpeqi	r6,r6,36
1000a08c:	98800215 	stw	r2,8(r19)
1000a090:	b0800317 	ldw	r2,12(r22)
1000a094:	98800315 	stw	r2,12(r19)
1000a098:	3000061e 	bne	r6,zero,1000a0b4 <_realloc_r+0x4d0>
1000a09c:	b0c00404 	addi	r3,r22,16
1000a0a0:	98800404 	addi	r2,r19,16
1000a0a4:	b1000417 	ldw	r4,16(r22)
1000a0a8:	003f5b06 	br	10009e18 <_realloc_r+0x234>
1000a0ac:	1805883a 	mov	r2,r3
1000a0b0:	003f1b06 	br	10009d20 <_realloc_r+0x13c>
1000a0b4:	b1000417 	ldw	r4,16(r22)
1000a0b8:	b0c00604 	addi	r3,r22,24
1000a0bc:	98800604 	addi	r2,r19,24
1000a0c0:	99000415 	stw	r4,16(r19)
1000a0c4:	b1000517 	ldw	r4,20(r22)
1000a0c8:	99000515 	stw	r4,20(r19)
1000a0cc:	b1000617 	ldw	r4,24(r22)
1000a0d0:	003f5106 	br	10009e18 <_realloc_r+0x234>
1000a0d4:	b00b883a 	mov	r5,r22
1000a0d8:	1809883a 	mov	r4,r3
1000a0dc:	d9c00015 	stw	r7,0(sp)
1000a0e0:	0008a8c0 	call	10008a8c <memmove>
1000a0e4:	d9c00017 	ldw	r7,0(sp)
1000a0e8:	102d883a 	mov	r22,r2
1000a0ec:	b823883a 	mov	r17,r23
1000a0f0:	3825883a 	mov	r18,r7
1000a0f4:	003f1206 	br	10009d40 <_realloc_r+0x15c>
1000a0f8:	4005883a 	mov	r2,r8
1000a0fc:	003f9c06 	br	10009f70 <_realloc_r+0x38c>
1000a100:	b00b883a 	mov	r5,r22
1000a104:	4009883a 	mov	r4,r8
1000a108:	d9c00015 	stw	r7,0(sp)
1000a10c:	0008a8c0 	call	10008a8c <memmove>
1000a110:	d9c00017 	ldw	r7,0(sp)
1000a114:	102d883a 	mov	r22,r2
1000a118:	b823883a 	mov	r17,r23
1000a11c:	3825883a 	mov	r18,r7
1000a120:	003f0706 	br	10009d40 <_realloc_r+0x15c>
1000a124:	b0800217 	ldw	r2,8(r22)
1000a128:	31800920 	cmpeqi	r6,r6,36
1000a12c:	38800415 	stw	r2,16(r7)
1000a130:	b0800317 	ldw	r2,12(r22)
1000a134:	38800515 	stw	r2,20(r7)
1000a138:	b1000417 	ldw	r4,16(r22)
1000a13c:	3000151e 	bne	r6,zero,1000a194 <_realloc_r+0x5b0>
1000a140:	38800604 	addi	r2,r7,24
1000a144:	b5800404 	addi	r22,r22,16
1000a148:	003ef506 	br	10009d20 <_realloc_r+0x13c>
1000a14c:	b0800217 	ldw	r2,8(r22)
1000a150:	31800920 	cmpeqi	r6,r6,36
1000a154:	38800415 	stw	r2,16(r7)
1000a158:	b0800317 	ldw	r2,12(r22)
1000a15c:	38800515 	stw	r2,20(r7)
1000a160:	b0c00417 	ldw	r3,16(r22)
1000a164:	3000121e 	bne	r6,zero,1000a1b0 <_realloc_r+0x5cc>
1000a168:	38800604 	addi	r2,r7,24
1000a16c:	b5800404 	addi	r22,r22,16
1000a170:	003f7f06 	br	10009f70 <_realloc_r+0x38c>
1000a174:	9805883a 	mov	r2,r19
1000a178:	003fb106 	br	1000a040 <_realloc_r+0x45c>
1000a17c:	b00b883a 	mov	r5,r22
1000a180:	9809883a 	mov	r4,r19
1000a184:	d9c00015 	stw	r7,0(sp)
1000a188:	0008a8c0 	call	10008a8c <memmove>
1000a18c:	d9c00017 	ldw	r7,0(sp)
1000a190:	003fb006 	br	1000a054 <_realloc_r+0x470>
1000a194:	b5800604 	addi	r22,r22,24
1000a198:	39000615 	stw	r4,24(r7)
1000a19c:	b13fff17 	ldw	r4,-4(r22)
1000a1a0:	38800804 	addi	r2,r7,32
1000a1a4:	39000715 	stw	r4,28(r7)
1000a1a8:	b1000017 	ldw	r4,0(r22)
1000a1ac:	003edc06 	br	10009d20 <_realloc_r+0x13c>
1000a1b0:	b5800604 	addi	r22,r22,24
1000a1b4:	38c00615 	stw	r3,24(r7)
1000a1b8:	b0ffff17 	ldw	r3,-4(r22)
1000a1bc:	38800804 	addi	r2,r7,32
1000a1c0:	38c00715 	stw	r3,28(r7)
1000a1c4:	b0c00017 	ldw	r3,0(r22)
1000a1c8:	003f6906 	br	10009f70 <_realloc_r+0x38c>
1000a1cc:	b0800217 	ldw	r2,8(r22)
1000a1d0:	31800920 	cmpeqi	r6,r6,36
1000a1d4:	38800415 	stw	r2,16(r7)
1000a1d8:	b0800317 	ldw	r2,12(r22)
1000a1dc:	38800515 	stw	r2,20(r7)
1000a1e0:	b0c00417 	ldw	r3,16(r22)
1000a1e4:	3000031e 	bne	r6,zero,1000a1f4 <_realloc_r+0x610>
1000a1e8:	38800604 	addi	r2,r7,24
1000a1ec:	b5800404 	addi	r22,r22,16
1000a1f0:	003f9306 	br	1000a040 <_realloc_r+0x45c>
1000a1f4:	b5800604 	addi	r22,r22,24
1000a1f8:	38c00615 	stw	r3,24(r7)
1000a1fc:	b0ffff17 	ldw	r3,-4(r22)
1000a200:	38800804 	addi	r2,r7,32
1000a204:	38c00715 	stw	r3,28(r7)
1000a208:	b0c00017 	ldw	r3,0(r22)
1000a20c:	003f8c06 	br	1000a040 <_realloc_r+0x45c>

1000a210 <_sbrk_r>:
1000a210:	defffe04 	addi	sp,sp,-8
1000a214:	dc000015 	stw	r16,0(sp)
1000a218:	00840074 	movhi	r2,4097
1000a21c:	2021883a 	mov	r16,r4
1000a220:	2809883a 	mov	r4,r5
1000a224:	dfc00115 	stw	ra,4(sp)
1000a228:	101c7915 	stw	zero,29156(r2)
1000a22c:	000fdf40 	call	1000fdf4 <sbrk>
1000a230:	10ffffd8 	cmpnei	r3,r2,-1
1000a234:	18000426 	beq	r3,zero,1000a248 <_sbrk_r+0x38>
1000a238:	dfc00117 	ldw	ra,4(sp)
1000a23c:	dc000017 	ldw	r16,0(sp)
1000a240:	dec00204 	addi	sp,sp,8
1000a244:	f800283a 	ret
1000a248:	00c40074 	movhi	r3,4097
1000a24c:	18dc7917 	ldw	r3,29156(r3)
1000a250:	183ff926 	beq	r3,zero,1000a238 <_sbrk_r+0x28>
1000a254:	80c00015 	stw	r3,0(r16)
1000a258:	dfc00117 	ldw	ra,4(sp)
1000a25c:	dc000017 	ldw	r16,0(sp)
1000a260:	dec00204 	addi	sp,sp,8
1000a264:	f800283a 	ret

1000a268 <__sread>:
1000a268:	defffe04 	addi	sp,sp,-8
1000a26c:	dc000015 	stw	r16,0(sp)
1000a270:	2821883a 	mov	r16,r5
1000a274:	2940038f 	ldh	r5,14(r5)
1000a278:	dfc00115 	stw	ra,4(sp)
1000a27c:	000bf200 	call	1000bf20 <_read_r>
1000a280:	10000716 	blt	r2,zero,1000a2a0 <__sread+0x38>
1000a284:	80c01417 	ldw	r3,80(r16)
1000a288:	1887883a 	add	r3,r3,r2
1000a28c:	80c01415 	stw	r3,80(r16)
1000a290:	dfc00117 	ldw	ra,4(sp)
1000a294:	dc000017 	ldw	r16,0(sp)
1000a298:	dec00204 	addi	sp,sp,8
1000a29c:	f800283a 	ret
1000a2a0:	80c0030b 	ldhu	r3,12(r16)
1000a2a4:	18fbffcc 	andi	r3,r3,61439
1000a2a8:	80c0030d 	sth	r3,12(r16)
1000a2ac:	dfc00117 	ldw	ra,4(sp)
1000a2b0:	dc000017 	ldw	r16,0(sp)
1000a2b4:	dec00204 	addi	sp,sp,8
1000a2b8:	f800283a 	ret

1000a2bc <__seofread>:
1000a2bc:	0005883a 	mov	r2,zero
1000a2c0:	f800283a 	ret

1000a2c4 <__swrite>:
1000a2c4:	2880030b 	ldhu	r2,12(r5)
1000a2c8:	defffb04 	addi	sp,sp,-20
1000a2cc:	dcc00315 	stw	r19,12(sp)
1000a2d0:	dc800215 	stw	r18,8(sp)
1000a2d4:	dc400115 	stw	r17,4(sp)
1000a2d8:	dc000015 	stw	r16,0(sp)
1000a2dc:	dfc00415 	stw	ra,16(sp)
1000a2e0:	10c0400c 	andi	r3,r2,256
1000a2e4:	2821883a 	mov	r16,r5
1000a2e8:	2023883a 	mov	r17,r4
1000a2ec:	3025883a 	mov	r18,r6
1000a2f0:	3827883a 	mov	r19,r7
1000a2f4:	2940038f 	ldh	r5,14(r5)
1000a2f8:	18000c1e 	bne	r3,zero,1000a32c <__swrite+0x68>
1000a2fc:	10bbffcc 	andi	r2,r2,61439
1000a300:	980f883a 	mov	r7,r19
1000a304:	900d883a 	mov	r6,r18
1000a308:	8809883a 	mov	r4,r17
1000a30c:	8080030d 	sth	r2,12(r16)
1000a310:	dfc00417 	ldw	ra,16(sp)
1000a314:	dcc00317 	ldw	r19,12(sp)
1000a318:	dc800217 	ldw	r18,8(sp)
1000a31c:	dc400117 	ldw	r17,4(sp)
1000a320:	dc000017 	ldw	r16,0(sp)
1000a324:	dec00504 	addi	sp,sp,20
1000a328:	000b8b81 	jmpi	1000b8b8 <_write_r>
1000a32c:	01c00084 	movi	r7,2
1000a330:	000d883a 	mov	r6,zero
1000a334:	000be6c0 	call	1000be6c <_lseek_r>
1000a338:	8080030b 	ldhu	r2,12(r16)
1000a33c:	8140038f 	ldh	r5,14(r16)
1000a340:	003fee06 	br	1000a2fc <__swrite+0x38>

1000a344 <__sseek>:
1000a344:	defffe04 	addi	sp,sp,-8
1000a348:	dc000015 	stw	r16,0(sp)
1000a34c:	2821883a 	mov	r16,r5
1000a350:	2940038f 	ldh	r5,14(r5)
1000a354:	dfc00115 	stw	ra,4(sp)
1000a358:	000be6c0 	call	1000be6c <_lseek_r>
1000a35c:	10ffffd8 	cmpnei	r3,r2,-1
1000a360:	18000826 	beq	r3,zero,1000a384 <__sseek+0x40>
1000a364:	80c0030b 	ldhu	r3,12(r16)
1000a368:	80801415 	stw	r2,80(r16)
1000a36c:	18c40014 	ori	r3,r3,4096
1000a370:	80c0030d 	sth	r3,12(r16)
1000a374:	dfc00117 	ldw	ra,4(sp)
1000a378:	dc000017 	ldw	r16,0(sp)
1000a37c:	dec00204 	addi	sp,sp,8
1000a380:	f800283a 	ret
1000a384:	80c0030b 	ldhu	r3,12(r16)
1000a388:	18fbffcc 	andi	r3,r3,61439
1000a38c:	80c0030d 	sth	r3,12(r16)
1000a390:	dfc00117 	ldw	ra,4(sp)
1000a394:	dc000017 	ldw	r16,0(sp)
1000a398:	dec00204 	addi	sp,sp,8
1000a39c:	f800283a 	ret

1000a3a0 <__sclose>:
1000a3a0:	2940038f 	ldh	r5,14(r5)
1000a3a4:	000b91c1 	jmpi	1000b91c <_close_r>

1000a3a8 <__sprint_r.part.0>:
1000a3a8:	28801917 	ldw	r2,100(r5)
1000a3ac:	defff604 	addi	sp,sp,-40
1000a3b0:	dd000415 	stw	r20,16(sp)
1000a3b4:	dfc00915 	stw	ra,36(sp)
1000a3b8:	df000815 	stw	fp,32(sp)
1000a3bc:	ddc00715 	stw	r23,28(sp)
1000a3c0:	dd800615 	stw	r22,24(sp)
1000a3c4:	dd400515 	stw	r21,20(sp)
1000a3c8:	dcc00315 	stw	r19,12(sp)
1000a3cc:	dc800215 	stw	r18,8(sp)
1000a3d0:	dc400115 	stw	r17,4(sp)
1000a3d4:	dc000015 	stw	r16,0(sp)
1000a3d8:	1088000c 	andi	r2,r2,8192
1000a3dc:	3029883a 	mov	r20,r6
1000a3e0:	10002c26 	beq	r2,zero,1000a494 <__sprint_r.part.0+0xec>
1000a3e4:	30800217 	ldw	r2,8(r6)
1000a3e8:	2823883a 	mov	r17,r5
1000a3ec:	2027883a 	mov	r19,r4
1000a3f0:	35400017 	ldw	r21,0(r6)
1000a3f4:	05ffff04 	movi	r23,-4
1000a3f8:	10002426 	beq	r2,zero,1000a48c <__sprint_r.part.0+0xe4>
1000a3fc:	ad800117 	ldw	r22,4(r21)
1000a400:	ac000017 	ldw	r16,0(r21)
1000a404:	b024d0ba 	srli	r18,r22,2
1000a408:	90001b26 	beq	r18,zero,1000a478 <__sprint_r.part.0+0xd0>
1000a40c:	0039883a 	mov	fp,zero
1000a410:	00000206 	br	1000a41c <__sprint_r.part.0+0x74>
1000a414:	84000104 	addi	r16,r16,4
1000a418:	97001626 	beq	r18,fp,1000a474 <__sprint_r.part.0+0xcc>
1000a41c:	81400017 	ldw	r5,0(r16)
1000a420:	880d883a 	mov	r6,r17
1000a424:	9809883a 	mov	r4,r19
1000a428:	000bc840 	call	1000bc84 <_fputwc_r>
1000a42c:	10bfffe0 	cmpeqi	r2,r2,-1
1000a430:	e7000044 	addi	fp,fp,1
1000a434:	103ff726 	beq	r2,zero,1000a414 <__sprint_r.part.0+0x6c>
1000a438:	00bfffc4 	movi	r2,-1
1000a43c:	a0000215 	stw	zero,8(r20)
1000a440:	a0000115 	stw	zero,4(r20)
1000a444:	dfc00917 	ldw	ra,36(sp)
1000a448:	df000817 	ldw	fp,32(sp)
1000a44c:	ddc00717 	ldw	r23,28(sp)
1000a450:	dd800617 	ldw	r22,24(sp)
1000a454:	dd400517 	ldw	r21,20(sp)
1000a458:	dd000417 	ldw	r20,16(sp)
1000a45c:	dcc00317 	ldw	r19,12(sp)
1000a460:	dc800217 	ldw	r18,8(sp)
1000a464:	dc400117 	ldw	r17,4(sp)
1000a468:	dc000017 	ldw	r16,0(sp)
1000a46c:	dec00a04 	addi	sp,sp,40
1000a470:	f800283a 	ret
1000a474:	a0800217 	ldw	r2,8(r20)
1000a478:	b5ec703a 	and	r22,r22,r23
1000a47c:	1585c83a 	sub	r2,r2,r22
1000a480:	a0800215 	stw	r2,8(r20)
1000a484:	ad400204 	addi	r21,r21,8
1000a488:	103fdc1e 	bne	r2,zero,1000a3fc <__sprint_r.part.0+0x54>
1000a48c:	0005883a 	mov	r2,zero
1000a490:	003fea06 	br	1000a43c <__sprint_r.part.0+0x94>
1000a494:	00079a00 	call	100079a0 <__sfvwrite_r>
1000a498:	003fe806 	br	1000a43c <__sprint_r.part.0+0x94>

1000a49c <__sprint_r>:
1000a49c:	30c00217 	ldw	r3,8(r6)
1000a4a0:	18000126 	beq	r3,zero,1000a4a8 <__sprint_r+0xc>
1000a4a4:	000a3a81 	jmpi	1000a3a8 <__sprint_r.part.0>
1000a4a8:	30000115 	stw	zero,4(r6)
1000a4ac:	0005883a 	mov	r2,zero
1000a4b0:	f800283a 	ret

1000a4b4 <___vfiprintf_internal_r>:
1000a4b4:	deffd004 	addi	sp,sp,-192
1000a4b8:	df002e15 	stw	fp,184(sp)
1000a4bc:	dcc02915 	stw	r19,164(sp)
1000a4c0:	dc802815 	stw	r18,160(sp)
1000a4c4:	dfc02f15 	stw	ra,188(sp)
1000a4c8:	ddc02d15 	stw	r23,180(sp)
1000a4cc:	dd802c15 	stw	r22,176(sp)
1000a4d0:	dd402b15 	stw	r21,172(sp)
1000a4d4:	dd002a15 	stw	r20,168(sp)
1000a4d8:	dc402715 	stw	r17,156(sp)
1000a4dc:	dc002615 	stw	r16,152(sp)
1000a4e0:	d9c00315 	stw	r7,12(sp)
1000a4e4:	2027883a 	mov	r19,r4
1000a4e8:	2825883a 	mov	r18,r5
1000a4ec:	3039883a 	mov	fp,r6
1000a4f0:	20000226 	beq	r4,zero,1000a4fc <___vfiprintf_internal_r+0x48>
1000a4f4:	20800e17 	ldw	r2,56(r4)
1000a4f8:	1002b626 	beq	r2,zero,1000afd4 <___vfiprintf_internal_r+0xb20>
1000a4fc:	9080030b 	ldhu	r2,12(r18)
1000a500:	10c8000c 	andi	r3,r2,8192
1000a504:	1800061e 	bne	r3,zero,1000a520 <___vfiprintf_internal_r+0x6c>
1000a508:	90c01917 	ldw	r3,100(r18)
1000a50c:	0137ffc4 	movi	r4,-8193
1000a510:	10880014 	ori	r2,r2,8192
1000a514:	1906703a 	and	r3,r3,r4
1000a518:	9080030d 	sth	r2,12(r18)
1000a51c:	90c01915 	stw	r3,100(r18)
1000a520:	10c0020c 	andi	r3,r2,8
1000a524:	18009426 	beq	r3,zero,1000a778 <___vfiprintf_internal_r+0x2c4>
1000a528:	90c00417 	ldw	r3,16(r18)
1000a52c:	18009226 	beq	r3,zero,1000a778 <___vfiprintf_internal_r+0x2c4>
1000a530:	1080068c 	andi	r2,r2,26
1000a534:	10800298 	cmpnei	r2,r2,10
1000a538:	10009726 	beq	r2,zero,1000a798 <___vfiprintf_internal_r+0x2e4>
1000a53c:	dc401604 	addi	r17,sp,88
1000a540:	dc400915 	stw	r17,36(sp)
1000a544:	d8000b15 	stw	zero,44(sp)
1000a548:	d8000a15 	stw	zero,40(sp)
1000a54c:	8811883a 	mov	r8,r17
1000a550:	d8000415 	stw	zero,16(sp)
1000a554:	d8000015 	stw	zero,0(sp)
1000a558:	e0800007 	ldb	r2,0(fp)
1000a55c:	1000a226 	beq	r2,zero,1000a7e8 <___vfiprintf_internal_r+0x334>
1000a560:	10800960 	cmpeqi	r2,r2,37
1000a564:	1003e71e 	bne	r2,zero,1000b504 <___vfiprintf_internal_r+0x1050>
1000a568:	e021883a 	mov	r16,fp
1000a56c:	00000206 	br	1000a578 <___vfiprintf_internal_r+0xc4>
1000a570:	18009226 	beq	r3,zero,1000a7bc <___vfiprintf_internal_r+0x308>
1000a574:	a021883a 	mov	r16,r20
1000a578:	80800047 	ldb	r2,1(r16)
1000a57c:	85000044 	addi	r20,r16,1
1000a580:	10c00958 	cmpnei	r3,r2,37
1000a584:	103ffa1e 	bne	r2,zero,1000a570 <___vfiprintf_internal_r+0xbc>
1000a588:	a72bc83a 	sub	r21,r20,fp
1000a58c:	a8009626 	beq	r21,zero,1000a7e8 <___vfiprintf_internal_r+0x334>
1000a590:	d8c00b17 	ldw	r3,44(sp)
1000a594:	d8800a17 	ldw	r2,40(sp)
1000a598:	47000015 	stw	fp,0(r8)
1000a59c:	a8c7883a 	add	r3,r21,r3
1000a5a0:	10800044 	addi	r2,r2,1
1000a5a4:	d8800a15 	stw	r2,40(sp)
1000a5a8:	45400115 	stw	r21,4(r8)
1000a5ac:	d8c00b15 	stw	r3,44(sp)
1000a5b0:	10800208 	cmpgei	r2,r2,8
1000a5b4:	1000841e 	bne	r2,zero,1000a7c8 <___vfiprintf_internal_r+0x314>
1000a5b8:	42000204 	addi	r8,r8,8
1000a5bc:	d8c00017 	ldw	r3,0(sp)
1000a5c0:	80800047 	ldb	r2,1(r16)
1000a5c4:	1d47883a 	add	r3,r3,r21
1000a5c8:	d8c00015 	stw	r3,0(sp)
1000a5cc:	10008626 	beq	r2,zero,1000a7e8 <___vfiprintf_internal_r+0x334>
1000a5d0:	a0800047 	ldb	r2,1(r20)
1000a5d4:	a7000044 	addi	fp,r20,1
1000a5d8:	d8000845 	stb	zero,33(sp)
1000a5dc:	000b883a 	mov	r5,zero
1000a5e0:	000d883a 	mov	r6,zero
1000a5e4:	027fffc4 	movi	r9,-1
1000a5e8:	0021883a 	mov	r16,zero
1000a5ec:	0019883a 	mov	r12,zero
1000a5f0:	e7000044 	addi	fp,fp,1
1000a5f4:	10fff804 	addi	r3,r2,-32
1000a5f8:	19001668 	cmpgeui	r4,r3,89
1000a5fc:	20009c1e 	bne	r4,zero,1000a870 <___vfiprintf_internal_r+0x3bc>
1000a600:	180690ba 	slli	r3,r3,2
1000a604:	01040074 	movhi	r4,4097
1000a608:	1909883a 	add	r4,r3,r4
1000a60c:	20e98517 	ldw	r3,-23020(r4)
1000a610:	1800683a 	jmp	r3
1000a614:	1000a940 	call	11000a94 <_gp+0xfe3b18>
1000a618:	1000a870 	cmpltui	zero,r2,673
1000a61c:	1000a870 	cmpltui	zero,r2,673
1000a620:	1000a934 	orhi	zero,r2,676
1000a624:	1000a870 	cmpltui	zero,r2,673
1000a628:	1000a870 	cmpltui	zero,r2,673
1000a62c:	1000a870 	cmpltui	zero,r2,673
1000a630:	1000a870 	cmpltui	zero,r2,673
1000a634:	1000a870 	cmpltui	zero,r2,673
1000a638:	1000a870 	cmpltui	zero,r2,673
1000a63c:	1000a90c 	andi	zero,r2,676
1000a640:	1000a8fc 	xorhi	zero,r2,675
1000a644:	1000a870 	cmpltui	zero,r2,673
1000a648:	1000a8e4 	muli	zero,r2,675
1000a64c:	1000a8a0 	cmpeqi	zero,r2,674
1000a650:	1000a870 	cmpltui	zero,r2,673
1000a654:	1000a894 	ori	zero,r2,674
1000a658:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a65c:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a660:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a664:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a668:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a66c:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a670:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a674:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a678:	1000a840 	call	11000a84 <_gp+0xfe3b08>
1000a67c:	1000a870 	cmpltui	zero,r2,673
1000a680:	1000a870 	cmpltui	zero,r2,673
1000a684:	1000a870 	cmpltui	zero,r2,673
1000a688:	1000a870 	cmpltui	zero,r2,673
1000a68c:	1000a870 	cmpltui	zero,r2,673
1000a690:	1000a870 	cmpltui	zero,r2,673
1000a694:	1000a870 	cmpltui	zero,r2,673
1000a698:	1000a870 	cmpltui	zero,r2,673
1000a69c:	1000a870 	cmpltui	zero,r2,673
1000a6a0:	1000a870 	cmpltui	zero,r2,673
1000a6a4:	1000aefc 	xorhi	zero,r2,699
1000a6a8:	1000a870 	cmpltui	zero,r2,673
1000a6ac:	1000a870 	cmpltui	zero,r2,673
1000a6b0:	1000a870 	cmpltui	zero,r2,673
1000a6b4:	1000a870 	cmpltui	zero,r2,673
1000a6b8:	1000a870 	cmpltui	zero,r2,673
1000a6bc:	1000a870 	cmpltui	zero,r2,673
1000a6c0:	1000a870 	cmpltui	zero,r2,673
1000a6c4:	1000a870 	cmpltui	zero,r2,673
1000a6c8:	1000a870 	cmpltui	zero,r2,673
1000a6cc:	1000a870 	cmpltui	zero,r2,673
1000a6d0:	1000ae94 	ori	zero,r2,698
1000a6d4:	1000a870 	cmpltui	zero,r2,673
1000a6d8:	1000a870 	cmpltui	zero,r2,673
1000a6dc:	1000a870 	cmpltui	zero,r2,673
1000a6e0:	1000a870 	cmpltui	zero,r2,673
1000a6e4:	1000a870 	cmpltui	zero,r2,673
1000a6e8:	1000aec8 	cmpgei	zero,r2,699
1000a6ec:	1000a870 	cmpltui	zero,r2,673
1000a6f0:	1000a870 	cmpltui	zero,r2,673
1000a6f4:	1000aa98 	cmpnei	zero,r2,682
1000a6f8:	1000a870 	cmpltui	zero,r2,673
1000a6fc:	1000a870 	cmpltui	zero,r2,673
1000a700:	1000a870 	cmpltui	zero,r2,673
1000a704:	1000a870 	cmpltui	zero,r2,673
1000a708:	1000a870 	cmpltui	zero,r2,673
1000a70c:	1000a870 	cmpltui	zero,r2,673
1000a710:	1000a870 	cmpltui	zero,r2,673
1000a714:	1000a870 	cmpltui	zero,r2,673
1000a718:	1000a870 	cmpltui	zero,r2,673
1000a71c:	1000a870 	cmpltui	zero,r2,673
1000a720:	1000ac34 	orhi	zero,r2,688
1000a724:	1000abc0 	call	11000abc <_gp+0xfe3b40>
1000a728:	1000a870 	cmpltui	zero,r2,673
1000a72c:	1000a870 	cmpltui	zero,r2,673
1000a730:	1000a870 	cmpltui	zero,r2,673
1000a734:	1000a9c8 	cmpgei	zero,r2,679
1000a738:	1000abc0 	call	11000abc <_gp+0xfe3b40>
1000a73c:	1000a870 	cmpltui	zero,r2,673
1000a740:	1000a870 	cmpltui	zero,r2,673
1000a744:	1000a9b4 	orhi	zero,r2,678
1000a748:	1000a870 	cmpltui	zero,r2,673
1000a74c:	1000ab80 	call	11000ab8 <_gp+0xfe3b3c>
1000a750:	1000aa58 	cmpnei	zero,r2,681
1000a754:	1000a9e0 	cmpeqi	zero,r2,679
1000a758:	1000a9d4 	ori	zero,r2,679
1000a75c:	1000a870 	cmpltui	zero,r2,673
1000a760:	1000ab20 	cmpeqi	zero,r2,684
1000a764:	1000a870 	cmpltui	zero,r2,673
1000a768:	1000aae0 	cmpeqi	zero,r2,683
1000a76c:	1000a870 	cmpltui	zero,r2,673
1000a770:	1000a870 	cmpltui	zero,r2,673
1000a774:	1000a96c 	andhi	zero,r2,677
1000a778:	900b883a 	mov	r5,r18
1000a77c:	9809883a 	mov	r4,r19
1000a780:	000555c0 	call	1000555c <__swsetup_r>
1000a784:	1004071e 	bne	r2,zero,1000b7a4 <___vfiprintf_internal_r+0x12f0>
1000a788:	9080030b 	ldhu	r2,12(r18)
1000a78c:	1080068c 	andi	r2,r2,26
1000a790:	10800298 	cmpnei	r2,r2,10
1000a794:	103f691e 	bne	r2,zero,1000a53c <___vfiprintf_internal_r+0x88>
1000a798:	9080038f 	ldh	r2,14(r18)
1000a79c:	103f6716 	blt	r2,zero,1000a53c <___vfiprintf_internal_r+0x88>
1000a7a0:	d9c00317 	ldw	r7,12(sp)
1000a7a4:	e00d883a 	mov	r6,fp
1000a7a8:	900b883a 	mov	r5,r18
1000a7ac:	9809883a 	mov	r4,r19
1000a7b0:	000b7f80 	call	1000b7f8 <__sbprintf>
1000a7b4:	d8800015 	stw	r2,0(sp)
1000a7b8:	00001406 	br	1000a80c <___vfiprintf_internal_r+0x358>
1000a7bc:	a72bc83a 	sub	r21,r20,fp
1000a7c0:	a83f8326 	beq	r21,zero,1000a5d0 <___vfiprintf_internal_r+0x11c>
1000a7c4:	003f7206 	br	1000a590 <___vfiprintf_internal_r+0xdc>
1000a7c8:	18032b26 	beq	r3,zero,1000b478 <___vfiprintf_internal_r+0xfc4>
1000a7cc:	d9800904 	addi	r6,sp,36
1000a7d0:	900b883a 	mov	r5,r18
1000a7d4:	9809883a 	mov	r4,r19
1000a7d8:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000a7dc:	1000081e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000a7e0:	8811883a 	mov	r8,r17
1000a7e4:	003f7506 	br	1000a5bc <___vfiprintf_internal_r+0x108>
1000a7e8:	d8800b17 	ldw	r2,44(sp)
1000a7ec:	10000426 	beq	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000a7f0:	d9800904 	addi	r6,sp,36
1000a7f4:	900b883a 	mov	r5,r18
1000a7f8:	9809883a 	mov	r4,r19
1000a7fc:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000a800:	9080030b 	ldhu	r2,12(r18)
1000a804:	1080100c 	andi	r2,r2,64
1000a808:	1003e61e 	bne	r2,zero,1000b7a4 <___vfiprintf_internal_r+0x12f0>
1000a80c:	d8800017 	ldw	r2,0(sp)
1000a810:	dfc02f17 	ldw	ra,188(sp)
1000a814:	df002e17 	ldw	fp,184(sp)
1000a818:	ddc02d17 	ldw	r23,180(sp)
1000a81c:	dd802c17 	ldw	r22,176(sp)
1000a820:	dd402b17 	ldw	r21,172(sp)
1000a824:	dd002a17 	ldw	r20,168(sp)
1000a828:	dcc02917 	ldw	r19,164(sp)
1000a82c:	dc802817 	ldw	r18,160(sp)
1000a830:	dc402717 	ldw	r17,156(sp)
1000a834:	dc002617 	ldw	r16,152(sp)
1000a838:	dec03004 	addi	sp,sp,192
1000a83c:	f800283a 	ret
1000a840:	0021883a 	mov	r16,zero
1000a844:	10fff404 	addi	r3,r2,-48
1000a848:	e7000044 	addi	fp,fp,1
1000a84c:	840002a4 	muli	r16,r16,10
1000a850:	e0bfffc7 	ldb	r2,-1(fp)
1000a854:	1c21883a 	add	r16,r3,r16
1000a858:	10fff404 	addi	r3,r2,-48
1000a85c:	190002b0 	cmpltui	r4,r3,10
1000a860:	203ff91e 	bne	r4,zero,1000a848 <___vfiprintf_internal_r+0x394>
1000a864:	10fff804 	addi	r3,r2,-32
1000a868:	19001668 	cmpgeui	r4,r3,89
1000a86c:	203f6426 	beq	r4,zero,1000a600 <___vfiprintf_internal_r+0x14c>
1000a870:	29403fcc 	andi	r5,r5,255
1000a874:	2803a91e 	bne	r5,zero,1000b71c <___vfiprintf_internal_r+0x1268>
1000a878:	103fdb26 	beq	r2,zero,1000a7e8 <___vfiprintf_internal_r+0x334>
1000a87c:	d8800c05 	stb	r2,48(sp)
1000a880:	d8000845 	stb	zero,33(sp)
1000a884:	05400044 	movi	r21,1
1000a888:	05800044 	movi	r22,1
1000a88c:	ddc00c04 	addi	r23,sp,48
1000a890:	0000f106 	br	1000ac58 <___vfiprintf_internal_r+0x7a4>
1000a894:	63002014 	ori	r12,r12,128
1000a898:	e0800007 	ldb	r2,0(fp)
1000a89c:	003f5406 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a8a0:	e0800007 	ldb	r2,0(fp)
1000a8a4:	e1000044 	addi	r4,fp,1
1000a8a8:	10c00aa0 	cmpeqi	r3,r2,42
1000a8ac:	1803c01e 	bne	r3,zero,1000b7b0 <___vfiprintf_internal_r+0x12fc>
1000a8b0:	10fff404 	addi	r3,r2,-48
1000a8b4:	19c002b0 	cmpltui	r7,r3,10
1000a8b8:	2039883a 	mov	fp,r4
1000a8bc:	0013883a 	mov	r9,zero
1000a8c0:	383f4c26 	beq	r7,zero,1000a5f4 <___vfiprintf_internal_r+0x140>
1000a8c4:	e7000044 	addi	fp,fp,1
1000a8c8:	4a4002a4 	muli	r9,r9,10
1000a8cc:	e0bfffc7 	ldb	r2,-1(fp)
1000a8d0:	48d3883a 	add	r9,r9,r3
1000a8d4:	10fff404 	addi	r3,r2,-48
1000a8d8:	190002b0 	cmpltui	r4,r3,10
1000a8dc:	203ff91e 	bne	r4,zero,1000a8c4 <___vfiprintf_internal_r+0x410>
1000a8e0:	003f4406 	br	1000a5f4 <___vfiprintf_internal_r+0x140>
1000a8e4:	e0800003 	ldbu	r2,0(fp)
1000a8e8:	10803fcc 	andi	r2,r2,255
1000a8ec:	1080201c 	xori	r2,r2,128
1000a8f0:	63000114 	ori	r12,r12,4
1000a8f4:	10bfe004 	addi	r2,r2,-128
1000a8f8:	003f3d06 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a8fc:	01400044 	movi	r5,1
1000a900:	01800ac4 	movi	r6,43
1000a904:	e0800007 	ldb	r2,0(fp)
1000a908:	003f3906 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a90c:	d8800317 	ldw	r2,12(sp)
1000a910:	14000017 	ldw	r16,0(r2)
1000a914:	15c00104 	addi	r23,r2,4
1000a918:	e0800003 	ldbu	r2,0(fp)
1000a91c:	80031416 	blt	r16,zero,1000b570 <___vfiprintf_internal_r+0x10bc>
1000a920:	ddc00315 	stw	r23,12(sp)
1000a924:	10803fcc 	andi	r2,r2,255
1000a928:	1080201c 	xori	r2,r2,128
1000a92c:	10bfe004 	addi	r2,r2,-128
1000a930:	003f2f06 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a934:	63000054 	ori	r12,r12,1
1000a938:	e0800007 	ldb	r2,0(fp)
1000a93c:	003f2c06 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a940:	30c03fcc 	andi	r3,r6,255
1000a944:	18c0201c 	xori	r3,r3,128
1000a948:	18ffe004 	addi	r3,r3,-128
1000a94c:	e0800003 	ldbu	r2,0(fp)
1000a950:	183ff41e 	bne	r3,zero,1000a924 <___vfiprintf_internal_r+0x470>
1000a954:	10803fcc 	andi	r2,r2,255
1000a958:	1080201c 	xori	r2,r2,128
1000a95c:	01400044 	movi	r5,1
1000a960:	01800804 	movi	r6,32
1000a964:	10bfe004 	addi	r2,r2,-128
1000a968:	003f2106 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a96c:	29403fcc 	andi	r5,r5,255
1000a970:	2803741e 	bne	r5,zero,1000b744 <___vfiprintf_internal_r+0x1290>
1000a974:	00c40074 	movhi	r3,4097
1000a978:	18ca1004 	addi	r3,r3,10304
1000a97c:	d8c00415 	stw	r3,16(sp)
1000a980:	60c0080c 	andi	r3,r12,32
1000a984:	18004b26 	beq	r3,zero,1000aab4 <___vfiprintf_internal_r+0x600>
1000a988:	d8c00317 	ldw	r3,12(sp)
1000a98c:	1d400017 	ldw	r21,0(r3)
1000a990:	1d800117 	ldw	r22,4(r3)
1000a994:	18c00204 	addi	r3,r3,8
1000a998:	d8c00315 	stw	r3,12(sp)
1000a99c:	60c0004c 	andi	r3,r12,1
1000a9a0:	18000226 	beq	r3,zero,1000a9ac <___vfiprintf_internal_r+0x4f8>
1000a9a4:	ad86b03a 	or	r3,r21,r22
1000a9a8:	1802df1e 	bne	r3,zero,1000b528 <___vfiprintf_internal_r+0x1074>
1000a9ac:	00800084 	movi	r2,2
1000a9b0:	00001906 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000a9b4:	e0800007 	ldb	r2,0(fp)
1000a9b8:	10c01b18 	cmpnei	r3,r2,108
1000a9bc:	18033026 	beq	r3,zero,1000b680 <___vfiprintf_internal_r+0x11cc>
1000a9c0:	63000414 	ori	r12,r12,16
1000a9c4:	003f0a06 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a9c8:	63001014 	ori	r12,r12,64
1000a9cc:	e0800007 	ldb	r2,0(fp)
1000a9d0:	003f0706 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a9d4:	63000814 	ori	r12,r12,32
1000a9d8:	e0800007 	ldb	r2,0(fp)
1000a9dc:	003f0406 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000a9e0:	d8c00317 	ldw	r3,12(sp)
1000a9e4:	00800c04 	movi	r2,48
1000a9e8:	d8800885 	stb	r2,34(sp)
1000a9ec:	00801e04 	movi	r2,120
1000a9f0:	01040074 	movhi	r4,4097
1000a9f4:	d88008c5 	stb	r2,35(sp)
1000a9f8:	1d400017 	ldw	r21,0(r3)
1000a9fc:	18800104 	addi	r2,r3,4
1000aa00:	d8800315 	stw	r2,12(sp)
1000aa04:	208a1004 	addi	r2,r4,10304
1000aa08:	d8800415 	stw	r2,16(sp)
1000aa0c:	002d883a 	mov	r22,zero
1000aa10:	63000094 	ori	r12,r12,2
1000aa14:	00800084 	movi	r2,2
1000aa18:	d8000845 	stb	zero,33(sp)
1000aa1c:	48ffffe0 	cmpeqi	r3,r9,-1
1000aa20:	001b883a 	mov	r13,zero
1000aa24:	18014c1e 	bne	r3,zero,1000af58 <___vfiprintf_internal_r+0xaa4>
1000aa28:	053fdfc4 	movi	r20,-129
1000aa2c:	ad86b03a 	or	r3,r21,r22
1000aa30:	6528703a 	and	r20,r12,r20
1000aa34:	1802411e 	bne	r3,zero,1000b33c <___vfiprintf_internal_r+0xe88>
1000aa38:	48030d1e 	bne	r9,zero,1000b670 <___vfiprintf_internal_r+0x11bc>
1000aa3c:	1000791e 	bne	r2,zero,1000ac24 <___vfiprintf_internal_r+0x770>
1000aa40:	6580004c 	andi	r22,r12,1
1000aa44:	b002b126 	beq	r22,zero,1000b50c <___vfiprintf_internal_r+0x1058>
1000aa48:	00800c04 	movi	r2,48
1000aa4c:	d88015c5 	stb	r2,87(sp)
1000aa50:	ddc015c4 	addi	r23,sp,87
1000aa54:	00017e06 	br	1000b050 <___vfiprintf_internal_r+0xb9c>
1000aa58:	29403fcc 	andi	r5,r5,255
1000aa5c:	2803461e 	bne	r5,zero,1000b778 <___vfiprintf_internal_r+0x12c4>
1000aa60:	6080080c 	andi	r2,r12,32
1000aa64:	10016b1e 	bne	r2,zero,1000b014 <___vfiprintf_internal_r+0xb60>
1000aa68:	d8800317 	ldw	r2,12(sp)
1000aa6c:	60c0040c 	andi	r3,r12,16
1000aa70:	15400017 	ldw	r21,0(r2)
1000aa74:	10800104 	addi	r2,r2,4
1000aa78:	18010d1e 	bne	r3,zero,1000aeb0 <___vfiprintf_internal_r+0x9fc>
1000aa7c:	60c0100c 	andi	r3,r12,64
1000aa80:	18031326 	beq	r3,zero,1000b6d0 <___vfiprintf_internal_r+0x121c>
1000aa84:	d8800315 	stw	r2,12(sp)
1000aa88:	ad7fffcc 	andi	r21,r21,65535
1000aa8c:	002d883a 	mov	r22,zero
1000aa90:	0005883a 	mov	r2,zero
1000aa94:	003fe006 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000aa98:	29403fcc 	andi	r5,r5,255
1000aa9c:	2803251e 	bne	r5,zero,1000b734 <___vfiprintf_internal_r+0x1280>
1000aaa0:	00c40074 	movhi	r3,4097
1000aaa4:	18ca0b04 	addi	r3,r3,10284
1000aaa8:	d8c00415 	stw	r3,16(sp)
1000aaac:	60c0080c 	andi	r3,r12,32
1000aab0:	183fb51e 	bne	r3,zero,1000a988 <___vfiprintf_internal_r+0x4d4>
1000aab4:	d9000317 	ldw	r4,12(sp)
1000aab8:	60c0040c 	andi	r3,r12,16
1000aabc:	25400017 	ldw	r21,0(r4)
1000aac0:	21000104 	addi	r4,r4,4
1000aac4:	d9000315 	stw	r4,12(sp)
1000aac8:	18026e1e 	bne	r3,zero,1000b484 <___vfiprintf_internal_r+0xfd0>
1000aacc:	60c0100c 	andi	r3,r12,64
1000aad0:	18026c26 	beq	r3,zero,1000b484 <___vfiprintf_internal_r+0xfd0>
1000aad4:	ad7fffcc 	andi	r21,r21,65535
1000aad8:	002d883a 	mov	r22,zero
1000aadc:	003faf06 	br	1000a99c <___vfiprintf_internal_r+0x4e8>
1000aae0:	29403fcc 	andi	r5,r5,255
1000aae4:	2803151e 	bne	r5,zero,1000b73c <___vfiprintf_internal_r+0x1288>
1000aae8:	6080080c 	andi	r2,r12,32
1000aaec:	10013b1e 	bne	r2,zero,1000afdc <___vfiprintf_internal_r+0xb28>
1000aaf0:	d8800317 	ldw	r2,12(sp)
1000aaf4:	60c0040c 	andi	r3,r12,16
1000aaf8:	15400017 	ldw	r21,0(r2)
1000aafc:	10800104 	addi	r2,r2,4
1000ab00:	1800f81e 	bne	r3,zero,1000aee4 <___vfiprintf_internal_r+0xa30>
1000ab04:	60c0100c 	andi	r3,r12,64
1000ab08:	1802ed26 	beq	r3,zero,1000b6c0 <___vfiprintf_internal_r+0x120c>
1000ab0c:	d8800315 	stw	r2,12(sp)
1000ab10:	ad7fffcc 	andi	r21,r21,65535
1000ab14:	002d883a 	mov	r22,zero
1000ab18:	00800044 	movi	r2,1
1000ab1c:	003fbe06 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000ab20:	d8800317 	ldw	r2,12(sp)
1000ab24:	d8000845 	stb	zero,33(sp)
1000ab28:	15c00017 	ldw	r23,0(r2)
1000ab2c:	15000104 	addi	r20,r2,4
1000ab30:	b802da26 	beq	r23,zero,1000b69c <___vfiprintf_internal_r+0x11e8>
1000ab34:	48bfffe0 	cmpeqi	r2,r9,-1
1000ab38:	1002901e 	bne	r2,zero,1000b57c <___vfiprintf_internal_r+0x10c8>
1000ab3c:	480d883a 	mov	r6,r9
1000ab40:	000b883a 	mov	r5,zero
1000ab44:	b809883a 	mov	r4,r23
1000ab48:	da000315 	stw	r8,12(sp)
1000ab4c:	db000215 	stw	r12,8(sp)
1000ab50:	da400115 	stw	r9,4(sp)
1000ab54:	00089a40 	call	100089a4 <memchr>
1000ab58:	da400117 	ldw	r9,4(sp)
1000ab5c:	db000217 	ldw	r12,8(sp)
1000ab60:	da000317 	ldw	r8,12(sp)
1000ab64:	1002ef26 	beq	r2,zero,1000b724 <___vfiprintf_internal_r+0x1270>
1000ab68:	15edc83a 	sub	r22,r2,r23
1000ab6c:	b02b883a 	mov	r21,r22
1000ab70:	b000010e 	bge	r22,zero,1000ab78 <___vfiprintf_internal_r+0x6c4>
1000ab74:	002b883a 	mov	r21,zero
1000ab78:	dd000315 	stw	r20,12(sp)
1000ab7c:	00003606 	br	1000ac58 <___vfiprintf_internal_r+0x7a4>
1000ab80:	29403fcc 	andi	r5,r5,255
1000ab84:	2802fa1e 	bne	r5,zero,1000b770 <___vfiprintf_internal_r+0x12bc>
1000ab88:	d9000317 	ldw	r4,12(sp)
1000ab8c:	6080080c 	andi	r2,r12,32
1000ab90:	20c00104 	addi	r3,r4,4
1000ab94:	10026a1e 	bne	r2,zero,1000b540 <___vfiprintf_internal_r+0x108c>
1000ab98:	6080040c 	andi	r2,r12,16
1000ab9c:	1002891e 	bne	r2,zero,1000b5c4 <___vfiprintf_internal_r+0x1110>
1000aba0:	6300100c 	andi	r12,r12,64
1000aba4:	60028726 	beq	r12,zero,1000b5c4 <___vfiprintf_internal_r+0x1110>
1000aba8:	d8800317 	ldw	r2,12(sp)
1000abac:	d8c00315 	stw	r3,12(sp)
1000abb0:	d8c00017 	ldw	r3,0(sp)
1000abb4:	10800017 	ldw	r2,0(r2)
1000abb8:	10c0000d 	sth	r3,0(r2)
1000abbc:	003e6606 	br	1000a558 <___vfiprintf_internal_r+0xa4>
1000abc0:	29403fcc 	andi	r5,r5,255
1000abc4:	2802e81e 	bne	r5,zero,1000b768 <___vfiprintf_internal_r+0x12b4>
1000abc8:	6080080c 	andi	r2,r12,32
1000abcc:	10010a1e 	bne	r2,zero,1000aff8 <___vfiprintf_internal_r+0xb44>
1000abd0:	d8800317 	ldw	r2,12(sp)
1000abd4:	60c0040c 	andi	r3,r12,16
1000abd8:	10800104 	addi	r2,r2,4
1000abdc:	1800ce1e 	bne	r3,zero,1000af18 <___vfiprintf_internal_r+0xa64>
1000abe0:	60c0100c 	andi	r3,r12,64
1000abe4:	1800cc26 	beq	r3,zero,1000af18 <___vfiprintf_internal_r+0xa64>
1000abe8:	d8c00317 	ldw	r3,12(sp)
1000abec:	d8800315 	stw	r2,12(sp)
1000abf0:	1d40000f 	ldh	r21,0(r3)
1000abf4:	a82dd7fa 	srai	r22,r21,31
1000abf8:	b005883a 	mov	r2,r22
1000abfc:	1000cc16 	blt	r2,zero,1000af30 <___vfiprintf_internal_r+0xa7c>
1000ac00:	48bfffd8 	cmpnei	r2,r9,-1
1000ac04:	db400843 	ldbu	r13,33(sp)
1000ac08:	10010926 	beq	r2,zero,1000b030 <___vfiprintf_internal_r+0xb7c>
1000ac0c:	00ffdfc4 	movi	r3,-129
1000ac10:	ad84b03a 	or	r2,r21,r22
1000ac14:	60d8703a 	and	r12,r12,r3
1000ac18:	1001051e 	bne	r2,zero,1000b030 <___vfiprintf_internal_r+0xb7c>
1000ac1c:	4801071e 	bne	r9,zero,1000b03c <___vfiprintf_internal_r+0xb88>
1000ac20:	6029883a 	mov	r20,r12
1000ac24:	0013883a 	mov	r9,zero
1000ac28:	002d883a 	mov	r22,zero
1000ac2c:	882f883a 	mov	r23,r17
1000ac30:	00010706 	br	1000b050 <___vfiprintf_internal_r+0xb9c>
1000ac34:	d8c00317 	ldw	r3,12(sp)
1000ac38:	d8000845 	stb	zero,33(sp)
1000ac3c:	05400044 	movi	r21,1
1000ac40:	18800017 	ldw	r2,0(r3)
1000ac44:	18c00104 	addi	r3,r3,4
1000ac48:	d8c00315 	stw	r3,12(sp)
1000ac4c:	d8800c05 	stb	r2,48(sp)
1000ac50:	05800044 	movi	r22,1
1000ac54:	ddc00c04 	addi	r23,sp,48
1000ac58:	6029883a 	mov	r20,r12
1000ac5c:	0013883a 	mov	r9,zero
1000ac60:	a340008c 	andi	r13,r20,2
1000ac64:	68000126 	beq	r13,zero,1000ac6c <___vfiprintf_internal_r+0x7b8>
1000ac68:	ad400084 	addi	r21,r21,2
1000ac6c:	d9000a17 	ldw	r4,40(sp)
1000ac70:	a300210c 	andi	r12,r20,132
1000ac74:	d8800b17 	ldw	r2,44(sp)
1000ac78:	21800044 	addi	r6,r4,1
1000ac7c:	300b883a 	mov	r5,r6
1000ac80:	6000021e 	bne	r12,zero,1000ac8c <___vfiprintf_internal_r+0x7d8>
1000ac84:	8547c83a 	sub	r3,r16,r21
1000ac88:	00c1ae16 	blt	zero,r3,1000b344 <___vfiprintf_internal_r+0xe90>
1000ac8c:	d9800847 	ldb	r6,33(sp)
1000ac90:	40c00204 	addi	r3,r8,8
1000ac94:	30000d26 	beq	r6,zero,1000accc <___vfiprintf_internal_r+0x818>
1000ac98:	d9000844 	addi	r4,sp,33
1000ac9c:	10800044 	addi	r2,r2,1
1000aca0:	41000015 	stw	r4,0(r8)
1000aca4:	01000044 	movi	r4,1
1000aca8:	41000115 	stw	r4,4(r8)
1000acac:	d8800b15 	stw	r2,44(sp)
1000acb0:	d9400a15 	stw	r5,40(sp)
1000acb4:	29000208 	cmpgei	r4,r5,8
1000acb8:	2001831e 	bne	r4,zero,1000b2c8 <___vfiprintf_internal_r+0xe14>
1000acbc:	2809883a 	mov	r4,r5
1000acc0:	1811883a 	mov	r8,r3
1000acc4:	29400044 	addi	r5,r5,1
1000acc8:	18c00204 	addi	r3,r3,8
1000accc:	68001826 	beq	r13,zero,1000ad30 <___vfiprintf_internal_r+0x87c>
1000acd0:	d9000884 	addi	r4,sp,34
1000acd4:	10800084 	addi	r2,r2,2
1000acd8:	41000015 	stw	r4,0(r8)
1000acdc:	01000084 	movi	r4,2
1000ace0:	41000115 	stw	r4,4(r8)
1000ace4:	d8800b15 	stw	r2,44(sp)
1000ace8:	d9400a15 	stw	r5,40(sp)
1000acec:	29000208 	cmpgei	r4,r5,8
1000acf0:	20018d26 	beq	r4,zero,1000b328 <___vfiprintf_internal_r+0xe74>
1000acf4:	1001ed26 	beq	r2,zero,1000b4ac <___vfiprintf_internal_r+0xff8>
1000acf8:	d9800904 	addi	r6,sp,36
1000acfc:	900b883a 	mov	r5,r18
1000ad00:	9809883a 	mov	r4,r19
1000ad04:	da400215 	stw	r9,8(sp)
1000ad08:	db000115 	stw	r12,4(sp)
1000ad0c:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000ad10:	103ebb1e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000ad14:	d9000a17 	ldw	r4,40(sp)
1000ad18:	d8800b17 	ldw	r2,44(sp)
1000ad1c:	da400217 	ldw	r9,8(sp)
1000ad20:	db000117 	ldw	r12,4(sp)
1000ad24:	d8c01804 	addi	r3,sp,96
1000ad28:	21400044 	addi	r5,r4,1
1000ad2c:	8811883a 	mov	r8,r17
1000ad30:	63002018 	cmpnei	r12,r12,128
1000ad34:	6000e326 	beq	r12,zero,1000b0c4 <___vfiprintf_internal_r+0xc10>
1000ad38:	4d93c83a 	sub	r9,r9,r22
1000ad3c:	02412216 	blt	zero,r9,1000b1c8 <___vfiprintf_internal_r+0xd14>
1000ad40:	b085883a 	add	r2,r22,r2
1000ad44:	d9400a15 	stw	r5,40(sp)
1000ad48:	45c00015 	stw	r23,0(r8)
1000ad4c:	45800115 	stw	r22,4(r8)
1000ad50:	d8800b15 	stw	r2,44(sp)
1000ad54:	29400210 	cmplti	r5,r5,8
1000ad58:	2800081e 	bne	r5,zero,1000ad7c <___vfiprintf_internal_r+0x8c8>
1000ad5c:	10001426 	beq	r2,zero,1000adb0 <___vfiprintf_internal_r+0x8fc>
1000ad60:	d9800904 	addi	r6,sp,36
1000ad64:	900b883a 	mov	r5,r18
1000ad68:	9809883a 	mov	r4,r19
1000ad6c:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000ad70:	103ea31e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000ad74:	d8800b17 	ldw	r2,44(sp)
1000ad78:	8807883a 	mov	r3,r17
1000ad7c:	a500010c 	andi	r20,r20,4
1000ad80:	a0000226 	beq	r20,zero,1000ad8c <___vfiprintf_internal_r+0x8d8>
1000ad84:	8569c83a 	sub	r20,r16,r21
1000ad88:	05000f16 	blt	zero,r20,1000adc8 <___vfiprintf_internal_r+0x914>
1000ad8c:	8540010e 	bge	r16,r21,1000ad94 <___vfiprintf_internal_r+0x8e0>
1000ad90:	a821883a 	mov	r16,r21
1000ad94:	d8c00017 	ldw	r3,0(sp)
1000ad98:	1c07883a 	add	r3,r3,r16
1000ad9c:	d8c00015 	stw	r3,0(sp)
1000ada0:	10013f1e 	bne	r2,zero,1000b2a0 <___vfiprintf_internal_r+0xdec>
1000ada4:	d8000a15 	stw	zero,40(sp)
1000ada8:	8811883a 	mov	r8,r17
1000adac:	003dea06 	br	1000a558 <___vfiprintf_internal_r+0xa4>
1000adb0:	d8000a15 	stw	zero,40(sp)
1000adb4:	a500010c 	andi	r20,r20,4
1000adb8:	a0019d26 	beq	r20,zero,1000b430 <___vfiprintf_internal_r+0xf7c>
1000adbc:	8569c83a 	sub	r20,r16,r21
1000adc0:	05019b0e 	bge	zero,r20,1000b430 <___vfiprintf_internal_r+0xf7c>
1000adc4:	8807883a 	mov	r3,r17
1000adc8:	a1000450 	cmplti	r4,r20,17
1000adcc:	01c40074 	movhi	r7,4097
1000add0:	d9400a17 	ldw	r5,40(sp)
1000add4:	20026c1e 	bne	r4,zero,1000b788 <___vfiprintf_internal_r+0x12d4>
1000add8:	39ca7104 	addi	r7,r7,10692
1000addc:	05800404 	movi	r22,16
1000ade0:	00000606 	br	1000adfc <___vfiprintf_internal_r+0x948>
1000ade4:	29800084 	addi	r6,r5,2
1000ade8:	18c00204 	addi	r3,r3,8
1000adec:	200b883a 	mov	r5,r4
1000adf0:	a53ffc04 	addi	r20,r20,-16
1000adf4:	a1000448 	cmpgei	r4,r20,17
1000adf8:	20001726 	beq	r4,zero,1000ae58 <___vfiprintf_internal_r+0x9a4>
1000adfc:	29000044 	addi	r4,r5,1
1000ae00:	10800404 	addi	r2,r2,16
1000ae04:	19c00015 	stw	r7,0(r3)
1000ae08:	1d800115 	stw	r22,4(r3)
1000ae0c:	d8800b15 	stw	r2,44(sp)
1000ae10:	d9000a15 	stw	r4,40(sp)
1000ae14:	21800208 	cmpgei	r6,r4,8
1000ae18:	303ff226 	beq	r6,zero,1000ade4 <___vfiprintf_internal_r+0x930>
1000ae1c:	d9800904 	addi	r6,sp,36
1000ae20:	900b883a 	mov	r5,r18
1000ae24:	9809883a 	mov	r4,r19
1000ae28:	1000a226 	beq	r2,zero,1000b0b4 <___vfiprintf_internal_r+0xc00>
1000ae2c:	d9c00115 	stw	r7,4(sp)
1000ae30:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000ae34:	103e721e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000ae38:	d9400a17 	ldw	r5,40(sp)
1000ae3c:	a53ffc04 	addi	r20,r20,-16
1000ae40:	a1000448 	cmpgei	r4,r20,17
1000ae44:	d8800b17 	ldw	r2,44(sp)
1000ae48:	8807883a 	mov	r3,r17
1000ae4c:	29800044 	addi	r6,r5,1
1000ae50:	d9c00117 	ldw	r7,4(sp)
1000ae54:	203fe91e 	bne	r4,zero,1000adfc <___vfiprintf_internal_r+0x948>
1000ae58:	1505883a 	add	r2,r2,r20
1000ae5c:	d9800a15 	stw	r6,40(sp)
1000ae60:	19c00015 	stw	r7,0(r3)
1000ae64:	1d000115 	stw	r20,4(r3)
1000ae68:	d8800b15 	stw	r2,44(sp)
1000ae6c:	31800210 	cmplti	r6,r6,8
1000ae70:	303fc61e 	bne	r6,zero,1000ad8c <___vfiprintf_internal_r+0x8d8>
1000ae74:	10016e26 	beq	r2,zero,1000b430 <___vfiprintf_internal_r+0xf7c>
1000ae78:	d9800904 	addi	r6,sp,36
1000ae7c:	900b883a 	mov	r5,r18
1000ae80:	9809883a 	mov	r4,r19
1000ae84:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000ae88:	103e5d1e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000ae8c:	d8800b17 	ldw	r2,44(sp)
1000ae90:	003fbe06 	br	1000ad8c <___vfiprintf_internal_r+0x8d8>
1000ae94:	29403fcc 	andi	r5,r5,255
1000ae98:	28022c1e 	bne	r5,zero,1000b74c <___vfiprintf_internal_r+0x1298>
1000ae9c:	6080080c 	andi	r2,r12,32
1000aea0:	63000414 	ori	r12,r12,16
1000aea4:	10005b1e 	bne	r2,zero,1000b014 <___vfiprintf_internal_r+0xb60>
1000aea8:	d8800317 	ldw	r2,12(sp)
1000aeac:	10800104 	addi	r2,r2,4
1000aeb0:	d8c00317 	ldw	r3,12(sp)
1000aeb4:	002d883a 	mov	r22,zero
1000aeb8:	d8800315 	stw	r2,12(sp)
1000aebc:	1d400017 	ldw	r21,0(r3)
1000aec0:	0005883a 	mov	r2,zero
1000aec4:	003ed406 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000aec8:	29403fcc 	andi	r5,r5,255
1000aecc:	2802211e 	bne	r5,zero,1000b754 <___vfiprintf_internal_r+0x12a0>
1000aed0:	6080080c 	andi	r2,r12,32
1000aed4:	63000414 	ori	r12,r12,16
1000aed8:	1000401e 	bne	r2,zero,1000afdc <___vfiprintf_internal_r+0xb28>
1000aedc:	d8800317 	ldw	r2,12(sp)
1000aee0:	10800104 	addi	r2,r2,4
1000aee4:	d8c00317 	ldw	r3,12(sp)
1000aee8:	002d883a 	mov	r22,zero
1000aeec:	d8800315 	stw	r2,12(sp)
1000aef0:	1d400017 	ldw	r21,0(r3)
1000aef4:	00800044 	movi	r2,1
1000aef8:	003ec706 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000aefc:	29403fcc 	andi	r5,r5,255
1000af00:	28021f1e 	bne	r5,zero,1000b780 <___vfiprintf_internal_r+0x12cc>
1000af04:	6080080c 	andi	r2,r12,32
1000af08:	63000414 	ori	r12,r12,16
1000af0c:	10003a1e 	bne	r2,zero,1000aff8 <___vfiprintf_internal_r+0xb44>
1000af10:	d8800317 	ldw	r2,12(sp)
1000af14:	10800104 	addi	r2,r2,4
1000af18:	d8c00317 	ldw	r3,12(sp)
1000af1c:	1d400017 	ldw	r21,0(r3)
1000af20:	d8800315 	stw	r2,12(sp)
1000af24:	a82dd7fa 	srai	r22,r21,31
1000af28:	b005883a 	mov	r2,r22
1000af2c:	103f340e 	bge	r2,zero,1000ac00 <___vfiprintf_internal_r+0x74c>
1000af30:	056bc83a 	sub	r21,zero,r21
1000af34:	a804c03a 	cmpne	r2,r21,zero
1000af38:	05adc83a 	sub	r22,zero,r22
1000af3c:	b0adc83a 	sub	r22,r22,r2
1000af40:	00800b44 	movi	r2,45
1000af44:	d8800845 	stb	r2,33(sp)
1000af48:	48ffffe0 	cmpeqi	r3,r9,-1
1000af4c:	03400b44 	movi	r13,45
1000af50:	00800044 	movi	r2,1
1000af54:	183eb426 	beq	r3,zero,1000aa28 <___vfiprintf_internal_r+0x574>
1000af58:	10c00060 	cmpeqi	r3,r2,1
1000af5c:	1800341e 	bne	r3,zero,1000b030 <___vfiprintf_internal_r+0xb7c>
1000af60:	108000a0 	cmpeqi	r2,r2,2
1000af64:	1000431e 	bne	r2,zero,1000b074 <___vfiprintf_internal_r+0xbc0>
1000af68:	8807883a 	mov	r3,r17
1000af6c:	00000106 	br	1000af74 <___vfiprintf_internal_r+0xac0>
1000af70:	b807883a 	mov	r3,r23
1000af74:	a808d0fa 	srli	r4,r21,3
1000af78:	b00a977a 	slli	r5,r22,29
1000af7c:	b02cd0fa 	srli	r22,r22,3
1000af80:	ad4001cc 	andi	r21,r21,7
1000af84:	a8800c04 	addi	r2,r21,48
1000af88:	292ab03a 	or	r21,r5,r4
1000af8c:	18bfffc5 	stb	r2,-1(r3)
1000af90:	ad88b03a 	or	r4,r21,r22
1000af94:	1dffffc4 	addi	r23,r3,-1
1000af98:	203ff51e 	bne	r4,zero,1000af70 <___vfiprintf_internal_r+0xabc>
1000af9c:	6100004c 	andi	r4,r12,1
1000afa0:	20004126 	beq	r4,zero,1000b0a8 <___vfiprintf_internal_r+0xbf4>
1000afa4:	10803fcc 	andi	r2,r2,255
1000afa8:	1080201c 	xori	r2,r2,128
1000afac:	10bfe004 	addi	r2,r2,-128
1000afb0:	10800c18 	cmpnei	r2,r2,48
1000afb4:	10003c26 	beq	r2,zero,1000b0a8 <___vfiprintf_internal_r+0xbf4>
1000afb8:	18ffff84 	addi	r3,r3,-2
1000afbc:	00800c04 	movi	r2,48
1000afc0:	b8bfffc5 	stb	r2,-1(r23)
1000afc4:	88edc83a 	sub	r22,r17,r3
1000afc8:	6029883a 	mov	r20,r12
1000afcc:	182f883a 	mov	r23,r3
1000afd0:	00001f06 	br	1000b050 <___vfiprintf_internal_r+0xb9c>
1000afd4:	00075400 	call	10007540 <__sinit>
1000afd8:	003d4806 	br	1000a4fc <___vfiprintf_internal_r+0x48>
1000afdc:	d8c00317 	ldw	r3,12(sp)
1000afe0:	00800044 	movi	r2,1
1000afe4:	1d400017 	ldw	r21,0(r3)
1000afe8:	1d800117 	ldw	r22,4(r3)
1000afec:	18c00204 	addi	r3,r3,8
1000aff0:	d8c00315 	stw	r3,12(sp)
1000aff4:	003e8806 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000aff8:	d8c00317 	ldw	r3,12(sp)
1000affc:	18800117 	ldw	r2,4(r3)
1000b000:	1d400017 	ldw	r21,0(r3)
1000b004:	18c00204 	addi	r3,r3,8
1000b008:	d8c00315 	stw	r3,12(sp)
1000b00c:	102d883a 	mov	r22,r2
1000b010:	003efa06 	br	1000abfc <___vfiprintf_internal_r+0x748>
1000b014:	d8c00317 	ldw	r3,12(sp)
1000b018:	0005883a 	mov	r2,zero
1000b01c:	1d400017 	ldw	r21,0(r3)
1000b020:	1d800117 	ldw	r22,4(r3)
1000b024:	18c00204 	addi	r3,r3,8
1000b028:	d8c00315 	stw	r3,12(sp)
1000b02c:	003e7a06 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000b030:	b0016a1e 	bne	r22,zero,1000b5dc <___vfiprintf_internal_r+0x1128>
1000b034:	a88002a8 	cmpgeui	r2,r21,10
1000b038:	1001681e 	bne	r2,zero,1000b5dc <___vfiprintf_internal_r+0x1128>
1000b03c:	ad400c04 	addi	r21,r21,48
1000b040:	dd4015c5 	stb	r21,87(sp)
1000b044:	6029883a 	mov	r20,r12
1000b048:	05800044 	movi	r22,1
1000b04c:	ddc015c4 	addi	r23,sp,87
1000b050:	482b883a 	mov	r21,r9
1000b054:	4d80010e 	bge	r9,r22,1000b05c <___vfiprintf_internal_r+0xba8>
1000b058:	b02b883a 	mov	r21,r22
1000b05c:	6b403fcc 	andi	r13,r13,255
1000b060:	6b40201c 	xori	r13,r13,128
1000b064:	6b7fe004 	addi	r13,r13,-128
1000b068:	683efd26 	beq	r13,zero,1000ac60 <___vfiprintf_internal_r+0x7ac>
1000b06c:	ad400044 	addi	r21,r21,1
1000b070:	003efb06 	br	1000ac60 <___vfiprintf_internal_r+0x7ac>
1000b074:	882f883a 	mov	r23,r17
1000b078:	d9000417 	ldw	r4,16(sp)
1000b07c:	a88003cc 	andi	r2,r21,15
1000b080:	b006973a 	slli	r3,r22,28
1000b084:	2085883a 	add	r2,r4,r2
1000b088:	a82ad13a 	srli	r21,r21,4
1000b08c:	10800003 	ldbu	r2,0(r2)
1000b090:	b02cd13a 	srli	r22,r22,4
1000b094:	bdffffc4 	addi	r23,r23,-1
1000b098:	1d6ab03a 	or	r21,r3,r21
1000b09c:	b8800005 	stb	r2,0(r23)
1000b0a0:	ad84b03a 	or	r2,r21,r22
1000b0a4:	103ff41e 	bne	r2,zero,1000b078 <___vfiprintf_internal_r+0xbc4>
1000b0a8:	8dedc83a 	sub	r22,r17,r23
1000b0ac:	6029883a 	mov	r20,r12
1000b0b0:	003fe706 	br	1000b050 <___vfiprintf_internal_r+0xb9c>
1000b0b4:	01800044 	movi	r6,1
1000b0b8:	000b883a 	mov	r5,zero
1000b0bc:	8807883a 	mov	r3,r17
1000b0c0:	003f4b06 	br	1000adf0 <___vfiprintf_internal_r+0x93c>
1000b0c4:	8559c83a 	sub	r12,r16,r21
1000b0c8:	033f1b0e 	bge	zero,r12,1000ad38 <___vfiprintf_internal_r+0x884>
1000b0cc:	61800450 	cmplti	r6,r12,17
1000b0d0:	01c40074 	movhi	r7,4097
1000b0d4:	3001af1e 	bne	r6,zero,1000b794 <___vfiprintf_internal_r+0x12e0>
1000b0d8:	39ca6d04 	addi	r7,r7,10676
1000b0dc:	03400404 	movi	r13,16
1000b0e0:	00000606 	br	1000b0fc <___vfiprintf_internal_r+0xc48>
1000b0e4:	21800084 	addi	r6,r4,2
1000b0e8:	42000204 	addi	r8,r8,8
1000b0ec:	1809883a 	mov	r4,r3
1000b0f0:	633ffc04 	addi	r12,r12,-16
1000b0f4:	60c00448 	cmpgei	r3,r12,17
1000b0f8:	18001c26 	beq	r3,zero,1000b16c <___vfiprintf_internal_r+0xcb8>
1000b0fc:	20c00044 	addi	r3,r4,1
1000b100:	10800404 	addi	r2,r2,16
1000b104:	41c00015 	stw	r7,0(r8)
1000b108:	43400115 	stw	r13,4(r8)
1000b10c:	d8800b15 	stw	r2,44(sp)
1000b110:	d8c00a15 	stw	r3,40(sp)
1000b114:	19400208 	cmpgei	r5,r3,8
1000b118:	283ff226 	beq	r5,zero,1000b0e4 <___vfiprintf_internal_r+0xc30>
1000b11c:	d9800904 	addi	r6,sp,36
1000b120:	900b883a 	mov	r5,r18
1000b124:	9809883a 	mov	r4,r19
1000b128:	10006326 	beq	r2,zero,1000b2b8 <___vfiprintf_internal_r+0xe04>
1000b12c:	d9c00515 	stw	r7,20(sp)
1000b130:	db000215 	stw	r12,8(sp)
1000b134:	da400115 	stw	r9,4(sp)
1000b138:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b13c:	103db01e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b140:	db000217 	ldw	r12,8(sp)
1000b144:	d9000a17 	ldw	r4,40(sp)
1000b148:	d8800b17 	ldw	r2,44(sp)
1000b14c:	633ffc04 	addi	r12,r12,-16
1000b150:	60c00448 	cmpgei	r3,r12,17
1000b154:	8811883a 	mov	r8,r17
1000b158:	21800044 	addi	r6,r4,1
1000b15c:	d9c00517 	ldw	r7,20(sp)
1000b160:	03400404 	movi	r13,16
1000b164:	da400117 	ldw	r9,4(sp)
1000b168:	183fe41e 	bne	r3,zero,1000b0fc <___vfiprintf_internal_r+0xc48>
1000b16c:	43400204 	addi	r13,r8,8
1000b170:	1305883a 	add	r2,r2,r12
1000b174:	41c00015 	stw	r7,0(r8)
1000b178:	43000115 	stw	r12,4(r8)
1000b17c:	d8800b15 	stw	r2,44(sp)
1000b180:	d9800a15 	stw	r6,40(sp)
1000b184:	30c00208 	cmpgei	r3,r6,8
1000b188:	1800e226 	beq	r3,zero,1000b514 <___vfiprintf_internal_r+0x1060>
1000b18c:	10015726 	beq	r2,zero,1000b6ec <___vfiprintf_internal_r+0x1238>
1000b190:	d9800904 	addi	r6,sp,36
1000b194:	900b883a 	mov	r5,r18
1000b198:	9809883a 	mov	r4,r19
1000b19c:	da400115 	stw	r9,4(sp)
1000b1a0:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b1a4:	103d961e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b1a8:	da400117 	ldw	r9,4(sp)
1000b1ac:	d9000a17 	ldw	r4,40(sp)
1000b1b0:	d8800b17 	ldw	r2,44(sp)
1000b1b4:	4d93c83a 	sub	r9,r9,r22
1000b1b8:	d8c01804 	addi	r3,sp,96
1000b1bc:	21400044 	addi	r5,r4,1
1000b1c0:	8811883a 	mov	r8,r17
1000b1c4:	027ede0e 	bge	zero,r9,1000ad40 <___vfiprintf_internal_r+0x88c>
1000b1c8:	49800450 	cmplti	r6,r9,17
1000b1cc:	01c40074 	movhi	r7,4097
1000b1d0:	3001431e 	bne	r6,zero,1000b6e0 <___vfiprintf_internal_r+0x122c>
1000b1d4:	39ca6d04 	addi	r7,r7,10676
1000b1d8:	03000404 	movi	r12,16
1000b1dc:	00000606 	br	1000b1f8 <___vfiprintf_internal_r+0xd44>
1000b1e0:	21400084 	addi	r5,r4,2
1000b1e4:	42000204 	addi	r8,r8,8
1000b1e8:	1809883a 	mov	r4,r3
1000b1ec:	4a7ffc04 	addi	r9,r9,-16
1000b1f0:	48c00448 	cmpgei	r3,r9,17
1000b1f4:	18001a26 	beq	r3,zero,1000b260 <___vfiprintf_internal_r+0xdac>
1000b1f8:	20c00044 	addi	r3,r4,1
1000b1fc:	10800404 	addi	r2,r2,16
1000b200:	41c00015 	stw	r7,0(r8)
1000b204:	43000115 	stw	r12,4(r8)
1000b208:	d8800b15 	stw	r2,44(sp)
1000b20c:	d8c00a15 	stw	r3,40(sp)
1000b210:	19400208 	cmpgei	r5,r3,8
1000b214:	283ff226 	beq	r5,zero,1000b1e0 <___vfiprintf_internal_r+0xd2c>
1000b218:	d9800904 	addi	r6,sp,36
1000b21c:	900b883a 	mov	r5,r18
1000b220:	9809883a 	mov	r4,r19
1000b224:	10001a26 	beq	r2,zero,1000b290 <___vfiprintf_internal_r+0xddc>
1000b228:	d9c00215 	stw	r7,8(sp)
1000b22c:	da400115 	stw	r9,4(sp)
1000b230:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b234:	103d721e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b238:	da400117 	ldw	r9,4(sp)
1000b23c:	d9000a17 	ldw	r4,40(sp)
1000b240:	d8800b17 	ldw	r2,44(sp)
1000b244:	4a7ffc04 	addi	r9,r9,-16
1000b248:	48c00448 	cmpgei	r3,r9,17
1000b24c:	8811883a 	mov	r8,r17
1000b250:	21400044 	addi	r5,r4,1
1000b254:	d9c00217 	ldw	r7,8(sp)
1000b258:	03000404 	movi	r12,16
1000b25c:	183fe61e 	bne	r3,zero,1000b1f8 <___vfiprintf_internal_r+0xd44>
1000b260:	41000204 	addi	r4,r8,8
1000b264:	1245883a 	add	r2,r2,r9
1000b268:	41c00015 	stw	r7,0(r8)
1000b26c:	42400115 	stw	r9,4(r8)
1000b270:	d8800b15 	stw	r2,44(sp)
1000b274:	d9400a15 	stw	r5,40(sp)
1000b278:	28c00208 	cmpgei	r3,r5,8
1000b27c:	1800721e 	bne	r3,zero,1000b448 <___vfiprintf_internal_r+0xf94>
1000b280:	29400044 	addi	r5,r5,1
1000b284:	20c00204 	addi	r3,r4,8
1000b288:	2011883a 	mov	r8,r4
1000b28c:	003eac06 	br	1000ad40 <___vfiprintf_internal_r+0x88c>
1000b290:	01400044 	movi	r5,1
1000b294:	0009883a 	mov	r4,zero
1000b298:	8811883a 	mov	r8,r17
1000b29c:	003fd306 	br	1000b1ec <___vfiprintf_internal_r+0xd38>
1000b2a0:	d9800904 	addi	r6,sp,36
1000b2a4:	900b883a 	mov	r5,r18
1000b2a8:	9809883a 	mov	r4,r19
1000b2ac:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b2b0:	103ebc26 	beq	r2,zero,1000ada4 <___vfiprintf_internal_r+0x8f0>
1000b2b4:	003d5206 	br	1000a800 <___vfiprintf_internal_r+0x34c>
1000b2b8:	01800044 	movi	r6,1
1000b2bc:	0009883a 	mov	r4,zero
1000b2c0:	8811883a 	mov	r8,r17
1000b2c4:	003f8a06 	br	1000b0f0 <___vfiprintf_internal_r+0xc3c>
1000b2c8:	10007026 	beq	r2,zero,1000b48c <___vfiprintf_internal_r+0xfd8>
1000b2cc:	d9800904 	addi	r6,sp,36
1000b2d0:	900b883a 	mov	r5,r18
1000b2d4:	9809883a 	mov	r4,r19
1000b2d8:	da400515 	stw	r9,20(sp)
1000b2dc:	db000215 	stw	r12,8(sp)
1000b2e0:	db400115 	stw	r13,4(sp)
1000b2e4:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b2e8:	103d451e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b2ec:	d9000a17 	ldw	r4,40(sp)
1000b2f0:	d8800b17 	ldw	r2,44(sp)
1000b2f4:	d8c01804 	addi	r3,sp,96
1000b2f8:	21400044 	addi	r5,r4,1
1000b2fc:	8811883a 	mov	r8,r17
1000b300:	da400517 	ldw	r9,20(sp)
1000b304:	db000217 	ldw	r12,8(sp)
1000b308:	db400117 	ldw	r13,4(sp)
1000b30c:	003e6f06 	br	1000accc <___vfiprintf_internal_r+0x818>
1000b310:	d8800884 	addi	r2,sp,34
1000b314:	d8801615 	stw	r2,88(sp)
1000b318:	00800084 	movi	r2,2
1000b31c:	d8801715 	stw	r2,92(sp)
1000b320:	d8c01804 	addi	r3,sp,96
1000b324:	01400044 	movi	r5,1
1000b328:	1811883a 	mov	r8,r3
1000b32c:	2809883a 	mov	r4,r5
1000b330:	21400044 	addi	r5,r4,1
1000b334:	40c00204 	addi	r3,r8,8
1000b338:	003e7d06 	br	1000ad30 <___vfiprintf_internal_r+0x87c>
1000b33c:	a019883a 	mov	r12,r20
1000b340:	003f0506 	br	1000af58 <___vfiprintf_internal_r+0xaa4>
1000b344:	19400450 	cmplti	r5,r3,17
1000b348:	01c40074 	movhi	r7,4097
1000b34c:	2801031e 	bne	r5,zero,1000b75c <___vfiprintf_internal_r+0x12a8>
1000b350:	39ca7104 	addi	r7,r7,10692
1000b354:	03800404 	movi	r14,16
1000b358:	00000706 	br	1000b378 <___vfiprintf_internal_r+0xec4>
1000b35c:	23c00084 	addi	r15,r4,2
1000b360:	42000204 	addi	r8,r8,8
1000b364:	3009883a 	mov	r4,r6
1000b368:	18fffc04 	addi	r3,r3,-16
1000b36c:	19400448 	cmpgei	r5,r3,17
1000b370:	28002026 	beq	r5,zero,1000b3f4 <___vfiprintf_internal_r+0xf40>
1000b374:	21800044 	addi	r6,r4,1
1000b378:	10800404 	addi	r2,r2,16
1000b37c:	41c00015 	stw	r7,0(r8)
1000b380:	43800115 	stw	r14,4(r8)
1000b384:	d8800b15 	stw	r2,44(sp)
1000b388:	d9800a15 	stw	r6,40(sp)
1000b38c:	31400208 	cmpgei	r5,r6,8
1000b390:	283ff226 	beq	r5,zero,1000b35c <___vfiprintf_internal_r+0xea8>
1000b394:	d9800904 	addi	r6,sp,36
1000b398:	900b883a 	mov	r5,r18
1000b39c:	9809883a 	mov	r4,r19
1000b3a0:	10001f26 	beq	r2,zero,1000b420 <___vfiprintf_internal_r+0xf6c>
1000b3a4:	d9c00715 	stw	r7,28(sp)
1000b3a8:	d8c00615 	stw	r3,24(sp)
1000b3ac:	da400515 	stw	r9,20(sp)
1000b3b0:	db000215 	stw	r12,8(sp)
1000b3b4:	db400115 	stw	r13,4(sp)
1000b3b8:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b3bc:	103d101e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b3c0:	d8c00617 	ldw	r3,24(sp)
1000b3c4:	d9000a17 	ldw	r4,40(sp)
1000b3c8:	d8800b17 	ldw	r2,44(sp)
1000b3cc:	18fffc04 	addi	r3,r3,-16
1000b3d0:	19400448 	cmpgei	r5,r3,17
1000b3d4:	8811883a 	mov	r8,r17
1000b3d8:	23c00044 	addi	r15,r4,1
1000b3dc:	d9c00717 	ldw	r7,28(sp)
1000b3e0:	03800404 	movi	r14,16
1000b3e4:	da400517 	ldw	r9,20(sp)
1000b3e8:	db000217 	ldw	r12,8(sp)
1000b3ec:	db400117 	ldw	r13,4(sp)
1000b3f0:	283fe01e 	bne	r5,zero,1000b374 <___vfiprintf_internal_r+0xec0>
1000b3f4:	10c5883a 	add	r2,r2,r3
1000b3f8:	40c00115 	stw	r3,4(r8)
1000b3fc:	41c00015 	stw	r7,0(r8)
1000b400:	d8800b15 	stw	r2,44(sp)
1000b404:	dbc00a15 	stw	r15,40(sp)
1000b408:	78c00208 	cmpgei	r3,r15,8
1000b40c:	18002c1e 	bne	r3,zero,1000b4c0 <___vfiprintf_internal_r+0x100c>
1000b410:	42000204 	addi	r8,r8,8
1000b414:	79400044 	addi	r5,r15,1
1000b418:	7809883a 	mov	r4,r15
1000b41c:	003e1b06 	br	1000ac8c <___vfiprintf_internal_r+0x7d8>
1000b420:	0009883a 	mov	r4,zero
1000b424:	03c00044 	movi	r15,1
1000b428:	8811883a 	mov	r8,r17
1000b42c:	003fce06 	br	1000b368 <___vfiprintf_internal_r+0xeb4>
1000b430:	8540010e 	bge	r16,r21,1000b438 <___vfiprintf_internal_r+0xf84>
1000b434:	a821883a 	mov	r16,r21
1000b438:	d8800017 	ldw	r2,0(sp)
1000b43c:	1405883a 	add	r2,r2,r16
1000b440:	d8800015 	stw	r2,0(sp)
1000b444:	003e5706 	br	1000ada4 <___vfiprintf_internal_r+0x8f0>
1000b448:	10008126 	beq	r2,zero,1000b650 <___vfiprintf_internal_r+0x119c>
1000b44c:	d9800904 	addi	r6,sp,36
1000b450:	900b883a 	mov	r5,r18
1000b454:	9809883a 	mov	r4,r19
1000b458:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b45c:	103ce81e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b460:	d9400a17 	ldw	r5,40(sp)
1000b464:	d8800b17 	ldw	r2,44(sp)
1000b468:	d8c01804 	addi	r3,sp,96
1000b46c:	29400044 	addi	r5,r5,1
1000b470:	8811883a 	mov	r8,r17
1000b474:	003e3206 	br	1000ad40 <___vfiprintf_internal_r+0x88c>
1000b478:	d8000a15 	stw	zero,40(sp)
1000b47c:	8811883a 	mov	r8,r17
1000b480:	003c4e06 	br	1000a5bc <___vfiprintf_internal_r+0x108>
1000b484:	002d883a 	mov	r22,zero
1000b488:	003d4406 	br	1000a99c <___vfiprintf_internal_r+0x4e8>
1000b48c:	68003326 	beq	r13,zero,1000b55c <___vfiprintf_internal_r+0x10a8>
1000b490:	d8800884 	addi	r2,sp,34
1000b494:	d8801615 	stw	r2,88(sp)
1000b498:	00800084 	movi	r2,2
1000b49c:	d8801715 	stw	r2,92(sp)
1000b4a0:	da001804 	addi	r8,sp,96
1000b4a4:	01000044 	movi	r4,1
1000b4a8:	003fa106 	br	1000b330 <___vfiprintf_internal_r+0xe7c>
1000b4ac:	d8c01804 	addi	r3,sp,96
1000b4b0:	01400044 	movi	r5,1
1000b4b4:	0009883a 	mov	r4,zero
1000b4b8:	8811883a 	mov	r8,r17
1000b4bc:	003e1c06 	br	1000ad30 <___vfiprintf_internal_r+0x87c>
1000b4c0:	10003826 	beq	r2,zero,1000b5a4 <___vfiprintf_internal_r+0x10f0>
1000b4c4:	d9800904 	addi	r6,sp,36
1000b4c8:	900b883a 	mov	r5,r18
1000b4cc:	9809883a 	mov	r4,r19
1000b4d0:	da400515 	stw	r9,20(sp)
1000b4d4:	db000215 	stw	r12,8(sp)
1000b4d8:	db400115 	stw	r13,4(sp)
1000b4dc:	000a3a80 	call	1000a3a8 <__sprint_r.part.0>
1000b4e0:	103cc71e 	bne	r2,zero,1000a800 <___vfiprintf_internal_r+0x34c>
1000b4e4:	d9000a17 	ldw	r4,40(sp)
1000b4e8:	d8800b17 	ldw	r2,44(sp)
1000b4ec:	8811883a 	mov	r8,r17
1000b4f0:	21400044 	addi	r5,r4,1
1000b4f4:	da400517 	ldw	r9,20(sp)
1000b4f8:	db000217 	ldw	r12,8(sp)
1000b4fc:	db400117 	ldw	r13,4(sp)
1000b500:	003de206 	br	1000ac8c <___vfiprintf_internal_r+0x7d8>
1000b504:	e029883a 	mov	r20,fp
1000b508:	003c3106 	br	1000a5d0 <___vfiprintf_internal_r+0x11c>
1000b50c:	882f883a 	mov	r23,r17
1000b510:	003ecf06 	br	1000b050 <___vfiprintf_internal_r+0xb9c>
1000b514:	31400044 	addi	r5,r6,1
1000b518:	68c00204 	addi	r3,r13,8
1000b51c:	3009883a 	mov	r4,r6
1000b520:	6811883a 	mov	r8,r13
1000b524:	003e0406 	br	1000ad38 <___vfiprintf_internal_r+0x884>
1000b528:	00c00c04 	movi	r3,48
1000b52c:	d88008c5 	stb	r2,35(sp)
1000b530:	d8c00885 	stb	r3,34(sp)
1000b534:	63000094 	ori	r12,r12,2
1000b538:	00800084 	movi	r2,2
1000b53c:	003d3606 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000b540:	d9400017 	ldw	r5,0(sp)
1000b544:	20800017 	ldw	r2,0(r4)
1000b548:	d8c00315 	stw	r3,12(sp)
1000b54c:	2809d7fa 	srai	r4,r5,31
1000b550:	11400015 	stw	r5,0(r2)
1000b554:	11000115 	stw	r4,4(r2)
1000b558:	003bff06 	br	1000a558 <___vfiprintf_internal_r+0xa4>
1000b55c:	0009883a 	mov	r4,zero
1000b560:	d8c01804 	addi	r3,sp,96
1000b564:	01400044 	movi	r5,1
1000b568:	8811883a 	mov	r8,r17
1000b56c:	003df006 	br	1000ad30 <___vfiprintf_internal_r+0x87c>
1000b570:	0421c83a 	sub	r16,zero,r16
1000b574:	ddc00315 	stw	r23,12(sp)
1000b578:	003cdb06 	br	1000a8e8 <___vfiprintf_internal_r+0x434>
1000b57c:	b809883a 	mov	r4,r23
1000b580:	da000215 	stw	r8,8(sp)
1000b584:	db000115 	stw	r12,4(sp)
1000b588:	000328c0 	call	1000328c <strlen>
1000b58c:	102d883a 	mov	r22,r2
1000b590:	102b883a 	mov	r21,r2
1000b594:	dd000315 	stw	r20,12(sp)
1000b598:	db000117 	ldw	r12,4(sp)
1000b59c:	da000217 	ldw	r8,8(sp)
1000b5a0:	003dad06 	br	1000ac58 <___vfiprintf_internal_r+0x7a4>
1000b5a4:	d8c00847 	ldb	r3,33(sp)
1000b5a8:	1800551e 	bne	r3,zero,1000b700 <___vfiprintf_internal_r+0x124c>
1000b5ac:	683f581e 	bne	r13,zero,1000b310 <___vfiprintf_internal_r+0xe5c>
1000b5b0:	0009883a 	mov	r4,zero
1000b5b4:	d8c01804 	addi	r3,sp,96
1000b5b8:	01400044 	movi	r5,1
1000b5bc:	8811883a 	mov	r8,r17
1000b5c0:	003ddd06 	br	1000ad38 <___vfiprintf_internal_r+0x884>
1000b5c4:	d8800317 	ldw	r2,12(sp)
1000b5c8:	10800017 	ldw	r2,0(r2)
1000b5cc:	d8c00315 	stw	r3,12(sp)
1000b5d0:	d8c00017 	ldw	r3,0(sp)
1000b5d4:	10c00015 	stw	r3,0(r2)
1000b5d8:	003bdf06 	br	1000a558 <___vfiprintf_internal_r+0xa4>
1000b5dc:	882f883a 	mov	r23,r17
1000b5e0:	00000206 	br	1000b5ec <___vfiprintf_internal_r+0x1138>
1000b5e4:	102b883a 	mov	r21,r2
1000b5e8:	182d883a 	mov	r22,r3
1000b5ec:	a809883a 	mov	r4,r21
1000b5f0:	b00b883a 	mov	r5,r22
1000b5f4:	01800284 	movi	r6,10
1000b5f8:	000f883a 	mov	r7,zero
1000b5fc:	db400615 	stw	r13,24(sp)
1000b600:	da000515 	stw	r8,20(sp)
1000b604:	da400215 	stw	r9,8(sp)
1000b608:	db000115 	stw	r12,4(sp)
1000b60c:	000c87c0 	call	1000c87c <__umoddi3>
1000b610:	10800c04 	addi	r2,r2,48
1000b614:	bdffffc4 	addi	r23,r23,-1
1000b618:	a809883a 	mov	r4,r21
1000b61c:	b00b883a 	mov	r5,r22
1000b620:	b8800005 	stb	r2,0(r23)
1000b624:	01800284 	movi	r6,10
1000b628:	000f883a 	mov	r7,zero
1000b62c:	000c2e40 	call	1000c2e4 <__udivdi3>
1000b630:	db000117 	ldw	r12,4(sp)
1000b634:	da400217 	ldw	r9,8(sp)
1000b638:	da000517 	ldw	r8,20(sp)
1000b63c:	db400617 	ldw	r13,24(sp)
1000b640:	b03fe81e 	bne	r22,zero,1000b5e4 <___vfiprintf_internal_r+0x1130>
1000b644:	ad4002a8 	cmpgeui	r21,r21,10
1000b648:	a83fe61e 	bne	r21,zero,1000b5e4 <___vfiprintf_internal_r+0x1130>
1000b64c:	003e9606 	br	1000b0a8 <___vfiprintf_internal_r+0xbf4>
1000b650:	00c00044 	movi	r3,1
1000b654:	d8c00a15 	stw	r3,40(sp)
1000b658:	b005883a 	mov	r2,r22
1000b65c:	ddc01615 	stw	r23,88(sp)
1000b660:	dd801715 	stw	r22,92(sp)
1000b664:	dd800b15 	stw	r22,44(sp)
1000b668:	d8c01804 	addi	r3,sp,96
1000b66c:	003dc306 	br	1000ad7c <___vfiprintf_internal_r+0x8c8>
1000b670:	10c00060 	cmpeqi	r3,r2,1
1000b674:	a019883a 	mov	r12,r20
1000b678:	183e3926 	beq	r3,zero,1000af60 <___vfiprintf_internal_r+0xaac>
1000b67c:	003e6f06 	br	1000b03c <___vfiprintf_internal_r+0xb88>
1000b680:	e0800043 	ldbu	r2,1(fp)
1000b684:	63000814 	ori	r12,r12,32
1000b688:	e7000044 	addi	fp,fp,1
1000b68c:	10803fcc 	andi	r2,r2,255
1000b690:	1080201c 	xori	r2,r2,128
1000b694:	10bfe004 	addi	r2,r2,-128
1000b698:	003bd506 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>
1000b69c:	488001f0 	cmpltui	r2,r9,7
1000b6a0:	482d883a 	mov	r22,r9
1000b6a4:	1000011e 	bne	r2,zero,1000b6ac <___vfiprintf_internal_r+0x11f8>
1000b6a8:	05800184 	movi	r22,6
1000b6ac:	05c40074 	movhi	r23,4097
1000b6b0:	b02b883a 	mov	r21,r22
1000b6b4:	dd000315 	stw	r20,12(sp)
1000b6b8:	bdca1504 	addi	r23,r23,10324
1000b6bc:	003d6606 	br	1000ac58 <___vfiprintf_internal_r+0x7a4>
1000b6c0:	d8800315 	stw	r2,12(sp)
1000b6c4:	002d883a 	mov	r22,zero
1000b6c8:	00800044 	movi	r2,1
1000b6cc:	003cd206 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000b6d0:	d8800315 	stw	r2,12(sp)
1000b6d4:	002d883a 	mov	r22,zero
1000b6d8:	0005883a 	mov	r2,zero
1000b6dc:	003cce06 	br	1000aa18 <___vfiprintf_internal_r+0x564>
1000b6e0:	1809883a 	mov	r4,r3
1000b6e4:	39ca6d04 	addi	r7,r7,10676
1000b6e8:	003ede06 	br	1000b264 <___vfiprintf_internal_r+0xdb0>
1000b6ec:	d8c01804 	addi	r3,sp,96
1000b6f0:	01400044 	movi	r5,1
1000b6f4:	0009883a 	mov	r4,zero
1000b6f8:	8811883a 	mov	r8,r17
1000b6fc:	003d8e06 	br	1000ad38 <___vfiprintf_internal_r+0x884>
1000b700:	d8800844 	addi	r2,sp,33
1000b704:	d8801615 	stw	r2,88(sp)
1000b708:	00800044 	movi	r2,1
1000b70c:	d8801715 	stw	r2,92(sp)
1000b710:	d8c01804 	addi	r3,sp,96
1000b714:	01400044 	movi	r5,1
1000b718:	003d6806 	br	1000acbc <___vfiprintf_internal_r+0x808>
1000b71c:	d9800845 	stb	r6,33(sp)
1000b720:	003c5506 	br	1000a878 <___vfiprintf_internal_r+0x3c4>
1000b724:	482b883a 	mov	r21,r9
1000b728:	dd000315 	stw	r20,12(sp)
1000b72c:	482d883a 	mov	r22,r9
1000b730:	003d4906 	br	1000ac58 <___vfiprintf_internal_r+0x7a4>
1000b734:	d9800845 	stb	r6,33(sp)
1000b738:	003cd906 	br	1000aaa0 <___vfiprintf_internal_r+0x5ec>
1000b73c:	d9800845 	stb	r6,33(sp)
1000b740:	003ce906 	br	1000aae8 <___vfiprintf_internal_r+0x634>
1000b744:	d9800845 	stb	r6,33(sp)
1000b748:	003c8a06 	br	1000a974 <___vfiprintf_internal_r+0x4c0>
1000b74c:	d9800845 	stb	r6,33(sp)
1000b750:	003dd206 	br	1000ae9c <___vfiprintf_internal_r+0x9e8>
1000b754:	d9800845 	stb	r6,33(sp)
1000b758:	003ddd06 	br	1000aed0 <___vfiprintf_internal_r+0xa1c>
1000b75c:	301f883a 	mov	r15,r6
1000b760:	39ca7104 	addi	r7,r7,10692
1000b764:	003f2306 	br	1000b3f4 <___vfiprintf_internal_r+0xf40>
1000b768:	d9800845 	stb	r6,33(sp)
1000b76c:	003d1606 	br	1000abc8 <___vfiprintf_internal_r+0x714>
1000b770:	d9800845 	stb	r6,33(sp)
1000b774:	003d0406 	br	1000ab88 <___vfiprintf_internal_r+0x6d4>
1000b778:	d9800845 	stb	r6,33(sp)
1000b77c:	003cb806 	br	1000aa60 <___vfiprintf_internal_r+0x5ac>
1000b780:	d9800845 	stb	r6,33(sp)
1000b784:	003ddf06 	br	1000af04 <___vfiprintf_internal_r+0xa50>
1000b788:	29800044 	addi	r6,r5,1
1000b78c:	39ca7104 	addi	r7,r7,10692
1000b790:	003db106 	br	1000ae58 <___vfiprintf_internal_r+0x9a4>
1000b794:	181b883a 	mov	r13,r3
1000b798:	280d883a 	mov	r6,r5
1000b79c:	39ca6d04 	addi	r7,r7,10676
1000b7a0:	003e7306 	br	1000b170 <___vfiprintf_internal_r+0xcbc>
1000b7a4:	00bfffc4 	movi	r2,-1
1000b7a8:	d8800015 	stw	r2,0(sp)
1000b7ac:	003c1706 	br	1000a80c <___vfiprintf_internal_r+0x358>
1000b7b0:	d8800317 	ldw	r2,12(sp)
1000b7b4:	12400017 	ldw	r9,0(r2)
1000b7b8:	15c00104 	addi	r23,r2,4
1000b7bc:	4800010e 	bge	r9,zero,1000b7c4 <___vfiprintf_internal_r+0x1310>
1000b7c0:	027fffc4 	movi	r9,-1
1000b7c4:	e0800043 	ldbu	r2,1(fp)
1000b7c8:	ddc00315 	stw	r23,12(sp)
1000b7cc:	2039883a 	mov	fp,r4
1000b7d0:	10803fcc 	andi	r2,r2,255
1000b7d4:	1080201c 	xori	r2,r2,128
1000b7d8:	10bfe004 	addi	r2,r2,-128
1000b7dc:	003b8406 	br	1000a5f0 <___vfiprintf_internal_r+0x13c>

1000b7e0 <__vfiprintf_internal>:
1000b7e0:	00840074 	movhi	r2,4097
1000b7e4:	300f883a 	mov	r7,r6
1000b7e8:	280d883a 	mov	r6,r5
1000b7ec:	200b883a 	mov	r5,r4
1000b7f0:	1113e117 	ldw	r4,20356(r2)
1000b7f4:	000a4b41 	jmpi	1000a4b4 <___vfiprintf_internal_r>

1000b7f8 <__sbprintf>:
1000b7f8:	2880030b 	ldhu	r2,12(r5)
1000b7fc:	2b001917 	ldw	r12,100(r5)
1000b800:	2ac0038b 	ldhu	r11,14(r5)
1000b804:	2a800717 	ldw	r10,28(r5)
1000b808:	2a400917 	ldw	r9,36(r5)
1000b80c:	defee204 	addi	sp,sp,-1144
1000b810:	da001a04 	addi	r8,sp,104
1000b814:	00c10004 	movi	r3,1024
1000b818:	dc011a15 	stw	r16,1128(sp)
1000b81c:	10bfff4c 	andi	r2,r2,65533
1000b820:	2821883a 	mov	r16,r5
1000b824:	d80b883a 	mov	r5,sp
1000b828:	dc811c15 	stw	r18,1136(sp)
1000b82c:	dc411b15 	stw	r17,1132(sp)
1000b830:	dfc11d15 	stw	ra,1140(sp)
1000b834:	2025883a 	mov	r18,r4
1000b838:	d880030d 	sth	r2,12(sp)
1000b83c:	db001915 	stw	r12,100(sp)
1000b840:	dac0038d 	sth	r11,14(sp)
1000b844:	da800715 	stw	r10,28(sp)
1000b848:	da400915 	stw	r9,36(sp)
1000b84c:	da000015 	stw	r8,0(sp)
1000b850:	da000415 	stw	r8,16(sp)
1000b854:	d8c00215 	stw	r3,8(sp)
1000b858:	d8c00515 	stw	r3,20(sp)
1000b85c:	d8000615 	stw	zero,24(sp)
1000b860:	000a4b40 	call	1000a4b4 <___vfiprintf_internal_r>
1000b864:	1023883a 	mov	r17,r2
1000b868:	10000d0e 	bge	r2,zero,1000b8a0 <__sbprintf+0xa8>
1000b86c:	d880030b 	ldhu	r2,12(sp)
1000b870:	1080100c 	andi	r2,r2,64
1000b874:	10000326 	beq	r2,zero,1000b884 <__sbprintf+0x8c>
1000b878:	8080030b 	ldhu	r2,12(r16)
1000b87c:	10801014 	ori	r2,r2,64
1000b880:	8080030d 	sth	r2,12(r16)
1000b884:	8805883a 	mov	r2,r17
1000b888:	dfc11d17 	ldw	ra,1140(sp)
1000b88c:	dc811c17 	ldw	r18,1136(sp)
1000b890:	dc411b17 	ldw	r17,1132(sp)
1000b894:	dc011a17 	ldw	r16,1128(sp)
1000b898:	dec11e04 	addi	sp,sp,1144
1000b89c:	f800283a 	ret
1000b8a0:	d80b883a 	mov	r5,sp
1000b8a4:	9009883a 	mov	r4,r18
1000b8a8:	00071bc0 	call	100071bc <_fflush_r>
1000b8ac:	103fef26 	beq	r2,zero,1000b86c <__sbprintf+0x74>
1000b8b0:	047fffc4 	movi	r17,-1
1000b8b4:	003fed06 	br	1000b86c <__sbprintf+0x74>

1000b8b8 <_write_r>:
1000b8b8:	defffe04 	addi	sp,sp,-8
1000b8bc:	2805883a 	mov	r2,r5
1000b8c0:	dc000015 	stw	r16,0(sp)
1000b8c4:	300b883a 	mov	r5,r6
1000b8c8:	2021883a 	mov	r16,r4
1000b8cc:	380d883a 	mov	r6,r7
1000b8d0:	1009883a 	mov	r4,r2
1000b8d4:	00840074 	movhi	r2,4097
1000b8d8:	dfc00115 	stw	ra,4(sp)
1000b8dc:	101c7915 	stw	zero,29156(r2)
1000b8e0:	000ff100 	call	1000ff10 <write>
1000b8e4:	10ffffd8 	cmpnei	r3,r2,-1
1000b8e8:	18000426 	beq	r3,zero,1000b8fc <_write_r+0x44>
1000b8ec:	dfc00117 	ldw	ra,4(sp)
1000b8f0:	dc000017 	ldw	r16,0(sp)
1000b8f4:	dec00204 	addi	sp,sp,8
1000b8f8:	f800283a 	ret
1000b8fc:	00c40074 	movhi	r3,4097
1000b900:	18dc7917 	ldw	r3,29156(r3)
1000b904:	183ff926 	beq	r3,zero,1000b8ec <_write_r+0x34>
1000b908:	80c00015 	stw	r3,0(r16)
1000b90c:	dfc00117 	ldw	ra,4(sp)
1000b910:	dc000017 	ldw	r16,0(sp)
1000b914:	dec00204 	addi	sp,sp,8
1000b918:	f800283a 	ret

1000b91c <_close_r>:
1000b91c:	defffe04 	addi	sp,sp,-8
1000b920:	dc000015 	stw	r16,0(sp)
1000b924:	00840074 	movhi	r2,4097
1000b928:	2021883a 	mov	r16,r4
1000b92c:	2809883a 	mov	r4,r5
1000b930:	dfc00115 	stw	ra,4(sp)
1000b934:	101c7915 	stw	zero,29156(r2)
1000b938:	000f6dc0 	call	1000f6dc <close>
1000b93c:	10ffffd8 	cmpnei	r3,r2,-1
1000b940:	18000426 	beq	r3,zero,1000b954 <_close_r+0x38>
1000b944:	dfc00117 	ldw	ra,4(sp)
1000b948:	dc000017 	ldw	r16,0(sp)
1000b94c:	dec00204 	addi	sp,sp,8
1000b950:	f800283a 	ret
1000b954:	00c40074 	movhi	r3,4097
1000b958:	18dc7917 	ldw	r3,29156(r3)
1000b95c:	183ff926 	beq	r3,zero,1000b944 <_close_r+0x28>
1000b960:	80c00015 	stw	r3,0(r16)
1000b964:	dfc00117 	ldw	ra,4(sp)
1000b968:	dc000017 	ldw	r16,0(sp)
1000b96c:	dec00204 	addi	sp,sp,8
1000b970:	f800283a 	ret

1000b974 <_calloc_r>:
1000b974:	298b383a 	mul	r5,r5,r6
1000b978:	deffff04 	addi	sp,sp,-4
1000b97c:	dfc00015 	stw	ra,0(sp)
1000b980:	00081b00 	call	100081b0 <_malloc_r>
1000b984:	1007883a 	mov	r3,r2
1000b988:	10000c26 	beq	r2,zero,1000b9bc <_calloc_r+0x48>
1000b98c:	11bfff17 	ldw	r6,-4(r2)
1000b990:	00bfff04 	movi	r2,-4
1000b994:	308c703a 	and	r6,r6,r2
1000b998:	31bfff04 	addi	r6,r6,-4
1000b99c:	30800968 	cmpgeui	r2,r6,37
1000b9a0:	1000141e 	bne	r2,zero,1000b9f4 <_calloc_r+0x80>
1000b9a4:	30800530 	cmpltui	r2,r6,20
1000b9a8:	10000826 	beq	r2,zero,1000b9cc <_calloc_r+0x58>
1000b9ac:	1805883a 	mov	r2,r3
1000b9b0:	10000015 	stw	zero,0(r2)
1000b9b4:	10000115 	stw	zero,4(r2)
1000b9b8:	10000215 	stw	zero,8(r2)
1000b9bc:	1805883a 	mov	r2,r3
1000b9c0:	dfc00017 	ldw	ra,0(sp)
1000b9c4:	dec00104 	addi	sp,sp,4
1000b9c8:	f800283a 	ret
1000b9cc:	18000015 	stw	zero,0(r3)
1000b9d0:	18000115 	stw	zero,4(r3)
1000b9d4:	30800728 	cmpgeui	r2,r6,28
1000b9d8:	10000e26 	beq	r2,zero,1000ba14 <_calloc_r+0xa0>
1000b9dc:	18000215 	stw	zero,8(r3)
1000b9e0:	18000315 	stw	zero,12(r3)
1000b9e4:	31800920 	cmpeqi	r6,r6,36
1000b9e8:	30000c1e 	bne	r6,zero,1000ba1c <_calloc_r+0xa8>
1000b9ec:	18800404 	addi	r2,r3,16
1000b9f0:	003fef06 	br	1000b9b0 <_calloc_r+0x3c>
1000b9f4:	1809883a 	mov	r4,r3
1000b9f8:	000b883a 	mov	r5,zero
1000b9fc:	0008bb80 	call	10008bb8 <memset>
1000ba00:	1007883a 	mov	r3,r2
1000ba04:	1805883a 	mov	r2,r3
1000ba08:	dfc00017 	ldw	ra,0(sp)
1000ba0c:	dec00104 	addi	sp,sp,4
1000ba10:	f800283a 	ret
1000ba14:	18800204 	addi	r2,r3,8
1000ba18:	003fe506 	br	1000b9b0 <_calloc_r+0x3c>
1000ba1c:	18000415 	stw	zero,16(r3)
1000ba20:	18800604 	addi	r2,r3,24
1000ba24:	18000515 	stw	zero,20(r3)
1000ba28:	003fe106 	br	1000b9b0 <_calloc_r+0x3c>

1000ba2c <_fclose_r>:
1000ba2c:	defffc04 	addi	sp,sp,-16
1000ba30:	dfc00315 	stw	ra,12(sp)
1000ba34:	dc800215 	stw	r18,8(sp)
1000ba38:	dc400115 	stw	r17,4(sp)
1000ba3c:	dc000015 	stw	r16,0(sp)
1000ba40:	28000726 	beq	r5,zero,1000ba60 <_fclose_r+0x34>
1000ba44:	2023883a 	mov	r17,r4
1000ba48:	2821883a 	mov	r16,r5
1000ba4c:	20000226 	beq	r4,zero,1000ba58 <_fclose_r+0x2c>
1000ba50:	20800e17 	ldw	r2,56(r4)
1000ba54:	10002726 	beq	r2,zero,1000baf4 <_fclose_r+0xc8>
1000ba58:	8080030f 	ldh	r2,12(r16)
1000ba5c:	1000081e 	bne	r2,zero,1000ba80 <_fclose_r+0x54>
1000ba60:	0025883a 	mov	r18,zero
1000ba64:	9005883a 	mov	r2,r18
1000ba68:	dfc00317 	ldw	ra,12(sp)
1000ba6c:	dc800217 	ldw	r18,8(sp)
1000ba70:	dc400117 	ldw	r17,4(sp)
1000ba74:	dc000017 	ldw	r16,0(sp)
1000ba78:	dec00404 	addi	sp,sp,16
1000ba7c:	f800283a 	ret
1000ba80:	800b883a 	mov	r5,r16
1000ba84:	8809883a 	mov	r4,r17
1000ba88:	0006f940 	call	10006f94 <__sflush_r>
1000ba8c:	1025883a 	mov	r18,r2
1000ba90:	80800b17 	ldw	r2,44(r16)
1000ba94:	10000426 	beq	r2,zero,1000baa8 <_fclose_r+0x7c>
1000ba98:	81400717 	ldw	r5,28(r16)
1000ba9c:	8809883a 	mov	r4,r17
1000baa0:	103ee83a 	callr	r2
1000baa4:	10001716 	blt	r2,zero,1000bb04 <_fclose_r+0xd8>
1000baa8:	8080030b 	ldhu	r2,12(r16)
1000baac:	1080200c 	andi	r2,r2,128
1000bab0:	1000181e 	bne	r2,zero,1000bb14 <_fclose_r+0xe8>
1000bab4:	81400c17 	ldw	r5,48(r16)
1000bab8:	28000526 	beq	r5,zero,1000bad0 <_fclose_r+0xa4>
1000babc:	80801004 	addi	r2,r16,64
1000bac0:	28800226 	beq	r5,r2,1000bacc <_fclose_r+0xa0>
1000bac4:	8809883a 	mov	r4,r17
1000bac8:	00076a40 	call	100076a4 <_free_r>
1000bacc:	80000c15 	stw	zero,48(r16)
1000bad0:	81401117 	ldw	r5,68(r16)
1000bad4:	28000326 	beq	r5,zero,1000bae4 <_fclose_r+0xb8>
1000bad8:	8809883a 	mov	r4,r17
1000badc:	00076a40 	call	100076a4 <_free_r>
1000bae0:	80001115 	stw	zero,68(r16)
1000bae4:	00075500 	call	10007550 <__sfp_lock_acquire>
1000bae8:	8000030d 	sth	zero,12(r16)
1000baec:	00075540 	call	10007554 <__sfp_lock_release>
1000baf0:	003fdc06 	br	1000ba64 <_fclose_r+0x38>
1000baf4:	00075400 	call	10007540 <__sinit>
1000baf8:	8080030f 	ldh	r2,12(r16)
1000bafc:	103fd826 	beq	r2,zero,1000ba60 <_fclose_r+0x34>
1000bb00:	003fdf06 	br	1000ba80 <_fclose_r+0x54>
1000bb04:	8080030b 	ldhu	r2,12(r16)
1000bb08:	04bfffc4 	movi	r18,-1
1000bb0c:	1080200c 	andi	r2,r2,128
1000bb10:	103fe826 	beq	r2,zero,1000bab4 <_fclose_r+0x88>
1000bb14:	81400417 	ldw	r5,16(r16)
1000bb18:	8809883a 	mov	r4,r17
1000bb1c:	00076a40 	call	100076a4 <_free_r>
1000bb20:	003fe406 	br	1000bab4 <_fclose_r+0x88>

1000bb24 <fclose>:
1000bb24:	00840074 	movhi	r2,4097
1000bb28:	200b883a 	mov	r5,r4
1000bb2c:	1113e117 	ldw	r4,20356(r2)
1000bb30:	000ba2c1 	jmpi	1000ba2c <_fclose_r>

1000bb34 <__fputwc>:
1000bb34:	defff904 	addi	sp,sp,-28
1000bb38:	dcc00415 	stw	r19,16(sp)
1000bb3c:	dc800315 	stw	r18,12(sp)
1000bb40:	dc000115 	stw	r16,4(sp)
1000bb44:	dfc00615 	stw	ra,24(sp)
1000bb48:	dd000515 	stw	r20,20(sp)
1000bb4c:	dc400215 	stw	r17,8(sp)
1000bb50:	2025883a 	mov	r18,r4
1000bb54:	2827883a 	mov	r19,r5
1000bb58:	3021883a 	mov	r16,r6
1000bb5c:	000be4c0 	call	1000be4c <__locale_mb_cur_max>
1000bb60:	10800058 	cmpnei	r2,r2,1
1000bb64:	1000071e 	bne	r2,zero,1000bb84 <__fputwc+0x50>
1000bb68:	98bfffc4 	addi	r2,r19,-1
1000bb6c:	10803fe8 	cmpgeui	r2,r2,255
1000bb70:	1000041e 	bne	r2,zero,1000bb84 <__fputwc+0x50>
1000bb74:	980b883a 	mov	r5,r19
1000bb78:	dcc000c5 	stb	r19,3(sp)
1000bb7c:	05000044 	movi	r20,1
1000bb80:	00000a06 	br	1000bbac <__fputwc+0x78>
1000bb84:	81c01704 	addi	r7,r16,92
1000bb88:	980d883a 	mov	r6,r19
1000bb8c:	d94000c4 	addi	r5,sp,3
1000bb90:	9009883a 	mov	r4,r18
1000bb94:	000c1b80 	call	1000c1b8 <_wcrtomb_r>
1000bb98:	1029883a 	mov	r20,r2
1000bb9c:	10bfffd8 	cmpnei	r2,r2,-1
1000bba0:	10003426 	beq	r2,zero,1000bc74 <__fputwc+0x140>
1000bba4:	a0002926 	beq	r20,zero,1000bc4c <__fputwc+0x118>
1000bba8:	d94000c3 	ldbu	r5,3(sp)
1000bbac:	0023883a 	mov	r17,zero
1000bbb0:	00000a06 	br	1000bbdc <__fputwc+0xa8>
1000bbb4:	80800017 	ldw	r2,0(r16)
1000bbb8:	11400005 	stb	r5,0(r2)
1000bbbc:	80800017 	ldw	r2,0(r16)
1000bbc0:	10800044 	addi	r2,r2,1
1000bbc4:	80800015 	stw	r2,0(r16)
1000bbc8:	8c400044 	addi	r17,r17,1
1000bbcc:	d88000c4 	addi	r2,sp,3
1000bbd0:	1445883a 	add	r2,r2,r17
1000bbd4:	8d001d2e 	bgeu	r17,r20,1000bc4c <__fputwc+0x118>
1000bbd8:	11400003 	ldbu	r5,0(r2)
1000bbdc:	80800217 	ldw	r2,8(r16)
1000bbe0:	10bfffc4 	addi	r2,r2,-1
1000bbe4:	80800215 	stw	r2,8(r16)
1000bbe8:	103ff20e 	bge	r2,zero,1000bbb4 <__fputwc+0x80>
1000bbec:	80c00617 	ldw	r3,24(r16)
1000bbf0:	10c01016 	blt	r2,r3,1000bc34 <__fputwc+0x100>
1000bbf4:	80800017 	ldw	r2,0(r16)
1000bbf8:	11400005 	stb	r5,0(r2)
1000bbfc:	80800017 	ldw	r2,0(r16)
1000bc00:	10c00003 	ldbu	r3,0(r2)
1000bc04:	10800044 	addi	r2,r2,1
1000bc08:	18c002a0 	cmpeqi	r3,r3,10
1000bc0c:	183fed26 	beq	r3,zero,1000bbc4 <__fputwc+0x90>
1000bc10:	800d883a 	mov	r6,r16
1000bc14:	01400284 	movi	r5,10
1000bc18:	9009883a 	mov	r4,r18
1000bc1c:	000c05c0 	call	1000c05c <__swbuf_r>
1000bc20:	10bfffe0 	cmpeqi	r2,r2,-1
1000bc24:	10803fcc 	andi	r2,r2,255
1000bc28:	103fe726 	beq	r2,zero,1000bbc8 <__fputwc+0x94>
1000bc2c:	053fffc4 	movi	r20,-1
1000bc30:	00000706 	br	1000bc50 <__fputwc+0x11c>
1000bc34:	29403fcc 	andi	r5,r5,255
1000bc38:	800d883a 	mov	r6,r16
1000bc3c:	9009883a 	mov	r4,r18
1000bc40:	000c05c0 	call	1000c05c <__swbuf_r>
1000bc44:	10bfffe0 	cmpeqi	r2,r2,-1
1000bc48:	003ff606 	br	1000bc24 <__fputwc+0xf0>
1000bc4c:	9829883a 	mov	r20,r19
1000bc50:	a005883a 	mov	r2,r20
1000bc54:	dfc00617 	ldw	ra,24(sp)
1000bc58:	dd000517 	ldw	r20,20(sp)
1000bc5c:	dcc00417 	ldw	r19,16(sp)
1000bc60:	dc800317 	ldw	r18,12(sp)
1000bc64:	dc400217 	ldw	r17,8(sp)
1000bc68:	dc000117 	ldw	r16,4(sp)
1000bc6c:	dec00704 	addi	sp,sp,28
1000bc70:	f800283a 	ret
1000bc74:	8080030b 	ldhu	r2,12(r16)
1000bc78:	10801014 	ori	r2,r2,64
1000bc7c:	8080030d 	sth	r2,12(r16)
1000bc80:	003ff306 	br	1000bc50 <__fputwc+0x11c>

1000bc84 <_fputwc_r>:
1000bc84:	3080030b 	ldhu	r2,12(r6)
1000bc88:	10c8000c 	andi	r3,r2,8192
1000bc8c:	1800051e 	bne	r3,zero,1000bca4 <_fputwc_r+0x20>
1000bc90:	30c01917 	ldw	r3,100(r6)
1000bc94:	10880014 	ori	r2,r2,8192
1000bc98:	3080030d 	sth	r2,12(r6)
1000bc9c:	18880014 	ori	r2,r3,8192
1000bca0:	30801915 	stw	r2,100(r6)
1000bca4:	000bb341 	jmpi	1000bb34 <__fputwc>

1000bca8 <fputwc>:
1000bca8:	defffc04 	addi	sp,sp,-16
1000bcac:	00840074 	movhi	r2,4097
1000bcb0:	dc000115 	stw	r16,4(sp)
1000bcb4:	1413e117 	ldw	r16,20356(r2)
1000bcb8:	dc400215 	stw	r17,8(sp)
1000bcbc:	dfc00315 	stw	ra,12(sp)
1000bcc0:	2023883a 	mov	r17,r4
1000bcc4:	80000226 	beq	r16,zero,1000bcd0 <fputwc+0x28>
1000bcc8:	80800e17 	ldw	r2,56(r16)
1000bccc:	10001026 	beq	r2,zero,1000bd10 <fputwc+0x68>
1000bcd0:	2880030b 	ldhu	r2,12(r5)
1000bcd4:	10c8000c 	andi	r3,r2,8192
1000bcd8:	1800051e 	bne	r3,zero,1000bcf0 <fputwc+0x48>
1000bcdc:	28c01917 	ldw	r3,100(r5)
1000bce0:	10880014 	ori	r2,r2,8192
1000bce4:	2880030d 	sth	r2,12(r5)
1000bce8:	18880014 	ori	r2,r3,8192
1000bcec:	28801915 	stw	r2,100(r5)
1000bcf0:	280d883a 	mov	r6,r5
1000bcf4:	8009883a 	mov	r4,r16
1000bcf8:	880b883a 	mov	r5,r17
1000bcfc:	dfc00317 	ldw	ra,12(sp)
1000bd00:	dc400217 	ldw	r17,8(sp)
1000bd04:	dc000117 	ldw	r16,4(sp)
1000bd08:	dec00404 	addi	sp,sp,16
1000bd0c:	000bb341 	jmpi	1000bb34 <__fputwc>
1000bd10:	8009883a 	mov	r4,r16
1000bd14:	d9400015 	stw	r5,0(sp)
1000bd18:	00075400 	call	10007540 <__sinit>
1000bd1c:	d9400017 	ldw	r5,0(sp)
1000bd20:	003feb06 	br	1000bcd0 <fputwc+0x28>

1000bd24 <_fstat_r>:
1000bd24:	defffe04 	addi	sp,sp,-8
1000bd28:	2805883a 	mov	r2,r5
1000bd2c:	dc000015 	stw	r16,0(sp)
1000bd30:	300b883a 	mov	r5,r6
1000bd34:	2021883a 	mov	r16,r4
1000bd38:	1009883a 	mov	r4,r2
1000bd3c:	00840074 	movhi	r2,4097
1000bd40:	dfc00115 	stw	ra,4(sp)
1000bd44:	101c7915 	stw	zero,29156(r2)
1000bd48:	000f8140 	call	1000f814 <fstat>
1000bd4c:	10ffffd8 	cmpnei	r3,r2,-1
1000bd50:	18000426 	beq	r3,zero,1000bd64 <_fstat_r+0x40>
1000bd54:	dfc00117 	ldw	ra,4(sp)
1000bd58:	dc000017 	ldw	r16,0(sp)
1000bd5c:	dec00204 	addi	sp,sp,8
1000bd60:	f800283a 	ret
1000bd64:	00c40074 	movhi	r3,4097
1000bd68:	18dc7917 	ldw	r3,29156(r3)
1000bd6c:	183ff926 	beq	r3,zero,1000bd54 <_fstat_r+0x30>
1000bd70:	80c00015 	stw	r3,0(r16)
1000bd74:	dfc00117 	ldw	ra,4(sp)
1000bd78:	dc000017 	ldw	r16,0(sp)
1000bd7c:	dec00204 	addi	sp,sp,8
1000bd80:	f800283a 	ret

1000bd84 <_isatty_r>:
1000bd84:	defffe04 	addi	sp,sp,-8
1000bd88:	dc000015 	stw	r16,0(sp)
1000bd8c:	00840074 	movhi	r2,4097
1000bd90:	2021883a 	mov	r16,r4
1000bd94:	2809883a 	mov	r4,r5
1000bd98:	dfc00115 	stw	ra,4(sp)
1000bd9c:	101c7915 	stw	zero,29156(r2)
1000bda0:	000f9000 	call	1000f900 <isatty>
1000bda4:	10ffffd8 	cmpnei	r3,r2,-1
1000bda8:	18000426 	beq	r3,zero,1000bdbc <_isatty_r+0x38>
1000bdac:	dfc00117 	ldw	ra,4(sp)
1000bdb0:	dc000017 	ldw	r16,0(sp)
1000bdb4:	dec00204 	addi	sp,sp,8
1000bdb8:	f800283a 	ret
1000bdbc:	00c40074 	movhi	r3,4097
1000bdc0:	18dc7917 	ldw	r3,29156(r3)
1000bdc4:	183ff926 	beq	r3,zero,1000bdac <_isatty_r+0x28>
1000bdc8:	80c00015 	stw	r3,0(r16)
1000bdcc:	dfc00117 	ldw	ra,4(sp)
1000bdd0:	dc000017 	ldw	r16,0(sp)
1000bdd4:	dec00204 	addi	sp,sp,8
1000bdd8:	f800283a 	ret

1000bddc <_setlocale_r>:
1000bddc:	30001826 	beq	r6,zero,1000be40 <_setlocale_r+0x64>
1000bde0:	01440074 	movhi	r5,4097
1000bde4:	defffe04 	addi	sp,sp,-8
1000bde8:	294a7604 	addi	r5,r5,10712
1000bdec:	3009883a 	mov	r4,r6
1000bdf0:	dc000015 	stw	r16,0(sp)
1000bdf4:	dfc00115 	stw	ra,4(sp)
1000bdf8:	3021883a 	mov	r16,r6
1000bdfc:	000bf840 	call	1000bf84 <strcmp>
1000be00:	1000061e 	bne	r2,zero,1000be1c <_setlocale_r+0x40>
1000be04:	00840074 	movhi	r2,4097
1000be08:	108a7504 	addi	r2,r2,10708
1000be0c:	dfc00117 	ldw	ra,4(sp)
1000be10:	dc000017 	ldw	r16,0(sp)
1000be14:	dec00204 	addi	sp,sp,8
1000be18:	f800283a 	ret
1000be1c:	01440074 	movhi	r5,4097
1000be20:	294a7504 	addi	r5,r5,10708
1000be24:	8009883a 	mov	r4,r16
1000be28:	000bf840 	call	1000bf84 <strcmp>
1000be2c:	103ff526 	beq	r2,zero,1000be04 <_setlocale_r+0x28>
1000be30:	80800003 	ldbu	r2,0(r16)
1000be34:	103ff326 	beq	r2,zero,1000be04 <_setlocale_r+0x28>
1000be38:	0005883a 	mov	r2,zero
1000be3c:	003ff306 	br	1000be0c <_setlocale_r+0x30>
1000be40:	00840074 	movhi	r2,4097
1000be44:	108a7504 	addi	r2,r2,10708
1000be48:	f800283a 	ret

1000be4c <__locale_mb_cur_max>:
1000be4c:	00840074 	movhi	r2,4097
1000be50:	108f4c07 	ldb	r2,15664(r2)
1000be54:	f800283a 	ret

1000be58 <setlocale>:
1000be58:	00840074 	movhi	r2,4097
1000be5c:	280d883a 	mov	r6,r5
1000be60:	200b883a 	mov	r5,r4
1000be64:	1113e117 	ldw	r4,20356(r2)
1000be68:	000bddc1 	jmpi	1000bddc <_setlocale_r>

1000be6c <_lseek_r>:
1000be6c:	defffe04 	addi	sp,sp,-8
1000be70:	2805883a 	mov	r2,r5
1000be74:	dc000015 	stw	r16,0(sp)
1000be78:	300b883a 	mov	r5,r6
1000be7c:	2021883a 	mov	r16,r4
1000be80:	380d883a 	mov	r6,r7
1000be84:	1009883a 	mov	r4,r2
1000be88:	00840074 	movhi	r2,4097
1000be8c:	dfc00115 	stw	ra,4(sp)
1000be90:	101c7915 	stw	zero,29156(r2)
1000be94:	000facc0 	call	1000facc <lseek>
1000be98:	10ffffd8 	cmpnei	r3,r2,-1
1000be9c:	18000426 	beq	r3,zero,1000beb0 <_lseek_r+0x44>
1000bea0:	dfc00117 	ldw	ra,4(sp)
1000bea4:	dc000017 	ldw	r16,0(sp)
1000bea8:	dec00204 	addi	sp,sp,8
1000beac:	f800283a 	ret
1000beb0:	00c40074 	movhi	r3,4097
1000beb4:	18dc7917 	ldw	r3,29156(r3)
1000beb8:	183ff926 	beq	r3,zero,1000bea0 <_lseek_r+0x34>
1000bebc:	80c00015 	stw	r3,0(r16)
1000bec0:	dfc00117 	ldw	ra,4(sp)
1000bec4:	dc000017 	ldw	r16,0(sp)
1000bec8:	dec00204 	addi	sp,sp,8
1000becc:	f800283a 	ret

1000bed0 <_mbtowc_r>:
1000bed0:	00840074 	movhi	r2,4097
1000bed4:	108f3b17 	ldw	r2,15596(r2)
1000bed8:	1000683a 	jmp	r2

1000bedc <__ascii_mbtowc>:
1000bedc:	deffff04 	addi	sp,sp,-4
1000bee0:	28000826 	beq	r5,zero,1000bf04 <__ascii_mbtowc+0x28>
1000bee4:	30000926 	beq	r6,zero,1000bf0c <__ascii_mbtowc+0x30>
1000bee8:	38000b26 	beq	r7,zero,1000bf18 <__ascii_mbtowc+0x3c>
1000beec:	30800003 	ldbu	r2,0(r6)
1000bef0:	28800015 	stw	r2,0(r5)
1000bef4:	30800003 	ldbu	r2,0(r6)
1000bef8:	1004c03a 	cmpne	r2,r2,zero
1000befc:	dec00104 	addi	sp,sp,4
1000bf00:	f800283a 	ret
1000bf04:	d80b883a 	mov	r5,sp
1000bf08:	303ff71e 	bne	r6,zero,1000bee8 <__ascii_mbtowc+0xc>
1000bf0c:	0005883a 	mov	r2,zero
1000bf10:	dec00104 	addi	sp,sp,4
1000bf14:	f800283a 	ret
1000bf18:	00bfff84 	movi	r2,-2
1000bf1c:	003ff706 	br	1000befc <__ascii_mbtowc+0x20>

1000bf20 <_read_r>:
1000bf20:	defffe04 	addi	sp,sp,-8
1000bf24:	2805883a 	mov	r2,r5
1000bf28:	dc000015 	stw	r16,0(sp)
1000bf2c:	300b883a 	mov	r5,r6
1000bf30:	2021883a 	mov	r16,r4
1000bf34:	380d883a 	mov	r6,r7
1000bf38:	1009883a 	mov	r4,r2
1000bf3c:	00840074 	movhi	r2,4097
1000bf40:	dfc00115 	stw	ra,4(sp)
1000bf44:	101c7915 	stw	zero,29156(r2)
1000bf48:	000fca00 	call	1000fca0 <read>
1000bf4c:	10ffffd8 	cmpnei	r3,r2,-1
1000bf50:	18000426 	beq	r3,zero,1000bf64 <_read_r+0x44>
1000bf54:	dfc00117 	ldw	ra,4(sp)
1000bf58:	dc000017 	ldw	r16,0(sp)
1000bf5c:	dec00204 	addi	sp,sp,8
1000bf60:	f800283a 	ret
1000bf64:	00c40074 	movhi	r3,4097
1000bf68:	18dc7917 	ldw	r3,29156(r3)
1000bf6c:	183ff926 	beq	r3,zero,1000bf54 <_read_r+0x34>
1000bf70:	80c00015 	stw	r3,0(r16)
1000bf74:	dfc00117 	ldw	ra,4(sp)
1000bf78:	dc000017 	ldw	r16,0(sp)
1000bf7c:	dec00204 	addi	sp,sp,8
1000bf80:	f800283a 	ret

1000bf84 <strcmp>:
1000bf84:	2144b03a 	or	r2,r4,r5
1000bf88:	108000cc 	andi	r2,r2,3
1000bf8c:	1000171e 	bne	r2,zero,1000bfec <strcmp+0x68>
1000bf90:	20800017 	ldw	r2,0(r4)
1000bf94:	28c00017 	ldw	r3,0(r5)
1000bf98:	10c0141e 	bne	r2,r3,1000bfec <strcmp+0x68>
1000bf9c:	027fbff4 	movhi	r9,65279
1000bfa0:	4a7fbfc4 	addi	r9,r9,-257
1000bfa4:	1247883a 	add	r3,r2,r9
1000bfa8:	02202074 	movhi	r8,32897
1000bfac:	0084303a 	nor	r2,zero,r2
1000bfb0:	1884703a 	and	r2,r3,r2
1000bfb4:	42202004 	addi	r8,r8,-32640
1000bfb8:	1204703a 	and	r2,r2,r8
1000bfbc:	10000226 	beq	r2,zero,1000bfc8 <strcmp+0x44>
1000bfc0:	00002406 	br	1000c054 <strcmp+0xd0>
1000bfc4:	1000231e 	bne	r2,zero,1000c054 <strcmp+0xd0>
1000bfc8:	21000104 	addi	r4,r4,4
1000bfcc:	20c00017 	ldw	r3,0(r4)
1000bfd0:	29400104 	addi	r5,r5,4
1000bfd4:	29800017 	ldw	r6,0(r5)
1000bfd8:	1a45883a 	add	r2,r3,r9
1000bfdc:	00ce303a 	nor	r7,zero,r3
1000bfe0:	11c4703a 	and	r2,r2,r7
1000bfe4:	1204703a 	and	r2,r2,r8
1000bfe8:	19bff626 	beq	r3,r6,1000bfc4 <strcmp+0x40>
1000bfec:	20800003 	ldbu	r2,0(r4)
1000bff0:	10c03fcc 	andi	r3,r2,255
1000bff4:	18c0201c 	xori	r3,r3,128
1000bff8:	18ffe004 	addi	r3,r3,-128
1000bffc:	18000d26 	beq	r3,zero,1000c034 <strcmp+0xb0>
1000c000:	29800007 	ldb	r6,0(r5)
1000c004:	10803fcc 	andi	r2,r2,255
1000c008:	19800326 	beq	r3,r6,1000c018 <strcmp+0x94>
1000c00c:	00000a06 	br	1000c038 <strcmp+0xb4>
1000c010:	29800007 	ldb	r6,0(r5)
1000c014:	11800b1e 	bne	r2,r6,1000c044 <strcmp+0xc0>
1000c018:	21000044 	addi	r4,r4,1
1000c01c:	20c00003 	ldbu	r3,0(r4)
1000c020:	29400044 	addi	r5,r5,1
1000c024:	18803fcc 	andi	r2,r3,255
1000c028:	1080201c 	xori	r2,r2,128
1000c02c:	10bfe004 	addi	r2,r2,-128
1000c030:	103ff71e 	bne	r2,zero,1000c010 <strcmp+0x8c>
1000c034:	0005883a 	mov	r2,zero
1000c038:	28c00003 	ldbu	r3,0(r5)
1000c03c:	10c5c83a 	sub	r2,r2,r3
1000c040:	f800283a 	ret
1000c044:	18803fcc 	andi	r2,r3,255
1000c048:	28c00003 	ldbu	r3,0(r5)
1000c04c:	10c5c83a 	sub	r2,r2,r3
1000c050:	f800283a 	ret
1000c054:	0005883a 	mov	r2,zero
1000c058:	f800283a 	ret

1000c05c <__swbuf_r>:
1000c05c:	defffb04 	addi	sp,sp,-20
1000c060:	dc800215 	stw	r18,8(sp)
1000c064:	dc400115 	stw	r17,4(sp)
1000c068:	dc000015 	stw	r16,0(sp)
1000c06c:	dfc00415 	stw	ra,16(sp)
1000c070:	dcc00315 	stw	r19,12(sp)
1000c074:	2023883a 	mov	r17,r4
1000c078:	2825883a 	mov	r18,r5
1000c07c:	3021883a 	mov	r16,r6
1000c080:	20000226 	beq	r4,zero,1000c08c <__swbuf_r+0x30>
1000c084:	20800e17 	ldw	r2,56(r4)
1000c088:	10003e26 	beq	r2,zero,1000c184 <__swbuf_r+0x128>
1000c08c:	80800617 	ldw	r2,24(r16)
1000c090:	80c0030b 	ldhu	r3,12(r16)
1000c094:	80800215 	stw	r2,8(r16)
1000c098:	1880020c 	andi	r2,r3,8
1000c09c:	10001f26 	beq	r2,zero,1000c11c <__swbuf_r+0xc0>
1000c0a0:	80800417 	ldw	r2,16(r16)
1000c0a4:	10001d26 	beq	r2,zero,1000c11c <__swbuf_r+0xc0>
1000c0a8:	1908000c 	andi	r4,r3,8192
1000c0ac:	94c03fcc 	andi	r19,r18,255
1000c0b0:	20002326 	beq	r4,zero,1000c140 <__swbuf_r+0xe4>
1000c0b4:	80c00017 	ldw	r3,0(r16)
1000c0b8:	81000517 	ldw	r4,20(r16)
1000c0bc:	1885c83a 	sub	r2,r3,r2
1000c0c0:	1100290e 	bge	r2,r4,1000c168 <__swbuf_r+0x10c>
1000c0c4:	10800044 	addi	r2,r2,1
1000c0c8:	81000217 	ldw	r4,8(r16)
1000c0cc:	19400044 	addi	r5,r3,1
1000c0d0:	81400015 	stw	r5,0(r16)
1000c0d4:	213fffc4 	addi	r4,r4,-1
1000c0d8:	81000215 	stw	r4,8(r16)
1000c0dc:	1c800005 	stb	r18,0(r3)
1000c0e0:	80c00517 	ldw	r3,20(r16)
1000c0e4:	18802926 	beq	r3,r2,1000c18c <__swbuf_r+0x130>
1000c0e8:	8080030b 	ldhu	r2,12(r16)
1000c0ec:	1080004c 	andi	r2,r2,1
1000c0f0:	10000226 	beq	r2,zero,1000c0fc <__swbuf_r+0xa0>
1000c0f4:	98800298 	cmpnei	r2,r19,10
1000c0f8:	10002426 	beq	r2,zero,1000c18c <__swbuf_r+0x130>
1000c0fc:	9805883a 	mov	r2,r19
1000c100:	dfc00417 	ldw	ra,16(sp)
1000c104:	dcc00317 	ldw	r19,12(sp)
1000c108:	dc800217 	ldw	r18,8(sp)
1000c10c:	dc400117 	ldw	r17,4(sp)
1000c110:	dc000017 	ldw	r16,0(sp)
1000c114:	dec00504 	addi	sp,sp,20
1000c118:	f800283a 	ret
1000c11c:	800b883a 	mov	r5,r16
1000c120:	8809883a 	mov	r4,r17
1000c124:	000555c0 	call	1000555c <__swsetup_r>
1000c128:	10001c1e 	bne	r2,zero,1000c19c <__swbuf_r+0x140>
1000c12c:	80c0030b 	ldhu	r3,12(r16)
1000c130:	80800417 	ldw	r2,16(r16)
1000c134:	94c03fcc 	andi	r19,r18,255
1000c138:	1908000c 	andi	r4,r3,8192
1000c13c:	203fdd1e 	bne	r4,zero,1000c0b4 <__swbuf_r+0x58>
1000c140:	81001917 	ldw	r4,100(r16)
1000c144:	18c80014 	ori	r3,r3,8192
1000c148:	0177ffc4 	movi	r5,-8193
1000c14c:	2148703a 	and	r4,r4,r5
1000c150:	80c0030d 	sth	r3,12(r16)
1000c154:	80c00017 	ldw	r3,0(r16)
1000c158:	81001915 	stw	r4,100(r16)
1000c15c:	81000517 	ldw	r4,20(r16)
1000c160:	1885c83a 	sub	r2,r3,r2
1000c164:	113fd716 	blt	r2,r4,1000c0c4 <__swbuf_r+0x68>
1000c168:	800b883a 	mov	r5,r16
1000c16c:	8809883a 	mov	r4,r17
1000c170:	00071bc0 	call	100071bc <_fflush_r>
1000c174:	1000091e 	bne	r2,zero,1000c19c <__swbuf_r+0x140>
1000c178:	80c00017 	ldw	r3,0(r16)
1000c17c:	00800044 	movi	r2,1
1000c180:	003fd106 	br	1000c0c8 <__swbuf_r+0x6c>
1000c184:	00075400 	call	10007540 <__sinit>
1000c188:	003fc006 	br	1000c08c <__swbuf_r+0x30>
1000c18c:	800b883a 	mov	r5,r16
1000c190:	8809883a 	mov	r4,r17
1000c194:	00071bc0 	call	100071bc <_fflush_r>
1000c198:	103fd826 	beq	r2,zero,1000c0fc <__swbuf_r+0xa0>
1000c19c:	04ffffc4 	movi	r19,-1
1000c1a0:	003fd606 	br	1000c0fc <__swbuf_r+0xa0>

1000c1a4 <__swbuf>:
1000c1a4:	00840074 	movhi	r2,4097
1000c1a8:	280d883a 	mov	r6,r5
1000c1ac:	200b883a 	mov	r5,r4
1000c1b0:	1113e117 	ldw	r4,20356(r2)
1000c1b4:	000c05c1 	jmpi	1000c05c <__swbuf_r>

1000c1b8 <_wcrtomb_r>:
1000c1b8:	defffa04 	addi	sp,sp,-24
1000c1bc:	dc400415 	stw	r17,16(sp)
1000c1c0:	dc000315 	stw	r16,12(sp)
1000c1c4:	00840074 	movhi	r2,4097
1000c1c8:	dfc00515 	stw	ra,20(sp)
1000c1cc:	2021883a 	mov	r16,r4
1000c1d0:	3823883a 	mov	r17,r7
1000c1d4:	108f3a17 	ldw	r2,15592(r2)
1000c1d8:	28000826 	beq	r5,zero,1000c1fc <_wcrtomb_r+0x44>
1000c1dc:	103ee83a 	callr	r2
1000c1e0:	10ffffd8 	cmpnei	r3,r2,-1
1000c1e4:	18000a26 	beq	r3,zero,1000c210 <_wcrtomb_r+0x58>
1000c1e8:	dfc00517 	ldw	ra,20(sp)
1000c1ec:	dc400417 	ldw	r17,16(sp)
1000c1f0:	dc000317 	ldw	r16,12(sp)
1000c1f4:	dec00604 	addi	sp,sp,24
1000c1f8:	f800283a 	ret
1000c1fc:	000d883a 	mov	r6,zero
1000c200:	d9400084 	addi	r5,sp,2
1000c204:	103ee83a 	callr	r2
1000c208:	10ffffd8 	cmpnei	r3,r2,-1
1000c20c:	183ff61e 	bne	r3,zero,1000c1e8 <_wcrtomb_r+0x30>
1000c210:	00802284 	movi	r2,138
1000c214:	88000015 	stw	zero,0(r17)
1000c218:	80800015 	stw	r2,0(r16)
1000c21c:	00bfffc4 	movi	r2,-1
1000c220:	003ff106 	br	1000c1e8 <_wcrtomb_r+0x30>

1000c224 <wcrtomb>:
1000c224:	defffa04 	addi	sp,sp,-24
1000c228:	00840074 	movhi	r2,4097
1000c22c:	dc400415 	stw	r17,16(sp)
1000c230:	dc000315 	stw	r16,12(sp)
1000c234:	dfc00515 	stw	ra,20(sp)
1000c238:	1413e117 	ldw	r16,20356(r2)
1000c23c:	00840074 	movhi	r2,4097
1000c240:	3023883a 	mov	r17,r6
1000c244:	108f3a17 	ldw	r2,15592(r2)
1000c248:	300f883a 	mov	r7,r6
1000c24c:	20000b26 	beq	r4,zero,1000c27c <wcrtomb+0x58>
1000c250:	280d883a 	mov	r6,r5
1000c254:	200b883a 	mov	r5,r4
1000c258:	8009883a 	mov	r4,r16
1000c25c:	103ee83a 	callr	r2
1000c260:	10ffffd8 	cmpnei	r3,r2,-1
1000c264:	18000b26 	beq	r3,zero,1000c294 <wcrtomb+0x70>
1000c268:	dfc00517 	ldw	ra,20(sp)
1000c26c:	dc400417 	ldw	r17,16(sp)
1000c270:	dc000317 	ldw	r16,12(sp)
1000c274:	dec00604 	addi	sp,sp,24
1000c278:	f800283a 	ret
1000c27c:	000d883a 	mov	r6,zero
1000c280:	d9400084 	addi	r5,sp,2
1000c284:	8009883a 	mov	r4,r16
1000c288:	103ee83a 	callr	r2
1000c28c:	10ffffd8 	cmpnei	r3,r2,-1
1000c290:	183ff51e 	bne	r3,zero,1000c268 <wcrtomb+0x44>
1000c294:	00802284 	movi	r2,138
1000c298:	88000015 	stw	zero,0(r17)
1000c29c:	80800015 	stw	r2,0(r16)
1000c2a0:	00bfffc4 	movi	r2,-1
1000c2a4:	003ff006 	br	1000c268 <wcrtomb+0x44>

1000c2a8 <_wctomb_r>:
1000c2a8:	00840074 	movhi	r2,4097
1000c2ac:	108f3a17 	ldw	r2,15592(r2)
1000c2b0:	1000683a 	jmp	r2

1000c2b4 <__ascii_wctomb>:
1000c2b4:	28000926 	beq	r5,zero,1000c2dc <__ascii_wctomb+0x28>
1000c2b8:	30804030 	cmpltui	r2,r6,256
1000c2bc:	10000326 	beq	r2,zero,1000c2cc <__ascii_wctomb+0x18>
1000c2c0:	29800005 	stb	r6,0(r5)
1000c2c4:	00800044 	movi	r2,1
1000c2c8:	f800283a 	ret
1000c2cc:	00802284 	movi	r2,138
1000c2d0:	20800015 	stw	r2,0(r4)
1000c2d4:	00bfffc4 	movi	r2,-1
1000c2d8:	f800283a 	ret
1000c2dc:	0005883a 	mov	r2,zero
1000c2e0:	f800283a 	ret

1000c2e4 <__udivdi3>:
1000c2e4:	defff504 	addi	sp,sp,-44
1000c2e8:	dd400615 	stw	r21,24(sp)
1000c2ec:	dc000115 	stw	r16,4(sp)
1000c2f0:	dfc00a15 	stw	ra,40(sp)
1000c2f4:	df000915 	stw	fp,36(sp)
1000c2f8:	ddc00815 	stw	r23,32(sp)
1000c2fc:	dd800715 	stw	r22,28(sp)
1000c300:	dd000515 	stw	r20,20(sp)
1000c304:	dcc00415 	stw	r19,16(sp)
1000c308:	dc800315 	stw	r18,12(sp)
1000c30c:	dc400215 	stw	r17,8(sp)
1000c310:	202b883a 	mov	r21,r4
1000c314:	2821883a 	mov	r16,r5
1000c318:	3800821e 	bne	r7,zero,1000c524 <__udivdi3+0x240>
1000c31c:	3827883a 	mov	r19,r7
1000c320:	3023883a 	mov	r17,r6
1000c324:	2025883a 	mov	r18,r4
1000c328:	29803d2e 	bgeu	r5,r6,1000c420 <__udivdi3+0x13c>
1000c32c:	00bfffd4 	movui	r2,65535
1000c330:	282d883a 	mov	r22,r5
1000c334:	1180a52e 	bgeu	r2,r6,1000c5cc <__udivdi3+0x2e8>
1000c338:	00804034 	movhi	r2,256
1000c33c:	30813836 	bltu	r6,r2,1000c820 <__udivdi3+0x53c>
1000c340:	3006d63a 	srli	r3,r6,24
1000c344:	04c00604 	movi	r19,24
1000c348:	00840074 	movhi	r2,4097
1000c34c:	1885883a 	add	r2,r3,r2
1000c350:	108b1943 	ldbu	r2,11365(r2)
1000c354:	14e7883a 	add	r19,r2,r19
1000c358:	00800804 	movi	r2,32
1000c35c:	14c5c83a 	sub	r2,r2,r19
1000c360:	10000526 	beq	r2,zero,1000c378 <__udivdi3+0x94>
1000c364:	80a0983a 	sll	r16,r16,r2
1000c368:	ace6d83a 	srl	r19,r21,r19
1000c36c:	30a2983a 	sll	r17,r6,r2
1000c370:	a8a4983a 	sll	r18,r21,r2
1000c374:	9c2cb03a 	or	r22,r19,r16
1000c378:	882ad43a 	srli	r21,r17,16
1000c37c:	b009883a 	mov	r4,r22
1000c380:	8d3fffcc 	andi	r20,r17,65535
1000c384:	a80b883a 	mov	r5,r21
1000c388:	000cf180 	call	1000cf18 <__umodsi3>
1000c38c:	a80b883a 	mov	r5,r21
1000c390:	b009883a 	mov	r4,r22
1000c394:	1027883a 	mov	r19,r2
1000c398:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c39c:	1021883a 	mov	r16,r2
1000c3a0:	9826943a 	slli	r19,r19,16
1000c3a4:	9004d43a 	srli	r2,r18,16
1000c3a8:	a407383a 	mul	r3,r20,r16
1000c3ac:	9884b03a 	or	r2,r19,r2
1000c3b0:	10c0052e 	bgeu	r2,r3,1000c3c8 <__udivdi3+0xe4>
1000c3b4:	1445883a 	add	r2,r2,r17
1000c3b8:	813fffc4 	addi	r4,r16,-1
1000c3bc:	14400136 	bltu	r2,r17,1000c3c4 <__udivdi3+0xe0>
1000c3c0:	10c12836 	bltu	r2,r3,1000c864 <__udivdi3+0x580>
1000c3c4:	2021883a 	mov	r16,r4
1000c3c8:	10e7c83a 	sub	r19,r2,r3
1000c3cc:	a80b883a 	mov	r5,r21
1000c3d0:	9809883a 	mov	r4,r19
1000c3d4:	000cf180 	call	1000cf18 <__umodsi3>
1000c3d8:	102d883a 	mov	r22,r2
1000c3dc:	a80b883a 	mov	r5,r21
1000c3e0:	9809883a 	mov	r4,r19
1000c3e4:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c3e8:	b02c943a 	slli	r22,r22,16
1000c3ec:	a0a9383a 	mul	r20,r20,r2
1000c3f0:	94bfffcc 	andi	r18,r18,65535
1000c3f4:	b4a4b03a 	or	r18,r22,r18
1000c3f8:	9500052e 	bgeu	r18,r20,1000c410 <__udivdi3+0x12c>
1000c3fc:	8ca5883a 	add	r18,r17,r18
1000c400:	10ffffc4 	addi	r3,r2,-1
1000c404:	94400136 	bltu	r18,r17,1000c40c <__udivdi3+0x128>
1000c408:	95011436 	bltu	r18,r20,1000c85c <__udivdi3+0x578>
1000c40c:	1805883a 	mov	r2,r3
1000c410:	800c943a 	slli	r6,r16,16
1000c414:	0007883a 	mov	r3,zero
1000c418:	3084b03a 	or	r2,r6,r2
1000c41c:	00005506 	br	1000c574 <__udivdi3+0x290>
1000c420:	3000041e 	bne	r6,zero,1000c434 <__udivdi3+0x150>
1000c424:	000b883a 	mov	r5,zero
1000c428:	01000044 	movi	r4,1
1000c42c:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c430:	1023883a 	mov	r17,r2
1000c434:	00bfffd4 	movui	r2,65535
1000c438:	14405f2e 	bgeu	r2,r17,1000c5b8 <__udivdi3+0x2d4>
1000c43c:	00804034 	movhi	r2,256
1000c440:	8880f436 	bltu	r17,r2,1000c814 <__udivdi3+0x530>
1000c444:	8806d63a 	srli	r3,r17,24
1000c448:	04c00604 	movi	r19,24
1000c44c:	00840074 	movhi	r2,4097
1000c450:	1885883a 	add	r2,r3,r2
1000c454:	108b1943 	ldbu	r2,11365(r2)
1000c458:	14e7883a 	add	r19,r2,r19
1000c45c:	00800804 	movi	r2,32
1000c460:	14c5c83a 	sub	r2,r2,r19
1000c464:	10005e1e 	bne	r2,zero,1000c5e0 <__udivdi3+0x2fc>
1000c468:	8828d43a 	srli	r20,r17,16
1000c46c:	8461c83a 	sub	r16,r16,r17
1000c470:	8d7fffcc 	andi	r21,r17,65535
1000c474:	00c00044 	movi	r3,1
1000c478:	8009883a 	mov	r4,r16
1000c47c:	a00b883a 	mov	r5,r20
1000c480:	d8c00015 	stw	r3,0(sp)
1000c484:	000cf180 	call	1000cf18 <__umodsi3>
1000c488:	8009883a 	mov	r4,r16
1000c48c:	a00b883a 	mov	r5,r20
1000c490:	1027883a 	mov	r19,r2
1000c494:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c498:	1021883a 	mov	r16,r2
1000c49c:	9826943a 	slli	r19,r19,16
1000c4a0:	9004d43a 	srli	r2,r18,16
1000c4a4:	8549383a 	mul	r4,r16,r21
1000c4a8:	d8c00017 	ldw	r3,0(sp)
1000c4ac:	9884b03a 	or	r2,r19,r2
1000c4b0:	1100052e 	bgeu	r2,r4,1000c4c8 <__udivdi3+0x1e4>
1000c4b4:	1445883a 	add	r2,r2,r17
1000c4b8:	817fffc4 	addi	r5,r16,-1
1000c4bc:	14400136 	bltu	r2,r17,1000c4c4 <__udivdi3+0x1e0>
1000c4c0:	1100eb36 	bltu	r2,r4,1000c870 <__udivdi3+0x58c>
1000c4c4:	2821883a 	mov	r16,r5
1000c4c8:	1127c83a 	sub	r19,r2,r4
1000c4cc:	a00b883a 	mov	r5,r20
1000c4d0:	9809883a 	mov	r4,r19
1000c4d4:	d8c00015 	stw	r3,0(sp)
1000c4d8:	000cf180 	call	1000cf18 <__umodsi3>
1000c4dc:	102d883a 	mov	r22,r2
1000c4e0:	a00b883a 	mov	r5,r20
1000c4e4:	9809883a 	mov	r4,r19
1000c4e8:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c4ec:	b02c943a 	slli	r22,r22,16
1000c4f0:	156b383a 	mul	r21,r2,r21
1000c4f4:	94bfffcc 	andi	r18,r18,65535
1000c4f8:	b4a4b03a 	or	r18,r22,r18
1000c4fc:	d8c00017 	ldw	r3,0(sp)
1000c500:	9540052e 	bgeu	r18,r21,1000c518 <__udivdi3+0x234>
1000c504:	8ca5883a 	add	r18,r17,r18
1000c508:	113fffc4 	addi	r4,r2,-1
1000c50c:	94400136 	bltu	r18,r17,1000c514 <__udivdi3+0x230>
1000c510:	9540d036 	bltu	r18,r21,1000c854 <__udivdi3+0x570>
1000c514:	2005883a 	mov	r2,r4
1000c518:	800c943a 	slli	r6,r16,16
1000c51c:	3084b03a 	or	r2,r6,r2
1000c520:	00001406 	br	1000c574 <__udivdi3+0x290>
1000c524:	29c01136 	bltu	r5,r7,1000c56c <__udivdi3+0x288>
1000c528:	00bfffd4 	movui	r2,65535
1000c52c:	11c01d2e 	bgeu	r2,r7,1000c5a4 <__udivdi3+0x2c0>
1000c530:	00804034 	movhi	r2,256
1000c534:	3880ac36 	bltu	r7,r2,1000c7e8 <__udivdi3+0x504>
1000c538:	3806d63a 	srli	r3,r7,24
1000c53c:	01000604 	movi	r4,24
1000c540:	00840074 	movhi	r2,4097
1000c544:	1885883a 	add	r2,r3,r2
1000c548:	10cb1943 	ldbu	r3,11365(r2)
1000c54c:	05800804 	movi	r22,32
1000c550:	1907883a 	add	r3,r3,r4
1000c554:	b0edc83a 	sub	r22,r22,r3
1000c558:	b000531e 	bne	r22,zero,1000c6a8 <__udivdi3+0x3c4>
1000c55c:	3c00a536 	bltu	r7,r16,1000c7f4 <__udivdi3+0x510>
1000c560:	a985403a 	cmpgeu	r2,r21,r6
1000c564:	0007883a 	mov	r3,zero
1000c568:	00000206 	br	1000c574 <__udivdi3+0x290>
1000c56c:	0007883a 	mov	r3,zero
1000c570:	0005883a 	mov	r2,zero
1000c574:	dfc00a17 	ldw	ra,40(sp)
1000c578:	df000917 	ldw	fp,36(sp)
1000c57c:	ddc00817 	ldw	r23,32(sp)
1000c580:	dd800717 	ldw	r22,28(sp)
1000c584:	dd400617 	ldw	r21,24(sp)
1000c588:	dd000517 	ldw	r20,20(sp)
1000c58c:	dcc00417 	ldw	r19,16(sp)
1000c590:	dc800317 	ldw	r18,12(sp)
1000c594:	dc400217 	ldw	r17,8(sp)
1000c598:	dc000117 	ldw	r16,4(sp)
1000c59c:	dec00b04 	addi	sp,sp,44
1000c5a0:	f800283a 	ret
1000c5a4:	38804030 	cmpltui	r2,r7,256
1000c5a8:	1000951e 	bne	r2,zero,1000c800 <__udivdi3+0x51c>
1000c5ac:	3806d23a 	srli	r3,r7,8
1000c5b0:	01000204 	movi	r4,8
1000c5b4:	003fe206 	br	1000c540 <__udivdi3+0x25c>
1000c5b8:	88804030 	cmpltui	r2,r17,256
1000c5bc:	10009b1e 	bne	r2,zero,1000c82c <__udivdi3+0x548>
1000c5c0:	8806d23a 	srli	r3,r17,8
1000c5c4:	04c00204 	movi	r19,8
1000c5c8:	003fa006 	br	1000c44c <__udivdi3+0x168>
1000c5cc:	30804030 	cmpltui	r2,r6,256
1000c5d0:	10008e1e 	bne	r2,zero,1000c80c <__udivdi3+0x528>
1000c5d4:	3006d23a 	srli	r3,r6,8
1000c5d8:	04c00204 	movi	r19,8
1000c5dc:	003f5a06 	br	1000c348 <__udivdi3+0x64>
1000c5e0:	88a2983a 	sll	r17,r17,r2
1000c5e4:	84ecd83a 	srl	r22,r16,r19
1000c5e8:	80a0983a 	sll	r16,r16,r2
1000c5ec:	8828d43a 	srli	r20,r17,16
1000c5f0:	b009883a 	mov	r4,r22
1000c5f4:	ace6d83a 	srl	r19,r21,r19
1000c5f8:	a00b883a 	mov	r5,r20
1000c5fc:	a8a4983a 	sll	r18,r21,r2
1000c600:	000cf180 	call	1000cf18 <__umodsi3>
1000c604:	b009883a 	mov	r4,r22
1000c608:	a00b883a 	mov	r5,r20
1000c60c:	9c26b03a 	or	r19,r19,r16
1000c610:	1021883a 	mov	r16,r2
1000c614:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c618:	102f883a 	mov	r23,r2
1000c61c:	8d7fffcc 	andi	r21,r17,65535
1000c620:	8020943a 	slli	r16,r16,16
1000c624:	9804d43a 	srli	r2,r19,16
1000c628:	aded383a 	mul	r22,r21,r23
1000c62c:	8084b03a 	or	r2,r16,r2
1000c630:	1580062e 	bgeu	r2,r22,1000c64c <__udivdi3+0x368>
1000c634:	1445883a 	add	r2,r2,r17
1000c638:	b8ffffc4 	addi	r3,r23,-1
1000c63c:	14408336 	bltu	r2,r17,1000c84c <__udivdi3+0x568>
1000c640:	1580822e 	bgeu	r2,r22,1000c84c <__udivdi3+0x568>
1000c644:	bdffff84 	addi	r23,r23,-2
1000c648:	1445883a 	add	r2,r2,r17
1000c64c:	15adc83a 	sub	r22,r2,r22
1000c650:	a00b883a 	mov	r5,r20
1000c654:	b009883a 	mov	r4,r22
1000c658:	000cf180 	call	1000cf18 <__umodsi3>
1000c65c:	1021883a 	mov	r16,r2
1000c660:	b009883a 	mov	r4,r22
1000c664:	a00b883a 	mov	r5,r20
1000c668:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c66c:	8020943a 	slli	r16,r16,16
1000c670:	a889383a 	mul	r4,r21,r2
1000c674:	9cffffcc 	andi	r19,r19,65535
1000c678:	84e0b03a 	or	r16,r16,r19
1000c67c:	8100062e 	bgeu	r16,r4,1000c698 <__udivdi3+0x3b4>
1000c680:	8461883a 	add	r16,r16,r17
1000c684:	10ffffc4 	addi	r3,r2,-1
1000c688:	84406c36 	bltu	r16,r17,1000c83c <__udivdi3+0x558>
1000c68c:	81006b2e 	bgeu	r16,r4,1000c83c <__udivdi3+0x558>
1000c690:	10bfff84 	addi	r2,r2,-2
1000c694:	8461883a 	add	r16,r16,r17
1000c698:	b806943a 	slli	r3,r23,16
1000c69c:	8121c83a 	sub	r16,r16,r4
1000c6a0:	1886b03a 	or	r3,r3,r2
1000c6a4:	003f7406 	br	1000c478 <__udivdi3+0x194>
1000c6a8:	30f8d83a 	srl	fp,r6,r3
1000c6ac:	3d8e983a 	sll	r7,r7,r22
1000c6b0:	80eed83a 	srl	r23,r16,r3
1000c6b4:	a8c6d83a 	srl	r3,r21,r3
1000c6b8:	e1f8b03a 	or	fp,fp,r7
1000c6bc:	e024d43a 	srli	r18,fp,16
1000c6c0:	85a0983a 	sll	r16,r16,r22
1000c6c4:	b809883a 	mov	r4,r23
1000c6c8:	900b883a 	mov	r5,r18
1000c6cc:	1c22b03a 	or	r17,r3,r16
1000c6d0:	35a8983a 	sll	r20,r6,r22
1000c6d4:	000cf180 	call	1000cf18 <__umodsi3>
1000c6d8:	b809883a 	mov	r4,r23
1000c6dc:	900b883a 	mov	r5,r18
1000c6e0:	1027883a 	mov	r19,r2
1000c6e4:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c6e8:	1021883a 	mov	r16,r2
1000c6ec:	e0ffffcc 	andi	r3,fp,65535
1000c6f0:	9826943a 	slli	r19,r19,16
1000c6f4:	8804d43a 	srli	r2,r17,16
1000c6f8:	1c09383a 	mul	r4,r3,r16
1000c6fc:	9884b03a 	or	r2,r19,r2
1000c700:	1100062e 	bgeu	r2,r4,1000c71c <__udivdi3+0x438>
1000c704:	1705883a 	add	r2,r2,fp
1000c708:	817fffc4 	addi	r5,r16,-1
1000c70c:	17004d36 	bltu	r2,fp,1000c844 <__udivdi3+0x560>
1000c710:	11004c2e 	bgeu	r2,r4,1000c844 <__udivdi3+0x560>
1000c714:	843fff84 	addi	r16,r16,-2
1000c718:	1705883a 	add	r2,r2,fp
1000c71c:	1127c83a 	sub	r19,r2,r4
1000c720:	900b883a 	mov	r5,r18
1000c724:	9809883a 	mov	r4,r19
1000c728:	d8c00015 	stw	r3,0(sp)
1000c72c:	000cf180 	call	1000cf18 <__umodsi3>
1000c730:	9809883a 	mov	r4,r19
1000c734:	900b883a 	mov	r5,r18
1000c738:	102f883a 	mov	r23,r2
1000c73c:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c740:	d8c00017 	ldw	r3,0(sp)
1000c744:	b82e943a 	slli	r23,r23,16
1000c748:	8c7fffcc 	andi	r17,r17,65535
1000c74c:	1889383a 	mul	r4,r3,r2
1000c750:	bc62b03a 	or	r17,r23,r17
1000c754:	8900062e 	bgeu	r17,r4,1000c770 <__udivdi3+0x48c>
1000c758:	8f23883a 	add	r17,r17,fp
1000c75c:	10ffffc4 	addi	r3,r2,-1
1000c760:	8f003436 	bltu	r17,fp,1000c834 <__udivdi3+0x550>
1000c764:	8900332e 	bgeu	r17,r4,1000c834 <__udivdi3+0x550>
1000c768:	10bfff84 	addi	r2,r2,-2
1000c76c:	8f23883a 	add	r17,r17,fp
1000c770:	8020943a 	slli	r16,r16,16
1000c774:	a17fffcc 	andi	r5,r20,65535
1000c778:	a00cd43a 	srli	r6,r20,16
1000c77c:	8084b03a 	or	r2,r16,r2
1000c780:	10ffffcc 	andi	r3,r2,65535
1000c784:	1028d43a 	srli	r20,r2,16
1000c788:	1951383a 	mul	r8,r3,r5
1000c78c:	1987383a 	mul	r3,r3,r6
1000c790:	a14b383a 	mul	r5,r20,r5
1000c794:	400ed43a 	srli	r7,r8,16
1000c798:	8923c83a 	sub	r17,r17,r4
1000c79c:	1947883a 	add	r3,r3,r5
1000c7a0:	38c7883a 	add	r3,r7,r3
1000c7a4:	a1a9383a 	mul	r20,r20,r6
1000c7a8:	1940022e 	bgeu	r3,r5,1000c7b4 <__udivdi3+0x4d0>
1000c7ac:	01000074 	movhi	r4,1
1000c7b0:	a129883a 	add	r20,r20,r4
1000c7b4:	180cd43a 	srli	r6,r3,16
1000c7b8:	3529883a 	add	r20,r6,r20
1000c7bc:	8d000836 	bltu	r17,r20,1000c7e0 <__udivdi3+0x4fc>
1000c7c0:	8d000226 	beq	r17,r20,1000c7cc <__udivdi3+0x4e8>
1000c7c4:	0007883a 	mov	r3,zero
1000c7c8:	003f6a06 	br	1000c574 <__udivdi3+0x290>
1000c7cc:	1806943a 	slli	r3,r3,16
1000c7d0:	ad8c983a 	sll	r6,r21,r22
1000c7d4:	423fffcc 	andi	r8,r8,65535
1000c7d8:	1a07883a 	add	r3,r3,r8
1000c7dc:	30fff92e 	bgeu	r6,r3,1000c7c4 <__udivdi3+0x4e0>
1000c7e0:	10bfffc4 	addi	r2,r2,-1
1000c7e4:	003ff706 	br	1000c7c4 <__udivdi3+0x4e0>
1000c7e8:	3806d43a 	srli	r3,r7,16
1000c7ec:	01000404 	movi	r4,16
1000c7f0:	003f5306 	br	1000c540 <__udivdi3+0x25c>
1000c7f4:	0007883a 	mov	r3,zero
1000c7f8:	00800044 	movi	r2,1
1000c7fc:	003f5d06 	br	1000c574 <__udivdi3+0x290>
1000c800:	3807883a 	mov	r3,r7
1000c804:	0009883a 	mov	r4,zero
1000c808:	003f4d06 	br	1000c540 <__udivdi3+0x25c>
1000c80c:	3007883a 	mov	r3,r6
1000c810:	003ecd06 	br	1000c348 <__udivdi3+0x64>
1000c814:	8806d43a 	srli	r3,r17,16
1000c818:	04c00404 	movi	r19,16
1000c81c:	003f0b06 	br	1000c44c <__udivdi3+0x168>
1000c820:	3006d43a 	srli	r3,r6,16
1000c824:	04c00404 	movi	r19,16
1000c828:	003ec706 	br	1000c348 <__udivdi3+0x64>
1000c82c:	8807883a 	mov	r3,r17
1000c830:	003f0606 	br	1000c44c <__udivdi3+0x168>
1000c834:	1805883a 	mov	r2,r3
1000c838:	003fcd06 	br	1000c770 <__udivdi3+0x48c>
1000c83c:	1805883a 	mov	r2,r3
1000c840:	003f9506 	br	1000c698 <__udivdi3+0x3b4>
1000c844:	2821883a 	mov	r16,r5
1000c848:	003fb406 	br	1000c71c <__udivdi3+0x438>
1000c84c:	182f883a 	mov	r23,r3
1000c850:	003f7e06 	br	1000c64c <__udivdi3+0x368>
1000c854:	10bfff84 	addi	r2,r2,-2
1000c858:	003f2f06 	br	1000c518 <__udivdi3+0x234>
1000c85c:	10bfff84 	addi	r2,r2,-2
1000c860:	003eeb06 	br	1000c410 <__udivdi3+0x12c>
1000c864:	843fff84 	addi	r16,r16,-2
1000c868:	1445883a 	add	r2,r2,r17
1000c86c:	003ed606 	br	1000c3c8 <__udivdi3+0xe4>
1000c870:	843fff84 	addi	r16,r16,-2
1000c874:	1445883a 	add	r2,r2,r17
1000c878:	003f1306 	br	1000c4c8 <__udivdi3+0x1e4>

1000c87c <__umoddi3>:
1000c87c:	defff404 	addi	sp,sp,-48
1000c880:	dc400315 	stw	r17,12(sp)
1000c884:	dc000215 	stw	r16,8(sp)
1000c888:	dfc00b15 	stw	ra,44(sp)
1000c88c:	df000a15 	stw	fp,40(sp)
1000c890:	ddc00915 	stw	r23,36(sp)
1000c894:	dd800815 	stw	r22,32(sp)
1000c898:	dd400715 	stw	r21,28(sp)
1000c89c:	dd000615 	stw	r20,24(sp)
1000c8a0:	dcc00515 	stw	r19,20(sp)
1000c8a4:	dc800415 	stw	r18,16(sp)
1000c8a8:	2823883a 	mov	r17,r5
1000c8ac:	2021883a 	mov	r16,r4
1000c8b0:	3800701e 	bne	r7,zero,1000ca74 <__umoddi3+0x1f8>
1000c8b4:	382b883a 	mov	r21,r7
1000c8b8:	3027883a 	mov	r19,r6
1000c8bc:	2029883a 	mov	r20,r4
1000c8c0:	2980392e 	bgeu	r5,r6,1000c9a8 <__umoddi3+0x12c>
1000c8c4:	00bfffd4 	movui	r2,65535
1000c8c8:	282f883a 	mov	r23,r5
1000c8cc:	11809736 	bltu	r2,r6,1000cb2c <__umoddi3+0x2b0>
1000c8d0:	30804030 	cmpltui	r2,r6,256
1000c8d4:	1001231e 	bne	r2,zero,1000cd64 <__umoddi3+0x4e8>
1000c8d8:	3006d23a 	srli	r3,r6,8
1000c8dc:	05400204 	movi	r21,8
1000c8e0:	00840074 	movhi	r2,4097
1000c8e4:	1885883a 	add	r2,r3,r2
1000c8e8:	108b1943 	ldbu	r2,11365(r2)
1000c8ec:	156b883a 	add	r21,r2,r21
1000c8f0:	00800804 	movi	r2,32
1000c8f4:	1565c83a 	sub	r18,r2,r21
1000c8f8:	90000526 	beq	r18,zero,1000c910 <__umoddi3+0x94>
1000c8fc:	8ca2983a 	sll	r17,r17,r18
1000c900:	856ad83a 	srl	r21,r16,r21
1000c904:	34a6983a 	sll	r19,r6,r18
1000c908:	84a8983a 	sll	r20,r16,r18
1000c90c:	ac6eb03a 	or	r23,r21,r17
1000c910:	982cd43a 	srli	r22,r19,16
1000c914:	b809883a 	mov	r4,r23
1000c918:	9c3fffcc 	andi	r16,r19,65535
1000c91c:	b00b883a 	mov	r5,r22
1000c920:	000cf180 	call	1000cf18 <__umodsi3>
1000c924:	b00b883a 	mov	r5,r22
1000c928:	b809883a 	mov	r4,r23
1000c92c:	102b883a 	mov	r21,r2
1000c930:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c934:	a82a943a 	slli	r21,r21,16
1000c938:	a006d43a 	srli	r3,r20,16
1000c93c:	8085383a 	mul	r2,r16,r2
1000c940:	a8c6b03a 	or	r3,r21,r3
1000c944:	1880032e 	bgeu	r3,r2,1000c954 <__umoddi3+0xd8>
1000c948:	1cc7883a 	add	r3,r3,r19
1000c94c:	1cc00136 	bltu	r3,r19,1000c954 <__umoddi3+0xd8>
1000c950:	18811836 	bltu	r3,r2,1000cdb4 <__umoddi3+0x538>
1000c954:	18abc83a 	sub	r21,r3,r2
1000c958:	b00b883a 	mov	r5,r22
1000c95c:	a809883a 	mov	r4,r21
1000c960:	000cf180 	call	1000cf18 <__umodsi3>
1000c964:	1023883a 	mov	r17,r2
1000c968:	b00b883a 	mov	r5,r22
1000c96c:	a809883a 	mov	r4,r21
1000c970:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c974:	8822943a 	slli	r17,r17,16
1000c978:	8085383a 	mul	r2,r16,r2
1000c97c:	a0ffffcc 	andi	r3,r20,65535
1000c980:	88c6b03a 	or	r3,r17,r3
1000c984:	1880042e 	bgeu	r3,r2,1000c998 <__umoddi3+0x11c>
1000c988:	1cc7883a 	add	r3,r3,r19
1000c98c:	1cc00236 	bltu	r3,r19,1000c998 <__umoddi3+0x11c>
1000c990:	1880012e 	bgeu	r3,r2,1000c998 <__umoddi3+0x11c>
1000c994:	1cc7883a 	add	r3,r3,r19
1000c998:	1885c83a 	sub	r2,r3,r2
1000c99c:	1484d83a 	srl	r2,r2,r18
1000c9a0:	0007883a 	mov	r3,zero
1000c9a4:	00003606 	br	1000ca80 <__umoddi3+0x204>
1000c9a8:	3000041e 	bne	r6,zero,1000c9bc <__umoddi3+0x140>
1000c9ac:	000b883a 	mov	r5,zero
1000c9b0:	01000044 	movi	r4,1
1000c9b4:	000ceb40 	call	1000ceb4 <__udivsi3>
1000c9b8:	1027883a 	mov	r19,r2
1000c9bc:	00bfffd4 	movui	r2,65535
1000c9c0:	14c0552e 	bgeu	r2,r19,1000cb18 <__umoddi3+0x29c>
1000c9c4:	00804034 	movhi	r2,256
1000c9c8:	9880ee36 	bltu	r19,r2,1000cd84 <__umoddi3+0x508>
1000c9cc:	9806d63a 	srli	r3,r19,24
1000c9d0:	05400604 	movi	r21,24
1000c9d4:	00840074 	movhi	r2,4097
1000c9d8:	1885883a 	add	r2,r3,r2
1000c9dc:	108b1943 	ldbu	r2,11365(r2)
1000c9e0:	156b883a 	add	r21,r2,r21
1000c9e4:	00800804 	movi	r2,32
1000c9e8:	1565c83a 	sub	r18,r2,r21
1000c9ec:	9000ab1e 	bne	r18,zero,1000cc9c <__umoddi3+0x420>
1000c9f0:	982cd43a 	srli	r22,r19,16
1000c9f4:	8ce3c83a 	sub	r17,r17,r19
1000c9f8:	9d7fffcc 	andi	r21,r19,65535
1000c9fc:	b00b883a 	mov	r5,r22
1000ca00:	8809883a 	mov	r4,r17
1000ca04:	000cf180 	call	1000cf18 <__umodsi3>
1000ca08:	b00b883a 	mov	r5,r22
1000ca0c:	8809883a 	mov	r4,r17
1000ca10:	1021883a 	mov	r16,r2
1000ca14:	000ceb40 	call	1000ceb4 <__udivsi3>
1000ca18:	8020943a 	slli	r16,r16,16
1000ca1c:	a006d43a 	srli	r3,r20,16
1000ca20:	1545383a 	mul	r2,r2,r21
1000ca24:	80c6b03a 	or	r3,r16,r3
1000ca28:	1880042e 	bgeu	r3,r2,1000ca3c <__umoddi3+0x1c0>
1000ca2c:	1cc7883a 	add	r3,r3,r19
1000ca30:	1cc00236 	bltu	r3,r19,1000ca3c <__umoddi3+0x1c0>
1000ca34:	1880012e 	bgeu	r3,r2,1000ca3c <__umoddi3+0x1c0>
1000ca38:	1cc7883a 	add	r3,r3,r19
1000ca3c:	18a1c83a 	sub	r16,r3,r2
1000ca40:	b00b883a 	mov	r5,r22
1000ca44:	8009883a 	mov	r4,r16
1000ca48:	000cf180 	call	1000cf18 <__umodsi3>
1000ca4c:	1023883a 	mov	r17,r2
1000ca50:	b00b883a 	mov	r5,r22
1000ca54:	8009883a 	mov	r4,r16
1000ca58:	000ceb40 	call	1000ceb4 <__udivsi3>
1000ca5c:	8822943a 	slli	r17,r17,16
1000ca60:	1545383a 	mul	r2,r2,r21
1000ca64:	a53fffcc 	andi	r20,r20,65535
1000ca68:	8d06b03a 	or	r3,r17,r20
1000ca6c:	18bfca2e 	bgeu	r3,r2,1000c998 <__umoddi3+0x11c>
1000ca70:	003fc506 	br	1000c988 <__umoddi3+0x10c>
1000ca74:	2005883a 	mov	r2,r4
1000ca78:	29c00d2e 	bgeu	r5,r7,1000cab0 <__umoddi3+0x234>
1000ca7c:	2807883a 	mov	r3,r5
1000ca80:	dfc00b17 	ldw	ra,44(sp)
1000ca84:	df000a17 	ldw	fp,40(sp)
1000ca88:	ddc00917 	ldw	r23,36(sp)
1000ca8c:	dd800817 	ldw	r22,32(sp)
1000ca90:	dd400717 	ldw	r21,28(sp)
1000ca94:	dd000617 	ldw	r20,24(sp)
1000ca98:	dcc00517 	ldw	r19,20(sp)
1000ca9c:	dc800417 	ldw	r18,16(sp)
1000caa0:	dc400317 	ldw	r17,12(sp)
1000caa4:	dc000217 	ldw	r16,8(sp)
1000caa8:	dec00c04 	addi	sp,sp,48
1000caac:	f800283a 	ret
1000cab0:	013fffd4 	movui	r4,65535
1000cab4:	2807883a 	mov	r3,r5
1000cab8:	21c0122e 	bgeu	r4,r7,1000cb04 <__umoddi3+0x288>
1000cabc:	01004034 	movhi	r4,256
1000cac0:	3900ad36 	bltu	r7,r4,1000cd78 <__umoddi3+0x4fc>
1000cac4:	3810d63a 	srli	r8,r7,24
1000cac8:	01400604 	movi	r5,24
1000cacc:	01040074 	movhi	r4,4097
1000cad0:	4109883a 	add	r4,r8,r4
1000cad4:	250b1943 	ldbu	r20,11365(r4)
1000cad8:	04c00804 	movi	r19,32
1000cadc:	a169883a 	add	r20,r20,r5
1000cae0:	9d27c83a 	sub	r19,r19,r20
1000cae4:	9800161e 	bne	r19,zero,1000cb40 <__umoddi3+0x2c4>
1000cae8:	3c400136 	bltu	r7,r17,1000caf0 <__umoddi3+0x274>
1000caec:	81bfe436 	bltu	r16,r6,1000ca80 <__umoddi3+0x204>
1000caf0:	8185c83a 	sub	r2,r16,r6
1000caf4:	89cfc83a 	sub	r7,r17,r7
1000caf8:	8087803a 	cmpltu	r3,r16,r2
1000cafc:	38c7c83a 	sub	r3,r7,r3
1000cb00:	003fdf06 	br	1000ca80 <__umoddi3+0x204>
1000cb04:	39004030 	cmpltui	r4,r7,256
1000cb08:	2000981e 	bne	r4,zero,1000cd6c <__umoddi3+0x4f0>
1000cb0c:	3810d23a 	srli	r8,r7,8
1000cb10:	01400204 	movi	r5,8
1000cb14:	003fed06 	br	1000cacc <__umoddi3+0x250>
1000cb18:	98804030 	cmpltui	r2,r19,256
1000cb1c:	10009c1e 	bne	r2,zero,1000cd90 <__umoddi3+0x514>
1000cb20:	9806d23a 	srli	r3,r19,8
1000cb24:	05400204 	movi	r21,8
1000cb28:	003faa06 	br	1000c9d4 <__umoddi3+0x158>
1000cb2c:	00804034 	movhi	r2,256
1000cb30:	30809936 	bltu	r6,r2,1000cd98 <__umoddi3+0x51c>
1000cb34:	3006d63a 	srli	r3,r6,24
1000cb38:	05400604 	movi	r21,24
1000cb3c:	003f6806 	br	1000c8e0 <__umoddi3+0x64>
1000cb40:	3504d83a 	srl	r2,r6,r20
1000cb44:	3cce983a 	sll	r7,r7,r19
1000cb48:	8d38d83a 	srl	fp,r17,r20
1000cb4c:	8ce2983a 	sll	r17,r17,r19
1000cb50:	11eeb03a 	or	r23,r2,r7
1000cb54:	b82cd43a 	srli	r22,r23,16
1000cb58:	8504d83a 	srl	r2,r16,r20
1000cb5c:	e009883a 	mov	r4,fp
1000cb60:	b00b883a 	mov	r5,r22
1000cb64:	34e4983a 	sll	r18,r6,r19
1000cb68:	1462b03a 	or	r17,r2,r17
1000cb6c:	000cf180 	call	1000cf18 <__umodsi3>
1000cb70:	e009883a 	mov	r4,fp
1000cb74:	b00b883a 	mov	r5,r22
1000cb78:	102b883a 	mov	r21,r2
1000cb7c:	000ceb40 	call	1000ceb4 <__udivsi3>
1000cb80:	100d883a 	mov	r6,r2
1000cb84:	b8ffffcc 	andi	r3,r23,65535
1000cb88:	a82a943a 	slli	r21,r21,16
1000cb8c:	8804d43a 	srli	r2,r17,16
1000cb90:	1989383a 	mul	r4,r3,r6
1000cb94:	84e0983a 	sll	r16,r16,r19
1000cb98:	a884b03a 	or	r2,r21,r2
1000cb9c:	1100062e 	bgeu	r2,r4,1000cbb8 <__umoddi3+0x33c>
1000cba0:	15c5883a 	add	r2,r2,r23
1000cba4:	317fffc4 	addi	r5,r6,-1
1000cba8:	15c08036 	bltu	r2,r23,1000cdac <__umoddi3+0x530>
1000cbac:	11007f2e 	bgeu	r2,r4,1000cdac <__umoddi3+0x530>
1000cbb0:	31bfff84 	addi	r6,r6,-2
1000cbb4:	15c5883a 	add	r2,r2,r23
1000cbb8:	112bc83a 	sub	r21,r2,r4
1000cbbc:	b00b883a 	mov	r5,r22
1000cbc0:	a809883a 	mov	r4,r21
1000cbc4:	d9800115 	stw	r6,4(sp)
1000cbc8:	d8c00015 	stw	r3,0(sp)
1000cbcc:	000cf180 	call	1000cf18 <__umodsi3>
1000cbd0:	b00b883a 	mov	r5,r22
1000cbd4:	a809883a 	mov	r4,r21
1000cbd8:	1039883a 	mov	fp,r2
1000cbdc:	000ceb40 	call	1000ceb4 <__udivsi3>
1000cbe0:	d8c00017 	ldw	r3,0(sp)
1000cbe4:	e038943a 	slli	fp,fp,16
1000cbe8:	8c7fffcc 	andi	r17,r17,65535
1000cbec:	1887383a 	mul	r3,r3,r2
1000cbf0:	e462b03a 	or	r17,fp,r17
1000cbf4:	d9800117 	ldw	r6,4(sp)
1000cbf8:	88c0062e 	bgeu	r17,r3,1000cc14 <__umoddi3+0x398>
1000cbfc:	8de3883a 	add	r17,r17,r23
1000cc00:	113fffc4 	addi	r4,r2,-1
1000cc04:	8dc06736 	bltu	r17,r23,1000cda4 <__umoddi3+0x528>
1000cc08:	88c0662e 	bgeu	r17,r3,1000cda4 <__umoddi3+0x528>
1000cc0c:	10bfff84 	addi	r2,r2,-2
1000cc10:	8de3883a 	add	r17,r17,r23
1000cc14:	300a943a 	slli	r5,r6,16
1000cc18:	9010d43a 	srli	r8,r18,16
1000cc1c:	91bfffcc 	andi	r6,r18,65535
1000cc20:	2888b03a 	or	r4,r5,r2
1000cc24:	21ffffcc 	andi	r7,r4,65535
1000cc28:	2008d43a 	srli	r4,r4,16
1000cc2c:	300b883a 	mov	r5,r6
1000cc30:	398d383a 	mul	r6,r7,r6
1000cc34:	214b383a 	mul	r5,r4,r5
1000cc38:	3a0f383a 	mul	r7,r7,r8
1000cc3c:	3004d43a 	srli	r2,r6,16
1000cc40:	88c7c83a 	sub	r3,r17,r3
1000cc44:	394f883a 	add	r7,r7,r5
1000cc48:	11c5883a 	add	r2,r2,r7
1000cc4c:	2209383a 	mul	r4,r4,r8
1000cc50:	1140022e 	bgeu	r2,r5,1000cc5c <__umoddi3+0x3e0>
1000cc54:	01400074 	movhi	r5,1
1000cc58:	2149883a 	add	r4,r4,r5
1000cc5c:	100ad43a 	srli	r5,r2,16
1000cc60:	1004943a 	slli	r2,r2,16
1000cc64:	31bfffcc 	andi	r6,r6,65535
1000cc68:	2909883a 	add	r4,r5,r4
1000cc6c:	1185883a 	add	r2,r2,r6
1000cc70:	19003636 	bltu	r3,r4,1000cd4c <__umoddi3+0x4d0>
1000cc74:	19003426 	beq	r3,r4,1000cd48 <__umoddi3+0x4cc>
1000cc78:	8085c83a 	sub	r2,r16,r2
1000cc7c:	80a1803a 	cmpltu	r16,r16,r2
1000cc80:	1907c83a 	sub	r3,r3,r4
1000cc84:	1c07c83a 	sub	r3,r3,r16
1000cc88:	1d20983a 	sll	r16,r3,r20
1000cc8c:	14c4d83a 	srl	r2,r2,r19
1000cc90:	1cc6d83a 	srl	r3,r3,r19
1000cc94:	8084b03a 	or	r2,r16,r2
1000cc98:	003f7906 	br	1000ca80 <__umoddi3+0x204>
1000cc9c:	9ca6983a 	sll	r19,r19,r18
1000cca0:	8d68d83a 	srl	r20,r17,r21
1000cca4:	856ad83a 	srl	r21,r16,r21
1000cca8:	982cd43a 	srli	r22,r19,16
1000ccac:	a009883a 	mov	r4,r20
1000ccb0:	8ca2983a 	sll	r17,r17,r18
1000ccb4:	b00b883a 	mov	r5,r22
1000ccb8:	000cf180 	call	1000cf18 <__umodsi3>
1000ccbc:	a009883a 	mov	r4,r20
1000ccc0:	b00b883a 	mov	r5,r22
1000ccc4:	ac6eb03a 	or	r23,r21,r17
1000ccc8:	1023883a 	mov	r17,r2
1000cccc:	000ceb40 	call	1000ceb4 <__udivsi3>
1000ccd0:	9d7fffcc 	andi	r21,r19,65535
1000ccd4:	8822943a 	slli	r17,r17,16
1000ccd8:	b806d43a 	srli	r3,r23,16
1000ccdc:	a885383a 	mul	r2,r21,r2
1000cce0:	84a8983a 	sll	r20,r16,r18
1000cce4:	88c6b03a 	or	r3,r17,r3
1000cce8:	1880042e 	bgeu	r3,r2,1000ccfc <__umoddi3+0x480>
1000ccec:	1cc7883a 	add	r3,r3,r19
1000ccf0:	1cc00236 	bltu	r3,r19,1000ccfc <__umoddi3+0x480>
1000ccf4:	1880012e 	bgeu	r3,r2,1000ccfc <__umoddi3+0x480>
1000ccf8:	1cc7883a 	add	r3,r3,r19
1000ccfc:	18a3c83a 	sub	r17,r3,r2
1000cd00:	8809883a 	mov	r4,r17
1000cd04:	b00b883a 	mov	r5,r22
1000cd08:	000cf180 	call	1000cf18 <__umodsi3>
1000cd0c:	1021883a 	mov	r16,r2
1000cd10:	8809883a 	mov	r4,r17
1000cd14:	b00b883a 	mov	r5,r22
1000cd18:	000ceb40 	call	1000ceb4 <__udivsi3>
1000cd1c:	8022943a 	slli	r17,r16,16
1000cd20:	a885383a 	mul	r2,r21,r2
1000cd24:	bdffffcc 	andi	r23,r23,65535
1000cd28:	8de2b03a 	or	r17,r17,r23
1000cd2c:	8880042e 	bgeu	r17,r2,1000cd40 <__umoddi3+0x4c4>
1000cd30:	8ce3883a 	add	r17,r17,r19
1000cd34:	8cc00236 	bltu	r17,r19,1000cd40 <__umoddi3+0x4c4>
1000cd38:	8880012e 	bgeu	r17,r2,1000cd40 <__umoddi3+0x4c4>
1000cd3c:	8ce3883a 	add	r17,r17,r19
1000cd40:	88a3c83a 	sub	r17,r17,r2
1000cd44:	003f2d06 	br	1000c9fc <__umoddi3+0x180>
1000cd48:	80bfcb2e 	bgeu	r16,r2,1000cc78 <__umoddi3+0x3fc>
1000cd4c:	14a5c83a 	sub	r18,r2,r18
1000cd50:	1485803a 	cmpltu	r2,r2,r18
1000cd54:	15c5883a 	add	r2,r2,r23
1000cd58:	2089c83a 	sub	r4,r4,r2
1000cd5c:	9005883a 	mov	r2,r18
1000cd60:	003fc506 	br	1000cc78 <__umoddi3+0x3fc>
1000cd64:	3007883a 	mov	r3,r6
1000cd68:	003edd06 	br	1000c8e0 <__umoddi3+0x64>
1000cd6c:	3811883a 	mov	r8,r7
1000cd70:	000b883a 	mov	r5,zero
1000cd74:	003f5506 	br	1000cacc <__umoddi3+0x250>
1000cd78:	3810d43a 	srli	r8,r7,16
1000cd7c:	01400404 	movi	r5,16
1000cd80:	003f5206 	br	1000cacc <__umoddi3+0x250>
1000cd84:	9806d43a 	srli	r3,r19,16
1000cd88:	05400404 	movi	r21,16
1000cd8c:	003f1106 	br	1000c9d4 <__umoddi3+0x158>
1000cd90:	9807883a 	mov	r3,r19
1000cd94:	003f0f06 	br	1000c9d4 <__umoddi3+0x158>
1000cd98:	3006d43a 	srli	r3,r6,16
1000cd9c:	05400404 	movi	r21,16
1000cda0:	003ecf06 	br	1000c8e0 <__umoddi3+0x64>
1000cda4:	2005883a 	mov	r2,r4
1000cda8:	003f9a06 	br	1000cc14 <__umoddi3+0x398>
1000cdac:	280d883a 	mov	r6,r5
1000cdb0:	003f8106 	br	1000cbb8 <__umoddi3+0x33c>
1000cdb4:	1cc7883a 	add	r3,r3,r19
1000cdb8:	003ee606 	br	1000c954 <__umoddi3+0xd8>

1000cdbc <__divsi3>:
1000cdbc:	20001a16 	blt	r4,zero,1000ce28 <__divsi3+0x6c>
1000cdc0:	000f883a 	mov	r7,zero
1000cdc4:	2800020e 	bge	r5,zero,1000cdd0 <__divsi3+0x14>
1000cdc8:	014bc83a 	sub	r5,zero,r5
1000cdcc:	39c0005c 	xori	r7,r7,1
1000cdd0:	200d883a 	mov	r6,r4
1000cdd4:	00c00044 	movi	r3,1
1000cdd8:	2900092e 	bgeu	r5,r4,1000ce00 <__divsi3+0x44>
1000cddc:	00800804 	movi	r2,32
1000cde0:	00c00044 	movi	r3,1
1000cde4:	00000106 	br	1000cdec <__divsi3+0x30>
1000cde8:	10001226 	beq	r2,zero,1000ce34 <__divsi3+0x78>
1000cdec:	294b883a 	add	r5,r5,r5
1000cdf0:	10bfffc4 	addi	r2,r2,-1
1000cdf4:	18c7883a 	add	r3,r3,r3
1000cdf8:	293ffb36 	bltu	r5,r4,1000cde8 <__divsi3+0x2c>
1000cdfc:	18000d26 	beq	r3,zero,1000ce34 <__divsi3+0x78>
1000ce00:	0005883a 	mov	r2,zero
1000ce04:	31400236 	bltu	r6,r5,1000ce10 <__divsi3+0x54>
1000ce08:	314dc83a 	sub	r6,r6,r5
1000ce0c:	10c4b03a 	or	r2,r2,r3
1000ce10:	1806d07a 	srli	r3,r3,1
1000ce14:	280ad07a 	srli	r5,r5,1
1000ce18:	183ffa1e 	bne	r3,zero,1000ce04 <__divsi3+0x48>
1000ce1c:	38000126 	beq	r7,zero,1000ce24 <__divsi3+0x68>
1000ce20:	0085c83a 	sub	r2,zero,r2
1000ce24:	f800283a 	ret
1000ce28:	0109c83a 	sub	r4,zero,r4
1000ce2c:	01c00044 	movi	r7,1
1000ce30:	003fe406 	br	1000cdc4 <__divsi3+0x8>
1000ce34:	0005883a 	mov	r2,zero
1000ce38:	003ff806 	br	1000ce1c <__divsi3+0x60>

1000ce3c <__modsi3>:
1000ce3c:	20001a16 	blt	r4,zero,1000cea8 <__modsi3+0x6c>
1000ce40:	000f883a 	mov	r7,zero
1000ce44:	2005883a 	mov	r2,r4
1000ce48:	2800010e 	bge	r5,zero,1000ce50 <__modsi3+0x14>
1000ce4c:	014bc83a 	sub	r5,zero,r5
1000ce50:	00c00044 	movi	r3,1
1000ce54:	2900092e 	bgeu	r5,r4,1000ce7c <__modsi3+0x40>
1000ce58:	01800804 	movi	r6,32
1000ce5c:	00c00044 	movi	r3,1
1000ce60:	00000106 	br	1000ce68 <__modsi3+0x2c>
1000ce64:	30000d26 	beq	r6,zero,1000ce9c <__modsi3+0x60>
1000ce68:	294b883a 	add	r5,r5,r5
1000ce6c:	31bfffc4 	addi	r6,r6,-1
1000ce70:	18c7883a 	add	r3,r3,r3
1000ce74:	293ffb36 	bltu	r5,r4,1000ce64 <__modsi3+0x28>
1000ce78:	18000826 	beq	r3,zero,1000ce9c <__modsi3+0x60>
1000ce7c:	1806d07a 	srli	r3,r3,1
1000ce80:	11400136 	bltu	r2,r5,1000ce88 <__modsi3+0x4c>
1000ce84:	1145c83a 	sub	r2,r2,r5
1000ce88:	280ad07a 	srli	r5,r5,1
1000ce8c:	183ffb1e 	bne	r3,zero,1000ce7c <__modsi3+0x40>
1000ce90:	38000126 	beq	r7,zero,1000ce98 <__modsi3+0x5c>
1000ce94:	0085c83a 	sub	r2,zero,r2
1000ce98:	f800283a 	ret
1000ce9c:	2005883a 	mov	r2,r4
1000cea0:	383ffd26 	beq	r7,zero,1000ce98 <__modsi3+0x5c>
1000cea4:	003ffb06 	br	1000ce94 <__modsi3+0x58>
1000cea8:	0109c83a 	sub	r4,zero,r4
1000ceac:	01c00044 	movi	r7,1
1000ceb0:	003fe406 	br	1000ce44 <__modsi3+0x8>

1000ceb4 <__udivsi3>:
1000ceb4:	200d883a 	mov	r6,r4
1000ceb8:	2900152e 	bgeu	r5,r4,1000cf10 <__udivsi3+0x5c>
1000cebc:	28001416 	blt	r5,zero,1000cf10 <__udivsi3+0x5c>
1000cec0:	00800804 	movi	r2,32
1000cec4:	00c00044 	movi	r3,1
1000cec8:	00000206 	br	1000ced4 <__udivsi3+0x20>
1000cecc:	10000e26 	beq	r2,zero,1000cf08 <__udivsi3+0x54>
1000ced0:	28000516 	blt	r5,zero,1000cee8 <__udivsi3+0x34>
1000ced4:	294b883a 	add	r5,r5,r5
1000ced8:	10bfffc4 	addi	r2,r2,-1
1000cedc:	18c7883a 	add	r3,r3,r3
1000cee0:	293ffa36 	bltu	r5,r4,1000cecc <__udivsi3+0x18>
1000cee4:	18000826 	beq	r3,zero,1000cf08 <__udivsi3+0x54>
1000cee8:	0005883a 	mov	r2,zero
1000ceec:	31400236 	bltu	r6,r5,1000cef8 <__udivsi3+0x44>
1000cef0:	314dc83a 	sub	r6,r6,r5
1000cef4:	10c4b03a 	or	r2,r2,r3
1000cef8:	1806d07a 	srli	r3,r3,1
1000cefc:	280ad07a 	srli	r5,r5,1
1000cf00:	183ffa1e 	bne	r3,zero,1000ceec <__udivsi3+0x38>
1000cf04:	f800283a 	ret
1000cf08:	0005883a 	mov	r2,zero
1000cf0c:	f800283a 	ret
1000cf10:	00c00044 	movi	r3,1
1000cf14:	003ff406 	br	1000cee8 <__udivsi3+0x34>

1000cf18 <__umodsi3>:
1000cf18:	2005883a 	mov	r2,r4
1000cf1c:	2900132e 	bgeu	r5,r4,1000cf6c <__umodsi3+0x54>
1000cf20:	28001216 	blt	r5,zero,1000cf6c <__umodsi3+0x54>
1000cf24:	01800804 	movi	r6,32
1000cf28:	00c00044 	movi	r3,1
1000cf2c:	00000206 	br	1000cf38 <__umodsi3+0x20>
1000cf30:	30000c26 	beq	r6,zero,1000cf64 <__umodsi3+0x4c>
1000cf34:	28000516 	blt	r5,zero,1000cf4c <__umodsi3+0x34>
1000cf38:	294b883a 	add	r5,r5,r5
1000cf3c:	31bfffc4 	addi	r6,r6,-1
1000cf40:	18c7883a 	add	r3,r3,r3
1000cf44:	293ffa36 	bltu	r5,r4,1000cf30 <__umodsi3+0x18>
1000cf48:	18000626 	beq	r3,zero,1000cf64 <__umodsi3+0x4c>
1000cf4c:	1806d07a 	srli	r3,r3,1
1000cf50:	11400136 	bltu	r2,r5,1000cf58 <__umodsi3+0x40>
1000cf54:	1145c83a 	sub	r2,r2,r5
1000cf58:	280ad07a 	srli	r5,r5,1
1000cf5c:	183ffb1e 	bne	r3,zero,1000cf4c <__umodsi3+0x34>
1000cf60:	f800283a 	ret
1000cf64:	2005883a 	mov	r2,r4
1000cf68:	f800283a 	ret
1000cf6c:	00c00044 	movi	r3,1
1000cf70:	003ff606 	br	1000cf4c <__umodsi3+0x34>

1000cf74 <__adddf3>:
1000cf74:	02000434 	movhi	r8,16
1000cf78:	defffb04 	addi	sp,sp,-20
1000cf7c:	423fffc4 	addi	r8,r8,-1
1000cf80:	2a12703a 	and	r9,r5,r8
1000cf84:	3a06703a 	and	r3,r7,r8
1000cf88:	3804d53a 	srli	r2,r7,20
1000cf8c:	dc000015 	stw	r16,0(sp)
1000cf90:	2820d53a 	srli	r16,r5,20
1000cf94:	2016d77a 	srli	r11,r4,29
1000cf98:	3014d77a 	srli	r10,r6,29
1000cf9c:	280ad7fa 	srli	r5,r5,31
1000cfa0:	481290fa 	slli	r9,r9,3
1000cfa4:	180690fa 	slli	r3,r3,3
1000cfa8:	380ed7fa 	srli	r7,r7,31
1000cfac:	dc400115 	stw	r17,4(sp)
1000cfb0:	8401ffcc 	andi	r16,r16,2047
1000cfb4:	1081ffcc 	andi	r2,r2,2047
1000cfb8:	dfc00415 	stw	ra,16(sp)
1000cfbc:	dcc00315 	stw	r19,12(sp)
1000cfc0:	dc800215 	stw	r18,8(sp)
1000cfc4:	5a52b03a 	or	r9,r11,r9
1000cfc8:	50c6b03a 	or	r3,r10,r3
1000cfcc:	2823883a 	mov	r17,r5
1000cfd0:	201890fa 	slli	r12,r4,3
1000cfd4:	301690fa 	slli	r11,r6,3
1000cfd8:	8095c83a 	sub	r10,r16,r2
1000cfdc:	29c06a26 	beq	r5,r7,1000d188 <__adddf3+0x214>
1000cfe0:	0280590e 	bge	zero,r10,1000d148 <__adddf3+0x1d4>
1000cfe4:	10007c26 	beq	r2,zero,1000d1d8 <__adddf3+0x264>
1000cfe8:	8081ffd8 	cmpnei	r2,r16,2047
1000cfec:	10010726 	beq	r2,zero,1000d40c <__adddf3+0x498>
1000cff0:	18c02034 	orhi	r3,r3,128
1000cff4:	50800e48 	cmpgei	r2,r10,57
1000cff8:	1000ed1e 	bne	r2,zero,1000d3b0 <__adddf3+0x43c>
1000cffc:	50800808 	cmpgei	r2,r10,32
1000d000:	1001541e 	bne	r2,zero,1000d554 <__adddf3+0x5e0>
1000d004:	01000804 	movi	r4,32
1000d008:	2289c83a 	sub	r4,r4,r10
1000d00c:	1926983a 	sll	r19,r3,r4
1000d010:	5a84d83a 	srl	r2,r11,r10
1000d014:	5908983a 	sll	r4,r11,r4
1000d018:	1a86d83a 	srl	r3,r3,r10
1000d01c:	98a6b03a 	or	r19,r19,r2
1000d020:	2016c03a 	cmpne	r11,r4,zero
1000d024:	9ae6b03a 	or	r19,r19,r11
1000d028:	48d3c83a 	sub	r9,r9,r3
1000d02c:	64e7c83a 	sub	r19,r12,r19
1000d030:	64c9803a 	cmpltu	r4,r12,r19
1000d034:	4909c83a 	sub	r4,r9,r4
1000d038:	2080202c 	andhi	r2,r4,128
1000d03c:	10008726 	beq	r2,zero,1000d25c <__adddf3+0x2e8>
1000d040:	02402034 	movhi	r9,128
1000d044:	4a7fffc4 	addi	r9,r9,-1
1000d048:	2264703a 	and	r18,r4,r9
1000d04c:	9000cf26 	beq	r18,zero,1000d38c <__adddf3+0x418>
1000d050:	9009883a 	mov	r4,r18
1000d054:	000f64c0 	call	1000f64c <__clzsi2>
1000d058:	10fffe04 	addi	r3,r2,-8
1000d05c:	01000804 	movi	r4,32
1000d060:	20c9c83a 	sub	r4,r4,r3
1000d064:	990ad83a 	srl	r5,r19,r4
1000d068:	90c8983a 	sll	r4,r18,r3
1000d06c:	98e6983a 	sll	r19,r19,r3
1000d070:	2908b03a 	or	r4,r5,r4
1000d074:	1c00be16 	blt	r3,r16,1000d370 <__adddf3+0x3fc>
1000d078:	1c21c83a 	sub	r16,r3,r16
1000d07c:	81400044 	addi	r5,r16,1
1000d080:	28800808 	cmpgei	r2,r5,32
1000d084:	10011b1e 	bne	r2,zero,1000d4f4 <__adddf3+0x580>
1000d088:	00800804 	movi	r2,32
1000d08c:	1145c83a 	sub	r2,r2,r5
1000d090:	9946d83a 	srl	r3,r19,r5
1000d094:	98a6983a 	sll	r19,r19,r2
1000d098:	2084983a 	sll	r2,r4,r2
1000d09c:	2148d83a 	srl	r4,r4,r5
1000d0a0:	9826c03a 	cmpne	r19,r19,zero
1000d0a4:	10c4b03a 	or	r2,r2,r3
1000d0a8:	14e6b03a 	or	r19,r2,r19
1000d0ac:	0021883a 	mov	r16,zero
1000d0b0:	988001cc 	andi	r2,r19,7
1000d0b4:	10000726 	beq	r2,zero,1000d0d4 <__adddf3+0x160>
1000d0b8:	988003cc 	andi	r2,r19,15
1000d0bc:	10800120 	cmpeqi	r2,r2,4
1000d0c0:	1000041e 	bne	r2,zero,1000d0d4 <__adddf3+0x160>
1000d0c4:	99400104 	addi	r5,r19,4
1000d0c8:	2ce7803a 	cmpltu	r19,r5,r19
1000d0cc:	24c9883a 	add	r4,r4,r19
1000d0d0:	2827883a 	mov	r19,r5
1000d0d4:	2080202c 	andhi	r2,r4,128
1000d0d8:	10006226 	beq	r2,zero,1000d264 <__adddf3+0x2f0>
1000d0dc:	84000044 	addi	r16,r16,1
1000d0e0:	8081ffe0 	cmpeqi	r2,r16,2047
1000d0e4:	8401ffcc 	andi	r16,r16,2047
1000d0e8:	1000731e 	bne	r2,zero,1000d2b8 <__adddf3+0x344>
1000d0ec:	017fe034 	movhi	r5,65408
1000d0f0:	297fffc4 	addi	r5,r5,-1
1000d0f4:	214a703a 	and	r5,r4,r5
1000d0f8:	2804977a 	slli	r2,r5,29
1000d0fc:	280a927a 	slli	r5,r5,9
1000d100:	9826d0fa 	srli	r19,r19,3
1000d104:	2808d33a 	srli	r4,r5,12
1000d108:	14c4b03a 	or	r2,r2,r19
1000d10c:	8020953a 	slli	r16,r16,20
1000d110:	00c00434 	movhi	r3,16
1000d114:	8c403fcc 	andi	r17,r17,255
1000d118:	882297fa 	slli	r17,r17,31
1000d11c:	18ffffc4 	addi	r3,r3,-1
1000d120:	20c6703a 	and	r3,r4,r3
1000d124:	1c06b03a 	or	r3,r3,r16
1000d128:	1c46b03a 	or	r3,r3,r17
1000d12c:	dfc00417 	ldw	ra,16(sp)
1000d130:	dcc00317 	ldw	r19,12(sp)
1000d134:	dc800217 	ldw	r18,8(sp)
1000d138:	dc400117 	ldw	r17,4(sp)
1000d13c:	dc000017 	ldw	r16,0(sp)
1000d140:	dec00504 	addi	sp,sp,20
1000d144:	f800283a 	ret
1000d148:	50002b1e 	bne	r10,zero,1000d1f8 <__adddf3+0x284>
1000d14c:	80800044 	addi	r2,r16,1
1000d150:	1081ff8c 	andi	r2,r2,2046
1000d154:	1000a11e 	bne	r2,zero,1000d3dc <__adddf3+0x468>
1000d158:	4b0ab03a 	or	r5,r9,r12
1000d15c:	1ac4b03a 	or	r2,r3,r11
1000d160:	80015c1e 	bne	r16,zero,1000d6d4 <__adddf3+0x760>
1000d164:	28012826 	beq	r5,zero,1000d608 <__adddf3+0x694>
1000d168:	1001671e 	bne	r2,zero,1000d708 <__adddf3+0x794>
1000d16c:	4826977a 	slli	r19,r9,29
1000d170:	00c80034 	movhi	r3,8192
1000d174:	18ffffc4 	addi	r3,r3,-1
1000d178:	20c4703a 	and	r2,r4,r3
1000d17c:	9884b03a 	or	r2,r19,r2
1000d180:	4812d0fa 	srli	r9,r9,3
1000d184:	00003d06 	br	1000d27c <__adddf3+0x308>
1000d188:	02804f0e 	bge	zero,r10,1000d2c8 <__adddf3+0x354>
1000d18c:	10002426 	beq	r2,zero,1000d220 <__adddf3+0x2ac>
1000d190:	8081ffd8 	cmpnei	r2,r16,2047
1000d194:	10009d26 	beq	r2,zero,1000d40c <__adddf3+0x498>
1000d198:	18c02034 	orhi	r3,r3,128
1000d19c:	50800e48 	cmpgei	r2,r10,57
1000d1a0:	10003b1e 	bne	r2,zero,1000d290 <__adddf3+0x31c>
1000d1a4:	50800808 	cmpgei	r2,r10,32
1000d1a8:	10010326 	beq	r2,zero,1000d5b8 <__adddf3+0x644>
1000d1ac:	54fff804 	addi	r19,r10,-32
1000d1b0:	51000820 	cmpeqi	r4,r10,32
1000d1b4:	1cc4d83a 	srl	r2,r3,r19
1000d1b8:	2000041e 	bne	r4,zero,1000d1cc <__adddf3+0x258>
1000d1bc:	01001004 	movi	r4,64
1000d1c0:	2295c83a 	sub	r10,r4,r10
1000d1c4:	1a86983a 	sll	r3,r3,r10
1000d1c8:	58d6b03a 	or	r11,r11,r3
1000d1cc:	5826c03a 	cmpne	r19,r11,zero
1000d1d0:	98a6b03a 	or	r19,r19,r2
1000d1d4:	00003006 	br	1000d298 <__adddf3+0x324>
1000d1d8:	1ac4b03a 	or	r2,r3,r11
1000d1dc:	10007726 	beq	r2,zero,1000d3bc <__adddf3+0x448>
1000d1e0:	50bfffc4 	addi	r2,r10,-1
1000d1e4:	10011926 	beq	r2,zero,1000d64c <__adddf3+0x6d8>
1000d1e8:	5281ffd8 	cmpnei	r10,r10,2047
1000d1ec:	50012026 	beq	r10,zero,1000d670 <__adddf3+0x6fc>
1000d1f0:	1015883a 	mov	r10,r2
1000d1f4:	003f7f06 	br	1000cff4 <__adddf3+0x80>
1000d1f8:	1409c83a 	sub	r4,r2,r16
1000d1fc:	8000a61e 	bne	r16,zero,1000d498 <__adddf3+0x524>
1000d200:	4b0ab03a 	or	r5,r9,r12
1000d204:	2800f726 	beq	r5,zero,1000d5e4 <__adddf3+0x670>
1000d208:	217fffc4 	addi	r5,r4,-1
1000d20c:	28017f26 	beq	r5,zero,1000d80c <__adddf3+0x898>
1000d210:	2101ffd8 	cmpnei	r4,r4,2047
1000d214:	2001a326 	beq	r4,zero,1000d8a4 <__adddf3+0x930>
1000d218:	2809883a 	mov	r4,r5
1000d21c:	0000a106 	br	1000d4a4 <__adddf3+0x530>
1000d220:	1ac4b03a 	or	r2,r3,r11
1000d224:	10006526 	beq	r2,zero,1000d3bc <__adddf3+0x448>
1000d228:	50bfffc4 	addi	r2,r10,-1
1000d22c:	10000426 	beq	r2,zero,1000d240 <__adddf3+0x2cc>
1000d230:	5281ffd8 	cmpnei	r10,r10,2047
1000d234:	50014326 	beq	r10,zero,1000d744 <__adddf3+0x7d0>
1000d238:	1015883a 	mov	r10,r2
1000d23c:	003fd706 	br	1000d19c <__adddf3+0x228>
1000d240:	62e7883a 	add	r19,r12,r11
1000d244:	48d3883a 	add	r9,r9,r3
1000d248:	9b09803a 	cmpltu	r4,r19,r12
1000d24c:	4909883a 	add	r4,r9,r4
1000d250:	2080202c 	andhi	r2,r4,128
1000d254:	1000b41e 	bne	r2,zero,1000d528 <__adddf3+0x5b4>
1000d258:	04000044 	movi	r16,1
1000d25c:	988001cc 	andi	r2,r19,7
1000d260:	103f951e 	bne	r2,zero,1000d0b8 <__adddf3+0x144>
1000d264:	9826d0fa 	srli	r19,r19,3
1000d268:	2004977a 	slli	r2,r4,29
1000d26c:	2012d0fa 	srli	r9,r4,3
1000d270:	9884b03a 	or	r2,r19,r2
1000d274:	80c1ffe0 	cmpeqi	r3,r16,2047
1000d278:	1800351e 	bne	r3,zero,1000d350 <__adddf3+0x3dc>
1000d27c:	01000434 	movhi	r4,16
1000d280:	213fffc4 	addi	r4,r4,-1
1000d284:	4908703a 	and	r4,r9,r4
1000d288:	8401ffcc 	andi	r16,r16,2047
1000d28c:	003f9f06 	br	1000d10c <__adddf3+0x198>
1000d290:	1ac8b03a 	or	r4,r3,r11
1000d294:	2026c03a 	cmpne	r19,r4,zero
1000d298:	9b27883a 	add	r19,r19,r12
1000d29c:	9b09803a 	cmpltu	r4,r19,r12
1000d2a0:	2249883a 	add	r4,r4,r9
1000d2a4:	2080202c 	andhi	r2,r4,128
1000d2a8:	103fec26 	beq	r2,zero,1000d25c <__adddf3+0x2e8>
1000d2ac:	84000044 	addi	r16,r16,1
1000d2b0:	8081ffe0 	cmpeqi	r2,r16,2047
1000d2b4:	10009d26 	beq	r2,zero,1000d52c <__adddf3+0x5b8>
1000d2b8:	0401ffc4 	movi	r16,2047
1000d2bc:	0009883a 	mov	r4,zero
1000d2c0:	0005883a 	mov	r2,zero
1000d2c4:	003f9106 	br	1000d10c <__adddf3+0x198>
1000d2c8:	5000571e 	bne	r10,zero,1000d428 <__adddf3+0x4b4>
1000d2cc:	80800044 	addi	r2,r16,1
1000d2d0:	1141ff8c 	andi	r5,r2,2046
1000d2d4:	2800ed1e 	bne	r5,zero,1000d68c <__adddf3+0x718>
1000d2d8:	4b04b03a 	or	r2,r9,r12
1000d2dc:	8000a826 	beq	r16,zero,1000d580 <__adddf3+0x60c>
1000d2e0:	10010226 	beq	r2,zero,1000d6ec <__adddf3+0x778>
1000d2e4:	1ad6b03a 	or	r11,r3,r11
1000d2e8:	480a977a 	slli	r5,r9,29
1000d2ec:	4812d0fa 	srli	r9,r9,3
1000d2f0:	58015f26 	beq	r11,zero,1000d870 <__adddf3+0x8fc>
1000d2f4:	02080034 	movhi	r8,8192
1000d2f8:	423fffc4 	addi	r8,r8,-1
1000d2fc:	2204703a 	and	r2,r4,r8
1000d300:	4900022c 	andhi	r4,r9,8
1000d304:	114ab03a 	or	r5,r2,r5
1000d308:	20000826 	beq	r4,zero,1000d32c <__adddf3+0x3b8>
1000d30c:	1808d0fa 	srli	r4,r3,3
1000d310:	2080022c 	andhi	r2,r4,8
1000d314:	1000051e 	bne	r2,zero,1000d32c <__adddf3+0x3b8>
1000d318:	1806977a 	slli	r3,r3,29
1000d31c:	3204703a 	and	r2,r6,r8
1000d320:	3823883a 	mov	r17,r7
1000d324:	10cab03a 	or	r5,r2,r3
1000d328:	2013883a 	mov	r9,r4
1000d32c:	2804d77a 	srli	r2,r5,29
1000d330:	480890fa 	slli	r4,r9,3
1000d334:	00c80034 	movhi	r3,8192
1000d338:	18ffffc4 	addi	r3,r3,-1
1000d33c:	1108b03a 	or	r4,r2,r4
1000d340:	2004977a 	slli	r2,r4,29
1000d344:	2012d0fa 	srli	r9,r4,3
1000d348:	28ca703a 	and	r5,r5,r3
1000d34c:	1144b03a 	or	r2,r2,r5
1000d350:	4886b03a 	or	r3,r9,r2
1000d354:	18016b26 	beq	r3,zero,1000d904 <__adddf3+0x990>
1000d358:	00c00434 	movhi	r3,16
1000d35c:	49000234 	orhi	r4,r9,8
1000d360:	18ffffc4 	addi	r3,r3,-1
1000d364:	20c8703a 	and	r4,r4,r3
1000d368:	0401ffc4 	movi	r16,2047
1000d36c:	003f6706 	br	1000d10c <__adddf3+0x198>
1000d370:	017fe034 	movhi	r5,65408
1000d374:	297fffc4 	addi	r5,r5,-1
1000d378:	988001cc 	andi	r2,r19,7
1000d37c:	80e1c83a 	sub	r16,r16,r3
1000d380:	2148703a 	and	r4,r4,r5
1000d384:	103f4c1e 	bne	r2,zero,1000d0b8 <__adddf3+0x144>
1000d388:	003fb606 	br	1000d264 <__adddf3+0x2f0>
1000d38c:	9809883a 	mov	r4,r19
1000d390:	000f64c0 	call	1000f64c <__clzsi2>
1000d394:	10c00604 	addi	r3,r2,24
1000d398:	19000808 	cmpgei	r4,r3,32
1000d39c:	203f2f26 	beq	r4,zero,1000d05c <__adddf3+0xe8>
1000d3a0:	113ffe04 	addi	r4,r2,-8
1000d3a4:	9908983a 	sll	r4,r19,r4
1000d3a8:	0027883a 	mov	r19,zero
1000d3ac:	003f3106 	br	1000d074 <__adddf3+0x100>
1000d3b0:	1ac8b03a 	or	r4,r3,r11
1000d3b4:	2026c03a 	cmpne	r19,r4,zero
1000d3b8:	003f1c06 	br	1000d02c <__adddf3+0xb8>
1000d3bc:	4826977a 	slli	r19,r9,29
1000d3c0:	00c80034 	movhi	r3,8192
1000d3c4:	18ffffc4 	addi	r3,r3,-1
1000d3c8:	20c4703a 	and	r2,r4,r3
1000d3cc:	14c4b03a 	or	r2,r2,r19
1000d3d0:	4812d0fa 	srli	r9,r9,3
1000d3d4:	5021883a 	mov	r16,r10
1000d3d8:	003fa606 	br	1000d274 <__adddf3+0x300>
1000d3dc:	62e7c83a 	sub	r19,r12,r11
1000d3e0:	48e5c83a 	sub	r18,r9,r3
1000d3e4:	64c9803a 	cmpltu	r4,r12,r19
1000d3e8:	9125c83a 	sub	r18,r18,r4
1000d3ec:	9080202c 	andhi	r2,r18,128
1000d3f0:	1000b21e 	bne	r2,zero,1000d6bc <__adddf3+0x748>
1000d3f4:	9c84b03a 	or	r2,r19,r18
1000d3f8:	103f141e 	bne	r2,zero,1000d04c <__adddf3+0xd8>
1000d3fc:	0013883a 	mov	r9,zero
1000d400:	0021883a 	mov	r16,zero
1000d404:	0023883a 	mov	r17,zero
1000d408:	003f9c06 	br	1000d27c <__adddf3+0x308>
1000d40c:	4826977a 	slli	r19,r9,29
1000d410:	00c80034 	movhi	r3,8192
1000d414:	18ffffc4 	addi	r3,r3,-1
1000d418:	20c4703a 	and	r2,r4,r3
1000d41c:	14c4b03a 	or	r2,r2,r19
1000d420:	4812d0fa 	srli	r9,r9,3
1000d424:	003fca06 	br	1000d350 <__adddf3+0x3dc>
1000d428:	1409c83a 	sub	r4,r2,r16
1000d42c:	80005e1e 	bne	r16,zero,1000d5a8 <__adddf3+0x634>
1000d430:	4b0ab03a 	or	r5,r9,r12
1000d434:	28011326 	beq	r5,zero,1000d884 <__adddf3+0x910>
1000d438:	217fffc4 	addi	r5,r4,-1
1000d43c:	28012c26 	beq	r5,zero,1000d8f0 <__adddf3+0x97c>
1000d440:	2101ffd8 	cmpnei	r4,r4,2047
1000d444:	2000a926 	beq	r4,zero,1000d6ec <__adddf3+0x778>
1000d448:	2809883a 	mov	r4,r5
1000d44c:	21400e48 	cmpgei	r5,r4,57
1000d450:	2800b91e 	bne	r5,zero,1000d738 <__adddf3+0x7c4>
1000d454:	21400808 	cmpgei	r5,r4,32
1000d458:	28011a1e 	bne	r5,zero,1000d8c4 <__adddf3+0x950>
1000d45c:	01400804 	movi	r5,32
1000d460:	290bc83a 	sub	r5,r5,r4
1000d464:	4966983a 	sll	r19,r9,r5
1000d468:	610cd83a 	srl	r6,r12,r4
1000d46c:	614a983a 	sll	r5,r12,r5
1000d470:	4912d83a 	srl	r9,r9,r4
1000d474:	99a6b03a 	or	r19,r19,r6
1000d478:	280ac03a 	cmpne	r5,r5,zero
1000d47c:	9966b03a 	or	r19,r19,r5
1000d480:	1a47883a 	add	r3,r3,r9
1000d484:	9ae7883a 	add	r19,r19,r11
1000d488:	9ac9803a 	cmpltu	r4,r19,r11
1000d48c:	20c9883a 	add	r4,r4,r3
1000d490:	1021883a 	mov	r16,r2
1000d494:	003f8306 	br	1000d2a4 <__adddf3+0x330>
1000d498:	1141ffd8 	cmpnei	r5,r2,2047
1000d49c:	28006326 	beq	r5,zero,1000d62c <__adddf3+0x6b8>
1000d4a0:	4a402034 	orhi	r9,r9,128
1000d4a4:	21400e48 	cmpgei	r5,r4,57
1000d4a8:	28006e1e 	bne	r5,zero,1000d664 <__adddf3+0x6f0>
1000d4ac:	21400808 	cmpgei	r5,r4,32
1000d4b0:	2800ab1e 	bne	r5,zero,1000d760 <__adddf3+0x7ec>
1000d4b4:	01400804 	movi	r5,32
1000d4b8:	290bc83a 	sub	r5,r5,r4
1000d4bc:	4966983a 	sll	r19,r9,r5
1000d4c0:	610cd83a 	srl	r6,r12,r4
1000d4c4:	614a983a 	sll	r5,r12,r5
1000d4c8:	4912d83a 	srl	r9,r9,r4
1000d4cc:	99a6b03a 	or	r19,r19,r6
1000d4d0:	280ac03a 	cmpne	r5,r5,zero
1000d4d4:	9966b03a 	or	r19,r19,r5
1000d4d8:	1a47c83a 	sub	r3,r3,r9
1000d4dc:	5ce7c83a 	sub	r19,r11,r19
1000d4e0:	5cc9803a 	cmpltu	r4,r11,r19
1000d4e4:	1909c83a 	sub	r4,r3,r4
1000d4e8:	3823883a 	mov	r17,r7
1000d4ec:	1021883a 	mov	r16,r2
1000d4f0:	003ed106 	br	1000d038 <__adddf3+0xc4>
1000d4f4:	843ff844 	addi	r16,r16,-31
1000d4f8:	28800820 	cmpeqi	r2,r5,32
1000d4fc:	2420d83a 	srl	r16,r4,r16
1000d500:	1000041e 	bne	r2,zero,1000d514 <__adddf3+0x5a0>
1000d504:	00801004 	movi	r2,64
1000d508:	114bc83a 	sub	r5,r2,r5
1000d50c:	2148983a 	sll	r4,r4,r5
1000d510:	9926b03a 	or	r19,r19,r4
1000d514:	9826c03a 	cmpne	r19,r19,zero
1000d518:	9c26b03a 	or	r19,r19,r16
1000d51c:	0009883a 	mov	r4,zero
1000d520:	0021883a 	mov	r16,zero
1000d524:	003f4d06 	br	1000d25c <__adddf3+0x2e8>
1000d528:	04000084 	movi	r16,2
1000d52c:	00bfe034 	movhi	r2,65408
1000d530:	10bfffc4 	addi	r2,r2,-1
1000d534:	208a703a 	and	r5,r4,r2
1000d538:	9804d07a 	srli	r2,r19,1
1000d53c:	280697fa 	slli	r3,r5,31
1000d540:	9cc0004c 	andi	r19,r19,1
1000d544:	14e6b03a 	or	r19,r2,r19
1000d548:	2808d07a 	srli	r4,r5,1
1000d54c:	1ce6b03a 	or	r19,r3,r19
1000d550:	003ed706 	br	1000d0b0 <__adddf3+0x13c>
1000d554:	54fff804 	addi	r19,r10,-32
1000d558:	50800820 	cmpeqi	r2,r10,32
1000d55c:	1ce6d83a 	srl	r19,r3,r19
1000d560:	1000041e 	bne	r2,zero,1000d574 <__adddf3+0x600>
1000d564:	00801004 	movi	r2,64
1000d568:	1295c83a 	sub	r10,r2,r10
1000d56c:	1a86983a 	sll	r3,r3,r10
1000d570:	58d6b03a 	or	r11,r11,r3
1000d574:	5808c03a 	cmpne	r4,r11,zero
1000d578:	24e6b03a 	or	r19,r4,r19
1000d57c:	003eab06 	br	1000d02c <__adddf3+0xb8>
1000d580:	1000a926 	beq	r2,zero,1000d828 <__adddf3+0x8b4>
1000d584:	1ac4b03a 	or	r2,r3,r11
1000d588:	1000ae1e 	bne	r2,zero,1000d844 <__adddf3+0x8d0>
1000d58c:	4806977a 	slli	r3,r9,29
1000d590:	00880034 	movhi	r2,8192
1000d594:	10bfffc4 	addi	r2,r2,-1
1000d598:	2084703a 	and	r2,r4,r2
1000d59c:	10c4b03a 	or	r2,r2,r3
1000d5a0:	4812d0fa 	srli	r9,r9,3
1000d5a4:	003f3506 	br	1000d27c <__adddf3+0x308>
1000d5a8:	1141ffd8 	cmpnei	r5,r2,2047
1000d5ac:	28004f26 	beq	r5,zero,1000d6ec <__adddf3+0x778>
1000d5b0:	4a402034 	orhi	r9,r9,128
1000d5b4:	003fa506 	br	1000d44c <__adddf3+0x4d8>
1000d5b8:	01000804 	movi	r4,32
1000d5bc:	2289c83a 	sub	r4,r4,r10
1000d5c0:	1926983a 	sll	r19,r3,r4
1000d5c4:	5a84d83a 	srl	r2,r11,r10
1000d5c8:	5908983a 	sll	r4,r11,r4
1000d5cc:	1a86d83a 	srl	r3,r3,r10
1000d5d0:	98a6b03a 	or	r19,r19,r2
1000d5d4:	2016c03a 	cmpne	r11,r4,zero
1000d5d8:	9ae6b03a 	or	r19,r19,r11
1000d5dc:	48d3883a 	add	r9,r9,r3
1000d5e0:	003f2d06 	br	1000d298 <__adddf3+0x324>
1000d5e4:	01480034 	movhi	r5,8192
1000d5e8:	1826977a 	slli	r19,r3,29
1000d5ec:	297fffc4 	addi	r5,r5,-1
1000d5f0:	3144703a 	and	r2,r6,r5
1000d5f4:	14c4b03a 	or	r2,r2,r19
1000d5f8:	1812d0fa 	srli	r9,r3,3
1000d5fc:	3823883a 	mov	r17,r7
1000d600:	2021883a 	mov	r16,r4
1000d604:	003f1b06 	br	1000d274 <__adddf3+0x300>
1000d608:	10007d26 	beq	r2,zero,1000d800 <__adddf3+0x88c>
1000d60c:	00880034 	movhi	r2,8192
1000d610:	1808977a 	slli	r4,r3,29
1000d614:	10bfffc4 	addi	r2,r2,-1
1000d618:	3084703a 	and	r2,r6,r2
1000d61c:	1104b03a 	or	r2,r2,r4
1000d620:	1812d0fa 	srli	r9,r3,3
1000d624:	3823883a 	mov	r17,r7
1000d628:	003f1406 	br	1000d27c <__adddf3+0x308>
1000d62c:	180a977a 	slli	r5,r3,29
1000d630:	01080034 	movhi	r4,8192
1000d634:	213fffc4 	addi	r4,r4,-1
1000d638:	3104703a 	and	r2,r6,r4
1000d63c:	2884b03a 	or	r2,r5,r2
1000d640:	1812d0fa 	srli	r9,r3,3
1000d644:	3823883a 	mov	r17,r7
1000d648:	003f4106 	br	1000d350 <__adddf3+0x3dc>
1000d64c:	62e7c83a 	sub	r19,r12,r11
1000d650:	48d3c83a 	sub	r9,r9,r3
1000d654:	64c9803a 	cmpltu	r4,r12,r19
1000d658:	4909c83a 	sub	r4,r9,r4
1000d65c:	04000044 	movi	r16,1
1000d660:	003e7506 	br	1000d038 <__adddf3+0xc4>
1000d664:	4b12b03a 	or	r9,r9,r12
1000d668:	4826c03a 	cmpne	r19,r9,zero
1000d66c:	003f9b06 	br	1000d4dc <__adddf3+0x568>
1000d670:	4826977a 	slli	r19,r9,29
1000d674:	00c80034 	movhi	r3,8192
1000d678:	18ffffc4 	addi	r3,r3,-1
1000d67c:	20c4703a 	and	r2,r4,r3
1000d680:	9884b03a 	or	r2,r19,r2
1000d684:	4812d0fa 	srli	r9,r9,3
1000d688:	003f3106 	br	1000d350 <__adddf3+0x3dc>
1000d68c:	1101ffe0 	cmpeqi	r4,r2,2047
1000d690:	203f091e 	bne	r4,zero,1000d2b8 <__adddf3+0x344>
1000d694:	62d7883a 	add	r11,r12,r11
1000d698:	5b09803a 	cmpltu	r4,r11,r12
1000d69c:	48d3883a 	add	r9,r9,r3
1000d6a0:	490b883a 	add	r5,r9,r4
1000d6a4:	282697fa 	slli	r19,r5,31
1000d6a8:	5816d07a 	srli	r11,r11,1
1000d6ac:	2808d07a 	srli	r4,r5,1
1000d6b0:	1021883a 	mov	r16,r2
1000d6b4:	9ae6b03a 	or	r19,r19,r11
1000d6b8:	003ee806 	br	1000d25c <__adddf3+0x2e8>
1000d6bc:	5b27c83a 	sub	r19,r11,r12
1000d6c0:	1a53c83a 	sub	r9,r3,r9
1000d6c4:	5cc9803a 	cmpltu	r4,r11,r19
1000d6c8:	4925c83a 	sub	r18,r9,r4
1000d6cc:	3823883a 	mov	r17,r7
1000d6d0:	003e5e06 	br	1000d04c <__adddf3+0xd8>
1000d6d4:	28002d1e 	bne	r5,zero,1000d78c <__adddf3+0x818>
1000d6d8:	103fd41e 	bne	r2,zero,1000d62c <__adddf3+0x6b8>
1000d6dc:	00bfffc4 	movi	r2,-1
1000d6e0:	0023883a 	mov	r17,zero
1000d6e4:	4013883a 	mov	r9,r8
1000d6e8:	003f1b06 	br	1000d358 <__adddf3+0x3e4>
1000d6ec:	00880034 	movhi	r2,8192
1000d6f0:	1808977a 	slli	r4,r3,29
1000d6f4:	10bfffc4 	addi	r2,r2,-1
1000d6f8:	3084703a 	and	r2,r6,r2
1000d6fc:	1104b03a 	or	r2,r2,r4
1000d700:	1812d0fa 	srli	r9,r3,3
1000d704:	003f1206 	br	1000d350 <__adddf3+0x3dc>
1000d708:	62e7c83a 	sub	r19,r12,r11
1000d70c:	48cbc83a 	sub	r5,r9,r3
1000d710:	64c9803a 	cmpltu	r4,r12,r19
1000d714:	2909c83a 	sub	r4,r5,r4
1000d718:	2080202c 	andhi	r2,r4,128
1000d71c:	10003626 	beq	r2,zero,1000d7f8 <__adddf3+0x884>
1000d720:	5b27c83a 	sub	r19,r11,r12
1000d724:	1a53c83a 	sub	r9,r3,r9
1000d728:	5cc9803a 	cmpltu	r4,r11,r19
1000d72c:	4909c83a 	sub	r4,r9,r4
1000d730:	3823883a 	mov	r17,r7
1000d734:	003e5e06 	br	1000d0b0 <__adddf3+0x13c>
1000d738:	4b12b03a 	or	r9,r9,r12
1000d73c:	4826c03a 	cmpne	r19,r9,zero
1000d740:	003f5006 	br	1000d484 <__adddf3+0x510>
1000d744:	4806977a 	slli	r3,r9,29
1000d748:	00880034 	movhi	r2,8192
1000d74c:	10bfffc4 	addi	r2,r2,-1
1000d750:	2084703a 	and	r2,r4,r2
1000d754:	10c4b03a 	or	r2,r2,r3
1000d758:	4812d0fa 	srli	r9,r9,3
1000d75c:	003efc06 	br	1000d350 <__adddf3+0x3dc>
1000d760:	217ff804 	addi	r5,r4,-32
1000d764:	21800820 	cmpeqi	r6,r4,32
1000d768:	494ad83a 	srl	r5,r9,r5
1000d76c:	3000041e 	bne	r6,zero,1000d780 <__adddf3+0x80c>
1000d770:	01801004 	movi	r6,64
1000d774:	3109c83a 	sub	r4,r6,r4
1000d778:	4912983a 	sll	r9,r9,r4
1000d77c:	6258b03a 	or	r12,r12,r9
1000d780:	6026c03a 	cmpne	r19,r12,zero
1000d784:	9966b03a 	or	r19,r19,r5
1000d788:	003f5406 	br	1000d4dc <__adddf3+0x568>
1000d78c:	480a977a 	slli	r5,r9,29
1000d790:	4812d0fa 	srli	r9,r9,3
1000d794:	10003626 	beq	r2,zero,1000d870 <__adddf3+0x8fc>
1000d798:	02080034 	movhi	r8,8192
1000d79c:	423fffc4 	addi	r8,r8,-1
1000d7a0:	2204703a 	and	r2,r4,r8
1000d7a4:	4900022c 	andhi	r4,r9,8
1000d7a8:	114ab03a 	or	r5,r2,r5
1000d7ac:	20000826 	beq	r4,zero,1000d7d0 <__adddf3+0x85c>
1000d7b0:	1808d0fa 	srli	r4,r3,3
1000d7b4:	2080022c 	andhi	r2,r4,8
1000d7b8:	1000051e 	bne	r2,zero,1000d7d0 <__adddf3+0x85c>
1000d7bc:	1806977a 	slli	r3,r3,29
1000d7c0:	3204703a 	and	r2,r6,r8
1000d7c4:	3823883a 	mov	r17,r7
1000d7c8:	10cab03a 	or	r5,r2,r3
1000d7cc:	2013883a 	mov	r9,r4
1000d7d0:	480890fa 	slli	r4,r9,3
1000d7d4:	2804d77a 	srli	r2,r5,29
1000d7d8:	00c80034 	movhi	r3,8192
1000d7dc:	18ffffc4 	addi	r3,r3,-1
1000d7e0:	1108b03a 	or	r4,r2,r4
1000d7e4:	200c977a 	slli	r6,r4,29
1000d7e8:	28c4703a 	and	r2,r5,r3
1000d7ec:	2012d0fa 	srli	r9,r4,3
1000d7f0:	3084b03a 	or	r2,r6,r2
1000d7f4:	003ed606 	br	1000d350 <__adddf3+0x3dc>
1000d7f8:	9904b03a 	or	r2,r19,r4
1000d7fc:	103e971e 	bne	r2,zero,1000d25c <__adddf3+0x2e8>
1000d800:	0013883a 	mov	r9,zero
1000d804:	0023883a 	mov	r17,zero
1000d808:	003e9c06 	br	1000d27c <__adddf3+0x308>
1000d80c:	5b27c83a 	sub	r19,r11,r12
1000d810:	1a53c83a 	sub	r9,r3,r9
1000d814:	5cc9803a 	cmpltu	r4,r11,r19
1000d818:	4909c83a 	sub	r4,r9,r4
1000d81c:	3823883a 	mov	r17,r7
1000d820:	04000044 	movi	r16,1
1000d824:	003e0406 	br	1000d038 <__adddf3+0xc4>
1000d828:	180a977a 	slli	r5,r3,29
1000d82c:	01080034 	movhi	r4,8192
1000d830:	213fffc4 	addi	r4,r4,-1
1000d834:	3104703a 	and	r2,r6,r4
1000d838:	2884b03a 	or	r2,r5,r2
1000d83c:	1812d0fa 	srli	r9,r3,3
1000d840:	003e8e06 	br	1000d27c <__adddf3+0x308>
1000d844:	62e7883a 	add	r19,r12,r11
1000d848:	48d3883a 	add	r9,r9,r3
1000d84c:	9b09803a 	cmpltu	r4,r19,r12
1000d850:	4909883a 	add	r4,r9,r4
1000d854:	2080202c 	andhi	r2,r4,128
1000d858:	103e8026 	beq	r2,zero,1000d25c <__adddf3+0x2e8>
1000d85c:	00bfe034 	movhi	r2,65408
1000d860:	10bfffc4 	addi	r2,r2,-1
1000d864:	2088703a 	and	r4,r4,r2
1000d868:	04000044 	movi	r16,1
1000d86c:	003e7b06 	br	1000d25c <__adddf3+0x2e8>
1000d870:	00880034 	movhi	r2,8192
1000d874:	10bfffc4 	addi	r2,r2,-1
1000d878:	2084703a 	and	r2,r4,r2
1000d87c:	1144b03a 	or	r2,r2,r5
1000d880:	003eb306 	br	1000d350 <__adddf3+0x3dc>
1000d884:	180e977a 	slli	r7,r3,29
1000d888:	01480034 	movhi	r5,8192
1000d88c:	297fffc4 	addi	r5,r5,-1
1000d890:	3144703a 	and	r2,r6,r5
1000d894:	3884b03a 	or	r2,r7,r2
1000d898:	1812d0fa 	srli	r9,r3,3
1000d89c:	2021883a 	mov	r16,r4
1000d8a0:	003e7406 	br	1000d274 <__adddf3+0x300>
1000d8a4:	00880034 	movhi	r2,8192
1000d8a8:	1808977a 	slli	r4,r3,29
1000d8ac:	10bfffc4 	addi	r2,r2,-1
1000d8b0:	3084703a 	and	r2,r6,r2
1000d8b4:	1104b03a 	or	r2,r2,r4
1000d8b8:	1812d0fa 	srli	r9,r3,3
1000d8bc:	3823883a 	mov	r17,r7
1000d8c0:	003ea306 	br	1000d350 <__adddf3+0x3dc>
1000d8c4:	217ff804 	addi	r5,r4,-32
1000d8c8:	21800820 	cmpeqi	r6,r4,32
1000d8cc:	494ad83a 	srl	r5,r9,r5
1000d8d0:	3000041e 	bne	r6,zero,1000d8e4 <__adddf3+0x970>
1000d8d4:	01801004 	movi	r6,64
1000d8d8:	3109c83a 	sub	r4,r6,r4
1000d8dc:	4912983a 	sll	r9,r9,r4
1000d8e0:	6258b03a 	or	r12,r12,r9
1000d8e4:	6026c03a 	cmpne	r19,r12,zero
1000d8e8:	9966b03a 	or	r19,r19,r5
1000d8ec:	003ee506 	br	1000d484 <__adddf3+0x510>
1000d8f0:	62e7883a 	add	r19,r12,r11
1000d8f4:	48d3883a 	add	r9,r9,r3
1000d8f8:	9ac9803a 	cmpltu	r4,r19,r11
1000d8fc:	4909883a 	add	r4,r9,r4
1000d900:	003e5306 	br	1000d250 <__adddf3+0x2dc>
1000d904:	0005883a 	mov	r2,zero
1000d908:	0401ffc4 	movi	r16,2047
1000d90c:	0009883a 	mov	r4,zero
1000d910:	003dfe06 	br	1000d10c <__adddf3+0x198>

1000d914 <__divdf3>:
1000d914:	defff104 	addi	sp,sp,-60
1000d918:	2804d53a 	srli	r2,r5,20
1000d91c:	dd000915 	stw	r20,36(sp)
1000d920:	2828d7fa 	srli	r20,r5,31
1000d924:	dc000515 	stw	r16,20(sp)
1000d928:	04000434 	movhi	r16,16
1000d92c:	ddc00c15 	stw	r23,48(sp)
1000d930:	dc800715 	stw	r18,28(sp)
1000d934:	843fffc4 	addi	r16,r16,-1
1000d938:	dfc00e15 	stw	ra,56(sp)
1000d93c:	df000d15 	stw	fp,52(sp)
1000d940:	dd800b15 	stw	r22,44(sp)
1000d944:	dd400a15 	stw	r21,40(sp)
1000d948:	dcc00815 	stw	r19,32(sp)
1000d94c:	dc400615 	stw	r17,24(sp)
1000d950:	1081ffcc 	andi	r2,r2,2047
1000d954:	2025883a 	mov	r18,r4
1000d958:	2c20703a 	and	r16,r5,r16
1000d95c:	a02f883a 	mov	r23,r20
1000d960:	10008926 	beq	r2,zero,1000db88 <__divdf3+0x274>
1000d964:	10c1ffe0 	cmpeqi	r3,r2,2047
1000d968:	18009f1e 	bne	r3,zero,1000dbe8 <__divdf3+0x2d4>
1000d96c:	800a90fa 	slli	r5,r16,3
1000d970:	2008d77a 	srli	r4,r4,29
1000d974:	902490fa 	slli	r18,r18,3
1000d978:	157f0044 	addi	r21,r2,-1023
1000d97c:	2148b03a 	or	r4,r4,r5
1000d980:	25802034 	orhi	r22,r4,128
1000d984:	0023883a 	mov	r17,zero
1000d988:	0021883a 	mov	r16,zero
1000d98c:	3806d53a 	srli	r3,r7,20
1000d990:	01000434 	movhi	r4,16
1000d994:	213fffc4 	addi	r4,r4,-1
1000d998:	18c1ffcc 	andi	r3,r3,2047
1000d99c:	3926703a 	and	r19,r7,r4
1000d9a0:	380ed7fa 	srli	r7,r7,31
1000d9a4:	18006326 	beq	r3,zero,1000db34 <__divdf3+0x220>
1000d9a8:	1881ffe0 	cmpeqi	r2,r3,2047
1000d9ac:	1000201e 	bne	r2,zero,1000da30 <__divdf3+0x11c>
1000d9b0:	980890fa 	slli	r4,r19,3
1000d9b4:	300ad77a 	srli	r5,r6,29
1000d9b8:	301090fa 	slli	r8,r6,3
1000d9bc:	18ff0044 	addi	r3,r3,-1023
1000d9c0:	2908b03a 	or	r4,r5,r4
1000d9c4:	a8ebc83a 	sub	r21,r21,r3
1000d9c8:	24c02034 	orhi	r19,r4,128
1000d9cc:	0007883a 	mov	r3,zero
1000d9d0:	89800428 	cmpgeui	r6,r17,16
1000d9d4:	a1f8f03a 	xor	fp,r20,r7
1000d9d8:	3000ad1e 	bne	r6,zero,1000dc90 <__divdf3+0x37c>
1000d9dc:	882290ba 	slli	r17,r17,2
1000d9e0:	00840074 	movhi	r2,4097
1000d9e4:	8885883a 	add	r2,r17,r2
1000d9e8:	10b67c17 	ldw	r2,-9744(r2)
1000d9ec:	1000683a 	jmp	r2
1000d9f0:	1000dc90 	cmplti	zero,r2,882
1000d9f4:	1000db24 	muli	zero,r2,876
1000d9f8:	1000dac8 	cmpgei	zero,r2,875
1000d9fc:	1000da4c 	andi	zero,r2,873
1000da00:	1000dac8 	cmpgei	zero,r2,875
1000da04:	1000dc4c 	andi	zero,r2,881
1000da08:	1000dac8 	cmpgei	zero,r2,875
1000da0c:	1000da4c 	andi	zero,r2,873
1000da10:	1000db24 	muli	zero,r2,876
1000da14:	1000db24 	muli	zero,r2,876
1000da18:	1000dc4c 	andi	zero,r2,881
1000da1c:	1000da4c 	andi	zero,r2,873
1000da20:	1000da5c 	xori	zero,r2,873
1000da24:	1000da5c 	xori	zero,r2,873
1000da28:	1000da5c 	xori	zero,r2,873
1000da2c:	1000dc64 	muli	zero,r2,881
1000da30:	9990b03a 	or	r8,r19,r6
1000da34:	ad7e0044 	addi	r21,r21,-2047
1000da38:	4000801e 	bne	r8,zero,1000dc3c <__divdf3+0x328>
1000da3c:	8c400094 	ori	r17,r17,2
1000da40:	0027883a 	mov	r19,zero
1000da44:	00c00084 	movi	r3,2
1000da48:	003fe106 	br	1000d9d0 <__divdf3+0xbc>
1000da4c:	382f883a 	mov	r23,r7
1000da50:	982d883a 	mov	r22,r19
1000da54:	4025883a 	mov	r18,r8
1000da58:	1821883a 	mov	r16,r3
1000da5c:	808000a0 	cmpeqi	r2,r16,2
1000da60:	10017c1e 	bne	r2,zero,1000e054 <__divdf3+0x740>
1000da64:	808000e0 	cmpeqi	r2,r16,3
1000da68:	1001ca1e 	bne	r2,zero,1000e194 <__divdf3+0x880>
1000da6c:	80800060 	cmpeqi	r2,r16,1
1000da70:	1000141e 	bne	r2,zero,1000dac4 <__divdf3+0x1b0>
1000da74:	ac00ffc4 	addi	r16,r21,1023
1000da78:	b839883a 	mov	fp,r23
1000da7c:	0401580e 	bge	zero,r16,1000dfe0 <__divdf3+0x6cc>
1000da80:	908001cc 	andi	r2,r18,7
1000da84:	1001921e 	bne	r2,zero,1000e0d0 <__divdf3+0x7bc>
1000da88:	900ad0fa 	srli	r5,r18,3
1000da8c:	b080402c 	andhi	r2,r22,256
1000da90:	10000426 	beq	r2,zero,1000daa4 <__divdf3+0x190>
1000da94:	00bfc034 	movhi	r2,65280
1000da98:	10bfffc4 	addi	r2,r2,-1
1000da9c:	b0ac703a 	and	r22,r22,r2
1000daa0:	ac010004 	addi	r16,r21,1024
1000daa4:	8081ffc8 	cmpgei	r2,r16,2047
1000daa8:	10001e1e 	bne	r2,zero,1000db24 <__divdf3+0x210>
1000daac:	b024977a 	slli	r18,r22,29
1000dab0:	b008927a 	slli	r4,r22,9
1000dab4:	8081ffcc 	andi	r2,r16,2047
1000dab8:	9164b03a 	or	r18,r18,r5
1000dabc:	2008d33a 	srli	r4,r4,12
1000dac0:	00000406 	br	1000dad4 <__divdf3+0x1c0>
1000dac4:	b839883a 	mov	fp,r23
1000dac8:	0005883a 	mov	r2,zero
1000dacc:	0009883a 	mov	r4,zero
1000dad0:	0025883a 	mov	r18,zero
1000dad4:	1004953a 	slli	r2,r2,20
1000dad8:	00c00434 	movhi	r3,16
1000dadc:	e03897fa 	slli	fp,fp,31
1000dae0:	18ffffc4 	addi	r3,r3,-1
1000dae4:	20c6703a 	and	r3,r4,r3
1000dae8:	1886b03a 	or	r3,r3,r2
1000daec:	1f06b03a 	or	r3,r3,fp
1000daf0:	9005883a 	mov	r2,r18
1000daf4:	dfc00e17 	ldw	ra,56(sp)
1000daf8:	df000d17 	ldw	fp,52(sp)
1000dafc:	ddc00c17 	ldw	r23,48(sp)
1000db00:	dd800b17 	ldw	r22,44(sp)
1000db04:	dd400a17 	ldw	r21,40(sp)
1000db08:	dd000917 	ldw	r20,36(sp)
1000db0c:	dcc00817 	ldw	r19,32(sp)
1000db10:	dc800717 	ldw	r18,28(sp)
1000db14:	dc400617 	ldw	r17,24(sp)
1000db18:	dc000517 	ldw	r16,20(sp)
1000db1c:	dec00f04 	addi	sp,sp,60
1000db20:	f800283a 	ret
1000db24:	0081ffc4 	movi	r2,2047
1000db28:	0009883a 	mov	r4,zero
1000db2c:	0025883a 	mov	r18,zero
1000db30:	003fe806 	br	1000dad4 <__divdf3+0x1c0>
1000db34:	9990b03a 	or	r8,r19,r6
1000db38:	40003c26 	beq	r8,zero,1000dc2c <__divdf3+0x318>
1000db3c:	98011826 	beq	r19,zero,1000dfa0 <__divdf3+0x68c>
1000db40:	9809883a 	mov	r4,r19
1000db44:	d9800115 	stw	r6,4(sp)
1000db48:	d9c00015 	stw	r7,0(sp)
1000db4c:	000f64c0 	call	1000f64c <__clzsi2>
1000db50:	d9c00017 	ldw	r7,0(sp)
1000db54:	d9800117 	ldw	r6,4(sp)
1000db58:	117ffd44 	addi	r5,r2,-11
1000db5c:	00c00744 	movi	r3,29
1000db60:	123ffe04 	addi	r8,r2,-8
1000db64:	1947c83a 	sub	r3,r3,r5
1000db68:	9a08983a 	sll	r4,r19,r8
1000db6c:	30c6d83a 	srl	r3,r6,r3
1000db70:	3210983a 	sll	r8,r6,r8
1000db74:	1926b03a 	or	r19,r3,r4
1000db78:	1545883a 	add	r2,r2,r21
1000db7c:	1540fcc4 	addi	r21,r2,1011
1000db80:	0007883a 	mov	r3,zero
1000db84:	003f9206 	br	1000d9d0 <__divdf3+0xbc>
1000db88:	242cb03a 	or	r22,r4,r16
1000db8c:	2023883a 	mov	r17,r4
1000db90:	b0002126 	beq	r22,zero,1000dc18 <__divdf3+0x304>
1000db94:	d9c00115 	stw	r7,4(sp)
1000db98:	d9800015 	stw	r6,0(sp)
1000db9c:	8000f526 	beq	r16,zero,1000df74 <__divdf3+0x660>
1000dba0:	8009883a 	mov	r4,r16
1000dba4:	000f64c0 	call	1000f64c <__clzsi2>
1000dba8:	d9800017 	ldw	r6,0(sp)
1000dbac:	d9c00117 	ldw	r7,4(sp)
1000dbb0:	102b883a 	mov	r21,r2
1000dbb4:	113ffd44 	addi	r4,r2,-11
1000dbb8:	05800744 	movi	r22,29
1000dbbc:	acbffe04 	addi	r18,r21,-8
1000dbc0:	b12dc83a 	sub	r22,r22,r4
1000dbc4:	848a983a 	sll	r5,r16,r18
1000dbc8:	8d88d83a 	srl	r4,r17,r22
1000dbcc:	8ca4983a 	sll	r18,r17,r18
1000dbd0:	216cb03a 	or	r22,r4,r5
1000dbd4:	00bf0344 	movi	r2,-1011
1000dbd8:	156bc83a 	sub	r21,r2,r21
1000dbdc:	0023883a 	mov	r17,zero
1000dbe0:	0021883a 	mov	r16,zero
1000dbe4:	003f6906 	br	1000d98c <__divdf3+0x78>
1000dbe8:	242cb03a 	or	r22,r4,r16
1000dbec:	b000051e 	bne	r22,zero,1000dc04 <__divdf3+0x2f0>
1000dbf0:	0025883a 	mov	r18,zero
1000dbf4:	04400204 	movi	r17,8
1000dbf8:	0541ffc4 	movi	r21,2047
1000dbfc:	04000084 	movi	r16,2
1000dc00:	003f6206 	br	1000d98c <__divdf3+0x78>
1000dc04:	802d883a 	mov	r22,r16
1000dc08:	04400304 	movi	r17,12
1000dc0c:	0541ffc4 	movi	r21,2047
1000dc10:	040000c4 	movi	r16,3
1000dc14:	003f5d06 	br	1000d98c <__divdf3+0x78>
1000dc18:	0025883a 	mov	r18,zero
1000dc1c:	04400104 	movi	r17,4
1000dc20:	002b883a 	mov	r21,zero
1000dc24:	04000044 	movi	r16,1
1000dc28:	003f5806 	br	1000d98c <__divdf3+0x78>
1000dc2c:	8c400054 	ori	r17,r17,1
1000dc30:	0027883a 	mov	r19,zero
1000dc34:	00c00044 	movi	r3,1
1000dc38:	003f6506 	br	1000d9d0 <__divdf3+0xbc>
1000dc3c:	8c4000d4 	ori	r17,r17,3
1000dc40:	3011883a 	mov	r8,r6
1000dc44:	00c000c4 	movi	r3,3
1000dc48:	003f6106 	br	1000d9d0 <__divdf3+0xbc>
1000dc4c:	01000434 	movhi	r4,16
1000dc50:	0039883a 	mov	fp,zero
1000dc54:	213fffc4 	addi	r4,r4,-1
1000dc58:	04bfffc4 	movi	r18,-1
1000dc5c:	0081ffc4 	movi	r2,2047
1000dc60:	003f9c06 	br	1000dad4 <__divdf3+0x1c0>
1000dc64:	b080022c 	andhi	r2,r22,8
1000dc68:	1000a126 	beq	r2,zero,1000def0 <__divdf3+0x5dc>
1000dc6c:	9880022c 	andhi	r2,r19,8
1000dc70:	10009f1e 	bne	r2,zero,1000def0 <__divdf3+0x5dc>
1000dc74:	00800434 	movhi	r2,16
1000dc78:	99000234 	orhi	r4,r19,8
1000dc7c:	10bfffc4 	addi	r2,r2,-1
1000dc80:	2088703a 	and	r4,r4,r2
1000dc84:	3839883a 	mov	fp,r7
1000dc88:	4025883a 	mov	r18,r8
1000dc8c:	003ff306 	br	1000dc5c <__divdf3+0x348>
1000dc90:	9d80b236 	bltu	r19,r22,1000df5c <__divdf3+0x648>
1000dc94:	9d80b026 	beq	r19,r22,1000df58 <__divdf3+0x644>
1000dc98:	ad7fffc4 	addi	r21,r21,-1
1000dc9c:	b007883a 	mov	r3,r22
1000dca0:	0021883a 	mov	r16,zero
1000dca4:	400cd63a 	srli	r6,r8,24
1000dca8:	9826923a 	slli	r19,r19,8
1000dcac:	4004923a 	slli	r2,r8,8
1000dcb0:	1809883a 	mov	r4,r3
1000dcb4:	34e2b03a 	or	r17,r6,r19
1000dcb8:	8828d43a 	srli	r20,r17,16
1000dcbc:	d8c00115 	stw	r3,4(sp)
1000dcc0:	d8800015 	stw	r2,0(sp)
1000dcc4:	a00b883a 	mov	r5,r20
1000dcc8:	000ceb40 	call	1000ceb4 <__udivsi3>
1000dccc:	d8c00117 	ldw	r3,4(sp)
1000dcd0:	a00b883a 	mov	r5,r20
1000dcd4:	102d883a 	mov	r22,r2
1000dcd8:	1809883a 	mov	r4,r3
1000dcdc:	000cf180 	call	1000cf18 <__umodsi3>
1000dce0:	1006943a 	slli	r3,r2,16
1000dce4:	8dffffcc 	andi	r23,r17,65535
1000dce8:	9004d43a 	srli	r2,r18,16
1000dcec:	bda7383a 	mul	r19,r23,r22
1000dcf0:	10c4b03a 	or	r2,r2,r3
1000dcf4:	14c0042e 	bgeu	r2,r19,1000dd08 <__divdf3+0x3f4>
1000dcf8:	1445883a 	add	r2,r2,r17
1000dcfc:	b0ffffc4 	addi	r3,r22,-1
1000dd00:	1440e12e 	bgeu	r2,r17,1000e088 <__divdf3+0x774>
1000dd04:	182d883a 	mov	r22,r3
1000dd08:	14e7c83a 	sub	r19,r2,r19
1000dd0c:	a00b883a 	mov	r5,r20
1000dd10:	9809883a 	mov	r4,r19
1000dd14:	000ceb40 	call	1000ceb4 <__udivsi3>
1000dd18:	a00b883a 	mov	r5,r20
1000dd1c:	9809883a 	mov	r4,r19
1000dd20:	d8800115 	stw	r2,4(sp)
1000dd24:	000cf180 	call	1000cf18 <__umodsi3>
1000dd28:	d8c00117 	ldw	r3,4(sp)
1000dd2c:	1004943a 	slli	r2,r2,16
1000dd30:	94bfffcc 	andi	r18,r18,65535
1000dd34:	b8cb383a 	mul	r5,r23,r3
1000dd38:	9084b03a 	or	r2,r18,r2
1000dd3c:	1140042e 	bgeu	r2,r5,1000dd50 <__divdf3+0x43c>
1000dd40:	1445883a 	add	r2,r2,r17
1000dd44:	193fffc4 	addi	r4,r3,-1
1000dd48:	1440cb2e 	bgeu	r2,r17,1000e078 <__divdf3+0x764>
1000dd4c:	2007883a 	mov	r3,r4
1000dd50:	b008943a 	slli	r4,r22,16
1000dd54:	d9800017 	ldw	r6,0(sp)
1000dd58:	1145c83a 	sub	r2,r2,r5
1000dd5c:	20ecb03a 	or	r22,r4,r3
1000dd60:	b0ffffcc 	andi	r3,r22,65535
1000dd64:	300ed43a 	srli	r7,r6,16
1000dd68:	323fffcc 	andi	r8,r6,65535
1000dd6c:	b026d43a 	srli	r19,r22,16
1000dd70:	40e5383a 	mul	r18,r8,r3
1000dd74:	38c9383a 	mul	r4,r7,r3
1000dd78:	9a13383a 	mul	r9,r19,r8
1000dd7c:	9006d43a 	srli	r3,r18,16
1000dd80:	2249883a 	add	r4,r4,r9
1000dd84:	1907883a 	add	r3,r3,r4
1000dd88:	99c9383a 	mul	r4,r19,r7
1000dd8c:	1a40022e 	bgeu	r3,r9,1000dd98 <__divdf3+0x484>
1000dd90:	01400074 	movhi	r5,1
1000dd94:	2149883a 	add	r4,r4,r5
1000dd98:	1826d43a 	srli	r19,r3,16
1000dd9c:	1806943a 	slli	r3,r3,16
1000dda0:	94bfffcc 	andi	r18,r18,65535
1000dda4:	9927883a 	add	r19,r19,r4
1000dda8:	1ca5883a 	add	r18,r3,r18
1000ddac:	14c05f36 	bltu	r2,r19,1000df2c <__divdf3+0x618>
1000ddb0:	14c05d26 	beq	r2,r19,1000df28 <__divdf3+0x614>
1000ddb4:	84a5c83a 	sub	r18,r16,r18
1000ddb8:	14c5c83a 	sub	r2,r2,r19
1000ddbc:	84a7803a 	cmpltu	r19,r16,r18
1000ddc0:	da000215 	stw	r8,8(sp)
1000ddc4:	d9c00115 	stw	r7,4(sp)
1000ddc8:	14e7c83a 	sub	r19,r2,r19
1000ddcc:	ac00ffc4 	addi	r16,r21,1023
1000ddd0:	8cc0b626 	beq	r17,r19,1000e0ac <__divdf3+0x798>
1000ddd4:	9809883a 	mov	r4,r19
1000ddd8:	a00b883a 	mov	r5,r20
1000dddc:	000ceb40 	call	1000ceb4 <__udivsi3>
1000dde0:	9809883a 	mov	r4,r19
1000dde4:	a00b883a 	mov	r5,r20
1000dde8:	d8800315 	stw	r2,12(sp)
1000ddec:	000cf180 	call	1000cf18 <__umodsi3>
1000ddf0:	d8c00317 	ldw	r3,12(sp)
1000ddf4:	1008943a 	slli	r4,r2,16
1000ddf8:	9004d43a 	srli	r2,r18,16
1000ddfc:	b8e7383a 	mul	r19,r23,r3
1000de00:	d9c00117 	ldw	r7,4(sp)
1000de04:	1104b03a 	or	r2,r2,r4
1000de08:	da000217 	ldw	r8,8(sp)
1000de0c:	14c0062e 	bgeu	r2,r19,1000de28 <__divdf3+0x514>
1000de10:	1445883a 	add	r2,r2,r17
1000de14:	193fffc4 	addi	r4,r3,-1
1000de18:	1440ab36 	bltu	r2,r17,1000e0c8 <__divdf3+0x7b4>
1000de1c:	14c0aa2e 	bgeu	r2,r19,1000e0c8 <__divdf3+0x7b4>
1000de20:	18ffff84 	addi	r3,r3,-2
1000de24:	1445883a 	add	r2,r2,r17
1000de28:	14e7c83a 	sub	r19,r2,r19
1000de2c:	a00b883a 	mov	r5,r20
1000de30:	9809883a 	mov	r4,r19
1000de34:	da000415 	stw	r8,16(sp)
1000de38:	d8c00315 	stw	r3,12(sp)
1000de3c:	d9c00215 	stw	r7,8(sp)
1000de40:	000ceb40 	call	1000ceb4 <__udivsi3>
1000de44:	a00b883a 	mov	r5,r20
1000de48:	9809883a 	mov	r4,r19
1000de4c:	d8800115 	stw	r2,4(sp)
1000de50:	000cf180 	call	1000cf18 <__umodsi3>
1000de54:	da400117 	ldw	r9,4(sp)
1000de58:	1004943a 	slli	r2,r2,16
1000de5c:	94bfffcc 	andi	r18,r18,65535
1000de60:	ba6f383a 	mul	r23,r23,r9
1000de64:	9084b03a 	or	r2,r18,r2
1000de68:	d9c00217 	ldw	r7,8(sp)
1000de6c:	d8c00317 	ldw	r3,12(sp)
1000de70:	da000417 	ldw	r8,16(sp)
1000de74:	15c0062e 	bgeu	r2,r23,1000de90 <__divdf3+0x57c>
1000de78:	1445883a 	add	r2,r2,r17
1000de7c:	493fffc4 	addi	r4,r9,-1
1000de80:	14408f36 	bltu	r2,r17,1000e0c0 <__divdf3+0x7ac>
1000de84:	15c08e2e 	bgeu	r2,r23,1000e0c0 <__divdf3+0x7ac>
1000de88:	4a7fff84 	addi	r9,r9,-2
1000de8c:	1445883a 	add	r2,r2,r17
1000de90:	180a943a 	slli	r5,r3,16
1000de94:	15c5c83a 	sub	r2,r2,r23
1000de98:	2a64b03a 	or	r18,r5,r9
1000de9c:	9012d43a 	srli	r9,r18,16
1000dea0:	913fffcc 	andi	r4,r18,65535
1000dea4:	220b383a 	mul	r5,r4,r8
1000dea8:	3909383a 	mul	r4,r7,r4
1000deac:	4a11383a 	mul	r8,r9,r8
1000deb0:	2806d43a 	srli	r3,r5,16
1000deb4:	3a4f383a 	mul	r7,r7,r9
1000deb8:	2209883a 	add	r4,r4,r8
1000debc:	1907883a 	add	r3,r3,r4
1000dec0:	1a00022e 	bgeu	r3,r8,1000decc <__divdf3+0x5b8>
1000dec4:	01000074 	movhi	r4,1
1000dec8:	390f883a 	add	r7,r7,r4
1000decc:	1808d43a 	srli	r4,r3,16
1000ded0:	1806943a 	slli	r3,r3,16
1000ded4:	297fffcc 	andi	r5,r5,65535
1000ded8:	21cf883a 	add	r7,r4,r7
1000dedc:	1947883a 	add	r3,r3,r5
1000dee0:	11c00a36 	bltu	r2,r7,1000df0c <__divdf3+0x5f8>
1000dee4:	11c00826 	beq	r2,r7,1000df08 <__divdf3+0x5f4>
1000dee8:	94800054 	ori	r18,r18,1
1000deec:	003ee306 	br	1000da7c <__divdf3+0x168>
1000def0:	00800434 	movhi	r2,16
1000def4:	b1000234 	orhi	r4,r22,8
1000def8:	10bfffc4 	addi	r2,r2,-1
1000defc:	2088703a 	and	r4,r4,r2
1000df00:	a039883a 	mov	fp,r20
1000df04:	003f5506 	br	1000dc5c <__divdf3+0x348>
1000df08:	183edc26 	beq	r3,zero,1000da7c <__divdf3+0x168>
1000df0c:	8885883a 	add	r2,r17,r2
1000df10:	913fffc4 	addi	r4,r18,-1
1000df14:	14406036 	bltu	r2,r17,1000e098 <__divdf3+0x784>
1000df18:	11c07d36 	bltu	r2,r7,1000e110 <__divdf3+0x7fc>
1000df1c:	11c0a326 	beq	r2,r7,1000e1ac <__divdf3+0x898>
1000df20:	2025883a 	mov	r18,r4
1000df24:	003ff006 	br	1000dee8 <__divdf3+0x5d4>
1000df28:	84bfa22e 	bgeu	r16,r18,1000ddb4 <__divdf3+0x4a0>
1000df2c:	d8c00017 	ldw	r3,0(sp)
1000df30:	80e1883a 	add	r16,r16,r3
1000df34:	80c7803a 	cmpltu	r3,r16,r3
1000df38:	1c47883a 	add	r3,r3,r17
1000df3c:	10c5883a 	add	r2,r2,r3
1000df40:	b0ffffc4 	addi	r3,r22,-1
1000df44:	8880482e 	bgeu	r17,r2,1000e068 <__divdf3+0x754>
1000df48:	14c06a36 	bltu	r2,r19,1000e0f4 <__divdf3+0x7e0>
1000df4c:	98806826 	beq	r19,r2,1000e0f0 <__divdf3+0x7dc>
1000df50:	182d883a 	mov	r22,r3
1000df54:	003f9706 	br	1000ddb4 <__divdf3+0x4a0>
1000df58:	923f4f36 	bltu	r18,r8,1000dc98 <__divdf3+0x384>
1000df5c:	b00a97fa 	slli	r5,r22,31
1000df60:	9004d07a 	srli	r2,r18,1
1000df64:	902097fa 	slli	r16,r18,31
1000df68:	b006d07a 	srli	r3,r22,1
1000df6c:	28a4b03a 	or	r18,r5,r2
1000df70:	003f4c06 	br	1000dca4 <__divdf3+0x390>
1000df74:	000f64c0 	call	1000f64c <__clzsi2>
1000df78:	11000544 	addi	r4,r2,21
1000df7c:	21400748 	cmpgei	r5,r4,29
1000df80:	15400804 	addi	r21,r2,32
1000df84:	d9800017 	ldw	r6,0(sp)
1000df88:	d9c00117 	ldw	r7,4(sp)
1000df8c:	283f0a26 	beq	r5,zero,1000dbb8 <__divdf3+0x2a4>
1000df90:	113ffe04 	addi	r4,r2,-8
1000df94:	912c983a 	sll	r22,r18,r4
1000df98:	0025883a 	mov	r18,zero
1000df9c:	003f0d06 	br	1000dbd4 <__divdf3+0x2c0>
1000dfa0:	3009883a 	mov	r4,r6
1000dfa4:	d9c00115 	stw	r7,4(sp)
1000dfa8:	d9800015 	stw	r6,0(sp)
1000dfac:	000f64c0 	call	1000f64c <__clzsi2>
1000dfb0:	11400544 	addi	r5,r2,21
1000dfb4:	28c00748 	cmpgei	r3,r5,29
1000dfb8:	1009883a 	mov	r4,r2
1000dfbc:	d9800017 	ldw	r6,0(sp)
1000dfc0:	10800804 	addi	r2,r2,32
1000dfc4:	d9c00117 	ldw	r7,4(sp)
1000dfc8:	183ee426 	beq	r3,zero,1000db5c <__divdf3+0x248>
1000dfcc:	213ffe04 	addi	r4,r4,-8
1000dfd0:	3126983a 	sll	r19,r6,r4
1000dfd4:	0011883a 	mov	r8,zero
1000dfd8:	003ee706 	br	1000db78 <__divdf3+0x264>
1000dfdc:	04bfffc4 	movi	r18,-1
1000dfe0:	01000044 	movi	r4,1
1000dfe4:	2409c83a 	sub	r4,r4,r16
1000dfe8:	20800e48 	cmpgei	r2,r4,57
1000dfec:	103eb61e 	bne	r2,zero,1000dac8 <__divdf3+0x1b4>
1000dff0:	20800808 	cmpgei	r2,r4,32
1000dff4:	10004e1e 	bne	r2,zero,1000e130 <__divdf3+0x81c>
1000dff8:	a8810784 	addi	r2,r21,1054
1000dffc:	b086983a 	sll	r3,r22,r2
1000e000:	910ad83a 	srl	r5,r18,r4
1000e004:	9084983a 	sll	r2,r18,r2
1000e008:	b108d83a 	srl	r4,r22,r4
1000e00c:	1964b03a 	or	r18,r3,r5
1000e010:	1004c03a 	cmpne	r2,r2,zero
1000e014:	90a4b03a 	or	r18,r18,r2
1000e018:	908001cc 	andi	r2,r18,7
1000e01c:	10000726 	beq	r2,zero,1000e03c <__divdf3+0x728>
1000e020:	908003cc 	andi	r2,r18,15
1000e024:	10800120 	cmpeqi	r2,r2,4
1000e028:	1000041e 	bne	r2,zero,1000e03c <__divdf3+0x728>
1000e02c:	90800104 	addi	r2,r18,4
1000e030:	14a5803a 	cmpltu	r18,r2,r18
1000e034:	2489883a 	add	r4,r4,r18
1000e038:	1025883a 	mov	r18,r2
1000e03c:	2080202c 	andhi	r2,r4,128
1000e040:	10005026 	beq	r2,zero,1000e184 <__divdf3+0x870>
1000e044:	00800044 	movi	r2,1
1000e048:	0009883a 	mov	r4,zero
1000e04c:	0025883a 	mov	r18,zero
1000e050:	003ea006 	br	1000dad4 <__divdf3+0x1c0>
1000e054:	b839883a 	mov	fp,r23
1000e058:	0081ffc4 	movi	r2,2047
1000e05c:	0009883a 	mov	r4,zero
1000e060:	0025883a 	mov	r18,zero
1000e064:	003e9b06 	br	1000dad4 <__divdf3+0x1c0>
1000e068:	88bfb91e 	bne	r17,r2,1000df50 <__divdf3+0x63c>
1000e06c:	d9000017 	ldw	r4,0(sp)
1000e070:	813fb736 	bltu	r16,r4,1000df50 <__divdf3+0x63c>
1000e074:	003fb406 	br	1000df48 <__divdf3+0x634>
1000e078:	117f342e 	bgeu	r2,r5,1000dd4c <__divdf3+0x438>
1000e07c:	18ffff84 	addi	r3,r3,-2
1000e080:	1445883a 	add	r2,r2,r17
1000e084:	003f3206 	br	1000dd50 <__divdf3+0x43c>
1000e088:	14ff1e2e 	bgeu	r2,r19,1000dd04 <__divdf3+0x3f0>
1000e08c:	b5bfff84 	addi	r22,r22,-2
1000e090:	1445883a 	add	r2,r2,r17
1000e094:	003f1c06 	br	1000dd08 <__divdf3+0x3f4>
1000e098:	2025883a 	mov	r18,r4
1000e09c:	11ff921e 	bne	r2,r7,1000dee8 <__divdf3+0x5d4>
1000e0a0:	d8800017 	ldw	r2,0(sp)
1000e0a4:	10ff901e 	bne	r2,r3,1000dee8 <__divdf3+0x5d4>
1000e0a8:	003e7406 	br	1000da7c <__divdf3+0x168>
1000e0ac:	043fcb0e 	bge	zero,r16,1000dfdc <__divdf3+0x6c8>
1000e0b0:	000b883a 	mov	r5,zero
1000e0b4:	04800044 	movi	r18,1
1000e0b8:	b4ad883a 	add	r22,r22,r18
1000e0bc:	003e7306 	br	1000da8c <__divdf3+0x178>
1000e0c0:	2013883a 	mov	r9,r4
1000e0c4:	003f7206 	br	1000de90 <__divdf3+0x57c>
1000e0c8:	2007883a 	mov	r3,r4
1000e0cc:	003f5606 	br	1000de28 <__divdf3+0x514>
1000e0d0:	908003cc 	andi	r2,r18,15
1000e0d4:	10800118 	cmpnei	r2,r2,4
1000e0d8:	103e6b26 	beq	r2,zero,1000da88 <__divdf3+0x174>
1000e0dc:	91400104 	addi	r5,r18,4
1000e0e0:	00bffec4 	movi	r2,-5
1000e0e4:	14a5803a 	cmpltu	r18,r2,r18
1000e0e8:	280ad0fa 	srli	r5,r5,3
1000e0ec:	003ff206 	br	1000e0b8 <__divdf3+0x7a4>
1000e0f0:	84bf972e 	bgeu	r16,r18,1000df50 <__divdf3+0x63c>
1000e0f4:	d8c00017 	ldw	r3,0(sp)
1000e0f8:	b5bfff84 	addi	r22,r22,-2
1000e0fc:	80e1883a 	add	r16,r16,r3
1000e100:	80c7803a 	cmpltu	r3,r16,r3
1000e104:	1c47883a 	add	r3,r3,r17
1000e108:	10c5883a 	add	r2,r2,r3
1000e10c:	003f2906 	br	1000ddb4 <__divdf3+0x4a0>
1000e110:	d9400017 	ldw	r5,0(sp)
1000e114:	94bfff84 	addi	r18,r18,-2
1000e118:	2949883a 	add	r4,r5,r5
1000e11c:	214b803a 	cmpltu	r5,r4,r5
1000e120:	2c4d883a 	add	r6,r5,r17
1000e124:	1185883a 	add	r2,r2,r6
1000e128:	d9000015 	stw	r4,0(sp)
1000e12c:	003fdb06 	br	1000e09c <__divdf3+0x788>
1000e130:	00bff844 	movi	r2,-31
1000e134:	1421c83a 	sub	r16,r2,r16
1000e138:	21000820 	cmpeqi	r4,r4,32
1000e13c:	b420d83a 	srl	r16,r22,r16
1000e140:	2000031e 	bne	r4,zero,1000e150 <__divdf3+0x83c>
1000e144:	a8810f84 	addi	r2,r21,1086
1000e148:	b088983a 	sll	r4,r22,r2
1000e14c:	9124b03a 	or	r18,r18,r4
1000e150:	9024c03a 	cmpne	r18,r18,zero
1000e154:	9424b03a 	or	r18,r18,r16
1000e158:	914001cc 	andi	r5,r18,7
1000e15c:	2800051e 	bne	r5,zero,1000e174 <__divdf3+0x860>
1000e160:	0009883a 	mov	r4,zero
1000e164:	9024d0fa 	srli	r18,r18,3
1000e168:	0005883a 	mov	r2,zero
1000e16c:	9164b03a 	or	r18,r18,r5
1000e170:	003e5806 	br	1000dad4 <__divdf3+0x1c0>
1000e174:	908003cc 	andi	r2,r18,15
1000e178:	10800118 	cmpnei	r2,r2,4
1000e17c:	0009883a 	mov	r4,zero
1000e180:	103faa1e 	bne	r2,zero,1000e02c <__divdf3+0x718>
1000e184:	2004927a 	slli	r2,r4,9
1000e188:	200a977a 	slli	r5,r4,29
1000e18c:	1008d33a 	srli	r4,r2,12
1000e190:	003ff406 	br	1000e164 <__divdf3+0x850>
1000e194:	00800434 	movhi	r2,16
1000e198:	b1000234 	orhi	r4,r22,8
1000e19c:	10bfffc4 	addi	r2,r2,-1
1000e1a0:	2088703a 	and	r4,r4,r2
1000e1a4:	b839883a 	mov	fp,r23
1000e1a8:	003eac06 	br	1000dc5c <__divdf3+0x348>
1000e1ac:	d9400017 	ldw	r5,0(sp)
1000e1b0:	28ffd736 	bltu	r5,r3,1000e110 <__divdf3+0x7fc>
1000e1b4:	2025883a 	mov	r18,r4
1000e1b8:	003fb906 	br	1000e0a0 <__divdf3+0x78c>

1000e1bc <__eqdf2>:
1000e1bc:	2810d53a 	srli	r8,r5,20
1000e1c0:	3806d53a 	srli	r3,r7,20
1000e1c4:	00800434 	movhi	r2,16
1000e1c8:	4201ffcc 	andi	r8,r8,2047
1000e1cc:	10bfffc4 	addi	r2,r2,-1
1000e1d0:	4281ffd8 	cmpnei	r10,r8,2047
1000e1d4:	2892703a 	and	r9,r5,r2
1000e1d8:	18c1ffcc 	andi	r3,r3,2047
1000e1dc:	3884703a 	and	r2,r7,r2
1000e1e0:	280ad7fa 	srli	r5,r5,31
1000e1e4:	380ed7fa 	srli	r7,r7,31
1000e1e8:	50000626 	beq	r10,zero,1000e204 <__eqdf2+0x48>
1000e1ec:	1a81ffe0 	cmpeqi	r10,r3,2047
1000e1f0:	5000021e 	bne	r10,zero,1000e1fc <__eqdf2+0x40>
1000e1f4:	40c0011e 	bne	r8,r3,1000e1fc <__eqdf2+0x40>
1000e1f8:	48800826 	beq	r9,r2,1000e21c <__eqdf2+0x60>
1000e1fc:	00800044 	movi	r2,1
1000e200:	f800283a 	ret
1000e204:	4914b03a 	or	r10,r9,r4
1000e208:	503ffc1e 	bne	r10,zero,1000e1fc <__eqdf2+0x40>
1000e20c:	18c1ffd8 	cmpnei	r3,r3,2047
1000e210:	183ffa1e 	bne	r3,zero,1000e1fc <__eqdf2+0x40>
1000e214:	1184b03a 	or	r2,r2,r6
1000e218:	103ff81e 	bne	r2,zero,1000e1fc <__eqdf2+0x40>
1000e21c:	21bff71e 	bne	r4,r6,1000e1fc <__eqdf2+0x40>
1000e220:	29c00426 	beq	r5,r7,1000e234 <__eqdf2+0x78>
1000e224:	403ff51e 	bne	r8,zero,1000e1fc <__eqdf2+0x40>
1000e228:	4904b03a 	or	r2,r9,r4
1000e22c:	1004c03a 	cmpne	r2,r2,zero
1000e230:	f800283a 	ret
1000e234:	0005883a 	mov	r2,zero
1000e238:	f800283a 	ret

1000e23c <__gedf2>:
1000e23c:	2810d53a 	srli	r8,r5,20
1000e240:	3812d53a 	srli	r9,r7,20
1000e244:	00800434 	movhi	r2,16
1000e248:	4201ffcc 	andi	r8,r8,2047
1000e24c:	10bfffc4 	addi	r2,r2,-1
1000e250:	4281ffd8 	cmpnei	r10,r8,2047
1000e254:	2896703a 	and	r11,r5,r2
1000e258:	3886703a 	and	r3,r7,r2
1000e25c:	280ad7fa 	srli	r5,r5,31
1000e260:	4a41ffcc 	andi	r9,r9,2047
1000e264:	3804d7fa 	srli	r2,r7,31
1000e268:	50000b26 	beq	r10,zero,1000e298 <__gedf2+0x5c>
1000e26c:	49c1ffd8 	cmpnei	r7,r9,2047
1000e270:	38000d26 	beq	r7,zero,1000e2a8 <__gedf2+0x6c>
1000e274:	4000191e 	bne	r8,zero,1000e2dc <__gedf2+0xa0>
1000e278:	5914b03a 	or	r10,r11,r4
1000e27c:	500f003a 	cmpeq	r7,r10,zero
1000e280:	4800131e 	bne	r9,zero,1000e2d0 <__gedf2+0x94>
1000e284:	1998b03a 	or	r12,r3,r6
1000e288:	6000111e 	bne	r12,zero,1000e2d0 <__gedf2+0x94>
1000e28c:	50000a1e 	bne	r10,zero,1000e2b8 <__gedf2+0x7c>
1000e290:	0005883a 	mov	r2,zero
1000e294:	f800283a 	ret
1000e298:	590eb03a 	or	r7,r11,r4
1000e29c:	38001e1e 	bne	r7,zero,1000e318 <__gedf2+0xdc>
1000e2a0:	49c1ffe0 	cmpeqi	r7,r9,2047
1000e2a4:	38000d26 	beq	r7,zero,1000e2dc <__gedf2+0xa0>
1000e2a8:	198eb03a 	or	r7,r3,r6
1000e2ac:	38001a1e 	bne	r7,zero,1000e318 <__gedf2+0xdc>
1000e2b0:	40000526 	beq	r8,zero,1000e2c8 <__gedf2+0x8c>
1000e2b4:	28800d26 	beq	r5,r2,1000e2ec <__gedf2+0xb0>
1000e2b8:	00800044 	movi	r2,1
1000e2bc:	28000626 	beq	r5,zero,1000e2d8 <__gedf2+0x9c>
1000e2c0:	00bfffc4 	movi	r2,-1
1000e2c4:	f800283a 	ret
1000e2c8:	590eb03a 	or	r7,r11,r4
1000e2cc:	380f003a 	cmpeq	r7,r7,zero
1000e2d0:	383ff826 	beq	r7,zero,1000e2b4 <__gedf2+0x78>
1000e2d4:	103ffa26 	beq	r2,zero,1000e2c0 <__gedf2+0x84>
1000e2d8:	f800283a 	ret
1000e2dc:	483ff51e 	bne	r9,zero,1000e2b4 <__gedf2+0x78>
1000e2e0:	198eb03a 	or	r7,r3,r6
1000e2e4:	383ff31e 	bne	r7,zero,1000e2b4 <__gedf2+0x78>
1000e2e8:	003ff306 	br	1000e2b8 <__gedf2+0x7c>
1000e2ec:	4a000716 	blt	r9,r8,1000e30c <__gedf2+0xd0>
1000e2f0:	427ff816 	blt	r8,r9,1000e2d4 <__gedf2+0x98>
1000e2f4:	1afff036 	bltu	r3,r11,1000e2b8 <__gedf2+0x7c>
1000e2f8:	58c00926 	beq	r11,r3,1000e320 <__gedf2+0xe4>
1000e2fc:	58ffe42e 	bgeu	r11,r3,1000e290 <__gedf2+0x54>
1000e300:	283fef26 	beq	r5,zero,1000e2c0 <__gedf2+0x84>
1000e304:	2805883a 	mov	r2,r5
1000e308:	f800283a 	ret
1000e30c:	103fec1e 	bne	r2,zero,1000e2c0 <__gedf2+0x84>
1000e310:	00800044 	movi	r2,1
1000e314:	f800283a 	ret
1000e318:	00bfff84 	movi	r2,-2
1000e31c:	f800283a 	ret
1000e320:	313fe536 	bltu	r6,r4,1000e2b8 <__gedf2+0x7c>
1000e324:	21bfda2e 	bgeu	r4,r6,1000e290 <__gedf2+0x54>
1000e328:	003ff506 	br	1000e300 <__gedf2+0xc4>

1000e32c <__ledf2>:
1000e32c:	2810d53a 	srli	r8,r5,20
1000e330:	3812d53a 	srli	r9,r7,20
1000e334:	00800434 	movhi	r2,16
1000e338:	4201ffcc 	andi	r8,r8,2047
1000e33c:	10bfffc4 	addi	r2,r2,-1
1000e340:	4281ffd8 	cmpnei	r10,r8,2047
1000e344:	2896703a 	and	r11,r5,r2
1000e348:	3886703a 	and	r3,r7,r2
1000e34c:	280ad7fa 	srli	r5,r5,31
1000e350:	4a41ffcc 	andi	r9,r9,2047
1000e354:	3804d7fa 	srli	r2,r7,31
1000e358:	50000b26 	beq	r10,zero,1000e388 <__ledf2+0x5c>
1000e35c:	49c1ffd8 	cmpnei	r7,r9,2047
1000e360:	38000d26 	beq	r7,zero,1000e398 <__ledf2+0x6c>
1000e364:	40001b1e 	bne	r8,zero,1000e3d4 <__ledf2+0xa8>
1000e368:	5914b03a 	or	r10,r11,r4
1000e36c:	500f003a 	cmpeq	r7,r10,zero
1000e370:	48000e1e 	bne	r9,zero,1000e3ac <__ledf2+0x80>
1000e374:	1998b03a 	or	r12,r3,r6
1000e378:	60000c1e 	bne	r12,zero,1000e3ac <__ledf2+0x80>
1000e37c:	50000d1e 	bne	r10,zero,1000e3b4 <__ledf2+0x88>
1000e380:	0005883a 	mov	r2,zero
1000e384:	f800283a 	ret
1000e388:	590eb03a 	or	r7,r11,r4
1000e38c:	38000d1e 	bne	r7,zero,1000e3c4 <__ledf2+0x98>
1000e390:	49c1ffe0 	cmpeqi	r7,r9,2047
1000e394:	38000f26 	beq	r7,zero,1000e3d4 <__ledf2+0xa8>
1000e398:	198eb03a 	or	r7,r3,r6
1000e39c:	3800091e 	bne	r7,zero,1000e3c4 <__ledf2+0x98>
1000e3a0:	4000031e 	bne	r8,zero,1000e3b0 <__ledf2+0x84>
1000e3a4:	590eb03a 	or	r7,r11,r4
1000e3a8:	380f003a 	cmpeq	r7,r7,zero
1000e3ac:	3800071e 	bne	r7,zero,1000e3cc <__ledf2+0xa0>
1000e3b0:	28800c26 	beq	r5,r2,1000e3e4 <__ledf2+0xb8>
1000e3b4:	00800044 	movi	r2,1
1000e3b8:	28000526 	beq	r5,zero,1000e3d0 <__ledf2+0xa4>
1000e3bc:	00bfffc4 	movi	r2,-1
1000e3c0:	f800283a 	ret
1000e3c4:	00800084 	movi	r2,2
1000e3c8:	f800283a 	ret
1000e3cc:	103ffb26 	beq	r2,zero,1000e3bc <__ledf2+0x90>
1000e3d0:	f800283a 	ret
1000e3d4:	483ff61e 	bne	r9,zero,1000e3b0 <__ledf2+0x84>
1000e3d8:	198eb03a 	or	r7,r3,r6
1000e3dc:	383ff41e 	bne	r7,zero,1000e3b0 <__ledf2+0x84>
1000e3e0:	003ff406 	br	1000e3b4 <__ledf2+0x88>
1000e3e4:	4a00030e 	bge	r9,r8,1000e3f4 <__ledf2+0xc8>
1000e3e8:	103ff41e 	bne	r2,zero,1000e3bc <__ledf2+0x90>
1000e3ec:	00800044 	movi	r2,1
1000e3f0:	f800283a 	ret
1000e3f4:	427ff516 	blt	r8,r9,1000e3cc <__ledf2+0xa0>
1000e3f8:	1affee36 	bltu	r3,r11,1000e3b4 <__ledf2+0x88>
1000e3fc:	58c00426 	beq	r11,r3,1000e410 <__ledf2+0xe4>
1000e400:	58ffdf2e 	bgeu	r11,r3,1000e380 <__ledf2+0x54>
1000e404:	283fed26 	beq	r5,zero,1000e3bc <__ledf2+0x90>
1000e408:	2805883a 	mov	r2,r5
1000e40c:	f800283a 	ret
1000e410:	313fe836 	bltu	r6,r4,1000e3b4 <__ledf2+0x88>
1000e414:	21bfda2e 	bgeu	r4,r6,1000e380 <__ledf2+0x54>
1000e418:	003ffa06 	br	1000e404 <__ledf2+0xd8>

1000e41c <__muldf3>:
1000e41c:	2806d53a 	srli	r3,r5,20
1000e420:	defff504 	addi	sp,sp,-44
1000e424:	dc000215 	stw	r16,8(sp)
1000e428:	04000434 	movhi	r16,16
1000e42c:	dd000615 	stw	r20,24(sp)
1000e430:	dc800415 	stw	r18,16(sp)
1000e434:	843fffc4 	addi	r16,r16,-1
1000e438:	dfc00a15 	stw	ra,40(sp)
1000e43c:	ddc00915 	stw	r23,36(sp)
1000e440:	dd800815 	stw	r22,32(sp)
1000e444:	dd400715 	stw	r21,28(sp)
1000e448:	dcc00515 	stw	r19,20(sp)
1000e44c:	dc400315 	stw	r17,12(sp)
1000e450:	18c1ffcc 	andi	r3,r3,2047
1000e454:	2025883a 	mov	r18,r4
1000e458:	2c20703a 	and	r16,r5,r16
1000e45c:	2828d7fa 	srli	r20,r5,31
1000e460:	18005c26 	beq	r3,zero,1000e5d4 <__muldf3+0x1b8>
1000e464:	1881ffe0 	cmpeqi	r2,r3,2047
1000e468:	1000711e 	bne	r2,zero,1000e630 <__muldf3+0x214>
1000e46c:	800490fa 	slli	r2,r16,3
1000e470:	2020d77a 	srli	r16,r4,29
1000e474:	202290fa 	slli	r17,r4,3
1000e478:	1cff0044 	addi	r19,r3,-1023
1000e47c:	80a0b03a 	or	r16,r16,r2
1000e480:	84002034 	orhi	r16,r16,128
1000e484:	002d883a 	mov	r22,zero
1000e488:	002f883a 	mov	r23,zero
1000e48c:	3806d53a 	srli	r3,r7,20
1000e490:	01000434 	movhi	r4,16
1000e494:	213fffc4 	addi	r4,r4,-1
1000e498:	18c1ffcc 	andi	r3,r3,2047
1000e49c:	3924703a 	and	r18,r7,r4
1000e4a0:	382ad7fa 	srli	r21,r7,31
1000e4a4:	18006926 	beq	r3,zero,1000e64c <__muldf3+0x230>
1000e4a8:	1881ffe0 	cmpeqi	r2,r3,2047
1000e4ac:	1000211e 	bne	r2,zero,1000e534 <__muldf3+0x118>
1000e4b0:	900890fa 	slli	r4,r18,3
1000e4b4:	300ad77a 	srli	r5,r6,29
1000e4b8:	301090fa 	slli	r8,r6,3
1000e4bc:	18ff0044 	addi	r3,r3,-1023
1000e4c0:	2908b03a 	or	r4,r5,r4
1000e4c4:	98e7883a 	add	r19,r19,r3
1000e4c8:	24802034 	orhi	r18,r4,128
1000e4cc:	0007883a 	mov	r3,zero
1000e4d0:	b1000428 	cmpgeui	r4,r22,16
1000e4d4:	a54cf03a 	xor	r6,r20,r21
1000e4d8:	99400044 	addi	r5,r19,1
1000e4dc:	2000981e 	bne	r4,zero,1000e740 <__muldf3+0x324>
1000e4e0:	b00890ba 	slli	r4,r22,2
1000e4e4:	00840074 	movhi	r2,4097
1000e4e8:	2085883a 	add	r2,r4,r2
1000e4ec:	10b93d17 	ldw	r2,-6924(r2)
1000e4f0:	1000683a 	jmp	r2
1000e4f4:	1000e740 	call	11000e74 <_gp+0xfe3ef8>
1000e4f8:	1000e554 	ori	zero,r2,917
1000e4fc:	1000e554 	ori	zero,r2,917
1000e500:	1000e550 	cmplti	zero,r2,917
1000e504:	1000e560 	cmpeqi	zero,r2,917
1000e508:	1000e560 	cmpeqi	zero,r2,917
1000e50c:	1000e6fc 	xorhi	zero,r2,923
1000e510:	1000e550 	cmplti	zero,r2,917
1000e514:	1000e560 	cmpeqi	zero,r2,917
1000e518:	1000e6fc 	xorhi	zero,r2,923
1000e51c:	1000e560 	cmpeqi	zero,r2,917
1000e520:	1000e550 	cmplti	zero,r2,917
1000e524:	1000e6f4 	orhi	zero,r2,923
1000e528:	1000e6f4 	orhi	zero,r2,923
1000e52c:	1000e6f4 	orhi	zero,r2,923
1000e530:	1000e714 	ori	zero,r2,924
1000e534:	3490b03a 	or	r8,r6,r18
1000e538:	9cc1ffc4 	addi	r19,r19,2047
1000e53c:	4000691e 	bne	r8,zero,1000e6e4 <__muldf3+0x2c8>
1000e540:	b5800094 	ori	r22,r22,2
1000e544:	0025883a 	mov	r18,zero
1000e548:	00c00084 	movi	r3,2
1000e54c:	003fe006 	br	1000e4d0 <__muldf3+0xb4>
1000e550:	a80d883a 	mov	r6,r21
1000e554:	9021883a 	mov	r16,r18
1000e558:	4023883a 	mov	r17,r8
1000e55c:	182f883a 	mov	r23,r3
1000e560:	b88000a0 	cmpeqi	r2,r23,2
1000e564:	10004d1e 	bne	r2,zero,1000e69c <__muldf3+0x280>
1000e568:	b88000e0 	cmpeqi	r2,r23,3
1000e56c:	1001491e 	bne	r2,zero,1000ea94 <__muldf3+0x678>
1000e570:	b8800060 	cmpeqi	r2,r23,1
1000e574:	1000d826 	beq	r2,zero,1000e8d8 <__muldf3+0x4bc>
1000e578:	0007883a 	mov	r3,zero
1000e57c:	0021883a 	mov	r16,zero
1000e580:	0023883a 	mov	r17,zero
1000e584:	30803fcc 	andi	r2,r6,255
1000e588:	01000434 	movhi	r4,16
1000e58c:	1806953a 	slli	r3,r3,20
1000e590:	213fffc4 	addi	r4,r4,-1
1000e594:	100497fa 	slli	r2,r2,31
1000e598:	8120703a 	and	r16,r16,r4
1000e59c:	80c6b03a 	or	r3,r16,r3
1000e5a0:	1886b03a 	or	r3,r3,r2
1000e5a4:	8805883a 	mov	r2,r17
1000e5a8:	dfc00a17 	ldw	ra,40(sp)
1000e5ac:	ddc00917 	ldw	r23,36(sp)
1000e5b0:	dd800817 	ldw	r22,32(sp)
1000e5b4:	dd400717 	ldw	r21,28(sp)
1000e5b8:	dd000617 	ldw	r20,24(sp)
1000e5bc:	dcc00517 	ldw	r19,20(sp)
1000e5c0:	dc800417 	ldw	r18,16(sp)
1000e5c4:	dc400317 	ldw	r17,12(sp)
1000e5c8:	dc000217 	ldw	r16,8(sp)
1000e5cc:	dec00b04 	addi	sp,sp,44
1000e5d0:	f800283a 	ret
1000e5d4:	8122b03a 	or	r17,r16,r4
1000e5d8:	88003d26 	beq	r17,zero,1000e6d0 <__muldf3+0x2b4>
1000e5dc:	d9c00115 	stw	r7,4(sp)
1000e5e0:	d9800015 	stw	r6,0(sp)
1000e5e4:	8000e826 	beq	r16,zero,1000e988 <__muldf3+0x56c>
1000e5e8:	8009883a 	mov	r4,r16
1000e5ec:	000f64c0 	call	1000f64c <__clzsi2>
1000e5f0:	d9800017 	ldw	r6,0(sp)
1000e5f4:	d9c00117 	ldw	r7,4(sp)
1000e5f8:	1007883a 	mov	r3,r2
1000e5fc:	117ffd44 	addi	r5,r2,-11
1000e600:	01000744 	movi	r4,29
1000e604:	1c7ffe04 	addi	r17,r3,-8
1000e608:	2149c83a 	sub	r4,r4,r5
1000e60c:	8460983a 	sll	r16,r16,r17
1000e610:	9108d83a 	srl	r4,r18,r4
1000e614:	9462983a 	sll	r17,r18,r17
1000e618:	2420b03a 	or	r16,r4,r16
1000e61c:	04ff0344 	movi	r19,-1011
1000e620:	98e7c83a 	sub	r19,r19,r3
1000e624:	002d883a 	mov	r22,zero
1000e628:	002f883a 	mov	r23,zero
1000e62c:	003f9706 	br	1000e48c <__muldf3+0x70>
1000e630:	8122b03a 	or	r17,r16,r4
1000e634:	8800211e 	bne	r17,zero,1000e6bc <__muldf3+0x2a0>
1000e638:	0021883a 	mov	r16,zero
1000e63c:	05800204 	movi	r22,8
1000e640:	04c1ffc4 	movi	r19,2047
1000e644:	05c00084 	movi	r23,2
1000e648:	003f9006 	br	1000e48c <__muldf3+0x70>
1000e64c:	3490b03a 	or	r8,r6,r18
1000e650:	40001626 	beq	r8,zero,1000e6ac <__muldf3+0x290>
1000e654:	9000c026 	beq	r18,zero,1000e958 <__muldf3+0x53c>
1000e658:	9009883a 	mov	r4,r18
1000e65c:	d9800015 	stw	r6,0(sp)
1000e660:	000f64c0 	call	1000f64c <__clzsi2>
1000e664:	d9800017 	ldw	r6,0(sp)
1000e668:	1007883a 	mov	r3,r2
1000e66c:	113ffd44 	addi	r4,r2,-11
1000e670:	01400744 	movi	r5,29
1000e674:	1a3ffe04 	addi	r8,r3,-8
1000e678:	290bc83a 	sub	r5,r5,r4
1000e67c:	314ad83a 	srl	r5,r6,r5
1000e680:	9208983a 	sll	r4,r18,r8
1000e684:	3210983a 	sll	r8,r6,r8
1000e688:	2924b03a 	or	r18,r5,r4
1000e68c:	98c7c83a 	sub	r3,r19,r3
1000e690:	1cff0344 	addi	r19,r3,-1011
1000e694:	0007883a 	mov	r3,zero
1000e698:	003f8d06 	br	1000e4d0 <__muldf3+0xb4>
1000e69c:	00c1ffc4 	movi	r3,2047
1000e6a0:	0021883a 	mov	r16,zero
1000e6a4:	0023883a 	mov	r17,zero
1000e6a8:	003fb606 	br	1000e584 <__muldf3+0x168>
1000e6ac:	b5800054 	ori	r22,r22,1
1000e6b0:	0025883a 	mov	r18,zero
1000e6b4:	00c00044 	movi	r3,1
1000e6b8:	003f8506 	br	1000e4d0 <__muldf3+0xb4>
1000e6bc:	2023883a 	mov	r17,r4
1000e6c0:	05800304 	movi	r22,12
1000e6c4:	04c1ffc4 	movi	r19,2047
1000e6c8:	05c000c4 	movi	r23,3
1000e6cc:	003f6f06 	br	1000e48c <__muldf3+0x70>
1000e6d0:	0021883a 	mov	r16,zero
1000e6d4:	05800104 	movi	r22,4
1000e6d8:	0027883a 	mov	r19,zero
1000e6dc:	05c00044 	movi	r23,1
1000e6e0:	003f6a06 	br	1000e48c <__muldf3+0x70>
1000e6e4:	b58000d4 	ori	r22,r22,3
1000e6e8:	3011883a 	mov	r8,r6
1000e6ec:	00c000c4 	movi	r3,3
1000e6f0:	003f7706 	br	1000e4d0 <__muldf3+0xb4>
1000e6f4:	a00d883a 	mov	r6,r20
1000e6f8:	003f9906 	br	1000e560 <__muldf3+0x144>
1000e6fc:	04000434 	movhi	r16,16
1000e700:	000d883a 	mov	r6,zero
1000e704:	843fffc4 	addi	r16,r16,-1
1000e708:	047fffc4 	movi	r17,-1
1000e70c:	00c1ffc4 	movi	r3,2047
1000e710:	003f9c06 	br	1000e584 <__muldf3+0x168>
1000e714:	8080022c 	andhi	r2,r16,8
1000e718:	10008926 	beq	r2,zero,1000e940 <__muldf3+0x524>
1000e71c:	9080022c 	andhi	r2,r18,8
1000e720:	1000871e 	bne	r2,zero,1000e940 <__muldf3+0x524>
1000e724:	00800434 	movhi	r2,16
1000e728:	94000234 	orhi	r16,r18,8
1000e72c:	10bfffc4 	addi	r2,r2,-1
1000e730:	80a0703a 	and	r16,r16,r2
1000e734:	a80d883a 	mov	r6,r21
1000e738:	4023883a 	mov	r17,r8
1000e73c:	003ff306 	br	1000e70c <__muldf3+0x2f0>
1000e740:	8818d43a 	srli	r12,r17,16
1000e744:	4028d43a 	srli	r20,r8,16
1000e748:	42ffffcc 	andi	r11,r8,65535
1000e74c:	8c7fffcc 	andi	r17,r17,65535
1000e750:	5c47383a 	mul	r3,r11,r17
1000e754:	62c9383a 	mul	r4,r12,r11
1000e758:	a445383a 	mul	r2,r20,r17
1000e75c:	1810d43a 	srli	r8,r3,16
1000e760:	651d383a 	mul	r14,r12,r20
1000e764:	1105883a 	add	r2,r2,r4
1000e768:	4091883a 	add	r8,r8,r2
1000e76c:	4100022e 	bgeu	r8,r4,1000e778 <__muldf3+0x35c>
1000e770:	00800074 	movhi	r2,1
1000e774:	709d883a 	add	r14,r14,r2
1000e778:	901ed43a 	srli	r15,r18,16
1000e77c:	94bfffcc 	andi	r18,r18,65535
1000e780:	9449383a 	mul	r4,r18,r17
1000e784:	648f383a 	mul	r7,r12,r18
1000e788:	7c63383a 	mul	r17,r15,r17
1000e78c:	201ad43a 	srli	r13,r4,16
1000e790:	4014943a 	slli	r10,r8,16
1000e794:	89e3883a 	add	r17,r17,r7
1000e798:	1a7fffcc 	andi	r9,r3,65535
1000e79c:	6c5b883a 	add	r13,r13,r17
1000e7a0:	4006d43a 	srli	r3,r8,16
1000e7a4:	5253883a 	add	r9,r10,r9
1000e7a8:	63c5383a 	mul	r2,r12,r15
1000e7ac:	69c0022e 	bgeu	r13,r7,1000e7b8 <__muldf3+0x39c>
1000e7b0:	01c00074 	movhi	r7,1
1000e7b4:	11c5883a 	add	r2,r2,r7
1000e7b8:	802ad43a 	srli	r21,r16,16
1000e7bc:	823fffcc 	andi	r8,r16,65535
1000e7c0:	5a2d383a 	mul	r22,r11,r8
1000e7c4:	a20f383a 	mul	r7,r20,r8
1000e7c8:	aad7383a 	mul	r11,r21,r11
1000e7cc:	6814943a 	slli	r10,r13,16
1000e7d0:	b018d43a 	srli	r12,r22,16
1000e7d4:	6822d43a 	srli	r17,r13,16
1000e7d8:	213fffcc 	andi	r4,r4,65535
1000e7dc:	3acf883a 	add	r7,r7,r11
1000e7e0:	5115883a 	add	r10,r10,r4
1000e7e4:	61cf883a 	add	r7,r12,r7
1000e7e8:	889b883a 	add	r13,r17,r2
1000e7ec:	1a87883a 	add	r3,r3,r10
1000e7f0:	a569383a 	mul	r20,r20,r21
1000e7f4:	3ac0022e 	bgeu	r7,r11,1000e800 <__muldf3+0x3e4>
1000e7f8:	00800074 	movhi	r2,1
1000e7fc:	a0a9883a 	add	r20,r20,r2
1000e800:	9217383a 	mul	r11,r18,r8
1000e804:	aca5383a 	mul	r18,r21,r18
1000e808:	7a11383a 	mul	r8,r15,r8
1000e80c:	5820d43a 	srli	r16,r11,16
1000e810:	3808d43a 	srli	r4,r7,16
1000e814:	380e943a 	slli	r7,r7,16
1000e818:	4491883a 	add	r8,r8,r18
1000e81c:	b5bfffcc 	andi	r22,r22,65535
1000e820:	8211883a 	add	r8,r16,r8
1000e824:	2529883a 	add	r20,r4,r20
1000e828:	3d8f883a 	add	r7,r7,r22
1000e82c:	7d59383a 	mul	r12,r15,r21
1000e830:	4480022e 	bgeu	r8,r18,1000e83c <__muldf3+0x420>
1000e834:	00800074 	movhi	r2,1
1000e838:	6099883a 	add	r12,r12,r2
1000e83c:	4004943a 	slli	r2,r8,16
1000e840:	5affffcc 	andi	r11,r11,65535
1000e844:	1b87883a 	add	r3,r3,r14
1000e848:	12c5883a 	add	r2,r2,r11
1000e84c:	1a95803a 	cmpltu	r10,r3,r10
1000e850:	1345883a 	add	r2,r2,r13
1000e854:	19c7883a 	add	r3,r3,r7
1000e858:	129d883a 	add	r14,r2,r10
1000e85c:	19cf803a 	cmpltu	r7,r3,r7
1000e860:	7509883a 	add	r4,r14,r20
1000e864:	4010d43a 	srli	r8,r8,16
1000e868:	21d7883a 	add	r11,r4,r7
1000e86c:	1345803a 	cmpltu	r2,r2,r13
1000e870:	72a1803a 	cmpltu	r16,r14,r10
1000e874:	1420b03a 	or	r16,r2,r16
1000e878:	2509803a 	cmpltu	r4,r4,r20
1000e87c:	59cf803a 	cmpltu	r7,r11,r7
1000e880:	21ceb03a 	or	r7,r4,r7
1000e884:	8221883a 	add	r16,r16,r8
1000e888:	81e1883a 	add	r16,r16,r7
1000e88c:	1822927a 	slli	r17,r3,9
1000e890:	8321883a 	add	r16,r16,r12
1000e894:	8020927a 	slli	r16,r16,9
1000e898:	5808d5fa 	srli	r4,r11,23
1000e89c:	1806d5fa 	srli	r3,r3,23
1000e8a0:	8a62b03a 	or	r17,r17,r9
1000e8a4:	5804927a 	slli	r2,r11,9
1000e8a8:	8120b03a 	or	r16,r16,r4
1000e8ac:	8822c03a 	cmpne	r17,r17,zero
1000e8b0:	88e2b03a 	or	r17,r17,r3
1000e8b4:	80c0402c 	andhi	r3,r16,256
1000e8b8:	88a2b03a 	or	r17,r17,r2
1000e8bc:	18005a26 	beq	r3,zero,1000ea28 <__muldf3+0x60c>
1000e8c0:	8804d07a 	srli	r2,r17,1
1000e8c4:	800697fa 	slli	r3,r16,31
1000e8c8:	8c40004c 	andi	r17,r17,1
1000e8cc:	8020d07a 	srli	r16,r16,1
1000e8d0:	1462b03a 	or	r17,r2,r17
1000e8d4:	88e2b03a 	or	r17,r17,r3
1000e8d8:	28c0ffc4 	addi	r3,r5,1023
1000e8dc:	00c0350e 	bge	zero,r3,1000e9b4 <__muldf3+0x598>
1000e8e0:	888001cc 	andi	r2,r17,7
1000e8e4:	10000726 	beq	r2,zero,1000e904 <__muldf3+0x4e8>
1000e8e8:	888003cc 	andi	r2,r17,15
1000e8ec:	10800120 	cmpeqi	r2,r2,4
1000e8f0:	1000041e 	bne	r2,zero,1000e904 <__muldf3+0x4e8>
1000e8f4:	88800104 	addi	r2,r17,4
1000e8f8:	1463803a 	cmpltu	r17,r2,r17
1000e8fc:	8461883a 	add	r16,r16,r17
1000e900:	1023883a 	mov	r17,r2
1000e904:	8080402c 	andhi	r2,r16,256
1000e908:	10000426 	beq	r2,zero,1000e91c <__muldf3+0x500>
1000e90c:	00bfc034 	movhi	r2,65280
1000e910:	10bfffc4 	addi	r2,r2,-1
1000e914:	80a0703a 	and	r16,r16,r2
1000e918:	28c10004 	addi	r3,r5,1024
1000e91c:	1881ffc8 	cmpgei	r2,r3,2047
1000e920:	103f5e1e 	bne	r2,zero,1000e69c <__muldf3+0x280>
1000e924:	8004977a 	slli	r2,r16,29
1000e928:	8822d0fa 	srli	r17,r17,3
1000e92c:	8020927a 	slli	r16,r16,9
1000e930:	18c1ffcc 	andi	r3,r3,2047
1000e934:	1462b03a 	or	r17,r2,r17
1000e938:	8020d33a 	srli	r16,r16,12
1000e93c:	003f1106 	br	1000e584 <__muldf3+0x168>
1000e940:	00800434 	movhi	r2,16
1000e944:	84000234 	orhi	r16,r16,8
1000e948:	10bfffc4 	addi	r2,r2,-1
1000e94c:	80a0703a 	and	r16,r16,r2
1000e950:	a00d883a 	mov	r6,r20
1000e954:	003f6d06 	br	1000e70c <__muldf3+0x2f0>
1000e958:	3009883a 	mov	r4,r6
1000e95c:	d9800015 	stw	r6,0(sp)
1000e960:	000f64c0 	call	1000f64c <__clzsi2>
1000e964:	11000544 	addi	r4,r2,21
1000e968:	21400748 	cmpgei	r5,r4,29
1000e96c:	10c00804 	addi	r3,r2,32
1000e970:	d9800017 	ldw	r6,0(sp)
1000e974:	283f3e26 	beq	r5,zero,1000e670 <__muldf3+0x254>
1000e978:	10bffe04 	addi	r2,r2,-8
1000e97c:	30a4983a 	sll	r18,r6,r2
1000e980:	0011883a 	mov	r8,zero
1000e984:	003f4106 	br	1000e68c <__muldf3+0x270>
1000e988:	000f64c0 	call	1000f64c <__clzsi2>
1000e98c:	11400544 	addi	r5,r2,21
1000e990:	29000748 	cmpgei	r4,r5,29
1000e994:	10c00804 	addi	r3,r2,32
1000e998:	d9800017 	ldw	r6,0(sp)
1000e99c:	d9c00117 	ldw	r7,4(sp)
1000e9a0:	203f1726 	beq	r4,zero,1000e600 <__muldf3+0x1e4>
1000e9a4:	10bffe04 	addi	r2,r2,-8
1000e9a8:	90a0983a 	sll	r16,r18,r2
1000e9ac:	0023883a 	mov	r17,zero
1000e9b0:	003f1a06 	br	1000e61c <__muldf3+0x200>
1000e9b4:	00800044 	movi	r2,1
1000e9b8:	10c5c83a 	sub	r2,r2,r3
1000e9bc:	11000e48 	cmpgei	r4,r2,57
1000e9c0:	203eed1e 	bne	r4,zero,1000e578 <__muldf3+0x15c>
1000e9c4:	11000808 	cmpgei	r4,r2,32
1000e9c8:	2000191e 	bne	r4,zero,1000ea30 <__muldf3+0x614>
1000e9cc:	29410784 	addi	r5,r5,1054
1000e9d0:	8146983a 	sll	r3,r16,r5
1000e9d4:	8888d83a 	srl	r4,r17,r2
1000e9d8:	894a983a 	sll	r5,r17,r5
1000e9dc:	80a0d83a 	srl	r16,r16,r2
1000e9e0:	1904b03a 	or	r2,r3,r4
1000e9e4:	2822c03a 	cmpne	r17,r5,zero
1000e9e8:	1444b03a 	or	r2,r2,r17
1000e9ec:	10c001cc 	andi	r3,r2,7
1000e9f0:	18000726 	beq	r3,zero,1000ea10 <__muldf3+0x5f4>
1000e9f4:	10c003cc 	andi	r3,r2,15
1000e9f8:	18c00120 	cmpeqi	r3,r3,4
1000e9fc:	1800041e 	bne	r3,zero,1000ea10 <__muldf3+0x5f4>
1000ea00:	10c00104 	addi	r3,r2,4
1000ea04:	1885803a 	cmpltu	r2,r3,r2
1000ea08:	80a1883a 	add	r16,r16,r2
1000ea0c:	1805883a 	mov	r2,r3
1000ea10:	80c0202c 	andhi	r3,r16,128
1000ea14:	18001b26 	beq	r3,zero,1000ea84 <__muldf3+0x668>
1000ea18:	00c00044 	movi	r3,1
1000ea1c:	0021883a 	mov	r16,zero
1000ea20:	0023883a 	mov	r17,zero
1000ea24:	003ed706 	br	1000e584 <__muldf3+0x168>
1000ea28:	980b883a 	mov	r5,r19
1000ea2c:	003faa06 	br	1000e8d8 <__muldf3+0x4bc>
1000ea30:	013ff844 	movi	r4,-31
1000ea34:	20c7c83a 	sub	r3,r4,r3
1000ea38:	10800820 	cmpeqi	r2,r2,32
1000ea3c:	80c6d83a 	srl	r3,r16,r3
1000ea40:	1000031e 	bne	r2,zero,1000ea50 <__muldf3+0x634>
1000ea44:	28810f84 	addi	r2,r5,1086
1000ea48:	8084983a 	sll	r2,r16,r2
1000ea4c:	88a2b03a 	or	r17,r17,r2
1000ea50:	8822c03a 	cmpne	r17,r17,zero
1000ea54:	88c4b03a 	or	r2,r17,r3
1000ea58:	144001cc 	andi	r17,r2,7
1000ea5c:	8800051e 	bne	r17,zero,1000ea74 <__muldf3+0x658>
1000ea60:	0021883a 	mov	r16,zero
1000ea64:	1004d0fa 	srli	r2,r2,3
1000ea68:	0007883a 	mov	r3,zero
1000ea6c:	1462b03a 	or	r17,r2,r17
1000ea70:	003ec406 	br	1000e584 <__muldf3+0x168>
1000ea74:	10c003cc 	andi	r3,r2,15
1000ea78:	18c00118 	cmpnei	r3,r3,4
1000ea7c:	0021883a 	mov	r16,zero
1000ea80:	183fdf1e 	bne	r3,zero,1000ea00 <__muldf3+0x5e4>
1000ea84:	8006927a 	slli	r3,r16,9
1000ea88:	8022977a 	slli	r17,r16,29
1000ea8c:	1820d33a 	srli	r16,r3,12
1000ea90:	003ff406 	br	1000ea64 <__muldf3+0x648>
1000ea94:	00800434 	movhi	r2,16
1000ea98:	84000234 	orhi	r16,r16,8
1000ea9c:	10bfffc4 	addi	r2,r2,-1
1000eaa0:	80a0703a 	and	r16,r16,r2
1000eaa4:	003f1906 	br	1000e70c <__muldf3+0x2f0>

1000eaa8 <__subdf3>:
1000eaa8:	00800434 	movhi	r2,16
1000eaac:	3812d53a 	srli	r9,r7,20
1000eab0:	10bfffc4 	addi	r2,r2,-1
1000eab4:	defffb04 	addi	sp,sp,-20
1000eab8:	2890703a 	and	r8,r5,r2
1000eabc:	3884703a 	and	r2,r7,r2
1000eac0:	2806d7fa 	srli	r3,r5,31
1000eac4:	dcc00315 	stw	r19,12(sp)
1000eac8:	dc400115 	stw	r17,4(sp)
1000eacc:	280ad53a 	srli	r5,r5,20
1000ead0:	401090fa 	slli	r8,r8,3
1000ead4:	2026d77a 	srli	r19,r4,29
1000ead8:	100490fa 	slli	r2,r2,3
1000eadc:	3022d77a 	srli	r17,r6,29
1000eae0:	4a81ffcc 	andi	r10,r9,2047
1000eae4:	dc800215 	stw	r18,8(sp)
1000eae8:	dc000015 	stw	r16,0(sp)
1000eaec:	dfc00415 	stw	ra,16(sp)
1000eaf0:	5241ffe0 	cmpeqi	r9,r10,2047
1000eaf4:	1825883a 	mov	r18,r3
1000eaf8:	2c01ffcc 	andi	r16,r5,2047
1000eafc:	18c03fcc 	andi	r3,r3,255
1000eb00:	9a18b03a 	or	r12,r19,r8
1000eb04:	201a90fa 	slli	r13,r4,3
1000eb08:	380ed7fa 	srli	r7,r7,31
1000eb0c:	8896b03a 	or	r11,r17,r2
1000eb10:	301c90fa 	slli	r14,r6,3
1000eb14:	4800711e 	bne	r9,zero,1000ecdc <__subdf3+0x234>
1000eb18:	39c0005c 	xori	r7,r7,1
1000eb1c:	8291c83a 	sub	r8,r16,r10
1000eb20:	19c05a26 	beq	r3,r7,1000ec8c <__subdf3+0x1e4>
1000eb24:	0200720e 	bge	zero,r8,1000ecf0 <__subdf3+0x248>
1000eb28:	50008126 	beq	r10,zero,1000ed30 <__subdf3+0x288>
1000eb2c:	8081ffd8 	cmpnei	r2,r16,2047
1000eb30:	10011626 	beq	r2,zero,1000ef8c <__subdf3+0x4e4>
1000eb34:	5ac02034 	orhi	r11,r11,128
1000eb38:	40800e48 	cmpgei	r2,r8,57
1000eb3c:	1000fe1e 	bne	r2,zero,1000ef38 <__subdf3+0x490>
1000eb40:	40800808 	cmpgei	r2,r8,32
1000eb44:	10015e1e 	bne	r2,zero,1000f0c0 <__subdf3+0x618>
1000eb48:	00800804 	movi	r2,32
1000eb4c:	1205c83a 	sub	r2,r2,r8
1000eb50:	58a2983a 	sll	r17,r11,r2
1000eb54:	7206d83a 	srl	r3,r14,r8
1000eb58:	709c983a 	sll	r14,r14,r2
1000eb5c:	5a04d83a 	srl	r2,r11,r8
1000eb60:	88e2b03a 	or	r17,r17,r3
1000eb64:	701cc03a 	cmpne	r14,r14,zero
1000eb68:	8ba2b03a 	or	r17,r17,r14
1000eb6c:	6099c83a 	sub	r12,r12,r2
1000eb70:	6c63c83a 	sub	r17,r13,r17
1000eb74:	6c49803a 	cmpltu	r4,r13,r17
1000eb78:	6109c83a 	sub	r4,r12,r4
1000eb7c:	2080202c 	andhi	r2,r4,128
1000eb80:	10009f26 	beq	r2,zero,1000ee00 <__subdf3+0x358>
1000eb84:	04c02034 	movhi	r19,128
1000eb88:	9cffffc4 	addi	r19,r19,-1
1000eb8c:	24e6703a 	and	r19,r4,r19
1000eb90:	9800e026 	beq	r19,zero,1000ef14 <__subdf3+0x46c>
1000eb94:	9809883a 	mov	r4,r19
1000eb98:	000f64c0 	call	1000f64c <__clzsi2>
1000eb9c:	123ffe04 	addi	r8,r2,-8
1000eba0:	01000804 	movi	r4,32
1000eba4:	2209c83a 	sub	r4,r4,r8
1000eba8:	8906d83a 	srl	r3,r17,r4
1000ebac:	9a08983a 	sll	r4,r19,r8
1000ebb0:	8a22983a 	sll	r17,r17,r8
1000ebb4:	1908b03a 	or	r4,r3,r4
1000ebb8:	4400cf16 	blt	r8,r16,1000eef8 <__subdf3+0x450>
1000ebbc:	4411c83a 	sub	r8,r8,r16
1000ebc0:	40800044 	addi	r2,r8,1
1000ebc4:	10c00808 	cmpgei	r3,r2,32
1000ebc8:	1801251e 	bne	r3,zero,1000f060 <__subdf3+0x5b8>
1000ebcc:	00c00804 	movi	r3,32
1000ebd0:	1887c83a 	sub	r3,r3,r2
1000ebd4:	888ad83a 	srl	r5,r17,r2
1000ebd8:	88e2983a 	sll	r17,r17,r3
1000ebdc:	20c6983a 	sll	r3,r4,r3
1000ebe0:	2088d83a 	srl	r4,r4,r2
1000ebe4:	8822c03a 	cmpne	r17,r17,zero
1000ebe8:	1946b03a 	or	r3,r3,r5
1000ebec:	1c62b03a 	or	r17,r3,r17
1000ebf0:	0021883a 	mov	r16,zero
1000ebf4:	888001cc 	andi	r2,r17,7
1000ebf8:	10000726 	beq	r2,zero,1000ec18 <__subdf3+0x170>
1000ebfc:	888003cc 	andi	r2,r17,15
1000ec00:	10800120 	cmpeqi	r2,r2,4
1000ec04:	1000041e 	bne	r2,zero,1000ec18 <__subdf3+0x170>
1000ec08:	88c00104 	addi	r3,r17,4
1000ec0c:	1c63803a 	cmpltu	r17,r3,r17
1000ec10:	2449883a 	add	r4,r4,r17
1000ec14:	1823883a 	mov	r17,r3
1000ec18:	2080202c 	andhi	r2,r4,128
1000ec1c:	10007a26 	beq	r2,zero,1000ee08 <__subdf3+0x360>
1000ec20:	82000044 	addi	r8,r16,1
1000ec24:	4081ffe0 	cmpeqi	r2,r8,2047
1000ec28:	4201ffcc 	andi	r8,r8,2047
1000ec2c:	10008c1e 	bne	r2,zero,1000ee60 <__subdf3+0x3b8>
1000ec30:	00bfe034 	movhi	r2,65408
1000ec34:	10bfffc4 	addi	r2,r2,-1
1000ec38:	2084703a 	and	r2,r4,r2
1000ec3c:	1008927a 	slli	r4,r2,9
1000ec40:	8822d0fa 	srli	r17,r17,3
1000ec44:	100c977a 	slli	r6,r2,29
1000ec48:	2008d33a 	srli	r4,r4,12
1000ec4c:	3444b03a 	or	r2,r6,r17
1000ec50:	4010953a 	slli	r8,r8,20
1000ec54:	00c00434 	movhi	r3,16
1000ec58:	94803fcc 	andi	r18,r18,255
1000ec5c:	902497fa 	slli	r18,r18,31
1000ec60:	18ffffc4 	addi	r3,r3,-1
1000ec64:	20c6703a 	and	r3,r4,r3
1000ec68:	1a06b03a 	or	r3,r3,r8
1000ec6c:	1c86b03a 	or	r3,r3,r18
1000ec70:	dfc00417 	ldw	ra,16(sp)
1000ec74:	dcc00317 	ldw	r19,12(sp)
1000ec78:	dc800217 	ldw	r18,8(sp)
1000ec7c:	dc400117 	ldw	r17,4(sp)
1000ec80:	dc000017 	ldw	r16,0(sp)
1000ec84:	dec00504 	addi	sp,sp,20
1000ec88:	f800283a 	ret
1000ec8c:	0200320e 	bge	zero,r8,1000ed58 <__subdf3+0x2b0>
1000ec90:	50004c26 	beq	r10,zero,1000edc4 <__subdf3+0x31c>
1000ec94:	8081ffd8 	cmpnei	r2,r16,2047
1000ec98:	1000bc26 	beq	r2,zero,1000ef8c <__subdf3+0x4e4>
1000ec9c:	5ac02034 	orhi	r11,r11,128
1000eca0:	40800e48 	cmpgei	r2,r8,57
1000eca4:	1000641e 	bne	r2,zero,1000ee38 <__subdf3+0x390>
1000eca8:	40800808 	cmpgei	r2,r8,32
1000ecac:	10011726 	beq	r2,zero,1000f10c <__subdf3+0x664>
1000ecb0:	447ff804 	addi	r17,r8,-32
1000ecb4:	40800820 	cmpeqi	r2,r8,32
1000ecb8:	5c46d83a 	srl	r3,r11,r17
1000ecbc:	1000041e 	bne	r2,zero,1000ecd0 <__subdf3+0x228>
1000ecc0:	00801004 	movi	r2,64
1000ecc4:	1205c83a 	sub	r2,r2,r8
1000ecc8:	5884983a 	sll	r2,r11,r2
1000eccc:	709cb03a 	or	r14,r14,r2
1000ecd0:	7022c03a 	cmpne	r17,r14,zero
1000ecd4:	88e2b03a 	or	r17,r17,r3
1000ecd8:	00005906 	br	1000ee40 <__subdf3+0x398>
1000ecdc:	5b8ab03a 	or	r5,r11,r14
1000ece0:	823e0044 	addi	r8,r16,-2047
1000ece4:	28001a1e 	bne	r5,zero,1000ed50 <__subdf3+0x2a8>
1000ece8:	39c0005c 	xori	r7,r7,1
1000ecec:	19c01a26 	beq	r3,r7,1000ed58 <__subdf3+0x2b0>
1000ecf0:	4000291e 	bne	r8,zero,1000ed98 <__subdf3+0x2f0>
1000ecf4:	80800044 	addi	r2,r16,1
1000ecf8:	1081ff8c 	andi	r2,r2,2046
1000ecfc:	1000911e 	bne	r2,zero,1000ef44 <__subdf3+0x49c>
1000ed00:	6346b03a 	or	r3,r12,r13
1000ed04:	5b84b03a 	or	r2,r11,r14
1000ed08:	8001551e 	bne	r16,zero,1000f260 <__subdf3+0x7b8>
1000ed0c:	18011b26 	beq	r3,zero,1000f17c <__subdf3+0x6d4>
1000ed10:	1001641e 	bne	r2,zero,1000f2a4 <__subdf3+0x7fc>
1000ed14:	00880034 	movhi	r2,8192
1000ed18:	6022977a 	slli	r17,r12,29
1000ed1c:	10bfffc4 	addi	r2,r2,-1
1000ed20:	2088703a 	and	r4,r4,r2
1000ed24:	2444b03a 	or	r2,r4,r17
1000ed28:	6026d0fa 	srli	r19,r12,3
1000ed2c:	00003d06 	br	1000ee24 <__subdf3+0x37c>
1000ed30:	5b84b03a 	or	r2,r11,r14
1000ed34:	10008e26 	beq	r2,zero,1000ef70 <__subdf3+0x4c8>
1000ed38:	40bfffc4 	addi	r2,r8,-1
1000ed3c:	10011f26 	beq	r2,zero,1000f1bc <__subdf3+0x714>
1000ed40:	4201ffd8 	cmpnei	r8,r8,2047
1000ed44:	40012d26 	beq	r8,zero,1000f1fc <__subdf3+0x754>
1000ed48:	1011883a 	mov	r8,r2
1000ed4c:	003f7a06 	br	1000eb38 <__subdf3+0x90>
1000ed50:	39c03fcc 	andi	r7,r7,255
1000ed54:	19ffe61e 	bne	r3,r7,1000ecf0 <__subdf3+0x248>
1000ed58:	4000931e 	bne	r8,zero,1000efa8 <__subdf3+0x500>
1000ed5c:	80c00044 	addi	r3,r16,1
1000ed60:	1881ff8c 	andi	r2,r3,2046
1000ed64:	10012c1e 	bne	r2,zero,1000f218 <__subdf3+0x770>
1000ed68:	6344b03a 	or	r2,r12,r13
1000ed6c:	8000f91e 	bne	r16,zero,1000f154 <__subdf3+0x6ac>
1000ed70:	10017326 	beq	r2,zero,1000f340 <__subdf3+0x898>
1000ed74:	5b84b03a 	or	r2,r11,r14
1000ed78:	1001781e 	bne	r2,zero,1000f35c <__subdf3+0x8b4>
1000ed7c:	6004977a 	slli	r2,r12,29
1000ed80:	00c80034 	movhi	r3,8192
1000ed84:	18ffffc4 	addi	r3,r3,-1
1000ed88:	20c6703a 	and	r3,r4,r3
1000ed8c:	10c4b03a 	or	r2,r2,r3
1000ed90:	6026d0fa 	srli	r19,r12,3
1000ed94:	00002306 	br	1000ee24 <__subdf3+0x37c>
1000ed98:	5411c83a 	sub	r8,r10,r16
1000ed9c:	3825883a 	mov	r18,r7
1000eda0:	8000991e 	bne	r16,zero,1000f008 <__subdf3+0x560>
1000eda4:	6344b03a 	or	r2,r12,r13
1000eda8:	1000e326 	beq	r2,zero,1000f138 <__subdf3+0x690>
1000edac:	40bfffc4 	addi	r2,r8,-1
1000edb0:	10015d26 	beq	r2,zero,1000f328 <__subdf3+0x880>
1000edb4:	4201ffd8 	cmpnei	r8,r8,2047
1000edb8:	4000f926 	beq	r8,zero,1000f1a0 <__subdf3+0x6f8>
1000edbc:	1011883a 	mov	r8,r2
1000edc0:	00009406 	br	1000f014 <__subdf3+0x56c>
1000edc4:	5b84b03a 	or	r2,r11,r14
1000edc8:	10010226 	beq	r2,zero,1000f1d4 <__subdf3+0x72c>
1000edcc:	40bfffc4 	addi	r2,r8,-1
1000edd0:	10000426 	beq	r2,zero,1000ede4 <__subdf3+0x33c>
1000edd4:	4201ffd8 	cmpnei	r8,r8,2047
1000edd8:	40014126 	beq	r8,zero,1000f2e0 <__subdf3+0x838>
1000eddc:	1011883a 	mov	r8,r2
1000ede0:	003faf06 	br	1000eca0 <__subdf3+0x1f8>
1000ede4:	6ba3883a 	add	r17,r13,r14
1000ede8:	62c9883a 	add	r4,r12,r11
1000edec:	8b5b803a 	cmpltu	r13,r17,r13
1000edf0:	2349883a 	add	r4,r4,r13
1000edf4:	2080202c 	andhi	r2,r4,128
1000edf8:	1000a61e 	bne	r2,zero,1000f094 <__subdf3+0x5ec>
1000edfc:	04000044 	movi	r16,1
1000ee00:	888001cc 	andi	r2,r17,7
1000ee04:	103f7d1e 	bne	r2,zero,1000ebfc <__subdf3+0x154>
1000ee08:	8822d0fa 	srli	r17,r17,3
1000ee0c:	2004977a 	slli	r2,r4,29
1000ee10:	2026d0fa 	srli	r19,r4,3
1000ee14:	8011883a 	mov	r8,r16
1000ee18:	8884b03a 	or	r2,r17,r2
1000ee1c:	40c1ffe0 	cmpeqi	r3,r8,2047
1000ee20:	18002d1e 	bne	r3,zero,1000eed8 <__subdf3+0x430>
1000ee24:	01000434 	movhi	r4,16
1000ee28:	213fffc4 	addi	r4,r4,-1
1000ee2c:	9908703a 	and	r4,r19,r4
1000ee30:	4201ffcc 	andi	r8,r8,2047
1000ee34:	003f8606 	br	1000ec50 <__subdf3+0x1a8>
1000ee38:	5ba2b03a 	or	r17,r11,r14
1000ee3c:	8822c03a 	cmpne	r17,r17,zero
1000ee40:	8b63883a 	add	r17,r17,r13
1000ee44:	8b49803a 	cmpltu	r4,r17,r13
1000ee48:	2309883a 	add	r4,r4,r12
1000ee4c:	2080202c 	andhi	r2,r4,128
1000ee50:	103feb26 	beq	r2,zero,1000ee00 <__subdf3+0x358>
1000ee54:	84000044 	addi	r16,r16,1
1000ee58:	8081ffe0 	cmpeqi	r2,r16,2047
1000ee5c:	10008e26 	beq	r2,zero,1000f098 <__subdf3+0x5f0>
1000ee60:	0201ffc4 	movi	r8,2047
1000ee64:	0009883a 	mov	r4,zero
1000ee68:	0005883a 	mov	r2,zero
1000ee6c:	003f7806 	br	1000ec50 <__subdf3+0x1a8>
1000ee70:	6010977a 	slli	r8,r12,29
1000ee74:	6026d0fa 	srli	r19,r12,3
1000ee78:	1000bb26 	beq	r2,zero,1000f168 <__subdf3+0x6c0>
1000ee7c:	01480034 	movhi	r5,8192
1000ee80:	297fffc4 	addi	r5,r5,-1
1000ee84:	2146703a 	and	r3,r4,r5
1000ee88:	9880022c 	andhi	r2,r19,8
1000ee8c:	1a06b03a 	or	r3,r3,r8
1000ee90:	10000826 	beq	r2,zero,1000eeb4 <__subdf3+0x40c>
1000ee94:	5808d0fa 	srli	r4,r11,3
1000ee98:	2080022c 	andhi	r2,r4,8
1000ee9c:	1000051e 	bne	r2,zero,1000eeb4 <__subdf3+0x40c>
1000eea0:	5804977a 	slli	r2,r11,29
1000eea4:	3146703a 	and	r3,r6,r5
1000eea8:	3825883a 	mov	r18,r7
1000eeac:	1886b03a 	or	r3,r3,r2
1000eeb0:	2027883a 	mov	r19,r4
1000eeb4:	1804d77a 	srli	r2,r3,29
1000eeb8:	980890fa 	slli	r4,r19,3
1000eebc:	01480034 	movhi	r5,8192
1000eec0:	297fffc4 	addi	r5,r5,-1
1000eec4:	1108b03a 	or	r4,r2,r4
1000eec8:	2004977a 	slli	r2,r4,29
1000eecc:	2026d0fa 	srli	r19,r4,3
1000eed0:	1946703a 	and	r3,r3,r5
1000eed4:	10c4b03a 	or	r2,r2,r3
1000eed8:	14c6b03a 	or	r3,r2,r19
1000eedc:	18014926 	beq	r3,zero,1000f404 <__subdf3+0x95c>
1000eee0:	00c00434 	movhi	r3,16
1000eee4:	99000234 	orhi	r4,r19,8
1000eee8:	18ffffc4 	addi	r3,r3,-1
1000eeec:	20c8703a 	and	r4,r4,r3
1000eef0:	0201ffc4 	movi	r8,2047
1000eef4:	003f5606 	br	1000ec50 <__subdf3+0x1a8>
1000eef8:	00bfe034 	movhi	r2,65408
1000eefc:	10bfffc4 	addi	r2,r2,-1
1000ef00:	2088703a 	and	r4,r4,r2
1000ef04:	888001cc 	andi	r2,r17,7
1000ef08:	8221c83a 	sub	r16,r16,r8
1000ef0c:	103f3b1e 	bne	r2,zero,1000ebfc <__subdf3+0x154>
1000ef10:	003fbd06 	br	1000ee08 <__subdf3+0x360>
1000ef14:	8809883a 	mov	r4,r17
1000ef18:	000f64c0 	call	1000f64c <__clzsi2>
1000ef1c:	12000604 	addi	r8,r2,24
1000ef20:	40c00808 	cmpgei	r3,r8,32
1000ef24:	183f1e26 	beq	r3,zero,1000eba0 <__subdf3+0xf8>
1000ef28:	113ffe04 	addi	r4,r2,-8
1000ef2c:	8908983a 	sll	r4,r17,r4
1000ef30:	0023883a 	mov	r17,zero
1000ef34:	003f2006 	br	1000ebb8 <__subdf3+0x110>
1000ef38:	5ba2b03a 	or	r17,r11,r14
1000ef3c:	8822c03a 	cmpne	r17,r17,zero
1000ef40:	003f0b06 	br	1000eb70 <__subdf3+0xc8>
1000ef44:	6ba3c83a 	sub	r17,r13,r14
1000ef48:	62e7c83a 	sub	r19,r12,r11
1000ef4c:	6c49803a 	cmpltu	r4,r13,r17
1000ef50:	9927c83a 	sub	r19,r19,r4
1000ef54:	9880202c 	andhi	r2,r19,128
1000ef58:	1000bb1e 	bne	r2,zero,1000f248 <__subdf3+0x7a0>
1000ef5c:	8cc4b03a 	or	r2,r17,r19
1000ef60:	103f0b1e 	bne	r2,zero,1000eb90 <__subdf3+0xe8>
1000ef64:	0027883a 	mov	r19,zero
1000ef68:	0025883a 	mov	r18,zero
1000ef6c:	003fad06 	br	1000ee24 <__subdf3+0x37c>
1000ef70:	00880034 	movhi	r2,8192
1000ef74:	6022977a 	slli	r17,r12,29
1000ef78:	10bfffc4 	addi	r2,r2,-1
1000ef7c:	2088703a 	and	r4,r4,r2
1000ef80:	2444b03a 	or	r2,r4,r17
1000ef84:	6026d0fa 	srli	r19,r12,3
1000ef88:	003fa406 	br	1000ee1c <__subdf3+0x374>
1000ef8c:	00880034 	movhi	r2,8192
1000ef90:	6022977a 	slli	r17,r12,29
1000ef94:	10bfffc4 	addi	r2,r2,-1
1000ef98:	2088703a 	and	r4,r4,r2
1000ef9c:	2444b03a 	or	r2,r4,r17
1000efa0:	6026d0fa 	srli	r19,r12,3
1000efa4:	003fcc06 	br	1000eed8 <__subdf3+0x430>
1000efa8:	5411c83a 	sub	r8,r10,r16
1000efac:	80004f26 	beq	r16,zero,1000f0ec <__subdf3+0x644>
1000efb0:	5081ffd8 	cmpnei	r2,r10,2047
1000efb4:	1000b426 	beq	r2,zero,1000f288 <__subdf3+0x7e0>
1000efb8:	63002034 	orhi	r12,r12,128
1000efbc:	40800e48 	cmpgei	r2,r8,57
1000efc0:	1000c41e 	bne	r2,zero,1000f2d4 <__subdf3+0x82c>
1000efc4:	40800808 	cmpgei	r2,r8,32
1000efc8:	1000f91e 	bne	r2,zero,1000f3b0 <__subdf3+0x908>
1000efcc:	00800804 	movi	r2,32
1000efd0:	1205c83a 	sub	r2,r2,r8
1000efd4:	60a2983a 	sll	r17,r12,r2
1000efd8:	6a06d83a 	srl	r3,r13,r8
1000efdc:	6884983a 	sll	r2,r13,r2
1000efe0:	6210d83a 	srl	r8,r12,r8
1000efe4:	88e2b03a 	or	r17,r17,r3
1000efe8:	1004c03a 	cmpne	r2,r2,zero
1000efec:	88a2b03a 	or	r17,r17,r2
1000eff0:	5a17883a 	add	r11,r11,r8
1000eff4:	8ba3883a 	add	r17,r17,r14
1000eff8:	8b85803a 	cmpltu	r2,r17,r14
1000effc:	12c9883a 	add	r4,r2,r11
1000f000:	5021883a 	mov	r16,r10
1000f004:	003f9106 	br	1000ee4c <__subdf3+0x3a4>
1000f008:	5081ffd8 	cmpnei	r2,r10,2047
1000f00c:	10006426 	beq	r2,zero,1000f1a0 <__subdf3+0x6f8>
1000f010:	63002034 	orhi	r12,r12,128
1000f014:	40800e48 	cmpgei	r2,r8,57
1000f018:	1000751e 	bne	r2,zero,1000f1f0 <__subdf3+0x748>
1000f01c:	40800808 	cmpgei	r2,r8,32
1000f020:	1000b61e 	bne	r2,zero,1000f2fc <__subdf3+0x854>
1000f024:	00800804 	movi	r2,32
1000f028:	1205c83a 	sub	r2,r2,r8
1000f02c:	60a2983a 	sll	r17,r12,r2
1000f030:	6a06d83a 	srl	r3,r13,r8
1000f034:	6884983a 	sll	r2,r13,r2
1000f038:	6210d83a 	srl	r8,r12,r8
1000f03c:	88e2b03a 	or	r17,r17,r3
1000f040:	1004c03a 	cmpne	r2,r2,zero
1000f044:	88a2b03a 	or	r17,r17,r2
1000f048:	5a17c83a 	sub	r11,r11,r8
1000f04c:	7463c83a 	sub	r17,r14,r17
1000f050:	7445803a 	cmpltu	r2,r14,r17
1000f054:	5889c83a 	sub	r4,r11,r2
1000f058:	5021883a 	mov	r16,r10
1000f05c:	003ec706 	br	1000eb7c <__subdf3+0xd4>
1000f060:	423ff844 	addi	r8,r8,-31
1000f064:	10c00820 	cmpeqi	r3,r2,32
1000f068:	2210d83a 	srl	r8,r4,r8
1000f06c:	1800041e 	bne	r3,zero,1000f080 <__subdf3+0x5d8>
1000f070:	00c01004 	movi	r3,64
1000f074:	1885c83a 	sub	r2,r3,r2
1000f078:	2088983a 	sll	r4,r4,r2
1000f07c:	8922b03a 	or	r17,r17,r4
1000f080:	8822c03a 	cmpne	r17,r17,zero
1000f084:	8a22b03a 	or	r17,r17,r8
1000f088:	0009883a 	mov	r4,zero
1000f08c:	0021883a 	mov	r16,zero
1000f090:	003f5b06 	br	1000ee00 <__subdf3+0x358>
1000f094:	04000084 	movi	r16,2
1000f098:	00bfe034 	movhi	r2,65408
1000f09c:	10bfffc4 	addi	r2,r2,-1
1000f0a0:	2084703a 	and	r2,r4,r2
1000f0a4:	8806d07a 	srli	r3,r17,1
1000f0a8:	100a97fa 	slli	r5,r2,31
1000f0ac:	8c40004c 	andi	r17,r17,1
1000f0b0:	1c62b03a 	or	r17,r3,r17
1000f0b4:	1008d07a 	srli	r4,r2,1
1000f0b8:	2c62b03a 	or	r17,r5,r17
1000f0bc:	003ecd06 	br	1000ebf4 <__subdf3+0x14c>
1000f0c0:	447ff804 	addi	r17,r8,-32
1000f0c4:	40800820 	cmpeqi	r2,r8,32
1000f0c8:	5c46d83a 	srl	r3,r11,r17
1000f0cc:	1000041e 	bne	r2,zero,1000f0e0 <__subdf3+0x638>
1000f0d0:	00801004 	movi	r2,64
1000f0d4:	1205c83a 	sub	r2,r2,r8
1000f0d8:	5884983a 	sll	r2,r11,r2
1000f0dc:	709cb03a 	or	r14,r14,r2
1000f0e0:	7022c03a 	cmpne	r17,r14,zero
1000f0e4:	88e2b03a 	or	r17,r17,r3
1000f0e8:	003ea106 	br	1000eb70 <__subdf3+0xc8>
1000f0ec:	6344b03a 	or	r2,r12,r13
1000f0f0:	1000a526 	beq	r2,zero,1000f388 <__subdf3+0x8e0>
1000f0f4:	40bfffc4 	addi	r2,r8,-1
1000f0f8:	1000bd26 	beq	r2,zero,1000f3f0 <__subdf3+0x948>
1000f0fc:	4201ffd8 	cmpnei	r8,r8,2047
1000f100:	40006126 	beq	r8,zero,1000f288 <__subdf3+0x7e0>
1000f104:	1011883a 	mov	r8,r2
1000f108:	003fac06 	br	1000efbc <__subdf3+0x514>
1000f10c:	00800804 	movi	r2,32
1000f110:	1205c83a 	sub	r2,r2,r8
1000f114:	58a2983a 	sll	r17,r11,r2
1000f118:	7206d83a 	srl	r3,r14,r8
1000f11c:	709c983a 	sll	r14,r14,r2
1000f120:	5a04d83a 	srl	r2,r11,r8
1000f124:	88e2b03a 	or	r17,r17,r3
1000f128:	701cc03a 	cmpne	r14,r14,zero
1000f12c:	8ba2b03a 	or	r17,r17,r14
1000f130:	6099883a 	add	r12,r12,r2
1000f134:	003f4206 	br	1000ee40 <__subdf3+0x398>
1000f138:	5808977a 	slli	r4,r11,29
1000f13c:	00c80034 	movhi	r3,8192
1000f140:	18ffffc4 	addi	r3,r3,-1
1000f144:	30cc703a 	and	r6,r6,r3
1000f148:	2184b03a 	or	r2,r4,r6
1000f14c:	5826d0fa 	srli	r19,r11,3
1000f150:	003f3206 	br	1000ee1c <__subdf3+0x374>
1000f154:	10004c26 	beq	r2,zero,1000f288 <__subdf3+0x7e0>
1000f158:	5b9cb03a 	or	r14,r11,r14
1000f15c:	6010977a 	slli	r8,r12,29
1000f160:	6026d0fa 	srli	r19,r12,3
1000f164:	703f451e 	bne	r14,zero,1000ee7c <__subdf3+0x3d4>
1000f168:	00880034 	movhi	r2,8192
1000f16c:	10bfffc4 	addi	r2,r2,-1
1000f170:	2084703a 	and	r2,r4,r2
1000f174:	1204b03a 	or	r2,r2,r8
1000f178:	003f5706 	br	1000eed8 <__subdf3+0x430>
1000f17c:	103f7926 	beq	r2,zero,1000ef64 <__subdf3+0x4bc>
1000f180:	5804977a 	slli	r2,r11,29
1000f184:	00c80034 	movhi	r3,8192
1000f188:	18ffffc4 	addi	r3,r3,-1
1000f18c:	30c6703a 	and	r3,r6,r3
1000f190:	10c4b03a 	or	r2,r2,r3
1000f194:	5826d0fa 	srli	r19,r11,3
1000f198:	3825883a 	mov	r18,r7
1000f19c:	003f2106 	br	1000ee24 <__subdf3+0x37c>
1000f1a0:	5804977a 	slli	r2,r11,29
1000f1a4:	00c80034 	movhi	r3,8192
1000f1a8:	18ffffc4 	addi	r3,r3,-1
1000f1ac:	30c6703a 	and	r3,r6,r3
1000f1b0:	10c4b03a 	or	r2,r2,r3
1000f1b4:	5826d0fa 	srli	r19,r11,3
1000f1b8:	003f4706 	br	1000eed8 <__subdf3+0x430>
1000f1bc:	6ba3c83a 	sub	r17,r13,r14
1000f1c0:	62c9c83a 	sub	r4,r12,r11
1000f1c4:	6c5b803a 	cmpltu	r13,r13,r17
1000f1c8:	2349c83a 	sub	r4,r4,r13
1000f1cc:	04000044 	movi	r16,1
1000f1d0:	003e6a06 	br	1000eb7c <__subdf3+0xd4>
1000f1d4:	6004977a 	slli	r2,r12,29
1000f1d8:	00c80034 	movhi	r3,8192
1000f1dc:	18ffffc4 	addi	r3,r3,-1
1000f1e0:	20c8703a 	and	r4,r4,r3
1000f1e4:	1104b03a 	or	r2,r2,r4
1000f1e8:	6026d0fa 	srli	r19,r12,3
1000f1ec:	003f0b06 	br	1000ee1c <__subdf3+0x374>
1000f1f0:	6366b03a 	or	r19,r12,r13
1000f1f4:	9822c03a 	cmpne	r17,r19,zero
1000f1f8:	003f9406 	br	1000f04c <__subdf3+0x5a4>
1000f1fc:	6004977a 	slli	r2,r12,29
1000f200:	00c80034 	movhi	r3,8192
1000f204:	18ffffc4 	addi	r3,r3,-1
1000f208:	20c8703a 	and	r4,r4,r3
1000f20c:	1104b03a 	or	r2,r2,r4
1000f210:	6026d0fa 	srli	r19,r12,3
1000f214:	003f3006 	br	1000eed8 <__subdf3+0x430>
1000f218:	1881ffe0 	cmpeqi	r2,r3,2047
1000f21c:	103f101e 	bne	r2,zero,1000ee60 <__subdf3+0x3b8>
1000f220:	6b9d883a 	add	r14,r13,r14
1000f224:	62c9883a 	add	r4,r12,r11
1000f228:	7345803a 	cmpltu	r2,r14,r13
1000f22c:	2085883a 	add	r2,r4,r2
1000f230:	102297fa 	slli	r17,r2,31
1000f234:	701cd07a 	srli	r14,r14,1
1000f238:	1008d07a 	srli	r4,r2,1
1000f23c:	1821883a 	mov	r16,r3
1000f240:	8ba2b03a 	or	r17,r17,r14
1000f244:	003eee06 	br	1000ee00 <__subdf3+0x358>
1000f248:	7363c83a 	sub	r17,r14,r13
1000f24c:	5b09c83a 	sub	r4,r11,r12
1000f250:	7467803a 	cmpltu	r19,r14,r17
1000f254:	24e7c83a 	sub	r19,r4,r19
1000f258:	3825883a 	mov	r18,r7
1000f25c:	003e4c06 	br	1000eb90 <__subdf3+0xe8>
1000f260:	183f031e 	bne	r3,zero,1000ee70 <__subdf3+0x3c8>
1000f264:	10005d26 	beq	r2,zero,1000f3dc <__subdf3+0x934>
1000f268:	00880034 	movhi	r2,8192
1000f26c:	5806977a 	slli	r3,r11,29
1000f270:	10bfffc4 	addi	r2,r2,-1
1000f274:	3084703a 	and	r2,r6,r2
1000f278:	10c4b03a 	or	r2,r2,r3
1000f27c:	5826d0fa 	srli	r19,r11,3
1000f280:	3825883a 	mov	r18,r7
1000f284:	003f1406 	br	1000eed8 <__subdf3+0x430>
1000f288:	00880034 	movhi	r2,8192
1000f28c:	5806977a 	slli	r3,r11,29
1000f290:	10bfffc4 	addi	r2,r2,-1
1000f294:	3084703a 	and	r2,r6,r2
1000f298:	10c4b03a 	or	r2,r2,r3
1000f29c:	5826d0fa 	srli	r19,r11,3
1000f2a0:	003f0d06 	br	1000eed8 <__subdf3+0x430>
1000f2a4:	6ba3c83a 	sub	r17,r13,r14
1000f2a8:	62c5c83a 	sub	r2,r12,r11
1000f2ac:	6c49803a 	cmpltu	r4,r13,r17
1000f2b0:	1109c83a 	sub	r4,r2,r4
1000f2b4:	2080202c 	andhi	r2,r4,128
1000f2b8:	10003a26 	beq	r2,zero,1000f3a4 <__subdf3+0x8fc>
1000f2bc:	7363c83a 	sub	r17,r14,r13
1000f2c0:	5b09c83a 	sub	r4,r11,r12
1000f2c4:	745d803a 	cmpltu	r14,r14,r17
1000f2c8:	2389c83a 	sub	r4,r4,r14
1000f2cc:	3825883a 	mov	r18,r7
1000f2d0:	003e4806 	br	1000ebf4 <__subdf3+0x14c>
1000f2d4:	6362b03a 	or	r17,r12,r13
1000f2d8:	8822c03a 	cmpne	r17,r17,zero
1000f2dc:	003f4506 	br	1000eff4 <__subdf3+0x54c>
1000f2e0:	6004977a 	slli	r2,r12,29
1000f2e4:	00c80034 	movhi	r3,8192
1000f2e8:	18ffffc4 	addi	r3,r3,-1
1000f2ec:	20c6703a 	and	r3,r4,r3
1000f2f0:	10c4b03a 	or	r2,r2,r3
1000f2f4:	6026d0fa 	srli	r19,r12,3
1000f2f8:	003ef706 	br	1000eed8 <__subdf3+0x430>
1000f2fc:	40bff804 	addi	r2,r8,-32
1000f300:	40c00820 	cmpeqi	r3,r8,32
1000f304:	6084d83a 	srl	r2,r12,r2
1000f308:	1800041e 	bne	r3,zero,1000f31c <__subdf3+0x874>
1000f30c:	04c01004 	movi	r19,64
1000f310:	9a11c83a 	sub	r8,r19,r8
1000f314:	6226983a 	sll	r19,r12,r8
1000f318:	6cdab03a 	or	r13,r13,r19
1000f31c:	6822c03a 	cmpne	r17,r13,zero
1000f320:	88a2b03a 	or	r17,r17,r2
1000f324:	003f4906 	br	1000f04c <__subdf3+0x5a4>
1000f328:	7363c83a 	sub	r17,r14,r13
1000f32c:	5b09c83a 	sub	r4,r11,r12
1000f330:	745d803a 	cmpltu	r14,r14,r17
1000f334:	2389c83a 	sub	r4,r4,r14
1000f338:	04000044 	movi	r16,1
1000f33c:	003e0f06 	br	1000eb7c <__subdf3+0xd4>
1000f340:	00880034 	movhi	r2,8192
1000f344:	5806977a 	slli	r3,r11,29
1000f348:	10bfffc4 	addi	r2,r2,-1
1000f34c:	3084703a 	and	r2,r6,r2
1000f350:	10c4b03a 	or	r2,r2,r3
1000f354:	5826d0fa 	srli	r19,r11,3
1000f358:	003eb206 	br	1000ee24 <__subdf3+0x37c>
1000f35c:	6ba3883a 	add	r17,r13,r14
1000f360:	62c9883a 	add	r4,r12,r11
1000f364:	8b5b803a 	cmpltu	r13,r17,r13
1000f368:	2349883a 	add	r4,r4,r13
1000f36c:	2080202c 	andhi	r2,r4,128
1000f370:	103ea326 	beq	r2,zero,1000ee00 <__subdf3+0x358>
1000f374:	00bfe034 	movhi	r2,65408
1000f378:	10bfffc4 	addi	r2,r2,-1
1000f37c:	2088703a 	and	r4,r4,r2
1000f380:	04000044 	movi	r16,1
1000f384:	003e9e06 	br	1000ee00 <__subdf3+0x358>
1000f388:	00880034 	movhi	r2,8192
1000f38c:	5806977a 	slli	r3,r11,29
1000f390:	10bfffc4 	addi	r2,r2,-1
1000f394:	3084703a 	and	r2,r6,r2
1000f398:	10c4b03a 	or	r2,r2,r3
1000f39c:	5826d0fa 	srli	r19,r11,3
1000f3a0:	003e9e06 	br	1000ee1c <__subdf3+0x374>
1000f3a4:	8904b03a 	or	r2,r17,r4
1000f3a8:	103eee26 	beq	r2,zero,1000ef64 <__subdf3+0x4bc>
1000f3ac:	003e9406 	br	1000ee00 <__subdf3+0x358>
1000f3b0:	40bff804 	addi	r2,r8,-32
1000f3b4:	40c00820 	cmpeqi	r3,r8,32
1000f3b8:	6084d83a 	srl	r2,r12,r2
1000f3bc:	1800041e 	bne	r3,zero,1000f3d0 <__subdf3+0x928>
1000f3c0:	04c01004 	movi	r19,64
1000f3c4:	9a11c83a 	sub	r8,r19,r8
1000f3c8:	6226983a 	sll	r19,r12,r8
1000f3cc:	6cdab03a 	or	r13,r13,r19
1000f3d0:	6822c03a 	cmpne	r17,r13,zero
1000f3d4:	88a2b03a 	or	r17,r17,r2
1000f3d8:	003f0606 	br	1000eff4 <__subdf3+0x54c>
1000f3dc:	04c00434 	movhi	r19,16
1000f3e0:	9cffffc4 	addi	r19,r19,-1
1000f3e4:	0025883a 	mov	r18,zero
1000f3e8:	00bfffc4 	movi	r2,-1
1000f3ec:	003ebc06 	br	1000eee0 <__subdf3+0x438>
1000f3f0:	6ba3883a 	add	r17,r13,r14
1000f3f4:	62c9883a 	add	r4,r12,r11
1000f3f8:	8b9d803a 	cmpltu	r14,r17,r14
1000f3fc:	2389883a 	add	r4,r4,r14
1000f400:	003e7c06 	br	1000edf4 <__subdf3+0x34c>
1000f404:	0005883a 	mov	r2,zero
1000f408:	0201ffc4 	movi	r8,2047
1000f40c:	0009883a 	mov	r4,zero
1000f410:	003e0f06 	br	1000ec50 <__subdf3+0x1a8>

1000f414 <__unorddf2>:
1000f414:	2806d53a 	srli	r3,r5,20
1000f418:	3810d53a 	srli	r8,r7,20
1000f41c:	00800434 	movhi	r2,16
1000f420:	18c1ffcc 	andi	r3,r3,2047
1000f424:	10bfffc4 	addi	r2,r2,-1
1000f428:	18c1ffd8 	cmpnei	r3,r3,2047
1000f42c:	288a703a 	and	r5,r5,r2
1000f430:	388e703a 	and	r7,r7,r2
1000f434:	4201ffcc 	andi	r8,r8,2047
1000f438:	18000426 	beq	r3,zero,1000f44c <__unorddf2+0x38>
1000f43c:	4201ffd8 	cmpnei	r8,r8,2047
1000f440:	40000626 	beq	r8,zero,1000f45c <__unorddf2+0x48>
1000f444:	0005883a 	mov	r2,zero
1000f448:	f800283a 	ret
1000f44c:	214ab03a 	or	r5,r4,r5
1000f450:	283ffa26 	beq	r5,zero,1000f43c <__unorddf2+0x28>
1000f454:	00800044 	movi	r2,1
1000f458:	f800283a 	ret
1000f45c:	398eb03a 	or	r7,r7,r6
1000f460:	3804c03a 	cmpne	r2,r7,zero
1000f464:	f800283a 	ret

1000f468 <__fixdfsi>:
1000f468:	280cd53a 	srli	r6,r5,20
1000f46c:	00c00434 	movhi	r3,16
1000f470:	18ffffc4 	addi	r3,r3,-1
1000f474:	3181ffcc 	andi	r6,r6,2047
1000f478:	31c0ffd0 	cmplti	r7,r6,1023
1000f47c:	28c6703a 	and	r3,r5,r3
1000f480:	280ad7fa 	srli	r5,r5,31
1000f484:	3800061e 	bne	r7,zero,1000f4a0 <__fixdfsi+0x38>
1000f488:	30810790 	cmplti	r2,r6,1054
1000f48c:	1000061e 	bne	r2,zero,1000f4a8 <__fixdfsi+0x40>
1000f490:	00a00034 	movhi	r2,32768
1000f494:	10bfffc4 	addi	r2,r2,-1
1000f498:	2885883a 	add	r2,r5,r2
1000f49c:	f800283a 	ret
1000f4a0:	0005883a 	mov	r2,zero
1000f4a4:	f800283a 	ret
1000f4a8:	00810cc4 	movi	r2,1075
1000f4ac:	118fc83a 	sub	r7,r2,r6
1000f4b0:	38800808 	cmpgei	r2,r7,32
1000f4b4:	18c00434 	orhi	r3,r3,16
1000f4b8:	1000071e 	bne	r2,zero,1000f4d8 <__fixdfsi+0x70>
1000f4bc:	30befb44 	addi	r2,r6,-1043
1000f4c0:	1886983a 	sll	r3,r3,r2
1000f4c4:	21c4d83a 	srl	r2,r4,r7
1000f4c8:	1884b03a 	or	r2,r3,r2
1000f4cc:	283ff526 	beq	r5,zero,1000f4a4 <__fixdfsi+0x3c>
1000f4d0:	0085c83a 	sub	r2,zero,r2
1000f4d4:	f800283a 	ret
1000f4d8:	008104c4 	movi	r2,1043
1000f4dc:	1185c83a 	sub	r2,r2,r6
1000f4e0:	1884d83a 	srl	r2,r3,r2
1000f4e4:	003ff906 	br	1000f4cc <__fixdfsi+0x64>

1000f4e8 <__floatsidf>:
1000f4e8:	defffd04 	addi	sp,sp,-12
1000f4ec:	dfc00215 	stw	ra,8(sp)
1000f4f0:	dc400115 	stw	r17,4(sp)
1000f4f4:	dc000015 	stw	r16,0(sp)
1000f4f8:	20001326 	beq	r4,zero,1000f548 <__floatsidf+0x60>
1000f4fc:	2021883a 	mov	r16,r4
1000f500:	2022d7fa 	srli	r17,r4,31
1000f504:	20002116 	blt	r4,zero,1000f58c <__floatsidf+0xa4>
1000f508:	8009883a 	mov	r4,r16
1000f50c:	000f64c0 	call	1000f64c <__clzsi2>
1000f510:	01010784 	movi	r4,1054
1000f514:	2089c83a 	sub	r4,r4,r2
1000f518:	10c002c8 	cmpgei	r3,r2,11
1000f51c:	2101ffcc 	andi	r4,r4,2047
1000f520:	18001c1e 	bne	r3,zero,1000f594 <__floatsidf+0xac>
1000f524:	018002c4 	movi	r6,11
1000f528:	308dc83a 	sub	r6,r6,r2
1000f52c:	818ad83a 	srl	r5,r16,r6
1000f530:	00c00434 	movhi	r3,16
1000f534:	10800544 	addi	r2,r2,21
1000f538:	18ffffc4 	addi	r3,r3,-1
1000f53c:	8084983a 	sll	r2,r16,r2
1000f540:	28ca703a 	and	r5,r5,r3
1000f544:	00000406 	br	1000f558 <__floatsidf+0x70>
1000f548:	0023883a 	mov	r17,zero
1000f54c:	0009883a 	mov	r4,zero
1000f550:	000b883a 	mov	r5,zero
1000f554:	0005883a 	mov	r2,zero
1000f558:	2008953a 	slli	r4,r4,20
1000f55c:	8c403fcc 	andi	r17,r17,255
1000f560:	01800434 	movhi	r6,16
1000f564:	31bfffc4 	addi	r6,r6,-1
1000f568:	880697fa 	slli	r3,r17,31
1000f56c:	298a703a 	and	r5,r5,r6
1000f570:	290ab03a 	or	r5,r5,r4
1000f574:	28c6b03a 	or	r3,r5,r3
1000f578:	dfc00217 	ldw	ra,8(sp)
1000f57c:	dc400117 	ldw	r17,4(sp)
1000f580:	dc000017 	ldw	r16,0(sp)
1000f584:	dec00304 	addi	sp,sp,12
1000f588:	f800283a 	ret
1000f58c:	0121c83a 	sub	r16,zero,r4
1000f590:	003fdd06 	br	1000f508 <__floatsidf+0x20>
1000f594:	10bffd44 	addi	r2,r2,-11
1000f598:	808a983a 	sll	r5,r16,r2
1000f59c:	00800434 	movhi	r2,16
1000f5a0:	10bfffc4 	addi	r2,r2,-1
1000f5a4:	288a703a 	and	r5,r5,r2
1000f5a8:	0005883a 	mov	r2,zero
1000f5ac:	003fea06 	br	1000f558 <__floatsidf+0x70>

1000f5b0 <__floatunsidf>:
1000f5b0:	defffe04 	addi	sp,sp,-8
1000f5b4:	dc000015 	stw	r16,0(sp)
1000f5b8:	dfc00115 	stw	ra,4(sp)
1000f5bc:	2021883a 	mov	r16,r4
1000f5c0:	20000f26 	beq	r4,zero,1000f600 <__floatunsidf+0x50>
1000f5c4:	000f64c0 	call	1000f64c <__clzsi2>
1000f5c8:	01010784 	movi	r4,1054
1000f5cc:	2089c83a 	sub	r4,r4,r2
1000f5d0:	10c002c8 	cmpgei	r3,r2,11
1000f5d4:	2101ffcc 	andi	r4,r4,2047
1000f5d8:	1800151e 	bne	r3,zero,1000f630 <__floatunsidf+0x80>
1000f5dc:	00c002c4 	movi	r3,11
1000f5e0:	1887c83a 	sub	r3,r3,r2
1000f5e4:	80c6d83a 	srl	r3,r16,r3
1000f5e8:	01400434 	movhi	r5,16
1000f5ec:	10800544 	addi	r2,r2,21
1000f5f0:	297fffc4 	addi	r5,r5,-1
1000f5f4:	80a0983a 	sll	r16,r16,r2
1000f5f8:	1944703a 	and	r2,r3,r5
1000f5fc:	00000206 	br	1000f608 <__floatunsidf+0x58>
1000f600:	0009883a 	mov	r4,zero
1000f604:	0005883a 	mov	r2,zero
1000f608:	2008953a 	slli	r4,r4,20
1000f60c:	00c00434 	movhi	r3,16
1000f610:	18ffffc4 	addi	r3,r3,-1
1000f614:	10c6703a 	and	r3,r2,r3
1000f618:	1906b03a 	or	r3,r3,r4
1000f61c:	8005883a 	mov	r2,r16
1000f620:	dfc00117 	ldw	ra,4(sp)
1000f624:	dc000017 	ldw	r16,0(sp)
1000f628:	dec00204 	addi	sp,sp,8
1000f62c:	f800283a 	ret
1000f630:	10bffd44 	addi	r2,r2,-11
1000f634:	8084983a 	sll	r2,r16,r2
1000f638:	00c00434 	movhi	r3,16
1000f63c:	18ffffc4 	addi	r3,r3,-1
1000f640:	10c4703a 	and	r2,r2,r3
1000f644:	0021883a 	mov	r16,zero
1000f648:	003fef06 	br	1000f608 <__floatunsidf+0x58>

1000f64c <__clzsi2>:
1000f64c:	00bfffd4 	movui	r2,65535
1000f650:	11000b36 	bltu	r2,r4,1000f680 <__clzsi2+0x34>
1000f654:	20804030 	cmpltui	r2,r4,256
1000f658:	1000071e 	bne	r2,zero,1000f678 <__clzsi2+0x2c>
1000f65c:	2008d23a 	srli	r4,r4,8
1000f660:	01400604 	movi	r5,24
1000f664:	00c40074 	movhi	r3,4097
1000f668:	20c7883a 	add	r3,r4,r3
1000f66c:	188b1943 	ldbu	r2,11365(r3)
1000f670:	2885c83a 	sub	r2,r5,r2
1000f674:	f800283a 	ret
1000f678:	01400804 	movi	r5,32
1000f67c:	003ff906 	br	1000f664 <__clzsi2+0x18>
1000f680:	00804034 	movhi	r2,256
1000f684:	20800336 	bltu	r4,r2,1000f694 <__clzsi2+0x48>
1000f688:	2008d63a 	srli	r4,r4,24
1000f68c:	01400204 	movi	r5,8
1000f690:	003ff406 	br	1000f664 <__clzsi2+0x18>
1000f694:	2008d43a 	srli	r4,r4,16
1000f698:	01400404 	movi	r5,16
1000f69c:	003ff106 	br	1000f664 <__clzsi2+0x18>

1000f6a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f6a0:	defffe04 	addi	sp,sp,-8
1000f6a4:	dfc00115 	stw	ra,4(sp)
1000f6a8:	df000015 	stw	fp,0(sp)
1000f6ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f6b0:	d0a00a17 	ldw	r2,-32728(gp)
1000f6b4:	10000326 	beq	r2,zero,1000f6c4 <alt_get_errno+0x24>
1000f6b8:	d0a00a17 	ldw	r2,-32728(gp)
1000f6bc:	103ee83a 	callr	r2
1000f6c0:	00000106 	br	1000f6c8 <alt_get_errno+0x28>
1000f6c4:	d0a89a04 	addi	r2,gp,-23960
}
1000f6c8:	e037883a 	mov	sp,fp
1000f6cc:	dfc00117 	ldw	ra,4(sp)
1000f6d0:	df000017 	ldw	fp,0(sp)
1000f6d4:	dec00204 	addi	sp,sp,8
1000f6d8:	f800283a 	ret

1000f6dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f6dc:	defffb04 	addi	sp,sp,-20
1000f6e0:	dfc00415 	stw	ra,16(sp)
1000f6e4:	df000315 	stw	fp,12(sp)
1000f6e8:	df000304 	addi	fp,sp,12
1000f6ec:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f6f0:	e0bffd17 	ldw	r2,-12(fp)
1000f6f4:	10000616 	blt	r2,zero,1000f710 <close+0x34>
1000f6f8:	e0bffd17 	ldw	r2,-12(fp)
1000f6fc:	10c00324 	muli	r3,r2,12
1000f700:	00840074 	movhi	r2,4097
1000f704:	108f6704 	addi	r2,r2,15772
1000f708:	1885883a 	add	r2,r3,r2
1000f70c:	00000106 	br	1000f714 <close+0x38>
1000f710:	0005883a 	mov	r2,zero
1000f714:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
1000f718:	e0bfff17 	ldw	r2,-4(fp)
1000f71c:	10001926 	beq	r2,zero,1000f784 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f720:	e0bfff17 	ldw	r2,-4(fp)
1000f724:	10800017 	ldw	r2,0(r2)
1000f728:	10800417 	ldw	r2,16(r2)
1000f72c:	10000626 	beq	r2,zero,1000f748 <close+0x6c>
1000f730:	e0bfff17 	ldw	r2,-4(fp)
1000f734:	10800017 	ldw	r2,0(r2)
1000f738:	10800417 	ldw	r2,16(r2)
1000f73c:	e13fff17 	ldw	r4,-4(fp)
1000f740:	103ee83a 	callr	r2
1000f744:	00000106 	br	1000f74c <close+0x70>
1000f748:	0005883a 	mov	r2,zero
1000f74c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f750:	e13ffd17 	ldw	r4,-12(fp)
1000f754:	000fd9c0 	call	1000fd9c <alt_release_fd>
    if (rval < 0)
1000f758:	e0bffe17 	ldw	r2,-8(fp)
1000f75c:	1000070e 	bge	r2,zero,1000f77c <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000f760:	000f6a00 	call	1000f6a0 <alt_get_errno>
1000f764:	1007883a 	mov	r3,r2
1000f768:	e0bffe17 	ldw	r2,-8(fp)
1000f76c:	0085c83a 	sub	r2,zero,r2
1000f770:	18800015 	stw	r2,0(r3)
      return -1;
1000f774:	00bfffc4 	movi	r2,-1
1000f778:	00000706 	br	1000f798 <close+0xbc>
    }
    return 0;
1000f77c:	0005883a 	mov	r2,zero
1000f780:	00000506 	br	1000f798 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f784:	000f6a00 	call	1000f6a0 <alt_get_errno>
1000f788:	1007883a 	mov	r3,r2
1000f78c:	00801444 	movi	r2,81
1000f790:	18800015 	stw	r2,0(r3)
    return -1;
1000f794:	00bfffc4 	movi	r2,-1
  }
}
1000f798:	e037883a 	mov	sp,fp
1000f79c:	dfc00117 	ldw	ra,4(sp)
1000f7a0:	df000017 	ldw	fp,0(sp)
1000f7a4:	dec00204 	addi	sp,sp,8
1000f7a8:	f800283a 	ret

1000f7ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f7ac:	defffc04 	addi	sp,sp,-16
1000f7b0:	df000315 	stw	fp,12(sp)
1000f7b4:	df000304 	addi	fp,sp,12
1000f7b8:	e13fff15 	stw	r4,-4(fp)
1000f7bc:	e17ffe15 	stw	r5,-8(fp)
1000f7c0:	e1bffd15 	stw	r6,-12(fp)
  return len;
1000f7c4:	e0bffd17 	ldw	r2,-12(fp)
}
1000f7c8:	e037883a 	mov	sp,fp
1000f7cc:	df000017 	ldw	fp,0(sp)
1000f7d0:	dec00104 	addi	sp,sp,4
1000f7d4:	f800283a 	ret

1000f7d8 <alt_get_errno>:
{
1000f7d8:	defffe04 	addi	sp,sp,-8
1000f7dc:	dfc00115 	stw	ra,4(sp)
1000f7e0:	df000015 	stw	fp,0(sp)
1000f7e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f7e8:	d0a00a17 	ldw	r2,-32728(gp)
1000f7ec:	10000326 	beq	r2,zero,1000f7fc <alt_get_errno+0x24>
1000f7f0:	d0a00a17 	ldw	r2,-32728(gp)
1000f7f4:	103ee83a 	callr	r2
1000f7f8:	00000106 	br	1000f800 <alt_get_errno+0x28>
1000f7fc:	d0a89a04 	addi	r2,gp,-23960
}
1000f800:	e037883a 	mov	sp,fp
1000f804:	dfc00117 	ldw	ra,4(sp)
1000f808:	df000017 	ldw	fp,0(sp)
1000f80c:	dec00204 	addi	sp,sp,8
1000f810:	f800283a 	ret

1000f814 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f814:	defffb04 	addi	sp,sp,-20
1000f818:	dfc00415 	stw	ra,16(sp)
1000f81c:	df000315 	stw	fp,12(sp)
1000f820:	df000304 	addi	fp,sp,12
1000f824:	e13ffe15 	stw	r4,-8(fp)
1000f828:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f82c:	e0bffe17 	ldw	r2,-8(fp)
1000f830:	10000616 	blt	r2,zero,1000f84c <fstat+0x38>
1000f834:	e0bffe17 	ldw	r2,-8(fp)
1000f838:	10c00324 	muli	r3,r2,12
1000f83c:	00840074 	movhi	r2,4097
1000f840:	108f6704 	addi	r2,r2,15772
1000f844:	1885883a 	add	r2,r3,r2
1000f848:	00000106 	br	1000f850 <fstat+0x3c>
1000f84c:	0005883a 	mov	r2,zero
1000f850:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f854:	e0bfff17 	ldw	r2,-4(fp)
1000f858:	10001026 	beq	r2,zero,1000f89c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f85c:	e0bfff17 	ldw	r2,-4(fp)
1000f860:	10800017 	ldw	r2,0(r2)
1000f864:	10800817 	ldw	r2,32(r2)
1000f868:	10000726 	beq	r2,zero,1000f888 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000f86c:	e0bfff17 	ldw	r2,-4(fp)
1000f870:	10800017 	ldw	r2,0(r2)
1000f874:	10800817 	ldw	r2,32(r2)
1000f878:	e17ffd17 	ldw	r5,-12(fp)
1000f87c:	e13fff17 	ldw	r4,-4(fp)
1000f880:	103ee83a 	callr	r2
1000f884:	00000a06 	br	1000f8b0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f888:	e0bffd17 	ldw	r2,-12(fp)
1000f88c:	00c80004 	movi	r3,8192
1000f890:	10c00115 	stw	r3,4(r2)
      return 0;
1000f894:	0005883a 	mov	r2,zero
1000f898:	00000506 	br	1000f8b0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f89c:	000f7d80 	call	1000f7d8 <alt_get_errno>
1000f8a0:	1007883a 	mov	r3,r2
1000f8a4:	00801444 	movi	r2,81
1000f8a8:	18800015 	stw	r2,0(r3)
    return -1;
1000f8ac:	00bfffc4 	movi	r2,-1
  }
}
1000f8b0:	e037883a 	mov	sp,fp
1000f8b4:	dfc00117 	ldw	ra,4(sp)
1000f8b8:	df000017 	ldw	fp,0(sp)
1000f8bc:	dec00204 	addi	sp,sp,8
1000f8c0:	f800283a 	ret

1000f8c4 <alt_get_errno>:
{
1000f8c4:	defffe04 	addi	sp,sp,-8
1000f8c8:	dfc00115 	stw	ra,4(sp)
1000f8cc:	df000015 	stw	fp,0(sp)
1000f8d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f8d4:	d0a00a17 	ldw	r2,-32728(gp)
1000f8d8:	10000326 	beq	r2,zero,1000f8e8 <alt_get_errno+0x24>
1000f8dc:	d0a00a17 	ldw	r2,-32728(gp)
1000f8e0:	103ee83a 	callr	r2
1000f8e4:	00000106 	br	1000f8ec <alt_get_errno+0x28>
1000f8e8:	d0a89a04 	addi	r2,gp,-23960
}
1000f8ec:	e037883a 	mov	sp,fp
1000f8f0:	dfc00117 	ldw	ra,4(sp)
1000f8f4:	df000017 	ldw	fp,0(sp)
1000f8f8:	dec00204 	addi	sp,sp,8
1000f8fc:	f800283a 	ret

1000f900 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f900:	deffea04 	addi	sp,sp,-88
1000f904:	dfc01515 	stw	ra,84(sp)
1000f908:	df001415 	stw	fp,80(sp)
1000f90c:	df001404 	addi	fp,sp,80
1000f910:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f914:	e0bfec17 	ldw	r2,-80(fp)
1000f918:	10000616 	blt	r2,zero,1000f934 <isatty+0x34>
1000f91c:	e0bfec17 	ldw	r2,-80(fp)
1000f920:	10c00324 	muli	r3,r2,12
1000f924:	00840074 	movhi	r2,4097
1000f928:	108f6704 	addi	r2,r2,15772
1000f92c:	1885883a 	add	r2,r3,r2
1000f930:	00000106 	br	1000f938 <isatty+0x38>
1000f934:	0005883a 	mov	r2,zero
1000f938:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f93c:	e0bfff17 	ldw	r2,-4(fp)
1000f940:	10000e26 	beq	r2,zero,1000f97c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f944:	e0bfff17 	ldw	r2,-4(fp)
1000f948:	10800017 	ldw	r2,0(r2)
1000f94c:	10800817 	ldw	r2,32(r2)
1000f950:	1000021e 	bne	r2,zero,1000f95c <isatty+0x5c>
    {
      return 1;
1000f954:	00800044 	movi	r2,1
1000f958:	00000d06 	br	1000f990 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f95c:	e0bfed04 	addi	r2,fp,-76
1000f960:	100b883a 	mov	r5,r2
1000f964:	e13fec17 	ldw	r4,-80(fp)
1000f968:	000f8140 	call	1000f814 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f96c:	e0bfee17 	ldw	r2,-72(fp)
1000f970:	10880020 	cmpeqi	r2,r2,8192
1000f974:	10803fcc 	andi	r2,r2,255
1000f978:	00000506 	br	1000f990 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f97c:	000f8c40 	call	1000f8c4 <alt_get_errno>
1000f980:	1007883a 	mov	r3,r2
1000f984:	00801444 	movi	r2,81
1000f988:	18800015 	stw	r2,0(r3)
    return 0;
1000f98c:	0005883a 	mov	r2,zero
  }
}
1000f990:	e037883a 	mov	sp,fp
1000f994:	dfc00117 	ldw	ra,4(sp)
1000f998:	df000017 	ldw	fp,0(sp)
1000f99c:	dec00204 	addi	sp,sp,8
1000f9a0:	f800283a 	ret

1000f9a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f9a4:	defffc04 	addi	sp,sp,-16
1000f9a8:	df000315 	stw	fp,12(sp)
1000f9ac:	df000304 	addi	fp,sp,12
1000f9b0:	e13fff15 	stw	r4,-4(fp)
1000f9b4:	e17ffe15 	stw	r5,-8(fp)
1000f9b8:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
1000f9bc:	e0fffe17 	ldw	r3,-8(fp)
1000f9c0:	e0bfff17 	ldw	r2,-4(fp)
1000f9c4:	18800c26 	beq	r3,r2,1000f9f8 <alt_load_section+0x54>
  {
    while( to != end )
1000f9c8:	00000806 	br	1000f9ec <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f9cc:	e0ffff17 	ldw	r3,-4(fp)
1000f9d0:	18800104 	addi	r2,r3,4
1000f9d4:	e0bfff15 	stw	r2,-4(fp)
1000f9d8:	e0bffe17 	ldw	r2,-8(fp)
1000f9dc:	11000104 	addi	r4,r2,4
1000f9e0:	e13ffe15 	stw	r4,-8(fp)
1000f9e4:	18c00017 	ldw	r3,0(r3)
1000f9e8:	10c00015 	stw	r3,0(r2)
    while( to != end )
1000f9ec:	e0fffe17 	ldw	r3,-8(fp)
1000f9f0:	e0bffd17 	ldw	r2,-12(fp)
1000f9f4:	18bff51e 	bne	r3,r2,1000f9cc <alt_load_section+0x28>
    }
  }
}
1000f9f8:	0001883a 	nop
1000f9fc:	e037883a 	mov	sp,fp
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00104 	addi	sp,sp,4
1000fa08:	f800283a 	ret

1000fa0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000fa0c:	defffe04 	addi	sp,sp,-8
1000fa10:	dfc00115 	stw	ra,4(sp)
1000fa14:	df000015 	stw	fp,0(sp)
1000fa18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000fa1c:	01840074 	movhi	r6,4097
1000fa20:	3193ee04 	addi	r6,r6,20408
1000fa24:	01440074 	movhi	r5,4097
1000fa28:	294b6704 	addi	r5,r5,11676
1000fa2c:	01040074 	movhi	r4,4097
1000fa30:	2113ee04 	addi	r4,r4,20408
1000fa34:	000f9a40 	call	1000f9a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fa38:	01840034 	movhi	r6,4096
1000fa3c:	31808e04 	addi	r6,r6,568
1000fa40:	01440034 	movhi	r5,4096
1000fa44:	29400804 	addi	r5,r5,32
1000fa48:	01040034 	movhi	r4,4096
1000fa4c:	21000804 	addi	r4,r4,32
1000fa50:	000f9a40 	call	1000f9a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fa54:	01840074 	movhi	r6,4097
1000fa58:	318b6704 	addi	r6,r6,11676
1000fa5c:	01440074 	movhi	r5,4097
1000fa60:	29479f04 	addi	r5,r5,7804
1000fa64:	01040074 	movhi	r4,4097
1000fa68:	21079f04 	addi	r4,r4,7804
1000fa6c:	000f9a40 	call	1000f9a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fa70:	0010e800 	call	10010e80 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fa74:	00110680 	call	10011068 <alt_icache_flush_all>
}
1000fa78:	0001883a 	nop
1000fa7c:	e037883a 	mov	sp,fp
1000fa80:	dfc00117 	ldw	ra,4(sp)
1000fa84:	df000017 	ldw	fp,0(sp)
1000fa88:	dec00204 	addi	sp,sp,8
1000fa8c:	f800283a 	ret

1000fa90 <alt_get_errno>:
{
1000fa90:	defffe04 	addi	sp,sp,-8
1000fa94:	dfc00115 	stw	ra,4(sp)
1000fa98:	df000015 	stw	fp,0(sp)
1000fa9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000faa0:	d0a00a17 	ldw	r2,-32728(gp)
1000faa4:	10000326 	beq	r2,zero,1000fab4 <alt_get_errno+0x24>
1000faa8:	d0a00a17 	ldw	r2,-32728(gp)
1000faac:	103ee83a 	callr	r2
1000fab0:	00000106 	br	1000fab8 <alt_get_errno+0x28>
1000fab4:	d0a89a04 	addi	r2,gp,-23960
}
1000fab8:	e037883a 	mov	sp,fp
1000fabc:	dfc00117 	ldw	ra,4(sp)
1000fac0:	df000017 	ldw	fp,0(sp)
1000fac4:	dec00204 	addi	sp,sp,8
1000fac8:	f800283a 	ret

1000facc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000facc:	defff904 	addi	sp,sp,-28
1000fad0:	dfc00615 	stw	ra,24(sp)
1000fad4:	df000515 	stw	fp,20(sp)
1000fad8:	df000504 	addi	fp,sp,20
1000fadc:	e13ffd15 	stw	r4,-12(fp)
1000fae0:	e17ffc15 	stw	r5,-16(fp)
1000fae4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fae8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000faec:	e0bffd17 	ldw	r2,-12(fp)
1000faf0:	10000616 	blt	r2,zero,1000fb0c <lseek+0x40>
1000faf4:	e0bffd17 	ldw	r2,-12(fp)
1000faf8:	10c00324 	muli	r3,r2,12
1000fafc:	00840074 	movhi	r2,4097
1000fb00:	108f6704 	addi	r2,r2,15772
1000fb04:	1885883a 	add	r2,r3,r2
1000fb08:	00000106 	br	1000fb10 <lseek+0x44>
1000fb0c:	0005883a 	mov	r2,zero
1000fb10:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
1000fb14:	e0bffe17 	ldw	r2,-8(fp)
1000fb18:	10001026 	beq	r2,zero,1000fb5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fb1c:	e0bffe17 	ldw	r2,-8(fp)
1000fb20:	10800017 	ldw	r2,0(r2)
1000fb24:	10800717 	ldw	r2,28(r2)
1000fb28:	10000926 	beq	r2,zero,1000fb50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fb2c:	e0bffe17 	ldw	r2,-8(fp)
1000fb30:	10800017 	ldw	r2,0(r2)
1000fb34:	10800717 	ldw	r2,28(r2)
1000fb38:	e1bffb17 	ldw	r6,-20(fp)
1000fb3c:	e17ffc17 	ldw	r5,-16(fp)
1000fb40:	e13ffe17 	ldw	r4,-8(fp)
1000fb44:	103ee83a 	callr	r2
1000fb48:	e0bfff15 	stw	r2,-4(fp)
1000fb4c:	00000506 	br	1000fb64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fb50:	00bfde84 	movi	r2,-134
1000fb54:	e0bfff15 	stw	r2,-4(fp)
1000fb58:	00000206 	br	1000fb64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fb5c:	00bfebc4 	movi	r2,-81
1000fb60:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
1000fb64:	e0bfff17 	ldw	r2,-4(fp)
1000fb68:	1000070e 	bge	r2,zero,1000fb88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000fb6c:	000fa900 	call	1000fa90 <alt_get_errno>
1000fb70:	1007883a 	mov	r3,r2
1000fb74:	e0bfff17 	ldw	r2,-4(fp)
1000fb78:	0085c83a 	sub	r2,zero,r2
1000fb7c:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fb80:	00bfffc4 	movi	r2,-1
1000fb84:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
1000fb88:	e0bfff17 	ldw	r2,-4(fp)
}
1000fb8c:	e037883a 	mov	sp,fp
1000fb90:	dfc00117 	ldw	ra,4(sp)
1000fb94:	df000017 	ldw	fp,0(sp)
1000fb98:	dec00204 	addi	sp,sp,8
1000fb9c:	f800283a 	ret

1000fba0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fba0:	defffd04 	addi	sp,sp,-12
1000fba4:	dfc00215 	stw	ra,8(sp)
1000fba8:	df000115 	stw	fp,4(sp)
1000fbac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fbb0:	0009883a 	mov	r4,zero
1000fbb4:	001003c0 	call	1001003c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fbb8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fbbc:	00100740 	call	10010074 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fbc0:	01840074 	movhi	r6,4097
1000fbc4:	318b5d04 	addi	r6,r6,11636
1000fbc8:	01440074 	movhi	r5,4097
1000fbcc:	294b5d04 	addi	r5,r5,11636
1000fbd0:	01040074 	movhi	r4,4097
1000fbd4:	210b5d04 	addi	r4,r4,11636
1000fbd8:	00113e00 	call	100113e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fbdc:	0010fa80 	call	10010fa8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fbe0:	01040074 	movhi	r4,4097
1000fbe4:	21040204 	addi	r4,r4,4104
1000fbe8:	0011bcc0 	call	10011bcc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000fbec:	d0a89c17 	ldw	r2,-23952(gp)
1000fbf0:	d0e89d17 	ldw	r3,-23948(gp)
1000fbf4:	d1289e17 	ldw	r4,-23944(gp)
1000fbf8:	200d883a 	mov	r6,r4
1000fbfc:	180b883a 	mov	r5,r3
1000fc00:	1009883a 	mov	r4,r2
1000fc04:	00010d40 	call	100010d4 <main>
1000fc08:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fc0c:	01000044 	movi	r4,1
1000fc10:	000f6dc0 	call	1000f6dc <close>
  exit (result);
1000fc14:	e13fff17 	ldw	r4,-4(fp)
1000fc18:	0011be00 	call	10011be0 <exit>

1000fc1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000fc1c:	defffe04 	addi	sp,sp,-8
1000fc20:	df000115 	stw	fp,4(sp)
1000fc24:	df000104 	addi	fp,sp,4
1000fc28:	e13fff15 	stw	r4,-4(fp)
}
1000fc2c:	0001883a 	nop
1000fc30:	e037883a 	mov	sp,fp
1000fc34:	df000017 	ldw	fp,0(sp)
1000fc38:	dec00104 	addi	sp,sp,4
1000fc3c:	f800283a 	ret

1000fc40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000fc40:	defffe04 	addi	sp,sp,-8
1000fc44:	df000115 	stw	fp,4(sp)
1000fc48:	df000104 	addi	fp,sp,4
1000fc4c:	e13fff15 	stw	r4,-4(fp)
}
1000fc50:	0001883a 	nop
1000fc54:	e037883a 	mov	sp,fp
1000fc58:	df000017 	ldw	fp,0(sp)
1000fc5c:	dec00104 	addi	sp,sp,4
1000fc60:	f800283a 	ret

1000fc64 <alt_get_errno>:
{
1000fc64:	defffe04 	addi	sp,sp,-8
1000fc68:	dfc00115 	stw	ra,4(sp)
1000fc6c:	df000015 	stw	fp,0(sp)
1000fc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fc74:	d0a00a17 	ldw	r2,-32728(gp)
1000fc78:	10000326 	beq	r2,zero,1000fc88 <alt_get_errno+0x24>
1000fc7c:	d0a00a17 	ldw	r2,-32728(gp)
1000fc80:	103ee83a 	callr	r2
1000fc84:	00000106 	br	1000fc8c <alt_get_errno+0x28>
1000fc88:	d0a89a04 	addi	r2,gp,-23960
}
1000fc8c:	e037883a 	mov	sp,fp
1000fc90:	dfc00117 	ldw	ra,4(sp)
1000fc94:	df000017 	ldw	fp,0(sp)
1000fc98:	dec00204 	addi	sp,sp,8
1000fc9c:	f800283a 	ret

1000fca0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fca0:	defff904 	addi	sp,sp,-28
1000fca4:	dfc00615 	stw	ra,24(sp)
1000fca8:	df000515 	stw	fp,20(sp)
1000fcac:	df000504 	addi	fp,sp,20
1000fcb0:	e13ffd15 	stw	r4,-12(fp)
1000fcb4:	e17ffc15 	stw	r5,-16(fp)
1000fcb8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fcbc:	e0bffd17 	ldw	r2,-12(fp)
1000fcc0:	10000616 	blt	r2,zero,1000fcdc <read+0x3c>
1000fcc4:	e0bffd17 	ldw	r2,-12(fp)
1000fcc8:	10c00324 	muli	r3,r2,12
1000fccc:	00840074 	movhi	r2,4097
1000fcd0:	108f6704 	addi	r2,r2,15772
1000fcd4:	1885883a 	add	r2,r3,r2
1000fcd8:	00000106 	br	1000fce0 <read+0x40>
1000fcdc:	0005883a 	mov	r2,zero
1000fce0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000fce4:	e0bfff17 	ldw	r2,-4(fp)
1000fce8:	10002226 	beq	r2,zero,1000fd74 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fcec:	e0bfff17 	ldw	r2,-4(fp)
1000fcf0:	10800217 	ldw	r2,8(r2)
1000fcf4:	108000cc 	andi	r2,r2,3
1000fcf8:	10800060 	cmpeqi	r2,r2,1
1000fcfc:	1000181e 	bne	r2,zero,1000fd60 <read+0xc0>
        (fd->dev->read))
1000fd00:	e0bfff17 	ldw	r2,-4(fp)
1000fd04:	10800017 	ldw	r2,0(r2)
1000fd08:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fd0c:	10001426 	beq	r2,zero,1000fd60 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fd10:	e0bfff17 	ldw	r2,-4(fp)
1000fd14:	10800017 	ldw	r2,0(r2)
1000fd18:	10800517 	ldw	r2,20(r2)
1000fd1c:	e0fffb17 	ldw	r3,-20(fp)
1000fd20:	180d883a 	mov	r6,r3
1000fd24:	e17ffc17 	ldw	r5,-16(fp)
1000fd28:	e13fff17 	ldw	r4,-4(fp)
1000fd2c:	103ee83a 	callr	r2
1000fd30:	e0bffe15 	stw	r2,-8(fp)
1000fd34:	e0bffe17 	ldw	r2,-8(fp)
1000fd38:	1000070e 	bge	r2,zero,1000fd58 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000fd3c:	000fc640 	call	1000fc64 <alt_get_errno>
1000fd40:	1007883a 	mov	r3,r2
1000fd44:	e0bffe17 	ldw	r2,-8(fp)
1000fd48:	0085c83a 	sub	r2,zero,r2
1000fd4c:	18800015 	stw	r2,0(r3)
          return -1;
1000fd50:	00bfffc4 	movi	r2,-1
1000fd54:	00000c06 	br	1000fd88 <read+0xe8>
        }
        return rval;
1000fd58:	e0bffe17 	ldw	r2,-8(fp)
1000fd5c:	00000a06 	br	1000fd88 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fd60:	000fc640 	call	1000fc64 <alt_get_errno>
1000fd64:	1007883a 	mov	r3,r2
1000fd68:	00800344 	movi	r2,13
1000fd6c:	18800015 	stw	r2,0(r3)
1000fd70:	00000406 	br	1000fd84 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fd74:	000fc640 	call	1000fc64 <alt_get_errno>
1000fd78:	1007883a 	mov	r3,r2
1000fd7c:	00801444 	movi	r2,81
1000fd80:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fd84:	00bfffc4 	movi	r2,-1
}
1000fd88:	e037883a 	mov	sp,fp
1000fd8c:	dfc00117 	ldw	ra,4(sp)
1000fd90:	df000017 	ldw	fp,0(sp)
1000fd94:	dec00204 	addi	sp,sp,8
1000fd98:	f800283a 	ret

1000fd9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fd9c:	defffe04 	addi	sp,sp,-8
1000fda0:	df000115 	stw	fp,4(sp)
1000fda4:	df000104 	addi	fp,sp,4
1000fda8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000fdac:	e0bfff17 	ldw	r2,-4(fp)
1000fdb0:	108000d0 	cmplti	r2,r2,3
1000fdb4:	10000a1e 	bne	r2,zero,1000fde0 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fdb8:	e0bfff17 	ldw	r2,-4(fp)
1000fdbc:	10c00324 	muli	r3,r2,12
1000fdc0:	00840074 	movhi	r2,4097
1000fdc4:	1885883a 	add	r2,r3,r2
1000fdc8:	100f6915 	stw	zero,15780(r2)
    alt_fd_list[fd].dev      = 0;
1000fdcc:	e0bfff17 	ldw	r2,-4(fp)
1000fdd0:	10c00324 	muli	r3,r2,12
1000fdd4:	00840074 	movhi	r2,4097
1000fdd8:	1885883a 	add	r2,r3,r2
1000fddc:	100f6715 	stw	zero,15772(r2)
  }
}
1000fde0:	0001883a 	nop
1000fde4:	e037883a 	mov	sp,fp
1000fde8:	df000017 	ldw	fp,0(sp)
1000fdec:	dec00104 	addi	sp,sp,4
1000fdf0:	f800283a 	ret

1000fdf4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fdf4:	defff904 	addi	sp,sp,-28
1000fdf8:	df000615 	stw	fp,24(sp)
1000fdfc:	df000604 	addi	fp,sp,24
1000fe00:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
1000fe04:	0005303a 	rdctl	r2,status
1000fe08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fe0c:	e0fffd17 	ldw	r3,-12(fp)
1000fe10:	00bfff84 	movi	r2,-2
1000fe14:	1884703a 	and	r2,r3,r2
1000fe18:	1001703a 	wrctl	status,r2
  return context;
1000fe1c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000fe20:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000fe24:	d0a00b17 	ldw	r2,-32724(gp)
1000fe28:	10c000c4 	addi	r3,r2,3
1000fe2c:	00bfff04 	movi	r2,-4
1000fe30:	1884703a 	and	r2,r3,r2
1000fe34:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fe38:	d0e00b17 	ldw	r3,-32724(gp)
1000fe3c:	e0bffa17 	ldw	r2,-24(fp)
1000fe40:	1887883a 	add	r3,r3,r2
1000fe44:	00860034 	movhi	r2,6144
1000fe48:	10800004 	addi	r2,r2,0
1000fe4c:	10c0062e 	bgeu	r2,r3,1000fe68 <sbrk+0x74>
1000fe50:	e0bfff17 	ldw	r2,-4(fp)
1000fe54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
1000fe58:	e0bffc17 	ldw	r2,-16(fp)
1000fe5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fe60:	00bfffc4 	movi	r2,-1
1000fe64:	00000b06 	br	1000fe94 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000fe68:	d0a00b17 	ldw	r2,-32724(gp)
1000fe6c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
1000fe70:	d0e00b17 	ldw	r3,-32724(gp)
1000fe74:	e0bffa17 	ldw	r2,-24(fp)
1000fe78:	1885883a 	add	r2,r3,r2
1000fe7c:	d0a00b15 	stw	r2,-32724(gp)
1000fe80:	e0bfff17 	ldw	r2,-4(fp)
1000fe84:	e0bffb15 	stw	r2,-20(fp)
1000fe88:	e0bffb17 	ldw	r2,-20(fp)
1000fe8c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fe90:	e0bffe17 	ldw	r2,-8(fp)
} 
1000fe94:	e037883a 	mov	sp,fp
1000fe98:	df000017 	ldw	fp,0(sp)
1000fe9c:	dec00104 	addi	sp,sp,4
1000fea0:	f800283a 	ret

1000fea4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000fea4:	defffd04 	addi	sp,sp,-12
1000fea8:	dfc00215 	stw	ra,8(sp)
1000feac:	df000115 	stw	fp,4(sp)
1000feb0:	df000104 	addi	fp,sp,4
1000feb4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000feb8:	e13fff17 	ldw	r4,-4(fp)
1000febc:	0010d580 	call	10010d58 <alt_busy_sleep>
}
1000fec0:	e037883a 	mov	sp,fp
1000fec4:	dfc00117 	ldw	ra,4(sp)
1000fec8:	df000017 	ldw	fp,0(sp)
1000fecc:	dec00204 	addi	sp,sp,8
1000fed0:	f800283a 	ret

1000fed4 <alt_get_errno>:
{
1000fed4:	defffe04 	addi	sp,sp,-8
1000fed8:	dfc00115 	stw	ra,4(sp)
1000fedc:	df000015 	stw	fp,0(sp)
1000fee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fee4:	d0a00a17 	ldw	r2,-32728(gp)
1000fee8:	10000326 	beq	r2,zero,1000fef8 <alt_get_errno+0x24>
1000feec:	d0a00a17 	ldw	r2,-32728(gp)
1000fef0:	103ee83a 	callr	r2
1000fef4:	00000106 	br	1000fefc <alt_get_errno+0x28>
1000fef8:	d0a89a04 	addi	r2,gp,-23960
}
1000fefc:	e037883a 	mov	sp,fp
1000ff00:	dfc00117 	ldw	ra,4(sp)
1000ff04:	df000017 	ldw	fp,0(sp)
1000ff08:	dec00204 	addi	sp,sp,8
1000ff0c:	f800283a 	ret

1000ff10 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000ff10:	defff904 	addi	sp,sp,-28
1000ff14:	dfc00615 	stw	ra,24(sp)
1000ff18:	df000515 	stw	fp,20(sp)
1000ff1c:	df000504 	addi	fp,sp,20
1000ff20:	e13ffd15 	stw	r4,-12(fp)
1000ff24:	e17ffc15 	stw	r5,-16(fp)
1000ff28:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ff2c:	e0bffd17 	ldw	r2,-12(fp)
1000ff30:	10000616 	blt	r2,zero,1000ff4c <write+0x3c>
1000ff34:	e0bffd17 	ldw	r2,-12(fp)
1000ff38:	10c00324 	muli	r3,r2,12
1000ff3c:	00840074 	movhi	r2,4097
1000ff40:	108f6704 	addi	r2,r2,15772
1000ff44:	1885883a 	add	r2,r3,r2
1000ff48:	00000106 	br	1000ff50 <write+0x40>
1000ff4c:	0005883a 	mov	r2,zero
1000ff50:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000ff54:	e0bfff17 	ldw	r2,-4(fp)
1000ff58:	10002126 	beq	r2,zero,1000ffe0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000ff5c:	e0bfff17 	ldw	r2,-4(fp)
1000ff60:	10800217 	ldw	r2,8(r2)
1000ff64:	108000cc 	andi	r2,r2,3
1000ff68:	10001826 	beq	r2,zero,1000ffcc <write+0xbc>
1000ff6c:	e0bfff17 	ldw	r2,-4(fp)
1000ff70:	10800017 	ldw	r2,0(r2)
1000ff74:	10800617 	ldw	r2,24(r2)
1000ff78:	10001426 	beq	r2,zero,1000ffcc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000ff7c:	e0bfff17 	ldw	r2,-4(fp)
1000ff80:	10800017 	ldw	r2,0(r2)
1000ff84:	10800617 	ldw	r2,24(r2)
1000ff88:	e0fffb17 	ldw	r3,-20(fp)
1000ff8c:	180d883a 	mov	r6,r3
1000ff90:	e17ffc17 	ldw	r5,-16(fp)
1000ff94:	e13fff17 	ldw	r4,-4(fp)
1000ff98:	103ee83a 	callr	r2
1000ff9c:	e0bffe15 	stw	r2,-8(fp)
1000ffa0:	e0bffe17 	ldw	r2,-8(fp)
1000ffa4:	1000070e 	bge	r2,zero,1000ffc4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000ffa8:	000fed40 	call	1000fed4 <alt_get_errno>
1000ffac:	1007883a 	mov	r3,r2
1000ffb0:	e0bffe17 	ldw	r2,-8(fp)
1000ffb4:	0085c83a 	sub	r2,zero,r2
1000ffb8:	18800015 	stw	r2,0(r3)
        return -1;
1000ffbc:	00bfffc4 	movi	r2,-1
1000ffc0:	00000c06 	br	1000fff4 <write+0xe4>
      }
      return rval;
1000ffc4:	e0bffe17 	ldw	r2,-8(fp)
1000ffc8:	00000a06 	br	1000fff4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000ffcc:	000fed40 	call	1000fed4 <alt_get_errno>
1000ffd0:	1007883a 	mov	r3,r2
1000ffd4:	00800344 	movi	r2,13
1000ffd8:	18800015 	stw	r2,0(r3)
1000ffdc:	00000406 	br	1000fff0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000ffe0:	000fed40 	call	1000fed4 <alt_get_errno>
1000ffe4:	1007883a 	mov	r3,r2
1000ffe8:	00801444 	movi	r2,81
1000ffec:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fff0:	00bfffc4 	movi	r2,-1
}
1000fff4:	e037883a 	mov	sp,fp
1000fff8:	dfc00117 	ldw	ra,4(sp)
1000fffc:	df000017 	ldw	fp,0(sp)
10010000:	dec00204 	addi	sp,sp,8
10010004:	f800283a 	ret

10010008 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010008:	defffd04 	addi	sp,sp,-12
1001000c:	dfc00215 	stw	ra,8(sp)
10010010:	df000115 	stw	fp,4(sp)
10010014:	df000104 	addi	fp,sp,4
10010018:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001001c:	d1600704 	addi	r5,gp,-32740
10010020:	e13fff17 	ldw	r4,-4(fp)
10010024:	0010f040 	call	10010f04 <alt_dev_llist_insert>
}
10010028:	e037883a 	mov	sp,fp
1001002c:	dfc00117 	ldw	ra,4(sp)
10010030:	df000017 	ldw	fp,0(sp)
10010034:	dec00204 	addi	sp,sp,8
10010038:	f800283a 	ret

1001003c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001003c:	defffd04 	addi	sp,sp,-12
10010040:	dfc00215 	stw	ra,8(sp)
10010044:	df000115 	stw	fp,4(sp)
10010048:	df000104 	addi	fp,sp,4
1001004c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010050:	00118480 	call	10011848 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010054:	00800044 	movi	r2,1
10010058:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1001005c:	0001883a 	nop
10010060:	e037883a 	mov	sp,fp
10010064:	dfc00117 	ldw	ra,4(sp)
10010068:	df000017 	ldw	fp,0(sp)
1001006c:	dec00204 	addi	sp,sp,8
10010070:	f800283a 	ret

10010074 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010074:	defffe04 	addi	sp,sp,-8
10010078:	dfc00115 	stw	ra,4(sp)
1001007c:	df000015 	stw	fp,0(sp)
10010080:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
10010084:	01c0fa04 	movi	r7,1000
10010088:	01800044 	movi	r6,1
1001008c:	000b883a 	mov	r5,zero
10010090:	01000804 	movi	r4,32
10010094:	0010bb00 	call	10010bb0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010098:	01800144 	movi	r6,5
1001009c:	000b883a 	mov	r5,zero
100100a0:	01040074 	movhi	r4,4097
100100a4:	210fd104 	addi	r4,r4,16196
100100a8:	00102380 	call	10010238 <altera_avalon_jtag_uart_init>
100100ac:	01040074 	movhi	r4,4097
100100b0:	210fc704 	addi	r4,r4,16156
100100b4:	00100080 	call	10010008 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100100b8:	0001883a 	nop
}
100100bc:	0001883a 	nop
100100c0:	e037883a 	mov	sp,fp
100100c4:	dfc00117 	ldw	ra,4(sp)
100100c8:	df000017 	ldw	fp,0(sp)
100100cc:	dec00204 	addi	sp,sp,8
100100d0:	f800283a 	ret

100100d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100100d4:	defffa04 	addi	sp,sp,-24
100100d8:	dfc00515 	stw	ra,20(sp)
100100dc:	df000415 	stw	fp,16(sp)
100100e0:	df000404 	addi	fp,sp,16
100100e4:	e13ffe15 	stw	r4,-8(fp)
100100e8:	e17ffd15 	stw	r5,-12(fp)
100100ec:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100100f0:	e0bffe17 	ldw	r2,-8(fp)
100100f4:	10800017 	ldw	r2,0(r2)
100100f8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100100fc:	e0bfff17 	ldw	r2,-4(fp)
10010100:	10c00a04 	addi	r3,r2,40
10010104:	e0bffe17 	ldw	r2,-8(fp)
10010108:	10800217 	ldw	r2,8(r2)
1001010c:	100f883a 	mov	r7,r2
10010110:	e1bffc17 	ldw	r6,-16(fp)
10010114:	e17ffd17 	ldw	r5,-12(fp)
10010118:	1809883a 	mov	r4,r3
1001011c:	00106f80 	call	100106f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010120:	e037883a 	mov	sp,fp
10010124:	dfc00117 	ldw	ra,4(sp)
10010128:	df000017 	ldw	fp,0(sp)
1001012c:	dec00204 	addi	sp,sp,8
10010130:	f800283a 	ret

10010134 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010134:	defffa04 	addi	sp,sp,-24
10010138:	dfc00515 	stw	ra,20(sp)
1001013c:	df000415 	stw	fp,16(sp)
10010140:	df000404 	addi	fp,sp,16
10010144:	e13ffe15 	stw	r4,-8(fp)
10010148:	e17ffd15 	stw	r5,-12(fp)
1001014c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010150:	e0bffe17 	ldw	r2,-8(fp)
10010154:	10800017 	ldw	r2,0(r2)
10010158:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001015c:	e0bfff17 	ldw	r2,-4(fp)
10010160:	10c00a04 	addi	r3,r2,40
10010164:	e0bffe17 	ldw	r2,-8(fp)
10010168:	10800217 	ldw	r2,8(r2)
1001016c:	100f883a 	mov	r7,r2
10010170:	e1bffc17 	ldw	r6,-16(fp)
10010174:	e17ffd17 	ldw	r5,-12(fp)
10010178:	1809883a 	mov	r4,r3
1001017c:	00109140 	call	10010914 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010180:	e037883a 	mov	sp,fp
10010184:	dfc00117 	ldw	ra,4(sp)
10010188:	df000017 	ldw	fp,0(sp)
1001018c:	dec00204 	addi	sp,sp,8
10010190:	f800283a 	ret

10010194 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010194:	defffc04 	addi	sp,sp,-16
10010198:	dfc00315 	stw	ra,12(sp)
1001019c:	df000215 	stw	fp,8(sp)
100101a0:	df000204 	addi	fp,sp,8
100101a4:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100101a8:	e0bffe17 	ldw	r2,-8(fp)
100101ac:	10800017 	ldw	r2,0(r2)
100101b0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100101b4:	e0bfff17 	ldw	r2,-4(fp)
100101b8:	10c00a04 	addi	r3,r2,40
100101bc:	e0bffe17 	ldw	r2,-8(fp)
100101c0:	10800217 	ldw	r2,8(r2)
100101c4:	100b883a 	mov	r5,r2
100101c8:	1809883a 	mov	r4,r3
100101cc:	001059c0 	call	1001059c <altera_avalon_jtag_uart_close>
}
100101d0:	e037883a 	mov	sp,fp
100101d4:	dfc00117 	ldw	ra,4(sp)
100101d8:	df000017 	ldw	fp,0(sp)
100101dc:	dec00204 	addi	sp,sp,8
100101e0:	f800283a 	ret

100101e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100101e4:	defffa04 	addi	sp,sp,-24
100101e8:	dfc00515 	stw	ra,20(sp)
100101ec:	df000415 	stw	fp,16(sp)
100101f0:	df000404 	addi	fp,sp,16
100101f4:	e13ffe15 	stw	r4,-8(fp)
100101f8:	e17ffd15 	stw	r5,-12(fp)
100101fc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010200:	e0bffe17 	ldw	r2,-8(fp)
10010204:	10800017 	ldw	r2,0(r2)
10010208:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001020c:	e0bfff17 	ldw	r2,-4(fp)
10010210:	10800a04 	addi	r2,r2,40
10010214:	e1bffc17 	ldw	r6,-16(fp)
10010218:	e17ffd17 	ldw	r5,-12(fp)
1001021c:	1009883a 	mov	r4,r2
10010220:	00106040 	call	10010604 <altera_avalon_jtag_uart_ioctl>
}
10010224:	e037883a 	mov	sp,fp
10010228:	dfc00117 	ldw	ra,4(sp)
1001022c:	df000017 	ldw	fp,0(sp)
10010230:	dec00204 	addi	sp,sp,8
10010234:	f800283a 	ret

10010238 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010238:	defffa04 	addi	sp,sp,-24
1001023c:	dfc00515 	stw	ra,20(sp)
10010240:	df000415 	stw	fp,16(sp)
10010244:	df000404 	addi	fp,sp,16
10010248:	e13fff15 	stw	r4,-4(fp)
1001024c:	e17ffe15 	stw	r5,-8(fp)
10010250:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010254:	e0bfff17 	ldw	r2,-4(fp)
10010258:	00c00044 	movi	r3,1
1001025c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010260:	e0bfff17 	ldw	r2,-4(fp)
10010264:	10800017 	ldw	r2,0(r2)
10010268:	10800104 	addi	r2,r2,4
1001026c:	1007883a 	mov	r3,r2
10010270:	e0bfff17 	ldw	r2,-4(fp)
10010274:	10800817 	ldw	r2,32(r2)
10010278:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001027c:	e0bffe17 	ldw	r2,-8(fp)
10010280:	e0fffd17 	ldw	r3,-12(fp)
10010284:	d8000015 	stw	zero,0(sp)
10010288:	e1ffff17 	ldw	r7,-4(fp)
1001028c:	01840074 	movhi	r6,4097
10010290:	3180be04 	addi	r6,r6,760
10010294:	180b883a 	mov	r5,r3
10010298:	1009883a 	mov	r4,r2
1001029c:	001109c0 	call	1001109c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100102a0:	e0bfff17 	ldw	r2,-4(fp)
100102a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100102a8:	e0bfff17 	ldw	r2,-4(fp)
100102ac:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100102b0:	d0e8a017 	ldw	r3,-23936(gp)
100102b4:	e1ffff17 	ldw	r7,-4(fp)
100102b8:	01840074 	movhi	r6,4097
100102bc:	31813f04 	addi	r6,r6,1276
100102c0:	180b883a 	mov	r5,r3
100102c4:	1009883a 	mov	r4,r2
100102c8:	0010c2c0 	call	10010c2c <alt_alarm_start>
100102cc:	1000040e 	bge	r2,zero,100102e0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100102d0:	e0ffff17 	ldw	r3,-4(fp)
100102d4:	00a00034 	movhi	r2,32768
100102d8:	10bfffc4 	addi	r2,r2,-1
100102dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100102e0:	0001883a 	nop
100102e4:	e037883a 	mov	sp,fp
100102e8:	dfc00117 	ldw	ra,4(sp)
100102ec:	df000017 	ldw	fp,0(sp)
100102f0:	dec00204 	addi	sp,sp,8
100102f4:	f800283a 	ret

100102f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100102f8:	defff804 	addi	sp,sp,-32
100102fc:	df000715 	stw	fp,28(sp)
10010300:	df000704 	addi	fp,sp,28
10010304:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010308:	e0bff917 	ldw	r2,-28(fp)
1001030c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
10010310:	e0bffd17 	ldw	r2,-12(fp)
10010314:	10800017 	ldw	r2,0(r2)
10010318:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001031c:	e0bffc17 	ldw	r2,-16(fp)
10010320:	10800104 	addi	r2,r2,4
10010324:	10800037 	ldwio	r2,0(r2)
10010328:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001032c:	e0bffb17 	ldw	r2,-20(fp)
10010330:	1080c00c 	andi	r2,r2,768
10010334:	10006b26 	beq	r2,zero,100104e4 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010338:	e0bffb17 	ldw	r2,-20(fp)
1001033c:	1080400c 	andi	r2,r2,256
10010340:	10003426 	beq	r2,zero,10010414 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010344:	00800074 	movhi	r2,1
10010348:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001034c:	e0bffd17 	ldw	r2,-12(fp)
10010350:	10800a17 	ldw	r2,40(r2)
10010354:	10800044 	addi	r2,r2,1
10010358:	1081ffcc 	andi	r2,r2,2047
1001035c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
10010360:	e0bffd17 	ldw	r2,-12(fp)
10010364:	10800b17 	ldw	r2,44(r2)
10010368:	e0fffa17 	ldw	r3,-24(fp)
1001036c:	18801426 	beq	r3,r2,100103c0 <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010370:	e0bffc17 	ldw	r2,-16(fp)
10010374:	10800037 	ldwio	r2,0(r2)
10010378:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001037c:	e0bfff17 	ldw	r2,-4(fp)
10010380:	10a0000c 	andi	r2,r2,32768
10010384:	10001026 	beq	r2,zero,100103c8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010388:	e0bffd17 	ldw	r2,-12(fp)
1001038c:	10800a17 	ldw	r2,40(r2)
10010390:	e0ffff17 	ldw	r3,-4(fp)
10010394:	1809883a 	mov	r4,r3
10010398:	e0fffd17 	ldw	r3,-12(fp)
1001039c:	1885883a 	add	r2,r3,r2
100103a0:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100103a4:	e0bffd17 	ldw	r2,-12(fp)
100103a8:	10800a17 	ldw	r2,40(r2)
100103ac:	10800044 	addi	r2,r2,1
100103b0:	10c1ffcc 	andi	r3,r2,2047
100103b4:	e0bffd17 	ldw	r2,-12(fp)
100103b8:	10c00a15 	stw	r3,40(r2)
      {
100103bc:	003fe306 	br	1001034c <altera_avalon_jtag_uart_irq+0x54>
          break;
100103c0:	0001883a 	nop
100103c4:	00000106 	br	100103cc <altera_avalon_jtag_uart_irq+0xd4>
          break;
100103c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100103cc:	e0bfff17 	ldw	r2,-4(fp)
100103d0:	10bfffec 	andhi	r2,r2,65535
100103d4:	10000f26 	beq	r2,zero,10010414 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100103d8:	e0bffd17 	ldw	r2,-12(fp)
100103dc:	10c00817 	ldw	r3,32(r2)
100103e0:	00bfff84 	movi	r2,-2
100103e4:	1886703a 	and	r3,r3,r2
100103e8:	e0bffd17 	ldw	r2,-12(fp)
100103ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100103f0:	e0bffc17 	ldw	r2,-16(fp)
100103f4:	10800104 	addi	r2,r2,4
100103f8:	1007883a 	mov	r3,r2
100103fc:	e0bffd17 	ldw	r2,-12(fp)
10010400:	10800817 	ldw	r2,32(r2)
10010404:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010408:	e0bffc17 	ldw	r2,-16(fp)
1001040c:	10800104 	addi	r2,r2,4
10010410:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010414:	e0bffb17 	ldw	r2,-20(fp)
10010418:	1080800c 	andi	r2,r2,512
1001041c:	103fbf26 	beq	r2,zero,1001031c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010420:	e0bffb17 	ldw	r2,-20(fp)
10010424:	1004d43a 	srli	r2,r2,16
10010428:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1001042c:	00001306 	br	1001047c <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010430:	e0bffc17 	ldw	r2,-16(fp)
10010434:	e0fffd17 	ldw	r3,-12(fp)
10010438:	18c00d17 	ldw	r3,52(r3)
1001043c:	e13ffd17 	ldw	r4,-12(fp)
10010440:	20c7883a 	add	r3,r4,r3
10010444:	18c20e03 	ldbu	r3,2104(r3)
10010448:	18c03fcc 	andi	r3,r3,255
1001044c:	18c0201c 	xori	r3,r3,128
10010450:	18ffe004 	addi	r3,r3,-128
10010454:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010458:	e0bffd17 	ldw	r2,-12(fp)
1001045c:	10800d17 	ldw	r2,52(r2)
10010460:	10800044 	addi	r2,r2,1
10010464:	10c1ffcc 	andi	r3,r2,2047
10010468:	e0bffd17 	ldw	r2,-12(fp)
1001046c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010470:	e0bffe17 	ldw	r2,-8(fp)
10010474:	10bfffc4 	addi	r2,r2,-1
10010478:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
1001047c:	e0bffe17 	ldw	r2,-8(fp)
10010480:	10000526 	beq	r2,zero,10010498 <altera_avalon_jtag_uart_irq+0x1a0>
10010484:	e0bffd17 	ldw	r2,-12(fp)
10010488:	10c00d17 	ldw	r3,52(r2)
1001048c:	e0bffd17 	ldw	r2,-12(fp)
10010490:	10800c17 	ldw	r2,48(r2)
10010494:	18bfe61e 	bne	r3,r2,10010430 <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
10010498:	e0bffe17 	ldw	r2,-8(fp)
1001049c:	103f9f26 	beq	r2,zero,1001031c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100104a0:	e0bffd17 	ldw	r2,-12(fp)
100104a4:	10c00817 	ldw	r3,32(r2)
100104a8:	00bfff44 	movi	r2,-3
100104ac:	1886703a 	and	r3,r3,r2
100104b0:	e0bffd17 	ldw	r2,-12(fp)
100104b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100104b8:	e0bffd17 	ldw	r2,-12(fp)
100104bc:	10800017 	ldw	r2,0(r2)
100104c0:	10800104 	addi	r2,r2,4
100104c4:	1007883a 	mov	r3,r2
100104c8:	e0bffd17 	ldw	r2,-12(fp)
100104cc:	10800817 	ldw	r2,32(r2)
100104d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100104d4:	e0bffc17 	ldw	r2,-16(fp)
100104d8:	10800104 	addi	r2,r2,4
100104dc:	10800037 	ldwio	r2,0(r2)
  {
100104e0:	003f8e06 	br	1001031c <altera_avalon_jtag_uart_irq+0x24>
      break;
100104e4:	0001883a 	nop
      }
    }
  }
}
100104e8:	0001883a 	nop
100104ec:	e037883a 	mov	sp,fp
100104f0:	df000017 	ldw	fp,0(sp)
100104f4:	dec00104 	addi	sp,sp,4
100104f8:	f800283a 	ret

100104fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100104fc:	defffc04 	addi	sp,sp,-16
10010500:	df000315 	stw	fp,12(sp)
10010504:	df000304 	addi	fp,sp,12
10010508:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001050c:	e0bffd17 	ldw	r2,-12(fp)
10010510:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010514:	e0bfff17 	ldw	r2,-4(fp)
10010518:	10800017 	ldw	r2,0(r2)
1001051c:	10800104 	addi	r2,r2,4
10010520:	10800037 	ldwio	r2,0(r2)
10010524:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010528:	e0bffe17 	ldw	r2,-8(fp)
1001052c:	1081000c 	andi	r2,r2,1024
10010530:	10000b26 	beq	r2,zero,10010560 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010534:	e0bfff17 	ldw	r2,-4(fp)
10010538:	10800017 	ldw	r2,0(r2)
1001053c:	10800104 	addi	r2,r2,4
10010540:	1007883a 	mov	r3,r2
10010544:	e0bfff17 	ldw	r2,-4(fp)
10010548:	10800817 	ldw	r2,32(r2)
1001054c:	10810014 	ori	r2,r2,1024
10010550:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010554:	e0bfff17 	ldw	r2,-4(fp)
10010558:	10000915 	stw	zero,36(r2)
1001055c:	00000a06 	br	10010588 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010560:	e0bfff17 	ldw	r2,-4(fp)
10010564:	10c00917 	ldw	r3,36(r2)
10010568:	00a00034 	movhi	r2,32768
1001056c:	10bfff04 	addi	r2,r2,-4
10010570:	10c00536 	bltu	r2,r3,10010588 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010574:	e0bfff17 	ldw	r2,-4(fp)
10010578:	10800917 	ldw	r2,36(r2)
1001057c:	10c00044 	addi	r3,r2,1
10010580:	e0bfff17 	ldw	r2,-4(fp)
10010584:	10c00915 	stw	r3,36(r2)
10010588:	d0a8a017 	ldw	r2,-23936(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1001058c:	e037883a 	mov	sp,fp
10010590:	df000017 	ldw	fp,0(sp)
10010594:	dec00104 	addi	sp,sp,4
10010598:	f800283a 	ret

1001059c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001059c:	defffd04 	addi	sp,sp,-12
100105a0:	df000215 	stw	fp,8(sp)
100105a4:	df000204 	addi	fp,sp,8
100105a8:	e13fff15 	stw	r4,-4(fp)
100105ac:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100105b0:	00000506 	br	100105c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100105b4:	e0bffe17 	ldw	r2,-8(fp)
100105b8:	1090000c 	andi	r2,r2,16384
100105bc:	10000226 	beq	r2,zero,100105c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100105c0:	00bffd44 	movi	r2,-11
100105c4:	00000b06 	br	100105f4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100105c8:	e0bfff17 	ldw	r2,-4(fp)
100105cc:	10c00d17 	ldw	r3,52(r2)
100105d0:	e0bfff17 	ldw	r2,-4(fp)
100105d4:	10800c17 	ldw	r2,48(r2)
100105d8:	18800526 	beq	r3,r2,100105f0 <altera_avalon_jtag_uart_close+0x54>
100105dc:	e0bfff17 	ldw	r2,-4(fp)
100105e0:	10c00917 	ldw	r3,36(r2)
100105e4:	e0bfff17 	ldw	r2,-4(fp)
100105e8:	10800117 	ldw	r2,4(r2)
100105ec:	18bff136 	bltu	r3,r2,100105b4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
100105f0:	0005883a 	mov	r2,zero
}
100105f4:	e037883a 	mov	sp,fp
100105f8:	df000017 	ldw	fp,0(sp)
100105fc:	dec00104 	addi	sp,sp,4
10010600:	f800283a 	ret

10010604 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010604:	defffa04 	addi	sp,sp,-24
10010608:	df000515 	stw	fp,20(sp)
1001060c:	df000504 	addi	fp,sp,20
10010610:	e13ffd15 	stw	r4,-12(fp)
10010614:	e17ffc15 	stw	r5,-16(fp)
10010618:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
1001061c:	00bff9c4 	movi	r2,-25
10010620:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
10010624:	e0bffc17 	ldw	r2,-16(fp)
10010628:	109a8060 	cmpeqi	r2,r2,27137
1001062c:	1000041e 	bne	r2,zero,10010640 <altera_avalon_jtag_uart_ioctl+0x3c>
10010630:	e0bffc17 	ldw	r2,-16(fp)
10010634:	109a80a0 	cmpeqi	r2,r2,27138
10010638:	1000181e 	bne	r2,zero,1001069c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1001063c:	00002906 	br	100106e4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
10010640:	e0bffd17 	ldw	r2,-12(fp)
10010644:	10c00117 	ldw	r3,4(r2)
10010648:	00a00034 	movhi	r2,32768
1001064c:	10bfffc4 	addi	r2,r2,-1
10010650:	18802126 	beq	r3,r2,100106d8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
10010654:	e0bffb17 	ldw	r2,-20(fp)
10010658:	10800017 	ldw	r2,0(r2)
1001065c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010660:	e0bffe17 	ldw	r2,-8(fp)
10010664:	10800090 	cmplti	r2,r2,2
10010668:	1000061e 	bne	r2,zero,10010684 <altera_avalon_jtag_uart_ioctl+0x80>
1001066c:	e0fffe17 	ldw	r3,-8(fp)
10010670:	00a00034 	movhi	r2,32768
10010674:	10bfffc4 	addi	r2,r2,-1
10010678:	18800226 	beq	r3,r2,10010684 <altera_avalon_jtag_uart_ioctl+0x80>
1001067c:	e0bffe17 	ldw	r2,-8(fp)
10010680:	00000206 	br	1001068c <altera_avalon_jtag_uart_ioctl+0x88>
10010684:	00a00034 	movhi	r2,32768
10010688:	10bfff84 	addi	r2,r2,-2
1001068c:	e0fffd17 	ldw	r3,-12(fp)
10010690:	18800115 	stw	r2,4(r3)
      rc = 0;
10010694:	e03fff15 	stw	zero,-4(fp)
    break;
10010698:	00000f06 	br	100106d8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
1001069c:	e0bffd17 	ldw	r2,-12(fp)
100106a0:	10c00117 	ldw	r3,4(r2)
100106a4:	00a00034 	movhi	r2,32768
100106a8:	10bfffc4 	addi	r2,r2,-1
100106ac:	18800c26 	beq	r3,r2,100106e0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100106b0:	e0bffd17 	ldw	r2,-12(fp)
100106b4:	10c00917 	ldw	r3,36(r2)
100106b8:	e0bffd17 	ldw	r2,-12(fp)
100106bc:	10800117 	ldw	r2,4(r2)
100106c0:	1885803a 	cmpltu	r2,r3,r2
100106c4:	10c03fcc 	andi	r3,r2,255
100106c8:	e0bffb17 	ldw	r2,-20(fp)
100106cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
100106d0:	e03fff15 	stw	zero,-4(fp)
    break;
100106d4:	00000206 	br	100106e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
100106d8:	0001883a 	nop
100106dc:	00000106 	br	100106e4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
100106e0:	0001883a 	nop
  }

  return rc;
100106e4:	e0bfff17 	ldw	r2,-4(fp)
}
100106e8:	e037883a 	mov	sp,fp
100106ec:	df000017 	ldw	fp,0(sp)
100106f0:	dec00104 	addi	sp,sp,4
100106f4:	f800283a 	ret

100106f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100106f8:	defff304 	addi	sp,sp,-52
100106fc:	dfc00c15 	stw	ra,48(sp)
10010700:	df000b15 	stw	fp,44(sp)
10010704:	df000b04 	addi	fp,sp,44
10010708:	e13ff815 	stw	r4,-32(fp)
1001070c:	e17ff715 	stw	r5,-36(fp)
10010710:	e1bff615 	stw	r6,-40(fp)
10010714:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
10010718:	e0bff717 	ldw	r2,-36(fp)
1001071c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010720:	00004706 	br	10010840 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010724:	e0bff817 	ldw	r2,-32(fp)
10010728:	10800a17 	ldw	r2,40(r2)
1001072c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
10010730:	e0bff817 	ldw	r2,-32(fp)
10010734:	10800b17 	ldw	r2,44(r2)
10010738:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
1001073c:	e0fffd17 	ldw	r3,-12(fp)
10010740:	e0bffc17 	ldw	r2,-16(fp)
10010744:	18800536 	bltu	r3,r2,1001075c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010748:	e0fffd17 	ldw	r3,-12(fp)
1001074c:	e0bffc17 	ldw	r2,-16(fp)
10010750:	1885c83a 	sub	r2,r3,r2
10010754:	e0bffe15 	stw	r2,-8(fp)
10010758:	00000406 	br	1001076c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1001075c:	00c20004 	movi	r3,2048
10010760:	e0bffc17 	ldw	r2,-16(fp)
10010764:	1885c83a 	sub	r2,r3,r2
10010768:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
1001076c:	e0bffe17 	ldw	r2,-8(fp)
10010770:	10001e26 	beq	r2,zero,100107ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010774:	e0fff617 	ldw	r3,-40(fp)
10010778:	e0bffe17 	ldw	r2,-8(fp)
1001077c:	1880022e 	bgeu	r3,r2,10010788 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010780:	e0bff617 	ldw	r2,-40(fp)
10010784:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010788:	e0bff817 	ldw	r2,-32(fp)
1001078c:	10c00e04 	addi	r3,r2,56
10010790:	e0bffc17 	ldw	r2,-16(fp)
10010794:	1885883a 	add	r2,r3,r2
10010798:	e1bffe17 	ldw	r6,-8(fp)
1001079c:	100b883a 	mov	r5,r2
100107a0:	e13fff17 	ldw	r4,-4(fp)
100107a4:	00030480 	call	10003048 <memcpy>
      ptr   += n;
100107a8:	e0ffff17 	ldw	r3,-4(fp)
100107ac:	e0bffe17 	ldw	r2,-8(fp)
100107b0:	1885883a 	add	r2,r3,r2
100107b4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
100107b8:	e0fff617 	ldw	r3,-40(fp)
100107bc:	e0bffe17 	ldw	r2,-8(fp)
100107c0:	1885c83a 	sub	r2,r3,r2
100107c4:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100107c8:	e0fffc17 	ldw	r3,-16(fp)
100107cc:	e0bffe17 	ldw	r2,-8(fp)
100107d0:	1885883a 	add	r2,r3,r2
100107d4:	10c1ffcc 	andi	r3,r2,2047
100107d8:	e0bff817 	ldw	r2,-32(fp)
100107dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100107e0:	e0bff617 	ldw	r2,-40(fp)
100107e4:	00bfcf16 	blt	zero,r2,10010724 <altera_avalon_jtag_uart_read+0x2c>
100107e8:	00000106 	br	100107f0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
100107ec:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
100107f0:	e0ffff17 	ldw	r3,-4(fp)
100107f4:	e0bff717 	ldw	r2,-36(fp)
100107f8:	1880141e 	bne	r3,r2,1001084c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100107fc:	e0bff517 	ldw	r2,-44(fp)
10010800:	1090000c 	andi	r2,r2,16384
10010804:	1000131e 	bne	r2,zero,10010854 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010808:	0001883a 	nop
1001080c:	e0bff817 	ldw	r2,-32(fp)
10010810:	10800a17 	ldw	r2,40(r2)
10010814:	e0fffd17 	ldw	r3,-12(fp)
10010818:	1880051e 	bne	r3,r2,10010830 <altera_avalon_jtag_uart_read+0x138>
1001081c:	e0bff817 	ldw	r2,-32(fp)
10010820:	10c00917 	ldw	r3,36(r2)
10010824:	e0bff817 	ldw	r2,-32(fp)
10010828:	10800117 	ldw	r2,4(r2)
1001082c:	18bff736 	bltu	r3,r2,1001080c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010830:	e0bff817 	ldw	r2,-32(fp)
10010834:	10800a17 	ldw	r2,40(r2)
10010838:	e0fffd17 	ldw	r3,-12(fp)
1001083c:	18800726 	beq	r3,r2,1001085c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
10010840:	e0bff617 	ldw	r2,-40(fp)
10010844:	00bfb716 	blt	zero,r2,10010724 <altera_avalon_jtag_uart_read+0x2c>
10010848:	00000506 	br	10010860 <altera_avalon_jtag_uart_read+0x168>
      break;
1001084c:	0001883a 	nop
10010850:	00000306 	br	10010860 <altera_avalon_jtag_uart_read+0x168>
      break;
10010854:	0001883a 	nop
10010858:	00000106 	br	10010860 <altera_avalon_jtag_uart_read+0x168>
      break;
1001085c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010860:	e0ffff17 	ldw	r3,-4(fp)
10010864:	e0bff717 	ldw	r2,-36(fp)
10010868:	18801826 	beq	r3,r2,100108cc <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
1001086c:	0005303a 	rdctl	r2,status
10010870:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010874:	e0fff917 	ldw	r3,-28(fp)
10010878:	00bfff84 	movi	r2,-2
1001087c:	1884703a 	and	r2,r3,r2
10010880:	1001703a 	wrctl	status,r2
  return context;
10010884:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010888:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001088c:	e0bff817 	ldw	r2,-32(fp)
10010890:	10800817 	ldw	r2,32(r2)
10010894:	10c00054 	ori	r3,r2,1
10010898:	e0bff817 	ldw	r2,-32(fp)
1001089c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100108a0:	e0bff817 	ldw	r2,-32(fp)
100108a4:	10800017 	ldw	r2,0(r2)
100108a8:	10800104 	addi	r2,r2,4
100108ac:	1007883a 	mov	r3,r2
100108b0:	e0bff817 	ldw	r2,-32(fp)
100108b4:	10800817 	ldw	r2,32(r2)
100108b8:	18800035 	stwio	r2,0(r3)
100108bc:	e0bffb17 	ldw	r2,-20(fp)
100108c0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
100108c4:	e0bffa17 	ldw	r2,-24(fp)
100108c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100108cc:	e0ffff17 	ldw	r3,-4(fp)
100108d0:	e0bff717 	ldw	r2,-36(fp)
100108d4:	18800426 	beq	r3,r2,100108e8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
100108d8:	e0ffff17 	ldw	r3,-4(fp)
100108dc:	e0bff717 	ldw	r2,-36(fp)
100108e0:	1885c83a 	sub	r2,r3,r2
100108e4:	00000606 	br	10010900 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100108e8:	e0bff517 	ldw	r2,-44(fp)
100108ec:	1090000c 	andi	r2,r2,16384
100108f0:	10000226 	beq	r2,zero,100108fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100108f4:	00bffd44 	movi	r2,-11
100108f8:	00000106 	br	10010900 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100108fc:	00bffec4 	movi	r2,-5
}
10010900:	e037883a 	mov	sp,fp
10010904:	dfc00117 	ldw	ra,4(sp)
10010908:	df000017 	ldw	fp,0(sp)
1001090c:	dec00204 	addi	sp,sp,8
10010910:	f800283a 	ret

10010914 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010914:	defff304 	addi	sp,sp,-52
10010918:	dfc00c15 	stw	ra,48(sp)
1001091c:	df000b15 	stw	fp,44(sp)
10010920:	df000b04 	addi	fp,sp,44
10010924:	e13ff815 	stw	r4,-32(fp)
10010928:	e17ff715 	stw	r5,-36(fp)
1001092c:	e1bff615 	stw	r6,-40(fp)
10010930:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010934:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010938:	e0bff717 	ldw	r2,-36(fp)
1001093c:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010940:	00003706 	br	10010a20 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010944:	e0bff817 	ldw	r2,-32(fp)
10010948:	10800c17 	ldw	r2,48(r2)
1001094c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
10010950:	e0bff817 	ldw	r2,-32(fp)
10010954:	10800d17 	ldw	r2,52(r2)
10010958:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
1001095c:	e0fffc17 	ldw	r3,-16(fp)
10010960:	e0bfff17 	ldw	r2,-4(fp)
10010964:	1880062e 	bgeu	r3,r2,10010980 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010968:	e0ffff17 	ldw	r3,-4(fp)
1001096c:	e0bffc17 	ldw	r2,-16(fp)
10010970:	1885c83a 	sub	r2,r3,r2
10010974:	10bfffc4 	addi	r2,r2,-1
10010978:	e0bffe15 	stw	r2,-8(fp)
1001097c:	00000b06 	br	100109ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010980:	e0bfff17 	ldw	r2,-4(fp)
10010984:	10000526 	beq	r2,zero,1001099c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010988:	00c20004 	movi	r3,2048
1001098c:	e0bffc17 	ldw	r2,-16(fp)
10010990:	1885c83a 	sub	r2,r3,r2
10010994:	e0bffe15 	stw	r2,-8(fp)
10010998:	00000406 	br	100109ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1001099c:	00c1ffc4 	movi	r3,2047
100109a0:	e0bffc17 	ldw	r2,-16(fp)
100109a4:	1885c83a 	sub	r2,r3,r2
100109a8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
100109ac:	e0bffe17 	ldw	r2,-8(fp)
100109b0:	10001e26 	beq	r2,zero,10010a2c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100109b4:	e0fff617 	ldw	r3,-40(fp)
100109b8:	e0bffe17 	ldw	r2,-8(fp)
100109bc:	1880022e 	bgeu	r3,r2,100109c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100109c0:	e0bff617 	ldw	r2,-40(fp)
100109c4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100109c8:	e0bff817 	ldw	r2,-32(fp)
100109cc:	10c20e04 	addi	r3,r2,2104
100109d0:	e0bffc17 	ldw	r2,-16(fp)
100109d4:	1885883a 	add	r2,r3,r2
100109d8:	e1bffe17 	ldw	r6,-8(fp)
100109dc:	e17ff717 	ldw	r5,-36(fp)
100109e0:	1009883a 	mov	r4,r2
100109e4:	00030480 	call	10003048 <memcpy>
      ptr   += n;
100109e8:	e0fff717 	ldw	r3,-36(fp)
100109ec:	e0bffe17 	ldw	r2,-8(fp)
100109f0:	1885883a 	add	r2,r3,r2
100109f4:	e0bff715 	stw	r2,-36(fp)
      count -= n;
100109f8:	e0fff617 	ldw	r3,-40(fp)
100109fc:	e0bffe17 	ldw	r2,-8(fp)
10010a00:	1885c83a 	sub	r2,r3,r2
10010a04:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a08:	e0fffc17 	ldw	r3,-16(fp)
10010a0c:	e0bffe17 	ldw	r2,-8(fp)
10010a10:	1885883a 	add	r2,r3,r2
10010a14:	10c1ffcc 	andi	r3,r2,2047
10010a18:	e0bff817 	ldw	r2,-32(fp)
10010a1c:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
10010a20:	e0bff617 	ldw	r2,-40(fp)
10010a24:	00bfc716 	blt	zero,r2,10010944 <altera_avalon_jtag_uart_write+0x30>
10010a28:	00000106 	br	10010a30 <altera_avalon_jtag_uart_write+0x11c>
        break;
10010a2c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
10010a30:	0005303a 	rdctl	r2,status
10010a34:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a38:	e0fff917 	ldw	r3,-28(fp)
10010a3c:	00bfff84 	movi	r2,-2
10010a40:	1884703a 	and	r2,r3,r2
10010a44:	1001703a 	wrctl	status,r2
  return context;
10010a48:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010a4c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010a50:	e0bff817 	ldw	r2,-32(fp)
10010a54:	10800817 	ldw	r2,32(r2)
10010a58:	10c00094 	ori	r3,r2,2
10010a5c:	e0bff817 	ldw	r2,-32(fp)
10010a60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010a64:	e0bff817 	ldw	r2,-32(fp)
10010a68:	10800017 	ldw	r2,0(r2)
10010a6c:	10800104 	addi	r2,r2,4
10010a70:	1007883a 	mov	r3,r2
10010a74:	e0bff817 	ldw	r2,-32(fp)
10010a78:	10800817 	ldw	r2,32(r2)
10010a7c:	18800035 	stwio	r2,0(r3)
10010a80:	e0bffb17 	ldw	r2,-20(fp)
10010a84:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010a88:	e0bffa17 	ldw	r2,-24(fp)
10010a8c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010a90:	e0bff617 	ldw	r2,-40(fp)
10010a94:	0080100e 	bge	zero,r2,10010ad8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010a98:	e0bff517 	ldw	r2,-44(fp)
10010a9c:	1090000c 	andi	r2,r2,16384
10010aa0:	1000101e 	bne	r2,zero,10010ae4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010aa4:	0001883a 	nop
10010aa8:	e0bff817 	ldw	r2,-32(fp)
10010aac:	10800d17 	ldw	r2,52(r2)
10010ab0:	e0ffff17 	ldw	r3,-4(fp)
10010ab4:	1880051e 	bne	r3,r2,10010acc <altera_avalon_jtag_uart_write+0x1b8>
10010ab8:	e0bff817 	ldw	r2,-32(fp)
10010abc:	10c00917 	ldw	r3,36(r2)
10010ac0:	e0bff817 	ldw	r2,-32(fp)
10010ac4:	10800117 	ldw	r2,4(r2)
10010ac8:	18bff736 	bltu	r3,r2,10010aa8 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010acc:	e0bff817 	ldw	r2,-32(fp)
10010ad0:	10800917 	ldw	r2,36(r2)
10010ad4:	1000051e 	bne	r2,zero,10010aec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010ad8:	e0bff617 	ldw	r2,-40(fp)
10010adc:	00bfd016 	blt	zero,r2,10010a20 <altera_avalon_jtag_uart_write+0x10c>
10010ae0:	00000306 	br	10010af0 <altera_avalon_jtag_uart_write+0x1dc>
        break;
10010ae4:	0001883a 	nop
10010ae8:	00000106 	br	10010af0 <altera_avalon_jtag_uart_write+0x1dc>
         break;
10010aec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010af0:	e0fff717 	ldw	r3,-36(fp)
10010af4:	e0bffd17 	ldw	r2,-12(fp)
10010af8:	18800426 	beq	r3,r2,10010b0c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010afc:	e0fff717 	ldw	r3,-36(fp)
10010b00:	e0bffd17 	ldw	r2,-12(fp)
10010b04:	1885c83a 	sub	r2,r3,r2
10010b08:	00000606 	br	10010b24 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010b0c:	e0bff517 	ldw	r2,-44(fp)
10010b10:	1090000c 	andi	r2,r2,16384
10010b14:	10000226 	beq	r2,zero,10010b20 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010b18:	00bffd44 	movi	r2,-11
10010b1c:	00000106 	br	10010b24 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010b20:	00bffec4 	movi	r2,-5
}
10010b24:	e037883a 	mov	sp,fp
10010b28:	dfc00117 	ldw	ra,4(sp)
10010b2c:	df000017 	ldw	fp,0(sp)
10010b30:	dec00204 	addi	sp,sp,8
10010b34:	f800283a 	ret

10010b38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
10010b38:	defffa04 	addi	sp,sp,-24
10010b3c:	dfc00515 	stw	ra,20(sp)
10010b40:	df000415 	stw	fp,16(sp)
10010b44:	df000404 	addi	fp,sp,16
10010b48:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10010b4c:	0007883a 	mov	r3,zero
10010b50:	e0bffc17 	ldw	r2,-16(fp)
10010b54:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
10010b58:	e0bffc17 	ldw	r2,-16(fp)
10010b5c:	10800104 	addi	r2,r2,4
10010b60:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
10010b64:	0005303a 	rdctl	r2,status
10010b68:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b6c:	e0fffd17 	ldw	r3,-12(fp)
10010b70:	00bfff84 	movi	r2,-2
10010b74:	1884703a 	and	r2,r3,r2
10010b78:	1001703a 	wrctl	status,r2
  return context;
10010b7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10010b80:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
10010b84:	00117400 	call	10011740 <alt_tick>
10010b88:	e0bfff17 	ldw	r2,-4(fp)
10010b8c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10010b90:	e0bffe17 	ldw	r2,-8(fp)
10010b94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
10010b98:	0001883a 	nop
10010b9c:	e037883a 	mov	sp,fp
10010ba0:	dfc00117 	ldw	ra,4(sp)
10010ba4:	df000017 	ldw	fp,0(sp)
10010ba8:	dec00204 	addi	sp,sp,8
10010bac:	f800283a 	ret

10010bb0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
10010bb0:	defff804 	addi	sp,sp,-32
10010bb4:	dfc00715 	stw	ra,28(sp)
10010bb8:	df000615 	stw	fp,24(sp)
10010bbc:	df000604 	addi	fp,sp,24
10010bc0:	e13ffe15 	stw	r4,-8(fp)
10010bc4:	e17ffd15 	stw	r5,-12(fp)
10010bc8:	e1bffc15 	stw	r6,-16(fp)
10010bcc:	e1fffb15 	stw	r7,-20(fp)
10010bd0:	e0bffb17 	ldw	r2,-20(fp)
10010bd4:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
10010bd8:	d0a8a017 	ldw	r2,-23936(gp)
10010bdc:	1000021e 	bne	r2,zero,10010be8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
10010be0:	e0bfff17 	ldw	r2,-4(fp)
10010be4:	d0a8a015 	stw	r2,-23936(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
10010be8:	e0bffe17 	ldw	r2,-8(fp)
10010bec:	10800104 	addi	r2,r2,4
10010bf0:	00c001c4 	movi	r3,7
10010bf4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10010bf8:	d8000015 	stw	zero,0(sp)
10010bfc:	e1fffe17 	ldw	r7,-8(fp)
10010c00:	01840074 	movhi	r6,4097
10010c04:	3182ce04 	addi	r6,r6,2872
10010c08:	e17ffc17 	ldw	r5,-16(fp)
10010c0c:	e13ffd17 	ldw	r4,-12(fp)
10010c10:	001109c0 	call	1001109c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10010c14:	0001883a 	nop
10010c18:	e037883a 	mov	sp,fp
10010c1c:	dfc00117 	ldw	ra,4(sp)
10010c20:	df000017 	ldw	fp,0(sp)
10010c24:	dec00204 	addi	sp,sp,8
10010c28:	f800283a 	ret

10010c2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010c2c:	defff504 	addi	sp,sp,-44
10010c30:	df000a15 	stw	fp,40(sp)
10010c34:	df000a04 	addi	fp,sp,40
10010c38:	e13ff915 	stw	r4,-28(fp)
10010c3c:	e17ff815 	stw	r5,-32(fp)
10010c40:	e1bff715 	stw	r6,-36(fp)
10010c44:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010c48:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
10010c4c:	d0a8a017 	ldw	r2,-23936(gp)
  
  if (alt_ticks_per_second ())
10010c50:	10003c26 	beq	r2,zero,10010d44 <alt_alarm_start+0x118>
  {
    if (alarm)
10010c54:	e0bff917 	ldw	r2,-28(fp)
10010c58:	10003826 	beq	r2,zero,10010d3c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010c5c:	e0bff917 	ldw	r2,-28(fp)
10010c60:	e0fff717 	ldw	r3,-36(fp)
10010c64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010c68:	e0bff917 	ldw	r2,-28(fp)
10010c6c:	e0fff617 	ldw	r3,-40(fp)
10010c70:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
10010c74:	0005303a 	rdctl	r2,status
10010c78:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c7c:	e0fffd17 	ldw	r3,-12(fp)
10010c80:	00bfff84 	movi	r2,-2
10010c84:	1884703a 	and	r2,r3,r2
10010c88:	1001703a 	wrctl	status,r2
  return context;
10010c8c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
10010c90:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010c94:	d0a8a117 	ldw	r2,-23932(gp)
      
      current_nticks = alt_nticks();
10010c98:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010c9c:	e0fff817 	ldw	r3,-32(fp)
10010ca0:	e0bfff17 	ldw	r2,-4(fp)
10010ca4:	1885883a 	add	r2,r3,r2
10010ca8:	10c00044 	addi	r3,r2,1
10010cac:	e0bff917 	ldw	r2,-28(fp)
10010cb0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010cb4:	e0bff917 	ldw	r2,-28(fp)
10010cb8:	10c00217 	ldw	r3,8(r2)
10010cbc:	e0bfff17 	ldw	r2,-4(fp)
10010cc0:	1880042e 	bgeu	r3,r2,10010cd4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010cc4:	e0bff917 	ldw	r2,-28(fp)
10010cc8:	00c00044 	movi	r3,1
10010ccc:	10c00405 	stb	r3,16(r2)
10010cd0:	00000206 	br	10010cdc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010cd4:	e0bff917 	ldw	r2,-28(fp)
10010cd8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010cdc:	e0bff917 	ldw	r2,-28(fp)
10010ce0:	d0e00d04 	addi	r3,gp,-32716
10010ce4:	e0fffb15 	stw	r3,-20(fp)
10010ce8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010cec:	e0bffa17 	ldw	r2,-24(fp)
10010cf0:	e0fffb17 	ldw	r3,-20(fp)
10010cf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010cf8:	e0bffb17 	ldw	r2,-20(fp)
10010cfc:	10c00017 	ldw	r3,0(r2)
10010d00:	e0bffa17 	ldw	r2,-24(fp)
10010d04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010d08:	e0bffb17 	ldw	r2,-20(fp)
10010d0c:	10800017 	ldw	r2,0(r2)
10010d10:	e0fffa17 	ldw	r3,-24(fp)
10010d14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010d18:	e0bffb17 	ldw	r2,-20(fp)
10010d1c:	e0fffa17 	ldw	r3,-24(fp)
10010d20:	10c00015 	stw	r3,0(r2)
10010d24:	e0bffe17 	ldw	r2,-8(fp)
10010d28:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10010d2c:	e0bffc17 	ldw	r2,-16(fp)
10010d30:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010d34:	0005883a 	mov	r2,zero
10010d38:	00000306 	br	10010d48 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010d3c:	00bffa84 	movi	r2,-22
10010d40:	00000106 	br	10010d48 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010d44:	00bfde84 	movi	r2,-134
  }
}
10010d48:	e037883a 	mov	sp,fp
10010d4c:	df000017 	ldw	fp,0(sp)
10010d50:	dec00104 	addi	sp,sp,4
10010d54:	f800283a 	ret

10010d58 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010d58:	defffb04 	addi	sp,sp,-20
10010d5c:	df000415 	stw	fp,16(sp)
10010d60:	df000404 	addi	fp,sp,16
10010d64:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10010d68:	008000c4 	movi	r2,3
10010d6c:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010d70:	e0fffe17 	ldw	r3,-8(fp)
10010d74:	008003f4 	movhi	r2,15
10010d78:	10909004 	addi	r2,r2,16960
10010d7c:	1887383a 	mul	r3,r3,r2
10010d80:	00817db4 	movhi	r2,1526
10010d84:	10b84004 	addi	r2,r2,-7936
10010d88:	10c7203a 	divu	r3,r2,r3
  big_loops = us / (INT_MAX/
10010d8c:	00a00034 	movhi	r2,32768
10010d90:	10bfffc4 	addi	r2,r2,-1
10010d94:	10c5203a 	divu	r2,r2,r3
10010d98:	e0fffc17 	ldw	r3,-16(fp)
10010d9c:	1885203a 	divu	r2,r3,r2
10010da0:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
10010da4:	e0bffd17 	ldw	r2,-12(fp)
10010da8:	10002526 	beq	r2,zero,10010e40 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
10010dac:	e03fff15 	stw	zero,-4(fp)
10010db0:	00001406 	br	10010e04 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010db4:	00a00034 	movhi	r2,32768
10010db8:	10bfffc4 	addi	r2,r2,-1
10010dbc:	10bfffc4 	addi	r2,r2,-1
10010dc0:	103ffe1e 	bne	r2,zero,10010dbc <alt_busy_sleep+0x64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010dc4:	e0fffe17 	ldw	r3,-8(fp)
10010dc8:	008003f4 	movhi	r2,15
10010dcc:	10909004 	addi	r2,r2,16960
10010dd0:	1887383a 	mul	r3,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010dd4:	00817db4 	movhi	r2,1526
10010dd8:	10b84004 	addi	r2,r2,-7936
10010ddc:	10c7203a 	divu	r3,r2,r3
10010de0:	00a00034 	movhi	r2,32768
10010de4:	10bfffc4 	addi	r2,r2,-1
10010de8:	10c5203a 	divu	r2,r2,r3
10010dec:	e0fffc17 	ldw	r3,-16(fp)
10010df0:	1885c83a 	sub	r2,r3,r2
10010df4:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
10010df8:	e0bfff17 	ldw	r2,-4(fp)
10010dfc:	10800044 	addi	r2,r2,1
10010e00:	e0bfff15 	stw	r2,-4(fp)
10010e04:	e0ffff17 	ldw	r3,-4(fp)
10010e08:	e0bffd17 	ldw	r2,-12(fp)
10010e0c:	18bfe916 	blt	r3,r2,10010db4 <alt_busy_sleep+0x5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010e10:	e0fffe17 	ldw	r3,-8(fp)
10010e14:	008003f4 	movhi	r2,15
10010e18:	10909004 	addi	r2,r2,16960
10010e1c:	1887383a 	mul	r3,r3,r2
10010e20:	00817db4 	movhi	r2,1526
10010e24:	10b84004 	addi	r2,r2,-7936
10010e28:	10c7203a 	divu	r3,r2,r3
10010e2c:	e0bffc17 	ldw	r2,-16(fp)
10010e30:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10010e34:	10bfffc4 	addi	r2,r2,-1
10010e38:	103ffe1e 	bne	r2,zero,10010e34 <alt_busy_sleep+0xdc>
10010e3c:	00000b06 	br	10010e6c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010e40:	e0fffe17 	ldw	r3,-8(fp)
10010e44:	008003f4 	movhi	r2,15
10010e48:	10909004 	addi	r2,r2,16960
10010e4c:	1887383a 	mul	r3,r3,r2
10010e50:	00817db4 	movhi	r2,1526
10010e54:	10b84004 	addi	r2,r2,-7936
10010e58:	10c7203a 	divu	r3,r2,r3
10010e5c:	e0bffc17 	ldw	r2,-16(fp)
10010e60:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10010e64:	10bfffc4 	addi	r2,r2,-1
10010e68:	00bffe16 	blt	zero,r2,10010e64 <alt_busy_sleep+0x10c>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010e6c:	0005883a 	mov	r2,zero
}
10010e70:	e037883a 	mov	sp,fp
10010e74:	df000017 	ldw	fp,0(sp)
10010e78:	dec00104 	addi	sp,sp,4
10010e7c:	f800283a 	ret

10010e80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010e80:	defffe04 	addi	sp,sp,-8
10010e84:	df000115 	stw	fp,4(sp)
10010e88:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10010e8c:	e03fff15 	stw	zero,-4(fp)
10010e90:	00000506 	br	10010ea8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10010e94:	e0bfff17 	ldw	r2,-4(fp)
10010e98:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10010e9c:	e0bfff17 	ldw	r2,-4(fp)
10010ea0:	10800804 	addi	r2,r2,32
10010ea4:	e0bfff15 	stw	r2,-4(fp)
10010ea8:	e0bfff17 	ldw	r2,-4(fp)
10010eac:	10820030 	cmpltui	r2,r2,2048
10010eb0:	103ff81e 	bne	r2,zero,10010e94 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010eb4:	0001883a 	nop
10010eb8:	e037883a 	mov	sp,fp
10010ebc:	df000017 	ldw	fp,0(sp)
10010ec0:	dec00104 	addi	sp,sp,4
10010ec4:	f800283a 	ret

10010ec8 <alt_get_errno>:
{
10010ec8:	defffe04 	addi	sp,sp,-8
10010ecc:	dfc00115 	stw	ra,4(sp)
10010ed0:	df000015 	stw	fp,0(sp)
10010ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010ed8:	d0a00a17 	ldw	r2,-32728(gp)
10010edc:	10000326 	beq	r2,zero,10010eec <alt_get_errno+0x24>
10010ee0:	d0a00a17 	ldw	r2,-32728(gp)
10010ee4:	103ee83a 	callr	r2
10010ee8:	00000106 	br	10010ef0 <alt_get_errno+0x28>
10010eec:	d0a89a04 	addi	r2,gp,-23960
}
10010ef0:	e037883a 	mov	sp,fp
10010ef4:	dfc00117 	ldw	ra,4(sp)
10010ef8:	df000017 	ldw	fp,0(sp)
10010efc:	dec00204 	addi	sp,sp,8
10010f00:	f800283a 	ret

10010f04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010f04:	defffa04 	addi	sp,sp,-24
10010f08:	dfc00515 	stw	ra,20(sp)
10010f0c:	df000415 	stw	fp,16(sp)
10010f10:	df000404 	addi	fp,sp,16
10010f14:	e13ffd15 	stw	r4,-12(fp)
10010f18:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010f1c:	e0bffd17 	ldw	r2,-12(fp)
10010f20:	10000326 	beq	r2,zero,10010f30 <alt_dev_llist_insert+0x2c>
10010f24:	e0bffd17 	ldw	r2,-12(fp)
10010f28:	10800217 	ldw	r2,8(r2)
10010f2c:	1000061e 	bne	r2,zero,10010f48 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010f30:	0010ec80 	call	10010ec8 <alt_get_errno>
10010f34:	1007883a 	mov	r3,r2
10010f38:	00800584 	movi	r2,22
10010f3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010f40:	00bffa84 	movi	r2,-22
10010f44:	00001306 	br	10010f94 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010f48:	e0bffd17 	ldw	r2,-12(fp)
10010f4c:	e0fffc17 	ldw	r3,-16(fp)
10010f50:	e0ffff15 	stw	r3,-4(fp)
10010f54:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
10010f58:	e0bffe17 	ldw	r2,-8(fp)
10010f5c:	e0ffff17 	ldw	r3,-4(fp)
10010f60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010f64:	e0bfff17 	ldw	r2,-4(fp)
10010f68:	10c00017 	ldw	r3,0(r2)
10010f6c:	e0bffe17 	ldw	r2,-8(fp)
10010f70:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
10010f74:	e0bfff17 	ldw	r2,-4(fp)
10010f78:	10800017 	ldw	r2,0(r2)
10010f7c:	e0fffe17 	ldw	r3,-8(fp)
10010f80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010f84:	e0bfff17 	ldw	r2,-4(fp)
10010f88:	e0fffe17 	ldw	r3,-8(fp)
10010f8c:	10c00015 	stw	r3,0(r2)

  return 0;  
10010f90:	0005883a 	mov	r2,zero
}
10010f94:	e037883a 	mov	sp,fp
10010f98:	dfc00117 	ldw	ra,4(sp)
10010f9c:	df000017 	ldw	fp,0(sp)
10010fa0:	dec00204 	addi	sp,sp,8
10010fa4:	f800283a 	ret

10010fa8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010fa8:	defffd04 	addi	sp,sp,-12
10010fac:	dfc00215 	stw	ra,8(sp)
10010fb0:	df000115 	stw	fp,4(sp)
10010fb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010fb8:	00840074 	movhi	r2,4097
10010fbc:	10879e04 	addi	r2,r2,7800
10010fc0:	e0bfff15 	stw	r2,-4(fp)
10010fc4:	00000606 	br	10010fe0 <_do_ctors+0x38>
        (*ctor) (); 
10010fc8:	e0bfff17 	ldw	r2,-4(fp)
10010fcc:	10800017 	ldw	r2,0(r2)
10010fd0:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010fd4:	e0bfff17 	ldw	r2,-4(fp)
10010fd8:	10bfff04 	addi	r2,r2,-4
10010fdc:	e0bfff15 	stw	r2,-4(fp)
10010fe0:	e0ffff17 	ldw	r3,-4(fp)
10010fe4:	00840074 	movhi	r2,4097
10010fe8:	10879f04 	addi	r2,r2,7804
10010fec:	18bff62e 	bgeu	r3,r2,10010fc8 <_do_ctors+0x20>
}
10010ff0:	0001883a 	nop
10010ff4:	e037883a 	mov	sp,fp
10010ff8:	dfc00117 	ldw	ra,4(sp)
10010ffc:	df000017 	ldw	fp,0(sp)
10011000:	dec00204 	addi	sp,sp,8
10011004:	f800283a 	ret

10011008 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011008:	defffd04 	addi	sp,sp,-12
1001100c:	dfc00215 	stw	ra,8(sp)
10011010:	df000115 	stw	fp,4(sp)
10011014:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011018:	00840074 	movhi	r2,4097
1001101c:	10879e04 	addi	r2,r2,7800
10011020:	e0bfff15 	stw	r2,-4(fp)
10011024:	00000606 	br	10011040 <_do_dtors+0x38>
        (*dtor) (); 
10011028:	e0bfff17 	ldw	r2,-4(fp)
1001102c:	10800017 	ldw	r2,0(r2)
10011030:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011034:	e0bfff17 	ldw	r2,-4(fp)
10011038:	10bfff04 	addi	r2,r2,-4
1001103c:	e0bfff15 	stw	r2,-4(fp)
10011040:	e0ffff17 	ldw	r3,-4(fp)
10011044:	00840074 	movhi	r2,4097
10011048:	10879f04 	addi	r2,r2,7804
1001104c:	18bff62e 	bgeu	r3,r2,10011028 <_do_dtors+0x20>
}
10011050:	0001883a 	nop
10011054:	e037883a 	mov	sp,fp
10011058:	dfc00117 	ldw	ra,4(sp)
1001105c:	df000017 	ldw	fp,0(sp)
10011060:	dec00204 	addi	sp,sp,8
10011064:	f800283a 	ret

10011068 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011068:	defffe04 	addi	sp,sp,-8
1001106c:	dfc00115 	stw	ra,4(sp)
10011070:	df000015 	stw	fp,0(sp)
10011074:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10011078:	01440004 	movi	r5,4096
1001107c:	0009883a 	mov	r4,zero
10011080:	0011aa40 	call	10011aa4 <alt_icache_flush>
#endif
}
10011084:	0001883a 	nop
10011088:	e037883a 	mov	sp,fp
1001108c:	dfc00117 	ldw	ra,4(sp)
10011090:	df000017 	ldw	fp,0(sp)
10011094:	dec00204 	addi	sp,sp,8
10011098:	f800283a 	ret

1001109c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001109c:	defff904 	addi	sp,sp,-28
100110a0:	dfc00615 	stw	ra,24(sp)
100110a4:	df000515 	stw	fp,20(sp)
100110a8:	df000504 	addi	fp,sp,20
100110ac:	e13fff15 	stw	r4,-4(fp)
100110b0:	e17ffe15 	stw	r5,-8(fp)
100110b4:	e1bffd15 	stw	r6,-12(fp)
100110b8:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100110bc:	e0800217 	ldw	r2,8(fp)
100110c0:	d8800015 	stw	r2,0(sp)
100110c4:	e1fffc17 	ldw	r7,-16(fp)
100110c8:	e1bffd17 	ldw	r6,-12(fp)
100110cc:	e17ffe17 	ldw	r5,-8(fp)
100110d0:	e13fff17 	ldw	r4,-4(fp)
100110d4:	001124c0 	call	1001124c <alt_iic_isr_register>
}  
100110d8:	e037883a 	mov	sp,fp
100110dc:	dfc00117 	ldw	ra,4(sp)
100110e0:	df000017 	ldw	fp,0(sp)
100110e4:	dec00204 	addi	sp,sp,8
100110e8:	f800283a 	ret

100110ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100110ec:	defff904 	addi	sp,sp,-28
100110f0:	df000615 	stw	fp,24(sp)
100110f4:	df000604 	addi	fp,sp,24
100110f8:	e13ffb15 	stw	r4,-20(fp)
100110fc:	e17ffa15 	stw	r5,-24(fp)
10011100:	e0bffa17 	ldw	r2,-24(fp)
10011104:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
10011108:	0005303a 	rdctl	r2,status
1001110c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011110:	e0fffe17 	ldw	r3,-8(fp)
10011114:	00bfff84 	movi	r2,-2
10011118:	1884703a 	and	r2,r3,r2
1001111c:	1001703a 	wrctl	status,r2
  return context;
10011120:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011124:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
10011128:	00c00044 	movi	r3,1
1001112c:	e0bfff17 	ldw	r2,-4(fp)
10011130:	1884983a 	sll	r2,r3,r2
10011134:	1007883a 	mov	r3,r2
10011138:	d0a89f17 	ldw	r2,-23940(gp)
1001113c:	1884b03a 	or	r2,r3,r2
10011140:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011144:	d0a89f17 	ldw	r2,-23940(gp)
10011148:	100170fa 	wrctl	ienable,r2
1001114c:	e0bffd17 	ldw	r2,-12(fp)
10011150:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011154:	e0bffc17 	ldw	r2,-16(fp)
10011158:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001115c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011160:	0001883a 	nop
}
10011164:	e037883a 	mov	sp,fp
10011168:	df000017 	ldw	fp,0(sp)
1001116c:	dec00104 	addi	sp,sp,4
10011170:	f800283a 	ret

10011174 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011174:	defff904 	addi	sp,sp,-28
10011178:	df000615 	stw	fp,24(sp)
1001117c:	df000604 	addi	fp,sp,24
10011180:	e13ffb15 	stw	r4,-20(fp)
10011184:	e17ffa15 	stw	r5,-24(fp)
10011188:	e0bffa17 	ldw	r2,-24(fp)
1001118c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
10011190:	0005303a 	rdctl	r2,status
10011194:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011198:	e0fffe17 	ldw	r3,-8(fp)
1001119c:	00bfff84 	movi	r2,-2
100111a0:	1884703a 	and	r2,r3,r2
100111a4:	1001703a 	wrctl	status,r2
  return context;
100111a8:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
100111ac:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
100111b0:	00c00044 	movi	r3,1
100111b4:	e0bfff17 	ldw	r2,-4(fp)
100111b8:	1884983a 	sll	r2,r3,r2
100111bc:	0084303a 	nor	r2,zero,r2
100111c0:	1007883a 	mov	r3,r2
100111c4:	d0a89f17 	ldw	r2,-23940(gp)
100111c8:	1884703a 	and	r2,r3,r2
100111cc:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100111d0:	d0a89f17 	ldw	r2,-23940(gp)
100111d4:	100170fa 	wrctl	ienable,r2
100111d8:	e0bffd17 	ldw	r2,-12(fp)
100111dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
100111e0:	e0bffc17 	ldw	r2,-16(fp)
100111e4:	1001703a 	wrctl	status,r2
  return 0;
100111e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100111ec:	0001883a 	nop
}
100111f0:	e037883a 	mov	sp,fp
100111f4:	df000017 	ldw	fp,0(sp)
100111f8:	dec00104 	addi	sp,sp,4
100111fc:	f800283a 	ret

10011200 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011200:	defffc04 	addi	sp,sp,-16
10011204:	df000315 	stw	fp,12(sp)
10011208:	df000304 	addi	fp,sp,12
1001120c:	e13ffe15 	stw	r4,-8(fp)
10011210:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011214:	000530fa 	rdctl	r2,ienable
10011218:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001121c:	00c00044 	movi	r3,1
10011220:	e0bffd17 	ldw	r2,-12(fp)
10011224:	1884983a 	sll	r2,r3,r2
10011228:	1007883a 	mov	r3,r2
1001122c:	e0bfff17 	ldw	r2,-4(fp)
10011230:	1884703a 	and	r2,r3,r2
10011234:	1004c03a 	cmpne	r2,r2,zero
10011238:	10803fcc 	andi	r2,r2,255
}
1001123c:	e037883a 	mov	sp,fp
10011240:	df000017 	ldw	fp,0(sp)
10011244:	dec00104 	addi	sp,sp,4
10011248:	f800283a 	ret

1001124c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001124c:	defff504 	addi	sp,sp,-44
10011250:	dfc00a15 	stw	ra,40(sp)
10011254:	df000915 	stw	fp,36(sp)
10011258:	df000904 	addi	fp,sp,36
1001125c:	e13ffa15 	stw	r4,-24(fp)
10011260:	e17ff915 	stw	r5,-28(fp)
10011264:	e1bff815 	stw	r6,-32(fp)
10011268:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
1001126c:	00bffa84 	movi	r2,-22
10011270:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011274:	e0bff917 	ldw	r2,-28(fp)
10011278:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1001127c:	e0bffe17 	ldw	r2,-8(fp)
10011280:	10800808 	cmpgei	r2,r2,32
10011284:	1000241e 	bne	r2,zero,10011318 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
10011288:	0005303a 	rdctl	r2,status
1001128c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011290:	e0fffc17 	ldw	r3,-16(fp)
10011294:	00bfff84 	movi	r2,-2
10011298:	1884703a 	and	r2,r3,r2
1001129c:	1001703a 	wrctl	status,r2
  return context;
100112a0:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100112a4:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
100112a8:	e0bffe17 	ldw	r2,-8(fp)
100112ac:	100890fa 	slli	r4,r2,3
100112b0:	e0fff817 	ldw	r3,-32(fp)
100112b4:	00840074 	movhi	r2,4097
100112b8:	2085883a 	add	r2,r4,r2
100112bc:	10dc8c15 	stw	r3,29232(r2)
    alt_irq[id].context = isr_context;
100112c0:	e0bffe17 	ldw	r2,-8(fp)
100112c4:	100890fa 	slli	r4,r2,3
100112c8:	e0fff717 	ldw	r3,-36(fp)
100112cc:	00840074 	movhi	r2,4097
100112d0:	2085883a 	add	r2,r4,r2
100112d4:	10dc8d15 	stw	r3,29236(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100112d8:	e0bff817 	ldw	r2,-32(fp)
100112dc:	10000526 	beq	r2,zero,100112f4 <alt_iic_isr_register+0xa8>
100112e0:	e0bffe17 	ldw	r2,-8(fp)
100112e4:	100b883a 	mov	r5,r2
100112e8:	e13ffa17 	ldw	r4,-24(fp)
100112ec:	00110ec0 	call	100110ec <alt_ic_irq_enable>
100112f0:	00000406 	br	10011304 <alt_iic_isr_register+0xb8>
100112f4:	e0bffe17 	ldw	r2,-8(fp)
100112f8:	100b883a 	mov	r5,r2
100112fc:	e13ffa17 	ldw	r4,-24(fp)
10011300:	00111740 	call	10011174 <alt_ic_irq_disable>
10011304:	e0bfff15 	stw	r2,-4(fp)
10011308:	e0bffd17 	ldw	r2,-12(fp)
1001130c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
10011310:	e0bffb17 	ldw	r2,-20(fp)
10011314:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011318:	e0bfff17 	ldw	r2,-4(fp)
}
1001131c:	e037883a 	mov	sp,fp
10011320:	dfc00117 	ldw	ra,4(sp)
10011324:	df000017 	ldw	fp,0(sp)
10011328:	dec00204 	addi	sp,sp,8
1001132c:	f800283a 	ret

10011330 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011330:	defff904 	addi	sp,sp,-28
10011334:	dfc00615 	stw	ra,24(sp)
10011338:	df000515 	stw	fp,20(sp)
1001133c:	df000504 	addi	fp,sp,20
10011340:	e13ffe15 	stw	r4,-8(fp)
10011344:	e17ffd15 	stw	r5,-12(fp)
10011348:	e1bffc15 	stw	r6,-16(fp)
1001134c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
10011350:	e1bffb17 	ldw	r6,-20(fp)
10011354:	e17ffc17 	ldw	r5,-16(fp)
10011358:	e13ffd17 	ldw	r4,-12(fp)
1001135c:	00115500 	call	10011550 <open>
10011360:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
10011364:	e0bfff17 	ldw	r2,-4(fp)
10011368:	10001716 	blt	r2,zero,100113c8 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
1001136c:	e0bfff17 	ldw	r2,-4(fp)
10011370:	10c00324 	muli	r3,r2,12
10011374:	00840074 	movhi	r2,4097
10011378:	1885883a 	add	r2,r3,r2
1001137c:	10cf6717 	ldw	r3,15772(r2)
10011380:	e0bffe17 	ldw	r2,-8(fp)
10011384:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011388:	e0bfff17 	ldw	r2,-4(fp)
1001138c:	10c00324 	muli	r3,r2,12
10011390:	00840074 	movhi	r2,4097
10011394:	1885883a 	add	r2,r3,r2
10011398:	10cf6817 	ldw	r3,15776(r2)
1001139c:	e0bffe17 	ldw	r2,-8(fp)
100113a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100113a4:	e0bfff17 	ldw	r2,-4(fp)
100113a8:	10c00324 	muli	r3,r2,12
100113ac:	00840074 	movhi	r2,4097
100113b0:	1885883a 	add	r2,r3,r2
100113b4:	10cf6917 	ldw	r3,15780(r2)
100113b8:	e0bffe17 	ldw	r2,-8(fp)
100113bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100113c0:	e13fff17 	ldw	r4,-4(fp)
100113c4:	000fd9c0 	call	1000fd9c <alt_release_fd>
  }
} 
100113c8:	0001883a 	nop
100113cc:	e037883a 	mov	sp,fp
100113d0:	dfc00117 	ldw	ra,4(sp)
100113d4:	df000017 	ldw	fp,0(sp)
100113d8:	dec00204 	addi	sp,sp,8
100113dc:	f800283a 	ret

100113e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100113e0:	defffb04 	addi	sp,sp,-20
100113e4:	dfc00415 	stw	ra,16(sp)
100113e8:	df000315 	stw	fp,12(sp)
100113ec:	df000304 	addi	fp,sp,12
100113f0:	e13fff15 	stw	r4,-4(fp)
100113f4:	e17ffe15 	stw	r5,-8(fp)
100113f8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100113fc:	01c07fc4 	movi	r7,511
10011400:	01800044 	movi	r6,1
10011404:	e17fff17 	ldw	r5,-4(fp)
10011408:	01040074 	movhi	r4,4097
1001140c:	210f6a04 	addi	r4,r4,15784
10011410:	00113300 	call	10011330 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011414:	01c07fc4 	movi	r7,511
10011418:	000d883a 	mov	r6,zero
1001141c:	e17ffe17 	ldw	r5,-8(fp)
10011420:	01040074 	movhi	r4,4097
10011424:	210f6704 	addi	r4,r4,15772
10011428:	00113300 	call	10011330 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1001142c:	01c07fc4 	movi	r7,511
10011430:	01800044 	movi	r6,1
10011434:	e17ffd17 	ldw	r5,-12(fp)
10011438:	01040074 	movhi	r4,4097
1001143c:	210f6d04 	addi	r4,r4,15796
10011440:	00113300 	call	10011330 <alt_open_fd>
}  
10011444:	0001883a 	nop
10011448:	e037883a 	mov	sp,fp
1001144c:	dfc00117 	ldw	ra,4(sp)
10011450:	df000017 	ldw	fp,0(sp)
10011454:	dec00204 	addi	sp,sp,8
10011458:	f800283a 	ret

1001145c <alt_get_errno>:
{
1001145c:	defffe04 	addi	sp,sp,-8
10011460:	dfc00115 	stw	ra,4(sp)
10011464:	df000015 	stw	fp,0(sp)
10011468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001146c:	d0a00a17 	ldw	r2,-32728(gp)
10011470:	10000326 	beq	r2,zero,10011480 <alt_get_errno+0x24>
10011474:	d0a00a17 	ldw	r2,-32728(gp)
10011478:	103ee83a 	callr	r2
1001147c:	00000106 	br	10011484 <alt_get_errno+0x28>
10011480:	d0a89a04 	addi	r2,gp,-23960
}
10011484:	e037883a 	mov	sp,fp
10011488:	dfc00117 	ldw	ra,4(sp)
1001148c:	df000017 	ldw	fp,0(sp)
10011490:	dec00204 	addi	sp,sp,8
10011494:	f800283a 	ret

10011498 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011498:	defffd04 	addi	sp,sp,-12
1001149c:	df000215 	stw	fp,8(sp)
100114a0:	df000204 	addi	fp,sp,8
100114a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100114a8:	e0bffe17 	ldw	r2,-8(fp)
100114ac:	10800217 	ldw	r2,8(r2)
100114b0:	10d00034 	orhi	r3,r2,16384
100114b4:	e0bffe17 	ldw	r2,-8(fp)
100114b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100114bc:	e03fff15 	stw	zero,-4(fp)
100114c0:	00001a06 	br	1001152c <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100114c4:	e0bfff17 	ldw	r2,-4(fp)
100114c8:	10c00324 	muli	r3,r2,12
100114cc:	00840074 	movhi	r2,4097
100114d0:	1885883a 	add	r2,r3,r2
100114d4:	10cf6717 	ldw	r3,15772(r2)
100114d8:	e0bffe17 	ldw	r2,-8(fp)
100114dc:	10800017 	ldw	r2,0(r2)
100114e0:	18800f1e 	bne	r3,r2,10011520 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100114e4:	e0bfff17 	ldw	r2,-4(fp)
100114e8:	10c00324 	muli	r3,r2,12
100114ec:	00840074 	movhi	r2,4097
100114f0:	1885883a 	add	r2,r3,r2
100114f4:	108f6917 	ldw	r2,15780(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
100114f8:	1000090e 	bge	r2,zero,10011520 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
100114fc:	e0bfff17 	ldw	r2,-4(fp)
10011500:	10c00324 	muli	r3,r2,12
10011504:	00840074 	movhi	r2,4097
10011508:	108f6704 	addi	r2,r2,15772
1001150c:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011510:	e0fffe17 	ldw	r3,-8(fp)
10011514:	18800226 	beq	r3,r2,10011520 <alt_file_locked+0x88>
    {
      return -EACCES;
10011518:	00bffcc4 	movi	r2,-13
1001151c:	00000806 	br	10011540 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
10011520:	e0bfff17 	ldw	r2,-4(fp)
10011524:	10800044 	addi	r2,r2,1
10011528:	e0bfff15 	stw	r2,-4(fp)
1001152c:	d0a00917 	ldw	r2,-32732(gp)
10011530:	1007883a 	mov	r3,r2
10011534:	e0bfff17 	ldw	r2,-4(fp)
10011538:	18bfe22e 	bgeu	r3,r2,100114c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001153c:	0005883a 	mov	r2,zero
}
10011540:	e037883a 	mov	sp,fp
10011544:	df000017 	ldw	fp,0(sp)
10011548:	dec00104 	addi	sp,sp,4
1001154c:	f800283a 	ret

10011550 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011550:	defff604 	addi	sp,sp,-40
10011554:	dfc00915 	stw	ra,36(sp)
10011558:	df000815 	stw	fp,32(sp)
1001155c:	df000804 	addi	fp,sp,32
10011560:	e13ffa15 	stw	r4,-24(fp)
10011564:	e17ff915 	stw	r5,-28(fp)
10011568:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001156c:	00bfffc4 	movi	r2,-1
10011570:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
10011574:	00bffb44 	movi	r2,-19
10011578:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
1001157c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011580:	d1600704 	addi	r5,gp,-32740
10011584:	e13ffa17 	ldw	r4,-24(fp)
10011588:	001186c0 	call	1001186c <alt_find_dev>
1001158c:	e0bfff15 	stw	r2,-4(fp)
10011590:	e0bfff17 	ldw	r2,-4(fp)
10011594:	1000051e 	bne	r2,zero,100115ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011598:	e13ffa17 	ldw	r4,-24(fp)
1001159c:	00118fc0 	call	100118fc <alt_find_file>
100115a0:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
100115a4:	00800044 	movi	r2,1
100115a8:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100115ac:	e0bfff17 	ldw	r2,-4(fp)
100115b0:	10002926 	beq	r2,zero,10011658 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
100115b4:	e13fff17 	ldw	r4,-4(fp)
100115b8:	0011a040 	call	10011a04 <alt_get_fd>
100115bc:	e0bffe15 	stw	r2,-8(fp)
100115c0:	e0bffe17 	ldw	r2,-8(fp)
100115c4:	1000030e 	bge	r2,zero,100115d4 <open+0x84>
    {
      status = index;
100115c8:	e0bffe17 	ldw	r2,-8(fp)
100115cc:	e0bffd15 	stw	r2,-12(fp)
100115d0:	00002306 	br	10011660 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
100115d4:	e0bffe17 	ldw	r2,-8(fp)
100115d8:	10c00324 	muli	r3,r2,12
100115dc:	00840074 	movhi	r2,4097
100115e0:	108f6704 	addi	r2,r2,15772
100115e4:	1885883a 	add	r2,r3,r2
100115e8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100115ec:	e0fff917 	ldw	r3,-28(fp)
100115f0:	00900034 	movhi	r2,16384
100115f4:	10bfffc4 	addi	r2,r2,-1
100115f8:	1886703a 	and	r3,r3,r2
100115fc:	e0bffb17 	ldw	r2,-20(fp)
10011600:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011604:	e0bffc17 	ldw	r2,-16(fp)
10011608:	1000051e 	bne	r2,zero,10011620 <open+0xd0>
1001160c:	e13ffb17 	ldw	r4,-20(fp)
10011610:	00114980 	call	10011498 <alt_file_locked>
10011614:	e0bffd15 	stw	r2,-12(fp)
10011618:	e0bffd17 	ldw	r2,-12(fp)
1001161c:	10001016 	blt	r2,zero,10011660 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011620:	e0bfff17 	ldw	r2,-4(fp)
10011624:	10800317 	ldw	r2,12(r2)
10011628:	10000826 	beq	r2,zero,1001164c <open+0xfc>
1001162c:	e0bfff17 	ldw	r2,-4(fp)
10011630:	10800317 	ldw	r2,12(r2)
10011634:	e1fff817 	ldw	r7,-32(fp)
10011638:	e1bff917 	ldw	r6,-28(fp)
1001163c:	e17ffa17 	ldw	r5,-24(fp)
10011640:	e13ffb17 	ldw	r4,-20(fp)
10011644:	103ee83a 	callr	r2
10011648:	00000106 	br	10011650 <open+0x100>
1001164c:	0005883a 	mov	r2,zero
10011650:	e0bffd15 	stw	r2,-12(fp)
10011654:	00000206 	br	10011660 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011658:	00bffb44 	movi	r2,-19
1001165c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011660:	e0bffd17 	ldw	r2,-12(fp)
10011664:	1000090e 	bge	r2,zero,1001168c <open+0x13c>
  {
    alt_release_fd (index);  
10011668:	e13ffe17 	ldw	r4,-8(fp)
1001166c:	000fd9c0 	call	1000fd9c <alt_release_fd>
    ALT_ERRNO = -status;
10011670:	001145c0 	call	1001145c <alt_get_errno>
10011674:	1007883a 	mov	r3,r2
10011678:	e0bffd17 	ldw	r2,-12(fp)
1001167c:	0085c83a 	sub	r2,zero,r2
10011680:	18800015 	stw	r2,0(r3)
    return -1;
10011684:	00bfffc4 	movi	r2,-1
10011688:	00000106 	br	10011690 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1001168c:	e0bffe17 	ldw	r2,-8(fp)
}
10011690:	e037883a 	mov	sp,fp
10011694:	dfc00117 	ldw	ra,4(sp)
10011698:	df000017 	ldw	fp,0(sp)
1001169c:	dec00204 	addi	sp,sp,8
100116a0:	f800283a 	ret

100116a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100116a4:	defffa04 	addi	sp,sp,-24
100116a8:	df000515 	stw	fp,20(sp)
100116ac:	df000504 	addi	fp,sp,20
100116b0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
100116b4:	0005303a 	rdctl	r2,status
100116b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100116bc:	e0fffc17 	ldw	r3,-16(fp)
100116c0:	00bfff84 	movi	r2,-2
100116c4:	1884703a 	and	r2,r3,r2
100116c8:	1001703a 	wrctl	status,r2
  return context;
100116cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100116d0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
100116d4:	e0bffb17 	ldw	r2,-20(fp)
100116d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100116dc:	e0bffd17 	ldw	r2,-12(fp)
100116e0:	10800017 	ldw	r2,0(r2)
100116e4:	e0fffd17 	ldw	r3,-12(fp)
100116e8:	18c00117 	ldw	r3,4(r3)
100116ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100116f0:	e0bffd17 	ldw	r2,-12(fp)
100116f4:	10800117 	ldw	r2,4(r2)
100116f8:	e0fffd17 	ldw	r3,-12(fp)
100116fc:	18c00017 	ldw	r3,0(r3)
10011700:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011704:	e0bffd17 	ldw	r2,-12(fp)
10011708:	e0fffd17 	ldw	r3,-12(fp)
1001170c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011710:	e0bffd17 	ldw	r2,-12(fp)
10011714:	e0fffd17 	ldw	r3,-12(fp)
10011718:	10c00015 	stw	r3,0(r2)
1001171c:	e0bfff17 	ldw	r2,-4(fp)
10011720:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10011724:	e0bffe17 	ldw	r2,-8(fp)
10011728:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001172c:	0001883a 	nop
10011730:	e037883a 	mov	sp,fp
10011734:	df000017 	ldw	fp,0(sp)
10011738:	dec00104 	addi	sp,sp,4
1001173c:	f800283a 	ret

10011740 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011740:	defffb04 	addi	sp,sp,-20
10011744:	dfc00415 	stw	ra,16(sp)
10011748:	df000315 	stw	fp,12(sp)
1001174c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011750:	d0a00d17 	ldw	r2,-32716(gp)
10011754:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011758:	d0a8a117 	ldw	r2,-23932(gp)
1001175c:	10800044 	addi	r2,r2,1
10011760:	d0a8a115 	stw	r2,-23932(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011764:	00002e06 	br	10011820 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011768:	e0bfff17 	ldw	r2,-4(fp)
1001176c:	10800017 	ldw	r2,0(r2)
10011770:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011774:	e0bfff17 	ldw	r2,-4(fp)
10011778:	10800403 	ldbu	r2,16(r2)
1001177c:	10803fcc 	andi	r2,r2,255
10011780:	10000426 	beq	r2,zero,10011794 <alt_tick+0x54>
10011784:	d0a8a117 	ldw	r2,-23932(gp)
10011788:	1000021e 	bne	r2,zero,10011794 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001178c:	e0bfff17 	ldw	r2,-4(fp)
10011790:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011794:	e0bfff17 	ldw	r2,-4(fp)
10011798:	10800217 	ldw	r2,8(r2)
1001179c:	d0e8a117 	ldw	r3,-23932(gp)
100117a0:	18801d36 	bltu	r3,r2,10011818 <alt_tick+0xd8>
100117a4:	e0bfff17 	ldw	r2,-4(fp)
100117a8:	10800403 	ldbu	r2,16(r2)
100117ac:	10803fcc 	andi	r2,r2,255
100117b0:	1000191e 	bne	r2,zero,10011818 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100117b4:	e0bfff17 	ldw	r2,-4(fp)
100117b8:	10800317 	ldw	r2,12(r2)
100117bc:	e0ffff17 	ldw	r3,-4(fp)
100117c0:	18c00517 	ldw	r3,20(r3)
100117c4:	1809883a 	mov	r4,r3
100117c8:	103ee83a 	callr	r2
100117cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100117d0:	e0bffd17 	ldw	r2,-12(fp)
100117d4:	1000031e 	bne	r2,zero,100117e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100117d8:	e13fff17 	ldw	r4,-4(fp)
100117dc:	00116a40 	call	100116a4 <alt_alarm_stop>
100117e0:	00000d06 	br	10011818 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100117e4:	e0bfff17 	ldw	r2,-4(fp)
100117e8:	10c00217 	ldw	r3,8(r2)
100117ec:	e0bffd17 	ldw	r2,-12(fp)
100117f0:	1887883a 	add	r3,r3,r2
100117f4:	e0bfff17 	ldw	r2,-4(fp)
100117f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100117fc:	e0bfff17 	ldw	r2,-4(fp)
10011800:	10c00217 	ldw	r3,8(r2)
10011804:	d0a8a117 	ldw	r2,-23932(gp)
10011808:	1880032e 	bgeu	r3,r2,10011818 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001180c:	e0bfff17 	ldw	r2,-4(fp)
10011810:	00c00044 	movi	r3,1
10011814:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011818:	e0bffe17 	ldw	r2,-8(fp)
1001181c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
10011820:	e0ffff17 	ldw	r3,-4(fp)
10011824:	d0a00d04 	addi	r2,gp,-32716
10011828:	18bfcf1e 	bne	r3,r2,10011768 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001182c:	0001883a 	nop
}
10011830:	0001883a 	nop
10011834:	e037883a 	mov	sp,fp
10011838:	dfc00117 	ldw	ra,4(sp)
1001183c:	df000017 	ldw	fp,0(sp)
10011840:	dec00204 	addi	sp,sp,8
10011844:	f800283a 	ret

10011848 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011848:	deffff04 	addi	sp,sp,-4
1001184c:	df000015 	stw	fp,0(sp)
10011850:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011854:	000170fa 	wrctl	ienable,zero
}
10011858:	0001883a 	nop
1001185c:	e037883a 	mov	sp,fp
10011860:	df000017 	ldw	fp,0(sp)
10011864:	dec00104 	addi	sp,sp,4
10011868:	f800283a 	ret

1001186c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001186c:	defffa04 	addi	sp,sp,-24
10011870:	dfc00515 	stw	ra,20(sp)
10011874:	df000415 	stw	fp,16(sp)
10011878:	df000404 	addi	fp,sp,16
1001187c:	e13ffd15 	stw	r4,-12(fp)
10011880:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011884:	e0bffc17 	ldw	r2,-16(fp)
10011888:	10800017 	ldw	r2,0(r2)
1001188c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011890:	e13ffd17 	ldw	r4,-12(fp)
10011894:	000328c0 	call	1000328c <strlen>
10011898:	10800044 	addi	r2,r2,1
1001189c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100118a0:	00000d06 	br	100118d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100118a4:	e0bfff17 	ldw	r2,-4(fp)
100118a8:	10800217 	ldw	r2,8(r2)
100118ac:	e0fffe17 	ldw	r3,-8(fp)
100118b0:	180d883a 	mov	r6,r3
100118b4:	e17ffd17 	ldw	r5,-12(fp)
100118b8:	1009883a 	mov	r4,r2
100118bc:	0011c140 	call	10011c14 <memcmp>
100118c0:	1000021e 	bne	r2,zero,100118cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100118c4:	e0bfff17 	ldw	r2,-4(fp)
100118c8:	00000706 	br	100118e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100118cc:	e0bfff17 	ldw	r2,-4(fp)
100118d0:	10800017 	ldw	r2,0(r2)
100118d4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
100118d8:	e0ffff17 	ldw	r3,-4(fp)
100118dc:	e0bffc17 	ldw	r2,-16(fp)
100118e0:	18bff01e 	bne	r3,r2,100118a4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
100118e4:	0005883a 	mov	r2,zero
}
100118e8:	e037883a 	mov	sp,fp
100118ec:	dfc00117 	ldw	ra,4(sp)
100118f0:	df000017 	ldw	fp,0(sp)
100118f4:	dec00204 	addi	sp,sp,8
100118f8:	f800283a 	ret

100118fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100118fc:	defffb04 	addi	sp,sp,-20
10011900:	dfc00415 	stw	ra,16(sp)
10011904:	df000315 	stw	fp,12(sp)
10011908:	df000304 	addi	fp,sp,12
1001190c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011910:	d0a00517 	ldw	r2,-32748(gp)
10011914:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011918:	00003106 	br	100119e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1001191c:	e0bfff17 	ldw	r2,-4(fp)
10011920:	10800217 	ldw	r2,8(r2)
10011924:	1009883a 	mov	r4,r2
10011928:	000328c0 	call	1000328c <strlen>
1001192c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011930:	e0bfff17 	ldw	r2,-4(fp)
10011934:	10c00217 	ldw	r3,8(r2)
10011938:	e0bffe17 	ldw	r2,-8(fp)
1001193c:	10bfffc4 	addi	r2,r2,-1
10011940:	1885883a 	add	r2,r3,r2
10011944:	10800003 	ldbu	r2,0(r2)
10011948:	10803fcc 	andi	r2,r2,255
1001194c:	1080201c 	xori	r2,r2,128
10011950:	10bfe004 	addi	r2,r2,-128
10011954:	10800bd8 	cmpnei	r2,r2,47
10011958:	1000031e 	bne	r2,zero,10011968 <alt_find_file+0x6c>
    {
      len -= 1;
1001195c:	e0bffe17 	ldw	r2,-8(fp)
10011960:	10bfffc4 	addi	r2,r2,-1
10011964:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011968:	e0bffe17 	ldw	r2,-8(fp)
1001196c:	e0fffd17 	ldw	r3,-12(fp)
10011970:	1885883a 	add	r2,r3,r2
10011974:	10800003 	ldbu	r2,0(r2)
10011978:	10803fcc 	andi	r2,r2,255
1001197c:	1080201c 	xori	r2,r2,128
10011980:	10bfe004 	addi	r2,r2,-128
10011984:	10800be0 	cmpeqi	r2,r2,47
10011988:	1000081e 	bne	r2,zero,100119ac <alt_find_file+0xb0>
1001198c:	e0bffe17 	ldw	r2,-8(fp)
10011990:	e0fffd17 	ldw	r3,-12(fp)
10011994:	1885883a 	add	r2,r3,r2
10011998:	10800003 	ldbu	r2,0(r2)
1001199c:	10803fcc 	andi	r2,r2,255
100119a0:	1080201c 	xori	r2,r2,128
100119a4:	10bfe004 	addi	r2,r2,-128
100119a8:	10000a1e 	bne	r2,zero,100119d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100119ac:	e0bfff17 	ldw	r2,-4(fp)
100119b0:	10800217 	ldw	r2,8(r2)
100119b4:	e0fffe17 	ldw	r3,-8(fp)
100119b8:	180d883a 	mov	r6,r3
100119bc:	e17ffd17 	ldw	r5,-12(fp)
100119c0:	1009883a 	mov	r4,r2
100119c4:	0011c140 	call	10011c14 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
100119c8:	1000021e 	bne	r2,zero,100119d4 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
100119cc:	e0bfff17 	ldw	r2,-4(fp)
100119d0:	00000706 	br	100119f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100119d4:	e0bfff17 	ldw	r2,-4(fp)
100119d8:	10800017 	ldw	r2,0(r2)
100119dc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
100119e0:	e0ffff17 	ldw	r3,-4(fp)
100119e4:	d0a00504 	addi	r2,gp,-32748
100119e8:	18bfcc1e 	bne	r3,r2,1001191c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
100119ec:	0005883a 	mov	r2,zero
}
100119f0:	e037883a 	mov	sp,fp
100119f4:	dfc00117 	ldw	ra,4(sp)
100119f8:	df000017 	ldw	fp,0(sp)
100119fc:	dec00204 	addi	sp,sp,8
10011a00:	f800283a 	ret

10011a04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011a04:	defffc04 	addi	sp,sp,-16
10011a08:	df000315 	stw	fp,12(sp)
10011a0c:	df000304 	addi	fp,sp,12
10011a10:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
10011a14:	00bffa04 	movi	r2,-24
10011a18:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011a1c:	e03fff15 	stw	zero,-4(fp)
10011a20:	00001706 	br	10011a80 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
10011a24:	e0bfff17 	ldw	r2,-4(fp)
10011a28:	10c00324 	muli	r3,r2,12
10011a2c:	00840074 	movhi	r2,4097
10011a30:	1885883a 	add	r2,r3,r2
10011a34:	108f6717 	ldw	r2,15772(r2)
10011a38:	10000e1e 	bne	r2,zero,10011a74 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
10011a3c:	e0bfff17 	ldw	r2,-4(fp)
10011a40:	11000324 	muli	r4,r2,12
10011a44:	e0fffd17 	ldw	r3,-12(fp)
10011a48:	00840074 	movhi	r2,4097
10011a4c:	2085883a 	add	r2,r4,r2
10011a50:	10cf6715 	stw	r3,15772(r2)
      if (i > alt_max_fd)
10011a54:	d0e00917 	ldw	r3,-32732(gp)
10011a58:	e0bfff17 	ldw	r2,-4(fp)
10011a5c:	1880020e 	bge	r3,r2,10011a68 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
10011a60:	e0bfff17 	ldw	r2,-4(fp)
10011a64:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
10011a68:	e0bfff17 	ldw	r2,-4(fp)
10011a6c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10011a70:	00000706 	br	10011a90 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
10011a74:	e0bfff17 	ldw	r2,-4(fp)
10011a78:	10800044 	addi	r2,r2,1
10011a7c:	e0bfff15 	stw	r2,-4(fp)
10011a80:	e0bfff17 	ldw	r2,-4(fp)
10011a84:	10800810 	cmplti	r2,r2,32
10011a88:	103fe61e 	bne	r2,zero,10011a24 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
10011a8c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011a90:	e0bffe17 	ldw	r2,-8(fp)
}
10011a94:	e037883a 	mov	sp,fp
10011a98:	df000017 	ldw	fp,0(sp)
10011a9c:	dec00104 	addi	sp,sp,4
10011aa0:	f800283a 	ret

10011aa4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10011aa4:	defffb04 	addi	sp,sp,-20
10011aa8:	df000415 	stw	fp,16(sp)
10011aac:	df000404 	addi	fp,sp,16
10011ab0:	e13ffd15 	stw	r4,-12(fp)
10011ab4:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10011ab8:	e0bffc17 	ldw	r2,-16(fp)
10011abc:	10840070 	cmpltui	r2,r2,4097
10011ac0:	1000021e 	bne	r2,zero,10011acc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10011ac4:	00840004 	movi	r2,4096
10011ac8:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
10011acc:	e0fffd17 	ldw	r3,-12(fp)
10011ad0:	e0bffc17 	ldw	r2,-16(fp)
10011ad4:	1885883a 	add	r2,r3,r2
10011ad8:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011adc:	e0bffd17 	ldw	r2,-12(fp)
10011ae0:	e0bfff15 	stw	r2,-4(fp)
10011ae4:	00000506 	br	10011afc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10011ae8:	e0bfff17 	ldw	r2,-4(fp)
10011aec:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011af0:	e0bfff17 	ldw	r2,-4(fp)
10011af4:	10800804 	addi	r2,r2,32
10011af8:	e0bfff15 	stw	r2,-4(fp)
10011afc:	e0ffff17 	ldw	r3,-4(fp)
10011b00:	e0bffe17 	ldw	r2,-8(fp)
10011b04:	18bff836 	bltu	r3,r2,10011ae8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10011b08:	e0bffd17 	ldw	r2,-12(fp)
10011b0c:	108007cc 	andi	r2,r2,31
10011b10:	10000226 	beq	r2,zero,10011b1c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10011b14:	e0bfff17 	ldw	r2,-4(fp)
10011b18:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10011b1c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10011b20:	0001883a 	nop
10011b24:	e037883a 	mov	sp,fp
10011b28:	df000017 	ldw	fp,0(sp)
10011b2c:	dec00104 	addi	sp,sp,4
10011b30:	f800283a 	ret

10011b34 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011b34:	defffe04 	addi	sp,sp,-8
10011b38:	df000115 	stw	fp,4(sp)
10011b3c:	df000104 	addi	fp,sp,4
10011b40:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011b44:	e0bfff17 	ldw	r2,-4(fp)
10011b48:	10bffe84 	addi	r2,r2,-6
10011b4c:	10c00428 	cmpgeui	r3,r2,16
10011b50:	1800191e 	bne	r3,zero,10011bb8 <alt_exception_cause_generated_bad_addr+0x84>
10011b54:	100690ba 	slli	r3,r2,2
10011b58:	00840074 	movhi	r2,4097
10011b5c:	1885883a 	add	r2,r3,r2
10011b60:	1086da17 	ldw	r2,7016(r2)
10011b64:	1000683a 	jmp	r2
10011b68:	10011ba8 	cmpgeui	zero,r2,1134
10011b6c:	10011ba8 	cmpgeui	zero,r2,1134
10011b70:	10011bb8 	rdprs	zero,r2,1134
10011b74:	10011bb8 	rdprs	zero,r2,1134
10011b78:	10011bb8 	rdprs	zero,r2,1134
10011b7c:	10011ba8 	cmpgeui	zero,r2,1134
10011b80:	10011bb0 	cmpltui	zero,r2,1134
10011b84:	10011bb8 	rdprs	zero,r2,1134
10011b88:	10011ba8 	cmpgeui	zero,r2,1134
10011b8c:	10011ba8 	cmpgeui	zero,r2,1134
10011b90:	10011bb8 	rdprs	zero,r2,1134
10011b94:	10011ba8 	cmpgeui	zero,r2,1134
10011b98:	10011bb0 	cmpltui	zero,r2,1134
10011b9c:	10011bb8 	rdprs	zero,r2,1134
10011ba0:	10011bb8 	rdprs	zero,r2,1134
10011ba4:	10011ba8 	cmpgeui	zero,r2,1134
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011ba8:	00800044 	movi	r2,1
10011bac:	00000306 	br	10011bbc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011bb0:	0005883a 	mov	r2,zero
10011bb4:	00000106 	br	10011bbc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
10011bb8:	0005883a 	mov	r2,zero
  }
}
10011bbc:	e037883a 	mov	sp,fp
10011bc0:	df000017 	ldw	fp,0(sp)
10011bc4:	dec00104 	addi	sp,sp,4
10011bc8:	f800283a 	ret

10011bcc <atexit>:
10011bcc:	200b883a 	mov	r5,r4
10011bd0:	000f883a 	mov	r7,zero
10011bd4:	000d883a 	mov	r6,zero
10011bd8:	0009883a 	mov	r4,zero
10011bdc:	0011ca01 	jmpi	10011ca0 <__register_exitproc>

10011be0 <exit>:
10011be0:	defffe04 	addi	sp,sp,-8
10011be4:	000b883a 	mov	r5,zero
10011be8:	dc000015 	stw	r16,0(sp)
10011bec:	dfc00115 	stw	ra,4(sp)
10011bf0:	2021883a 	mov	r16,r4
10011bf4:	0011d300 	call	10011d30 <__call_exitprocs>
10011bf8:	00840074 	movhi	r2,4097
10011bfc:	1113e017 	ldw	r4,20352(r2)
10011c00:	20800f17 	ldw	r2,60(r4)
10011c04:	10000126 	beq	r2,zero,10011c0c <exit+0x2c>
10011c08:	103ee83a 	callr	r2
10011c0c:	8009883a 	mov	r4,r16
10011c10:	0011e480 	call	10011e48 <_exit>

10011c14 <memcmp>:
10011c14:	30800130 	cmpltui	r2,r6,4
10011c18:	10000b1e 	bne	r2,zero,10011c48 <memcmp+0x34>
10011c1c:	2144b03a 	or	r2,r4,r5
10011c20:	108000cc 	andi	r2,r2,3
10011c24:	10001a1e 	bne	r2,zero,10011c90 <memcmp+0x7c>
10011c28:	20c00017 	ldw	r3,0(r4)
10011c2c:	28800017 	ldw	r2,0(r5)
10011c30:	1880171e 	bne	r3,r2,10011c90 <memcmp+0x7c>
10011c34:	31bfff04 	addi	r6,r6,-4
10011c38:	30800128 	cmpgeui	r2,r6,4
10011c3c:	21000104 	addi	r4,r4,4
10011c40:	29400104 	addi	r5,r5,4
10011c44:	103ff81e 	bne	r2,zero,10011c28 <memcmp+0x14>
10011c48:	30ffffc4 	addi	r3,r6,-1
10011c4c:	30000e26 	beq	r6,zero,10011c88 <memcmp+0x74>
10011c50:	29800003 	ldbu	r6,0(r5)
10011c54:	20800003 	ldbu	r2,0(r4)
10011c58:	30800f1e 	bne	r6,r2,10011c98 <memcmp+0x84>
10011c5c:	18800044 	addi	r2,r3,1
10011c60:	20c00044 	addi	r3,r4,1
10011c64:	2089883a 	add	r4,r4,r2
10011c68:	00000506 	br	10011c80 <memcmp+0x6c>
10011c6c:	18800003 	ldbu	r2,0(r3)
10011c70:	29800003 	ldbu	r6,0(r5)
10011c74:	18c00044 	addi	r3,r3,1
10011c78:	10803fcc 	andi	r2,r2,255
10011c7c:	1180061e 	bne	r2,r6,10011c98 <memcmp+0x84>
10011c80:	29400044 	addi	r5,r5,1
10011c84:	193ff91e 	bne	r3,r4,10011c6c <memcmp+0x58>
10011c88:	0005883a 	mov	r2,zero
10011c8c:	f800283a 	ret
10011c90:	30ffffc4 	addi	r3,r6,-1
10011c94:	003fee06 	br	10011c50 <memcmp+0x3c>
10011c98:	1185c83a 	sub	r2,r2,r6
10011c9c:	f800283a 	ret

10011ca0 <__register_exitproc>:
10011ca0:	00840074 	movhi	r2,4097
10011ca4:	10d3e017 	ldw	r3,20352(r2)
10011ca8:	18805217 	ldw	r2,328(r3)
10011cac:	10001726 	beq	r2,zero,10011d0c <__register_exitproc+0x6c>
10011cb0:	10c00117 	ldw	r3,4(r2)
10011cb4:	1a000808 	cmpgei	r8,r3,32
10011cb8:	40001b1e 	bne	r8,zero,10011d28 <__register_exitproc+0x88>
10011cbc:	20000b26 	beq	r4,zero,10011cec <__register_exitproc+0x4c>
10011cc0:	181090ba 	slli	r8,r3,2
10011cc4:	02400044 	movi	r9,1
10011cc8:	48d2983a 	sll	r9,r9,r3
10011ccc:	1211883a 	add	r8,r2,r8
10011cd0:	41802215 	stw	r6,136(r8)
10011cd4:	11806217 	ldw	r6,392(r2)
10011cd8:	21000098 	cmpnei	r4,r4,2
10011cdc:	324cb03a 	or	r6,r6,r9
10011ce0:	11806215 	stw	r6,392(r2)
10011ce4:	41c04215 	stw	r7,264(r8)
10011ce8:	20000b26 	beq	r4,zero,10011d18 <__register_exitproc+0x78>
10011cec:	19000084 	addi	r4,r3,2
10011cf0:	200890ba 	slli	r4,r4,2
10011cf4:	18c00044 	addi	r3,r3,1
10011cf8:	10c00115 	stw	r3,4(r2)
10011cfc:	1105883a 	add	r2,r2,r4
10011d00:	11400015 	stw	r5,0(r2)
10011d04:	0005883a 	mov	r2,zero
10011d08:	f800283a 	ret
10011d0c:	18805304 	addi	r2,r3,332
10011d10:	18805215 	stw	r2,328(r3)
10011d14:	003fe606 	br	10011cb0 <__register_exitproc+0x10>
10011d18:	11006317 	ldw	r4,396(r2)
10011d1c:	2252b03a 	or	r9,r4,r9
10011d20:	12406315 	stw	r9,396(r2)
10011d24:	003ff106 	br	10011cec <__register_exitproc+0x4c>
10011d28:	00bfffc4 	movi	r2,-1
10011d2c:	f800283a 	ret

10011d30 <__call_exitprocs>:
10011d30:	defff704 	addi	sp,sp,-36
10011d34:	00840074 	movhi	r2,4097
10011d38:	ddc00715 	stw	r23,28(sp)
10011d3c:	15d3e017 	ldw	r23,20352(r2)
10011d40:	dd400515 	stw	r21,20(sp)
10011d44:	dd000415 	stw	r20,16(sp)
10011d48:	dcc00315 	stw	r19,12(sp)
10011d4c:	dfc00815 	stw	ra,32(sp)
10011d50:	dd800615 	stw	r22,24(sp)
10011d54:	dc800215 	stw	r18,8(sp)
10011d58:	dc400115 	stw	r17,4(sp)
10011d5c:	dc000015 	stw	r16,0(sp)
10011d60:	2029883a 	mov	r20,r4
10011d64:	282b883a 	mov	r21,r5
10011d68:	04c00044 	movi	r19,1
10011d6c:	bc805217 	ldw	r18,328(r23)
10011d70:	90000d26 	beq	r18,zero,10011da8 <__call_exitprocs+0x78>
10011d74:	94000117 	ldw	r16,4(r18)
10011d78:	847fffc4 	addi	r17,r16,-1
10011d7c:	88000a16 	blt	r17,zero,10011da8 <__call_exitprocs+0x78>
10011d80:	84000044 	addi	r16,r16,1
10011d84:	802090ba 	slli	r16,r16,2
10011d88:	9421883a 	add	r16,r18,r16
10011d8c:	a8001126 	beq	r21,zero,10011dd4 <__call_exitprocs+0xa4>
10011d90:	80804017 	ldw	r2,256(r16)
10011d94:	15400f26 	beq	r2,r21,10011dd4 <__call_exitprocs+0xa4>
10011d98:	8c7fffc4 	addi	r17,r17,-1
10011d9c:	88bfffd8 	cmpnei	r2,r17,-1
10011da0:	843fff04 	addi	r16,r16,-4
10011da4:	103ff91e 	bne	r2,zero,10011d8c <__call_exitprocs+0x5c>
10011da8:	dfc00817 	ldw	ra,32(sp)
10011dac:	ddc00717 	ldw	r23,28(sp)
10011db0:	dd800617 	ldw	r22,24(sp)
10011db4:	dd400517 	ldw	r21,20(sp)
10011db8:	dd000417 	ldw	r20,16(sp)
10011dbc:	dcc00317 	ldw	r19,12(sp)
10011dc0:	dc800217 	ldw	r18,8(sp)
10011dc4:	dc400117 	ldw	r17,4(sp)
10011dc8:	dc000017 	ldw	r16,0(sp)
10011dcc:	dec00904 	addi	sp,sp,36
10011dd0:	f800283a 	ret
10011dd4:	90800117 	ldw	r2,4(r18)
10011dd8:	81800017 	ldw	r6,0(r16)
10011ddc:	10bfffc4 	addi	r2,r2,-1
10011de0:	14401526 	beq	r2,r17,10011e38 <__call_exitprocs+0x108>
10011de4:	80000015 	stw	zero,0(r16)
10011de8:	303feb26 	beq	r6,zero,10011d98 <__call_exitprocs+0x68>
10011dec:	9c46983a 	sll	r3,r19,r17
10011df0:	90806217 	ldw	r2,392(r18)
10011df4:	95800117 	ldw	r22,4(r18)
10011df8:	1884703a 	and	r2,r3,r2
10011dfc:	1000061e 	bne	r2,zero,10011e18 <__call_exitprocs+0xe8>
10011e00:	303ee83a 	callr	r6
10011e04:	90800117 	ldw	r2,4(r18)
10011e08:	15bfd81e 	bne	r2,r22,10011d6c <__call_exitprocs+0x3c>
10011e0c:	b8805217 	ldw	r2,328(r23)
10011e10:	14bfe126 	beq	r2,r18,10011d98 <__call_exitprocs+0x68>
10011e14:	003fd506 	br	10011d6c <__call_exitprocs+0x3c>
10011e18:	90806317 	ldw	r2,396(r18)
10011e1c:	81002017 	ldw	r4,128(r16)
10011e20:	1886703a 	and	r3,r3,r2
10011e24:	1800061e 	bne	r3,zero,10011e40 <__call_exitprocs+0x110>
10011e28:	200b883a 	mov	r5,r4
10011e2c:	a009883a 	mov	r4,r20
10011e30:	303ee83a 	callr	r6
10011e34:	003ff306 	br	10011e04 <__call_exitprocs+0xd4>
10011e38:	94400115 	stw	r17,4(r18)
10011e3c:	003fea06 	br	10011de8 <__call_exitprocs+0xb8>
10011e40:	303ee83a 	callr	r6
10011e44:	003fef06 	br	10011e04 <__call_exitprocs+0xd4>

10011e48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011e48:	defffd04 	addi	sp,sp,-12
10011e4c:	df000215 	stw	fp,8(sp)
10011e50:	df000204 	addi	fp,sp,8
10011e54:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011e58:	0001883a 	nop
10011e5c:	e0bffe17 	ldw	r2,-8(fp)
10011e60:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011e64:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011e68:	10000226 	beq	r2,zero,10011e74 <_exit+0x2c>
    ALT_SIM_FAIL();
10011e6c:	002af070 	cmpltui	zero,zero,43969
10011e70:	00000106 	br	10011e78 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011e74:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011e78:	003fff06 	br	10011e78 <_exit+0x30>
