
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000238

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00013098 memsz 0x00013098 flags r-x
    LOAD off    0x000140b8 vaddr 0x100130b8 paddr 0x100152d4 align 2**12
         filesz 0x0000221c memsz 0x0000221c flags rw-
    LOAD off    0x000164f0 vaddr 0x100174f0 paddr 0x100174f0 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011f60  10000238  10000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f20  10012198  10012198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000221c  100130b8  100152d4  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  100174f0  100174f0  000164f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000162d4  2**0
                  CONTENTS
  7 .sdram        00000000  1001764c  1001764c  000162d4  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  000162d4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001008  00000000  00000000  00016300  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004b15a  00000000  00000000  00017308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f457  00000000  00000000  00062462  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018d54  00000000  00000000  000718b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002604  00000000  00000000  0008a610  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000041f7  00000000  00000000  0008cc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c27c  00000000  00000000  00090e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000ad088  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c58  00000000  00000000  000ad0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b23e0  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b23e3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b23ef  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b23f0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b23f1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b23f5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b23f9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b23fd  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b2408  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b2413  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000b241e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  000b242f  2**0
                  CONTENTS, READONLY
 30 .jdi          00006d60  00000000  00000000  000b2444  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000238 l    d  .text	00000000 .text
10012198 l    d  .rodata	00000000 .rodata
100130b8 l    d  .rwdata	00000000 .rwdata
100174f0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001764c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Lab7/final_project/software/final_project_bsp/obj/HAL/src/crt0.o
10000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 aesop.c
10015298 l     O .rwdata	00000001 CNST_AES_NB
10015299 l     O .rwdata	00000001 CNST_AES_NR
1001529a l     O .rwdata	00000001 CNST_AES_NK
00000000 l    df *ABS*	00000000 core.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100174f0 l     O .bss	00000002 ctl_reg.3792
100174f2 l     O .bss	00000002 no_device.3793
00000000 l    df *ABS*	00000000 tile_eng_driver.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100057b8 l     F .text	000000c0 __sbprintf
10012b8a l     O .rodata	00000010 blanks.5226
10012b7a l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100059d8 l     F .text	00000210 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007560 l     F .text	00000008 __fp_lock
10007574 l     F .text	00000168 __sinit.part.0
100076dc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100136f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012bac l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a6c4 l     F .text	000000f4 __sprint_r.part.0
1000bb14 l     F .text	000000c0 __sbprintf
10012ce0 l     O .rodata	00000010 blanks.5203
10012cd0 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f9bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fac8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000faf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fbe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000fcc0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fdac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ff80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100152c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100101f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010324 l     F .text	00000034 alt_dev_reg
10014238 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010614 l     F .text	00000204 altera_avalon_jtag_uart_irq
10010818 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
10010e54 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100111e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001164c l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011778 l     F .text	0000003c alt_get_errno
100117b4 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017520 g     O .bss	00000004 alt_instruction_exception_handler
10009dac g     F .text	00000074 _mprec_log10
10009e8c g     F .text	00000074 __any_on
1000c0a0 g     F .text	00000058 _isatty_r
10012bb8 g     O .rodata	00000028 __mprec_tinytens
1000febc g     F .text	0000007c alt_main
100034cc g     F .text	000000cc _puts_r
1001754c g     O .bss	00000100 alt_irq
1000c188 g     F .text	00000064 _lseek_r
100152d4 g       *ABS*	00000000 __flash_rwdata_start
10000f28 g     F .text	000001c0 game_tick
1000e4d8 g     F .text	00000080 .hidden __eqdf2
1001764c g       *ABS*	00000000 __alt_heap_start
10003494 g     F .text	00000038 printf
1000c4d4 g     F .text	0000006c _wcrtomb_r
1000a660 g     F .text	0000005c __sseek
1000785c g     F .text	00000010 __sinit
1000c378 g     F .text	00000148 __swbuf_r
1000c0f8 g     F .text	00000070 _setlocale_r
100076e4 g     F .text	00000068 __sfmoreglue
1000ff5c g     F .text	00000024 __malloc_unlock
10003204 g     F .text	00000080 UsbGetRetryCnt
10008da8 g     F .text	0000012c memmove
100010e8 g     F .text	00000088 IO_init
10007848 g     F .text	00000014 _cleanup
100020e4 g     F .text	000000a8 writePalette
10008fc4 g     F .text	000000a4 _Balloc
1000e558 g     F .text	000000f0 .hidden __gtdf2
10011b64 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000001c __reset
100082d8 g     F .text	00000008 __localeconv_l
10000020 g       *ABS*	00000000 __flash_exceptions_start
10012198 g     O .rodata	00000100 aes_sbox
1000c040 g     F .text	00000060 _fstat_r
10017500 g     O .bss	00000004 errno
10000e80 g     F .text	000000a8 transpose
1000a5d8 g     F .text	00000008 __seofread
1001750c g     O .bss	00000004 alt_argv
100130b8 g     O .rwdata	00000600 gf_mul
1001d298 g       *ABS*	00000000 _gp
100101c0 g     F .text	00000030 usleep
100140b8 g     O .rwdata	00000180 alt_fd_list
10011b88 g     F .text	00000090 alt_find_dev
10003364 g     F .text	00000100 memcpy
10007568 g     F .text	0000000c _cleanup_r
1000f804 g     F .text	000000c8 .hidden __floatsidf
100116fc g     F .text	0000007c alt_io_redirect
1000e648 g     F .text	000000f0 .hidden __ltdf2
10012198 g       *ABS*	00000000 __DTOR_END__
10003598 g     F .text	00000010 puts
10011e50 g     F .text	00000098 alt_exception_cause_generated_bad_addr
10009d04 g     F .text	000000a8 __ratio
1000bafc g     F .text	00000018 __vfiprintf_internal
10010a14 g     F .text	0000021c altera_avalon_jtag_uart_read
10003464 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000d1d0 g     F .text	00000064 .hidden __udivsi3
1000fc1c g     F .text	000000a4 isatty
10012c08 g     O .rodata	000000c8 __mprec_tens
10011dc0 g     F .text	00000090 alt_icache_flush
100174fc g     O .bss	00000004 __malloc_top_pad
10002890 g     F .text	00000268 UsbGetConfigDesc2
100082e0 g     F .text	0000000c _localeconv_r
100093c4 g     F .text	00000034 __i2b
10007cbc g     F .text	000004c4 __sfvwrite_r
1000a52c g     F .text	00000058 _sbrk_r
1000c23c g     F .text	00000064 _read_r
100152bc g     O .rwdata	00000004 alt_max_fd
1000bd48 g     F .text	000000f8 _fclose_r
10007538 g     F .text	00000028 fflush
100174f8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000d290 g     F .text	000009a0 .hidden __adddf3
10009ab8 g     F .text	00000104 __b2d
1000cb98 g     F .text	00000540 .hidden __umoddi3
1000fde8 g     F .text	000000d4 lseek
1001529c g     O .rwdata	00000004 _global_impure_ptr
10009f00 g     F .text	0000062c _realloc_r
1001764c g       *ABS*	00000000 __bss_end
10011568 g     F .text	000000e4 alt_iic_isr_register
10011a5c g     F .text	00000108 alt_tick
1000c600 g     F .text	00000598 .hidden __udivdi3
1000bfa0 g     F .text	00000024 _fputwc_r
10012be0 g     O .rodata	00000028 __mprec_bigtens
100091a0 g     F .text	00000110 __s2b
1000f8cc g     F .text	0000009c .hidden __floatunsidf
10009848 g     F .text	00000058 __mcmp
100022e0 g     F .text	00000100 UsbSetAddress
1000787c g     F .text	00000014 __fp_lock_all
1001151c g     F .text	0000004c alt_ic_irq_enabled
10000dc0 g     F .text	000000c0 add_round_key
100119c0 g     F .text	0000009c alt_alarm_stop
10017514 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000c8 alt_irq_handler
10014090 g     O .rwdata	00000028 alt_dev_null
1001119c g     F .text	00000048 alt_dcache_flush_all
100092b0 g     F .text	00000064 __hi0bits
100011e4 g     F .text	00000068 IO_read
1000f784 g     F .text	00000080 .hidden __fixdfsi
100152d4 g       *ABS*	00000000 __ram_rwdata_end
100152b4 g     O .rwdata	00000008 alt_dev_list
1001022c g     F .text	000000f8 write
100130b8 g       *ABS*	00000000 __ram_rodata_end
1000fb30 g     F .text	000000b0 fstat
1000e648 g     F .text	000000f0 .hidden __ledf2
10003284 g     F .text	00000080 UsbPrintMem
100095e4 g     F .text	00000128 __pow5mult
1000a7d0 g     F .text	0000132c ___vfiprintf_internal_r
1000d234 g     F .text	0000005c .hidden __umodsi3
1001764c g       *ABS*	00000000 end
10010554 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
10012198 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10010ecc g     F .text	0000007c alt_avalon_timer_sc_init
1000f968 g     F .text	00000054 .hidden __clzsi2
10010c30 g     F .text	00000224 altera_avalon_jtag_uart_write
1000786c g     F .text	00000004 __sfp_lock_acquire
10008cc0 g     F .text	000000e8 memchr
10003640 g     F .text	00002160 ___vfprintf_internal_r
10002bf8 g     F .text	00000100 UsbClassRequest
100079c0 g     F .text	000002fc _free_r
10012e01 g     O .rodata	00000180 _ctype_b
1000c168 g     F .text	0000000c __locale_mb_cur_max
1000096c g     F .text	000000ac sub_word32
1001204c g     F .text	00000118 __call_exitprocs
10000658 g     F .text	000001f0 key_expansion
100152a4 g     O .rwdata	00000004 __malloc_sbrk_base
10000238 g     F .text	0000004c _start
10017518 g     O .bss	00000004 _alt_tick_rate
10000848 g     F .text	000000d8 shift_rows
1000970c g     F .text	0000013c __lshift
1001751c g     O .bss	00000004 _alt_nticks
1000ffbc g     F .text	000000fc read
10010390 g     F .text	00000060 alt_sys_init
10011fbc g     F .text	00000090 __register_exitproc
100093f8 g     F .text	000001ec __multiply
100108b8 g     F .text	00000068 altera_avalon_jtag_uart_close
100130b8 g       *ABS*	00000000 __ram_rwdata_start
10012198 g       *ABS*	00000000 __ram_rodata_start
10017524 g     O .bss	00000028 __malloc_current_mallinfo
10009bbc g     F .text	00000148 __d2b
100023e0 g     F .text	00000148 UsbGetDeviceDesc1
100103f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10012298 g     O .rodata	00000100 aes_invsbox
10011d20 g     F .text	000000a0 alt_get_fd
10011074 g     F .text	00000128 alt_busy_sleep
1000bc38 g     F .text	00000058 _close_r
10011f30 g     F .text	0000008c memcmp
100104b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001764c g       *ABS*	00000000 __alt_stack_base
10010500 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005878 g     F .text	00000160 __swsetup_r
1000dc30 g     F .text	000008a8 .hidden __divdf3
1000774c g     F .text	000000fc __sfp
10009e20 g     F .text	0000006c __copybits
10013b1c g     O .rwdata	00000408 __malloc_av_
10007878 g     F .text	00000004 __sinit_lock_release
1000e738 g     F .text	0000068c .hidden __muldf3
1000a584 g     F .text	00000054 __sread
10000adc g     F .text	00000028 rot_word
10003180 g     F .text	00000084 UsbWaitTDListDone
10011c18 g     F .text	00000108 alt_find_file
10000b04 g     F .text	000002bc mix_columns
10011220 g     F .text	000000a4 alt_dev_llist_insert
1000ff38 g     F .text	00000024 __malloc_lock
10010110 g     F .text	000000b0 sbrk
100074d8 g     F .text	00000060 _fflush_r
1000bc90 g     F .text	000000b8 _calloc_r
100174f0 g       *ABS*	00000000 __bss_start
10008ed4 g     F .text	000000f0 memset
1000124c g     F .text	00000d9c main
1000206c g     F .text	00000078 writePaletteHelper
10017510 g     O .bss	00000004 alt_envp
100174f4 g     O .bss	00000004 __malloc_max_total_mem
10010450 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002af8 g     F .text	00000100 UsbSetConfig
1000c4c0 g     F .text	00000014 __swbuf
1000a6bc g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000be40 g     F .text	00000010 fclose
10000a18 g     F .text	000000c4 sub_word
10005be8 g     F .text	000016c8 _dtoa_r
100084cc g     F .text	000007f4 _malloc_r
1000c5d0 g     F .text	00000030 __ascii_wctomb
100152c0 g     O .rwdata	00000004 alt_errno
10008180 g     F .text	000000a4 _fwalk
1000c1ec g     F .text	0000000c _mbtowc_r
1000d0d8 g     F .text	00000080 .hidden __divsi3
100078a4 g     F .text	0000011c _malloc_trim_r
10002cf8 g     F .text	00000148 UsbGetHidDesc
10012198 g       *ABS*	00000000 __CTOR_END__
1000c2a0 g     F .text	000000d8 strcmp
10012198 g       *ABS*	00000000 __flash_rodata_start
10012198 g       *ABS*	00000000 __DTOR_LIST__
1000e4d8 g     F .text	00000080 .hidden __nedf2
100021e8 g     F .text	00000044 UsbRead
10001fe8 g     F .text	00000084 drawTile
10010358 g     F .text	00000038 alt_irq_init
100100b8 g     F .text	00000058 alt_release_fd
10012f81 g     O .rodata	00000100 .hidden __clz_tab
10017504 g     O .bss	00000004 _PathLocale
10011ee8 g     F .text	00000014 atexit
1000bbd4 g     F .text	00000064 _write_r
1000c174 g     F .text	00000014 setlocale
100152a0 g     O .rwdata	00000004 _impure_ptr
10017508 g     O .bss	00000004 alt_argc
100072b0 g     F .text	00000228 __sflush_r
10011324 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000c1f8 g     F .text	00000044 __ascii_mbtowc
10009a5c g     F .text	0000005c __ulp
10007890 g     F .text	00000014 __fp_unlock_all
100152ac g     O .rwdata	00000008 alt_fs_list
100136b8 g     O .rwdata	00000040 Rcon
10002e40 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100082ec g     F .text	0000000c localeconv
100082f8 g     F .text	00000098 __swhatbuf_r
100113b8 g     F .text	00000050 alt_ic_isr_register
100152d4 g       *ABS*	00000000 _edata
1001764c g       *ABS*	00000000 _end
1000218c g     F .text	0000005c UsbWrite
1000be50 g     F .text	00000150 __fputwc
10000238 g       *ABS*	00000000 __ram_exceptions_end
10010920 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
10011490 g     F .text	0000008c alt_ic_irq_disable
1000a5e0 g     F .text	00000080 __swrite
100152a8 g     O .rwdata	00000004 __malloc_trim_threshold
10011efc g     F .text	00000034 exit
10008224 g     F .text	000000b4 _fwalk_reent
100098a0 g     F .text	000001bc __mdiff
1000d158 g     F .text	00000078 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007870 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10001170 g     F .text	00000074 IO_write
10012d00 g     O .rodata	00000101 _ctype_
1000f730 g     F .text	00000054 .hidden __unorddf2
10012164 g     F .text	00000034 _exit
10010f48 g     F .text	0000012c alt_alarm_start
10003304 g     F .text	00000060 .hidden __muldi3
10008390 g     F .text	0000013c __smakebuf_r
100035a8 g     F .text	00000098 strlen
1001186c g     F .text	00000154 open
1000e558 g     F .text	000000f0 .hidden __gedf2
1000a7b8 g     F .text	00000018 __sprint_r
10011384 g     F .text	00000034 alt_icache_flush_all
100152c8 g     O .rwdata	00000004 alt_priority_mask
10011408 g     F .text	00000088 alt_ic_irq_enable
100057a0 g     F .text	00000018 __vfprintf_internal
1000c5c4 g     F .text	0000000c _wctomb_r
1000edc4 g     F .text	0000096c .hidden __subdf3
10009314 g     F .text	000000b0 __lo0bits
10002700 g     F .text	00000190 UsbGetConfigDesc1
100152cc g     O .rwdata	00000008 alt_alarm_list
100112c4 g     F .text	00000060 _do_ctors
1000222c g     F .text	000000b4 UsbSoftReset
1000c540 g     F .text	00000084 wcrtomb
1000f9f8 g     F .text	000000d0 close
10002528 g     F .text	000001d8 UsbGetDeviceDesc2
10013f24 g     O .rwdata	0000016c __global_locale
1000fd28 g     F .text	00000084 alt_load
10000920 g     F .text	0000004c sub_byte
1000bfc4 g     F .text	0000007c fputwc
10007874 g     F .text	00000004 __sinit_lock_acquire
1000908c g     F .text	00000114 __multadd
10009068 g     F .text	00000024 _Bfree
10000284 g     F .text	000003d4 aes_encrypt



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08408e14 	ori	at,at,568
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001c40 	call	100001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
10000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0ffff17 	ldw	r3,-4(fp)
10000130:	e0bffe17 	ldw	r2,-8(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001126 	beq	r2,zero,10000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	e0bffd17 	ldw	r2,-12(fp)
10000140:	100690fa 	slli	r3,r2,3
10000144:	00840074 	movhi	r2,4097
10000148:	1885883a 	add	r2,r3,r2
1000014c:	10dd5317 	ldw	r3,30028(r2)
10000150:	e0bffd17 	ldw	r2,-12(fp)
10000154:	100890fa 	slli	r4,r2,3
10000158:	00840074 	movhi	r2,4097
1000015c:	2085883a 	add	r2,r4,r2
10000160:	109d5417 	ldw	r2,30032(r2)
10000164:	1009883a 	mov	r4,r2
10000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
1000016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
10000170:	0005313a 	rdctl	r2,ipending
10000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
10000178:	e0bffb17 	ldw	r2,-20(fp)
1000017c:	00000706 	br	1000019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
10000180:	e0bffe17 	ldw	r2,-8(fp)
10000184:	1085883a 	add	r2,r2,r2
10000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
1000018c:	e0bffd17 	ldw	r2,-12(fp)
10000190:	10800044 	addi	r2,r2,1
10000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
10000198:	003fe406 	br	1000012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
1000019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
100001a0:	e0bfff17 	ldw	r2,-4(fp)
100001a4:	103fde1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a8:	0001883a 	nop
}
100001ac:	0001883a 	nop
100001b0:	e037883a 	mov	sp,fp
100001b4:	dfc00117 	ldw	ra,4(sp)
100001b8:	df000017 	ldw	fp,0(sp)
100001bc:	dec00204 	addi	sp,sp,8
100001c0:	f800283a 	ret

100001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001c4:	defffb04 	addi	sp,sp,-20
100001c8:	dfc00415 	stw	ra,16(sp)
100001cc:	df000315 	stw	fp,12(sp)
100001d0:	df000304 	addi	fp,sp,12
100001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001d8:	000531fa 	rdctl	r2,exception
100001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001e0:	e0bfff17 	ldw	r2,-4(fp)
100001e4:	1004d0ba 	srli	r2,r2,2
100001e8:	108007cc 	andi	r2,r2,31
100001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001f0:	0005333a 	rdctl	r2,badaddr
100001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f8:	d0a8a217 	ldw	r2,-23928(gp)
100001fc:	10000726 	beq	r2,zero,1000021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10000200:	d0a8a217 	ldw	r2,-23928(gp)
10000204:	e0ffff17 	ldw	r3,-4(fp)
10000208:	e1bffe17 	ldw	r6,-8(fp)
1000020c:	e17ffd17 	ldw	r5,-12(fp)
10000210:	1809883a 	mov	r4,r3
10000214:	103ee83a 	callr	r2
10000218:	00000206 	br	10000224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
1000021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000220:	0005883a 	mov	r2,zero
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

Disassembly of section .text:

10000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
1000023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000244:	00bffd16 	blt	zero,r2,1000023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000248:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
1000024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000250:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000254:	d6b4a614 	ori	gp,gp,53912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000258:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
1000025c:	109d3c14 	ori	r2,r2,29936

    movhi r3, %hi(__bss_end)
10000260:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000264:	18dd9314 	ori	r3,r3,30284

    beq r2, r3, 1f
10000268:	10c00326 	beq	r2,r3,10000278 <_start+0x40>

0:
    stw zero, (r2)
1000026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000274:	10fffd36 	bltu	r2,r3,1000026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000278:	000fd280 	call	1000fd28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
1000027c:	000febc0 	call	1000febc <alt_main>

10000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000280:	003fff06 	br	10000280 <alt_after_alt_main>

10000284 <aes_encrypt>:
[0 1]  [1 1] ...
[0 2]  ...
[0 3] ...
*/

void aes_encrypt(uint8_t* data_in, uint32_t* data_out, uint32_t* keyarr) {
10000284:	deffd404 	addi	sp,sp,-176
10000288:	dfc02b15 	stw	ra,172(sp)
1000028c:	df002a15 	stw	fp,168(sp)
10000290:	ddc02915 	stw	r23,164(sp)
10000294:	dd802815 	stw	r22,160(sp)
10000298:	dd402715 	stw	r21,156(sp)
1000029c:	dd002615 	stw	r20,152(sp)
100002a0:	dcc02515 	stw	r19,148(sp)
100002a4:	dc802415 	stw	r18,144(sp)
100002a8:	dc402315 	stw	r17,140(sp)
100002ac:	dc002215 	stw	r16,136(sp)
100002b0:	df002a04 	addi	fp,sp,168
100002b4:	e13fdb15 	stw	r4,-148(fp)
100002b8:	e17fda15 	stw	r5,-152(fp)
100002bc:	e1bfd915 	stw	r6,-156(fp)
100002c0:	d809883a 	mov	r4,sp
100002c4:	202f883a 	mov	r23,r4
	aes_state state; // = malloc(sizeof(uint32_t) * 4); //Flattened.
	aes_state state_in; // = malloc(sizeof(uint32_t) * 4); //Temporary.
	// Generate round keys.
	
	uint32_t key_out[(CNST_AES_NR+1)][CNST_AES_NB];
100002c8:	01000104 	movi	r4,4
100002cc:	21003fcc 	andi	r4,r4,255
100002d0:	213fffc4 	addi	r4,r4,-1
100002d4:	e13ff615 	stw	r4,-40(fp)
100002d8:	01000104 	movi	r4,4
100002dc:	21003fcc 	andi	r4,r4,255
100002e0:	200f883a 	mov	r7,r4
100002e4:	0011883a 	mov	r8,zero
100002e8:	3808d6fa 	srli	r4,r7,27
100002ec:	4006917a 	slli	r3,r8,5
100002f0:	20c6b03a 	or	r3,r4,r3
100002f4:	3804917a 	slli	r2,r7,5
100002f8:	00800104 	movi	r2,4
100002fc:	10803fcc 	andi	r2,r2,255
10000300:	102890ba 	slli	r20,r2,2
10000304:	00800284 	movi	r2,10
10000308:	10803fcc 	andi	r2,r2,255
1000030c:	e0bff515 	stw	r2,-44(fp)
10000310:	00800104 	movi	r2,4
10000314:	10803fcc 	andi	r2,r2,255
10000318:	1013883a 	mov	r9,r2
1000031c:	0015883a 	mov	r10,zero
10000320:	00800284 	movi	r2,10
10000324:	10803fcc 	andi	r2,r2,255
10000328:	10800044 	addi	r2,r2,1
1000032c:	1017883a 	mov	r11,r2
10000330:	0019883a 	mov	r12,zero
10000334:	580d883a 	mov	r6,r11
10000338:	600f883a 	mov	r7,r12
1000033c:	4809883a 	mov	r4,r9
10000340:	500b883a 	mov	r5,r10
10000344:	00033040 	call	10003304 <__muldi3>
10000348:	1009883a 	mov	r4,r2
1000034c:	180b883a 	mov	r5,r3
10000350:	2005883a 	mov	r2,r4
10000354:	2807883a 	mov	r3,r5
10000358:	1008d6fa 	srli	r4,r2,27
1000035c:	1826917a 	slli	r19,r3,5
10000360:	24e6b03a 	or	r19,r4,r19
10000364:	1024917a 	slli	r18,r2,5
10000368:	00800104 	movi	r2,4
1000036c:	10803fcc 	andi	r2,r2,255
10000370:	102b883a 	mov	r21,r2
10000374:	002d883a 	mov	r22,zero
10000378:	00800284 	movi	r2,10
1000037c:	10803fcc 	andi	r2,r2,255
10000380:	10800044 	addi	r2,r2,1
10000384:	e0bfd715 	stw	r2,-164(fp)
10000388:	e03fd815 	stw	zero,-160(fp)
1000038c:	e1bfd717 	ldw	r6,-164(fp)
10000390:	e1ffd817 	ldw	r7,-160(fp)
10000394:	a809883a 	mov	r4,r21
10000398:	b00b883a 	mov	r5,r22
1000039c:	00033040 	call	10003304 <__muldi3>
100003a0:	1009883a 	mov	r4,r2
100003a4:	180b883a 	mov	r5,r3
100003a8:	2005883a 	mov	r2,r4
100003ac:	2807883a 	mov	r3,r5
100003b0:	1008d6fa 	srli	r4,r2,27
100003b4:	1822917a 	slli	r17,r3,5
100003b8:	2462b03a 	or	r17,r4,r17
100003bc:	1020917a 	slli	r16,r2,5
100003c0:	00800284 	movi	r2,10
100003c4:	10803fcc 	andi	r2,r2,255
100003c8:	10c00044 	addi	r3,r2,1
100003cc:	00800104 	movi	r2,4
100003d0:	10803fcc 	andi	r2,r2,255
100003d4:	1885383a 	mul	r2,r3,r2
100003d8:	100490ba 	slli	r2,r2,2
100003dc:	108000c4 	addi	r2,r2,3
100003e0:	1004d0ba 	srli	r2,r2,2
100003e4:	100490ba 	slli	r2,r2,2
100003e8:	d8b7c83a 	sub	sp,sp,r2
100003ec:	d8800104 	addi	r2,sp,4
100003f0:	108000c4 	addi	r2,r2,3
100003f4:	1004d0ba 	srli	r2,r2,2
100003f8:	100490ba 	slli	r2,r2,2
100003fc:	e0bff415 	stw	r2,-48(fp)
	key_expansion(&keyarr[0], &key_out[0][0], CNST_AES_NK, CNST_AES_NB, CNST_AES_NR);
10000400:	e0fff417 	ldw	r3,-48(fp)
10000404:	00800104 	movi	r2,4
10000408:	11003fcc 	andi	r4,r2,255
1000040c:	00800104 	movi	r2,4
10000410:	11403fcc 	andi	r5,r2,255
10000414:	00800284 	movi	r2,10
10000418:	10803fcc 	andi	r2,r2,255
1000041c:	d8800015 	stw	r2,0(sp)
10000420:	280f883a 	mov	r7,r5
10000424:	200d883a 	mov	r6,r4
10000428:	180b883a 	mov	r5,r3
1000042c:	e13fd917 	ldw	r4,-156(fp)
10000430:	00006580 	call	10000658 <key_expansion>

	memcpy(state.state8, data_in, sizeof(state));
10000434:	e0ffdb17 	ldw	r3,-148(fp)
10000438:	e0bff004 	addi	r2,fp,-64
1000043c:	1809883a 	mov	r4,r3
10000440:	00c00404 	movi	r3,16
10000444:	180d883a 	mov	r6,r3
10000448:	200b883a 	mov	r5,r4
1000044c:	1009883a 	mov	r4,r2
10000450:	00033640 	call	10003364 <memcpy>
	
	add_round_key(state.state32, key_out[0], state_in.state32);
10000454:	e0fff417 	ldw	r3,-48(fp)
10000458:	e13fec04 	addi	r4,fp,-80
1000045c:	e0bff004 	addi	r2,fp,-64
10000460:	200d883a 	mov	r6,r4
10000464:	180b883a 	mov	r5,r3
10000468:	1009883a 	mov	r4,r2
1000046c:	0000dc00 	call	10000dc0 <add_round_key>
	memcpy(&state, &state_in, sizeof(state_in));
10000470:	e0bfec17 	ldw	r2,-80(fp)
10000474:	e0bff015 	stw	r2,-64(fp)
10000478:	e0bfed17 	ldw	r2,-76(fp)
1000047c:	e0bff115 	stw	r2,-60(fp)
10000480:	e0bfee17 	ldw	r2,-72(fp)
10000484:	e0bff215 	stw	r2,-56(fp)
10000488:	e0bfef17 	ldw	r2,-68(fp)
1000048c:	e0bff315 	stw	r2,-52(fp)
	
	aes_state state_in0, state_in1, state_in2, state_in3;
	
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
10000490:	00800044 	movi	r2,1
10000494:	e0bff745 	stb	r2,-35(fp)
10000498:	00003306 	br	10000568 <aes_encrypt+0x2e4>
		// Sub words.
		for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
1000049c:	e03ff785 	stb	zero,-34(fp)
100004a0:	00000d06 	br	100004d8 <aes_encrypt+0x254>
100004a4:	e0bff783 	ldbu	r2,-34(fp)
100004a8:	e0fff004 	addi	r3,fp,-64
100004ac:	100490ba 	slli	r2,r2,2
100004b0:	1889883a 	add	r4,r3,r2
100004b4:	e0bff783 	ldbu	r2,-34(fp)
100004b8:	e0ffe804 	addi	r3,fp,-96
100004bc:	100490ba 	slli	r2,r2,2
100004c0:	1885883a 	add	r2,r3,r2
100004c4:	100b883a 	mov	r5,r2
100004c8:	0000a180 	call	10000a18 <sub_word>
100004cc:	e0bff783 	ldbu	r2,-34(fp)
100004d0:	10800044 	addi	r2,r2,1
100004d4:	e0bff785 	stb	r2,-34(fp)
100004d8:	e0bff783 	ldbu	r2,-34(fp)
100004dc:	10800130 	cmpltui	r2,r2,4
100004e0:	103ff01e 	bne	r2,zero,100004a4 <aes_encrypt+0x220>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Shift Rows.
		shift_rows(state_in0.state8, state_in1.state8);
100004e4:	e0ffe404 	addi	r3,fp,-112
100004e8:	e0bfe804 	addi	r2,fp,-96
100004ec:	180b883a 	mov	r5,r3
100004f0:	1009883a 	mov	r4,r2
100004f4:	00008480 	call	10000848 <shift_rows>
		// memcpy(&state, &state_in, sizeof(state_in));
		
		// Mix Columns.
		mix_columns(state_in1.state8, state_in2.state8);
100004f8:	e0ffe004 	addi	r3,fp,-128
100004fc:	e0bfe404 	addi	r2,fp,-112
10000500:	180b883a 	mov	r5,r3
10000504:	1009883a 	mov	r4,r2
10000508:	0000b040 	call	10000b04 <mix_columns>
		//memcpy(&state, &state_in, sizeof(state_in));
		
		// Add Round Key
		add_round_key(state_in2.state32, key_out[round], state_in3.state32);
1000050c:	a006d0ba 	srli	r3,r20,2
10000510:	e0bff743 	ldbu	r2,-35(fp)
10000514:	1885383a 	mul	r2,r3,r2
10000518:	100490ba 	slli	r2,r2,2
1000051c:	e0fff417 	ldw	r3,-48(fp)
10000520:	1887883a 	add	r3,r3,r2
10000524:	e13fdc04 	addi	r4,fp,-144
10000528:	e0bfe004 	addi	r2,fp,-128
1000052c:	200d883a 	mov	r6,r4
10000530:	180b883a 	mov	r5,r3
10000534:	1009883a 	mov	r4,r2
10000538:	0000dc00 	call	10000dc0 <add_round_key>
		memcpy(&state, &state_in3, sizeof(state_in3));
1000053c:	e0bfdc17 	ldw	r2,-144(fp)
10000540:	e0bff015 	stw	r2,-64(fp)
10000544:	e0bfdd17 	ldw	r2,-140(fp)
10000548:	e0bff115 	stw	r2,-60(fp)
1000054c:	e0bfde17 	ldw	r2,-136(fp)
10000550:	e0bff215 	stw	r2,-56(fp)
10000554:	e0bfdf17 	ldw	r2,-132(fp)
10000558:	e0bff315 	stw	r2,-52(fp)
	for(uint8_t round = 1; round < CNST_AES_NR; round += 1) {
1000055c:	e0bff743 	ldbu	r2,-35(fp)
10000560:	10800044 	addi	r2,r2,1
10000564:	e0bff745 	stb	r2,-35(fp)
10000568:	00800284 	movi	r2,10
1000056c:	e0fff743 	ldbu	r3,-35(fp)
10000570:	10803fcc 	andi	r2,r2,255
10000574:	18bfc936 	bltu	r3,r2,1000049c <aes_encrypt+0x218>
	}
	
	// Sub words.
	for (uint8_t k = 0; k < 4; k++) sub_word(&state.state8[k], &state_in0.state8[k]);
10000578:	e03ff7c5 	stb	zero,-33(fp)
1000057c:	00000d06 	br	100005b4 <aes_encrypt+0x330>
10000580:	e0bff7c3 	ldbu	r2,-33(fp)
10000584:	e0fff004 	addi	r3,fp,-64
10000588:	100490ba 	slli	r2,r2,2
1000058c:	1889883a 	add	r4,r3,r2
10000590:	e0bff7c3 	ldbu	r2,-33(fp)
10000594:	e0ffe804 	addi	r3,fp,-96
10000598:	100490ba 	slli	r2,r2,2
1000059c:	1885883a 	add	r2,r3,r2
100005a0:	100b883a 	mov	r5,r2
100005a4:	0000a180 	call	10000a18 <sub_word>
100005a8:	e0bff7c3 	ldbu	r2,-33(fp)
100005ac:	10800044 	addi	r2,r2,1
100005b0:	e0bff7c5 	stb	r2,-33(fp)
100005b4:	e0bff7c3 	ldbu	r2,-33(fp)
100005b8:	10800130 	cmpltui	r2,r2,4
100005bc:	103ff01e 	bne	r2,zero,10000580 <aes_encrypt+0x2fc>
	//memcpy(&state, &state_in, sizeof(state_in));
	
	// Shift Rows.
	shift_rows(&state_in0.state8, &state_in1.state8);
100005c0:	e0ffe404 	addi	r3,fp,-112
100005c4:	e0bfe804 	addi	r2,fp,-96
100005c8:	180b883a 	mov	r5,r3
100005cc:	1009883a 	mov	r4,r2
100005d0:	00008480 	call	10000848 <shift_rows>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Add Round Key
	add_round_key(&state_in1.state32, &key_out[CNST_AES_NR], &state_in2.state32);
100005d4:	a006d0ba 	srli	r3,r20,2
100005d8:	00800284 	movi	r2,10
100005dc:	10803fcc 	andi	r2,r2,255
100005e0:	1885383a 	mul	r2,r3,r2
100005e4:	100490ba 	slli	r2,r2,2
100005e8:	e0fff417 	ldw	r3,-48(fp)
100005ec:	1887883a 	add	r3,r3,r2
100005f0:	e13fe004 	addi	r4,fp,-128
100005f4:	e0bfe404 	addi	r2,fp,-112
100005f8:	200d883a 	mov	r6,r4
100005fc:	180b883a 	mov	r5,r3
10000600:	1009883a 	mov	r4,r2
10000604:	0000dc00 	call	10000dc0 <add_round_key>
	//memcpy(&state, &state_in, sizeof(state_in));

	// Now everything is ready.
	memcpy(data_out, state_in2.state32, sizeof(state_in2.state32));
10000608:	e0bfe004 	addi	r2,fp,-128
1000060c:	01800404 	movi	r6,16
10000610:	100b883a 	mov	r5,r2
10000614:	e13fda17 	ldw	r4,-152(fp)
10000618:	00033640 	call	10003364 <memcpy>
1000061c:	b837883a 	mov	sp,r23
}
10000620:	0001883a 	nop
10000624:	e6fff804 	addi	sp,fp,-32
10000628:	dfc00917 	ldw	ra,36(sp)
1000062c:	df000817 	ldw	fp,32(sp)
10000630:	ddc00717 	ldw	r23,28(sp)
10000634:	dd800617 	ldw	r22,24(sp)
10000638:	dd400517 	ldw	r21,20(sp)
1000063c:	dd000417 	ldw	r20,16(sp)
10000640:	dcc00317 	ldw	r19,12(sp)
10000644:	dc800217 	ldw	r18,8(sp)
10000648:	dc400117 	ldw	r17,4(sp)
1000064c:	dc000017 	ldw	r16,0(sp)
10000650:	dec00a04 	addi	sp,sp,40
10000654:	f800283a 	ret

10000658 <key_expansion>:

// Verified working.
void key_expansion(uint8_t* key_in, uint32_t* key_out, uint8_t Nk, uint8_t Nb, uint8_t Nr) {
10000658:	defff704 	addi	sp,sp,-36
1000065c:	dfc00815 	stw	ra,32(sp)
10000660:	df000715 	stw	fp,28(sp)
10000664:	df000704 	addi	fp,sp,28
10000668:	e13ffd15 	stw	r4,-12(fp)
1000066c:	e17ffc15 	stw	r5,-16(fp)
10000670:	3007883a 	mov	r3,r6
10000674:	3809883a 	mov	r4,r7
10000678:	e0800217 	ldw	r2,8(fp)
1000067c:	e0fffb05 	stb	r3,-20(fp)
10000680:	2007883a 	mov	r3,r4
10000684:	e0fffa05 	stb	r3,-24(fp)
10000688:	e0bff905 	stb	r2,-28(fp)
	uint32_t temp;
	for(uint8_t i=0; i<Nk; i++) {
1000068c:	e03ffec5 	stb	zero,-5(fp)
10000690:	00002b06 	br	10000740 <key_expansion+0xe8>
		key_out[i] = key_in[4*i+3] | (key_in[4*i+2] << 8) | (key_in[4*i+1] << 16) | (key_in[4*i] << 24);
10000694:	e0bffec3 	ldbu	r2,-5(fp)
10000698:	100490ba 	slli	r2,r2,2
1000069c:	108000c4 	addi	r2,r2,3
100006a0:	e0fffd17 	ldw	r3,-12(fp)
100006a4:	1885883a 	add	r2,r3,r2
100006a8:	10800003 	ldbu	r2,0(r2)
100006ac:	10c03fcc 	andi	r3,r2,255
100006b0:	e0bffec3 	ldbu	r2,-5(fp)
100006b4:	100490ba 	slli	r2,r2,2
100006b8:	10800084 	addi	r2,r2,2
100006bc:	e13ffd17 	ldw	r4,-12(fp)
100006c0:	2085883a 	add	r2,r4,r2
100006c4:	10800003 	ldbu	r2,0(r2)
100006c8:	10803fcc 	andi	r2,r2,255
100006cc:	1004923a 	slli	r2,r2,8
100006d0:	1886b03a 	or	r3,r3,r2
100006d4:	e0bffec3 	ldbu	r2,-5(fp)
100006d8:	100490ba 	slli	r2,r2,2
100006dc:	10800044 	addi	r2,r2,1
100006e0:	e13ffd17 	ldw	r4,-12(fp)
100006e4:	2085883a 	add	r2,r4,r2
100006e8:	10800003 	ldbu	r2,0(r2)
100006ec:	10803fcc 	andi	r2,r2,255
100006f0:	1004943a 	slli	r2,r2,16
100006f4:	1886b03a 	or	r3,r3,r2
100006f8:	e0bffec3 	ldbu	r2,-5(fp)
100006fc:	100490ba 	slli	r2,r2,2
10000700:	1009883a 	mov	r4,r2
10000704:	e0bffd17 	ldw	r2,-12(fp)
10000708:	1105883a 	add	r2,r2,r4
1000070c:	10800003 	ldbu	r2,0(r2)
10000710:	10803fcc 	andi	r2,r2,255
10000714:	1004963a 	slli	r2,r2,24
10000718:	1888b03a 	or	r4,r3,r2
1000071c:	e0bffec3 	ldbu	r2,-5(fp)
10000720:	100490ba 	slli	r2,r2,2
10000724:	e0fffc17 	ldw	r3,-16(fp)
10000728:	1885883a 	add	r2,r3,r2
1000072c:	2007883a 	mov	r3,r4
10000730:	10c00015 	stw	r3,0(r2)
	for(uint8_t i=0; i<Nk; i++) {
10000734:	e0bffec3 	ldbu	r2,-5(fp)
10000738:	10800044 	addi	r2,r2,1
1000073c:	e0bffec5 	stb	r2,-5(fp)
10000740:	e0fffec3 	ldbu	r3,-5(fp)
10000744:	e0bffb03 	ldbu	r2,-20(fp)
10000748:	18bfd236 	bltu	r3,r2,10000694 <key_expansion+0x3c>
	}
	uint8_t i = Nk;
1000074c:	e0bffb03 	ldbu	r2,-20(fp)
10000750:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000754:	00003006 	br	10000818 <key_expansion+0x1c0>
		temp = key_out[i-1];
10000758:	e0fffe83 	ldbu	r3,-6(fp)
1000075c:	00900034 	movhi	r2,16384
10000760:	10bfffc4 	addi	r2,r2,-1
10000764:	1885883a 	add	r2,r3,r2
10000768:	100490ba 	slli	r2,r2,2
1000076c:	e0fffc17 	ldw	r3,-16(fp)
10000770:	1885883a 	add	r2,r3,r2
10000774:	10800017 	ldw	r2,0(r2)
10000778:	e0bfff15 	stw	r2,-4(fp)
		if(i % Nk == 0) {
1000077c:	e0bffe83 	ldbu	r2,-6(fp)
10000780:	e0fffb03 	ldbu	r3,-20(fp)
10000784:	10c9203a 	divu	r4,r2,r3
10000788:	20c7383a 	mul	r3,r4,r3
1000078c:	10c5c83a 	sub	r2,r2,r3
10000790:	10803fcc 	andi	r2,r2,255
10000794:	10000f1e 	bne	r2,zero,100007d4 <key_expansion+0x17c>
			temp = sub_word32(rot_word(temp)) ^ Rcon[i/Nk];
10000798:	e13fff17 	ldw	r4,-4(fp)
1000079c:	0000adc0 	call	10000adc <rot_word>
100007a0:	1009883a 	mov	r4,r2
100007a4:	000096c0 	call	1000096c <sub_word32>
100007a8:	1009883a 	mov	r4,r2
100007ac:	e0fffe83 	ldbu	r3,-6(fp)
100007b0:	e0bffb03 	ldbu	r2,-20(fp)
100007b4:	1885203a 	divu	r2,r3,r2
100007b8:	10803fcc 	andi	r2,r2,255
100007bc:	100690ba 	slli	r3,r2,2
100007c0:	00840074 	movhi	r2,4097
100007c4:	1885883a 	add	r2,r3,r2
100007c8:	108dae17 	ldw	r2,14008(r2)
100007cc:	2084f03a 	xor	r2,r4,r2
100007d0:	e0bfff15 	stw	r2,-4(fp)
		}
		key_out[i] = key_out[i-Nk] ^ temp;
100007d4:	e0fffe83 	ldbu	r3,-6(fp)
100007d8:	e0bffb03 	ldbu	r2,-20(fp)
100007dc:	1885c83a 	sub	r2,r3,r2
100007e0:	100490ba 	slli	r2,r2,2
100007e4:	e0fffc17 	ldw	r3,-16(fp)
100007e8:	1885883a 	add	r2,r3,r2
100007ec:	11000017 	ldw	r4,0(r2)
100007f0:	e0bffe83 	ldbu	r2,-6(fp)
100007f4:	100490ba 	slli	r2,r2,2
100007f8:	e0fffc17 	ldw	r3,-16(fp)
100007fc:	1885883a 	add	r2,r3,r2
10000800:	e0ffff17 	ldw	r3,-4(fp)
10000804:	20c6f03a 	xor	r3,r4,r3
10000808:	10c00015 	stw	r3,0(r2)
		++i;
1000080c:	e0bffe83 	ldbu	r2,-6(fp)
10000810:	10800044 	addi	r2,r2,1
10000814:	e0bffe85 	stb	r2,-6(fp)
	while(i<Nb*(Nr+1)) {
10000818:	e0fffe83 	ldbu	r3,-6(fp)
1000081c:	e13ffa03 	ldbu	r4,-24(fp)
10000820:	e0bff903 	ldbu	r2,-28(fp)
10000824:	10800044 	addi	r2,r2,1
10000828:	2085383a 	mul	r2,r4,r2
1000082c:	18bfca16 	blt	r3,r2,10000758 <key_expansion+0x100>
	}
}
10000830:	0001883a 	nop
10000834:	e037883a 	mov	sp,fp
10000838:	dfc00117 	ldw	ra,4(sp)
1000083c:	df000017 	ldw	fp,0(sp)
10000840:	dec00204 	addi	sp,sp,8
10000844:	f800283a 	ret

10000848 <shift_rows>:

// Verified working.
void shift_rows(uint8_t* in, uint8_t* result) {
10000848:	defffb04 	addi	sp,sp,-20
1000084c:	df000415 	stw	fp,16(sp)
10000850:	df000404 	addi	fp,sp,16
10000854:	e13ffd15 	stw	r4,-12(fp)
10000858:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
1000085c:	e03fff15 	stw	zero,-4(fp)
10000860:	00002706 	br	10000900 <shift_rows+0xb8>
		for(int j=0; j<4; j++) {
10000864:	e03ffe15 	stw	zero,-8(fp)
10000868:	00001f06 	br	100008e8 <shift_rows+0xa0>
			result[j*4+i] = in[((-i+3+j)%4)*4+i];
1000086c:	00c000c4 	movi	r3,3
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	1887c83a 	sub	r3,r3,r2
10000878:	e0bffe17 	ldw	r2,-8(fp)
1000087c:	1887883a 	add	r3,r3,r2
10000880:	00a00034 	movhi	r2,32768
10000884:	108000c4 	addi	r2,r2,3
10000888:	1884703a 	and	r2,r3,r2
1000088c:	1000040e 	bge	r2,zero,100008a0 <shift_rows+0x58>
10000890:	10bfffc4 	addi	r2,r2,-1
10000894:	00ffff04 	movi	r3,-4
10000898:	10c4b03a 	or	r2,r2,r3
1000089c:	10800044 	addi	r2,r2,1
100008a0:	100690ba 	slli	r3,r2,2
100008a4:	e0bfff17 	ldw	r2,-4(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	1007883a 	mov	r3,r2
100008b0:	e0bffd17 	ldw	r2,-12(fp)
100008b4:	10c7883a 	add	r3,r2,r3
100008b8:	e0bffe17 	ldw	r2,-8(fp)
100008bc:	100890ba 	slli	r4,r2,2
100008c0:	e0bfff17 	ldw	r2,-4(fp)
100008c4:	2085883a 	add	r2,r4,r2
100008c8:	1009883a 	mov	r4,r2
100008cc:	e0bffc17 	ldw	r2,-16(fp)
100008d0:	1105883a 	add	r2,r2,r4
100008d4:	18c00003 	ldbu	r3,0(r3)
100008d8:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
100008dc:	e0bffe17 	ldw	r2,-8(fp)
100008e0:	10800044 	addi	r2,r2,1
100008e4:	e0bffe15 	stw	r2,-8(fp)
100008e8:	e0bffe17 	ldw	r2,-8(fp)
100008ec:	10800110 	cmplti	r2,r2,4
100008f0:	103fde1e 	bne	r2,zero,1000086c <shift_rows+0x24>
	for(int i=0; i<4; i++) {
100008f4:	e0bfff17 	ldw	r2,-4(fp)
100008f8:	10800044 	addi	r2,r2,1
100008fc:	e0bfff15 	stw	r2,-4(fp)
10000900:	e0bfff17 	ldw	r2,-4(fp)
10000904:	10800110 	cmplti	r2,r2,4
10000908:	103fd61e 	bne	r2,zero,10000864 <shift_rows+0x1c>
		}
	}
}
1000090c:	0001883a 	nop
10000910:	e037883a 	mov	sp,fp
10000914:	df000017 	ldw	fp,0(sp)
10000918:	dec00104 	addi	sp,sp,4
1000091c:	f800283a 	ret

10000920 <sub_byte>:

uint8_t sub_byte(uint8_t byte_in) {
10000920:	defffe04 	addi	sp,sp,-8
10000924:	df000115 	stw	fp,4(sp)
10000928:	df000104 	addi	fp,sp,4
1000092c:	2005883a 	mov	r2,r4
10000930:	e0bfff05 	stb	r2,-4(fp)
	return aes_sbox[(((byte_in & 0xF0) >> 4) * 16) + (byte_in & 0x0F)];
10000934:	e0bfff03 	ldbu	r2,-4(fp)
10000938:	1004d13a 	srli	r2,r2,4
1000093c:	10803fcc 	andi	r2,r2,255
10000940:	1006913a 	slli	r3,r2,4
10000944:	e0bfff03 	ldbu	r2,-4(fp)
10000948:	108003cc 	andi	r2,r2,15
1000094c:	1887883a 	add	r3,r3,r2
10000950:	00840074 	movhi	r2,4097
10000954:	1885883a 	add	r2,r3,r2
10000958:	10886603 	ldbu	r2,8600(r2)
}
1000095c:	e037883a 	mov	sp,fp
10000960:	df000017 	ldw	fp,0(sp)
10000964:	dec00104 	addi	sp,sp,4
10000968:	f800283a 	ret

1000096c <sub_word32>:

uint32_t sub_word32(uint32_t word_in) {
1000096c:	defffc04 	addi	sp,sp,-16
10000970:	dfc00315 	stw	ra,12(sp)
10000974:	df000215 	stw	fp,8(sp)
10000978:	df000204 	addi	fp,sp,8
1000097c:	e13ffe15 	stw	r4,-8(fp)
	uint8_t bo_3 = sub_byte((word_in & 0xFF000000) >> 24);
10000980:	e0bffe17 	ldw	r2,-8(fp)
10000984:	1004d63a 	srli	r2,r2,24
10000988:	10803fcc 	andi	r2,r2,255
1000098c:	1009883a 	mov	r4,r2
10000990:	00009200 	call	10000920 <sub_byte>
10000994:	e0bfffc5 	stb	r2,-1(fp)
	uint8_t bo_2 = sub_byte((word_in & 0x00FF0000) >> 16);
10000998:	e0bffe17 	ldw	r2,-8(fp)
1000099c:	1004d43a 	srli	r2,r2,16
100009a0:	10803fcc 	andi	r2,r2,255
100009a4:	1009883a 	mov	r4,r2
100009a8:	00009200 	call	10000920 <sub_byte>
100009ac:	e0bfff85 	stb	r2,-2(fp)
	uint8_t bo_1 = sub_byte((word_in & 0x0000FF00) >> 8);
100009b0:	e0bffe17 	ldw	r2,-8(fp)
100009b4:	1004d23a 	srli	r2,r2,8
100009b8:	10803fcc 	andi	r2,r2,255
100009bc:	1009883a 	mov	r4,r2
100009c0:	00009200 	call	10000920 <sub_byte>
100009c4:	e0bfff45 	stb	r2,-3(fp)
	uint8_t bo_0 = sub_byte((word_in & 0x000000FF));
100009c8:	e0bffe17 	ldw	r2,-8(fp)
100009cc:	10803fcc 	andi	r2,r2,255
100009d0:	1009883a 	mov	r4,r2
100009d4:	00009200 	call	10000920 <sub_byte>
100009d8:	e0bfff05 	stb	r2,-4(fp)

	return (bo_3 << 24) | (bo_2 << 16) | (bo_1 << 8) | bo_0;
100009dc:	e0bfffc3 	ldbu	r2,-1(fp)
100009e0:	1006963a 	slli	r3,r2,24
100009e4:	e0bfff83 	ldbu	r2,-2(fp)
100009e8:	1004943a 	slli	r2,r2,16
100009ec:	1886b03a 	or	r3,r3,r2
100009f0:	e0bfff43 	ldbu	r2,-3(fp)
100009f4:	1004923a 	slli	r2,r2,8
100009f8:	1886b03a 	or	r3,r3,r2
100009fc:	e0bfff03 	ldbu	r2,-4(fp)
10000a00:	1884b03a 	or	r2,r3,r2
}
10000a04:	e037883a 	mov	sp,fp
10000a08:	dfc00117 	ldw	ra,4(sp)
10000a0c:	df000017 	ldw	fp,0(sp)
10000a10:	dec00204 	addi	sp,sp,8
10000a14:	f800283a 	ret

10000a18 <sub_word>:

void sub_word(uint8_t* word_in, uint8_t* word_out) {
10000a18:	defffb04 	addi	sp,sp,-20
10000a1c:	dfc00415 	stw	ra,16(sp)
10000a20:	df000315 	stw	fp,12(sp)
10000a24:	dc000215 	stw	r16,8(sp)
10000a28:	df000304 	addi	fp,sp,12
10000a2c:	e13ffe15 	stw	r4,-8(fp)
10000a30:	e17ffd15 	stw	r5,-12(fp)
	word_out[3] = sub_byte(word_in[3]);
10000a34:	e0bffe17 	ldw	r2,-8(fp)
10000a38:	108000c4 	addi	r2,r2,3
10000a3c:	10800003 	ldbu	r2,0(r2)
10000a40:	10c03fcc 	andi	r3,r2,255
10000a44:	e0bffd17 	ldw	r2,-12(fp)
10000a48:	140000c4 	addi	r16,r2,3
10000a4c:	1809883a 	mov	r4,r3
10000a50:	00009200 	call	10000920 <sub_byte>
10000a54:	80800005 	stb	r2,0(r16)
	word_out[2] = sub_byte(word_in[2]);
10000a58:	e0bffe17 	ldw	r2,-8(fp)
10000a5c:	10800084 	addi	r2,r2,2
10000a60:	10800003 	ldbu	r2,0(r2)
10000a64:	10c03fcc 	andi	r3,r2,255
10000a68:	e0bffd17 	ldw	r2,-12(fp)
10000a6c:	14000084 	addi	r16,r2,2
10000a70:	1809883a 	mov	r4,r3
10000a74:	00009200 	call	10000920 <sub_byte>
10000a78:	80800005 	stb	r2,0(r16)
	word_out[1] = sub_byte(word_in[1]);
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10800044 	addi	r2,r2,1
10000a84:	10800003 	ldbu	r2,0(r2)
10000a88:	10c03fcc 	andi	r3,r2,255
10000a8c:	e0bffd17 	ldw	r2,-12(fp)
10000a90:	14000044 	addi	r16,r2,1
10000a94:	1809883a 	mov	r4,r3
10000a98:	00009200 	call	10000920 <sub_byte>
10000a9c:	80800005 	stb	r2,0(r16)
	word_out[0] = sub_byte(word_in[0]);
10000aa0:	e0bffe17 	ldw	r2,-8(fp)
10000aa4:	10800003 	ldbu	r2,0(r2)
10000aa8:	10803fcc 	andi	r2,r2,255
10000aac:	1009883a 	mov	r4,r2
10000ab0:	00009200 	call	10000920 <sub_byte>
10000ab4:	1007883a 	mov	r3,r2
10000ab8:	e0bffd17 	ldw	r2,-12(fp)
10000abc:	10c00005 	stb	r3,0(r2)
}
10000ac0:	0001883a 	nop
10000ac4:	e6ffff04 	addi	sp,fp,-4
10000ac8:	dfc00217 	ldw	ra,8(sp)
10000acc:	df000117 	ldw	fp,4(sp)
10000ad0:	dc000017 	ldw	r16,0(sp)
10000ad4:	dec00304 	addi	sp,sp,12
10000ad8:	f800283a 	ret

10000adc <rot_word>:

uint32_t rot_word(uint32_t word_in) {
10000adc:	defffe04 	addi	sp,sp,-8
10000ae0:	df000115 	stw	fp,4(sp)
10000ae4:	df000104 	addi	fp,sp,4
10000ae8:	e13fff15 	stw	r4,-4(fp)
	return (((word_in & 0x00FFFFFF) << 8) & 0xFFFFFF00) | ((word_in & 0xFF000000) >> 24);
10000aec:	e0bfff17 	ldw	r2,-4(fp)
10000af0:	1004123a 	roli	r2,r2,8
}
10000af4:	e037883a 	mov	sp,fp
10000af8:	df000017 	ldw	fp,0(sp)
10000afc:	dec00104 	addi	sp,sp,4
10000b00:	f800283a 	ret

10000b04 <mix_columns>:

void mix_columns(uint8_t* mat_in, uint8_t* result) {
10000b04:	defff304 	addi	sp,sp,-52
10000b08:	dfc00c15 	stw	ra,48(sp)
10000b0c:	df000b15 	stw	fp,44(sp)
10000b10:	df000b04 	addi	fp,sp,44
10000b14:	e13ff615 	stw	r4,-40(fp)
10000b18:	e17ff515 	stw	r5,-44(fp)
	uint8_t state_deasm[4][4];	// State_disassembled.
	uint8_t result_deasm[4][4];	// Result disassembled.
	
	memcpy(&state_deasm, mat_in, sizeof(state_deasm));
10000b1c:	e0fff617 	ldw	r3,-40(fp)
10000b20:	e0bffbc4 	addi	r2,fp,-17
10000b24:	1809883a 	mov	r4,r3
10000b28:	00c00404 	movi	r3,16
10000b2c:	180d883a 	mov	r6,r3
10000b30:	200b883a 	mov	r5,r4
10000b34:	1009883a 	mov	r4,r2
10000b38:	00033640 	call	10003364 <memcpy>
		
	// Calculate.
	for(uint8_t i=0; i<4; i++) {
10000b3c:	e03fffc5 	stb	zero,-1(fp)
10000b40:	00008f06 	br	10000d80 <mix_columns+0x27c>
		result_deasm[i][3] = 
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b44:	e0bfffc3 	ldbu	r2,-1(fp)
10000b48:	100490ba 	slli	r2,r2,2
10000b4c:	e085883a 	add	r2,fp,r2
10000b50:	10bffc83 	ldbu	r2,-14(r2)
10000b54:	10803fcc 	andi	r2,r2,255
10000b58:	10c001a4 	muli	r3,r2,6
10000b5c:	00840074 	movhi	r2,4097
10000b60:	1885883a 	add	r2,r3,r2
10000b64:	10cc2e03 	ldbu	r3,12472(r2)
10000b68:	e0bfffc3 	ldbu	r2,-1(fp)
10000b6c:	100490ba 	slli	r2,r2,2
10000b70:	e085883a 	add	r2,fp,r2
10000b74:	10bffc43 	ldbu	r2,-15(r2)
10000b78:	10803fcc 	andi	r2,r2,255
10000b7c:	110001a4 	muli	r4,r2,6
10000b80:	00840074 	movhi	r2,4097
10000b84:	2085883a 	add	r2,r4,r2
10000b88:	108c2e43 	ldbu	r2,12473(r2)
		result_deasm[i][3] = 
10000b8c:	1884f03a 	xor	r2,r3,r2
10000b90:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000b94:	e0bfffc3 	ldbu	r2,-1(fp)
10000b98:	100490ba 	slli	r2,r2,2
10000b9c:	e085883a 	add	r2,fp,r2
10000ba0:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][3] = 
10000ba4:	1884f03a 	xor	r2,r3,r2
10000ba8:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][0] ^ gf_mul[state_deasm[i][2]][1] ^ state_deasm[i][1] ^ state_deasm[i][0];
10000bac:	e0bfffc3 	ldbu	r2,-1(fp)
10000bb0:	100490ba 	slli	r2,r2,2
10000bb4:	e085883a 	add	r2,fp,r2
10000bb8:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][3] = 
10000bbc:	e0bfffc3 	ldbu	r2,-1(fp)
10000bc0:	20c6f03a 	xor	r3,r4,r3
10000bc4:	100490ba 	slli	r2,r2,2
10000bc8:	e085883a 	add	r2,fp,r2
10000bcc:	10fff885 	stb	r3,-30(r2)
		result_deasm[i][2] = 
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000bd0:	e0bfffc3 	ldbu	r2,-1(fp)
10000bd4:	100490ba 	slli	r2,r2,2
10000bd8:	e085883a 	add	r2,fp,r2
10000bdc:	10fffc83 	ldbu	r3,-14(r2)
10000be0:	e0bfffc3 	ldbu	r2,-1(fp)
10000be4:	100490ba 	slli	r2,r2,2
10000be8:	e085883a 	add	r2,fp,r2
10000bec:	10bffc43 	ldbu	r2,-15(r2)
10000bf0:	10803fcc 	andi	r2,r2,255
10000bf4:	110001a4 	muli	r4,r2,6
10000bf8:	00840074 	movhi	r2,4097
10000bfc:	2085883a 	add	r2,r4,r2
10000c00:	108c2e03 	ldbu	r2,12472(r2)
		result_deasm[i][2] = 
10000c04:	1884f03a 	xor	r2,r3,r2
10000c08:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c10:	100490ba 	slli	r2,r2,2
10000c14:	e085883a 	add	r2,fp,r2
10000c18:	10bffc03 	ldbu	r2,-16(r2)
10000c1c:	10803fcc 	andi	r2,r2,255
10000c20:	10c001a4 	muli	r3,r2,6
10000c24:	00840074 	movhi	r2,4097
10000c28:	1885883a 	add	r2,r3,r2
10000c2c:	108c2e43 	ldbu	r2,12473(r2)
		result_deasm[i][2] = 
10000c30:	2084f03a 	xor	r2,r4,r2
10000c34:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ gf_mul[state_deasm[i][2]][0] ^ gf_mul[state_deasm[i][1]][1] ^ state_deasm[i][0];
10000c38:	e0bfffc3 	ldbu	r2,-1(fp)
10000c3c:	100490ba 	slli	r2,r2,2
10000c40:	e085883a 	add	r2,fp,r2
10000c44:	10fffbc3 	ldbu	r3,-17(r2)
		result_deasm[i][2] = 
10000c48:	e0bfffc3 	ldbu	r2,-1(fp)
10000c4c:	20c6f03a 	xor	r3,r4,r3
10000c50:	100490ba 	slli	r2,r2,2
10000c54:	e085883a 	add	r2,fp,r2
10000c58:	10fff845 	stb	r3,-31(r2)
		result_deasm[i][1] = 
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c5c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c60:	100490ba 	slli	r2,r2,2
10000c64:	e085883a 	add	r2,fp,r2
10000c68:	10fffc83 	ldbu	r3,-14(r2)
10000c6c:	e0bfffc3 	ldbu	r2,-1(fp)
10000c70:	100490ba 	slli	r2,r2,2
10000c74:	e085883a 	add	r2,fp,r2
10000c78:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][1] = 
10000c7c:	1884f03a 	xor	r2,r3,r2
10000c80:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000c84:	e0bfffc3 	ldbu	r2,-1(fp)
10000c88:	100490ba 	slli	r2,r2,2
10000c8c:	e085883a 	add	r2,fp,r2
10000c90:	10bffc03 	ldbu	r2,-16(r2)
10000c94:	10803fcc 	andi	r2,r2,255
10000c98:	10c001a4 	muli	r3,r2,6
10000c9c:	00840074 	movhi	r2,4097
10000ca0:	1885883a 	add	r2,r3,r2
10000ca4:	108c2e03 	ldbu	r2,12472(r2)
		result_deasm[i][1] = 
10000ca8:	2084f03a 	xor	r2,r4,r2
10000cac:	1009883a 	mov	r4,r2
			state_deasm[i][3] ^ state_deasm[i][2] ^ gf_mul[state_deasm[i][1]][0] ^ gf_mul[state_deasm[i][0]][1];
10000cb0:	e0bfffc3 	ldbu	r2,-1(fp)
10000cb4:	100490ba 	slli	r2,r2,2
10000cb8:	e085883a 	add	r2,fp,r2
10000cbc:	10bffbc3 	ldbu	r2,-17(r2)
10000cc0:	10803fcc 	andi	r2,r2,255
10000cc4:	10c001a4 	muli	r3,r2,6
10000cc8:	00840074 	movhi	r2,4097
10000ccc:	1885883a 	add	r2,r3,r2
10000cd0:	10cc2e43 	ldbu	r3,12473(r2)
		result_deasm[i][1] = 
10000cd4:	e0bfffc3 	ldbu	r2,-1(fp)
10000cd8:	20c6f03a 	xor	r3,r4,r3
10000cdc:	100490ba 	slli	r2,r2,2
10000ce0:	e085883a 	add	r2,fp,r2
10000ce4:	10fff805 	stb	r3,-32(r2)
		result_deasm[i][0] = 
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000ce8:	e0bfffc3 	ldbu	r2,-1(fp)
10000cec:	100490ba 	slli	r2,r2,2
10000cf0:	e085883a 	add	r2,fp,r2
10000cf4:	10bffc83 	ldbu	r2,-14(r2)
10000cf8:	10803fcc 	andi	r2,r2,255
10000cfc:	10c001a4 	muli	r3,r2,6
10000d00:	00840074 	movhi	r2,4097
10000d04:	1885883a 	add	r2,r3,r2
10000d08:	10cc2e43 	ldbu	r3,12473(r2)
10000d0c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d10:	100490ba 	slli	r2,r2,2
10000d14:	e085883a 	add	r2,fp,r2
10000d18:	10bffc43 	ldbu	r2,-15(r2)
		result_deasm[i][0] = 
10000d1c:	1884f03a 	xor	r2,r3,r2
10000d20:	1007883a 	mov	r3,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d24:	e0bfffc3 	ldbu	r2,-1(fp)
10000d28:	100490ba 	slli	r2,r2,2
10000d2c:	e085883a 	add	r2,fp,r2
10000d30:	10bffc03 	ldbu	r2,-16(r2)
		result_deasm[i][0] = 
10000d34:	1884f03a 	xor	r2,r3,r2
10000d38:	1009883a 	mov	r4,r2
			gf_mul[state_deasm[i][3]][1] ^ state_deasm[i][2] ^ state_deasm[i][1] ^ gf_mul[state_deasm[i][0]][0];
10000d3c:	e0bfffc3 	ldbu	r2,-1(fp)
10000d40:	100490ba 	slli	r2,r2,2
10000d44:	e085883a 	add	r2,fp,r2
10000d48:	10bffbc3 	ldbu	r2,-17(r2)
10000d4c:	10803fcc 	andi	r2,r2,255
10000d50:	10c001a4 	muli	r3,r2,6
10000d54:	00840074 	movhi	r2,4097
10000d58:	1885883a 	add	r2,r3,r2
10000d5c:	10cc2e03 	ldbu	r3,12472(r2)
		result_deasm[i][0] = 
10000d60:	e0bfffc3 	ldbu	r2,-1(fp)
10000d64:	20c6f03a 	xor	r3,r4,r3
10000d68:	100490ba 	slli	r2,r2,2
10000d6c:	e085883a 	add	r2,fp,r2
10000d70:	10fff7c5 	stb	r3,-33(r2)
	for(uint8_t i=0; i<4; i++) {
10000d74:	e0bfffc3 	ldbu	r2,-1(fp)
10000d78:	10800044 	addi	r2,r2,1
10000d7c:	e0bfffc5 	stb	r2,-1(fp)
10000d80:	e0bfffc3 	ldbu	r2,-1(fp)
10000d84:	10800130 	cmpltui	r2,r2,4
10000d88:	103f6e1e 	bne	r2,zero,10000b44 <mix_columns+0x40>
	}
	
	memcpy(result, &result_deasm, sizeof(state_deasm));
10000d8c:	e0bff517 	ldw	r2,-44(fp)
10000d90:	1009883a 	mov	r4,r2
10000d94:	e0bff7c4 	addi	r2,fp,-33
10000d98:	00c00404 	movi	r3,16
10000d9c:	180d883a 	mov	r6,r3
10000da0:	100b883a 	mov	r5,r2
10000da4:	00033640 	call	10003364 <memcpy>
}
10000da8:	0001883a 	nop
10000dac:	e037883a 	mov	sp,fp
10000db0:	dfc00117 	ldw	ra,4(sp)
10000db4:	df000017 	ldw	fp,0(sp)
10000db8:	dec00204 	addi	sp,sp,8
10000dbc:	f800283a 	ret

10000dc0 <add_round_key>:

// Each have a shape of uint32_t[4]
void add_round_key(uint32_t* state, uint32_t* round_key, uint32_t* result) {
10000dc0:	defffc04 	addi	sp,sp,-16
10000dc4:	df000315 	stw	fp,12(sp)
10000dc8:	df000304 	addi	fp,sp,12
10000dcc:	e13fff15 	stw	r4,-4(fp)
10000dd0:	e17ffe15 	stw	r5,-8(fp)
10000dd4:	e1bffd15 	stw	r6,-12(fp)
	result[0] = state[0] ^ round_key[0];
10000dd8:	e0bfff17 	ldw	r2,-4(fp)
10000ddc:	10c00017 	ldw	r3,0(r2)
10000de0:	e0bffe17 	ldw	r2,-8(fp)
10000de4:	10800017 	ldw	r2,0(r2)
10000de8:	1886f03a 	xor	r3,r3,r2
10000dec:	e0bffd17 	ldw	r2,-12(fp)
10000df0:	10c00015 	stw	r3,0(r2)
	result[1] = state[1] ^ round_key[1];
10000df4:	e0bfff17 	ldw	r2,-4(fp)
10000df8:	10800104 	addi	r2,r2,4
10000dfc:	11000017 	ldw	r4,0(r2)
10000e00:	e0bffe17 	ldw	r2,-8(fp)
10000e04:	10800104 	addi	r2,r2,4
10000e08:	10c00017 	ldw	r3,0(r2)
10000e0c:	e0bffd17 	ldw	r2,-12(fp)
10000e10:	10800104 	addi	r2,r2,4
10000e14:	20c6f03a 	xor	r3,r4,r3
10000e18:	10c00015 	stw	r3,0(r2)
	result[2] = state[2] ^ round_key[2];
10000e1c:	e0bfff17 	ldw	r2,-4(fp)
10000e20:	10800204 	addi	r2,r2,8
10000e24:	11000017 	ldw	r4,0(r2)
10000e28:	e0bffe17 	ldw	r2,-8(fp)
10000e2c:	10800204 	addi	r2,r2,8
10000e30:	10c00017 	ldw	r3,0(r2)
10000e34:	e0bffd17 	ldw	r2,-12(fp)
10000e38:	10800204 	addi	r2,r2,8
10000e3c:	20c6f03a 	xor	r3,r4,r3
10000e40:	10c00015 	stw	r3,0(r2)
	result[3] = state[3] ^ round_key[3];
10000e44:	e0bfff17 	ldw	r2,-4(fp)
10000e48:	10800304 	addi	r2,r2,12
10000e4c:	11000017 	ldw	r4,0(r2)
10000e50:	e0bffe17 	ldw	r2,-8(fp)
10000e54:	10800304 	addi	r2,r2,12
10000e58:	10c00017 	ldw	r3,0(r2)
10000e5c:	e0bffd17 	ldw	r2,-12(fp)
10000e60:	10800304 	addi	r2,r2,12
10000e64:	20c6f03a 	xor	r3,r4,r3
10000e68:	10c00015 	stw	r3,0(r2)
}
10000e6c:	0001883a 	nop
10000e70:	e037883a 	mov	sp,fp
10000e74:	df000017 	ldw	fp,0(sp)
10000e78:	dec00104 	addi	sp,sp,4
10000e7c:	f800283a 	ret

10000e80 <transpose>:

void transpose(uint8_t* arr_in, uint8_t* arr_out) {
10000e80:	defffb04 	addi	sp,sp,-20
10000e84:	df000415 	stw	fp,16(sp)
10000e88:	df000404 	addi	fp,sp,16
10000e8c:	e13ffd15 	stw	r4,-12(fp)
10000e90:	e17ffc15 	stw	r5,-16(fp)
	for(int i=0; i<4; i++) {
10000e94:	e03fff15 	stw	zero,-4(fp)
10000e98:	00001b06 	br	10000f08 <transpose+0x88>
		for(int j=0; j<4; j++) {
10000e9c:	e03ffe15 	stw	zero,-8(fp)
10000ea0:	00001306 	br	10000ef0 <transpose+0x70>
			arr_out[j*4+i] = arr_in[i*4+j];
10000ea4:	e0bfff17 	ldw	r2,-4(fp)
10000ea8:	100690ba 	slli	r3,r2,2
10000eac:	e0bffe17 	ldw	r2,-8(fp)
10000eb0:	1885883a 	add	r2,r3,r2
10000eb4:	1007883a 	mov	r3,r2
10000eb8:	e0bffd17 	ldw	r2,-12(fp)
10000ebc:	10c7883a 	add	r3,r2,r3
10000ec0:	e0bffe17 	ldw	r2,-8(fp)
10000ec4:	100890ba 	slli	r4,r2,2
10000ec8:	e0bfff17 	ldw	r2,-4(fp)
10000ecc:	2085883a 	add	r2,r4,r2
10000ed0:	1009883a 	mov	r4,r2
10000ed4:	e0bffc17 	ldw	r2,-16(fp)
10000ed8:	1105883a 	add	r2,r2,r4
10000edc:	18c00003 	ldbu	r3,0(r3)
10000ee0:	10c00005 	stb	r3,0(r2)
		for(int j=0; j<4; j++) {
10000ee4:	e0bffe17 	ldw	r2,-8(fp)
10000ee8:	10800044 	addi	r2,r2,1
10000eec:	e0bffe15 	stw	r2,-8(fp)
10000ef0:	e0bffe17 	ldw	r2,-8(fp)
10000ef4:	10800110 	cmplti	r2,r2,4
10000ef8:	103fea1e 	bne	r2,zero,10000ea4 <transpose+0x24>
	for(int i=0; i<4; i++) {
10000efc:	e0bfff17 	ldw	r2,-4(fp)
10000f00:	10800044 	addi	r2,r2,1
10000f04:	e0bfff15 	stw	r2,-4(fp)
10000f08:	e0bfff17 	ldw	r2,-4(fp)
10000f0c:	10800110 	cmplti	r2,r2,4
10000f10:	103fe21e 	bne	r2,zero,10000e9c <transpose+0x1c>
		}
	}
}
10000f14:	0001883a 	nop
10000f18:	e037883a 	mov	sp,fp
10000f1c:	df000017 	ldw	fp,0(sp)
10000f20:	dec00104 	addi	sp,sp,4
10000f24:	f800283a 	ret

10000f28 <game_tick>:
#include "core.h"
#include "hardware.h"
#include "tile_eng_driver.h"
#include <stdint.h>

void game_tick() {
10000f28:	deffeb04 	addi	sp,sp,-84
10000f2c:	dfc01415 	stw	ra,80(sp)
10000f30:	df001315 	stw	fp,76(sp)
10000f34:	df001304 	addi	fp,sp,76
	palette_ptr[0b00000] = 0x117180;
10000f38:	00c02004 	movi	r3,128
10000f3c:	00800474 	movhi	r2,17
10000f40:	109c6004 	addi	r2,r2,29056
10000f44:	18800015 	stw	r2,0(r3)
	palette_ptr[0b00001] = 0xFFFFFF;
10000f48:	00c02104 	movi	r3,132
10000f4c:	00804034 	movhi	r2,256
10000f50:	10bfffc4 	addi	r2,r2,-1
10000f54:	18800015 	stw	r2,0(r3)
	palette_ptr[0b00010] = 0xFFFFFF;
10000f58:	00c02204 	movi	r3,136
10000f5c:	00804034 	movhi	r2,256
10000f60:	10bfffc4 	addi	r2,r2,-1
10000f64:	18800015 	stw	r2,0(r3)
	palette_ptr[0b00011] = 0x21E3FF;
10000f68:	00c02304 	movi	r3,140
10000f6c:	008008b4 	movhi	r2,34
10000f70:	10b8ffc4 	addi	r2,r2,-7169
10000f74:	18800015 	stw	r2,0(r3)

	Palette newPalette;
	newPalette.paletteId = 1;
10000f78:	00800044 	movi	r2,1
10000f7c:	e0bff805 	stb	r2,-32(fp)
	newPalette.colors[0] = 0x723E80;
10000f80:	00801cb4 	movhi	r2,114
10000f84:	108fa004 	addi	r2,r2,16000
10000f88:	e0bff915 	stw	r2,-28(fp)
	newPalette.colors[3] = 0xE57DFF;
10000f8c:	00803974 	movhi	r2,229
10000f90:	109f7fc4 	addi	r2,r2,32255
10000f94:	e0bffc15 	stw	r2,-16(fp)
	writePalette(newPalette);
10000f98:	e0bffc17 	ldw	r2,-16(fp)
10000f9c:	d8800015 	stw	r2,0(sp)
10000fa0:	e13ff817 	ldw	r4,-32(fp)
10000fa4:	e17ff917 	ldw	r5,-28(fp)
10000fa8:	e1bffa17 	ldw	r6,-24(fp)
10000fac:	e1fffb17 	ldw	r7,-20(fp)
10000fb0:	00020e40 	call	100020e4 <writePalette>

	Palette newPalette2;
	newPalette2.paletteId = 2;
10000fb4:	00800084 	movi	r2,2
10000fb8:	e0bff305 	stb	r2,-52(fp)
	newPalette2.colors[0] = 0x2F802E;
10000fbc:	00800c34 	movhi	r2,48
10000fc0:	10a00b84 	addi	r2,r2,-32722
10000fc4:	e0bff415 	stw	r2,-48(fp)
	newPalette2.colors[3] = 0x5EFF5B;
10000fc8:	008017f4 	movhi	r2,95
10000fcc:	10bfd6c4 	addi	r2,r2,-165
10000fd0:	e0bff715 	stw	r2,-36(fp)
	writePalette(newPalette2);
10000fd4:	e0bff717 	ldw	r2,-36(fp)
10000fd8:	d8800015 	stw	r2,0(sp)
10000fdc:	e13ff317 	ldw	r4,-52(fp)
10000fe0:	e17ff417 	ldw	r5,-48(fp)
10000fe4:	e1bff517 	ldw	r6,-44(fp)
10000fe8:	e1fff617 	ldw	r7,-40(fp)
10000fec:	00020e40 	call	100020e4 <writePalette>

	Palette newPalette3;
	newPalette3.paletteId = 3;
10000ff0:	008000c4 	movi	r2,3
10000ff4:	e0bfee05 	stb	r2,-72(fp)
	newPalette3.colors[0] = 0x805E1B;
10000ff8:	00802034 	movhi	r2,128
10000ffc:	109786c4 	addi	r2,r2,24091
10001000:	e0bfef15 	stw	r2,-68(fp)
	newPalette3.colors[3] = 0xFFBC36;
10001004:	00804034 	movhi	r2,256
10001008:	10af0d84 	addi	r2,r2,-17354
1000100c:	e0bff215 	stw	r2,-56(fp)
	writePalette(newPalette3);
10001010:	e0bff217 	ldw	r2,-56(fp)
10001014:	d8800015 	stw	r2,0(sp)
10001018:	e13fee17 	ldw	r4,-72(fp)
1000101c:	e17fef17 	ldw	r5,-68(fp)
10001020:	e1bff017 	ldw	r6,-64(fp)
10001024:	e1fff117 	ldw	r7,-60(fp)
10001028:	00020e40 	call	100020e4 <writePalette>

	tiletable_ptr[0x0000] = 0b00000000001;
1000102c:	00a00014 	movui	r2,32768
10001030:	00c00044 	movi	r3,1
10001034:	10c00015 	stw	r3,0(r2)
	tiletable_ptr[0x0100] = 0b00000000001;
10001038:	00a10014 	movui	r2,33792
1000103c:	00c00044 	movi	r3,1
10001040:	10c00015 	stw	r3,0(r2)
	tiletable_ptr[0x0200] = 0b00000000001;
10001044:	00a20014 	movui	r2,34816
10001048:	00c00044 	movi	r3,1
1000104c:	10c00015 	stw	r3,0(r2)
	tiletable_ptr[0x0300] = 0b00000000001;
10001050:	00a30014 	movui	r2,35840
10001054:	00c00044 	movi	r3,1
10001058:	10c00015 	stw	r3,0(r2)

	uint8_t counter = 0;
1000105c:	e03fffc5 	stb	zero,-1(fp)
	for(int i=0; i<80; i++) {
10001060:	e03ffe15 	stw	zero,-8(fp)
10001064:	00001706 	br	100010c4 <game_tick+0x19c>
		for(int j=0; j<30; j++) {
10001068:	e03ffd15 	stw	zero,-12(fp)
1000106c:	00000f06 	br	100010ac <game_tick+0x184>
			drawTile(i,j,counter&0x3,counter);
10001070:	e0bfffc3 	ldbu	r2,-1(fp)
10001074:	108000cc 	andi	r2,r2,3
10001078:	e0ffffc3 	ldbu	r3,-1(fp)
1000107c:	180f883a 	mov	r7,r3
10001080:	100d883a 	mov	r6,r2
10001084:	e17ffd17 	ldw	r5,-12(fp)
10001088:	e13ffe17 	ldw	r4,-8(fp)
1000108c:	0001fe80 	call	10001fe8 <drawTile>
			counter = (counter+1) & 0x7F;
10001090:	e0bfffc3 	ldbu	r2,-1(fp)
10001094:	10800044 	addi	r2,r2,1
10001098:	10801fcc 	andi	r2,r2,127
1000109c:	e0bfffc5 	stb	r2,-1(fp)
		for(int j=0; j<30; j++) {
100010a0:	e0bffd17 	ldw	r2,-12(fp)
100010a4:	10800044 	addi	r2,r2,1
100010a8:	e0bffd15 	stw	r2,-12(fp)
100010ac:	e0bffd17 	ldw	r2,-12(fp)
100010b0:	10800790 	cmplti	r2,r2,30
100010b4:	103fee1e 	bne	r2,zero,10001070 <game_tick+0x148>
	for(int i=0; i<80; i++) {
100010b8:	e0bffe17 	ldw	r2,-8(fp)
100010bc:	10800044 	addi	r2,r2,1
100010c0:	e0bffe15 	stw	r2,-8(fp)
100010c4:	e0bffe17 	ldw	r2,-8(fp)
100010c8:	10801410 	cmplti	r2,r2,80
100010cc:	103fe61e 	bne	r2,zero,10001068 <game_tick+0x140>
		}
	}
}
100010d0:	0001883a 	nop
100010d4:	e037883a 	mov	sp,fp
100010d8:	dfc00117 	ldw	ra,4(sp)
100010dc:	df000017 	ldw	fp,0(sp)
100010e0:	dec00204 	addi	sp,sp,8
100010e4:	f800283a 	ret

100010e8 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
100010e8:	deffff04 	addi	sp,sp,-4
100010ec:	df000015 	stw	fp,0(sp)
100010f0:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100010f4:	00801404 	movi	r2,80
100010f8:	00c00044 	movi	r3,1
100010fc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001100:	00801804 	movi	r2,96
10001104:	00c00044 	movi	r3,1
10001108:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000110c:	00804004 	movi	r2,256
10001110:	00c00044 	movi	r3,1
10001114:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10001118:	00801c04 	movi	r2,112
1000111c:	00c00044 	movi	r3,1
10001120:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10001124:	00801004 	movi	r2,64
10001128:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000112c:	00804404 	movi	r2,272
10001130:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10001134:	00801804 	movi	r2,96
10001138:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
1000113c:	00801404 	movi	r2,80
10001140:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10001144:	00801404 	movi	r2,80
10001148:	00c00044 	movi	r3,1
1000114c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001150:	00801804 	movi	r2,96
10001154:	00c00044 	movi	r3,1
10001158:	10c00005 	stb	r3,0(r2)
}
1000115c:	0001883a 	nop
10001160:	e037883a 	mov	sp,fp
10001164:	df000017 	ldw	fp,0(sp)
10001168:	dec00104 	addi	sp,sp,4
1000116c:	f800283a 	ret

10001170 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10001170:	defffd04 	addi	sp,sp,-12
10001174:	df000215 	stw	fp,8(sp)
10001178:	df000204 	addi	fp,sp,8
1000117c:	2005883a 	mov	r2,r4
10001180:	2807883a 	mov	r3,r5
10001184:	e0bfff05 	stb	r2,-4(fp)
10001188:	1805883a 	mov	r2,r3
1000118c:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10001190:	00801004 	movi	r2,64
10001194:	e0ffff03 	ldbu	r3,-4(fp)
10001198:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000119c:	00804404 	movi	r2,272
100011a0:	e0fffe0b 	ldhu	r3,-8(fp)
100011a4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100011a8:	00801804 	movi	r2,96
100011ac:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
100011b0:	00801c04 	movi	r2,112
100011b4:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
100011b8:	00801c04 	movi	r2,112
100011bc:	00c00044 	movi	r3,1
100011c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100011c4:	00801804 	movi	r2,96
100011c8:	00c00044 	movi	r3,1
100011cc:	10c00005 	stb	r3,0(r2)
	//printf("Wrote %x to HPI %d\n", Data, Address);
}
100011d0:	0001883a 	nop
100011d4:	e037883a 	mov	sp,fp
100011d8:	df000017 	ldw	fp,0(sp)
100011dc:	dec00104 	addi	sp,sp,4
100011e0:	f800283a 	ret

100011e4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100011e4:	defffd04 	addi	sp,sp,-12
100011e8:	df000215 	stw	fp,8(sp)
100011ec:	df000204 	addi	fp,sp,8
100011f0:	2005883a 	mov	r2,r4
100011f4:	e0bffe05 	stb	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
100011f8:	00801004 	movi	r2,64
100011fc:	e0fffe03 	ldbu	r3,-8(fp)
10001200:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10001204:	00801804 	movi	r2,96
10001208:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000120c:	00804004 	movi	r2,256
10001210:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10001214:	00804404 	movi	r2,272
10001218:	10800017 	ldw	r2,0(r2)
1000121c:	e0bfff8d 	sth	r2,-2(fp)
	*otg_hpi_r = 1;
10001220:	00804004 	movi	r2,256
10001224:	00c00044 	movi	r3,1
10001228:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000122c:	00801804 	movi	r2,96
10001230:	00c00044 	movi	r3,1
10001234:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	//printf("Read %x from HPI %d\n", temp, Address);
	return temp;
10001238:	e0bfff8b 	ldhu	r2,-2(fp)
}
1000123c:	e037883a 	mov	sp,fp
10001240:	df000017 	ldw	fp,0(sp)
10001244:	dec00104 	addi	sp,sp,4
10001248:	f800283a 	ret

1000124c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000124c:	defff904 	addi	sp,sp,-28
10001250:	dfc00615 	stw	ra,24(sp)
10001254:	df000515 	stw	fp,20(sp)
10001258:	df000504 	addi	fp,sp,20
	game_tick();
1000125c:	0000f280 	call	10000f28 <game_tick>
	IO_init();
10001260:	00010e80 	call	100010e8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10001264:	e03ffe8d 	sth	zero,-6(fp)
	int keycode = 0;
10001268:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
1000126c:	e03fff45 	stb	zero,-3(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10001270:	01040074 	movhi	r4,4097
10001274:	2108e604 	addi	r4,r4,9112
10001278:	00035980 	call	10003598 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000127c:	000222c0 	call	1000222c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001280:	000b883a 	mov	r5,zero
10001284:	01005104 	movi	r4,324
10001288:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000128c:	017fffd4 	movui	r5,65535
10001290:	01302414 	movui	r4,49296
10001294:	000218c0 	call	1000218c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10001298:	01409604 	movi	r5,600
1000129c:	01006d04 	movi	r4,436
100012a0:	000218c0 	call	1000218c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100012a4:	00811004 	movi	r2,1088
100012a8:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
100012ac:	e0bfff8b 	ldhu	r2,-2(fp)
100012b0:	100b883a 	mov	r5,r2
100012b4:	01005084 	movi	r4,322
100012b8:	000218c0 	call	1000218c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100012bc:	00808404 	movi	r2,528
100012c0:	e0bffc8d 	sth	r2,-14(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100012c4:	e0bffc8b 	ldhu	r2,-14(fp)
100012c8:	100b883a 	mov	r5,r2
100012cc:	01302314 	movui	r4,49292
100012d0:	000218c0 	call	1000218c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100012d4:	000b883a 	mov	r5,zero
100012d8:	01007104 	movi	r4,452
100012dc:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100012e0:	000b883a 	mov	r5,zero
100012e4:	01007184 	movi	r4,454
100012e8:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100012ec:	000b883a 	mov	r5,zero
100012f0:	01007204 	movi	r4,456
100012f4:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100012f8:	000b883a 	mov	r5,zero
100012fc:	01007284 	movi	r4,458
10001300:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10001304:	000b883a 	mov	r5,zero
10001308:	01007304 	movi	r4,460
1000130c:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10001310:	000b883a 	mov	r5,zero
10001314:	01007384 	movi	r4,462
10001318:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000131c:	000b883a 	mov	r5,zero
10001320:	01007404 	movi	r4,464
10001324:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10001328:	000b883a 	mov	r5,zero
1000132c:	01007484 	movi	r4,466
10001330:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10001334:	000b883a 	mov	r5,zero
10001338:	01007504 	movi	r4,468
1000133c:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10001340:	000b883a 	mov	r5,zero
10001344:	01007584 	movi	r4,470
10001348:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000134c:	000b883a 	mov	r5,zero
10001350:	01007604 	movi	r4,472
10001354:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10001358:	000b883a 	mov	r5,zero
1000135c:	01007684 	movi	r4,474
10001360:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10001364:	000b883a 	mov	r5,zero
10001368:	01007704 	movi	r4,476
1000136c:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10001370:	000b883a 	mov	r5,zero
10001374:	01007784 	movi	r4,478
10001378:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000137c:	01401c84 	movi	r5,114
10001380:	01007084 	movi	r4,450
10001384:	000218c0 	call	1000218c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10001388:	01738054 	movui	r5,52737
1000138c:	01000044 	movi	r4,1
10001390:	00011700 	call	10001170 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10001394:	0001883a 	nop
10001398:	010000c4 	movi	r4,3
1000139c:	00011e40 	call	100011e4 <IO_read>
100013a0:	10bfffcc 	andi	r2,r2,65535
100013a4:	103ffc26 	beq	r2,zero,10001398 <main+0x14c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100013a8:	00000806 	br	100013cc <main+0x180>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100013ac:	01000044 	movi	r4,1
100013b0:	00011e40 	call	100011e4 <IO_read>
100013b4:	10bfffcc 	andi	r2,r2,65535
100013b8:	100b883a 	mov	r5,r2
100013bc:	01040074 	movhi	r4,4097
100013c0:	2108ec04 	addi	r4,r4,9136
100013c4:	00034940 	call	10003494 <printf>
		goto USB_HOT_PLUG;
100013c8:	003fac06 	br	1000127c <main+0x30>
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100013cc:	01000044 	movi	r4,1
100013d0:	00011e40 	call	100011e4 <IO_read>
100013d4:	10bfffcc 	andi	r2,r2,65535
100013d8:	1083fb58 	cmpnei	r2,r2,4077
100013dc:	103ff31e 	bne	r2,zero,100013ac <main+0x160>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100013e0:	01040074 	movhi	r4,4097
100013e4:	2108f504 	addi	r4,r4,9172
100013e8:	00034940 	call	10003494 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100013ec:	01401d04 	movi	r5,116
100013f0:	01007084 	movi	r4,450
100013f4:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100013f8:	01400f04 	movi	r5,60
100013fc:	01007104 	movi	r4,452
10001400:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10001404:	000b883a 	mov	r5,zero
10001408:	01007184 	movi	r4,454
1000140c:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10001410:	000b883a 	mov	r5,zero
10001414:	01007204 	movi	r4,456
10001418:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000141c:	000b883a 	mov	r5,zero
10001420:	01007284 	movi	r4,458
10001424:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10001428:	000b883a 	mov	r5,zero
1000142c:	01007304 	movi	r4,460
10001430:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10001434:	000b883a 	mov	r5,zero
10001438:	01007384 	movi	r4,462
1000143c:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10001440:	000b883a 	mov	r5,zero
10001444:	01007404 	movi	r4,464
10001448:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000144c:	000b883a 	mov	r5,zero
10001450:	01007484 	movi	r4,466
10001454:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10001458:	000b883a 	mov	r5,zero
1000145c:	01007504 	movi	r4,468
10001460:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10001464:	000b883a 	mov	r5,zero
10001468:	01007584 	movi	r4,470
1000146c:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10001470:	000b883a 	mov	r5,zero
10001474:	01007604 	movi	r4,472
10001478:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000147c:	000b883a 	mov	r5,zero
10001480:	01007684 	movi	r4,474
10001484:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10001488:	000b883a 	mov	r5,zero
1000148c:	01007704 	movi	r4,476
10001490:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10001494:	000b883a 	mov	r5,zero
10001498:	01007784 	movi	r4,478
1000149c:	000218c0 	call	1000218c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100014a0:	01738054 	movui	r5,52737
100014a4:	01000044 	movi	r4,1
100014a8:	00011700 	call	10001170 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100014ac:	0001883a 	nop
100014b0:	01000044 	movi	r4,1
100014b4:	00011e40 	call	100011e4 <IO_read>
100014b8:	10bfffcc 	andi	r2,r2,65535
100014bc:	1083fb58 	cmpnei	r2,r2,4077
100014c0:	10000826 	beq	r2,zero,100014e4 <main+0x298>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100014c4:	01000044 	movi	r4,1
100014c8:	00011e40 	call	100011e4 <IO_read>
100014cc:	10bfffcc 	andi	r2,r2,65535
100014d0:	100b883a 	mov	r5,r2
100014d4:	01040074 	movhi	r4,4097
100014d8:	2108ec04 	addi	r4,r4,9136
100014dc:	00034940 	call	10003494 <printf>
		goto USB_HOT_PLUG;
100014e0:	003f6606 	br	1000127c <main+0x30>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100014e4:	00b02284 	movi	r2,-16246
100014e8:	d0a8960d 	sth	r2,-23976(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100014ec:	008c0004 	movi	r2,12288
100014f0:	d0a8968d 	sth	r2,-23974(gp)
	fs_device = A_DP_STAT;
100014f4:	00880004 	movi	r2,8192
100014f8:	e0bffe8d 	sth	r2,-6(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100014fc:	d0a8960b 	ldhu	r2,-23976(gp)
10001500:	10bfffcc 	andi	r2,r2,65535
10001504:	1009883a 	mov	r4,r2
10001508:	00021e80 	call	100021e8 <UsbRead>
1000150c:	e0bfff8d 	sth	r2,-2(fp)

	if (!(usb_ctl_val & no_device))
10001510:	d0a8968b 	ldhu	r2,-23974(gp)
10001514:	e0ffff8b 	ldhu	r3,-2(fp)
10001518:	1884703a 	and	r2,r3,r2
1000151c:	10bfffcc 	andi	r2,r2,65535
10001520:	1000351e 	bne	r2,zero,100015f8 <main+0x3ac>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001524:	e03fff05 	stb	zero,-4(fp)
10001528:	00000f06 	br	10001568 <main+0x31c>
		{
			usleep(5*1000);
1000152c:	0104e204 	movi	r4,5000
10001530:	00101c00 	call	100101c0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001534:	d0a8960b 	ldhu	r2,-23976(gp)
10001538:	10bfffcc 	andi	r2,r2,65535
1000153c:	1009883a 	mov	r4,r2
10001540:	00021e80 	call	100021e8 <UsbRead>
10001544:	e0bfff8d 	sth	r2,-2(fp)
			if(usb_ctl_val & no_device) break;
10001548:	d0a8968b 	ldhu	r2,-23974(gp)
1000154c:	e0ffff8b 	ldhu	r3,-2(fp)
10001550:	1884703a 	and	r2,r3,r2
10001554:	10bfffcc 	andi	r2,r2,65535
10001558:	1000071e 	bne	r2,zero,10001578 <main+0x32c>
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000155c:	e0bfff03 	ldbu	r2,-4(fp)
10001560:	10800044 	addi	r2,r2,1
10001564:	e0bfff05 	stb	r2,-4(fp)
10001568:	e0bfff03 	ldbu	r2,-4(fp)
1000156c:	10800170 	cmpltui	r2,r2,5
10001570:	103fee1e 	bne	r2,zero,1000152c <main+0x2e0>
10001574:	00000106 	br	1000157c <main+0x330>
			if(usb_ctl_val & no_device) break;
10001578:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
1000157c:	d0a8968b 	ldhu	r2,-23974(gp)
10001580:	e0ffff8b 	ldhu	r3,-2(fp)
10001584:	1884703a 	and	r2,r3,r2
10001588:	10bfffcc 	andi	r2,r2,65535
1000158c:	1000261e 	bne	r2,zero,10001628 <main+0x3dc>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10001590:	01040074 	movhi	r4,4097
10001594:	2108f904 	addi	r4,r4,9188
10001598:	00035980 	call	10003598 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
1000159c:	01040074 	movhi	r4,4097
100015a0:	21090304 	addi	r4,r4,9228
100015a4:	00035980 	call	10003598 <puts>
			while (!(usb_ctl_val & no_device))
100015a8:	00000d06 	br	100015e0 <main+0x394>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100015ac:	d0a8960b 	ldhu	r2,-23976(gp)
100015b0:	10bfffcc 	andi	r2,r2,65535
100015b4:	1009883a 	mov	r4,r2
100015b8:	00021e80 	call	100021e8 <UsbRead>
100015bc:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device)
100015c0:	d0a8968b 	ldhu	r2,-23974(gp)
100015c4:	e0ffff8b 	ldhu	r3,-2(fp)
100015c8:	1884703a 	and	r2,r3,r2
100015cc:	10bfffcc 	andi	r2,r2,65535
100015d0:	10000126 	beq	r2,zero,100015d8 <main+0x38c>
					goto USB_HOT_PLUG;
100015d4:	003f2906 	br	1000127c <main+0x30>

				usleep(2000);
100015d8:	0101f404 	movi	r4,2000
100015dc:	00101c00 	call	100101c0 <usleep>
			while (!(usb_ctl_val & no_device))
100015e0:	d0a8968b 	ldhu	r2,-23974(gp)
100015e4:	e0ffff8b 	ldhu	r3,-2(fp)
100015e8:	1884703a 	and	r2,r3,r2
100015ec:	10bfffcc 	andi	r2,r2,65535
100015f0:	103fee26 	beq	r2,zero,100015ac <main+0x360>
100015f4:	00000c06 	br	10001628 <main+0x3dc>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100015f8:	e0ffff8b 	ldhu	r3,-2(fp)
100015fc:	e0bffe8b 	ldhu	r2,-6(fp)
10001600:	1884703a 	and	r2,r3,r2
10001604:	10bfffcc 	andi	r2,r2,65535
10001608:	10000426 	beq	r2,zero,1000161c <main+0x3d0>
		{
			printf("[INFO]: full speed device\n");
1000160c:	01040074 	movhi	r4,4097
10001610:	21090f04 	addi	r4,r4,9276
10001614:	00035980 	call	10003598 <puts>
10001618:	00000306 	br	10001628 <main+0x3dc>
		}
		else
		{
			printf("[INFO]: low speed device\n");
1000161c:	01040074 	movhi	r4,4097
10001620:	21091604 	addi	r4,r4,9304
10001624:	00035980 	call	10003598 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10001628:	00022e00 	call	100022e0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000162c:	00000306 	br	1000163c <main+0x3f0>
	{
		UsbSetAddress();
10001630:	00022e00 	call	100022e0 <UsbSetAddress>
		usleep(10*1000);
10001634:	0109c404 	movi	r4,10000
10001638:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000163c:	010000c4 	movi	r4,3
10001640:	00011e40 	call	100011e4 <IO_read>
10001644:	10bfffcc 	andi	r2,r2,65535
10001648:	1080040c 	andi	r2,r2,16
1000164c:	103ff826 	beq	r2,zero,10001630 <main+0x3e4>
	}

	UsbWaitTDListDone();
10001650:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10001654:	01414184 	movi	r5,1286
10001658:	01000084 	movi	r4,2
1000165c:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001660:	0009883a 	mov	r4,zero
10001664:	00011e40 	call	100011e4 <IO_read>
10001668:	10bfffcc 	andi	r2,r2,65535
1000166c:	100b883a 	mov	r5,r2
10001670:	01040074 	movhi	r4,4097
10001674:	21091d04 	addi	r4,r4,9332
10001678:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508); // n
1000167c:	01414204 	movi	r5,1288
10001680:	01000084 	movi	r4,2
10001684:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001688:	0009883a 	mov	r4,zero
1000168c:	00011e40 	call	100011e4 <IO_read>
10001690:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10001694:	e0bfff8b 	ldhu	r2,-2(fp)
10001698:	100b883a 	mov	r5,r2
1000169c:	01040074 	movhi	r4,4097
100016a0:	21092804 	addi	r4,r4,9376
100016a4:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100016a8:	e0bfff8b 	ldhu	r2,-2(fp)
100016ac:	108000e0 	cmpeqi	r2,r2,3
100016b0:	1000031e 	bne	r2,zero,100016c0 <main+0x474>
	{
		usb_ctl_val = UsbGetRetryCnt();
100016b4:	00032040 	call	10003204 <UsbGetRetryCnt>
100016b8:	e0bfff8d 	sth	r2,-2(fp)

		goto USB_HOT_PLUG;
100016bc:	003eef06 	br	1000127c <main+0x30>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100016c0:	01040074 	movhi	r4,4097
100016c4:	21093404 	addi	r4,r4,9424
100016c8:	00035980 	call	10003598 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100016cc:	00023e00 	call	100023e0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100016d0:	00000306 	br	100016e0 <main+0x494>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100016d4:	00023e00 	call	100023e0 <UsbGetDeviceDesc1>
		usleep(10*1000);
100016d8:	0109c404 	movi	r4,10000
100016dc:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100016e0:	010000c4 	movi	r4,3
100016e4:	00011e40 	call	100011e4 <IO_read>
100016e8:	10bfffcc 	andi	r2,r2,65535
100016ec:	1080040c 	andi	r2,r2,16
100016f0:	103ff826 	beq	r2,zero,100016d4 <main+0x488>
	}

	UsbWaitTDListDone();
100016f4:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100016f8:	01414184 	movi	r5,1286
100016fc:	01000084 	movi	r4,2
10001700:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001704:	0009883a 	mov	r4,zero
10001708:	00011e40 	call	100011e4 <IO_read>
1000170c:	10bfffcc 	andi	r2,r2,65535
10001710:	100b883a 	mov	r5,r2
10001714:	01040074 	movhi	r4,4097
10001718:	21094304 	addi	r4,r4,9484
1000171c:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
10001720:	01414204 	movi	r5,1288
10001724:	01000084 	movi	r4,2
10001728:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000172c:	0009883a 	mov	r4,zero
10001730:	00011e40 	call	100011e4 <IO_read>
10001734:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10001738:	e0bfff8b 	ldhu	r2,-2(fp)
1000173c:	100b883a 	mov	r5,r2
10001740:	01040074 	movhi	r4,4097
10001744:	21094e04 	addi	r4,r4,9528
10001748:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
1000174c:	e0bfff8b 	ldhu	r2,-2(fp)
10001750:	108000e0 	cmpeqi	r2,r2,3
10001754:	1000061e 	bne	r2,zero,10001770 <main+0x524>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001758:	00032040 	call	10003204 <UsbGetRetryCnt>
1000175c:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001760:	01040074 	movhi	r4,4097
10001764:	21095a04 	addi	r4,r4,9576
10001768:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
1000176c:	003ec306 	br	1000127c <main+0x30>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10001770:	01040074 	movhi	r4,4097
10001774:	21096304 	addi	r4,r4,9612
10001778:	00035980 	call	10003598 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000177c:	00025280 	call	10002528 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001780:	00000306 	br	10001790 <main+0x544>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10001784:	00025280 	call	10002528 <UsbGetDeviceDesc2>
		usleep(10*1000);
10001788:	0109c404 	movi	r4,10000
1000178c:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001790:	010000c4 	movi	r4,3
10001794:	00011e40 	call	100011e4 <IO_read>
10001798:	10bfffcc 	andi	r2,r2,65535
1000179c:	1080040c 	andi	r2,r2,16
100017a0:	103ff826 	beq	r2,zero,10001784 <main+0x538>
	}

	UsbWaitTDListDone();
100017a4:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100017a8:	01414184 	movi	r5,1286
100017ac:	01000084 	movi	r4,2
100017b0:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100017b4:	0009883a 	mov	r4,zero
100017b8:	00011e40 	call	100011e4 <IO_read>
100017bc:	10bfffcc 	andi	r2,r2,65535
100017c0:	100b883a 	mov	r5,r2
100017c4:	01040074 	movhi	r4,4097
100017c8:	21094304 	addi	r4,r4,9484
100017cc:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
100017d0:	01414204 	movi	r5,1288
100017d4:	01000084 	movi	r4,2
100017d8:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100017dc:	0009883a 	mov	r4,zero
100017e0:	00011e40 	call	100011e4 <IO_read>
100017e4:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100017e8:	e0bfff8b 	ldhu	r2,-2(fp)
100017ec:	100b883a 	mov	r5,r2
100017f0:	01040074 	movhi	r4,4097
100017f4:	21094e04 	addi	r4,r4,9528
100017f8:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
100017fc:	e0bfff8b 	ldhu	r2,-2(fp)
10001800:	108000e0 	cmpeqi	r2,r2,3
10001804:	1000061e 	bne	r2,zero,10001820 <main+0x5d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001808:	00032040 	call	10003204 <UsbGetRetryCnt>
1000180c:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001810:	01040074 	movhi	r4,4097
10001814:	21095a04 	addi	r4,r4,9576
10001818:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
1000181c:	003e9706 	br	1000127c <main+0x30>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10001820:	01040074 	movhi	r4,4097
10001824:	21097704 	addi	r4,r4,9692
10001828:	00035980 	call	10003598 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
1000182c:	00027000 	call	10002700 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001830:	00000306 	br	10001840 <main+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10001834:	00027000 	call	10002700 <UsbGetConfigDesc1>
		usleep(10*1000);
10001838:	0109c404 	movi	r4,10000
1000183c:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001840:	010000c4 	movi	r4,3
10001844:	00011e40 	call	100011e4 <IO_read>
10001848:	10bfffcc 	andi	r2,r2,65535
1000184c:	1080040c 	andi	r2,r2,16
10001850:	103ff826 	beq	r2,zero,10001834 <main+0x5e8>
	}

	UsbWaitTDListDone();
10001854:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001858:	01414184 	movi	r5,1286
1000185c:	01000084 	movi	r4,2
10001860:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001864:	0009883a 	mov	r4,zero
10001868:	00011e40 	call	100011e4 <IO_read>
1000186c:	10bfffcc 	andi	r2,r2,65535
10001870:	100b883a 	mov	r5,r2
10001874:	01040074 	movhi	r4,4097
10001878:	21098904 	addi	r4,r4,9764
1000187c:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
10001880:	01414204 	movi	r5,1288
10001884:	01000084 	movi	r4,2
10001888:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000188c:	0009883a 	mov	r4,zero
10001890:	00011e40 	call	100011e4 <IO_read>
10001894:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10001898:	e0bfff8b 	ldhu	r2,-2(fp)
1000189c:	100b883a 	mov	r5,r2
100018a0:	01040074 	movhi	r4,4097
100018a4:	21099404 	addi	r4,r4,9808
100018a8:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
100018ac:	e0bfff8b 	ldhu	r2,-2(fp)
100018b0:	108000e0 	cmpeqi	r2,r2,3
100018b4:	1000061e 	bne	r2,zero,100018d0 <main+0x684>
	{
		usb_ctl_val = UsbGetRetryCnt();
100018b8:	00032040 	call	10003204 <UsbGetRetryCnt>
100018bc:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100018c0:	01040074 	movhi	r4,4097
100018c4:	21095a04 	addi	r4,r4,9576
100018c8:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
100018cc:	003e6b06 	br	1000127c <main+0x30>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100018d0:	01040074 	movhi	r4,4097
100018d4:	2109a004 	addi	r4,r4,9856
100018d8:	00035980 	call	10003598 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100018dc:	00028900 	call	10002890 <UsbGetConfigDesc2>

	usleep(100*1000);
100018e0:	010000b4 	movhi	r4,2
100018e4:	2121a804 	addi	r4,r4,-31072
100018e8:	00101c00 	call	100101c0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100018ec:	00000306 	br	100018fc <main+0x6b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100018f0:	00028900 	call	10002890 <UsbGetConfigDesc2>
		usleep(10*1000);
100018f4:	0109c404 	movi	r4,10000
100018f8:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100018fc:	010000c4 	movi	r4,3
10001900:	00011e40 	call	100011e4 <IO_read>
10001904:	10bfffcc 	andi	r2,r2,65535
10001908:	1080040c 	andi	r2,r2,16
1000190c:	103ff826 	beq	r2,zero,100018f0 <main+0x6a4>
	}

	UsbWaitTDListDone();
10001910:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001914:	01414184 	movi	r5,1286
10001918:	01000084 	movi	r4,2
1000191c:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001920:	0009883a 	mov	r4,zero
10001924:	00011e40 	call	100011e4 <IO_read>
10001928:	10bfffcc 	andi	r2,r2,65535
1000192c:	100b883a 	mov	r5,r2
10001930:	01040074 	movhi	r4,4097
10001934:	2109b304 	addi	r4,r4,9932
10001938:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
1000193c:	01414204 	movi	r5,1288
10001940:	01000084 	movi	r4,2
10001944:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001948:	0009883a 	mov	r4,zero
1000194c:	00011e40 	call	100011e4 <IO_read>
10001950:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10001954:	e0bfff8b 	ldhu	r2,-2(fp)
10001958:	100b883a 	mov	r5,r2
1000195c:	01040074 	movhi	r4,4097
10001960:	2109be04 	addi	r4,r4,9976
10001964:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
10001968:	e0bfff8b 	ldhu	r2,-2(fp)
1000196c:	108000e0 	cmpeqi	r2,r2,3
10001970:	1000061e 	bne	r2,zero,1000198c <main+0x740>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001974:	00032040 	call	10003204 <UsbGetRetryCnt>
10001978:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
1000197c:	01040074 	movhi	r4,4097
10001980:	21095a04 	addi	r4,r4,9576
10001984:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
10001988:	003e3c06 	br	1000127c <main+0x30>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
1000198c:	01040074 	movhi	r4,4097
10001990:	2109ca04 	addi	r4,r4,10024
10001994:	00035980 	call	10003598 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10001998:	01415b04 	movi	r5,1388
1000199c:	01000084 	movi	r4,2
100019a0:	00011700 	call	10001170 <IO_write>
	code = IO_read(HPI_DATA);
100019a4:	0009883a 	mov	r4,zero
100019a8:	00011e40 	call	100011e4 <IO_read>
100019ac:	e0bffc0d 	sth	r2,-16(fp)
	code = code & 0x003;
100019b0:	e0bffc0b 	ldhu	r2,-16(fp)
100019b4:	108000cc 	andi	r2,r2,3
100019b8:	e0bffc0d 	sth	r2,-16(fp)
	printf("\ncode = %x\n", code);
100019bc:	e0bffc0b 	ldhu	r2,-16(fp)
100019c0:	100b883a 	mov	r5,r2
100019c4:	01040074 	movhi	r4,4097
100019c8:	2109dd04 	addi	r4,r4,10100
100019cc:	00034940 	call	10003494 <printf>

	if (code == 0x01)
100019d0:	e0bffc0b 	ldhu	r2,-16(fp)
100019d4:	10800058 	cmpnei	r2,r2,1
100019d8:	1000041e 	bne	r2,zero,100019ec <main+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
100019dc:	01040074 	movhi	r4,4097
100019e0:	2109e004 	addi	r4,r4,10112
100019e4:	00035980 	call	10003598 <puts>
100019e8:	00000306 	br	100019f8 <main+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100019ec:	01040074 	movhi	r4,4097
100019f0:	2109ef04 	addi	r4,r4,10172
100019f4:	00035980 	call	10003598 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
100019f8:	01415d84 	movi	r5,1398
100019fc:	01000084 	movi	r4,2
10001a00:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x073F);
10001a04:	0141cfc4 	movi	r5,1855
10001a08:	0009883a 	mov	r4,zero
10001a0c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x8105);
10001a10:	01604154 	movui	r5,33029
10001a14:	0009883a 	mov	r4,zero
10001a18:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0003);
10001a1c:	014000c4 	movi	r5,3
10001a20:	0009883a 	mov	r4,zero
10001a24:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001a28:	01400204 	movi	r5,8
10001a2c:	0009883a 	mov	r4,zero
10001a30:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10001a34:	016b0294 	movui	r5,44042
10001a38:	0009883a 	mov	r4,zero
10001a3c:	00011700 	call	10001170 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10001a40:	01415d84 	movi	r5,1398
10001a44:	01006c04 	movi	r4,432
10001a48:	000218c0 	call	1000218c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10001a4c:	01415f04 	movi	r5,1404
10001a50:	01000084 	movi	r4,2
10001a54:	00011700 	call	10001170 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10001a58:	0009883a 	mov	r4,zero
10001a5c:	00011e40 	call	100011e4 <IO_read>
10001a60:	e0bffbc5 	stb	r2,-17(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10001a64:	e0bffbc3 	ldbu	r2,-17(fp)
10001a68:	100b883a 	mov	r5,r2
10001a6c:	01040074 	movhi	r4,4097
10001a70:	2109f804 	addi	r4,r4,10208
10001a74:	00034940 	call	10003494 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10001a78:	0002af80 	call	10002af8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001a7c:	00000306 	br	10001a8c <main+0x840>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10001a80:	0002af80 	call	10002af8 <UsbSetConfig>
		usleep(10*1000);
10001a84:	0109c404 	movi	r4,10000
10001a88:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001a8c:	010000c4 	movi	r4,3
10001a90:	00011e40 	call	100011e4 <IO_read>
10001a94:	10bfffcc 	andi	r2,r2,65535
10001a98:	1080040c 	andi	r2,r2,16
10001a9c:	103ff826 	beq	r2,zero,10001a80 <main+0x834>
	}

	UsbWaitTDListDone();
10001aa0:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001aa4:	01414184 	movi	r5,1286
10001aa8:	01000084 	movi	r4,2
10001aac:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	00011e40 	call	100011e4 <IO_read>
10001ab8:	10bfffcc 	andi	r2,r2,65535
10001abc:	100b883a 	mov	r5,r2
10001ac0:	01040074 	movhi	r4,4097
10001ac4:	210a0204 	addi	r4,r4,10248
10001ac8:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
10001acc:	01414204 	movi	r5,1288
10001ad0:	01000084 	movi	r4,2
10001ad4:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001ad8:	0009883a 	mov	r4,zero
10001adc:	00011e40 	call	100011e4 <IO_read>
10001ae0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10001ae4:	e0bfff8b 	ldhu	r2,-2(fp)
10001ae8:	100b883a 	mov	r5,r2
10001aec:	01040074 	movhi	r4,4097
10001af0:	210a0d04 	addi	r4,r4,10292
10001af4:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
10001af8:	e0bfff8b 	ldhu	r2,-2(fp)
10001afc:	108000e0 	cmpeqi	r2,r2,3
10001b00:	1000061e 	bne	r2,zero,10001b1c <main+0x8d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001b04:	00032040 	call	10003204 <UsbGetRetryCnt>
10001b08:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001b0c:	01040074 	movhi	r4,4097
10001b10:	21095a04 	addi	r4,r4,9576
10001b14:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
10001b18:	003dd806 	br	1000127c <main+0x30>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10001b1c:	01040074 	movhi	r4,4097
10001b20:	210a1904 	addi	r4,r4,10340
10001b24:	00035980 	call	10003598 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10001b28:	0002bf80 	call	10002bf8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001b2c:	00000306 	br	10001b3c <main+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10001b30:	0002bf80 	call	10002bf8 <UsbClassRequest>
		usleep(10*1000);
10001b34:	0109c404 	movi	r4,10000
10001b38:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001b3c:	010000c4 	movi	r4,3
10001b40:	00011e40 	call	100011e4 <IO_read>
10001b44:	10bfffcc 	andi	r2,r2,65535
10001b48:	1080040c 	andi	r2,r2,16
10001b4c:	103ff826 	beq	r2,zero,10001b30 <main+0x8e4>
	}

	UsbWaitTDListDone();
10001b50:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001b54:	01414184 	movi	r5,1286
10001b58:	01000084 	movi	r4,2
10001b5c:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001b60:	0009883a 	mov	r4,zero
10001b64:	00011e40 	call	100011e4 <IO_read>
10001b68:	10bfffcc 	andi	r2,r2,65535
10001b6c:	100b883a 	mov	r5,r2
10001b70:	01040074 	movhi	r4,4097
10001b74:	210a2b04 	addi	r4,r4,10412
10001b78:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
10001b7c:	01414204 	movi	r5,1288
10001b80:	01000084 	movi	r4,2
10001b84:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001b88:	0009883a 	mov	r4,zero
10001b8c:	00011e40 	call	100011e4 <IO_read>
10001b90:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001b94:	e0bfff8b 	ldhu	r2,-2(fp)
10001b98:	100b883a 	mov	r5,r2
10001b9c:	01040074 	movhi	r4,4097
10001ba0:	210a3604 	addi	r4,r4,10456
10001ba4:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
10001ba8:	e0bfff8b 	ldhu	r2,-2(fp)
10001bac:	108000e0 	cmpeqi	r2,r2,3
10001bb0:	1000061e 	bne	r2,zero,10001bcc <main+0x980>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001bb4:	00032040 	call	10003204 <UsbGetRetryCnt>
10001bb8:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001bbc:	01040074 	movhi	r4,4097
10001bc0:	21095a04 	addi	r4,r4,9576
10001bc4:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
10001bc8:	003dac06 	br	1000127c <main+0x30>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10001bcc:	01040074 	movhi	r4,4097
10001bd0:	210a4204 	addi	r4,r4,10504
10001bd4:	00035980 	call	10003598 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10001bd8:	0002cf80 	call	10002cf8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001bdc:	00000306 	br	10001bec <main+0x9a0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10001be0:	0002cf80 	call	10002cf8 <UsbGetHidDesc>
		usleep(10*1000);
10001be4:	0109c404 	movi	r4,10000
10001be8:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001bec:	010000c4 	movi	r4,3
10001bf0:	00011e40 	call	100011e4 <IO_read>
10001bf4:	10bfffcc 	andi	r2,r2,65535
10001bf8:	1080040c 	andi	r2,r2,16
10001bfc:	103ff826 	beq	r2,zero,10001be0 <main+0x994>
	}

	UsbWaitTDListDone();
10001c00:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001c04:	01414184 	movi	r5,1286
10001c08:	01000084 	movi	r4,2
10001c0c:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001c10:	0009883a 	mov	r4,zero
10001c14:	00011e40 	call	100011e4 <IO_read>
10001c18:	10bfffcc 	andi	r2,r2,65535
10001c1c:	100b883a 	mov	r5,r2
10001c20:	01040074 	movhi	r4,4097
10001c24:	210a2b04 	addi	r4,r4,10412
10001c28:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
10001c2c:	01414204 	movi	r5,1288
10001c30:	01000084 	movi	r4,2
10001c34:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001c38:	0009883a 	mov	r4,zero
10001c3c:	00011e40 	call	100011e4 <IO_read>
10001c40:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001c44:	e0bfff8b 	ldhu	r2,-2(fp)
10001c48:	100b883a 	mov	r5,r2
10001c4c:	01040074 	movhi	r4,4097
10001c50:	210a3604 	addi	r4,r4,10456
10001c54:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
10001c58:	e0bfff8b 	ldhu	r2,-2(fp)
10001c5c:	108000e0 	cmpeqi	r2,r2,3
10001c60:	1000061e 	bne	r2,zero,10001c7c <main+0xa30>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001c64:	00032040 	call	10003204 <UsbGetRetryCnt>
10001c68:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001c6c:	01040074 	movhi	r4,4097
10001c70:	21095a04 	addi	r4,r4,9576
10001c74:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
10001c78:	003d8006 	br	1000127c <main+0x30>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10001c7c:	01040074 	movhi	r4,4097
10001c80:	210a5404 	addi	r4,r4,10576
10001c84:	00035980 	call	10003598 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10001c88:	0002e400 	call	10002e40 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001c8c:	00000306 	br	10001c9c <main+0xa50>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10001c90:	0002e400 	call	10002e40 <UsbGetReportDesc>
		usleep(10*1000);
10001c94:	0109c404 	movi	r4,10000
10001c98:	00101c00 	call	100101c0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001c9c:	010000c4 	movi	r4,3
10001ca0:	00011e40 	call	100011e4 <IO_read>
10001ca4:	10bfffcc 	andi	r2,r2,65535
10001ca8:	1080040c 	andi	r2,r2,16
10001cac:	103ff826 	beq	r2,zero,10001c90 <main+0xa44>
	}

	UsbWaitTDListDone();
10001cb0:	00031800 	call	10003180 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001cb4:	01414184 	movi	r5,1286
10001cb8:	01000084 	movi	r4,2
10001cbc:	00011700 	call	10001170 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001cc0:	0009883a 	mov	r4,zero
10001cc4:	00011e40 	call	100011e4 <IO_read>
10001cc8:	10bfffcc 	andi	r2,r2,65535
10001ccc:	100b883a 	mov	r5,r2
10001cd0:	01040074 	movhi	r4,4097
10001cd4:	210a6804 	addi	r4,r4,10656
10001cd8:	00034940 	call	10003494 <printf>

	IO_write(HPI_ADDR,0x0508);
10001cdc:	01414204 	movi	r5,1288
10001ce0:	01000084 	movi	r4,2
10001ce4:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001ce8:	0009883a 	mov	r4,zero
10001cec:	00011e40 	call	100011e4 <IO_read>
10001cf0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10001cf4:	e0bfff8b 	ldhu	r2,-2(fp)
10001cf8:	100b883a 	mov	r5,r2
10001cfc:	01040074 	movhi	r4,4097
10001d00:	210a7404 	addi	r4,r4,10704
10001d04:	00034940 	call	10003494 <printf>
	while (usb_ctl_val != 0x03)
10001d08:	e0bfff8b 	ldhu	r2,-2(fp)
10001d0c:	108000e0 	cmpeqi	r2,r2,3
10001d10:	1000061e 	bne	r2,zero,10001d2c <main+0xae0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001d14:	00032040 	call	10003204 <UsbGetRetryCnt>
10001d18:	e0bfff8d 	sth	r2,-2(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001d1c:	01040074 	movhi	r4,4097
10001d20:	21095a04 	addi	r4,r4,9576
10001d24:	00035980 	call	10003598 <puts>
		goto USB_HOT_PLUG;
10001d28:	003d5406 	br	1000127c <main+0x30>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10001d2c:	01040074 	movhi	r4,4097
10001d30:	210a8004 	addi	r4,r4,10752
10001d34:	00035980 	call	10003598 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10001d38:	0109c404 	movi	r4,10000
10001d3c:	00101c00 	call	100101c0 <usleep>
	while(1)
	{
		toggle++;
10001d40:	e0bfff43 	ldbu	r2,-3(fp)
10001d44:	10800044 	addi	r2,r2,1
10001d48:	e0bfff45 	stb	r2,-3(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10001d4c:	01414004 	movi	r5,1280
10001d50:	01000084 	movi	r4,2
10001d54:	00011700 	call	10001170 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001d58:	01414704 	movi	r5,1308
10001d5c:	0009883a 	mov	r4,zero
10001d60:	00011700 	call	10001170 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001d64:	e0bffbc3 	ldbu	r2,-17(fp)
10001d68:	108003cc 	andi	r2,r2,15
10001d6c:	100b883a 	mov	r5,r2
10001d70:	0009883a 	mov	r4,zero
10001d74:	00011700 	call	10001170 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001d78:	0140a444 	movi	r5,657
10001d7c:	0009883a 	mov	r4,zero
10001d80:	00011700 	call	10001170 <IO_write>
		if(toggle%2)
10001d84:	e0bfff43 	ldbu	r2,-3(fp)
10001d88:	1080004c 	andi	r2,r2,1
10001d8c:	10803fcc 	andi	r2,r2,255
10001d90:	10000426 	beq	r2,zero,10001da4 <main+0xb58>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10001d94:	01400044 	movi	r5,1
10001d98:	0009883a 	mov	r4,zero
10001d9c:	00011700 	call	10001170 <IO_write>
10001da0:	00000306 	br	10001db0 <main+0xb64>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10001da4:	01401044 	movi	r5,65
10001da8:	0009883a 	mov	r4,zero
10001dac:	00011700 	call	10001170 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10001db0:	014004c4 	movi	r5,19
10001db4:	0009883a 	mov	r4,zero
10001db8:	00011700 	call	10001170 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10001dbc:	000b883a 	mov	r5,zero
10001dc0:	0009883a 	mov	r4,zero
10001dc4:	00011700 	call	10001170 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001dc8:	01414004 	movi	r5,1280
10001dcc:	01006c04 	movi	r4,432
10001dd0:	000218c0 	call	1000218c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001dd4:	00002406 	br	10001e68 <main+0xc1c>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001dd8:	01414004 	movi	r5,1280
10001ddc:	01000084 	movi	r4,2
10001de0:	00011700 	call	10001170 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10001de4:	01414704 	movi	r5,1308
10001de8:	0009883a 	mov	r4,zero
10001dec:	00011700 	call	10001170 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001df0:	e0bffbc3 	ldbu	r2,-17(fp)
10001df4:	108003cc 	andi	r2,r2,15
10001df8:	100b883a 	mov	r5,r2
10001dfc:	0009883a 	mov	r4,zero
10001e00:	00011700 	call	10001170 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001e04:	0140a444 	movi	r5,657
10001e08:	0009883a 	mov	r4,zero
10001e0c:	00011700 	call	10001170 <IO_write>
			if(toggle%2)
10001e10:	e0bfff43 	ldbu	r2,-3(fp)
10001e14:	1080004c 	andi	r2,r2,1
10001e18:	10803fcc 	andi	r2,r2,255
10001e1c:	10000426 	beq	r2,zero,10001e30 <main+0xbe4>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001e20:	01400044 	movi	r5,1
10001e24:	0009883a 	mov	r4,zero
10001e28:	00011700 	call	10001170 <IO_write>
10001e2c:	00000306 	br	10001e3c <main+0xbf0>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001e30:	01401044 	movi	r5,65
10001e34:	0009883a 	mov	r4,zero
10001e38:	00011700 	call	10001170 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001e3c:	014004c4 	movi	r5,19
10001e40:	0009883a 	mov	r4,zero
10001e44:	00011700 	call	10001170 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001e48:	000b883a 	mov	r5,zero
10001e4c:	0009883a 	mov	r4,zero
10001e50:	00011700 	call	10001170 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e54:	01414004 	movi	r5,1280
10001e58:	01006c04 	movi	r4,432
10001e5c:	000218c0 	call	1000218c <UsbWrite>
			usleep(10*1000);
10001e60:	0109c404 	movi	r4,10000
10001e64:	00101c00 	call	100101c0 <usleep>
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001e68:	010000c4 	movi	r4,3
10001e6c:	00011e40 	call	100011e4 <IO_read>
10001e70:	10bfffcc 	andi	r2,r2,65535
10001e74:	1080040c 	andi	r2,r2,16
10001e78:	103fd726 	beq	r2,zero,10001dd8 <main+0xb8c>
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10001e7c:	00031800 	call	10003180 <UsbWaitTDListDone>
10001e80:	e0bfff8d 	sth	r2,-2(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10001e84:	01014784 	movi	r4,1310
10001e88:	00021e80 	call	100021e8 <UsbRead>
10001e8c:	10bfffcc 	andi	r2,r2,65535
10001e90:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10001e94:	e17ffd17 	ldw	r5,-12(fp)
10001e98:	01040074 	movhi	r4,4097
10001e9c:	210a9404 	addi	r4,r4,10832
10001ea0:	00034940 	call	10003494 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		// *keycode_base = keycode & 0xff;

		usleep(200);//usleep(5000);
10001ea4:	01003204 	movi	r4,200
10001ea8:	00101c00 	call	100101c0 <usleep>

		// TODO Core game logic can be written here.

		usb_ctl_val = UsbRead(ctl_reg);
10001eac:	d0a8960b 	ldhu	r2,-23976(gp)
10001eb0:	10bfffcc 	andi	r2,r2,65535
10001eb4:	1009883a 	mov	r4,r2
10001eb8:	00021e80 	call	100021e8 <UsbRead>
10001ebc:	e0bfff8d 	sth	r2,-2(fp)

		if(!(usb_ctl_val & no_device))
10001ec0:	d0a8968b 	ldhu	r2,-23974(gp)
10001ec4:	e0ffff8b 	ldhu	r3,-2(fp)
10001ec8:	1884703a 	and	r2,r3,r2
10001ecc:	10bfffcc 	andi	r2,r2,65535
10001ed0:	10003f1e 	bne	r2,zero,10001fd0 <main+0xd84>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001ed4:	e03fff05 	stb	zero,-4(fp)
10001ed8:	00000f06 	br	10001f18 <main+0xccc>
			{
				usleep(5*1000);
10001edc:	0104e204 	movi	r4,5000
10001ee0:	00101c00 	call	100101c0 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001ee4:	d0a8960b 	ldhu	r2,-23976(gp)
10001ee8:	10bfffcc 	andi	r2,r2,65535
10001eec:	1009883a 	mov	r4,r2
10001ef0:	00021e80 	call	100021e8 <UsbRead>
10001ef4:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device) break;
10001ef8:	d0a8968b 	ldhu	r2,-23974(gp)
10001efc:	e0ffff8b 	ldhu	r3,-2(fp)
10001f00:	1884703a 	and	r2,r3,r2
10001f04:	10bfffcc 	andi	r2,r2,65535
10001f08:	1000071e 	bne	r2,zero,10001f28 <main+0xcdc>
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001f0c:	e0bfff03 	ldbu	r2,-4(fp)
10001f10:	10800044 	addi	r2,r2,1
10001f14:	e0bfff05 	stb	r2,-4(fp)
10001f18:	e0bfff03 	ldbu	r2,-4(fp)
10001f1c:	108001f0 	cmpltui	r2,r2,7
10001f20:	103fee1e 	bne	r2,zero,10001edc <main+0xc90>
10001f24:	00000106 	br	10001f2c <main+0xce0>
				if(usb_ctl_val & no_device) break;
10001f28:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001f2c:	d0a8968b 	ldhu	r2,-23974(gp)
10001f30:	e0ffff8b 	ldhu	r3,-2(fp)
10001f34:	1884703a 	and	r2,r3,r2
10001f38:	10bfffcc 	andi	r2,r2,65535
10001f3c:	1000241e 	bne	r2,zero,10001fd0 <main+0xd84>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001f40:	01040074 	movhi	r4,4097
10001f44:	210a9d04 	addi	r4,r4,10868
10001f48:	00035980 	call	10003598 <puts>
				printf("[INFO]: please insert again!!! \n");
10001f4c:	01040074 	movhi	r4,4097
10001f50:	210aa804 	addi	r4,r4,10912
10001f54:	00035980 	call	10003598 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001f58:	00001d06 	br	10001fd0 <main+0xd84>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001f5c:	d0a8960b 	ldhu	r2,-23976(gp)
10001f60:	10bfffcc 	andi	r2,r2,65535
10001f64:	1009883a 	mov	r4,r2
10001f68:	00021e80 	call	100021e8 <UsbRead>
10001f6c:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001f70:	0104e204 	movi	r4,5000
10001f74:	00101c00 	call	100101c0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001f78:	d0a8960b 	ldhu	r2,-23976(gp)
10001f7c:	10bfffcc 	andi	r2,r2,65535
10001f80:	1009883a 	mov	r4,r2
10001f84:	00021e80 	call	100021e8 <UsbRead>
10001f88:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001f8c:	0104e204 	movi	r4,5000
10001f90:	00101c00 	call	100101c0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001f94:	d0a8960b 	ldhu	r2,-23976(gp)
10001f98:	10bfffcc 	andi	r2,r2,65535
10001f9c:	1009883a 	mov	r4,r2
10001fa0:	00021e80 	call	100021e8 <UsbRead>
10001fa4:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001fa8:	0104e204 	movi	r4,5000
10001fac:	00101c00 	call	100101c0 <usleep>

			if(usb_ctl_val & no_device)
10001fb0:	d0a8968b 	ldhu	r2,-23974(gp)
10001fb4:	e0ffff8b 	ldhu	r3,-2(fp)
10001fb8:	1884703a 	and	r2,r3,r2
10001fbc:	10bfffcc 	andi	r2,r2,65535
10001fc0:	10000126 	beq	r2,zero,10001fc8 <main+0xd7c>
				goto USB_HOT_PLUG;
10001fc4:	003cad06 	br	1000127c <main+0x30>

			usleep(200);
10001fc8:	01003204 	movi	r4,200
10001fcc:	00101c00 	call	100101c0 <usleep>
		while (!(usb_ctl_val & no_device))
10001fd0:	d0a8968b 	ldhu	r2,-23974(gp)
10001fd4:	e0ffff8b 	ldhu	r3,-2(fp)
10001fd8:	1884703a 	and	r2,r3,r2
10001fdc:	10bfffcc 	andi	r2,r2,65535
10001fe0:	103fde26 	beq	r2,zero,10001f5c <main+0xd10>
		toggle++;
10001fe4:	003f5606 	br	10001d40 <main+0xaf4>

10001fe8 <drawTile>:

#include "hardware.h"
#include "tile_eng_driver.h"
#include <stdint.h>

void drawTile(int x, int y, int paletteId, int spriteId) {
10001fe8:	defffa04 	addi	sp,sp,-24
10001fec:	df000515 	stw	fp,20(sp)
10001ff0:	df000504 	addi	fp,sp,20
10001ff4:	e13ffe15 	stw	r4,-8(fp)
10001ff8:	e17ffd15 	stw	r5,-12(fp)
10001ffc:	e1bffc15 	stw	r6,-16(fp)
10002000:	e1fffb15 	stw	r7,-20(fp)
	uint16_t tt_addr = ((y & 0xFF)<<8) | (x & 0xFF);
10002004:	e0bffd17 	ldw	r2,-12(fp)
10002008:	1004923a 	slli	r2,r2,8
1000200c:	1007883a 	mov	r3,r2
10002010:	e0bffe17 	ldw	r2,-8(fp)
10002014:	10803fcc 	andi	r2,r2,255
10002018:	1884b03a 	or	r2,r3,r2
1000201c:	e0bfff8d 	sth	r2,-2(fp)
	uint16_t tt_data = ((paletteId & 0x7)<<8) | (spriteId & 0xFF);
10002020:	e0bffc17 	ldw	r2,-16(fp)
10002024:	1004923a 	slli	r2,r2,8
10002028:	1081c00c 	andi	r2,r2,1792
1000202c:	1007883a 	mov	r3,r2
10002030:	e0bffb17 	ldw	r2,-20(fp)
10002034:	10803fcc 	andi	r2,r2,255
10002038:	1884b03a 	or	r2,r3,r2
1000203c:	e0bfff0d 	sth	r2,-4(fp)
	tiletable_ptr[tt_addr] = tt_data;
10002040:	e0bfff8b 	ldhu	r2,-2(fp)
10002044:	100690ba 	slli	r3,r2,2
10002048:	00a00014 	movui	r2,32768
1000204c:	1885883a 	add	r2,r3,r2
10002050:	e0ffff0b 	ldhu	r3,-4(fp)
10002054:	10c00015 	stw	r3,0(r2)
}
10002058:	0001883a 	nop
1000205c:	e037883a 	mov	sp,fp
10002060:	df000017 	ldw	fp,0(sp)
10002064:	dec00104 	addi	sp,sp,4
10002068:	f800283a 	ret

1000206c <writePaletteHelper>:

void writePaletteHelper(uint8_t paletteId, uint8_t colorIndex, int rgbColor) {
1000206c:	defffb04 	addi	sp,sp,-20
10002070:	df000415 	stw	fp,16(sp)
10002074:	df000404 	addi	fp,sp,16
10002078:	2005883a 	mov	r2,r4
1000207c:	2807883a 	mov	r3,r5
10002080:	e1bffc15 	stw	r6,-16(fp)
10002084:	e0bffe05 	stb	r2,-8(fp)
10002088:	1805883a 	mov	r2,r3
1000208c:	e0bffd05 	stb	r2,-12(fp)
	uint8_t paletteAddr = ((paletteId & 0x7) << 2) | (colorIndex & 0x3);
10002090:	e0bffe03 	ldbu	r2,-8(fp)
10002094:	100490ba 	slli	r2,r2,2
10002098:	1080070c 	andi	r2,r2,28
1000209c:	1007883a 	mov	r3,r2
100020a0:	e0bffd03 	ldbu	r2,-12(fp)
100020a4:	108000cc 	andi	r2,r2,3
100020a8:	1884b03a 	or	r2,r3,r2
100020ac:	e0bfffc5 	stb	r2,-1(fp)
	palette_ptr[paletteAddr] = rgbColor & 0x00FFFFFF;
100020b0:	e0bfffc3 	ldbu	r2,-1(fp)
100020b4:	100490ba 	slli	r2,r2,2
100020b8:	10c02004 	addi	r3,r2,128
100020bc:	e13ffc17 	ldw	r4,-16(fp)
100020c0:	00804034 	movhi	r2,256
100020c4:	10bfffc4 	addi	r2,r2,-1
100020c8:	2084703a 	and	r2,r4,r2
100020cc:	18800015 	stw	r2,0(r3)
}
100020d0:	0001883a 	nop
100020d4:	e037883a 	mov	sp,fp
100020d8:	df000017 	ldw	fp,0(sp)
100020dc:	dec00104 	addi	sp,sp,4
100020e0:	f800283a 	ret

100020e4 <writePalette>:

void writePalette(Palette toWrite) {
100020e4:	defffa04 	addi	sp,sp,-24
100020e8:	dfc00115 	stw	ra,4(sp)
100020ec:	df000015 	stw	fp,0(sp)
100020f0:	d839883a 	mov	fp,sp
100020f4:	e1000215 	stw	r4,8(fp)
100020f8:	e1400315 	stw	r5,12(fp)
100020fc:	e1800415 	stw	r6,16(fp)
10002100:	e1c00515 	stw	r7,20(fp)
	writePaletteHelper(toWrite.paletteId, 0, toWrite.colors[0]);
10002104:	e0800203 	ldbu	r2,8(fp)
10002108:	10803fcc 	andi	r2,r2,255
1000210c:	e0c00317 	ldw	r3,12(fp)
10002110:	180d883a 	mov	r6,r3
10002114:	000b883a 	mov	r5,zero
10002118:	1009883a 	mov	r4,r2
1000211c:	000206c0 	call	1000206c <writePaletteHelper>
	writePaletteHelper(toWrite.paletteId, 1, toWrite.colors[1]);
10002120:	e0800203 	ldbu	r2,8(fp)
10002124:	10803fcc 	andi	r2,r2,255
10002128:	e0c00417 	ldw	r3,16(fp)
1000212c:	180d883a 	mov	r6,r3
10002130:	01400044 	movi	r5,1
10002134:	1009883a 	mov	r4,r2
10002138:	000206c0 	call	1000206c <writePaletteHelper>
	writePaletteHelper(toWrite.paletteId, 2, toWrite.colors[2]);
1000213c:	e0800203 	ldbu	r2,8(fp)
10002140:	10803fcc 	andi	r2,r2,255
10002144:	e0c00517 	ldw	r3,20(fp)
10002148:	180d883a 	mov	r6,r3
1000214c:	01400084 	movi	r5,2
10002150:	1009883a 	mov	r4,r2
10002154:	000206c0 	call	1000206c <writePaletteHelper>
	writePaletteHelper(toWrite.paletteId, 3, toWrite.colors[3]);
10002158:	e0800203 	ldbu	r2,8(fp)
1000215c:	10803fcc 	andi	r2,r2,255
10002160:	e0c00617 	ldw	r3,24(fp)
10002164:	180d883a 	mov	r6,r3
10002168:	014000c4 	movi	r5,3
1000216c:	1009883a 	mov	r4,r2
10002170:	000206c0 	call	1000206c <writePaletteHelper>
}
10002174:	0001883a 	nop
10002178:	e037883a 	mov	sp,fp
1000217c:	dfc00117 	ldw	ra,4(sp)
10002180:	df000017 	ldw	fp,0(sp)
10002184:	dec00604 	addi	sp,sp,24
10002188:	f800283a 	ret

1000218c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000218c:	defffc04 	addi	sp,sp,-16
10002190:	dfc00315 	stw	ra,12(sp)
10002194:	df000215 	stw	fp,8(sp)
10002198:	df000204 	addi	fp,sp,8
1000219c:	2005883a 	mov	r2,r4
100021a0:	2807883a 	mov	r3,r5
100021a4:	e0bfff0d 	sth	r2,-4(fp)
100021a8:	1805883a 	mov	r2,r3
100021ac:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
100021b0:	e0bfff0b 	ldhu	r2,-4(fp)
100021b4:	100b883a 	mov	r5,r2
100021b8:	01000084 	movi	r4,2
100021bc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA, Data);
100021c0:	e0bffe0b 	ldhu	r2,-8(fp)
100021c4:	100b883a 	mov	r5,r2
100021c8:	0009883a 	mov	r4,zero
100021cc:	00011700 	call	10001170 <IO_write>
}
100021d0:	0001883a 	nop
100021d4:	e037883a 	mov	sp,fp
100021d8:	dfc00117 	ldw	ra,4(sp)
100021dc:	df000017 	ldw	fp,0(sp)
100021e0:	dec00204 	addi	sp,sp,8
100021e4:	f800283a 	ret

100021e8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100021e8:	defffd04 	addi	sp,sp,-12
100021ec:	dfc00215 	stw	ra,8(sp)
100021f0:	df000115 	stw	fp,4(sp)
100021f4:	df000104 	addi	fp,sp,4
100021f8:	2005883a 	mov	r2,r4
100021fc:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10002200:	e0bfff0b 	ldhu	r2,-4(fp)
10002204:	100b883a 	mov	r5,r2
10002208:	01000084 	movi	r4,2
1000220c:	00011700 	call	10001170 <IO_write>
	return IO_read(HPI_DATA);
10002210:	0009883a 	mov	r4,zero
10002214:	00011e40 	call	100011e4 <IO_read>
}
10002218:	e037883a 	mov	sp,fp
1000221c:	dfc00117 	ldw	ra,4(sp)
10002220:	df000017 	ldw	fp,0(sp)
10002224:	dec00204 	addi	sp,sp,8
10002228:	f800283a 	ret

1000222c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
1000222c:	defffe04 	addi	sp,sp,-8
10002230:	dfc00115 	stw	ra,4(sp)
10002234:	df000015 	stw	fp,0(sp)
10002238:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
1000223c:	017e9414 	movui	r5,64080
10002240:	01000044 	movi	r4,1
10002244:	00011700 	call	10001170 <IO_write>
	usleep(100000);
10002248:	010000b4 	movhi	r4,2
1000224c:	2121a804 	addi	r4,r4,-31072
10002250:	00101c00 	call	100101c0 <usleep>
	printf("[USB INIT]:reset finished!\n");
10002254:	01040074 	movhi	r4,4097
10002258:	210ab004 	addi	r4,r4,10944
1000225c:	00035980 	call	10003598 <puts>

	usleep(500000);
10002260:	01000234 	movhi	r4,8
10002264:	21284804 	addi	r4,r4,-24288
10002268:	00101c00 	call	100101c0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
1000226c:	01040074 	movhi	r4,4097
10002270:	210ab704 	addi	r4,r4,10972
10002274:	00035980 	call	10003598 <puts>
	IO_read(HPI_MAILBOX);
10002278:	01000044 	movi	r4,1
1000227c:	00011e40 	call	100011e4 <IO_read>
	IO_read(HPI_STATUS);
10002280:	010000c4 	movi	r4,3
10002284:	00011e40 	call	100011e4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10002288:	01005104 	movi	r4,324
1000228c:	00021e80 	call	100021e8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002290:	000b883a 	mov	r5,zero
10002294:	01005104 	movi	r4,324
10002298:	000218c0 	call	1000218c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
1000229c:	01005204 	movi	r4,328
100022a0:	00021e80 	call	100021e8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100022a4:	000b883a 	mov	r5,zero
100022a8:	01005204 	movi	r4,328
100022ac:	000218c0 	call	1000218c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100022b0:	017fffd4 	movui	r5,65535
100022b4:	01302414 	movui	r4,49296
100022b8:	000218c0 	call	1000218c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100022bc:	017fffd4 	movui	r5,65535
100022c0:	01302c14 	movui	r4,49328
100022c4:	000218c0 	call	1000218c <UsbWrite>
}
100022c8:	0001883a 	nop
100022cc:	e037883a 	mov	sp,fp
100022d0:	dfc00117 	ldw	ra,4(sp)
100022d4:	df000017 	ldw	fp,0(sp)
100022d8:	dec00204 	addi	sp,sp,8
100022dc:	f800283a 	ret

100022e0 <UsbSetAddress>:


void UsbSetAddress()
{
100022e0:	defffe04 	addi	sp,sp,-8
100022e4:	dfc00115 	stw	ra,4(sp)
100022e8:	df000015 	stw	fp,0(sp)
100022ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100022f0:	01414004 	movi	r5,1280
100022f4:	01000084 	movi	r4,2
100022f8:	00011700 	call	10001170 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100022fc:	01414304 	movi	r5,1292
10002300:	0009883a 	mov	r4,zero
10002304:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002308:	01400204 	movi	r5,8
1000230c:	0009883a 	mov	r4,zero
10002310:	00011700 	call	10001170 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10002314:	01403404 	movi	r5,208
10002318:	0009883a 	mov	r4,zero
1000231c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002320:	01400044 	movi	r5,1
10002324:	0009883a 	mov	r4,zero
10002328:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000232c:	014004c4 	movi	r5,19
10002330:	0009883a 	mov	r4,zero
10002334:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002338:	01414504 	movi	r5,1300
1000233c:	0009883a 	mov	r4,zero
10002340:	00011700 	call	10001170 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002344:	01414004 	movi	r5,1280
10002348:	0009883a 	mov	r4,zero
1000234c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002350:	01400084 	movi	r5,2
10002354:	0009883a 	mov	r4,zero
10002358:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000235c:	000b883a 	mov	r5,zero
10002360:	0009883a 	mov	r4,zero
10002364:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002368:	000b883a 	mov	r5,zero
1000236c:	0009883a 	mov	r4,zero
10002370:	00011700 	call	10001170 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002374:	000b883a 	mov	r5,zero
10002378:	0009883a 	mov	r4,zero
1000237c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002380:	000b883a 	mov	r5,zero
10002384:	0009883a 	mov	r4,zero
10002388:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0090);//
1000238c:	01402404 	movi	r5,144
10002390:	0009883a 	mov	r4,zero
10002394:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002398:	01401044 	movi	r5,65
1000239c:	0009883a 	mov	r4,zero
100023a0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
100023a4:	014004c4 	movi	r5,19
100023a8:	0009883a 	mov	r4,zero
100023ac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
100023b0:	000b883a 	mov	r5,zero
100023b4:	0009883a 	mov	r4,zero
100023b8:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100023bc:	01414004 	movi	r5,1280
100023c0:	01006c04 	movi	r4,432
100023c4:	000218c0 	call	1000218c <UsbWrite>
}
100023c8:	0001883a 	nop
100023cc:	e037883a 	mov	sp,fp
100023d0:	dfc00117 	ldw	ra,4(sp)
100023d4:	df000017 	ldw	fp,0(sp)
100023d8:	dec00204 	addi	sp,sp,8
100023dc:	f800283a 	ret

100023e0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100023e0:	defffe04 	addi	sp,sp,-8
100023e4:	dfc00115 	stw	ra,4(sp)
100023e8:	df000015 	stw	fp,0(sp)
100023ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100023f0:	01414004 	movi	r5,1280
100023f4:	01000084 	movi	r4,2
100023f8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
100023fc:	01414304 	movi	r5,1292
10002400:	0009883a 	mov	r4,zero
10002404:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002408:	01400204 	movi	r5,8
1000240c:	0009883a 	mov	r4,zero
10002410:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002414:	0140b404 	movi	r5,720
10002418:	0009883a 	mov	r4,zero
1000241c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002420:	01400044 	movi	r5,1
10002424:	0009883a 	mov	r4,zero
10002428:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000242c:	014004c4 	movi	r5,19
10002430:	0009883a 	mov	r4,zero
10002434:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002438:	01414504 	movi	r5,1300
1000243c:	0009883a 	mov	r4,zero
10002440:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002444:	0141a004 	movi	r5,1664
10002448:	0009883a 	mov	r4,zero
1000244c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002450:	01404004 	movi	r5,256
10002454:	0009883a 	mov	r4,zero
10002458:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000245c:	000b883a 	mov	r5,zero
10002460:	0009883a 	mov	r4,zero
10002464:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002468:	01400204 	movi	r5,8
1000246c:	0009883a 	mov	r4,zero
10002470:	00011700 	call	10001170 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002474:	01414b04 	movi	r5,1324
10002478:	0009883a 	mov	r4,zero
1000247c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002480:	01400204 	movi	r5,8
10002484:	0009883a 	mov	r4,zero
10002488:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//
1000248c:	0140a404 	movi	r5,656
10002490:	0009883a 	mov	r4,zero
10002494:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002498:	01401044 	movi	r5,65
1000249c:	0009883a 	mov	r4,zero
100024a0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
100024a4:	014004c4 	movi	r5,19
100024a8:	0009883a 	mov	r4,zero
100024ac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0520);
100024b0:	01414804 	movi	r5,1312
100024b4:	0009883a 	mov	r4,zero
100024b8:	00011700 	call	10001170 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100024bc:	000b883a 	mov	r5,zero
100024c0:	0009883a 	mov	r4,zero
100024c4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100024c8:	000b883a 	mov	r5,zero
100024cc:	0009883a 	mov	r4,zero
100024d0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100024d4:	01408404 	movi	r5,528
100024d8:	0009883a 	mov	r4,zero
100024dc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);
100024e0:	01401044 	movi	r5,65
100024e4:	0009883a 	mov	r4,zero
100024e8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
100024ec:	014004c4 	movi	r5,19
100024f0:	0009883a 	mov	r4,zero
100024f4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
100024f8:	000b883a 	mov	r5,zero
100024fc:	0009883a 	mov	r4,zero
10002500:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002504:	01414004 	movi	r5,1280
10002508:	01006c04 	movi	r4,432
1000250c:	000218c0 	call	1000218c <UsbWrite>
}
10002510:	0001883a 	nop
10002514:	e037883a 	mov	sp,fp
10002518:	dfc00117 	ldw	ra,4(sp)
1000251c:	df000017 	ldw	fp,0(sp)
10002520:	dec00204 	addi	sp,sp,8
10002524:	f800283a 	ret

10002528 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10002528:	defffe04 	addi	sp,sp,-8
1000252c:	dfc00115 	stw	ra,4(sp)
10002530:	df000015 	stw	fp,0(sp)
10002534:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002538:	01414004 	movi	r5,1280
1000253c:	01000084 	movi	r4,2
10002540:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002544:	01414304 	movi	r5,1292
10002548:	0009883a 	mov	r4,zero
1000254c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002550:	01400204 	movi	r5,8
10002554:	0009883a 	mov	r4,zero
10002558:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000255c:	0140b404 	movi	r5,720
10002560:	0009883a 	mov	r4,zero
10002564:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002568:	01400044 	movi	r5,1
1000256c:	0009883a 	mov	r4,zero
10002570:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002574:	014004c4 	movi	r5,19
10002578:	0009883a 	mov	r4,zero
1000257c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002580:	01414504 	movi	r5,1300
10002584:	0009883a 	mov	r4,zero
10002588:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000258c:	0141a004 	movi	r5,1664
10002590:	0009883a 	mov	r4,zero
10002594:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002598:	01404004 	movi	r5,256
1000259c:	0009883a 	mov	r4,zero
100025a0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100025a4:	000b883a 	mov	r5,zero
100025a8:	0009883a 	mov	r4,zero
100025ac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
100025b0:	01400484 	movi	r5,18
100025b4:	0009883a 	mov	r4,zero
100025b8:	00011700 	call	10001170 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100025bc:	01415104 	movi	r5,1348
100025c0:	0009883a 	mov	r4,zero
100025c4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100025c8:	01400204 	movi	r5,8
100025cc:	0009883a 	mov	r4,zero
100025d0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100025d4:	0140a404 	movi	r5,656
100025d8:	0009883a 	mov	r4,zero
100025dc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100025e0:	01401044 	movi	r5,65
100025e4:	0009883a 	mov	r4,zero
100025e8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100025ec:	014004c4 	movi	r5,19
100025f0:	0009883a 	mov	r4,zero
100025f4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100025f8:	01414804 	movi	r5,1312
100025fc:	0009883a 	mov	r4,zero
10002600:	00011700 	call	10001170 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002604:	01415304 	movi	r5,1356
10002608:	0009883a 	mov	r4,zero
1000260c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002610:	01400204 	movi	r5,8
10002614:	0009883a 	mov	r4,zero
10002618:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000261c:	0140a404 	movi	r5,656
10002620:	0009883a 	mov	r4,zero
10002624:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10002628:	01400044 	movi	r5,1
1000262c:	0009883a 	mov	r4,zero
10002630:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002634:	014004c4 	movi	r5,19
10002638:	0009883a 	mov	r4,zero
1000263c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002640:	01414b04 	movi	r5,1324
10002644:	0009883a 	mov	r4,zero
10002648:	00011700 	call	10001170 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
1000264c:	01415504 	movi	r5,1364
10002650:	0009883a 	mov	r4,zero
10002654:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10002658:	01400084 	movi	r5,2
1000265c:	0009883a 	mov	r4,zero
10002660:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002664:	0140a404 	movi	r5,656
10002668:	0009883a 	mov	r4,zero
1000266c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002670:	01401044 	movi	r5,65
10002674:	0009883a 	mov	r4,zero
10002678:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000267c:	014004c4 	movi	r5,19
10002680:	0009883a 	mov	r4,zero
10002684:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002688:	01414e04 	movi	r5,1336
1000268c:	0009883a 	mov	r4,zero
10002690:	00011700 	call	10001170 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002694:	000b883a 	mov	r5,zero
10002698:	0009883a 	mov	r4,zero
1000269c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100026a0:	000b883a 	mov	r5,zero
100026a4:	0009883a 	mov	r4,zero
100026a8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100026ac:	01408404 	movi	r5,528
100026b0:	0009883a 	mov	r4,zero
100026b4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100026b8:	01401044 	movi	r5,65
100026bc:	0009883a 	mov	r4,zero
100026c0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100026c4:	014004c4 	movi	r5,19
100026c8:	0009883a 	mov	r4,zero
100026cc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100026d0:	000b883a 	mov	r5,zero
100026d4:	0009883a 	mov	r4,zero
100026d8:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100026dc:	01414004 	movi	r5,1280
100026e0:	01006c04 	movi	r4,432
100026e4:	000218c0 	call	1000218c <UsbWrite>
}
100026e8:	0001883a 	nop
100026ec:	e037883a 	mov	sp,fp
100026f0:	dfc00117 	ldw	ra,4(sp)
100026f4:	df000017 	ldw	fp,0(sp)
100026f8:	dec00204 	addi	sp,sp,8
100026fc:	f800283a 	ret

10002700 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10002700:	defffe04 	addi	sp,sp,-8
10002704:	dfc00115 	stw	ra,4(sp)
10002708:	df000015 	stw	fp,0(sp)
1000270c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002710:	01414004 	movi	r5,1280
10002714:	01000084 	movi	r4,2
10002718:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000271c:	01414304 	movi	r5,1292
10002720:	0009883a 	mov	r4,zero
10002724:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002728:	01400204 	movi	r5,8
1000272c:	0009883a 	mov	r4,zero
10002730:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002734:	0140b404 	movi	r5,720
10002738:	0009883a 	mov	r4,zero
1000273c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002740:	01400044 	movi	r5,1
10002744:	0009883a 	mov	r4,zero
10002748:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000274c:	014004c4 	movi	r5,19
10002750:	0009883a 	mov	r4,zero
10002754:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002758:	01414504 	movi	r5,1300
1000275c:	0009883a 	mov	r4,zero
10002760:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002764:	0141a004 	movi	r5,1664
10002768:	0009883a 	mov	r4,zero
1000276c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002770:	01408004 	movi	r5,512
10002774:	0009883a 	mov	r4,zero
10002778:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000277c:	000b883a 	mov	r5,zero
10002780:	0009883a 	mov	r4,zero
10002784:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002788:	01400244 	movi	r5,9
1000278c:	0009883a 	mov	r4,zero
10002790:	00011700 	call	10001170 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002794:	01415104 	movi	r5,1348
10002798:	0009883a 	mov	r4,zero
1000279c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100027a0:	01400204 	movi	r5,8
100027a4:	0009883a 	mov	r4,zero
100027a8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100027ac:	0140a404 	movi	r5,656
100027b0:	0009883a 	mov	r4,zero
100027b4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100027b8:	01401044 	movi	r5,65
100027bc:	0009883a 	mov	r4,zero
100027c0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100027c4:	014004c4 	movi	r5,19
100027c8:	0009883a 	mov	r4,zero
100027cc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100027d0:	01414804 	movi	r5,1312
100027d4:	0009883a 	mov	r4,zero
100027d8:	00011700 	call	10001170 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100027dc:	01415304 	movi	r5,1356
100027e0:	0009883a 	mov	r4,zero
100027e4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100027e8:	01400044 	movi	r5,1
100027ec:	0009883a 	mov	r4,zero
100027f0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100027f4:	0140a404 	movi	r5,656
100027f8:	0009883a 	mov	r4,zero
100027fc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002800:	01400044 	movi	r5,1
10002804:	0009883a 	mov	r4,zero
10002808:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000280c:	014004c4 	movi	r5,19
10002810:	0009883a 	mov	r4,zero
10002814:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002818:	01414b04 	movi	r5,1324
1000281c:	0009883a 	mov	r4,zero
10002820:	00011700 	call	10001170 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002824:	000b883a 	mov	r5,zero
10002828:	0009883a 	mov	r4,zero
1000282c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002830:	000b883a 	mov	r5,zero
10002834:	0009883a 	mov	r4,zero
10002838:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000283c:	01408404 	movi	r5,528
10002840:	0009883a 	mov	r4,zero
10002844:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002848:	01401044 	movi	r5,65
1000284c:	0009883a 	mov	r4,zero
10002850:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002854:	014004c4 	movi	r5,19
10002858:	0009883a 	mov	r4,zero
1000285c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002860:	000b883a 	mov	r5,zero
10002864:	0009883a 	mov	r4,zero
10002868:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000286c:	01414004 	movi	r5,1280
10002870:	01006c04 	movi	r4,432
10002874:	000218c0 	call	1000218c <UsbWrite>
}
10002878:	0001883a 	nop
1000287c:	e037883a 	mov	sp,fp
10002880:	dfc00117 	ldw	ra,4(sp)
10002884:	df000017 	ldw	fp,0(sp)
10002888:	dec00204 	addi	sp,sp,8
1000288c:	f800283a 	ret

10002890 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002890:	defffe04 	addi	sp,sp,-8
10002894:	dfc00115 	stw	ra,4(sp)
10002898:	df000015 	stw	fp,0(sp)
1000289c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100028a0:	01414004 	movi	r5,1280
100028a4:	01000084 	movi	r4,2
100028a8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
100028ac:	01414304 	movi	r5,1292
100028b0:	0009883a 	mov	r4,zero
100028b4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100028b8:	01400204 	movi	r5,8
100028bc:	0009883a 	mov	r4,zero
100028c0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100028c4:	0140b404 	movi	r5,720
100028c8:	0009883a 	mov	r4,zero
100028cc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
100028d0:	01400044 	movi	r5,1
100028d4:	0009883a 	mov	r4,zero
100028d8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
100028dc:	014004c4 	movi	r5,19
100028e0:	0009883a 	mov	r4,zero
100028e4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
100028e8:	01414504 	movi	r5,1300
100028ec:	0009883a 	mov	r4,zero
100028f0:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100028f4:	0141a004 	movi	r5,1664
100028f8:	0009883a 	mov	r4,zero
100028fc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002900:	01408004 	movi	r5,512
10002904:	0009883a 	mov	r4,zero
10002908:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000290c:	000b883a 	mov	r5,zero
10002910:	0009883a 	mov	r4,zero
10002914:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10002918:	01403fc4 	movi	r5,255
1000291c:	0009883a 	mov	r4,zero
10002920:	00011700 	call	10001170 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10002924:	01415704 	movi	r5,1372
10002928:	0009883a 	mov	r4,zero
1000292c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002930:	01400204 	movi	r5,8
10002934:	0009883a 	mov	r4,zero
10002938:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000293c:	0140a404 	movi	r5,656
10002940:	0009883a 	mov	r4,zero
10002944:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002948:	01401044 	movi	r5,65
1000294c:	0009883a 	mov	r4,zero
10002950:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002954:	014004c4 	movi	r5,19
10002958:	0009883a 	mov	r4,zero
1000295c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002960:	01414804 	movi	r5,1312
10002964:	0009883a 	mov	r4,zero
10002968:	00011700 	call	10001170 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
1000296c:	01415904 	movi	r5,1380
10002970:	0009883a 	mov	r4,zero
10002974:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002978:	01400204 	movi	r5,8
1000297c:	0009883a 	mov	r4,zero
10002980:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002984:	0140a404 	movi	r5,656
10002988:	0009883a 	mov	r4,zero
1000298c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002990:	01400044 	movi	r5,1
10002994:	0009883a 	mov	r4,zero
10002998:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000299c:	014004c4 	movi	r5,19
100029a0:	0009883a 	mov	r4,zero
100029a4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100029a8:	01414b04 	movi	r5,1324
100029ac:	0009883a 	mov	r4,zero
100029b0:	00011700 	call	10001170 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100029b4:	01415b04 	movi	r5,1388
100029b8:	0009883a 	mov	r4,zero
100029bc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100029c0:	01400204 	movi	r5,8
100029c4:	0009883a 	mov	r4,zero
100029c8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100029cc:	0140a404 	movi	r5,656
100029d0:	0009883a 	mov	r4,zero
100029d4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100029d8:	01401044 	movi	r5,65
100029dc:	0009883a 	mov	r4,zero
100029e0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100029e4:	014004c4 	movi	r5,19
100029e8:	0009883a 	mov	r4,zero
100029ec:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100029f0:	01414e04 	movi	r5,1336
100029f4:	0009883a 	mov	r4,zero
100029f8:	00011700 	call	10001170 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100029fc:	01415d04 	movi	r5,1396
10002a00:	0009883a 	mov	r4,zero
10002a04:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002a08:	01400204 	movi	r5,8
10002a0c:	0009883a 	mov	r4,zero
10002a10:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002a14:	0140a404 	movi	r5,656
10002a18:	0009883a 	mov	r4,zero
10002a1c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002a20:	01400044 	movi	r5,1
10002a24:	0009883a 	mov	r4,zero
10002a28:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002a2c:	014004c4 	movi	r5,19
10002a30:	0009883a 	mov	r4,zero
10002a34:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002a38:	01415104 	movi	r5,1348
10002a3c:	0009883a 	mov	r4,zero
10002a40:	00011700 	call	10001170 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10002a44:	01415f04 	movi	r5,1404
10002a48:	0009883a 	mov	r4,zero
10002a4c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10002a50:	01400084 	movi	r5,2
10002a54:	0009883a 	mov	r4,zero
10002a58:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002a5c:	0140a404 	movi	r5,656
10002a60:	0009883a 	mov	r4,zero
10002a64:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002a68:	01401044 	movi	r5,65
10002a6c:	0009883a 	mov	r4,zero
10002a70:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002a74:	014004c4 	movi	r5,19
10002a78:	0009883a 	mov	r4,zero
10002a7c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002a80:	01415404 	movi	r5,1360
10002a84:	0009883a 	mov	r4,zero
10002a88:	00011700 	call	10001170 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002a8c:	000b883a 	mov	r5,zero
10002a90:	0009883a 	mov	r4,zero
10002a94:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002a98:	000b883a 	mov	r5,zero
10002a9c:	0009883a 	mov	r4,zero
10002aa0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002aa4:	01408404 	movi	r5,528
10002aa8:	0009883a 	mov	r4,zero
10002aac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002ab0:	01401044 	movi	r5,65
10002ab4:	0009883a 	mov	r4,zero
10002ab8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002abc:	014004c4 	movi	r5,19
10002ac0:	0009883a 	mov	r4,zero
10002ac4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002ac8:	000b883a 	mov	r5,zero
10002acc:	0009883a 	mov	r4,zero
10002ad0:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002ad4:	01414004 	movi	r5,1280
10002ad8:	01006c04 	movi	r4,432
10002adc:	000218c0 	call	1000218c <UsbWrite>
}
10002ae0:	0001883a 	nop
10002ae4:	e037883a 	mov	sp,fp
10002ae8:	dfc00117 	ldw	ra,4(sp)
10002aec:	df000017 	ldw	fp,0(sp)
10002af0:	dec00204 	addi	sp,sp,8
10002af4:	f800283a 	ret

10002af8 <UsbSetConfig>:

void UsbSetConfig()
{
10002af8:	defffe04 	addi	sp,sp,-8
10002afc:	dfc00115 	stw	ra,4(sp)
10002b00:	df000015 	stw	fp,0(sp)
10002b04:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002b08:	01414004 	movi	r5,1280
10002b0c:	01000084 	movi	r4,2
10002b10:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002b14:	01414304 	movi	r5,1292
10002b18:	0009883a 	mov	r4,zero
10002b1c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b20:	01400204 	movi	r5,8
10002b24:	0009883a 	mov	r4,zero
10002b28:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002b2c:	0140b404 	movi	r5,720
10002b30:	0009883a 	mov	r4,zero
10002b34:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b38:	01400044 	movi	r5,1
10002b3c:	0009883a 	mov	r4,zero
10002b40:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002b44:	014004c4 	movi	r5,19
10002b48:	0009883a 	mov	r4,zero
10002b4c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002b50:	01414504 	movi	r5,1300
10002b54:	0009883a 	mov	r4,zero
10002b58:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10002b5c:	01424004 	movi	r5,2304
10002b60:	0009883a 	mov	r4,zero
10002b64:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10002b68:	01400044 	movi	r5,1
10002b6c:	0009883a 	mov	r4,zero
10002b70:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002b74:	000b883a 	mov	r5,zero
10002b78:	0009883a 	mov	r4,zero
10002b7c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002b80:	000b883a 	mov	r5,zero
10002b84:	0009883a 	mov	r4,zero
10002b88:	00011700 	call	10001170 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002b8c:	000b883a 	mov	r5,zero
10002b90:	0009883a 	mov	r4,zero
10002b94:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002b98:	000b883a 	mov	r5,zero
10002b9c:	0009883a 	mov	r4,zero
10002ba0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002ba4:	0140a404 	movi	r5,656
10002ba8:	0009883a 	mov	r4,zero
10002bac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002bb0:	01401044 	movi	r5,65
10002bb4:	0009883a 	mov	r4,zero
10002bb8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002bbc:	014004c4 	movi	r5,19
10002bc0:	0009883a 	mov	r4,zero
10002bc4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002bc8:	000b883a 	mov	r5,zero
10002bcc:	0009883a 	mov	r4,zero
10002bd0:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002bd4:	01414004 	movi	r5,1280
10002bd8:	01006c04 	movi	r4,432
10002bdc:	000218c0 	call	1000218c <UsbWrite>

}
10002be0:	0001883a 	nop
10002be4:	e037883a 	mov	sp,fp
10002be8:	dfc00117 	ldw	ra,4(sp)
10002bec:	df000017 	ldw	fp,0(sp)
10002bf0:	dec00204 	addi	sp,sp,8
10002bf4:	f800283a 	ret

10002bf8 <UsbClassRequest>:

void UsbClassRequest()
{
10002bf8:	defffe04 	addi	sp,sp,-8
10002bfc:	dfc00115 	stw	ra,4(sp)
10002c00:	df000015 	stw	fp,0(sp)
10002c04:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002c08:	01414004 	movi	r5,1280
10002c0c:	01000084 	movi	r4,2
10002c10:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002c14:	01414304 	movi	r5,1292
10002c18:	0009883a 	mov	r4,zero
10002c1c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002c20:	01400204 	movi	r5,8
10002c24:	0009883a 	mov	r4,zero
10002c28:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002c2c:	0140b404 	movi	r5,720
10002c30:	0009883a 	mov	r4,zero
10002c34:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002c38:	01400044 	movi	r5,1
10002c3c:	0009883a 	mov	r4,zero
10002c40:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002c44:	014004c4 	movi	r5,19
10002c48:	0009883a 	mov	r4,zero
10002c4c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002c50:	01414504 	movi	r5,1300
10002c54:	0009883a 	mov	r4,zero
10002c58:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10002c5c:	01428844 	movi	r5,2593
10002c60:	0009883a 	mov	r4,zero
10002c64:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10002c68:	000b883a 	mov	r5,zero
10002c6c:	0009883a 	mov	r4,zero
10002c70:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002c74:	000b883a 	mov	r5,zero
10002c78:	0009883a 	mov	r4,zero
10002c7c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002c80:	000b883a 	mov	r5,zero
10002c84:	0009883a 	mov	r4,zero
10002c88:	00011700 	call	10001170 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002c8c:	000b883a 	mov	r5,zero
10002c90:	0009883a 	mov	r4,zero
10002c94:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002c98:	000b883a 	mov	r5,zero
10002c9c:	0009883a 	mov	r4,zero
10002ca0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002ca4:	0140a404 	movi	r5,656
10002ca8:	0009883a 	mov	r4,zero
10002cac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002cb0:	01401044 	movi	r5,65
10002cb4:	0009883a 	mov	r4,zero
10002cb8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002cbc:	014004c4 	movi	r5,19
10002cc0:	0009883a 	mov	r4,zero
10002cc4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002cc8:	000b883a 	mov	r5,zero
10002ccc:	0009883a 	mov	r4,zero
10002cd0:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002cd4:	01414004 	movi	r5,1280
10002cd8:	01006c04 	movi	r4,432
10002cdc:	000218c0 	call	1000218c <UsbWrite>
}
10002ce0:	0001883a 	nop
10002ce4:	e037883a 	mov	sp,fp
10002ce8:	dfc00117 	ldw	ra,4(sp)
10002cec:	df000017 	ldw	fp,0(sp)
10002cf0:	dec00204 	addi	sp,sp,8
10002cf4:	f800283a 	ret

10002cf8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002cf8:	defffe04 	addi	sp,sp,-8
10002cfc:	dfc00115 	stw	ra,4(sp)
10002d00:	df000015 	stw	fp,0(sp)
10002d04:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002d08:	01414004 	movi	r5,1280
10002d0c:	01000084 	movi	r4,2
10002d10:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002d14:	01414304 	movi	r5,1292
10002d18:	0009883a 	mov	r4,zero
10002d1c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002d20:	01400204 	movi	r5,8
10002d24:	0009883a 	mov	r4,zero
10002d28:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002d2c:	0140b404 	movi	r5,720
10002d30:	0009883a 	mov	r4,zero
10002d34:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002d38:	01400044 	movi	r5,1
10002d3c:	0009883a 	mov	r4,zero
10002d40:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002d44:	014004c4 	movi	r5,19
10002d48:	0009883a 	mov	r4,zero
10002d4c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002d50:	01414504 	movi	r5,1300
10002d54:	0009883a 	mov	r4,zero
10002d58:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002d5c:	0141a044 	movi	r5,1665
10002d60:	0009883a 	mov	r4,zero
10002d64:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10002d68:	01484004 	movi	r5,8448
10002d6c:	0009883a 	mov	r4,zero
10002d70:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002d74:	000b883a 	mov	r5,zero
10002d78:	0009883a 	mov	r4,zero
10002d7c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002d80:	01401ec4 	movi	r5,123
10002d84:	0009883a 	mov	r4,zero
10002d88:	00011700 	call	10001170 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002d8c:	01415104 	movi	r5,1348
10002d90:	0009883a 	mov	r4,zero
10002d94:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002d98:	01400204 	movi	r5,8
10002d9c:	0009883a 	mov	r4,zero
10002da0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002da4:	0140a404 	movi	r5,656
10002da8:	0009883a 	mov	r4,zero
10002dac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002db0:	01401044 	movi	r5,65
10002db4:	0009883a 	mov	r4,zero
10002db8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002dbc:	014004c4 	movi	r5,19
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002dc8:	01414804 	movi	r5,1312
10002dcc:	0009883a 	mov	r4,zero
10002dd0:	00011700 	call	10001170 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002dd4:	000b883a 	mov	r5,zero
10002dd8:	0009883a 	mov	r4,zero
10002ddc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002de0:	000b883a 	mov	r5,zero
10002de4:	0009883a 	mov	r4,zero
10002de8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002dec:	01408404 	movi	r5,528
10002df0:	0009883a 	mov	r4,zero
10002df4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002df8:	01401044 	movi	r5,65
10002dfc:	0009883a 	mov	r4,zero
10002e00:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002e04:	014004c4 	movi	r5,19
10002e08:	0009883a 	mov	r4,zero
10002e0c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002e10:	000b883a 	mov	r5,zero
10002e14:	0009883a 	mov	r4,zero
10002e18:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e1c:	01414004 	movi	r5,1280
10002e20:	01006c04 	movi	r4,432
10002e24:	000218c0 	call	1000218c <UsbWrite>

}
10002e28:	0001883a 	nop
10002e2c:	e037883a 	mov	sp,fp
10002e30:	dfc00117 	ldw	ra,4(sp)
10002e34:	df000017 	ldw	fp,0(sp)
10002e38:	dec00204 	addi	sp,sp,8
10002e3c:	f800283a 	ret

10002e40 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10002e40:	defffe04 	addi	sp,sp,-8
10002e44:	dfc00115 	stw	ra,4(sp)
10002e48:	df000015 	stw	fp,0(sp)
10002e4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002e50:	01414004 	movi	r5,1280
10002e54:	01000084 	movi	r4,2
10002e58:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002e5c:	01414304 	movi	r5,1292
10002e60:	0009883a 	mov	r4,zero
10002e64:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002e68:	01400204 	movi	r5,8
10002e6c:	0009883a 	mov	r4,zero
10002e70:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002e74:	0140b404 	movi	r5,720
10002e78:	0009883a 	mov	r4,zero
10002e7c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002e80:	01400044 	movi	r5,1
10002e84:	0009883a 	mov	r4,zero
10002e88:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002e8c:	014004c4 	movi	r5,19
10002e90:	0009883a 	mov	r4,zero
10002e94:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002e98:	01414504 	movi	r5,1300
10002e9c:	0009883a 	mov	r4,zero
10002ea0:	00011700 	call	10001170 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002ea4:	0141a044 	movi	r5,1665
10002ea8:	0009883a 	mov	r4,zero
10002eac:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002eb0:	01488004 	movi	r5,8704
10002eb4:	0009883a 	mov	r4,zero
10002eb8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002ebc:	000b883a 	mov	r5,zero
10002ec0:	0009883a 	mov	r4,zero
10002ec4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002ec8:	01401ec4 	movi	r5,123
10002ecc:	0009883a 	mov	r4,zero
10002ed0:	00011700 	call	10001170 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002ed4:	01416004 	movi	r5,1408
10002ed8:	0009883a 	mov	r4,zero
10002edc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002ee0:	01400204 	movi	r5,8
10002ee4:	0009883a 	mov	r4,zero
10002ee8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002eec:	0140a404 	movi	r5,656
10002ef0:	0009883a 	mov	r4,zero
10002ef4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002ef8:	01401044 	movi	r5,65
10002efc:	0009883a 	mov	r4,zero
10002f00:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002f04:	014004c4 	movi	r5,19
10002f08:	0009883a 	mov	r4,zero
10002f0c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002f10:	01414804 	movi	r5,1312
10002f14:	0009883a 	mov	r4,zero
10002f18:	00011700 	call	10001170 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002f1c:	01416204 	movi	r5,1416
10002f20:	0009883a 	mov	r4,zero
10002f24:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002f28:	01400204 	movi	r5,8
10002f2c:	0009883a 	mov	r4,zero
10002f30:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002f34:	0140a404 	movi	r5,656
10002f38:	0009883a 	mov	r4,zero
10002f3c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002f40:	01400044 	movi	r5,1
10002f44:	0009883a 	mov	r4,zero
10002f48:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002f4c:	014004c4 	movi	r5,19
10002f50:	0009883a 	mov	r4,zero
10002f54:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002f58:	01414b04 	movi	r5,1324
10002f5c:	0009883a 	mov	r4,zero
10002f60:	00011700 	call	10001170 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002f64:	01416404 	movi	r5,1424
10002f68:	0009883a 	mov	r4,zero
10002f6c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002f70:	01400204 	movi	r5,8
10002f74:	0009883a 	mov	r4,zero
10002f78:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002f7c:	0140a404 	movi	r5,656
10002f80:	0009883a 	mov	r4,zero
10002f84:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002f88:	01401044 	movi	r5,65
10002f8c:	0009883a 	mov	r4,zero
10002f90:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002f94:	014004c4 	movi	r5,19
10002f98:	0009883a 	mov	r4,zero
10002f9c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002fa0:	01414e04 	movi	r5,1336
10002fa4:	0009883a 	mov	r4,zero
10002fa8:	00011700 	call	10001170 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002fac:	01416604 	movi	r5,1432
10002fb0:	0009883a 	mov	r4,zero
10002fb4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002fb8:	01400204 	movi	r5,8
10002fbc:	0009883a 	mov	r4,zero
10002fc0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002fc4:	0140a404 	movi	r5,656
10002fc8:	0009883a 	mov	r4,zero
10002fcc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002fd0:	01400044 	movi	r5,1
10002fd4:	0009883a 	mov	r4,zero
10002fd8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002fdc:	014004c4 	movi	r5,19
10002fe0:	0009883a 	mov	r4,zero
10002fe4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002fe8:	01415104 	movi	r5,1348
10002fec:	0009883a 	mov	r4,zero
10002ff0:	00011700 	call	10001170 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002ff4:	01416804 	movi	r5,1440
10002ff8:	0009883a 	mov	r4,zero
10002ffc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003000:	01400204 	movi	r5,8
10003004:	0009883a 	mov	r4,zero
10003008:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000300c:	0140a404 	movi	r5,656
10003010:	0009883a 	mov	r4,zero
10003014:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003018:	01401044 	movi	r5,65
1000301c:	0009883a 	mov	r4,zero
10003020:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003024:	014004c4 	movi	r5,19
10003028:	0009883a 	mov	r4,zero
1000302c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003030:	01415404 	movi	r5,1360
10003034:	0009883a 	mov	r4,zero
10003038:	00011700 	call	10001170 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
1000303c:	01416a04 	movi	r5,1448
10003040:	0009883a 	mov	r4,zero
10003044:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003048:	01400204 	movi	r5,8
1000304c:	0009883a 	mov	r4,zero
10003050:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003054:	0140a404 	movi	r5,656
10003058:	0009883a 	mov	r4,zero
1000305c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003060:	01400044 	movi	r5,1
10003064:	0009883a 	mov	r4,zero
10003068:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000306c:	014004c4 	movi	r5,19
10003070:	0009883a 	mov	r4,zero
10003074:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10003078:	01415704 	movi	r5,1372
1000307c:	0009883a 	mov	r4,zero
10003080:	00011700 	call	10001170 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003084:	01416c04 	movi	r5,1456
10003088:	0009883a 	mov	r4,zero
1000308c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003090:	01400204 	movi	r5,8
10003094:	0009883a 	mov	r4,zero
10003098:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
1000309c:	0140a404 	movi	r5,656
100030a0:	0009883a 	mov	r4,zero
100030a4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100030a8:	01401044 	movi	r5,65
100030ac:	0009883a 	mov	r4,zero
100030b0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100030b4:	014004c4 	movi	r5,19
100030b8:	0009883a 	mov	r4,zero
100030bc:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100030c0:	01415a04 	movi	r5,1384
100030c4:	0009883a 	mov	r4,zero
100030c8:	00011700 	call	10001170 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
100030cc:	01416e04 	movi	r5,1464
100030d0:	0009883a 	mov	r4,zero
100030d4:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
100030d8:	014000c4 	movi	r5,3
100030dc:	0009883a 	mov	r4,zero
100030e0:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100030e4:	0140a404 	movi	r5,656
100030e8:	0009883a 	mov	r4,zero
100030ec:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100030f0:	01400044 	movi	r5,1
100030f4:	0009883a 	mov	r4,zero
100030f8:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100030fc:	014004c4 	movi	r5,19
10003100:	0009883a 	mov	r4,zero
10003104:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10003108:	01415d04 	movi	r5,1396
1000310c:	0009883a 	mov	r4,zero
10003110:	00011700 	call	10001170 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003114:	000b883a 	mov	r5,zero
10003118:	0009883a 	mov	r4,zero
1000311c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003120:	000b883a 	mov	r5,zero
10003124:	0009883a 	mov	r4,zero
10003128:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
1000312c:	01408404 	movi	r5,528
10003130:	0009883a 	mov	r4,zero
10003134:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003138:	01401044 	movi	r5,65
1000313c:	0009883a 	mov	r4,zero
10003140:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003144:	014004c4 	movi	r5,19
10003148:	0009883a 	mov	r4,zero
1000314c:	00011700 	call	10001170 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003150:	000b883a 	mov	r5,zero
10003154:	0009883a 	mov	r4,zero
10003158:	00011700 	call	10001170 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000315c:	01414004 	movi	r5,1280
10003160:	01006c04 	movi	r4,432
10003164:	000218c0 	call	1000218c <UsbWrite>

}
10003168:	0001883a 	nop
1000316c:	e037883a 	mov	sp,fp
10003170:	dfc00117 	ldw	ra,4(sp)
10003174:	df000017 	ldw	fp,0(sp)
10003178:	dec00204 	addi	sp,sp,8
1000317c:	f800283a 	ret

10003180 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10003180:	defffd04 	addi	sp,sp,-12
10003184:	dfc00215 	stw	ra,8(sp)
10003188:	df000115 	stw	fp,4(sp)
1000318c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10003190:	01005104 	movi	r4,324
10003194:	00021e80 	call	100021e8 <UsbRead>
10003198:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000319c:	000b883a 	mov	r5,zero
100031a0:	01005104 	movi	r4,324
100031a4:	000218c0 	call	1000218c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100031a8:	00000d06 	br	100031e0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100031ac:	e0bfff8b 	ldhu	r2,-2(fp)
100031b0:	10000526 	beq	r2,zero,100031c8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100031b4:	e0bfff8b 	ldhu	r2,-2(fp)
100031b8:	100b883a 	mov	r5,r2
100031bc:	01040074 	movhi	r4,4097
100031c0:	210ac004 	addi	r4,r4,11008
100031c4:	00034940 	call	10003494 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100031c8:	01005104 	movi	r4,324
100031cc:	00021e80 	call	100021e8 <UsbRead>
100031d0:	e0bfff8d 	sth	r2,-2(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100031d4:	000b883a 	mov	r5,zero
100031d8:	01005104 	movi	r4,324
100031dc:	000218c0 	call	1000218c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100031e0:	e0bfff8b 	ldhu	r2,-2(fp)
100031e4:	10840018 	cmpnei	r2,r2,4096
100031e8:	103ff01e 	bne	r2,zero,100031ac <UsbWaitTDListDone+0x2c>
	}

	return usb_ctl_val;
100031ec:	e0bfff8b 	ldhu	r2,-2(fp)
}
100031f0:	e037883a 	mov	sp,fp
100031f4:	dfc00117 	ldw	ra,4(sp)
100031f8:	df000017 	ldw	fp,0(sp)
100031fc:	dec00204 	addi	sp,sp,8
10003200:	f800283a 	ret

10003204 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10003204:	defffd04 	addi	sp,sp,-12
10003208:	dfc00215 	stw	ra,8(sp)
1000320c:	df000115 	stw	fp,4(sp)
10003210:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10003214:	010000c4 	movi	r4,3
10003218:	00011e40 	call	100011e4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
1000321c:	01005104 	movi	r4,324
10003220:	00021e80 	call	100021e8 <UsbRead>
10003224:	10bfffcc 	andi	r2,r2,65535
10003228:	10840018 	cmpnei	r2,r2,4096
1000322c:	1000091e 	bne	r2,zero,10003254 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003230:	000b883a 	mov	r5,zero
10003234:	01005104 	movi	r4,324
10003238:	000218c0 	call	1000218c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000323c:	0001883a 	nop
10003240:	010000c4 	movi	r4,3
10003244:	00011e40 	call	100011e4 <IO_read>
10003248:	10bfffcc 	andi	r2,r2,65535
1000324c:	1080040c 	andi	r2,r2,16
10003250:	103ffb26 	beq	r2,zero,10003240 <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003254:	01414204 	movi	r5,1288
10003258:	01000084 	movi	r4,2
1000325c:	00011700 	call	10001170 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003260:	0009883a 	mov	r4,zero
10003264:	00011e40 	call	100011e4 <IO_read>
10003268:	e0bfff8d 	sth	r2,-2(fp)

	return usb_ctl_val;
1000326c:	e0bfff8b 	ldhu	r2,-2(fp)
}
10003270:	e037883a 	mov	sp,fp
10003274:	dfc00117 	ldw	ra,4(sp)
10003278:	df000017 	ldw	fp,0(sp)
1000327c:	dec00204 	addi	sp,sp,8
10003280:	f800283a 	ret

10003284 <UsbPrintMem>:


void UsbPrintMem()
{
10003284:	defffc04 	addi	sp,sp,-16
10003288:	dfc00315 	stw	ra,12(sp)
1000328c:	df000215 	stw	fp,8(sp)
10003290:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003294:	01414004 	movi	r5,1280
10003298:	01000084 	movi	r4,2
1000329c:	00011700 	call	10001170 <IO_write>
	for (i = 0; i <= 200; i += 2)
100032a0:	e03fff15 	stw	zero,-4(fp)
100032a4:	00000e06 	br	100032e0 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100032a8:	0009883a 	mov	r4,zero
100032ac:	00011e40 	call	100011e4 <IO_read>
100032b0:	10bfffcc 	andi	r2,r2,65535
100032b4:	e0bffe15 	stw	r2,-8(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100032b8:	e0bfff17 	ldw	r2,-4(fp)
100032bc:	10814004 	addi	r2,r2,1280
100032c0:	e1bffe17 	ldw	r6,-8(fp)
100032c4:	100b883a 	mov	r5,r2
100032c8:	01040074 	movhi	r4,4097
100032cc:	210ac804 	addi	r4,r4,11040
100032d0:	00034940 	call	10003494 <printf>
	for (i = 0; i <= 200; i += 2)
100032d4:	e0bfff17 	ldw	r2,-4(fp)
100032d8:	10800084 	addi	r2,r2,2
100032dc:	e0bfff15 	stw	r2,-4(fp)
100032e0:	e0bfff17 	ldw	r2,-4(fp)
100032e4:	10803250 	cmplti	r2,r2,201
100032e8:	103fef1e 	bne	r2,zero,100032a8 <UsbPrintMem+0x24>
	}
}
100032ec:	0001883a 	nop
100032f0:	e037883a 	mov	sp,fp
100032f4:	dfc00117 	ldw	ra,4(sp)
100032f8:	df000017 	ldw	fp,0(sp)
100032fc:	dec00204 	addi	sp,sp,8
10003300:	f800283a 	ret

10003304 <__muldi3>:
10003304:	20bfffcc 	andi	r2,r4,65535
10003308:	2012d43a 	srli	r9,r4,16
1000330c:	32bfffcc 	andi	r10,r6,65535
10003310:	3018d43a 	srli	r12,r6,16
10003314:	1297383a 	mul	r11,r2,r10
10003318:	4a95383a 	mul	r10,r9,r10
1000331c:	1311383a 	mul	r8,r2,r12
10003320:	5804d43a 	srli	r2,r11,16
10003324:	4b13383a 	mul	r9,r9,r12
10003328:	4291883a 	add	r8,r8,r10
1000332c:	1205883a 	add	r2,r2,r8
10003330:	1280022e 	bgeu	r2,r10,1000333c <__muldi3+0x38>
10003334:	00c00074 	movhi	r3,1
10003338:	48d3883a 	add	r9,r9,r3
1000333c:	1010d43a 	srli	r8,r2,16
10003340:	21c9383a 	mul	r4,r4,r7
10003344:	314d383a 	mul	r6,r6,r5
10003348:	1004943a 	slli	r2,r2,16
1000334c:	4253883a 	add	r9,r8,r9
10003350:	5affffcc 	andi	r11,r11,65535
10003354:	2249883a 	add	r4,r4,r9
10003358:	12c5883a 	add	r2,r2,r11
1000335c:	2187883a 	add	r3,r4,r6
10003360:	f800283a 	ret

10003364 <memcpy>:
10003364:	30c00430 	cmpltui	r3,r6,16
10003368:	2005883a 	mov	r2,r4
1000336c:	18002d1e 	bne	r3,zero,10003424 <memcpy+0xc0>
10003370:	2906b03a 	or	r3,r5,r4
10003374:	18c000cc 	andi	r3,r3,3
10003378:	1800351e 	bne	r3,zero,10003450 <memcpy+0xec>
1000337c:	32fffc04 	addi	r11,r6,-16
10003380:	5816d13a 	srli	r11,r11,4
10003384:	2007883a 	mov	r3,r4
10003388:	280f883a 	mov	r7,r5
1000338c:	5ac00044 	addi	r11,r11,1
10003390:	5816913a 	slli	r11,r11,4
10003394:	22c9883a 	add	r4,r4,r11
10003398:	3a000017 	ldw	r8,0(r7)
1000339c:	3a800117 	ldw	r10,4(r7)
100033a0:	3a400217 	ldw	r9,8(r7)
100033a4:	39c00404 	addi	r7,r7,16
100033a8:	1a000015 	stw	r8,0(r3)
100033ac:	3a3fff17 	ldw	r8,-4(r7)
100033b0:	1a800115 	stw	r10,4(r3)
100033b4:	1a400215 	stw	r9,8(r3)
100033b8:	18c00404 	addi	r3,r3,16
100033bc:	1a3fff15 	stw	r8,-4(r3)
100033c0:	20fff51e 	bne	r4,r3,10003398 <memcpy+0x34>
100033c4:	3100030c 	andi	r4,r6,12
100033c8:	2acb883a 	add	r5,r5,r11
100033cc:	320003cc 	andi	r8,r6,15
100033d0:	20002226 	beq	r4,zero,1000345c <memcpy+0xf8>
100033d4:	2809883a 	mov	r4,r5
100033d8:	1813883a 	mov	r9,r3
100033dc:	21000104 	addi	r4,r4,4
100033e0:	22bfff17 	ldw	r10,-4(r4)
100033e4:	410fc83a 	sub	r7,r8,r4
100033e8:	4a400104 	addi	r9,r9,4
100033ec:	29cf883a 	add	r7,r5,r7
100033f0:	4abfff15 	stw	r10,-4(r9)
100033f4:	39c00128 	cmpgeui	r7,r7,4
100033f8:	383ff81e 	bne	r7,zero,100033dc <memcpy+0x78>
100033fc:	413fff04 	addi	r4,r8,-4
10003400:	2008d0ba 	srli	r4,r4,2
10003404:	318000cc 	andi	r6,r6,3
10003408:	31ffffc4 	addi	r7,r6,-1
1000340c:	21000044 	addi	r4,r4,1
10003410:	200890ba 	slli	r4,r4,2
10003414:	1907883a 	add	r3,r3,r4
10003418:	290b883a 	add	r5,r5,r4
1000341c:	3000041e 	bne	r6,zero,10003430 <memcpy+0xcc>
10003420:	f800283a 	ret
10003424:	2007883a 	mov	r3,r4
10003428:	31ffffc4 	addi	r7,r6,-1
1000342c:	303ffc26 	beq	r6,zero,10003420 <memcpy+0xbc>
10003430:	39c00044 	addi	r7,r7,1
10003434:	19cf883a 	add	r7,r3,r7
10003438:	29400044 	addi	r5,r5,1
1000343c:	29bfffc3 	ldbu	r6,-1(r5)
10003440:	18c00044 	addi	r3,r3,1
10003444:	19bfffc5 	stb	r6,-1(r3)
10003448:	19fffb1e 	bne	r3,r7,10003438 <memcpy+0xd4>
1000344c:	f800283a 	ret
10003450:	31ffffc4 	addi	r7,r6,-1
10003454:	2007883a 	mov	r3,r4
10003458:	003ff506 	br	10003430 <memcpy+0xcc>
1000345c:	400d883a 	mov	r6,r8
10003460:	003ff106 	br	10003428 <memcpy+0xc4>

10003464 <_printf_r>:
10003464:	defffd04 	addi	sp,sp,-12
10003468:	2805883a 	mov	r2,r5
1000346c:	dfc00015 	stw	ra,0(sp)
10003470:	d9800115 	stw	r6,4(sp)
10003474:	d9c00215 	stw	r7,8(sp)
10003478:	21400217 	ldw	r5,8(r4)
1000347c:	d9c00104 	addi	r7,sp,4
10003480:	100d883a 	mov	r6,r2
10003484:	00036400 	call	10003640 <___vfprintf_internal_r>
10003488:	dfc00017 	ldw	ra,0(sp)
1000348c:	dec00304 	addi	sp,sp,12
10003490:	f800283a 	ret

10003494 <printf>:
10003494:	defffc04 	addi	sp,sp,-16
10003498:	dfc00015 	stw	ra,0(sp)
1000349c:	d9400115 	stw	r5,4(sp)
100034a0:	d9800215 	stw	r6,8(sp)
100034a4:	d9c00315 	stw	r7,12(sp)
100034a8:	00840074 	movhi	r2,4097
100034ac:	1094a817 	ldw	r2,21152(r2)
100034b0:	200b883a 	mov	r5,r4
100034b4:	d9800104 	addi	r6,sp,4
100034b8:	11000217 	ldw	r4,8(r2)
100034bc:	00057a00 	call	100057a0 <__vfprintf_internal>
100034c0:	dfc00017 	ldw	ra,0(sp)
100034c4:	dec00404 	addi	sp,sp,16
100034c8:	f800283a 	ret

100034cc <_puts_r>:
100034cc:	defff504 	addi	sp,sp,-44
100034d0:	dc000815 	stw	r16,32(sp)
100034d4:	2021883a 	mov	r16,r4
100034d8:	2809883a 	mov	r4,r5
100034dc:	dc400915 	stw	r17,36(sp)
100034e0:	dfc00a15 	stw	ra,40(sp)
100034e4:	2823883a 	mov	r17,r5
100034e8:	00035a80 	call	100035a8 <strlen>
100034ec:	11000044 	addi	r4,r2,1
100034f0:	d8800515 	stw	r2,20(sp)
100034f4:	00800044 	movi	r2,1
100034f8:	00c40074 	movhi	r3,4097
100034fc:	d8800715 	stw	r2,28(sp)
10003500:	d8800404 	addi	r2,sp,16
10003504:	18cacd04 	addi	r3,r3,11060
10003508:	d8800115 	stw	r2,4(sp)
1000350c:	00800084 	movi	r2,2
10003510:	dc400415 	stw	r17,16(sp)
10003514:	d8c00615 	stw	r3,24(sp)
10003518:	d9000315 	stw	r4,12(sp)
1000351c:	d8800215 	stw	r2,8(sp)
10003520:	81400217 	ldw	r5,8(r16)
10003524:	80000226 	beq	r16,zero,10003530 <_puts_r+0x64>
10003528:	80800e17 	ldw	r2,56(r16)
1000352c:	10001326 	beq	r2,zero,1000357c <_puts_r+0xb0>
10003530:	2880030b 	ldhu	r2,12(r5)
10003534:	10c8000c 	andi	r3,r2,8192
10003538:	1800061e 	bne	r3,zero,10003554 <_puts_r+0x88>
1000353c:	28c01917 	ldw	r3,100(r5)
10003540:	0137ffc4 	movi	r4,-8193
10003544:	10880014 	ori	r2,r2,8192
10003548:	1906703a 	and	r3,r3,r4
1000354c:	2880030d 	sth	r2,12(r5)
10003550:	28c01915 	stw	r3,100(r5)
10003554:	d9800104 	addi	r6,sp,4
10003558:	8009883a 	mov	r4,r16
1000355c:	0007cbc0 	call	10007cbc <__sfvwrite_r>
10003560:	10000b1e 	bne	r2,zero,10003590 <_puts_r+0xc4>
10003564:	00800284 	movi	r2,10
10003568:	dfc00a17 	ldw	ra,40(sp)
1000356c:	dc400917 	ldw	r17,36(sp)
10003570:	dc000817 	ldw	r16,32(sp)
10003574:	dec00b04 	addi	sp,sp,44
10003578:	f800283a 	ret
1000357c:	8009883a 	mov	r4,r16
10003580:	d9400015 	stw	r5,0(sp)
10003584:	000785c0 	call	1000785c <__sinit>
10003588:	d9400017 	ldw	r5,0(sp)
1000358c:	003fe806 	br	10003530 <_puts_r+0x64>
10003590:	00bfffc4 	movi	r2,-1
10003594:	003ff406 	br	10003568 <_puts_r+0x9c>

10003598 <puts>:
10003598:	00840074 	movhi	r2,4097
1000359c:	200b883a 	mov	r5,r4
100035a0:	1114a817 	ldw	r4,21152(r2)
100035a4:	00034cc1 	jmpi	100034cc <_puts_r>

100035a8 <strlen>:
100035a8:	208000cc 	andi	r2,r4,3
100035ac:	10002026 	beq	r2,zero,10003630 <strlen+0x88>
100035b0:	20800007 	ldb	r2,0(r4)
100035b4:	10002026 	beq	r2,zero,10003638 <strlen+0x90>
100035b8:	2005883a 	mov	r2,r4
100035bc:	00000206 	br	100035c8 <strlen+0x20>
100035c0:	10c00007 	ldb	r3,0(r2)
100035c4:	18001826 	beq	r3,zero,10003628 <strlen+0x80>
100035c8:	10800044 	addi	r2,r2,1
100035cc:	10c000cc 	andi	r3,r2,3
100035d0:	183ffb1e 	bne	r3,zero,100035c0 <strlen+0x18>
100035d4:	11400017 	ldw	r5,0(r2)
100035d8:	01ffbff4 	movhi	r7,65279
100035dc:	39ffbfc4 	addi	r7,r7,-257
100035e0:	29c7883a 	add	r3,r5,r7
100035e4:	01a02074 	movhi	r6,32897
100035e8:	014a303a 	nor	r5,zero,r5
100035ec:	1946703a 	and	r3,r3,r5
100035f0:	31a02004 	addi	r6,r6,-32640
100035f4:	1986703a 	and	r3,r3,r6
100035f8:	1800091e 	bne	r3,zero,10003620 <strlen+0x78>
100035fc:	10800104 	addi	r2,r2,4
10003600:	11400017 	ldw	r5,0(r2)
10003604:	29c7883a 	add	r3,r5,r7
10003608:	014a303a 	nor	r5,zero,r5
1000360c:	1946703a 	and	r3,r3,r5
10003610:	1986703a 	and	r3,r3,r6
10003614:	183ff926 	beq	r3,zero,100035fc <strlen+0x54>
10003618:	00000106 	br	10003620 <strlen+0x78>
1000361c:	10800044 	addi	r2,r2,1
10003620:	10c00007 	ldb	r3,0(r2)
10003624:	183ffd1e 	bne	r3,zero,1000361c <strlen+0x74>
10003628:	1105c83a 	sub	r2,r2,r4
1000362c:	f800283a 	ret
10003630:	2005883a 	mov	r2,r4
10003634:	003fe706 	br	100035d4 <strlen+0x2c>
10003638:	0005883a 	mov	r2,zero
1000363c:	f800283a 	ret

10003640 <___vfprintf_internal_r>:
10003640:	deffbd04 	addi	sp,sp,-268
10003644:	dfc04215 	stw	ra,264(sp)
10003648:	dd003d15 	stw	r20,244(sp)
1000364c:	dcc03c15 	stw	r19,240(sp)
10003650:	dc003915 	stw	r16,228(sp)
10003654:	d9000515 	stw	r4,20(sp)
10003658:	2021883a 	mov	r16,r4
1000365c:	2827883a 	mov	r19,r5
10003660:	3029883a 	mov	r20,r6
10003664:	d9c00615 	stw	r7,24(sp)
10003668:	df004115 	stw	fp,260(sp)
1000366c:	ddc04015 	stw	r23,256(sp)
10003670:	dd803f15 	stw	r22,252(sp)
10003674:	dd403e15 	stw	r21,248(sp)
10003678:	dc803b15 	stw	r18,236(sp)
1000367c:	dc403a15 	stw	r17,232(sp)
10003680:	00082e00 	call	100082e0 <_localeconv_r>
10003684:	10800017 	ldw	r2,0(r2)
10003688:	1009883a 	mov	r4,r2
1000368c:	d8800d15 	stw	r2,52(sp)
10003690:	00035a80 	call	100035a8 <strlen>
10003694:	d8800b15 	stw	r2,44(sp)
10003698:	80000226 	beq	r16,zero,100036a4 <___vfprintf_internal_r+0x64>
1000369c:	80800e17 	ldw	r2,56(r16)
100036a0:	1002da26 	beq	r2,zero,1000420c <___vfprintf_internal_r+0xbcc>
100036a4:	9880030b 	ldhu	r2,12(r19)
100036a8:	10c8000c 	andi	r3,r2,8192
100036ac:	1800061e 	bne	r3,zero,100036c8 <___vfprintf_internal_r+0x88>
100036b0:	98c01917 	ldw	r3,100(r19)
100036b4:	0137ffc4 	movi	r4,-8193
100036b8:	10880014 	ori	r2,r2,8192
100036bc:	1906703a 	and	r3,r3,r4
100036c0:	9880030d 	sth	r2,12(r19)
100036c4:	98c01915 	stw	r3,100(r19)
100036c8:	10c0020c 	andi	r3,r2,8
100036cc:	18009a26 	beq	r3,zero,10003938 <___vfprintf_internal_r+0x2f8>
100036d0:	98c00417 	ldw	r3,16(r19)
100036d4:	18009826 	beq	r3,zero,10003938 <___vfprintf_internal_r+0x2f8>
100036d8:	1080068c 	andi	r2,r2,26
100036dc:	10800298 	cmpnei	r2,r2,10
100036e0:	10009d26 	beq	r2,zero,10003958 <___vfprintf_internal_r+0x318>
100036e4:	ddc02904 	addi	r23,sp,164
100036e8:	ddc01c15 	stw	r23,112(sp)
100036ec:	d8001e15 	stw	zero,120(sp)
100036f0:	d8001d15 	stw	zero,116(sp)
100036f4:	d8000815 	stw	zero,32(sp)
100036f8:	d8000915 	stw	zero,36(sp)
100036fc:	d8000a15 	stw	zero,40(sp)
10003700:	b811883a 	mov	r8,r23
10003704:	d8000c15 	stw	zero,48(sp)
10003708:	d8001115 	stw	zero,68(sp)
1000370c:	d8000415 	stw	zero,16(sp)
10003710:	a02d883a 	mov	r22,r20
10003714:	b0800007 	ldb	r2,0(r22)
10003718:	1000a226 	beq	r2,zero,100039a4 <___vfprintf_internal_r+0x364>
1000371c:	10800960 	cmpeqi	r2,r2,37
10003720:	10052e1e 	bne	r2,zero,10004bdc <___vfprintf_internal_r+0x159c>
10003724:	b021883a 	mov	r16,r22
10003728:	00000206 	br	10003734 <___vfprintf_internal_r+0xf4>
1000372c:	18009326 	beq	r3,zero,1000397c <___vfprintf_internal_r+0x33c>
10003730:	9021883a 	mov	r16,r18
10003734:	80800047 	ldb	r2,1(r16)
10003738:	84800044 	addi	r18,r16,1
1000373c:	10c00958 	cmpnei	r3,r2,37
10003740:	103ffa1e 	bne	r2,zero,1000372c <___vfprintf_internal_r+0xec>
10003744:	95a3c83a 	sub	r17,r18,r22
10003748:	88009626 	beq	r17,zero,100039a4 <___vfprintf_internal_r+0x364>
1000374c:	d8c01e17 	ldw	r3,120(sp)
10003750:	d8801d17 	ldw	r2,116(sp)
10003754:	45800015 	stw	r22,0(r8)
10003758:	1c47883a 	add	r3,r3,r17
1000375c:	10800044 	addi	r2,r2,1
10003760:	d8801d15 	stw	r2,116(sp)
10003764:	44400115 	stw	r17,4(r8)
10003768:	d8c01e15 	stw	r3,120(sp)
1000376c:	10800208 	cmpgei	r2,r2,8
10003770:	1000851e 	bne	r2,zero,10003988 <___vfprintf_internal_r+0x348>
10003774:	42000204 	addi	r8,r8,8
10003778:	d8c00417 	ldw	r3,16(sp)
1000377c:	80800047 	ldb	r2,1(r16)
10003780:	1c47883a 	add	r3,r3,r17
10003784:	d8c00415 	stw	r3,16(sp)
10003788:	10008626 	beq	r2,zero,100039a4 <___vfprintf_internal_r+0x364>
1000378c:	92800047 	ldb	r10,1(r18)
10003790:	95800044 	addi	r22,r18,1
10003794:	d8001545 	stb	zero,85(sp)
10003798:	0009883a 	mov	r4,zero
1000379c:	000b883a 	mov	r5,zero
100037a0:	02ffffc4 	movi	r11,-1
100037a4:	0023883a 	mov	r17,zero
100037a8:	0019883a 	mov	r12,zero
100037ac:	b5800044 	addi	r22,r22,1
100037b0:	5039883a 	mov	fp,r10
100037b4:	e0bff804 	addi	r2,fp,-32
100037b8:	10c01668 	cmpgeui	r3,r2,89
100037bc:	18009b1e 	bne	r3,zero,10003a2c <___vfprintf_internal_r+0x3ec>
100037c0:	100490ba 	slli	r2,r2,2
100037c4:	00c40034 	movhi	r3,4096
100037c8:	10c7883a 	add	r3,r2,r3
100037cc:	188df517 	ldw	r2,14292(r3)
100037d0:	1000683a 	jmp	r2
100037d4:	10003afc 	xorhi	zero,r2,235
100037d8:	10003a2c 	andhi	zero,r2,232
100037dc:	10003a2c 	andhi	zero,r2,232
100037e0:	10003af0 	cmpltui	zero,r2,235
100037e4:	10003a2c 	andhi	zero,r2,232
100037e8:	10003a2c 	andhi	zero,r2,232
100037ec:	10003a2c 	andhi	zero,r2,232
100037f0:	10003a2c 	andhi	zero,r2,232
100037f4:	10003a2c 	andhi	zero,r2,232
100037f8:	10003a2c 	andhi	zero,r2,232
100037fc:	10003ac8 	cmpgei	zero,r2,235
10003800:	10003ab8 	rdprs	zero,r2,234
10003804:	10003a2c 	andhi	zero,r2,232
10003808:	10003aa0 	cmpeqi	zero,r2,234
1000380c:	10003a5c 	xori	zero,r2,233
10003810:	10003a2c 	andhi	zero,r2,232
10003814:	10003a50 	cmplti	zero,r2,233
10003818:	100039fc 	xorhi	zero,r2,231
1000381c:	100039fc 	xorhi	zero,r2,231
10003820:	100039fc 	xorhi	zero,r2,231
10003824:	100039fc 	xorhi	zero,r2,231
10003828:	100039fc 	xorhi	zero,r2,231
1000382c:	100039fc 	xorhi	zero,r2,231
10003830:	100039fc 	xorhi	zero,r2,231
10003834:	100039fc 	xorhi	zero,r2,231
10003838:	100039fc 	xorhi	zero,r2,231
1000383c:	10003a2c 	andhi	zero,r2,232
10003840:	10003a2c 	andhi	zero,r2,232
10003844:	10003a2c 	andhi	zero,r2,232
10003848:	10003a2c 	andhi	zero,r2,232
1000384c:	10003a2c 	andhi	zero,r2,232
10003850:	10003a2c 	andhi	zero,r2,232
10003854:	10003a2c 	andhi	zero,r2,232
10003858:	10003a2c 	andhi	zero,r2,232
1000385c:	10003a2c 	andhi	zero,r2,232
10003860:	10003a2c 	andhi	zero,r2,232
10003864:	10004010 	cmplti	zero,r2,256
10003868:	10003f30 	cmpltui	zero,r2,252
1000386c:	10003a2c 	andhi	zero,r2,232
10003870:	10003f30 	cmpltui	zero,r2,252
10003874:	10003a2c 	andhi	zero,r2,232
10003878:	10003a2c 	andhi	zero,r2,232
1000387c:	10003a2c 	andhi	zero,r2,232
10003880:	10003a2c 	andhi	zero,r2,232
10003884:	10003f24 	muli	zero,r2,252
10003888:	10003a2c 	andhi	zero,r2,232
1000388c:	10003a2c 	andhi	zero,r2,232
10003890:	10003ef0 	cmpltui	zero,r2,251
10003894:	10003a2c 	andhi	zero,r2,232
10003898:	10003a2c 	andhi	zero,r2,232
1000389c:	10003a2c 	andhi	zero,r2,232
100038a0:	10003a2c 	andhi	zero,r2,232
100038a4:	10003a2c 	andhi	zero,r2,232
100038a8:	10004130 	cmpltui	zero,r2,260
100038ac:	10003a2c 	andhi	zero,r2,232
100038b0:	10003a2c 	andhi	zero,r2,232
100038b4:	100040e8 	cmpgeui	zero,r2,259
100038b8:	10003a2c 	andhi	zero,r2,232
100038bc:	10003a2c 	andhi	zero,r2,232
100038c0:	10003a2c 	andhi	zero,r2,232
100038c4:	10003a2c 	andhi	zero,r2,232
100038c8:	10003a2c 	andhi	zero,r2,232
100038cc:	10003a2c 	andhi	zero,r2,232
100038d0:	10003a2c 	andhi	zero,r2,232
100038d4:	10003a2c 	andhi	zero,r2,232
100038d8:	10003a2c 	andhi	zero,r2,232
100038dc:	10003a2c 	andhi	zero,r2,232
100038e0:	10003c80 	call	110003c8 <_gp+0xfe3130>
100038e4:	10003c0c 	andi	zero,r2,240
100038e8:	10003f30 	cmpltui	zero,r2,252
100038ec:	10003f30 	cmpltui	zero,r2,252
100038f0:	10003f30 	cmpltui	zero,r2,252
100038f4:	10004200 	call	11000420 <_gp+0xfe3188>
100038f8:	10003c0c 	andi	zero,r2,240
100038fc:	10003a2c 	andhi	zero,r2,232
10003900:	10003a2c 	andhi	zero,r2,232
10003904:	100041ec 	andhi	zero,r2,263
10003908:	10003a2c 	andhi	zero,r2,232
1000390c:	10003eb0 	cmpltui	zero,r2,250
10003910:	10003e70 	cmpltui	zero,r2,249
10003914:	10004170 	cmpltui	zero,r2,261
10003918:	10004164 	muli	zero,r2,261
1000391c:	10003a2c 	andhi	zero,r2,232
10003920:	10003bb0 	cmpltui	zero,r2,238
10003924:	10003a2c 	andhi	zero,r2,232
10003928:	10003b70 	cmpltui	zero,r2,237
1000392c:	10003a2c 	andhi	zero,r2,232
10003930:	10003a2c 	andhi	zero,r2,232
10003934:	10003b28 	cmpgeui	zero,r2,236
10003938:	d9000517 	ldw	r4,20(sp)
1000393c:	980b883a 	mov	r5,r19
10003940:	00058780 	call	10005878 <__swsetup_r>
10003944:	10074c1e 	bne	r2,zero,10005678 <___vfprintf_internal_r+0x2038>
10003948:	9880030b 	ldhu	r2,12(r19)
1000394c:	1080068c 	andi	r2,r2,26
10003950:	10800298 	cmpnei	r2,r2,10
10003954:	103f631e 	bne	r2,zero,100036e4 <___vfprintf_internal_r+0xa4>
10003958:	9880038f 	ldh	r2,14(r19)
1000395c:	103f6116 	blt	r2,zero,100036e4 <___vfprintf_internal_r+0xa4>
10003960:	d9c00617 	ldw	r7,24(sp)
10003964:	d9000517 	ldw	r4,20(sp)
10003968:	a00d883a 	mov	r6,r20
1000396c:	980b883a 	mov	r5,r19
10003970:	00057b80 	call	100057b8 <__sbprintf>
10003974:	d8800415 	stw	r2,16(sp)
10003978:	00001306 	br	100039c8 <___vfprintf_internal_r+0x388>
1000397c:	95a3c83a 	sub	r17,r18,r22
10003980:	883f8226 	beq	r17,zero,1000378c <___vfprintf_internal_r+0x14c>
10003984:	003f7106 	br	1000374c <___vfprintf_internal_r+0x10c>
10003988:	d9000517 	ldw	r4,20(sp)
1000398c:	d9801c04 	addi	r6,sp,112
10003990:	980b883a 	mov	r5,r19
10003994:	000a7b80 	call	1000a7b8 <__sprint_r>
10003998:	1000081e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
1000399c:	b811883a 	mov	r8,r23
100039a0:	003f7506 	br	10003778 <___vfprintf_internal_r+0x138>
100039a4:	d8801e17 	ldw	r2,120(sp)
100039a8:	10000426 	beq	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
100039ac:	d9000517 	ldw	r4,20(sp)
100039b0:	d9801c04 	addi	r6,sp,112
100039b4:	980b883a 	mov	r5,r19
100039b8:	000a7b80 	call	1000a7b8 <__sprint_r>
100039bc:	9880030b 	ldhu	r2,12(r19)
100039c0:	1080100c 	andi	r2,r2,64
100039c4:	10072c1e 	bne	r2,zero,10005678 <___vfprintf_internal_r+0x2038>
100039c8:	d8800417 	ldw	r2,16(sp)
100039cc:	dfc04217 	ldw	ra,264(sp)
100039d0:	df004117 	ldw	fp,260(sp)
100039d4:	ddc04017 	ldw	r23,256(sp)
100039d8:	dd803f17 	ldw	r22,252(sp)
100039dc:	dd403e17 	ldw	r21,248(sp)
100039e0:	dd003d17 	ldw	r20,244(sp)
100039e4:	dcc03c17 	ldw	r19,240(sp)
100039e8:	dc803b17 	ldw	r18,236(sp)
100039ec:	dc403a17 	ldw	r17,232(sp)
100039f0:	dc003917 	ldw	r16,228(sp)
100039f4:	dec04304 	addi	sp,sp,268
100039f8:	f800283a 	ret
100039fc:	0023883a 	mov	r17,zero
10003a00:	e0bff404 	addi	r2,fp,-48
10003a04:	b5800044 	addi	r22,r22,1
10003a08:	8c4002a4 	muli	r17,r17,10
10003a0c:	b73fffc7 	ldb	fp,-1(r22)
10003a10:	1463883a 	add	r17,r2,r17
10003a14:	e0bff404 	addi	r2,fp,-48
10003a18:	10c002b0 	cmpltui	r3,r2,10
10003a1c:	183ff91e 	bne	r3,zero,10003a04 <___vfprintf_internal_r+0x3c4>
10003a20:	e0bff804 	addi	r2,fp,-32
10003a24:	10c01668 	cmpgeui	r3,r2,89
10003a28:	183f6526 	beq	r3,zero,100037c0 <___vfprintf_internal_r+0x180>
10003a2c:	21003fcc 	andi	r4,r4,255
10003a30:	20066d1e 	bne	r4,zero,100053e8 <___vfprintf_internal_r+0x1da8>
10003a34:	e03fdb26 	beq	fp,zero,100039a4 <___vfprintf_internal_r+0x364>
10003a38:	df001f05 	stb	fp,124(sp)
10003a3c:	d8001545 	stb	zero,85(sp)
10003a40:	05400044 	movi	r21,1
10003a44:	05000044 	movi	r20,1
10003a48:	dc001f04 	addi	r16,sp,124
10003a4c:	00009506 	br	10003ca4 <___vfprintf_internal_r+0x664>
10003a50:	63002014 	ori	r12,r12,128
10003a54:	b2800007 	ldb	r10,0(r22)
10003a58:	003f5406 	br	100037ac <___vfprintf_internal_r+0x16c>
10003a5c:	b7000007 	ldb	fp,0(r22)
10003a60:	b0c00044 	addi	r3,r22,1
10003a64:	e0800aa0 	cmpeqi	r2,fp,42
10003a68:	1007411e 	bne	r2,zero,10005770 <___vfprintf_internal_r+0x2130>
10003a6c:	e0bff404 	addi	r2,fp,-48
10003a70:	118002b0 	cmpltui	r6,r2,10
10003a74:	182d883a 	mov	r22,r3
10003a78:	0017883a 	mov	r11,zero
10003a7c:	303f4d26 	beq	r6,zero,100037b4 <___vfprintf_internal_r+0x174>
10003a80:	b5800044 	addi	r22,r22,1
10003a84:	5ac002a4 	muli	r11,r11,10
10003a88:	b73fffc7 	ldb	fp,-1(r22)
10003a8c:	5897883a 	add	r11,r11,r2
10003a90:	e0bff404 	addi	r2,fp,-48
10003a94:	10c002b0 	cmpltui	r3,r2,10
10003a98:	183ff91e 	bne	r3,zero,10003a80 <___vfprintf_internal_r+0x440>
10003a9c:	003f4506 	br	100037b4 <___vfprintf_internal_r+0x174>
10003aa0:	b7000003 	ldbu	fp,0(r22)
10003aa4:	e2803fcc 	andi	r10,fp,255
10003aa8:	5280201c 	xori	r10,r10,128
10003aac:	63000114 	ori	r12,r12,4
10003ab0:	52bfe004 	addi	r10,r10,-128
10003ab4:	003f3d06 	br	100037ac <___vfprintf_internal_r+0x16c>
10003ab8:	01000044 	movi	r4,1
10003abc:	01400ac4 	movi	r5,43
10003ac0:	b2800007 	ldb	r10,0(r22)
10003ac4:	003f3906 	br	100037ac <___vfprintf_internal_r+0x16c>
10003ac8:	d8800617 	ldw	r2,24(sp)
10003acc:	b7000003 	ldbu	fp,0(r22)
10003ad0:	14400017 	ldw	r17,0(r2)
10003ad4:	10800104 	addi	r2,r2,4
10003ad8:	8804d716 	blt	r17,zero,10004e38 <___vfprintf_internal_r+0x17f8>
10003adc:	d8800615 	stw	r2,24(sp)
10003ae0:	e2803fcc 	andi	r10,fp,255
10003ae4:	5280201c 	xori	r10,r10,128
10003ae8:	52bfe004 	addi	r10,r10,-128
10003aec:	003f2f06 	br	100037ac <___vfprintf_internal_r+0x16c>
10003af0:	63000054 	ori	r12,r12,1
10003af4:	b2800007 	ldb	r10,0(r22)
10003af8:	003f2c06 	br	100037ac <___vfprintf_internal_r+0x16c>
10003afc:	28803fcc 	andi	r2,r5,255
10003b00:	1080201c 	xori	r2,r2,128
10003b04:	10bfe004 	addi	r2,r2,-128
10003b08:	b7000003 	ldbu	fp,0(r22)
10003b0c:	103ff41e 	bne	r2,zero,10003ae0 <___vfprintf_internal_r+0x4a0>
10003b10:	e2803fcc 	andi	r10,fp,255
10003b14:	5280201c 	xori	r10,r10,128
10003b18:	01000044 	movi	r4,1
10003b1c:	01400804 	movi	r5,32
10003b20:	52bfe004 	addi	r10,r10,-128
10003b24:	003f2106 	br	100037ac <___vfprintf_internal_r+0x16c>
10003b28:	21003fcc 	andi	r4,r4,255
10003b2c:	2006b31e 	bne	r4,zero,100055fc <___vfprintf_internal_r+0x1fbc>
10003b30:	00840074 	movhi	r2,4097
10003b34:	108ad704 	addi	r2,r2,11100
10003b38:	d8800c15 	stw	r2,48(sp)
10003b3c:	6080080c 	andi	r2,r12,32
10003b40:	10017026 	beq	r2,zero,10004104 <___vfprintf_internal_r+0xac4>
10003b44:	d8800617 	ldw	r2,24(sp)
10003b48:	15400017 	ldw	r21,0(r2)
10003b4c:	15000117 	ldw	r20,4(r2)
10003b50:	10800204 	addi	r2,r2,8
10003b54:	d8800615 	stw	r2,24(sp)
10003b58:	6080004c 	andi	r2,r12,1
10003b5c:	10000226 	beq	r2,zero,10003b68 <___vfprintf_internal_r+0x528>
10003b60:	ad04b03a 	or	r2,r21,r20
10003b64:	1004a71e 	bne	r2,zero,10004e04 <___vfprintf_internal_r+0x17c4>
10003b68:	00800084 	movi	r2,2
10003b6c:	00018f06 	br	100041ac <___vfprintf_internal_r+0xb6c>
10003b70:	21003fcc 	andi	r4,r4,255
10003b74:	20069f1e 	bne	r4,zero,100055f4 <___vfprintf_internal_r+0x1fb4>
10003b78:	6080080c 	andi	r2,r12,32
10003b7c:	1001b41e 	bne	r2,zero,10004250 <___vfprintf_internal_r+0xc10>
10003b80:	d8800617 	ldw	r2,24(sp)
10003b84:	60c0040c 	andi	r3,r12,16
10003b88:	15400017 	ldw	r21,0(r2)
10003b8c:	10800104 	addi	r2,r2,4
10003b90:	18016e1e 	bne	r3,zero,1000414c <___vfprintf_internal_r+0xb0c>
10003b94:	60c0100c 	andi	r3,r12,64
10003b98:	18059f26 	beq	r3,zero,10005218 <___vfprintf_internal_r+0x1bd8>
10003b9c:	d8800615 	stw	r2,24(sp)
10003ba0:	ad7fffcc 	andi	r21,r21,65535
10003ba4:	0029883a 	mov	r20,zero
10003ba8:	00800044 	movi	r2,1
10003bac:	00017f06 	br	100041ac <___vfprintf_internal_r+0xb6c>
10003bb0:	d8800617 	ldw	r2,24(sp)
10003bb4:	d8001545 	stb	zero,85(sp)
10003bb8:	14000017 	ldw	r16,0(r2)
10003bbc:	14800104 	addi	r18,r2,4
10003bc0:	8004c726 	beq	r16,zero,10004ee0 <___vfprintf_internal_r+0x18a0>
10003bc4:	da000e15 	stw	r8,56(sp)
10003bc8:	db000715 	stw	r12,28(sp)
10003bcc:	58bfffe0 	cmpeqi	r2,r11,-1
10003bd0:	1005691e 	bne	r2,zero,10005178 <___vfprintf_internal_r+0x1b38>
10003bd4:	580d883a 	mov	r6,r11
10003bd8:	000b883a 	mov	r5,zero
10003bdc:	8009883a 	mov	r4,r16
10003be0:	dac00615 	stw	r11,24(sp)
10003be4:	0008cc00 	call	10008cc0 <memchr>
10003be8:	dac00617 	ldw	r11,24(sp)
10003bec:	db000717 	ldw	r12,28(sp)
10003bf0:	da000e17 	ldw	r8,56(sp)
10003bf4:	10066726 	beq	r2,zero,10005594 <___vfprintf_internal_r+0x1f54>
10003bf8:	1429c83a 	sub	r20,r2,r16
10003bfc:	a02b883a 	mov	r21,r20
10003c00:	a005f716 	blt	r20,zero,100053e0 <___vfprintf_internal_r+0x1da0>
10003c04:	dc800615 	stw	r18,24(sp)
10003c08:	00002606 	br	10003ca4 <___vfprintf_internal_r+0x664>
10003c0c:	21003fcc 	andi	r4,r4,255
10003c10:	2006761e 	bne	r4,zero,100055ec <___vfprintf_internal_r+0x1fac>
10003c14:	6080080c 	andi	r2,r12,32
10003c18:	10017f1e 	bne	r2,zero,10004218 <___vfprintf_internal_r+0xbd8>
10003c1c:	d8800617 	ldw	r2,24(sp)
10003c20:	60c0040c 	andi	r3,r12,16
10003c24:	10800104 	addi	r2,r2,4
10003c28:	1801001e 	bne	r3,zero,1000402c <___vfprintf_internal_r+0x9ec>
10003c2c:	60c0100c 	andi	r3,r12,64
10003c30:	1800fe26 	beq	r3,zero,1000402c <___vfprintf_internal_r+0x9ec>
10003c34:	d8c00617 	ldw	r3,24(sp)
10003c38:	d8800615 	stw	r2,24(sp)
10003c3c:	1d40000f 	ldh	r21,0(r3)
10003c40:	a829d7fa 	srai	r20,r21,31
10003c44:	a005883a 	mov	r2,r20
10003c48:	1000fe16 	blt	r2,zero,10004044 <___vfprintf_internal_r+0xa04>
10003c4c:	58bfffd8 	cmpnei	r2,r11,-1
10003c50:	db401543 	ldbu	r13,85(sp)
10003c54:	10018526 	beq	r2,zero,1000426c <___vfprintf_internal_r+0xc2c>
10003c58:	00ffdfc4 	movi	r3,-129
10003c5c:	ad04b03a 	or	r2,r21,r20
10003c60:	60d8703a 	and	r12,r12,r3
10003c64:	1001811e 	bne	r2,zero,1000426c <___vfprintf_internal_r+0xc2c>
10003c68:	5801831e 	bne	r11,zero,10004278 <___vfprintf_internal_r+0xc38>
10003c6c:	6025883a 	mov	r18,r12
10003c70:	0017883a 	mov	r11,zero
10003c74:	0029883a 	mov	r20,zero
10003c78:	b821883a 	mov	r16,r23
10003c7c:	00018306 	br	1000428c <___vfprintf_internal_r+0xc4c>
10003c80:	d8c00617 	ldw	r3,24(sp)
10003c84:	d8001545 	stb	zero,85(sp)
10003c88:	05400044 	movi	r21,1
10003c8c:	18800017 	ldw	r2,0(r3)
10003c90:	18c00104 	addi	r3,r3,4
10003c94:	d8c00615 	stw	r3,24(sp)
10003c98:	d8801f05 	stb	r2,124(sp)
10003c9c:	05000044 	movi	r20,1
10003ca0:	dc001f04 	addi	r16,sp,124
10003ca4:	6025883a 	mov	r18,r12
10003ca8:	0017883a 	mov	r11,zero
10003cac:	d8000715 	stw	zero,28(sp)
10003cb0:	9380008c 	andi	r14,r18,2
10003cb4:	70000126 	beq	r14,zero,10003cbc <___vfprintf_internal_r+0x67c>
10003cb8:	ad400084 	addi	r21,r21,2
10003cbc:	9340210c 	andi	r13,r18,132
10003cc0:	d8c01e17 	ldw	r3,120(sp)
10003cc4:	6800021e 	bne	r13,zero,10003cd0 <___vfprintf_internal_r+0x690>
10003cc8:	8d4fc83a 	sub	r7,r17,r21
10003ccc:	01c2ce16 	blt	zero,r7,10004808 <___vfprintf_internal_r+0x11c8>
10003cd0:	d8801547 	ldb	r2,85(sp)
10003cd4:	10000c26 	beq	r2,zero,10003d08 <___vfprintf_internal_r+0x6c8>
10003cd8:	d8801d17 	ldw	r2,116(sp)
10003cdc:	d9001544 	addi	r4,sp,85
10003ce0:	18c00044 	addi	r3,r3,1
10003ce4:	10800044 	addi	r2,r2,1
10003ce8:	41000015 	stw	r4,0(r8)
10003cec:	01000044 	movi	r4,1
10003cf0:	d8801d15 	stw	r2,116(sp)
10003cf4:	41000115 	stw	r4,4(r8)
10003cf8:	d8c01e15 	stw	r3,120(sp)
10003cfc:	10800208 	cmpgei	r2,r2,8
10003d00:	1002fb1e 	bne	r2,zero,100048f0 <___vfprintf_internal_r+0x12b0>
10003d04:	42000204 	addi	r8,r8,8
10003d08:	70000c26 	beq	r14,zero,10003d3c <___vfprintf_internal_r+0x6fc>
10003d0c:	d8801d17 	ldw	r2,116(sp)
10003d10:	d9001584 	addi	r4,sp,86
10003d14:	18c00084 	addi	r3,r3,2
10003d18:	10800044 	addi	r2,r2,1
10003d1c:	41000015 	stw	r4,0(r8)
10003d20:	01000084 	movi	r4,2
10003d24:	d8801d15 	stw	r2,116(sp)
10003d28:	41000115 	stw	r4,4(r8)
10003d2c:	d8c01e15 	stw	r3,120(sp)
10003d30:	10800208 	cmpgei	r2,r2,8
10003d34:	1002fc1e 	bne	r2,zero,10004928 <___vfprintf_internal_r+0x12e8>
10003d38:	42000204 	addi	r8,r8,8
10003d3c:	6b402018 	cmpnei	r13,r13,128
10003d40:	6801cf26 	beq	r13,zero,10004480 <___vfprintf_internal_r+0xe40>
10003d44:	5d0fc83a 	sub	r7,r11,r20
10003d48:	01c20616 	blt	zero,r7,10004564 <___vfprintf_internal_r+0xf24>
10003d4c:	9080400c 	andi	r2,r18,256
10003d50:	10017c1e 	bne	r2,zero,10004344 <___vfprintf_internal_r+0xd04>
10003d54:	d8801d17 	ldw	r2,116(sp)
10003d58:	1d07883a 	add	r3,r3,r20
10003d5c:	44000015 	stw	r16,0(r8)
10003d60:	10800044 	addi	r2,r2,1
10003d64:	d8801d15 	stw	r2,116(sp)
10003d68:	45000115 	stw	r20,4(r8)
10003d6c:	d8c01e15 	stw	r3,120(sp)
10003d70:	10800208 	cmpgei	r2,r2,8
10003d74:	1002571e 	bne	r2,zero,100046d4 <___vfprintf_internal_r+0x1094>
10003d78:	42000204 	addi	r8,r8,8
10003d7c:	9480010c 	andi	r18,r18,4
10003d80:	90000226 	beq	r18,zero,10003d8c <___vfprintf_internal_r+0x74c>
10003d84:	8d61c83a 	sub	r16,r17,r21
10003d88:	04000916 	blt	zero,r16,10003db0 <___vfprintf_internal_r+0x770>
10003d8c:	8d40010e 	bge	r17,r21,10003d94 <___vfprintf_internal_r+0x754>
10003d90:	a823883a 	mov	r17,r21
10003d94:	d8800417 	ldw	r2,16(sp)
10003d98:	1445883a 	add	r2,r2,r17
10003d9c:	d8800415 	stw	r2,16(sp)
10003da0:	1802241e 	bne	r3,zero,10004634 <___vfprintf_internal_r+0xff4>
10003da4:	d8001d15 	stw	zero,116(sp)
10003da8:	b811883a 	mov	r8,r23
10003dac:	003e5906 	br	10003714 <___vfprintf_internal_r+0xd4>
10003db0:	03040074 	movhi	r12,4097
10003db4:	81000450 	cmplti	r4,r16,17
10003db8:	630ae284 	addi	r12,r12,11146
10003dbc:	d8801d17 	ldw	r2,116(sp)
10003dc0:	20001c1e 	bne	r4,zero,10003e34 <___vfprintf_internal_r+0x7f4>
10003dc4:	04800404 	movi	r18,16
10003dc8:	dd000517 	ldw	r20,20(sp)
10003dcc:	6039883a 	mov	fp,r12
10003dd0:	00000406 	br	10003de4 <___vfprintf_internal_r+0x7a4>
10003dd4:	843ffc04 	addi	r16,r16,-16
10003dd8:	81000448 	cmpgei	r4,r16,17
10003ddc:	42000204 	addi	r8,r8,8
10003de0:	20001326 	beq	r4,zero,10003e30 <___vfprintf_internal_r+0x7f0>
10003de4:	10800044 	addi	r2,r2,1
10003de8:	18c00404 	addi	r3,r3,16
10003dec:	47000015 	stw	fp,0(r8)
10003df0:	44800115 	stw	r18,4(r8)
10003df4:	d8c01e15 	stw	r3,120(sp)
10003df8:	d8801d15 	stw	r2,116(sp)
10003dfc:	11000208 	cmpgei	r4,r2,8
10003e00:	203ff426 	beq	r4,zero,10003dd4 <___vfprintf_internal_r+0x794>
10003e04:	d9801c04 	addi	r6,sp,112
10003e08:	980b883a 	mov	r5,r19
10003e0c:	a009883a 	mov	r4,r20
10003e10:	000a7b80 	call	1000a7b8 <__sprint_r>
10003e14:	103ee91e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10003e18:	843ffc04 	addi	r16,r16,-16
10003e1c:	81000448 	cmpgei	r4,r16,17
10003e20:	d8c01e17 	ldw	r3,120(sp)
10003e24:	d8801d17 	ldw	r2,116(sp)
10003e28:	b811883a 	mov	r8,r23
10003e2c:	203fed1e 	bne	r4,zero,10003de4 <___vfprintf_internal_r+0x7a4>
10003e30:	e019883a 	mov	r12,fp
10003e34:	10800044 	addi	r2,r2,1
10003e38:	1c07883a 	add	r3,r3,r16
10003e3c:	d8801d15 	stw	r2,116(sp)
10003e40:	43000015 	stw	r12,0(r8)
10003e44:	44000115 	stw	r16,4(r8)
10003e48:	d8c01e15 	stw	r3,120(sp)
10003e4c:	10800210 	cmplti	r2,r2,8
10003e50:	103fce1e 	bne	r2,zero,10003d8c <___vfprintf_internal_r+0x74c>
10003e54:	d9000517 	ldw	r4,20(sp)
10003e58:	d9801c04 	addi	r6,sp,112
10003e5c:	980b883a 	mov	r5,r19
10003e60:	000a7b80 	call	1000a7b8 <__sprint_r>
10003e64:	103ed51e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10003e68:	d8c01e17 	ldw	r3,120(sp)
10003e6c:	003fc706 	br	10003d8c <___vfprintf_internal_r+0x74c>
10003e70:	21003fcc 	andi	r4,r4,255
10003e74:	2005d91e 	bne	r4,zero,100055dc <___vfprintf_internal_r+0x1f9c>
10003e78:	6080080c 	andi	r2,r12,32
10003e7c:	1000ed1e 	bne	r2,zero,10004234 <___vfprintf_internal_r+0xbf4>
10003e80:	d8800617 	ldw	r2,24(sp)
10003e84:	60c0040c 	andi	r3,r12,16
10003e88:	15400017 	ldw	r21,0(r2)
10003e8c:	10800104 	addi	r2,r2,4
10003e90:	18001e1e 	bne	r3,zero,10003f0c <___vfprintf_internal_r+0x8cc>
10003e94:	60c0100c 	andi	r3,r12,64
10003e98:	1804db26 	beq	r3,zero,10005208 <___vfprintf_internal_r+0x1bc8>
10003e9c:	d8800615 	stw	r2,24(sp)
10003ea0:	ad7fffcc 	andi	r21,r21,65535
10003ea4:	0029883a 	mov	r20,zero
10003ea8:	0005883a 	mov	r2,zero
10003eac:	0000bf06 	br	100041ac <___vfprintf_internal_r+0xb6c>
10003eb0:	21003fcc 	andi	r4,r4,255
10003eb4:	2005cb1e 	bne	r4,zero,100055e4 <___vfprintf_internal_r+0x1fa4>
10003eb8:	d9000617 	ldw	r4,24(sp)
10003ebc:	6080080c 	andi	r2,r12,32
10003ec0:	20c00104 	addi	r3,r4,4
10003ec4:	1003d51e 	bne	r2,zero,10004e1c <___vfprintf_internal_r+0x17dc>
10003ec8:	6080040c 	andi	r2,r12,16
10003ecc:	1004301e 	bne	r2,zero,10004f90 <___vfprintf_internal_r+0x1950>
10003ed0:	6300100c 	andi	r12,r12,64
10003ed4:	60042e26 	beq	r12,zero,10004f90 <___vfprintf_internal_r+0x1950>
10003ed8:	d8800617 	ldw	r2,24(sp)
10003edc:	d8c00615 	stw	r3,24(sp)
10003ee0:	d8c00417 	ldw	r3,16(sp)
10003ee4:	10800017 	ldw	r2,0(r2)
10003ee8:	10c0000d 	sth	r3,0(r2)
10003eec:	003e0906 	br	10003714 <___vfprintf_internal_r+0xd4>
10003ef0:	21003fcc 	andi	r4,r4,255
10003ef4:	2005c31e 	bne	r4,zero,10005604 <___vfprintf_internal_r+0x1fc4>
10003ef8:	6080080c 	andi	r2,r12,32
10003efc:	63000414 	ori	r12,r12,16
10003f00:	1000cc1e 	bne	r2,zero,10004234 <___vfprintf_internal_r+0xbf4>
10003f04:	d8800617 	ldw	r2,24(sp)
10003f08:	10800104 	addi	r2,r2,4
10003f0c:	d8c00617 	ldw	r3,24(sp)
10003f10:	0029883a 	mov	r20,zero
10003f14:	d8800615 	stw	r2,24(sp)
10003f18:	1d400017 	ldw	r21,0(r3)
10003f1c:	0005883a 	mov	r2,zero
10003f20:	0000a206 	br	100041ac <___vfprintf_internal_r+0xb6c>
10003f24:	63000214 	ori	r12,r12,8
10003f28:	b2800007 	ldb	r10,0(r22)
10003f2c:	003e1f06 	br	100037ac <___vfprintf_internal_r+0x16c>
10003f30:	21003fcc 	andi	r4,r4,255
10003f34:	2005b71e 	bne	r4,zero,10005614 <___vfprintf_internal_r+0x1fd4>
10003f38:	d8c00617 	ldw	r3,24(sp)
10003f3c:	00a00034 	movhi	r2,32768
10003f40:	10bfffc4 	addi	r2,r2,-1
10003f44:	1d000117 	ldw	r20,4(r3)
10003f48:	1c800017 	ldw	r18,0(r3)
10003f4c:	01dffc34 	movhi	r7,32752
10003f50:	a0a0703a 	and	r16,r20,r2
10003f54:	01bfffc4 	movi	r6,-1
10003f58:	18800204 	addi	r2,r3,8
10003f5c:	39ffffc4 	addi	r7,r7,-1
10003f60:	9009883a 	mov	r4,r18
10003f64:	800b883a 	mov	r5,r16
10003f68:	da000f15 	stw	r8,60(sp)
10003f6c:	dac00e15 	stw	r11,56(sp)
10003f70:	db000715 	stw	r12,28(sp)
10003f74:	dd000a15 	stw	r20,40(sp)
10003f78:	dc800915 	stw	r18,36(sp)
10003f7c:	d8800615 	stw	r2,24(sp)
10003f80:	000f7300 	call	1000f730 <__unorddf2>
10003f84:	db000717 	ldw	r12,28(sp)
10003f88:	dac00e17 	ldw	r11,56(sp)
10003f8c:	da000f17 	ldw	r8,60(sp)
10003f90:	1003161e 	bne	r2,zero,10004bec <___vfprintf_internal_r+0x15ac>
10003f94:	01dffc34 	movhi	r7,32752
10003f98:	01bfffc4 	movi	r6,-1
10003f9c:	39ffffc4 	addi	r7,r7,-1
10003fa0:	9009883a 	mov	r4,r18
10003fa4:	800b883a 	mov	r5,r16
10003fa8:	000e6480 	call	1000e648 <__ledf2>
10003fac:	db000717 	ldw	r12,28(sp)
10003fb0:	dac00e17 	ldw	r11,56(sp)
10003fb4:	da000f17 	ldw	r8,60(sp)
10003fb8:	00830c0e 	bge	zero,r2,10004bec <___vfprintf_internal_r+0x15ac>
10003fbc:	000d883a 	mov	r6,zero
10003fc0:	000f883a 	mov	r7,zero
10003fc4:	9009883a 	mov	r4,r18
10003fc8:	a00b883a 	mov	r5,r20
10003fcc:	da000e15 	stw	r8,56(sp)
10003fd0:	000e6480 	call	1000e648 <__ledf2>
10003fd4:	db000717 	ldw	r12,28(sp)
10003fd8:	da000e17 	ldw	r8,56(sp)
10003fdc:	1004e216 	blt	r2,zero,10005368 <___vfprintf_internal_r+0x1d28>
10003fe0:	db401543 	ldbu	r13,85(sp)
10003fe4:	e0801210 	cmplti	r2,fp,72
10003fe8:	1004cb1e 	bne	r2,zero,10005318 <___vfprintf_internal_r+0x1cd8>
10003fec:	04040074 	movhi	r16,4097
10003ff0:	840acf04 	addi	r16,r16,11068
10003ff4:	04bfdfc4 	movi	r18,-129
10003ff8:	64a4703a 	and	r18,r12,r18
10003ffc:	054000c4 	movi	r21,3
10004000:	050000c4 	movi	r20,3
10004004:	0017883a 	mov	r11,zero
10004008:	d8000715 	stw	zero,28(sp)
1000400c:	0000a306 	br	1000429c <___vfprintf_internal_r+0xc5c>
10004010:	21003fcc 	andi	r4,r4,255
10004014:	20057d1e 	bne	r4,zero,1000560c <___vfprintf_internal_r+0x1fcc>
10004018:	6080080c 	andi	r2,r12,32
1000401c:	63000414 	ori	r12,r12,16
10004020:	10007d1e 	bne	r2,zero,10004218 <___vfprintf_internal_r+0xbd8>
10004024:	d8800617 	ldw	r2,24(sp)
10004028:	10800104 	addi	r2,r2,4
1000402c:	d8c00617 	ldw	r3,24(sp)
10004030:	1d400017 	ldw	r21,0(r3)
10004034:	d8800615 	stw	r2,24(sp)
10004038:	a829d7fa 	srai	r20,r21,31
1000403c:	a005883a 	mov	r2,r20
10004040:	103f020e 	bge	r2,zero,10003c4c <___vfprintf_internal_r+0x60c>
10004044:	056bc83a 	sub	r21,zero,r21
10004048:	a804c03a 	cmpne	r2,r21,zero
1000404c:	0529c83a 	sub	r20,zero,r20
10004050:	a0a9c83a 	sub	r20,r20,r2
10004054:	00800b44 	movi	r2,45
10004058:	d8801545 	stb	r2,85(sp)
1000405c:	58ffffe0 	cmpeqi	r3,r11,-1
10004060:	03400b44 	movi	r13,45
10004064:	00800044 	movi	r2,1
10004068:	18005426 	beq	r3,zero,100041bc <___vfprintf_internal_r+0xb7c>
1000406c:	10c00060 	cmpeqi	r3,r2,1
10004070:	18007e1e 	bne	r3,zero,1000426c <___vfprintf_internal_r+0xc2c>
10004074:	108000a0 	cmpeqi	r2,r2,2
10004078:	1002371e 	bne	r2,zero,10004958 <___vfprintf_internal_r+0x1318>
1000407c:	b807883a 	mov	r3,r23
10004080:	00000106 	br	10004088 <___vfprintf_internal_r+0xa48>
10004084:	8007883a 	mov	r3,r16
10004088:	a808d0fa 	srli	r4,r21,3
1000408c:	a00a977a 	slli	r5,r20,29
10004090:	a028d0fa 	srli	r20,r20,3
10004094:	ad4001cc 	andi	r21,r21,7
10004098:	a8800c04 	addi	r2,r21,48
1000409c:	292ab03a 	or	r21,r5,r4
100040a0:	18bfffc5 	stb	r2,-1(r3)
100040a4:	ad08b03a 	or	r4,r21,r20
100040a8:	1c3fffc4 	addi	r16,r3,-1
100040ac:	203ff51e 	bne	r4,zero,10004084 <___vfprintf_internal_r+0xa44>
100040b0:	6100004c 	andi	r4,r12,1
100040b4:	2000a026 	beq	r4,zero,10004338 <___vfprintf_internal_r+0xcf8>
100040b8:	10803fcc 	andi	r2,r2,255
100040bc:	1080201c 	xori	r2,r2,128
100040c0:	10bfe004 	addi	r2,r2,-128
100040c4:	10800c18 	cmpnei	r2,r2,48
100040c8:	10009b26 	beq	r2,zero,10004338 <___vfprintf_internal_r+0xcf8>
100040cc:	18ffff84 	addi	r3,r3,-2
100040d0:	00800c04 	movi	r2,48
100040d4:	80bfffc5 	stb	r2,-1(r16)
100040d8:	b8e9c83a 	sub	r20,r23,r3
100040dc:	6025883a 	mov	r18,r12
100040e0:	1821883a 	mov	r16,r3
100040e4:	00006906 	br	1000428c <___vfprintf_internal_r+0xc4c>
100040e8:	21003fcc 	andi	r4,r4,255
100040ec:	2005391e 	bne	r4,zero,100055d4 <___vfprintf_internal_r+0x1f94>
100040f0:	00840074 	movhi	r2,4097
100040f4:	108ad204 	addi	r2,r2,11080
100040f8:	d8800c15 	stw	r2,48(sp)
100040fc:	6080080c 	andi	r2,r12,32
10004100:	103e901e 	bne	r2,zero,10003b44 <___vfprintf_internal_r+0x504>
10004104:	d8c00617 	ldw	r3,24(sp)
10004108:	6080040c 	andi	r2,r12,16
1000410c:	1d400017 	ldw	r21,0(r3)
10004110:	18c00104 	addi	r3,r3,4
10004114:	d8c00615 	stw	r3,24(sp)
10004118:	1002ae1e 	bne	r2,zero,10004bd4 <___vfprintf_internal_r+0x1594>
1000411c:	6080100c 	andi	r2,r12,64
10004120:	1002ac26 	beq	r2,zero,10004bd4 <___vfprintf_internal_r+0x1594>
10004124:	ad7fffcc 	andi	r21,r21,65535
10004128:	0029883a 	mov	r20,zero
1000412c:	003e8a06 	br	10003b58 <___vfprintf_internal_r+0x518>
10004130:	21003fcc 	andi	r4,r4,255
10004134:	2005391e 	bne	r4,zero,1000561c <___vfprintf_internal_r+0x1fdc>
10004138:	6080080c 	andi	r2,r12,32
1000413c:	63000414 	ori	r12,r12,16
10004140:	1000431e 	bne	r2,zero,10004250 <___vfprintf_internal_r+0xc10>
10004144:	d8800617 	ldw	r2,24(sp)
10004148:	10800104 	addi	r2,r2,4
1000414c:	d8c00617 	ldw	r3,24(sp)
10004150:	0029883a 	mov	r20,zero
10004154:	d8800615 	stw	r2,24(sp)
10004158:	1d400017 	ldw	r21,0(r3)
1000415c:	00800044 	movi	r2,1
10004160:	00001206 	br	100041ac <___vfprintf_internal_r+0xb6c>
10004164:	63000814 	ori	r12,r12,32
10004168:	b2800007 	ldb	r10,0(r22)
1000416c:	003d8f06 	br	100037ac <___vfprintf_internal_r+0x16c>
10004170:	d8c00617 	ldw	r3,24(sp)
10004174:	00800c04 	movi	r2,48
10004178:	d8801585 	stb	r2,86(sp)
1000417c:	00801e04 	movi	r2,120
10004180:	01040074 	movhi	r4,4097
10004184:	d88015c5 	stb	r2,87(sp)
10004188:	1d400017 	ldw	r21,0(r3)
1000418c:	18800104 	addi	r2,r3,4
10004190:	d8800615 	stw	r2,24(sp)
10004194:	208ad704 	addi	r2,r4,11100
10004198:	d8800c15 	stw	r2,48(sp)
1000419c:	0029883a 	mov	r20,zero
100041a0:	63000094 	ori	r12,r12,2
100041a4:	00800084 	movi	r2,2
100041a8:	07001e04 	movi	fp,120
100041ac:	d8001545 	stb	zero,85(sp)
100041b0:	58ffffe0 	cmpeqi	r3,r11,-1
100041b4:	001b883a 	mov	r13,zero
100041b8:	183fac1e 	bne	r3,zero,1000406c <___vfprintf_internal_r+0xa2c>
100041bc:	04bfdfc4 	movi	r18,-129
100041c0:	ad06b03a 	or	r3,r21,r20
100041c4:	64a4703a 	and	r18,r12,r18
100041c8:	18018d1e 	bne	r3,zero,10004800 <___vfprintf_internal_r+0x11c0>
100041cc:	5803b91e 	bne	r11,zero,100050b4 <___vfprintf_internal_r+0x1a74>
100041d0:	103ea71e 	bne	r2,zero,10003c70 <___vfprintf_internal_r+0x630>
100041d4:	6500004c 	andi	r20,r12,1
100041d8:	a0028226 	beq	r20,zero,10004be4 <___vfprintf_internal_r+0x15a4>
100041dc:	00800c04 	movi	r2,48
100041e0:	d88028c5 	stb	r2,163(sp)
100041e4:	dc0028c4 	addi	r16,sp,163
100041e8:	00002806 	br	1000428c <___vfprintf_internal_r+0xc4c>
100041ec:	b2800007 	ldb	r10,0(r22)
100041f0:	50801b18 	cmpnei	r2,r10,108
100041f4:	10032926 	beq	r2,zero,10004e9c <___vfprintf_internal_r+0x185c>
100041f8:	63000414 	ori	r12,r12,16
100041fc:	003d6b06 	br	100037ac <___vfprintf_internal_r+0x16c>
10004200:	63001014 	ori	r12,r12,64
10004204:	b2800007 	ldb	r10,0(r22)
10004208:	003d6806 	br	100037ac <___vfprintf_internal_r+0x16c>
1000420c:	d9000517 	ldw	r4,20(sp)
10004210:	000785c0 	call	1000785c <__sinit>
10004214:	003d2306 	br	100036a4 <___vfprintf_internal_r+0x64>
10004218:	d8c00617 	ldw	r3,24(sp)
1000421c:	18800117 	ldw	r2,4(r3)
10004220:	1d400017 	ldw	r21,0(r3)
10004224:	18c00204 	addi	r3,r3,8
10004228:	d8c00615 	stw	r3,24(sp)
1000422c:	1029883a 	mov	r20,r2
10004230:	003e8506 	br	10003c48 <___vfprintf_internal_r+0x608>
10004234:	d8c00617 	ldw	r3,24(sp)
10004238:	0005883a 	mov	r2,zero
1000423c:	1d400017 	ldw	r21,0(r3)
10004240:	1d000117 	ldw	r20,4(r3)
10004244:	18c00204 	addi	r3,r3,8
10004248:	d8c00615 	stw	r3,24(sp)
1000424c:	003fd706 	br	100041ac <___vfprintf_internal_r+0xb6c>
10004250:	d8c00617 	ldw	r3,24(sp)
10004254:	00800044 	movi	r2,1
10004258:	1d400017 	ldw	r21,0(r3)
1000425c:	1d000117 	ldw	r20,4(r3)
10004260:	18c00204 	addi	r3,r3,8
10004264:	d8c00615 	stw	r3,24(sp)
10004268:	003fd006 	br	100041ac <___vfprintf_internal_r+0xb6c>
1000426c:	a000111e 	bne	r20,zero,100042b4 <___vfprintf_internal_r+0xc74>
10004270:	a88002a8 	cmpgeui	r2,r21,10
10004274:	10000f1e 	bne	r2,zero,100042b4 <___vfprintf_internal_r+0xc74>
10004278:	ad400c04 	addi	r21,r21,48
1000427c:	dd4028c5 	stb	r21,163(sp)
10004280:	6025883a 	mov	r18,r12
10004284:	05000044 	movi	r20,1
10004288:	dc0028c4 	addi	r16,sp,163
1000428c:	582b883a 	mov	r21,r11
10004290:	5d00010e 	bge	r11,r20,10004298 <___vfprintf_internal_r+0xc58>
10004294:	a02b883a 	mov	r21,r20
10004298:	d8000715 	stw	zero,28(sp)
1000429c:	6b403fcc 	andi	r13,r13,255
100042a0:	6b40201c 	xori	r13,r13,128
100042a4:	6b7fe004 	addi	r13,r13,-128
100042a8:	683e8126 	beq	r13,zero,10003cb0 <___vfprintf_internal_r+0x670>
100042ac:	ad400044 	addi	r21,r21,1
100042b0:	003e7f06 	br	10003cb0 <___vfprintf_internal_r+0x670>
100042b4:	dc400e15 	stw	r17,56(sp)
100042b8:	b821883a 	mov	r16,r23
100042bc:	a023883a 	mov	r17,r20
100042c0:	db000715 	stw	r12,28(sp)
100042c4:	9829883a 	mov	r20,r19
100042c8:	dac00f15 	stw	r11,60(sp)
100042cc:	4025883a 	mov	r18,r8
100042d0:	6827883a 	mov	r19,r13
100042d4:	00000206 	br	100042e0 <___vfprintf_internal_r+0xca0>
100042d8:	102b883a 	mov	r21,r2
100042dc:	1823883a 	mov	r17,r3
100042e0:	a809883a 	mov	r4,r21
100042e4:	880b883a 	mov	r5,r17
100042e8:	01800284 	movi	r6,10
100042ec:	000f883a 	mov	r7,zero
100042f0:	000cb980 	call	1000cb98 <__umoddi3>
100042f4:	10800c04 	addi	r2,r2,48
100042f8:	843fffc4 	addi	r16,r16,-1
100042fc:	a809883a 	mov	r4,r21
10004300:	880b883a 	mov	r5,r17
10004304:	80800005 	stb	r2,0(r16)
10004308:	01800284 	movi	r6,10
1000430c:	000f883a 	mov	r7,zero
10004310:	000c6000 	call	1000c600 <__udivdi3>
10004314:	883ff01e 	bne	r17,zero,100042d8 <___vfprintf_internal_r+0xc98>
10004318:	ad4002a8 	cmpgeui	r21,r21,10
1000431c:	a83fee1e 	bne	r21,zero,100042d8 <___vfprintf_internal_r+0xc98>
10004320:	db000717 	ldw	r12,28(sp)
10004324:	dc400e17 	ldw	r17,56(sp)
10004328:	dac00f17 	ldw	r11,60(sp)
1000432c:	981b883a 	mov	r13,r19
10004330:	9011883a 	mov	r8,r18
10004334:	a027883a 	mov	r19,r20
10004338:	bc29c83a 	sub	r20,r23,r16
1000433c:	6025883a 	mov	r18,r12
10004340:	003fd206 	br	1000428c <___vfprintf_internal_r+0xc4c>
10004344:	e2801990 	cmplti	r10,fp,102
10004348:	5000ea1e 	bne	r10,zero,100046f4 <___vfprintf_internal_r+0x10b4>
1000434c:	d9000917 	ldw	r4,36(sp)
10004350:	d9400a17 	ldw	r5,40(sp)
10004354:	000d883a 	mov	r6,zero
10004358:	000f883a 	mov	r7,zero
1000435c:	da000f15 	stw	r8,60(sp)
10004360:	d8c00e15 	stw	r3,56(sp)
10004364:	000e4d80 	call	1000e4d8 <__eqdf2>
10004368:	d8c00e17 	ldw	r3,56(sp)
1000436c:	da000f17 	ldw	r8,60(sp)
10004370:	1001891e 	bne	r2,zero,10004998 <___vfprintf_internal_r+0x1358>
10004374:	d8801d17 	ldw	r2,116(sp)
10004378:	01040074 	movhi	r4,4097
1000437c:	210ade04 	addi	r4,r4,11128
10004380:	10800044 	addi	r2,r2,1
10004384:	18c00044 	addi	r3,r3,1
10004388:	41000015 	stw	r4,0(r8)
1000438c:	01000044 	movi	r4,1
10004390:	d8801d15 	stw	r2,116(sp)
10004394:	41000115 	stw	r4,4(r8)
10004398:	d8c01e15 	stw	r3,120(sp)
1000439c:	10800208 	cmpgei	r2,r2,8
100043a0:	1003331e 	bne	r2,zero,10005070 <___vfprintf_internal_r+0x1a30>
100043a4:	42000204 	addi	r8,r8,8
100043a8:	d8801617 	ldw	r2,88(sp)
100043ac:	d8c00817 	ldw	r3,32(sp)
100043b0:	10c00416 	blt	r2,r3,100043c4 <___vfprintf_internal_r+0xd84>
100043b4:	9080004c 	andi	r2,r18,1
100043b8:	1000021e 	bne	r2,zero,100043c4 <___vfprintf_internal_r+0xd84>
100043bc:	d8c01e17 	ldw	r3,120(sp)
100043c0:	003e6e06 	br	10003d7c <___vfprintf_internal_r+0x73c>
100043c4:	d8800d17 	ldw	r2,52(sp)
100043c8:	d8c01e17 	ldw	r3,120(sp)
100043cc:	d9000b17 	ldw	r4,44(sp)
100043d0:	40800015 	stw	r2,0(r8)
100043d4:	d8801d17 	ldw	r2,116(sp)
100043d8:	20c7883a 	add	r3,r4,r3
100043dc:	41000115 	stw	r4,4(r8)
100043e0:	10800044 	addi	r2,r2,1
100043e4:	d8801d15 	stw	r2,116(sp)
100043e8:	d8c01e15 	stw	r3,120(sp)
100043ec:	10800208 	cmpgei	r2,r2,8
100043f0:	1002b11e 	bne	r2,zero,10004eb8 <___vfprintf_internal_r+0x1878>
100043f4:	42000204 	addi	r8,r8,8
100043f8:	d8800817 	ldw	r2,32(sp)
100043fc:	143fffc4 	addi	r16,r2,-1
10004400:	043e5e0e 	bge	zero,r16,10003d7c <___vfprintf_internal_r+0x73c>
10004404:	03040074 	movhi	r12,4097
10004408:	81000450 	cmplti	r4,r16,17
1000440c:	630ade84 	addi	r12,r12,11130
10004410:	d8801d17 	ldw	r2,116(sp)
10004414:	2003731e 	bne	r4,zero,100051e4 <___vfprintf_internal_r+0x1ba4>
10004418:	dc400715 	stw	r17,28(sp)
1000441c:	05000404 	movi	r20,16
10004420:	df000517 	ldw	fp,20(sp)
10004424:	6023883a 	mov	r17,r12
10004428:	00000406 	br	1000443c <___vfprintf_internal_r+0xdfc>
1000442c:	42000204 	addi	r8,r8,8
10004430:	843ffc04 	addi	r16,r16,-16
10004434:	81000448 	cmpgei	r4,r16,17
10004438:	20036826 	beq	r4,zero,100051dc <___vfprintf_internal_r+0x1b9c>
1000443c:	10800044 	addi	r2,r2,1
10004440:	18c00404 	addi	r3,r3,16
10004444:	44400015 	stw	r17,0(r8)
10004448:	45000115 	stw	r20,4(r8)
1000444c:	d8c01e15 	stw	r3,120(sp)
10004450:	d8801d15 	stw	r2,116(sp)
10004454:	11000208 	cmpgei	r4,r2,8
10004458:	203ff426 	beq	r4,zero,1000442c <___vfprintf_internal_r+0xdec>
1000445c:	d9801c04 	addi	r6,sp,112
10004460:	980b883a 	mov	r5,r19
10004464:	e009883a 	mov	r4,fp
10004468:	000a7b80 	call	1000a7b8 <__sprint_r>
1000446c:	103d531e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004470:	d8c01e17 	ldw	r3,120(sp)
10004474:	d8801d17 	ldw	r2,116(sp)
10004478:	b811883a 	mov	r8,r23
1000447c:	003fec06 	br	10004430 <___vfprintf_internal_r+0xdf0>
10004480:	8d4fc83a 	sub	r7,r17,r21
10004484:	01fe2f0e 	bge	zero,r7,10003d44 <___vfprintf_internal_r+0x704>
10004488:	03040074 	movhi	r12,4097
1000448c:	39000450 	cmplti	r4,r7,17
10004490:	630ade84 	addi	r12,r12,11130
10004494:	d8801d17 	ldw	r2,116(sp)
10004498:	2000271e 	bne	r4,zero,10004538 <___vfprintf_internal_r+0xef8>
1000449c:	dc000e15 	stw	r16,56(sp)
100044a0:	dc800f15 	stw	r18,60(sp)
100044a4:	dc401015 	stw	r17,64(sp)
100044a8:	03400404 	movi	r13,16
100044ac:	3821883a 	mov	r16,r7
100044b0:	dac01215 	stw	r11,72(sp)
100044b4:	dc400517 	ldw	r17,20(sp)
100044b8:	6025883a 	mov	r18,r12
100044bc:	00000406 	br	100044d0 <___vfprintf_internal_r+0xe90>
100044c0:	843ffc04 	addi	r16,r16,-16
100044c4:	81000448 	cmpgei	r4,r16,17
100044c8:	42000204 	addi	r8,r8,8
100044cc:	20001426 	beq	r4,zero,10004520 <___vfprintf_internal_r+0xee0>
100044d0:	10800044 	addi	r2,r2,1
100044d4:	18c00404 	addi	r3,r3,16
100044d8:	44800015 	stw	r18,0(r8)
100044dc:	43400115 	stw	r13,4(r8)
100044e0:	d8c01e15 	stw	r3,120(sp)
100044e4:	d8801d15 	stw	r2,116(sp)
100044e8:	11000208 	cmpgei	r4,r2,8
100044ec:	203ff426 	beq	r4,zero,100044c0 <___vfprintf_internal_r+0xe80>
100044f0:	d9801c04 	addi	r6,sp,112
100044f4:	980b883a 	mov	r5,r19
100044f8:	8809883a 	mov	r4,r17
100044fc:	000a7b80 	call	1000a7b8 <__sprint_r>
10004500:	103d2e1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004504:	843ffc04 	addi	r16,r16,-16
10004508:	81000448 	cmpgei	r4,r16,17
1000450c:	d8c01e17 	ldw	r3,120(sp)
10004510:	d8801d17 	ldw	r2,116(sp)
10004514:	b811883a 	mov	r8,r23
10004518:	03400404 	movi	r13,16
1000451c:	203fec1e 	bne	r4,zero,100044d0 <___vfprintf_internal_r+0xe90>
10004520:	800f883a 	mov	r7,r16
10004524:	9019883a 	mov	r12,r18
10004528:	dc000e17 	ldw	r16,56(sp)
1000452c:	dc401017 	ldw	r17,64(sp)
10004530:	dac01217 	ldw	r11,72(sp)
10004534:	dc800f17 	ldw	r18,60(sp)
10004538:	10800044 	addi	r2,r2,1
1000453c:	19c7883a 	add	r3,r3,r7
10004540:	d8801d15 	stw	r2,116(sp)
10004544:	43000015 	stw	r12,0(r8)
10004548:	41c00115 	stw	r7,4(r8)
1000454c:	d8c01e15 	stw	r3,120(sp)
10004550:	10800208 	cmpgei	r2,r2,8
10004554:	1002cd1e 	bne	r2,zero,1000508c <___vfprintf_internal_r+0x1a4c>
10004558:	5d0fc83a 	sub	r7,r11,r20
1000455c:	42000204 	addi	r8,r8,8
10004560:	01fdfa0e 	bge	zero,r7,10003d4c <___vfprintf_internal_r+0x70c>
10004564:	03040074 	movhi	r12,4097
10004568:	39000450 	cmplti	r4,r7,17
1000456c:	630ade84 	addi	r12,r12,11130
10004570:	d8801d17 	ldw	r2,116(sp)
10004574:	2000251e 	bne	r4,zero,1000460c <___vfprintf_internal_r+0xfcc>
10004578:	dc000e15 	stw	r16,56(sp)
1000457c:	dc800f15 	stw	r18,60(sp)
10004580:	dc401015 	stw	r17,64(sp)
10004584:	02c00404 	movi	r11,16
10004588:	3821883a 	mov	r16,r7
1000458c:	dc400517 	ldw	r17,20(sp)
10004590:	6025883a 	mov	r18,r12
10004594:	00000406 	br	100045a8 <___vfprintf_internal_r+0xf68>
10004598:	843ffc04 	addi	r16,r16,-16
1000459c:	81000448 	cmpgei	r4,r16,17
100045a0:	42000204 	addi	r8,r8,8
100045a4:	20001426 	beq	r4,zero,100045f8 <___vfprintf_internal_r+0xfb8>
100045a8:	10800044 	addi	r2,r2,1
100045ac:	18c00404 	addi	r3,r3,16
100045b0:	44800015 	stw	r18,0(r8)
100045b4:	42c00115 	stw	r11,4(r8)
100045b8:	d8c01e15 	stw	r3,120(sp)
100045bc:	d8801d15 	stw	r2,116(sp)
100045c0:	11000208 	cmpgei	r4,r2,8
100045c4:	203ff426 	beq	r4,zero,10004598 <___vfprintf_internal_r+0xf58>
100045c8:	d9801c04 	addi	r6,sp,112
100045cc:	980b883a 	mov	r5,r19
100045d0:	8809883a 	mov	r4,r17
100045d4:	000a7b80 	call	1000a7b8 <__sprint_r>
100045d8:	103cf81e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
100045dc:	843ffc04 	addi	r16,r16,-16
100045e0:	81000448 	cmpgei	r4,r16,17
100045e4:	d8c01e17 	ldw	r3,120(sp)
100045e8:	d8801d17 	ldw	r2,116(sp)
100045ec:	b811883a 	mov	r8,r23
100045f0:	02c00404 	movi	r11,16
100045f4:	203fec1e 	bne	r4,zero,100045a8 <___vfprintf_internal_r+0xf68>
100045f8:	800f883a 	mov	r7,r16
100045fc:	9019883a 	mov	r12,r18
10004600:	dc401017 	ldw	r17,64(sp)
10004604:	dc000e17 	ldw	r16,56(sp)
10004608:	dc800f17 	ldw	r18,60(sp)
1000460c:	10800044 	addi	r2,r2,1
10004610:	19c7883a 	add	r3,r3,r7
10004614:	d8801d15 	stw	r2,116(sp)
10004618:	43000015 	stw	r12,0(r8)
1000461c:	41c00115 	stw	r7,4(r8)
10004620:	d8c01e15 	stw	r3,120(sp)
10004624:	10800208 	cmpgei	r2,r2,8
10004628:	1001621e 	bne	r2,zero,10004bb4 <___vfprintf_internal_r+0x1574>
1000462c:	42000204 	addi	r8,r8,8
10004630:	003dc606 	br	10003d4c <___vfprintf_internal_r+0x70c>
10004634:	d9000517 	ldw	r4,20(sp)
10004638:	d9801c04 	addi	r6,sp,112
1000463c:	980b883a 	mov	r5,r19
10004640:	000a7b80 	call	1000a7b8 <__sprint_r>
10004644:	103dd726 	beq	r2,zero,10003da4 <___vfprintf_internal_r+0x764>
10004648:	003cdc06 	br	100039bc <___vfprintf_internal_r+0x37c>
1000464c:	d9000517 	ldw	r4,20(sp)
10004650:	d9801c04 	addi	r6,sp,112
10004654:	980b883a 	mov	r5,r19
10004658:	000a7b80 	call	1000a7b8 <__sprint_r>
1000465c:	103cd71e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004660:	d9001617 	ldw	r4,88(sp)
10004664:	d8c01e17 	ldw	r3,120(sp)
10004668:	b811883a 	mov	r8,r23
1000466c:	2002951e 	bne	r4,zero,100050c4 <___vfprintf_internal_r+0x1a84>
10004670:	d9000817 	ldw	r4,32(sp)
10004674:	9080004c 	andi	r2,r18,1
10004678:	1104b03a 	or	r2,r2,r4
1000467c:	103dbf26 	beq	r2,zero,10003d7c <___vfprintf_internal_r+0x73c>
10004680:	d8800d17 	ldw	r2,52(sp)
10004684:	d9000b17 	ldw	r4,44(sp)
10004688:	40800015 	stw	r2,0(r8)
1000468c:	d8801d17 	ldw	r2,116(sp)
10004690:	20c7883a 	add	r3,r4,r3
10004694:	41000115 	stw	r4,4(r8)
10004698:	10800044 	addi	r2,r2,1
1000469c:	d8c01e15 	stw	r3,120(sp)
100046a0:	d8801d15 	stw	r2,116(sp)
100046a4:	11000208 	cmpgei	r4,r2,8
100046a8:	2003641e 	bne	r4,zero,1000543c <___vfprintf_internal_r+0x1dfc>
100046ac:	42000204 	addi	r8,r8,8
100046b0:	d9000817 	ldw	r4,32(sp)
100046b4:	10800044 	addi	r2,r2,1
100046b8:	d8801d15 	stw	r2,116(sp)
100046bc:	20c7883a 	add	r3,r4,r3
100046c0:	44000015 	stw	r16,0(r8)
100046c4:	41000115 	stw	r4,4(r8)
100046c8:	d8c01e15 	stw	r3,120(sp)
100046cc:	10800208 	cmpgei	r2,r2,8
100046d0:	103da926 	beq	r2,zero,10003d78 <___vfprintf_internal_r+0x738>
100046d4:	d9000517 	ldw	r4,20(sp)
100046d8:	d9801c04 	addi	r6,sp,112
100046dc:	980b883a 	mov	r5,r19
100046e0:	000a7b80 	call	1000a7b8 <__sprint_r>
100046e4:	103cb51e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
100046e8:	d8c01e17 	ldw	r3,120(sp)
100046ec:	b811883a 	mov	r8,r23
100046f0:	003da206 	br	10003d7c <___vfprintf_internal_r+0x73c>
100046f4:	d8800817 	ldw	r2,32(sp)
100046f8:	df001d17 	ldw	fp,116(sp)
100046fc:	18c00044 	addi	r3,r3,1
10004700:	10800088 	cmpgei	r2,r2,2
10004704:	e5000044 	addi	r20,fp,1
10004708:	42800204 	addi	r10,r8,8
1000470c:	1000fb26 	beq	r2,zero,10004afc <___vfprintf_internal_r+0x14bc>
10004710:	00800044 	movi	r2,1
10004714:	40800115 	stw	r2,4(r8)
10004718:	44000015 	stw	r16,0(r8)
1000471c:	d8c01e15 	stw	r3,120(sp)
10004720:	dd001d15 	stw	r20,116(sp)
10004724:	a0800210 	cmplti	r2,r20,8
10004728:	10022c26 	beq	r2,zero,10004fdc <___vfprintf_internal_r+0x199c>
1000472c:	d8800b17 	ldw	r2,44(sp)
10004730:	d9000d17 	ldw	r4,52(sp)
10004734:	a5000044 	addi	r20,r20,1
10004738:	1887883a 	add	r3,r3,r2
1000473c:	50800115 	stw	r2,4(r10)
10004740:	51000015 	stw	r4,0(r10)
10004744:	d8c01e15 	stw	r3,120(sp)
10004748:	dd001d15 	stw	r20,116(sp)
1000474c:	a0800208 	cmpgei	r2,r20,8
10004750:	1002191e 	bne	r2,zero,10004fb8 <___vfprintf_internal_r+0x1978>
10004754:	52800204 	addi	r10,r10,8
10004758:	d8800817 	ldw	r2,32(sp)
1000475c:	d9000917 	ldw	r4,36(sp)
10004760:	d9400a17 	ldw	r5,40(sp)
10004764:	52000204 	addi	r8,r10,8
10004768:	12ffffc4 	addi	r11,r2,-1
1000476c:	a7000044 	addi	fp,r20,1
10004770:	000d883a 	mov	r6,zero
10004774:	000f883a 	mov	r7,zero
10004778:	d8c01215 	stw	r3,72(sp)
1000477c:	da800f15 	stw	r10,60(sp)
10004780:	da000e15 	stw	r8,56(sp)
10004784:	dac00715 	stw	r11,28(sp)
10004788:	df001015 	stw	fp,64(sp)
1000478c:	000e4d80 	call	1000e4d8 <__eqdf2>
10004790:	dac00717 	ldw	r11,28(sp)
10004794:	da000e17 	ldw	r8,56(sp)
10004798:	da800f17 	ldw	r10,60(sp)
1000479c:	db401017 	ldw	r13,64(sp)
100047a0:	d8c01217 	ldw	r3,72(sp)
100047a4:	1000e126 	beq	r2,zero,10004b2c <___vfprintf_internal_r+0x14ec>
100047a8:	84000044 	addi	r16,r16,1
100047ac:	1ac7883a 	add	r3,r3,r11
100047b0:	df001d15 	stw	fp,116(sp)
100047b4:	54000015 	stw	r16,0(r10)
100047b8:	52c00115 	stw	r11,4(r10)
100047bc:	d8c01e15 	stw	r3,120(sp)
100047c0:	e7000208 	cmpgei	fp,fp,8
100047c4:	e001aa1e 	bne	fp,zero,10004e70 <___vfprintf_internal_r+0x1830>
100047c8:	50800404 	addi	r2,r10,16
100047cc:	a7000084 	addi	fp,r20,2
100047d0:	4015883a 	mov	r10,r8
100047d4:	1011883a 	mov	r8,r2
100047d8:	d9001117 	ldw	r4,68(sp)
100047dc:	d8801844 	addi	r2,sp,97
100047e0:	df001d15 	stw	fp,116(sp)
100047e4:	20c7883a 	add	r3,r4,r3
100047e8:	50800015 	stw	r2,0(r10)
100047ec:	51000115 	stw	r4,4(r10)
100047f0:	d8c01e15 	stw	r3,120(sp)
100047f4:	e7000210 	cmplti	fp,fp,8
100047f8:	e03d601e 	bne	fp,zero,10003d7c <___vfprintf_internal_r+0x73c>
100047fc:	003fb506 	br	100046d4 <___vfprintf_internal_r+0x1094>
10004800:	9019883a 	mov	r12,r18
10004804:	003e1906 	br	1000406c <___vfprintf_internal_r+0xa2c>
10004808:	03040074 	movhi	r12,4097
1000480c:	39000450 	cmplti	r4,r7,17
10004810:	630ae284 	addi	r12,r12,11146
10004814:	d8801d17 	ldw	r2,116(sp)
10004818:	20002b1e 	bne	r4,zero,100048c8 <___vfprintf_internal_r+0x1288>
1000481c:	dc001015 	stw	r16,64(sp)
10004820:	dc801215 	stw	r18,72(sp)
10004824:	dc401315 	stw	r17,76(sp)
10004828:	03c00404 	movi	r15,16
1000482c:	db800e15 	stw	r14,56(sp)
10004830:	db400f15 	stw	r13,60(sp)
10004834:	dac01415 	stw	r11,80(sp)
10004838:	3821883a 	mov	r16,r7
1000483c:	dc400517 	ldw	r17,20(sp)
10004840:	6025883a 	mov	r18,r12
10004844:	00000406 	br	10004858 <___vfprintf_internal_r+0x1218>
10004848:	843ffc04 	addi	r16,r16,-16
1000484c:	81000448 	cmpgei	r4,r16,17
10004850:	42000204 	addi	r8,r8,8
10004854:	20001426 	beq	r4,zero,100048a8 <___vfprintf_internal_r+0x1268>
10004858:	10800044 	addi	r2,r2,1
1000485c:	18c00404 	addi	r3,r3,16
10004860:	44800015 	stw	r18,0(r8)
10004864:	43c00115 	stw	r15,4(r8)
10004868:	d8c01e15 	stw	r3,120(sp)
1000486c:	d8801d15 	stw	r2,116(sp)
10004870:	11000208 	cmpgei	r4,r2,8
10004874:	203ff426 	beq	r4,zero,10004848 <___vfprintf_internal_r+0x1208>
10004878:	d9801c04 	addi	r6,sp,112
1000487c:	980b883a 	mov	r5,r19
10004880:	8809883a 	mov	r4,r17
10004884:	000a7b80 	call	1000a7b8 <__sprint_r>
10004888:	103c4c1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
1000488c:	843ffc04 	addi	r16,r16,-16
10004890:	81000448 	cmpgei	r4,r16,17
10004894:	d8c01e17 	ldw	r3,120(sp)
10004898:	d8801d17 	ldw	r2,116(sp)
1000489c:	b811883a 	mov	r8,r23
100048a0:	03c00404 	movi	r15,16
100048a4:	203fec1e 	bne	r4,zero,10004858 <___vfprintf_internal_r+0x1218>
100048a8:	800f883a 	mov	r7,r16
100048ac:	9019883a 	mov	r12,r18
100048b0:	db800e17 	ldw	r14,56(sp)
100048b4:	db400f17 	ldw	r13,60(sp)
100048b8:	dc401317 	ldw	r17,76(sp)
100048bc:	dac01417 	ldw	r11,80(sp)
100048c0:	dc001017 	ldw	r16,64(sp)
100048c4:	dc801217 	ldw	r18,72(sp)
100048c8:	10800044 	addi	r2,r2,1
100048cc:	19c7883a 	add	r3,r3,r7
100048d0:	d8801d15 	stw	r2,116(sp)
100048d4:	43000015 	stw	r12,0(r8)
100048d8:	41c00115 	stw	r7,4(r8)
100048dc:	d8c01e15 	stw	r3,120(sp)
100048e0:	10800208 	cmpgei	r2,r2,8
100048e4:	1001d41e 	bne	r2,zero,10005038 <___vfprintf_internal_r+0x19f8>
100048e8:	42000204 	addi	r8,r8,8
100048ec:	003cf806 	br	10003cd0 <___vfprintf_internal_r+0x690>
100048f0:	d9000517 	ldw	r4,20(sp)
100048f4:	d9801c04 	addi	r6,sp,112
100048f8:	980b883a 	mov	r5,r19
100048fc:	dac01015 	stw	r11,64(sp)
10004900:	db400f15 	stw	r13,60(sp)
10004904:	db800e15 	stw	r14,56(sp)
10004908:	000a7b80 	call	1000a7b8 <__sprint_r>
1000490c:	103c2b1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004910:	d8c01e17 	ldw	r3,120(sp)
10004914:	b811883a 	mov	r8,r23
10004918:	dac01017 	ldw	r11,64(sp)
1000491c:	db400f17 	ldw	r13,60(sp)
10004920:	db800e17 	ldw	r14,56(sp)
10004924:	003cf806 	br	10003d08 <___vfprintf_internal_r+0x6c8>
10004928:	d9000517 	ldw	r4,20(sp)
1000492c:	d9801c04 	addi	r6,sp,112
10004930:	980b883a 	mov	r5,r19
10004934:	dac00f15 	stw	r11,60(sp)
10004938:	db400e15 	stw	r13,56(sp)
1000493c:	000a7b80 	call	1000a7b8 <__sprint_r>
10004940:	103c1e1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004944:	d8c01e17 	ldw	r3,120(sp)
10004948:	b811883a 	mov	r8,r23
1000494c:	dac00f17 	ldw	r11,60(sp)
10004950:	db400e17 	ldw	r13,56(sp)
10004954:	003cf906 	br	10003d3c <___vfprintf_internal_r+0x6fc>
10004958:	d9000c17 	ldw	r4,48(sp)
1000495c:	b821883a 	mov	r16,r23
10004960:	a88003cc 	andi	r2,r21,15
10004964:	a006973a 	slli	r3,r20,28
10004968:	2085883a 	add	r2,r4,r2
1000496c:	a82ad13a 	srli	r21,r21,4
10004970:	10800003 	ldbu	r2,0(r2)
10004974:	a028d13a 	srli	r20,r20,4
10004978:	843fffc4 	addi	r16,r16,-1
1000497c:	1d6ab03a 	or	r21,r3,r21
10004980:	80800005 	stb	r2,0(r16)
10004984:	ad04b03a 	or	r2,r21,r20
10004988:	103ff51e 	bne	r2,zero,10004960 <___vfprintf_internal_r+0x1320>
1000498c:	bc29c83a 	sub	r20,r23,r16
10004990:	6025883a 	mov	r18,r12
10004994:	003e3d06 	br	1000428c <___vfprintf_internal_r+0xc4c>
10004998:	d9001617 	ldw	r4,88(sp)
1000499c:	0101980e 	bge	zero,r4,10005000 <___vfprintf_internal_r+0x19c0>
100049a0:	d8800717 	ldw	r2,28(sp)
100049a4:	d9000817 	ldw	r4,32(sp)
100049a8:	1039883a 	mov	fp,r2
100049ac:	20812516 	blt	r4,r2,10004e44 <___vfprintf_internal_r+0x1804>
100049b0:	07000a0e 	bge	zero,fp,100049dc <___vfprintf_internal_r+0x139c>
100049b4:	d8801d17 	ldw	r2,116(sp)
100049b8:	1f07883a 	add	r3,r3,fp
100049bc:	44000015 	stw	r16,0(r8)
100049c0:	10800044 	addi	r2,r2,1
100049c4:	d8801d15 	stw	r2,116(sp)
100049c8:	47000115 	stw	fp,4(r8)
100049cc:	d8c01e15 	stw	r3,120(sp)
100049d0:	10800208 	cmpgei	r2,r2,8
100049d4:	1002d91e 	bne	r2,zero,1000553c <___vfprintf_internal_r+0x1efc>
100049d8:	42000204 	addi	r8,r8,8
100049dc:	e0013e16 	blt	fp,zero,10004ed8 <___vfprintf_internal_r+0x1898>
100049e0:	d8800717 	ldw	r2,28(sp)
100049e4:	1739c83a 	sub	fp,r2,fp
100049e8:	07014516 	blt	zero,fp,10004f00 <___vfprintf_internal_r+0x18c0>
100049ec:	d9001617 	ldw	r4,88(sp)
100049f0:	d8800817 	ldw	r2,32(sp)
100049f4:	2081160e 	bge	r4,r2,10004e50 <___vfprintf_internal_r+0x1810>
100049f8:	d8800d17 	ldw	r2,52(sp)
100049fc:	d9400b17 	ldw	r5,44(sp)
10004a00:	40800015 	stw	r2,0(r8)
10004a04:	d8801d17 	ldw	r2,116(sp)
10004a08:	1947883a 	add	r3,r3,r5
10004a0c:	41400115 	stw	r5,4(r8)
10004a10:	10800044 	addi	r2,r2,1
10004a14:	d8801d15 	stw	r2,116(sp)
10004a18:	d8c01e15 	stw	r3,120(sp)
10004a1c:	10800208 	cmpgei	r2,r2,8
10004a20:	1002601e 	bne	r2,zero,100053a4 <___vfprintf_internal_r+0x1d64>
10004a24:	42000204 	addi	r8,r8,8
10004a28:	d8800817 	ldw	r2,32(sp)
10004a2c:	d9400717 	ldw	r5,28(sp)
10004a30:	1105c83a 	sub	r2,r2,r4
10004a34:	29015c0e 	bge	r5,r4,10004fa8 <___vfprintf_internal_r+0x1968>
10004a38:	1039883a 	mov	fp,r2
10004a3c:	07000c0e 	bge	zero,fp,10004a70 <___vfprintf_internal_r+0x1430>
10004a40:	d9000717 	ldw	r4,28(sp)
10004a44:	1f07883a 	add	r3,r3,fp
10004a48:	47000115 	stw	fp,4(r8)
10004a4c:	8121883a 	add	r16,r16,r4
10004a50:	d9001d17 	ldw	r4,116(sp)
10004a54:	44000015 	stw	r16,0(r8)
10004a58:	d8c01e15 	stw	r3,120(sp)
10004a5c:	21000044 	addi	r4,r4,1
10004a60:	d9001d15 	stw	r4,116(sp)
10004a64:	21000208 	cmpgei	r4,r4,8
10004a68:	2002bf1e 	bne	r4,zero,10005568 <___vfprintf_internal_r+0x1f28>
10004a6c:	42000204 	addi	r8,r8,8
10004a70:	e000010e 	bge	fp,zero,10004a78 <___vfprintf_internal_r+0x1438>
10004a74:	0039883a 	mov	fp,zero
10004a78:	1739c83a 	sub	fp,r2,fp
10004a7c:	073cbf0e 	bge	zero,fp,10003d7c <___vfprintf_internal_r+0x73c>
10004a80:	03040074 	movhi	r12,4097
10004a84:	e1000450 	cmplti	r4,fp,17
10004a88:	630ade84 	addi	r12,r12,11130
10004a8c:	d8801d17 	ldw	r2,116(sp)
10004a90:	20023b1e 	bne	r4,zero,10005380 <___vfprintf_internal_r+0x1d40>
10004a94:	dc400715 	stw	r17,28(sp)
10004a98:	05000404 	movi	r20,16
10004a9c:	dc000517 	ldw	r16,20(sp)
10004aa0:	6023883a 	mov	r17,r12
10004aa4:	00000406 	br	10004ab8 <___vfprintf_internal_r+0x1478>
10004aa8:	42000204 	addi	r8,r8,8
10004aac:	e73ffc04 	addi	fp,fp,-16
10004ab0:	e1000448 	cmpgei	r4,fp,17
10004ab4:	20023026 	beq	r4,zero,10005378 <___vfprintf_internal_r+0x1d38>
10004ab8:	10800044 	addi	r2,r2,1
10004abc:	18c00404 	addi	r3,r3,16
10004ac0:	44400015 	stw	r17,0(r8)
10004ac4:	45000115 	stw	r20,4(r8)
10004ac8:	d8c01e15 	stw	r3,120(sp)
10004acc:	d8801d15 	stw	r2,116(sp)
10004ad0:	11000208 	cmpgei	r4,r2,8
10004ad4:	203ff426 	beq	r4,zero,10004aa8 <___vfprintf_internal_r+0x1468>
10004ad8:	d9801c04 	addi	r6,sp,112
10004adc:	980b883a 	mov	r5,r19
10004ae0:	8009883a 	mov	r4,r16
10004ae4:	000a7b80 	call	1000a7b8 <__sprint_r>
10004ae8:	103bb41e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004aec:	d8c01e17 	ldw	r3,120(sp)
10004af0:	d8801d17 	ldw	r2,116(sp)
10004af4:	b811883a 	mov	r8,r23
10004af8:	003fec06 	br	10004aac <___vfprintf_internal_r+0x146c>
10004afc:	9080004c 	andi	r2,r18,1
10004b00:	103f031e 	bne	r2,zero,10004710 <___vfprintf_internal_r+0x10d0>
10004b04:	00800044 	movi	r2,1
10004b08:	dd001d15 	stw	r20,116(sp)
10004b0c:	44000015 	stw	r16,0(r8)
10004b10:	40800115 	stw	r2,4(r8)
10004b14:	d8c01e15 	stw	r3,120(sp)
10004b18:	a5000208 	cmpgei	r20,r20,8
10004b1c:	a000d41e 	bne	r20,zero,10004e70 <___vfprintf_internal_r+0x1830>
10004b20:	e7000084 	addi	fp,fp,2
10004b24:	42000404 	addi	r8,r8,16
10004b28:	003f2b06 	br	100047d8 <___vfprintf_internal_r+0x1198>
10004b2c:	02ff2a0e 	bge	zero,r11,100047d8 <___vfprintf_internal_r+0x1198>
10004b30:	58800450 	cmplti	r2,r11,17
10004b34:	03040074 	movhi	r12,4097
10004b38:	1002f81e 	bne	r2,zero,1000571c <___vfprintf_internal_r+0x20dc>
10004b3c:	630ade84 	addi	r12,r12,11130
10004b40:	dc800715 	stw	r18,28(sp)
10004b44:	dc400e15 	stw	r17,56(sp)
10004b48:	04000404 	movi	r16,16
10004b4c:	5823883a 	mov	r17,r11
10004b50:	df000517 	ldw	fp,20(sp)
10004b54:	6025883a 	mov	r18,r12
10004b58:	6829883a 	mov	r20,r13
10004b5c:	00000506 	br	10004b74 <___vfprintf_internal_r+0x1534>
10004b60:	52800204 	addi	r10,r10,8
10004b64:	8c7ffc04 	addi	r17,r17,-16
10004b68:	88800448 	cmpgei	r2,r17,17
10004b6c:	10018a26 	beq	r2,zero,10005198 <___vfprintf_internal_r+0x1b58>
10004b70:	a5000044 	addi	r20,r20,1
10004b74:	18c00404 	addi	r3,r3,16
10004b78:	54800015 	stw	r18,0(r10)
10004b7c:	54000115 	stw	r16,4(r10)
10004b80:	d8c01e15 	stw	r3,120(sp)
10004b84:	dd001d15 	stw	r20,116(sp)
10004b88:	a0800208 	cmpgei	r2,r20,8
10004b8c:	103ff426 	beq	r2,zero,10004b60 <___vfprintf_internal_r+0x1520>
10004b90:	d9801c04 	addi	r6,sp,112
10004b94:	980b883a 	mov	r5,r19
10004b98:	e009883a 	mov	r4,fp
10004b9c:	000a7b80 	call	1000a7b8 <__sprint_r>
10004ba0:	103b861e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004ba4:	dd001d17 	ldw	r20,116(sp)
10004ba8:	d8c01e17 	ldw	r3,120(sp)
10004bac:	b815883a 	mov	r10,r23
10004bb0:	003fec06 	br	10004b64 <___vfprintf_internal_r+0x1524>
10004bb4:	d9000517 	ldw	r4,20(sp)
10004bb8:	d9801c04 	addi	r6,sp,112
10004bbc:	980b883a 	mov	r5,r19
10004bc0:	000a7b80 	call	1000a7b8 <__sprint_r>
10004bc4:	103b7d1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004bc8:	d8c01e17 	ldw	r3,120(sp)
10004bcc:	b811883a 	mov	r8,r23
10004bd0:	003c5e06 	br	10003d4c <___vfprintf_internal_r+0x70c>
10004bd4:	0029883a 	mov	r20,zero
10004bd8:	003bdf06 	br	10003b58 <___vfprintf_internal_r+0x518>
10004bdc:	b025883a 	mov	r18,r22
10004be0:	003aea06 	br	1000378c <___vfprintf_internal_r+0x14c>
10004be4:	b821883a 	mov	r16,r23
10004be8:	003da806 	br	1000428c <___vfprintf_internal_r+0xc4c>
10004bec:	d9000917 	ldw	r4,36(sp)
10004bf0:	d9400a17 	ldw	r5,40(sp)
10004bf4:	da000f15 	stw	r8,60(sp)
10004bf8:	200d883a 	mov	r6,r4
10004bfc:	280f883a 	mov	r7,r5
10004c00:	dac00e15 	stw	r11,56(sp)
10004c04:	db000715 	stw	r12,28(sp)
10004c08:	000f7300 	call	1000f730 <__unorddf2>
10004c0c:	db000717 	ldw	r12,28(sp)
10004c10:	dac00e17 	ldw	r11,56(sp)
10004c14:	da000f17 	ldw	r8,60(sp)
10004c18:	1002af1e 	bne	r2,zero,100056d8 <___vfprintf_internal_r+0x2098>
10004c1c:	00fff7c4 	movi	r3,-33
10004c20:	e0c6703a 	and	r3,fp,r3
10004c24:	58bfffe0 	cmpeqi	r2,r11,-1
10004c28:	d8c00715 	stw	r3,28(sp)
10004c2c:	10024c1e 	bne	r2,zero,10005560 <___vfprintf_internal_r+0x1f20>
10004c30:	188011d8 	cmpnei	r2,r3,71
10004c34:	1001fe26 	beq	r2,zero,10005430 <___vfprintf_internal_r+0x1df0>
10004c38:	d8800a17 	ldw	r2,40(sp)
10004c3c:	64804014 	ori	r18,r12,256
10004c40:	1001e116 	blt	r2,zero,100053c8 <___vfprintf_internal_r+0x1d88>
10004c44:	dd400a17 	ldw	r21,40(sp)
10004c48:	d8000e05 	stb	zero,56(sp)
10004c4c:	e08019a0 	cmpeqi	r2,fp,102
10004c50:	d8800f15 	stw	r2,60(sp)
10004c54:	1001741e 	bne	r2,zero,10005228 <___vfprintf_internal_r+0x1be8>
10004c58:	e08011a0 	cmpeqi	r2,fp,70
10004c5c:	1001721e 	bne	r2,zero,10005228 <___vfprintf_internal_r+0x1be8>
10004c60:	d8800717 	ldw	r2,28(sp)
10004c64:	da001215 	stw	r8,72(sp)
10004c68:	db001015 	stw	r12,64(sp)
10004c6c:	10801158 	cmpnei	r2,r2,69
10004c70:	10020526 	beq	r2,zero,10005488 <___vfprintf_internal_r+0x1e48>
10004c74:	d8801a04 	addi	r2,sp,104
10004c78:	d8800315 	stw	r2,12(sp)
10004c7c:	d9400917 	ldw	r5,36(sp)
10004c80:	d8801704 	addi	r2,sp,92
10004c84:	d9000517 	ldw	r4,20(sp)
10004c88:	d8800215 	stw	r2,8(sp)
10004c8c:	d8801604 	addi	r2,sp,88
10004c90:	dac00015 	stw	r11,0(sp)
10004c94:	d8800115 	stw	r2,4(sp)
10004c98:	01c00084 	movi	r7,2
10004c9c:	a80d883a 	mov	r6,r21
10004ca0:	dac00815 	stw	r11,32(sp)
10004ca4:	0005be80 	call	10005be8 <_dtoa_r>
10004ca8:	dac00817 	ldw	r11,32(sp)
10004cac:	1021883a 	mov	r16,r2
10004cb0:	e08019d8 	cmpnei	r2,fp,103
10004cb4:	db001017 	ldw	r12,64(sp)
10004cb8:	da001217 	ldw	r8,72(sp)
10004cbc:	5829883a 	mov	r20,r11
10004cc0:	1002031e 	bne	r2,zero,100054d0 <___vfprintf_internal_r+0x1e90>
10004cc4:	6080004c 	andi	r2,r12,1
10004cc8:	1002031e 	bne	r2,zero,100054d8 <___vfprintf_internal_r+0x1e98>
10004ccc:	d8c01617 	ldw	r3,88(sp)
10004cd0:	d8800717 	ldw	r2,28(sp)
10004cd4:	d8c00715 	stw	r3,28(sp)
10004cd8:	d8c01a17 	ldw	r3,104(sp)
10004cdc:	108011e0 	cmpeqi	r2,r2,71
10004ce0:	1c07c83a 	sub	r3,r3,r16
10004ce4:	d8c00815 	stw	r3,32(sp)
10004ce8:	10000526 	beq	r2,zero,10004d00 <___vfprintf_internal_r+0x16c0>
10004cec:	d8c00717 	ldw	r3,28(sp)
10004cf0:	18bfff50 	cmplti	r2,r3,-3
10004cf4:	1000011e 	bne	r2,zero,10004cfc <___vfprintf_internal_r+0x16bc>
10004cf8:	58c2050e 	bge	r11,r3,10005510 <___vfprintf_internal_r+0x1ed0>
10004cfc:	e73fff84 	addi	fp,fp,-2
10004d00:	d8800717 	ldw	r2,28(sp)
10004d04:	df001845 	stb	fp,97(sp)
10004d08:	153fffc4 	addi	r20,r2,-1
10004d0c:	dd001615 	stw	r20,88(sp)
10004d10:	a0027916 	blt	r20,zero,100056f8 <___vfprintf_internal_r+0x20b8>
10004d14:	00800ac4 	movi	r2,43
10004d18:	d8801885 	stb	r2,98(sp)
10004d1c:	a0800290 	cmplti	r2,r20,10
10004d20:	1002581e 	bne	r2,zero,10005684 <___vfprintf_internal_r+0x2044>
10004d24:	dc000715 	stw	r16,28(sp)
10004d28:	dd401bc4 	addi	r21,sp,111
10004d2c:	a021883a 	mov	r16,r20
10004d30:	db000f15 	stw	r12,60(sp)
10004d34:	9829883a 	mov	r20,r19
10004d38:	4027883a 	mov	r19,r8
10004d3c:	00000206 	br	10004d48 <___vfprintf_internal_r+0x1708>
10004d40:	202b883a 	mov	r21,r4
10004d44:	1021883a 	mov	r16,r2
10004d48:	8009883a 	mov	r4,r16
10004d4c:	01400284 	movi	r5,10
10004d50:	000d1580 	call	1000d158 <__modsi3>
10004d54:	10800c04 	addi	r2,r2,48
10004d58:	8009883a 	mov	r4,r16
10004d5c:	a8bfffc5 	stb	r2,-1(r21)
10004d60:	01400284 	movi	r5,10
10004d64:	000d0d80 	call	1000d0d8 <__divsi3>
10004d68:	80c01908 	cmpgei	r3,r16,100
10004d6c:	a93fffc4 	addi	r4,r21,-1
10004d70:	183ff31e 	bne	r3,zero,10004d40 <___vfprintf_internal_r+0x1700>
10004d74:	10800c04 	addi	r2,r2,48
10004d78:	20bfffc5 	stb	r2,-1(r4)
10004d7c:	a8ffff84 	addi	r3,r21,-2
10004d80:	d9001bc4 	addi	r4,sp,111
10004d84:	9811883a 	mov	r8,r19
10004d88:	dc000717 	ldw	r16,28(sp)
10004d8c:	db000f17 	ldw	r12,60(sp)
10004d90:	a027883a 	mov	r19,r20
10004d94:	1902732e 	bgeu	r3,r4,10005764 <___vfprintf_internal_r+0x2124>
10004d98:	d90018c4 	addi	r4,sp,99
10004d9c:	00000106 	br	10004da4 <___vfprintf_internal_r+0x1764>
10004da0:	18800003 	ldbu	r2,0(r3)
10004da4:	21000044 	addi	r4,r4,1
10004da8:	20bfffc5 	stb	r2,-1(r4)
10004dac:	18c00044 	addi	r3,r3,1
10004db0:	d8801bc4 	addi	r2,sp,111
10004db4:	18bffa1e 	bne	r3,r2,10004da0 <___vfprintf_internal_r+0x1760>
10004db8:	d8801c44 	addi	r2,sp,113
10004dbc:	d8c018c4 	addi	r3,sp,99
10004dc0:	1545c83a 	sub	r2,r2,r21
10004dc4:	1885883a 	add	r2,r3,r2
10004dc8:	d8c01844 	addi	r3,sp,97
10004dcc:	10c5c83a 	sub	r2,r2,r3
10004dd0:	d8801115 	stw	r2,68(sp)
10004dd4:	d8c00817 	ldw	r3,32(sp)
10004dd8:	d9001117 	ldw	r4,68(sp)
10004ddc:	18800088 	cmpgei	r2,r3,2
10004de0:	1929883a 	add	r20,r3,r4
10004de4:	10024926 	beq	r2,zero,1000570c <___vfprintf_internal_r+0x20cc>
10004de8:	d8800b17 	ldw	r2,44(sp)
10004dec:	a0a9883a 	add	r20,r20,r2
10004df0:	a02b883a 	mov	r21,r20
10004df4:	a000010e 	bge	r20,zero,10004dfc <___vfprintf_internal_r+0x17bc>
10004df8:	002b883a 	mov	r21,zero
10004dfc:	d8000715 	stw	zero,28(sp)
10004e00:	00013f06 	br	10005300 <___vfprintf_internal_r+0x1cc0>
10004e04:	00800c04 	movi	r2,48
10004e08:	d8801585 	stb	r2,86(sp)
10004e0c:	df0015c5 	stb	fp,87(sp)
10004e10:	63000094 	ori	r12,r12,2
10004e14:	00800084 	movi	r2,2
10004e18:	003ce406 	br	100041ac <___vfprintf_internal_r+0xb6c>
10004e1c:	d9400417 	ldw	r5,16(sp)
10004e20:	20800017 	ldw	r2,0(r4)
10004e24:	d8c00615 	stw	r3,24(sp)
10004e28:	2809d7fa 	srai	r4,r5,31
10004e2c:	11400015 	stw	r5,0(r2)
10004e30:	11000115 	stw	r4,4(r2)
10004e34:	003a3706 	br	10003714 <___vfprintf_internal_r+0xd4>
10004e38:	0463c83a 	sub	r17,zero,r17
10004e3c:	d8800615 	stw	r2,24(sp)
10004e40:	003b1806 	br	10003aa4 <___vfprintf_internal_r+0x464>
10004e44:	2039883a 	mov	fp,r4
10004e48:	073eda16 	blt	zero,fp,100049b4 <___vfprintf_internal_r+0x1374>
10004e4c:	003ee306 	br	100049dc <___vfprintf_internal_r+0x139c>
10004e50:	9080004c 	andi	r2,r18,1
10004e54:	103ee81e 	bne	r2,zero,100049f8 <___vfprintf_internal_r+0x13b8>
10004e58:	d8800817 	ldw	r2,32(sp)
10004e5c:	d9400717 	ldw	r5,28(sp)
10004e60:	1105c83a 	sub	r2,r2,r4
10004e64:	2900500e 	bge	r5,r4,10004fa8 <___vfprintf_internal_r+0x1968>
10004e68:	1039883a 	mov	fp,r2
10004e6c:	003f0006 	br	10004a70 <___vfprintf_internal_r+0x1430>
10004e70:	d9000517 	ldw	r4,20(sp)
10004e74:	d9801c04 	addi	r6,sp,112
10004e78:	980b883a 	mov	r5,r19
10004e7c:	000a7b80 	call	1000a7b8 <__sprint_r>
10004e80:	103ace1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004e84:	df001d17 	ldw	fp,116(sp)
10004e88:	d8c01e17 	ldw	r3,120(sp)
10004e8c:	da002b04 	addi	r8,sp,172
10004e90:	e7000044 	addi	fp,fp,1
10004e94:	b815883a 	mov	r10,r23
10004e98:	003e4f06 	br	100047d8 <___vfprintf_internal_r+0x1198>
10004e9c:	b7000043 	ldbu	fp,1(r22)
10004ea0:	63000814 	ori	r12,r12,32
10004ea4:	b5800044 	addi	r22,r22,1
10004ea8:	e2803fcc 	andi	r10,fp,255
10004eac:	5280201c 	xori	r10,r10,128
10004eb0:	52bfe004 	addi	r10,r10,-128
10004eb4:	003a3d06 	br	100037ac <___vfprintf_internal_r+0x16c>
10004eb8:	d9000517 	ldw	r4,20(sp)
10004ebc:	d9801c04 	addi	r6,sp,112
10004ec0:	980b883a 	mov	r5,r19
10004ec4:	000a7b80 	call	1000a7b8 <__sprint_r>
10004ec8:	103abc1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004ecc:	d8c01e17 	ldw	r3,120(sp)
10004ed0:	b811883a 	mov	r8,r23
10004ed4:	003d4806 	br	100043f8 <___vfprintf_internal_r+0xdb8>
10004ed8:	0039883a 	mov	fp,zero
10004edc:	003ec006 	br	100049e0 <___vfprintf_internal_r+0x13a0>
10004ee0:	588001f0 	cmpltui	r2,r11,7
10004ee4:	5829883a 	mov	r20,r11
10004ee8:	10013b26 	beq	r2,zero,100053d8 <___vfprintf_internal_r+0x1d98>
10004eec:	04040074 	movhi	r16,4097
10004ef0:	a02b883a 	mov	r21,r20
10004ef4:	dc800615 	stw	r18,24(sp)
10004ef8:	840adc04 	addi	r16,r16,11120
10004efc:	003b6906 	br	10003ca4 <___vfprintf_internal_r+0x664>
10004f00:	03040074 	movhi	r12,4097
10004f04:	e1000450 	cmplti	r4,fp,17
10004f08:	630ade84 	addi	r12,r12,11130
10004f0c:	d8801d17 	ldw	r2,116(sp)
10004f10:	20010b1e 	bne	r4,zero,10005340 <___vfprintf_internal_r+0x1d00>
10004f14:	b009883a 	mov	r4,r22
10004f18:	dc000e15 	stw	r16,56(sp)
10004f1c:	dc800f15 	stw	r18,60(sp)
10004f20:	882d883a 	mov	r22,r17
10004f24:	05000404 	movi	r20,16
10004f28:	e023883a 	mov	r17,fp
10004f2c:	dc000517 	ldw	r16,20(sp)
10004f30:	6025883a 	mov	r18,r12
10004f34:	2039883a 	mov	fp,r4
10004f38:	00000406 	br	10004f4c <___vfprintf_internal_r+0x190c>
10004f3c:	42000204 	addi	r8,r8,8
10004f40:	8c7ffc04 	addi	r17,r17,-16
10004f44:	89000448 	cmpgei	r4,r17,17
10004f48:	2000f626 	beq	r4,zero,10005324 <___vfprintf_internal_r+0x1ce4>
10004f4c:	10800044 	addi	r2,r2,1
10004f50:	18c00404 	addi	r3,r3,16
10004f54:	44800015 	stw	r18,0(r8)
10004f58:	45000115 	stw	r20,4(r8)
10004f5c:	d8c01e15 	stw	r3,120(sp)
10004f60:	d8801d15 	stw	r2,116(sp)
10004f64:	11000208 	cmpgei	r4,r2,8
10004f68:	203ff426 	beq	r4,zero,10004f3c <___vfprintf_internal_r+0x18fc>
10004f6c:	d9801c04 	addi	r6,sp,112
10004f70:	980b883a 	mov	r5,r19
10004f74:	8009883a 	mov	r4,r16
10004f78:	000a7b80 	call	1000a7b8 <__sprint_r>
10004f7c:	103a8f1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004f80:	d8c01e17 	ldw	r3,120(sp)
10004f84:	d8801d17 	ldw	r2,116(sp)
10004f88:	b811883a 	mov	r8,r23
10004f8c:	003fec06 	br	10004f40 <___vfprintf_internal_r+0x1900>
10004f90:	d8800617 	ldw	r2,24(sp)
10004f94:	10800017 	ldw	r2,0(r2)
10004f98:	d8c00615 	stw	r3,24(sp)
10004f9c:	d8c00417 	ldw	r3,16(sp)
10004fa0:	10c00015 	stw	r3,0(r2)
10004fa4:	0039db06 	br	10003714 <___vfprintf_internal_r+0xd4>
10004fa8:	d9000817 	ldw	r4,32(sp)
10004fac:	d9400717 	ldw	r5,28(sp)
10004fb0:	2179c83a 	sub	fp,r4,r5
10004fb4:	003ea106 	br	10004a3c <___vfprintf_internal_r+0x13fc>
10004fb8:	d9000517 	ldw	r4,20(sp)
10004fbc:	d9801c04 	addi	r6,sp,112
10004fc0:	980b883a 	mov	r5,r19
10004fc4:	000a7b80 	call	1000a7b8 <__sprint_r>
10004fc8:	103a7c1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004fcc:	d8c01e17 	ldw	r3,120(sp)
10004fd0:	dd001d17 	ldw	r20,116(sp)
10004fd4:	b815883a 	mov	r10,r23
10004fd8:	003ddf06 	br	10004758 <___vfprintf_internal_r+0x1118>
10004fdc:	d9000517 	ldw	r4,20(sp)
10004fe0:	d9801c04 	addi	r6,sp,112
10004fe4:	980b883a 	mov	r5,r19
10004fe8:	000a7b80 	call	1000a7b8 <__sprint_r>
10004fec:	103a731e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10004ff0:	d8c01e17 	ldw	r3,120(sp)
10004ff4:	dd001d17 	ldw	r20,116(sp)
10004ff8:	b815883a 	mov	r10,r23
10004ffc:	003dcb06 	br	1000472c <___vfprintf_internal_r+0x10ec>
10005000:	d8801d17 	ldw	r2,116(sp)
10005004:	01440074 	movhi	r5,4097
10005008:	294ade04 	addi	r5,r5,11128
1000500c:	10800044 	addi	r2,r2,1
10005010:	18c00044 	addi	r3,r3,1
10005014:	41400015 	stw	r5,0(r8)
10005018:	01400044 	movi	r5,1
1000501c:	d8801d15 	stw	r2,116(sp)
10005020:	41400115 	stw	r5,4(r8)
10005024:	d8c01e15 	stw	r3,120(sp)
10005028:	10800208 	cmpgei	r2,r2,8
1000502c:	103d871e 	bne	r2,zero,1000464c <___vfprintf_internal_r+0x100c>
10005030:	42000204 	addi	r8,r8,8
10005034:	003d8d06 	br	1000466c <___vfprintf_internal_r+0x102c>
10005038:	d9000517 	ldw	r4,20(sp)
1000503c:	d9801c04 	addi	r6,sp,112
10005040:	980b883a 	mov	r5,r19
10005044:	dac01015 	stw	r11,64(sp)
10005048:	db400f15 	stw	r13,60(sp)
1000504c:	db800e15 	stw	r14,56(sp)
10005050:	000a7b80 	call	1000a7b8 <__sprint_r>
10005054:	103a591e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10005058:	d8c01e17 	ldw	r3,120(sp)
1000505c:	b811883a 	mov	r8,r23
10005060:	dac01017 	ldw	r11,64(sp)
10005064:	db400f17 	ldw	r13,60(sp)
10005068:	db800e17 	ldw	r14,56(sp)
1000506c:	003b1806 	br	10003cd0 <___vfprintf_internal_r+0x690>
10005070:	d9000517 	ldw	r4,20(sp)
10005074:	d9801c04 	addi	r6,sp,112
10005078:	980b883a 	mov	r5,r19
1000507c:	000a7b80 	call	1000a7b8 <__sprint_r>
10005080:	103a4e1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10005084:	b811883a 	mov	r8,r23
10005088:	003cc706 	br	100043a8 <___vfprintf_internal_r+0xd68>
1000508c:	d9000517 	ldw	r4,20(sp)
10005090:	d9801c04 	addi	r6,sp,112
10005094:	980b883a 	mov	r5,r19
10005098:	dac00e15 	stw	r11,56(sp)
1000509c:	000a7b80 	call	1000a7b8 <__sprint_r>
100050a0:	103a461e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
100050a4:	d8c01e17 	ldw	r3,120(sp)
100050a8:	b811883a 	mov	r8,r23
100050ac:	dac00e17 	ldw	r11,56(sp)
100050b0:	003b2406 	br	10003d44 <___vfprintf_internal_r+0x704>
100050b4:	10c00060 	cmpeqi	r3,r2,1
100050b8:	9019883a 	mov	r12,r18
100050bc:	183bed26 	beq	r3,zero,10004074 <___vfprintf_internal_r+0xa34>
100050c0:	003c6d06 	br	10004278 <___vfprintf_internal_r+0xc38>
100050c4:	d8800d17 	ldw	r2,52(sp)
100050c8:	d9400b17 	ldw	r5,44(sp)
100050cc:	40800015 	stw	r2,0(r8)
100050d0:	d8801d17 	ldw	r2,116(sp)
100050d4:	28c7883a 	add	r3,r5,r3
100050d8:	41400115 	stw	r5,4(r8)
100050dc:	10800044 	addi	r2,r2,1
100050e0:	d8c01e15 	stw	r3,120(sp)
100050e4:	d8801d15 	stw	r2,116(sp)
100050e8:	11400208 	cmpgei	r5,r2,8
100050ec:	2800d31e 	bne	r5,zero,1000543c <___vfprintf_internal_r+0x1dfc>
100050f0:	42000204 	addi	r8,r8,8
100050f4:	203d6e0e 	bge	r4,zero,100046b0 <___vfprintf_internal_r+0x1070>
100050f8:	03040074 	movhi	r12,4097
100050fc:	217ffc08 	cmpgei	r5,r4,-16
10005100:	630ade84 	addi	r12,r12,11130
10005104:	0129c83a 	sub	r20,zero,r4
10005108:	28014a1e 	bne	r5,zero,10005634 <___vfprintf_internal_r+0x1ff4>
1000510c:	dc000715 	stw	r16,28(sp)
10005110:	07000404 	movi	fp,16
10005114:	a021883a 	mov	r16,r20
10005118:	8829883a 	mov	r20,r17
1000511c:	6023883a 	mov	r17,r12
10005120:	00000406 	br	10005134 <___vfprintf_internal_r+0x1af4>
10005124:	42000204 	addi	r8,r8,8
10005128:	843ffc04 	addi	r16,r16,-16
1000512c:	81000448 	cmpgei	r4,r16,17
10005130:	20013c26 	beq	r4,zero,10005624 <___vfprintf_internal_r+0x1fe4>
10005134:	10800044 	addi	r2,r2,1
10005138:	18c00404 	addi	r3,r3,16
1000513c:	44400015 	stw	r17,0(r8)
10005140:	47000115 	stw	fp,4(r8)
10005144:	d8c01e15 	stw	r3,120(sp)
10005148:	d8801d15 	stw	r2,116(sp)
1000514c:	11000208 	cmpgei	r4,r2,8
10005150:	203ff426 	beq	r4,zero,10005124 <___vfprintf_internal_r+0x1ae4>
10005154:	d9000517 	ldw	r4,20(sp)
10005158:	d9801c04 	addi	r6,sp,112
1000515c:	980b883a 	mov	r5,r19
10005160:	000a7b80 	call	1000a7b8 <__sprint_r>
10005164:	103a151e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10005168:	d8c01e17 	ldw	r3,120(sp)
1000516c:	d8801d17 	ldw	r2,116(sp)
10005170:	b811883a 	mov	r8,r23
10005174:	003fec06 	br	10005128 <___vfprintf_internal_r+0x1ae8>
10005178:	8009883a 	mov	r4,r16
1000517c:	00035a80 	call	100035a8 <strlen>
10005180:	1029883a 	mov	r20,r2
10005184:	102b883a 	mov	r21,r2
10005188:	dc800615 	stw	r18,24(sp)
1000518c:	db000717 	ldw	r12,28(sp)
10005190:	da000e17 	ldw	r8,56(sp)
10005194:	003ac306 	br	10003ca4 <___vfprintf_internal_r+0x664>
10005198:	8817883a 	mov	r11,r17
1000519c:	9019883a 	mov	r12,r18
100051a0:	dc400e17 	ldw	r17,56(sp)
100051a4:	dc800717 	ldw	r18,28(sp)
100051a8:	a7000044 	addi	fp,r20,1
100051ac:	50800204 	addi	r2,r10,8
100051b0:	1ac7883a 	add	r3,r3,r11
100051b4:	53000015 	stw	r12,0(r10)
100051b8:	52c00115 	stw	r11,4(r10)
100051bc:	d8c01e15 	stw	r3,120(sp)
100051c0:	df001d15 	stw	fp,116(sp)
100051c4:	e1000208 	cmpgei	r4,fp,8
100051c8:	203f291e 	bne	r4,zero,10004e70 <___vfprintf_internal_r+0x1830>
100051cc:	e7000044 	addi	fp,fp,1
100051d0:	12000204 	addi	r8,r2,8
100051d4:	1015883a 	mov	r10,r2
100051d8:	003d7f06 	br	100047d8 <___vfprintf_internal_r+0x1198>
100051dc:	8819883a 	mov	r12,r17
100051e0:	dc400717 	ldw	r17,28(sp)
100051e4:	10800044 	addi	r2,r2,1
100051e8:	1c07883a 	add	r3,r3,r16
100051ec:	d8801d15 	stw	r2,116(sp)
100051f0:	43000015 	stw	r12,0(r8)
100051f4:	44000115 	stw	r16,4(r8)
100051f8:	d8c01e15 	stw	r3,120(sp)
100051fc:	10800208 	cmpgei	r2,r2,8
10005200:	103add26 	beq	r2,zero,10003d78 <___vfprintf_internal_r+0x738>
10005204:	003d3306 	br	100046d4 <___vfprintf_internal_r+0x1094>
10005208:	d8800615 	stw	r2,24(sp)
1000520c:	0029883a 	mov	r20,zero
10005210:	0005883a 	mov	r2,zero
10005214:	003be506 	br	100041ac <___vfprintf_internal_r+0xb6c>
10005218:	d8800615 	stw	r2,24(sp)
1000521c:	0029883a 	mov	r20,zero
10005220:	00800044 	movi	r2,1
10005224:	003be106 	br	100041ac <___vfprintf_internal_r+0xb6c>
10005228:	d8801a04 	addi	r2,sp,104
1000522c:	d8800315 	stw	r2,12(sp)
10005230:	d9400917 	ldw	r5,36(sp)
10005234:	d8801704 	addi	r2,sp,92
10005238:	d9000517 	ldw	r4,20(sp)
1000523c:	d8800215 	stw	r2,8(sp)
10005240:	d8801604 	addi	r2,sp,88
10005244:	dac00015 	stw	r11,0(sp)
10005248:	d8800115 	stw	r2,4(sp)
1000524c:	01c000c4 	movi	r7,3
10005250:	a80d883a 	mov	r6,r21
10005254:	da001215 	stw	r8,72(sp)
10005258:	db001015 	stw	r12,64(sp)
1000525c:	dac00815 	stw	r11,32(sp)
10005260:	0005be80 	call	10005be8 <_dtoa_r>
10005264:	dac00817 	ldw	r11,32(sp)
10005268:	1021883a 	mov	r16,r2
1000526c:	db001017 	ldw	r12,64(sp)
10005270:	12e9883a 	add	r20,r2,r11
10005274:	80800007 	ldb	r2,0(r16)
10005278:	da001217 	ldw	r8,72(sp)
1000527c:	10800c20 	cmpeqi	r2,r2,48
10005280:	10005b1e 	bne	r2,zero,100053f0 <___vfprintf_internal_r+0x1db0>
10005284:	d8801617 	ldw	r2,88(sp)
10005288:	a0a9883a 	add	r20,r20,r2
1000528c:	d9000917 	ldw	r4,36(sp)
10005290:	000d883a 	mov	r6,zero
10005294:	000f883a 	mov	r7,zero
10005298:	a80b883a 	mov	r5,r21
1000529c:	da001215 	stw	r8,72(sp)
100052a0:	dac01015 	stw	r11,64(sp)
100052a4:	db000815 	stw	r12,32(sp)
100052a8:	000e4d80 	call	1000e4d8 <__eqdf2>
100052ac:	db000817 	ldw	r12,32(sp)
100052b0:	dac01017 	ldw	r11,64(sp)
100052b4:	da001217 	ldw	r8,72(sp)
100052b8:	1000891e 	bne	r2,zero,100054e0 <___vfprintf_internal_r+0x1ea0>
100052bc:	a005883a 	mov	r2,r20
100052c0:	1405c83a 	sub	r2,r2,r16
100052c4:	d8c00717 	ldw	r3,28(sp)
100052c8:	d8800815 	stw	r2,32(sp)
100052cc:	d8801617 	ldw	r2,88(sp)
100052d0:	18c011d8 	cmpnei	r3,r3,71
100052d4:	d8800715 	stw	r2,28(sp)
100052d8:	183e8426 	beq	r3,zero,10004cec <___vfprintf_internal_r+0x16ac>
100052dc:	d8800f17 	ldw	r2,60(sp)
100052e0:	103e8726 	beq	r2,zero,10004d00 <___vfprintf_internal_r+0x16c0>
100052e4:	d8c00717 	ldw	r3,28(sp)
100052e8:	6080004c 	andi	r2,r12,1
100052ec:	12c4b03a 	or	r2,r2,r11
100052f0:	00c10d0e 	bge	zero,r3,10005728 <___vfprintf_internal_r+0x20e8>
100052f4:	1000f11e 	bne	r2,zero,100056bc <___vfprintf_internal_r+0x207c>
100052f8:	dd000717 	ldw	r20,28(sp)
100052fc:	a02b883a 	mov	r21,r20
10005300:	d8800e07 	ldb	r2,56(sp)
10005304:	10007f26 	beq	r2,zero,10005504 <___vfprintf_internal_r+0x1ec4>
10005308:	00800b44 	movi	r2,45
1000530c:	d8801545 	stb	r2,85(sp)
10005310:	0017883a 	mov	r11,zero
10005314:	003be506 	br	100042ac <___vfprintf_internal_r+0xc6c>
10005318:	04040074 	movhi	r16,4097
1000531c:	840ace04 	addi	r16,r16,11064
10005320:	003b3406 	br	10003ff4 <___vfprintf_internal_r+0x9b4>
10005324:	9019883a 	mov	r12,r18
10005328:	dc000e17 	ldw	r16,56(sp)
1000532c:	dc800f17 	ldw	r18,60(sp)
10005330:	e009883a 	mov	r4,fp
10005334:	8839883a 	mov	fp,r17
10005338:	b023883a 	mov	r17,r22
1000533c:	202d883a 	mov	r22,r4
10005340:	10800044 	addi	r2,r2,1
10005344:	1f07883a 	add	r3,r3,fp
10005348:	d8801d15 	stw	r2,116(sp)
1000534c:	43000015 	stw	r12,0(r8)
10005350:	47000115 	stw	fp,4(r8)
10005354:	d8c01e15 	stw	r3,120(sp)
10005358:	10800208 	cmpgei	r2,r2,8
1000535c:	1000421e 	bne	r2,zero,10005468 <___vfprintf_internal_r+0x1e28>
10005360:	42000204 	addi	r8,r8,8
10005364:	003da106 	br	100049ec <___vfprintf_internal_r+0x13ac>
10005368:	00800b44 	movi	r2,45
1000536c:	d8801545 	stb	r2,85(sp)
10005370:	03400b44 	movi	r13,45
10005374:	003b1b06 	br	10003fe4 <___vfprintf_internal_r+0x9a4>
10005378:	8819883a 	mov	r12,r17
1000537c:	dc400717 	ldw	r17,28(sp)
10005380:	10800044 	addi	r2,r2,1
10005384:	1f07883a 	add	r3,r3,fp
10005388:	d8801d15 	stw	r2,116(sp)
1000538c:	43000015 	stw	r12,0(r8)
10005390:	47000115 	stw	fp,4(r8)
10005394:	d8c01e15 	stw	r3,120(sp)
10005398:	10800208 	cmpgei	r2,r2,8
1000539c:	103a7626 	beq	r2,zero,10003d78 <___vfprintf_internal_r+0x738>
100053a0:	003ccc06 	br	100046d4 <___vfprintf_internal_r+0x1094>
100053a4:	d9000517 	ldw	r4,20(sp)
100053a8:	d9801c04 	addi	r6,sp,112
100053ac:	980b883a 	mov	r5,r19
100053b0:	000a7b80 	call	1000a7b8 <__sprint_r>
100053b4:	1039811e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
100053b8:	d9001617 	ldw	r4,88(sp)
100053bc:	d8c01e17 	ldw	r3,120(sp)
100053c0:	b811883a 	mov	r8,r23
100053c4:	003d9806 	br	10004a28 <___vfprintf_internal_r+0x13e8>
100053c8:	1560003c 	xorhi	r21,r2,32768
100053cc:	00800b44 	movi	r2,45
100053d0:	d8800e05 	stb	r2,56(sp)
100053d4:	003e1d06 	br	10004c4c <___vfprintf_internal_r+0x160c>
100053d8:	05000184 	movi	r20,6
100053dc:	003ec306 	br	10004eec <___vfprintf_internal_r+0x18ac>
100053e0:	002b883a 	mov	r21,zero
100053e4:	003a0706 	br	10003c04 <___vfprintf_internal_r+0x5c4>
100053e8:	d9401545 	stb	r5,85(sp)
100053ec:	00399106 	br	10003a34 <___vfprintf_internal_r+0x3f4>
100053f0:	d9000917 	ldw	r4,36(sp)
100053f4:	000d883a 	mov	r6,zero
100053f8:	000f883a 	mov	r7,zero
100053fc:	a80b883a 	mov	r5,r21
10005400:	da001215 	stw	r8,72(sp)
10005404:	dac01015 	stw	r11,64(sp)
10005408:	db000815 	stw	r12,32(sp)
1000540c:	000e4d80 	call	1000e4d8 <__eqdf2>
10005410:	db000817 	ldw	r12,32(sp)
10005414:	dac01017 	ldw	r11,64(sp)
10005418:	da001217 	ldw	r8,72(sp)
1000541c:	103f9926 	beq	r2,zero,10005284 <___vfprintf_internal_r+0x1c44>
10005420:	00800044 	movi	r2,1
10005424:	12c5c83a 	sub	r2,r2,r11
10005428:	d8801615 	stw	r2,88(sp)
1000542c:	003f9606 	br	10005288 <___vfprintf_internal_r+0x1c48>
10005430:	583e011e 	bne	r11,zero,10004c38 <___vfprintf_internal_r+0x15f8>
10005434:	02c00044 	movi	r11,1
10005438:	003dff06 	br	10004c38 <___vfprintf_internal_r+0x15f8>
1000543c:	d9000517 	ldw	r4,20(sp)
10005440:	d9801c04 	addi	r6,sp,112
10005444:	980b883a 	mov	r5,r19
10005448:	000a7b80 	call	1000a7b8 <__sprint_r>
1000544c:	10395b1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10005450:	d9001617 	ldw	r4,88(sp)
10005454:	d8c01e17 	ldw	r3,120(sp)
10005458:	d8801d17 	ldw	r2,116(sp)
1000545c:	b811883a 	mov	r8,r23
10005460:	203c930e 	bge	r4,zero,100046b0 <___vfprintf_internal_r+0x1070>
10005464:	003f2406 	br	100050f8 <___vfprintf_internal_r+0x1ab8>
10005468:	d9000517 	ldw	r4,20(sp)
1000546c:	d9801c04 	addi	r6,sp,112
10005470:	980b883a 	mov	r5,r19
10005474:	000a7b80 	call	1000a7b8 <__sprint_r>
10005478:	1039501e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
1000547c:	d8c01e17 	ldw	r3,120(sp)
10005480:	b811883a 	mov	r8,r23
10005484:	003d5906 	br	100049ec <___vfprintf_internal_r+0x13ac>
10005488:	d8801a04 	addi	r2,sp,104
1000548c:	d8800315 	stw	r2,12(sp)
10005490:	d9400917 	ldw	r5,36(sp)
10005494:	d8801704 	addi	r2,sp,92
10005498:	d9000517 	ldw	r4,20(sp)
1000549c:	5d000044 	addi	r20,r11,1
100054a0:	d8800215 	stw	r2,8(sp)
100054a4:	d8801604 	addi	r2,sp,88
100054a8:	d8800115 	stw	r2,4(sp)
100054ac:	dd000015 	stw	r20,0(sp)
100054b0:	01c00084 	movi	r7,2
100054b4:	a80d883a 	mov	r6,r21
100054b8:	dac00815 	stw	r11,32(sp)
100054bc:	0005be80 	call	10005be8 <_dtoa_r>
100054c0:	dac00817 	ldw	r11,32(sp)
100054c4:	db001017 	ldw	r12,64(sp)
100054c8:	da001217 	ldw	r8,72(sp)
100054cc:	1021883a 	mov	r16,r2
100054d0:	e08011d8 	cmpnei	r2,fp,71
100054d4:	103dfb26 	beq	r2,zero,10004cc4 <___vfprintf_internal_r+0x1684>
100054d8:	8529883a 	add	r20,r16,r20
100054dc:	003f6b06 	br	1000528c <___vfprintf_internal_r+0x1c4c>
100054e0:	d8801a17 	ldw	r2,104(sp)
100054e4:	01000c04 	movi	r4,48
100054e8:	153f752e 	bgeu	r2,r20,100052c0 <___vfprintf_internal_r+0x1c80>
100054ec:	10c00044 	addi	r3,r2,1
100054f0:	d8c01a15 	stw	r3,104(sp)
100054f4:	11000005 	stb	r4,0(r2)
100054f8:	d8801a17 	ldw	r2,104(sp)
100054fc:	153ffb36 	bltu	r2,r20,100054ec <___vfprintf_internal_r+0x1eac>
10005500:	003f6f06 	br	100052c0 <___vfprintf_internal_r+0x1c80>
10005504:	db401543 	ldbu	r13,85(sp)
10005508:	0017883a 	mov	r11,zero
1000550c:	003b6306 	br	1000429c <___vfprintf_internal_r+0xc5c>
10005510:	d8800717 	ldw	r2,28(sp)
10005514:	d8c00817 	ldw	r3,32(sp)
10005518:	10c02216 	blt	r2,r3,100055a4 <___vfprintf_internal_r+0x1f64>
1000551c:	6300004c 	andi	r12,r12,1
10005520:	60005f1e 	bne	r12,zero,100056a0 <___vfprintf_internal_r+0x2060>
10005524:	102b883a 	mov	r21,r2
10005528:	1000010e 	bge	r2,zero,10005530 <___vfprintf_internal_r+0x1ef0>
1000552c:	002b883a 	mov	r21,zero
10005530:	dd000717 	ldw	r20,28(sp)
10005534:	070019c4 	movi	fp,103
10005538:	003f7106 	br	10005300 <___vfprintf_internal_r+0x1cc0>
1000553c:	d9000517 	ldw	r4,20(sp)
10005540:	d9801c04 	addi	r6,sp,112
10005544:	980b883a 	mov	r5,r19
10005548:	000a7b80 	call	1000a7b8 <__sprint_r>
1000554c:	10391b1e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10005550:	d8c01e17 	ldw	r3,120(sp)
10005554:	b811883a 	mov	r8,r23
10005558:	e03d210e 	bge	fp,zero,100049e0 <___vfprintf_internal_r+0x13a0>
1000555c:	003e5e06 	br	10004ed8 <___vfprintf_internal_r+0x1898>
10005560:	02c00184 	movi	r11,6
10005564:	003db406 	br	10004c38 <___vfprintf_internal_r+0x15f8>
10005568:	d9000517 	ldw	r4,20(sp)
1000556c:	d9801c04 	addi	r6,sp,112
10005570:	980b883a 	mov	r5,r19
10005574:	000a7b80 	call	1000a7b8 <__sprint_r>
10005578:	1039101e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
1000557c:	d8801617 	ldw	r2,88(sp)
10005580:	d9000817 	ldw	r4,32(sp)
10005584:	d8c01e17 	ldw	r3,120(sp)
10005588:	b811883a 	mov	r8,r23
1000558c:	2085c83a 	sub	r2,r4,r2
10005590:	003d3706 	br	10004a70 <___vfprintf_internal_r+0x1430>
10005594:	582b883a 	mov	r21,r11
10005598:	dc800615 	stw	r18,24(sp)
1000559c:	5829883a 	mov	r20,r11
100055a0:	0039c006 	br	10003ca4 <___vfprintf_internal_r+0x664>
100055a4:	d8800817 	ldw	r2,32(sp)
100055a8:	d8c00b17 	ldw	r3,44(sp)
100055ac:	10e9883a 	add	r20,r2,r3
100055b0:	d8800717 	ldw	r2,28(sp)
100055b4:	00800316 	blt	zero,r2,100055c4 <___vfprintf_internal_r+0x1f84>
100055b8:	d8800717 	ldw	r2,28(sp)
100055bc:	a0b9c83a 	sub	fp,r20,r2
100055c0:	e5000044 	addi	r20,fp,1
100055c4:	a02b883a 	mov	r21,r20
100055c8:	a0003a16 	blt	r20,zero,100056b4 <___vfprintf_internal_r+0x2074>
100055cc:	070019c4 	movi	fp,103
100055d0:	003f4b06 	br	10005300 <___vfprintf_internal_r+0x1cc0>
100055d4:	d9401545 	stb	r5,85(sp)
100055d8:	003ac506 	br	100040f0 <___vfprintf_internal_r+0xab0>
100055dc:	d9401545 	stb	r5,85(sp)
100055e0:	003a2506 	br	10003e78 <___vfprintf_internal_r+0x838>
100055e4:	d9401545 	stb	r5,85(sp)
100055e8:	003a3306 	br	10003eb8 <___vfprintf_internal_r+0x878>
100055ec:	d9401545 	stb	r5,85(sp)
100055f0:	00398806 	br	10003c14 <___vfprintf_internal_r+0x5d4>
100055f4:	d9401545 	stb	r5,85(sp)
100055f8:	00395f06 	br	10003b78 <___vfprintf_internal_r+0x538>
100055fc:	d9401545 	stb	r5,85(sp)
10005600:	00394b06 	br	10003b30 <___vfprintf_internal_r+0x4f0>
10005604:	d9401545 	stb	r5,85(sp)
10005608:	003a3b06 	br	10003ef8 <___vfprintf_internal_r+0x8b8>
1000560c:	d9401545 	stb	r5,85(sp)
10005610:	003a8106 	br	10004018 <___vfprintf_internal_r+0x9d8>
10005614:	d9401545 	stb	r5,85(sp)
10005618:	003a4706 	br	10003f38 <___vfprintf_internal_r+0x8f8>
1000561c:	d9401545 	stb	r5,85(sp)
10005620:	003ac506 	br	10004138 <___vfprintf_internal_r+0xaf8>
10005624:	8819883a 	mov	r12,r17
10005628:	a023883a 	mov	r17,r20
1000562c:	8029883a 	mov	r20,r16
10005630:	dc000717 	ldw	r16,28(sp)
10005634:	10800044 	addi	r2,r2,1
10005638:	1d07883a 	add	r3,r3,r20
1000563c:	43000015 	stw	r12,0(r8)
10005640:	45000115 	stw	r20,4(r8)
10005644:	d8c01e15 	stw	r3,120(sp)
10005648:	d8801d15 	stw	r2,116(sp)
1000564c:	11000208 	cmpgei	r4,r2,8
10005650:	203c1626 	beq	r4,zero,100046ac <___vfprintf_internal_r+0x106c>
10005654:	d9000517 	ldw	r4,20(sp)
10005658:	d9801c04 	addi	r6,sp,112
1000565c:	980b883a 	mov	r5,r19
10005660:	000a7b80 	call	1000a7b8 <__sprint_r>
10005664:	1038d51e 	bne	r2,zero,100039bc <___vfprintf_internal_r+0x37c>
10005668:	d8c01e17 	ldw	r3,120(sp)
1000566c:	d8801d17 	ldw	r2,116(sp)
10005670:	b811883a 	mov	r8,r23
10005674:	003c0e06 	br	100046b0 <___vfprintf_internal_r+0x1070>
10005678:	00bfffc4 	movi	r2,-1
1000567c:	d8800415 	stw	r2,16(sp)
10005680:	0038d106 	br	100039c8 <___vfprintf_internal_r+0x388>
10005684:	00800c04 	movi	r2,48
10005688:	a0c00c04 	addi	r3,r20,48
1000568c:	d88018c5 	stb	r2,99(sp)
10005690:	00800104 	movi	r2,4
10005694:	d8c01905 	stb	r3,100(sp)
10005698:	d8801115 	stw	r2,68(sp)
1000569c:	003dcd06 	br	10004dd4 <___vfprintf_internal_r+0x1794>
100056a0:	d8800717 	ldw	r2,28(sp)
100056a4:	d8c00b17 	ldw	r3,44(sp)
100056a8:	10e9883a 	add	r20,r2,r3
100056ac:	a02b883a 	mov	r21,r20
100056b0:	a03fc60e 	bge	r20,zero,100055cc <___vfprintf_internal_r+0x1f8c>
100056b4:	002b883a 	mov	r21,zero
100056b8:	003fc406 	br	100055cc <___vfprintf_internal_r+0x1f8c>
100056bc:	d8800b17 	ldw	r2,44(sp)
100056c0:	1885883a 	add	r2,r3,r2
100056c4:	12e9883a 	add	r20,r2,r11
100056c8:	a02b883a 	mov	r21,r20
100056cc:	a03f0c0e 	bge	r20,zero,10005300 <___vfprintf_internal_r+0x1cc0>
100056d0:	002b883a 	mov	r21,zero
100056d4:	003f0a06 	br	10005300 <___vfprintf_internal_r+0x1cc0>
100056d8:	d8800a17 	ldw	r2,40(sp)
100056dc:	10001d16 	blt	r2,zero,10005754 <___vfprintf_internal_r+0x2114>
100056e0:	db401543 	ldbu	r13,85(sp)
100056e4:	e0801210 	cmplti	r2,fp,72
100056e8:	1000171e 	bne	r2,zero,10005748 <___vfprintf_internal_r+0x2108>
100056ec:	04040074 	movhi	r16,4097
100056f0:	840ad104 	addi	r16,r16,11076
100056f4:	003a3f06 	br	10003ff4 <___vfprintf_internal_r+0x9b4>
100056f8:	00c00044 	movi	r3,1
100056fc:	18a9c83a 	sub	r20,r3,r2
10005700:	00800b44 	movi	r2,45
10005704:	d8801885 	stb	r2,98(sp)
10005708:	003d8406 	br	10004d1c <___vfprintf_internal_r+0x16dc>
1000570c:	6080004c 	andi	r2,r12,1
10005710:	d8800715 	stw	r2,28(sp)
10005714:	103db41e 	bne	r2,zero,10004de8 <___vfprintf_internal_r+0x17a8>
10005718:	003feb06 	br	100056c8 <___vfprintf_internal_r+0x2088>
1000571c:	4005883a 	mov	r2,r8
10005720:	630ade84 	addi	r12,r12,11130
10005724:	003ea206 	br	100051b0 <___vfprintf_internal_r+0x1b70>
10005728:	1000031e 	bne	r2,zero,10005738 <___vfprintf_internal_r+0x20f8>
1000572c:	05400044 	movi	r21,1
10005730:	05000044 	movi	r20,1
10005734:	003ef206 	br	10005300 <___vfprintf_internal_r+0x1cc0>
10005738:	d8800b17 	ldw	r2,44(sp)
1000573c:	10800044 	addi	r2,r2,1
10005740:	12e9883a 	add	r20,r2,r11
10005744:	003fe006 	br	100056c8 <___vfprintf_internal_r+0x2088>
10005748:	04040074 	movhi	r16,4097
1000574c:	840ad004 	addi	r16,r16,11072
10005750:	003a2806 	br	10003ff4 <___vfprintf_internal_r+0x9b4>
10005754:	00800b44 	movi	r2,45
10005758:	d8801545 	stb	r2,85(sp)
1000575c:	03400b44 	movi	r13,45
10005760:	003fe006 	br	100056e4 <___vfprintf_internal_r+0x20a4>
10005764:	00800084 	movi	r2,2
10005768:	d8801115 	stw	r2,68(sp)
1000576c:	003d9906 	br	10004dd4 <___vfprintf_internal_r+0x1794>
10005770:	d8800617 	ldw	r2,24(sp)
10005774:	12c00017 	ldw	r11,0(r2)
10005778:	10800104 	addi	r2,r2,4
1000577c:	5800010e 	bge	r11,zero,10005784 <___vfprintf_internal_r+0x2144>
10005780:	02ffffc4 	movi	r11,-1
10005784:	b7000043 	ldbu	fp,1(r22)
10005788:	d8800615 	stw	r2,24(sp)
1000578c:	182d883a 	mov	r22,r3
10005790:	e2803fcc 	andi	r10,fp,255
10005794:	5280201c 	xori	r10,r10,128
10005798:	52bfe004 	addi	r10,r10,-128
1000579c:	00380306 	br	100037ac <___vfprintf_internal_r+0x16c>

100057a0 <__vfprintf_internal>:
100057a0:	00840074 	movhi	r2,4097
100057a4:	300f883a 	mov	r7,r6
100057a8:	280d883a 	mov	r6,r5
100057ac:	200b883a 	mov	r5,r4
100057b0:	1114a817 	ldw	r4,21152(r2)
100057b4:	00036401 	jmpi	10003640 <___vfprintf_internal_r>

100057b8 <__sbprintf>:
100057b8:	2880030b 	ldhu	r2,12(r5)
100057bc:	2b001917 	ldw	r12,100(r5)
100057c0:	2ac0038b 	ldhu	r11,14(r5)
100057c4:	2a800717 	ldw	r10,28(r5)
100057c8:	2a400917 	ldw	r9,36(r5)
100057cc:	defee204 	addi	sp,sp,-1144
100057d0:	da001a04 	addi	r8,sp,104
100057d4:	00c10004 	movi	r3,1024
100057d8:	dc011a15 	stw	r16,1128(sp)
100057dc:	10bfff4c 	andi	r2,r2,65533
100057e0:	2821883a 	mov	r16,r5
100057e4:	d80b883a 	mov	r5,sp
100057e8:	dc811c15 	stw	r18,1136(sp)
100057ec:	dc411b15 	stw	r17,1132(sp)
100057f0:	dfc11d15 	stw	ra,1140(sp)
100057f4:	2025883a 	mov	r18,r4
100057f8:	d880030d 	sth	r2,12(sp)
100057fc:	db001915 	stw	r12,100(sp)
10005800:	dac0038d 	sth	r11,14(sp)
10005804:	da800715 	stw	r10,28(sp)
10005808:	da400915 	stw	r9,36(sp)
1000580c:	da000015 	stw	r8,0(sp)
10005810:	da000415 	stw	r8,16(sp)
10005814:	d8c00215 	stw	r3,8(sp)
10005818:	d8c00515 	stw	r3,20(sp)
1000581c:	d8000615 	stw	zero,24(sp)
10005820:	00036400 	call	10003640 <___vfprintf_internal_r>
10005824:	1023883a 	mov	r17,r2
10005828:	10000d0e 	bge	r2,zero,10005860 <__sbprintf+0xa8>
1000582c:	d880030b 	ldhu	r2,12(sp)
10005830:	1080100c 	andi	r2,r2,64
10005834:	10000326 	beq	r2,zero,10005844 <__sbprintf+0x8c>
10005838:	8080030b 	ldhu	r2,12(r16)
1000583c:	10801014 	ori	r2,r2,64
10005840:	8080030d 	sth	r2,12(r16)
10005844:	8805883a 	mov	r2,r17
10005848:	dfc11d17 	ldw	ra,1140(sp)
1000584c:	dc811c17 	ldw	r18,1136(sp)
10005850:	dc411b17 	ldw	r17,1132(sp)
10005854:	dc011a17 	ldw	r16,1128(sp)
10005858:	dec11e04 	addi	sp,sp,1144
1000585c:	f800283a 	ret
10005860:	d80b883a 	mov	r5,sp
10005864:	9009883a 	mov	r4,r18
10005868:	00074d80 	call	100074d8 <_fflush_r>
1000586c:	103fef26 	beq	r2,zero,1000582c <__sbprintf+0x74>
10005870:	047fffc4 	movi	r17,-1
10005874:	003fed06 	br	1000582c <__sbprintf+0x74>

10005878 <__swsetup_r>:
10005878:	00840074 	movhi	r2,4097
1000587c:	1094a817 	ldw	r2,21152(r2)
10005880:	defffd04 	addi	sp,sp,-12
10005884:	dc400115 	stw	r17,4(sp)
10005888:	dc000015 	stw	r16,0(sp)
1000588c:	dfc00215 	stw	ra,8(sp)
10005890:	2023883a 	mov	r17,r4
10005894:	2821883a 	mov	r16,r5
10005898:	10000226 	beq	r2,zero,100058a4 <__swsetup_r+0x2c>
1000589c:	10c00e17 	ldw	r3,56(r2)
100058a0:	18002026 	beq	r3,zero,10005924 <__swsetup_r+0xac>
100058a4:	8080030b 	ldhu	r2,12(r16)
100058a8:	10c0020c 	andi	r3,r2,8
100058ac:	1009883a 	mov	r4,r2
100058b0:	18002226 	beq	r3,zero,1000593c <__swsetup_r+0xc4>
100058b4:	80c00417 	ldw	r3,16(r16)
100058b8:	18002826 	beq	r3,zero,1000595c <__swsetup_r+0xe4>
100058bc:	1100004c 	andi	r4,r2,1
100058c0:	20000b1e 	bne	r4,zero,100058f0 <__swsetup_r+0x78>
100058c4:	1080008c 	andi	r2,r2,2
100058c8:	10002d1e 	bne	r2,zero,10005980 <__swsetup_r+0x108>
100058cc:	80800517 	ldw	r2,20(r16)
100058d0:	80800215 	stw	r2,8(r16)
100058d4:	18000b26 	beq	r3,zero,10005904 <__swsetup_r+0x8c>
100058d8:	0005883a 	mov	r2,zero
100058dc:	dfc00217 	ldw	ra,8(sp)
100058e0:	dc400117 	ldw	r17,4(sp)
100058e4:	dc000017 	ldw	r16,0(sp)
100058e8:	dec00304 	addi	sp,sp,12
100058ec:	f800283a 	ret
100058f0:	80800517 	ldw	r2,20(r16)
100058f4:	80000215 	stw	zero,8(r16)
100058f8:	0085c83a 	sub	r2,zero,r2
100058fc:	80800615 	stw	r2,24(r16)
10005900:	183ff51e 	bne	r3,zero,100058d8 <__swsetup_r+0x60>
10005904:	80c0030b 	ldhu	r3,12(r16)
10005908:	0005883a 	mov	r2,zero
1000590c:	1900200c 	andi	r4,r3,128
10005910:	203ff226 	beq	r4,zero,100058dc <__swsetup_r+0x64>
10005914:	18c01014 	ori	r3,r3,64
10005918:	80c0030d 	sth	r3,12(r16)
1000591c:	00bfffc4 	movi	r2,-1
10005920:	003fee06 	br	100058dc <__swsetup_r+0x64>
10005924:	1009883a 	mov	r4,r2
10005928:	000785c0 	call	1000785c <__sinit>
1000592c:	8080030b 	ldhu	r2,12(r16)
10005930:	10c0020c 	andi	r3,r2,8
10005934:	1009883a 	mov	r4,r2
10005938:	183fde1e 	bne	r3,zero,100058b4 <__swsetup_r+0x3c>
1000593c:	2080040c 	andi	r2,r4,16
10005940:	10001f26 	beq	r2,zero,100059c0 <__swsetup_r+0x148>
10005944:	2080010c 	andi	r2,r4,4
10005948:	10000f1e 	bne	r2,zero,10005988 <__swsetup_r+0x110>
1000594c:	80c00417 	ldw	r3,16(r16)
10005950:	20800214 	ori	r2,r4,8
10005954:	8080030d 	sth	r2,12(r16)
10005958:	183fd81e 	bne	r3,zero,100058bc <__swsetup_r+0x44>
1000595c:	1100a00c 	andi	r4,r2,640
10005960:	21008020 	cmpeqi	r4,r4,512
10005964:	203fd51e 	bne	r4,zero,100058bc <__swsetup_r+0x44>
10005968:	800b883a 	mov	r5,r16
1000596c:	8809883a 	mov	r4,r17
10005970:	00083900 	call	10008390 <__smakebuf_r>
10005974:	8080030b 	ldhu	r2,12(r16)
10005978:	80c00417 	ldw	r3,16(r16)
1000597c:	003fcf06 	br	100058bc <__swsetup_r+0x44>
10005980:	0005883a 	mov	r2,zero
10005984:	003fd206 	br	100058d0 <__swsetup_r+0x58>
10005988:	81400c17 	ldw	r5,48(r16)
1000598c:	28000626 	beq	r5,zero,100059a8 <__swsetup_r+0x130>
10005990:	80801004 	addi	r2,r16,64
10005994:	28800326 	beq	r5,r2,100059a4 <__swsetup_r+0x12c>
10005998:	8809883a 	mov	r4,r17
1000599c:	00079c00 	call	100079c0 <_free_r>
100059a0:	8100030b 	ldhu	r4,12(r16)
100059a4:	80000c15 	stw	zero,48(r16)
100059a8:	80c00417 	ldw	r3,16(r16)
100059ac:	00bff6c4 	movi	r2,-37
100059b0:	1108703a 	and	r4,r2,r4
100059b4:	80000115 	stw	zero,4(r16)
100059b8:	80c00015 	stw	r3,0(r16)
100059bc:	003fe406 	br	10005950 <__swsetup_r+0xd8>
100059c0:	00800244 	movi	r2,9
100059c4:	88800015 	stw	r2,0(r17)
100059c8:	20801014 	ori	r2,r4,64
100059cc:	8080030d 	sth	r2,12(r16)
100059d0:	00bfffc4 	movi	r2,-1
100059d4:	003fc106 	br	100058dc <__swsetup_r+0x64>

100059d8 <quorem>:
100059d8:	defff504 	addi	sp,sp,-44
100059dc:	dc800315 	stw	r18,12(sp)
100059e0:	20800417 	ldw	r2,16(r4)
100059e4:	2c800417 	ldw	r18,16(r5)
100059e8:	dfc00a15 	stw	ra,40(sp)
100059ec:	df000915 	stw	fp,36(sp)
100059f0:	ddc00815 	stw	r23,32(sp)
100059f4:	dd800715 	stw	r22,28(sp)
100059f8:	dd400615 	stw	r21,24(sp)
100059fc:	dd000515 	stw	r20,20(sp)
10005a00:	dcc00415 	stw	r19,16(sp)
10005a04:	dc400215 	stw	r17,8(sp)
10005a08:	dc000115 	stw	r16,4(sp)
10005a0c:	14807416 	blt	r2,r18,10005be0 <quorem+0x208>
10005a10:	94bfffc4 	addi	r18,r18,-1
10005a14:	902e90ba 	slli	r23,r18,2
10005a18:	2c400504 	addi	r17,r5,20
10005a1c:	25400504 	addi	r21,r4,20
10005a20:	8de9883a 	add	r20,r17,r23
10005a24:	a7000017 	ldw	fp,0(r20)
10005a28:	adef883a 	add	r23,r21,r23
10005a2c:	b8c00017 	ldw	r3,0(r23)
10005a30:	e7000044 	addi	fp,fp,1
10005a34:	282d883a 	mov	r22,r5
10005a38:	2021883a 	mov	r16,r4
10005a3c:	e00b883a 	mov	r5,fp
10005a40:	1809883a 	mov	r4,r3
10005a44:	d8c00015 	stw	r3,0(sp)
10005a48:	000d1d00 	call	1000d1d0 <__udivsi3>
10005a4c:	d8c00017 	ldw	r3,0(sp)
10005a50:	1027883a 	mov	r19,r2
10005a54:	1f002c36 	bltu	r3,fp,10005b08 <quorem+0x130>
10005a58:	8811883a 	mov	r8,r17
10005a5c:	a80b883a 	mov	r5,r21
10005a60:	0013883a 	mov	r9,zero
10005a64:	0007883a 	mov	r3,zero
10005a68:	42000104 	addi	r8,r8,4
10005a6c:	41ffff17 	ldw	r7,-4(r8)
10005a70:	29800017 	ldw	r6,0(r5)
10005a74:	29400104 	addi	r5,r5,4
10005a78:	38bfffcc 	andi	r2,r7,65535
10005a7c:	14c5383a 	mul	r2,r2,r19
10005a80:	3808d43a 	srli	r4,r7,16
10005a84:	32bfffcc 	andi	r10,r6,65535
10005a88:	1245883a 	add	r2,r2,r9
10005a8c:	1012d43a 	srli	r9,r2,16
10005a90:	11ffffcc 	andi	r7,r2,65535
10005a94:	24c9383a 	mul	r4,r4,r19
10005a98:	19c7c83a 	sub	r3,r3,r7
10005a9c:	1a8f883a 	add	r7,r3,r10
10005aa0:	3006d43a 	srli	r3,r6,16
10005aa4:	2249883a 	add	r4,r4,r9
10005aa8:	3805d43a 	srai	r2,r7,16
10005aac:	21bfffcc 	andi	r6,r4,65535
10005ab0:	1987c83a 	sub	r3,r3,r6
10005ab4:	1887883a 	add	r3,r3,r2
10005ab8:	180c943a 	slli	r6,r3,16
10005abc:	39ffffcc 	andi	r7,r7,65535
10005ac0:	2012d43a 	srli	r9,r4,16
10005ac4:	31ceb03a 	or	r7,r6,r7
10005ac8:	29ffff15 	stw	r7,-4(r5)
10005acc:	1807d43a 	srai	r3,r3,16
10005ad0:	a23fe52e 	bgeu	r20,r8,10005a68 <quorem+0x90>
10005ad4:	b8800017 	ldw	r2,0(r23)
10005ad8:	10000b1e 	bne	r2,zero,10005b08 <quorem+0x130>
10005adc:	b8bfff04 	addi	r2,r23,-4
10005ae0:	a880082e 	bgeu	r21,r2,10005b04 <quorem+0x12c>
10005ae4:	b8ffff17 	ldw	r3,-4(r23)
10005ae8:	18000326 	beq	r3,zero,10005af8 <quorem+0x120>
10005aec:	00000506 	br	10005b04 <quorem+0x12c>
10005af0:	10c00017 	ldw	r3,0(r2)
10005af4:	1800031e 	bne	r3,zero,10005b04 <quorem+0x12c>
10005af8:	10bfff04 	addi	r2,r2,-4
10005afc:	94bfffc4 	addi	r18,r18,-1
10005b00:	a8bffb36 	bltu	r21,r2,10005af0 <quorem+0x118>
10005b04:	84800415 	stw	r18,16(r16)
10005b08:	b00b883a 	mov	r5,r22
10005b0c:	8009883a 	mov	r4,r16
10005b10:	00098480 	call	10009848 <__mcmp>
10005b14:	10002516 	blt	r2,zero,10005bac <quorem+0x1d4>
10005b18:	9cc00044 	addi	r19,r19,1
10005b1c:	a80d883a 	mov	r6,r21
10005b20:	0007883a 	mov	r3,zero
10005b24:	8c400104 	addi	r17,r17,4
10005b28:	893fff17 	ldw	r4,-4(r17)
10005b2c:	31400017 	ldw	r5,0(r6)
10005b30:	31800104 	addi	r6,r6,4
10005b34:	20bfffcc 	andi	r2,r4,65535
10005b38:	1887c83a 	sub	r3,r3,r2
10005b3c:	28bfffcc 	andi	r2,r5,65535
10005b40:	1885883a 	add	r2,r3,r2
10005b44:	2008d43a 	srli	r4,r4,16
10005b48:	2806d43a 	srli	r3,r5,16
10005b4c:	100fd43a 	srai	r7,r2,16
10005b50:	117fffcc 	andi	r5,r2,65535
10005b54:	1907c83a 	sub	r3,r3,r4
10005b58:	19c7883a 	add	r3,r3,r7
10005b5c:	1804943a 	slli	r2,r3,16
10005b60:	1807d43a 	srai	r3,r3,16
10005b64:	1144b03a 	or	r2,r2,r5
10005b68:	30bfff15 	stw	r2,-4(r6)
10005b6c:	a47fed2e 	bgeu	r20,r17,10005b24 <quorem+0x14c>
10005b70:	900690ba 	slli	r3,r18,2
10005b74:	a8c7883a 	add	r3,r21,r3
10005b78:	18800017 	ldw	r2,0(r3)
10005b7c:	10000b1e 	bne	r2,zero,10005bac <quorem+0x1d4>
10005b80:	18bfff04 	addi	r2,r3,-4
10005b84:	a880082e 	bgeu	r21,r2,10005ba8 <quorem+0x1d0>
10005b88:	18ffff17 	ldw	r3,-4(r3)
10005b8c:	18000326 	beq	r3,zero,10005b9c <quorem+0x1c4>
10005b90:	00000506 	br	10005ba8 <quorem+0x1d0>
10005b94:	10c00017 	ldw	r3,0(r2)
10005b98:	1800031e 	bne	r3,zero,10005ba8 <quorem+0x1d0>
10005b9c:	10bfff04 	addi	r2,r2,-4
10005ba0:	94bfffc4 	addi	r18,r18,-1
10005ba4:	a8bffb36 	bltu	r21,r2,10005b94 <quorem+0x1bc>
10005ba8:	84800415 	stw	r18,16(r16)
10005bac:	9805883a 	mov	r2,r19
10005bb0:	dfc00a17 	ldw	ra,40(sp)
10005bb4:	df000917 	ldw	fp,36(sp)
10005bb8:	ddc00817 	ldw	r23,32(sp)
10005bbc:	dd800717 	ldw	r22,28(sp)
10005bc0:	dd400617 	ldw	r21,24(sp)
10005bc4:	dd000517 	ldw	r20,20(sp)
10005bc8:	dcc00417 	ldw	r19,16(sp)
10005bcc:	dc800317 	ldw	r18,12(sp)
10005bd0:	dc400217 	ldw	r17,8(sp)
10005bd4:	dc000117 	ldw	r16,4(sp)
10005bd8:	dec00b04 	addi	sp,sp,44
10005bdc:	f800283a 	ret
10005be0:	0005883a 	mov	r2,zero
10005be4:	003ff206 	br	10005bb0 <quorem+0x1d8>

10005be8 <_dtoa_r>:
10005be8:	20801017 	ldw	r2,64(r4)
10005bec:	deffe204 	addi	sp,sp,-120
10005bf0:	df001c15 	stw	fp,112(sp)
10005bf4:	dcc01715 	stw	r19,92(sp)
10005bf8:	dc401515 	stw	r17,84(sp)
10005bfc:	dc001415 	stw	r16,80(sp)
10005c00:	dfc01d15 	stw	ra,116(sp)
10005c04:	ddc01b15 	stw	r23,108(sp)
10005c08:	dd801a15 	stw	r22,104(sp)
10005c0c:	dd401915 	stw	r21,100(sp)
10005c10:	dd001815 	stw	r20,96(sp)
10005c14:	dc801615 	stw	r18,88(sp)
10005c18:	d9400115 	stw	r5,4(sp)
10005c1c:	d9c00215 	stw	r7,8(sp)
10005c20:	2039883a 	mov	fp,r4
10005c24:	3027883a 	mov	r19,r6
10005c28:	dc002017 	ldw	r16,128(sp)
10005c2c:	3023883a 	mov	r17,r6
10005c30:	10000826 	beq	r2,zero,10005c54 <_dtoa_r+0x6c>
10005c34:	21801117 	ldw	r6,68(r4)
10005c38:	00c00044 	movi	r3,1
10005c3c:	100b883a 	mov	r5,r2
10005c40:	1986983a 	sll	r3,r3,r6
10005c44:	11800115 	stw	r6,4(r2)
10005c48:	10c00215 	stw	r3,8(r2)
10005c4c:	00090680 	call	10009068 <_Bfree>
10005c50:	e0001015 	stw	zero,64(fp)
10005c54:	98018116 	blt	r19,zero,1000625c <_dtoa_r+0x674>
10005c58:	80000015 	stw	zero,0(r16)
10005c5c:	989ffc2c 	andhi	r2,r19,32752
10005c60:	00dffc34 	movhi	r3,32752
10005c64:	10c18626 	beq	r2,r3,10006280 <_dtoa_r+0x698>
10005c68:	d9000117 	ldw	r4,4(sp)
10005c6c:	000d883a 	mov	r6,zero
10005c70:	000f883a 	mov	r7,zero
10005c74:	880b883a 	mov	r5,r17
10005c78:	000e4d80 	call	1000e4d8 <__eqdf2>
10005c7c:	1000191e 	bne	r2,zero,10005ce4 <_dtoa_r+0xfc>
10005c80:	d8c01f17 	ldw	r3,124(sp)
10005c84:	00800044 	movi	r2,1
10005c88:	18800015 	stw	r2,0(r3)
10005c8c:	d8802117 	ldw	r2,132(sp)
10005c90:	10032426 	beq	r2,zero,10006924 <_dtoa_r+0xd3c>
10005c94:	d9002117 	ldw	r4,132(sp)
10005c98:	00840074 	movhi	r2,4097
10005c9c:	108ade44 	addi	r2,r2,11129
10005ca0:	00c40074 	movhi	r3,4097
10005ca4:	20800015 	stw	r2,0(r4)
10005ca8:	188ade04 	addi	r2,r3,11128
10005cac:	d8800315 	stw	r2,12(sp)
10005cb0:	d8800317 	ldw	r2,12(sp)
10005cb4:	dfc01d17 	ldw	ra,116(sp)
10005cb8:	df001c17 	ldw	fp,112(sp)
10005cbc:	ddc01b17 	ldw	r23,108(sp)
10005cc0:	dd801a17 	ldw	r22,104(sp)
10005cc4:	dd401917 	ldw	r21,100(sp)
10005cc8:	dd001817 	ldw	r20,96(sp)
10005ccc:	dcc01717 	ldw	r19,92(sp)
10005cd0:	dc801617 	ldw	r18,88(sp)
10005cd4:	dc401517 	ldw	r17,84(sp)
10005cd8:	dc001417 	ldw	r16,80(sp)
10005cdc:	dec01e04 	addi	sp,sp,120
10005ce0:	f800283a 	ret
10005ce4:	dc800117 	ldw	r18,4(sp)
10005ce8:	d8801204 	addi	r2,sp,72
10005cec:	9820d53a 	srli	r16,r19,20
10005cf0:	d8800015 	stw	r2,0(sp)
10005cf4:	d9c01304 	addi	r7,sp,76
10005cf8:	900b883a 	mov	r5,r18
10005cfc:	880d883a 	mov	r6,r17
10005d00:	e009883a 	mov	r4,fp
10005d04:	0009bbc0 	call	10009bbc <__d2b>
10005d08:	102b883a 	mov	r21,r2
10005d0c:	8001701e 	bne	r16,zero,100062d0 <_dtoa_r+0x6e8>
10005d10:	dc801217 	ldw	r18,72(sp)
10005d14:	dc001317 	ldw	r16,76(sp)
10005d18:	9421883a 	add	r16,r18,r16
10005d1c:	80810c84 	addi	r2,r16,1074
10005d20:	10c00850 	cmplti	r3,r2,33
10005d24:	18030f1e 	bne	r3,zero,10006964 <_dtoa_r+0xd7c>
10005d28:	01001004 	movi	r4,64
10005d2c:	2085c83a 	sub	r2,r4,r2
10005d30:	98a6983a 	sll	r19,r19,r2
10005d34:	d8800117 	ldw	r2,4(sp)
10005d38:	81010484 	addi	r4,r16,1042
10005d3c:	1108d83a 	srl	r4,r2,r4
10005d40:	9908b03a 	or	r4,r19,r4
10005d44:	000f8cc0 	call	1000f8cc <__floatunsidf>
10005d48:	1009883a 	mov	r4,r2
10005d4c:	017f8434 	movhi	r5,65040
10005d50:	00800044 	movi	r2,1
10005d54:	194b883a 	add	r5,r3,r5
10005d58:	843fffc4 	addi	r16,r16,-1
10005d5c:	d8800a15 	stw	r2,40(sp)
10005d60:	000d883a 	mov	r6,zero
10005d64:	01cffe34 	movhi	r7,16376
10005d68:	000edc40 	call	1000edc4 <__subdf3>
10005d6c:	0198dbf4 	movhi	r6,25455
10005d70:	01cff4f4 	movhi	r7,16339
10005d74:	3190d844 	addi	r6,r6,17249
10005d78:	39e1e9c4 	addi	r7,r7,-30809
10005d7c:	1009883a 	mov	r4,r2
10005d80:	180b883a 	mov	r5,r3
10005d84:	000e7380 	call	1000e738 <__muldf3>
10005d88:	01a2d874 	movhi	r6,35681
10005d8c:	01cff1f4 	movhi	r7,16327
10005d90:	31b22cc4 	addi	r6,r6,-14157
10005d94:	39e28a04 	addi	r7,r7,-30168
10005d98:	180b883a 	mov	r5,r3
10005d9c:	1009883a 	mov	r4,r2
10005da0:	000d2900 	call	1000d290 <__adddf3>
10005da4:	8009883a 	mov	r4,r16
10005da8:	1029883a 	mov	r20,r2
10005dac:	1827883a 	mov	r19,r3
10005db0:	000f8040 	call	1000f804 <__floatsidf>
10005db4:	019427f4 	movhi	r6,20639
10005db8:	01cff4f4 	movhi	r7,16339
10005dbc:	319e7ec4 	addi	r6,r6,31227
10005dc0:	39d104c4 	addi	r7,r7,17427
10005dc4:	1009883a 	mov	r4,r2
10005dc8:	180b883a 	mov	r5,r3
10005dcc:	000e7380 	call	1000e738 <__muldf3>
10005dd0:	100d883a 	mov	r6,r2
10005dd4:	180f883a 	mov	r7,r3
10005dd8:	a009883a 	mov	r4,r20
10005ddc:	980b883a 	mov	r5,r19
10005de0:	000d2900 	call	1000d290 <__adddf3>
10005de4:	1009883a 	mov	r4,r2
10005de8:	180b883a 	mov	r5,r3
10005dec:	1029883a 	mov	r20,r2
10005df0:	1827883a 	mov	r19,r3
10005df4:	000f7840 	call	1000f784 <__fixdfsi>
10005df8:	000d883a 	mov	r6,zero
10005dfc:	000f883a 	mov	r7,zero
10005e00:	a009883a 	mov	r4,r20
10005e04:	980b883a 	mov	r5,r19
10005e08:	102d883a 	mov	r22,r2
10005e0c:	000e6480 	call	1000e648 <__ledf2>
10005e10:	1002ba16 	blt	r2,zero,100068fc <_dtoa_r+0xd14>
10005e14:	9421c83a 	sub	r16,r18,r16
10005e18:	b08005e8 	cmpgeui	r2,r22,23
10005e1c:	853fffc4 	addi	r20,r16,-1
10005e20:	1002ae1e 	bne	r2,zero,100068dc <_dtoa_r+0xcf4>
10005e24:	b00690fa 	slli	r3,r22,3
10005e28:	00840074 	movhi	r2,4097
10005e2c:	108b0204 	addi	r2,r2,11272
10005e30:	10c5883a 	add	r2,r2,r3
10005e34:	11800017 	ldw	r6,0(r2)
10005e38:	11c00117 	ldw	r7,4(r2)
10005e3c:	d9000117 	ldw	r4,4(sp)
10005e40:	880b883a 	mov	r5,r17
10005e44:	000e6480 	call	1000e648 <__ledf2>
10005e48:	10026f0e 	bge	r2,zero,10006808 <_dtoa_r+0xc20>
10005e4c:	d8000915 	stw	zero,36(sp)
10005e50:	b5bfffc4 	addi	r22,r22,-1
10005e54:	a002a416 	blt	r20,zero,100068e8 <_dtoa_r+0xd00>
10005e58:	d8000515 	stw	zero,20(sp)
10005e5c:	b0026d0e 	bge	r22,zero,10006814 <_dtoa_r+0xc2c>
10005e60:	d8800517 	ldw	r2,20(sp)
10005e64:	d8c00217 	ldw	r3,8(sp)
10005e68:	dd800415 	stw	r22,16(sp)
10005e6c:	1585c83a 	sub	r2,r2,r22
10005e70:	d8800515 	stw	r2,20(sp)
10005e74:	0585c83a 	sub	r2,zero,r22
10005e78:	d8800815 	stw	r2,32(sp)
10005e7c:	188002a8 	cmpgeui	r2,r3,10
10005e80:	002d883a 	mov	r22,zero
10005e84:	1002691e 	bne	r2,zero,1000682c <_dtoa_r+0xc44>
10005e88:	18800190 	cmplti	r2,r3,6
10005e8c:	1002ba1e 	bne	r2,zero,10006978 <_dtoa_r+0xd90>
10005e90:	18bfff04 	addi	r2,r3,-4
10005e94:	d8800215 	stw	r2,8(sp)
10005e98:	0021883a 	mov	r16,zero
10005e9c:	d8c00217 	ldw	r3,8(sp)
10005ea0:	188000e0 	cmpeqi	r2,r3,3
10005ea4:	10039d1e 	bne	r2,zero,10006d1c <_dtoa_r+0x1134>
10005ea8:	18800108 	cmpgei	r2,r3,4
10005eac:	10027a26 	beq	r2,zero,10006898 <_dtoa_r+0xcb0>
10005eb0:	d8c00217 	ldw	r3,8(sp)
10005eb4:	18800120 	cmpeqi	r2,r3,4
10005eb8:	10026926 	beq	r2,zero,10006860 <_dtoa_r+0xc78>
10005ebc:	00800044 	movi	r2,1
10005ec0:	d8800715 	stw	r2,28(sp)
10005ec4:	d8801e17 	ldw	r2,120(sp)
10005ec8:	0083670e 	bge	zero,r2,10006c68 <_dtoa_r+0x1080>
10005ecc:	d8800b15 	stw	r2,44(sp)
10005ed0:	d8800615 	stw	r2,24(sp)
10005ed4:	100d883a 	mov	r6,r2
10005ed8:	e0001115 	stw	zero,68(fp)
10005edc:	30800610 	cmplti	r2,r6,24
10005ee0:	dc800617 	ldw	r18,24(sp)
10005ee4:	1004eb1e 	bne	r2,zero,10007294 <_dtoa_r+0x16ac>
10005ee8:	00c00044 	movi	r3,1
10005eec:	00800104 	movi	r2,4
10005ef0:	1085883a 	add	r2,r2,r2
10005ef4:	11000504 	addi	r4,r2,20
10005ef8:	180b883a 	mov	r5,r3
10005efc:	18c00044 	addi	r3,r3,1
10005f00:	313ffb2e 	bgeu	r6,r4,10005ef0 <_dtoa_r+0x308>
10005f04:	e1401115 	stw	r5,68(fp)
10005f08:	e009883a 	mov	r4,fp
10005f0c:	0008fc40 	call	10008fc4 <_Balloc>
10005f10:	d8800315 	stw	r2,12(sp)
10005f14:	e0801015 	stw	r2,64(fp)
10005f18:	948003e8 	cmpgeui	r18,r18,15
10005f1c:	9000fe1e 	bne	r18,zero,10006318 <_dtoa_r+0x730>
10005f20:	8000fd26 	beq	r16,zero,10006318 <_dtoa_r+0x730>
10005f24:	d9000417 	ldw	r4,16(sp)
10005f28:	0103c60e 	bge	zero,r4,10006e44 <_dtoa_r+0x125c>
10005f2c:	208003cc 	andi	r2,r4,15
10005f30:	100690fa 	slli	r3,r2,3
10005f34:	202fd13a 	srai	r23,r4,4
10005f38:	00840074 	movhi	r2,4097
10005f3c:	108b0204 	addi	r2,r2,11272
10005f40:	10c5883a 	add	r2,r2,r3
10005f44:	b8c0040c 	andi	r3,r23,16
10005f48:	12800017 	ldw	r10,0(r2)
10005f4c:	12400117 	ldw	r9,4(r2)
10005f50:	1803621e 	bne	r3,zero,10006cdc <_dtoa_r+0x10f4>
10005f54:	d8800117 	ldw	r2,4(sp)
10005f58:	8827883a 	mov	r19,r17
10005f5c:	04000084 	movi	r16,2
10005f60:	d8800c15 	stw	r2,48(sp)
10005f64:	04840074 	movhi	r18,4097
10005f68:	948af804 	addi	r18,r18,11232
10005f6c:	b8000f26 	beq	r23,zero,10005fac <_dtoa_r+0x3c4>
10005f70:	5005883a 	mov	r2,r10
10005f74:	4807883a 	mov	r3,r9
10005f78:	b980004c 	andi	r6,r23,1
10005f7c:	1009883a 	mov	r4,r2
10005f80:	b82fd07a 	srai	r23,r23,1
10005f84:	180b883a 	mov	r5,r3
10005f88:	30000426 	beq	r6,zero,10005f9c <_dtoa_r+0x3b4>
10005f8c:	91800017 	ldw	r6,0(r18)
10005f90:	91c00117 	ldw	r7,4(r18)
10005f94:	84000044 	addi	r16,r16,1
10005f98:	000e7380 	call	1000e738 <__muldf3>
10005f9c:	94800204 	addi	r18,r18,8
10005fa0:	b83ff51e 	bne	r23,zero,10005f78 <_dtoa_r+0x390>
10005fa4:	1015883a 	mov	r10,r2
10005fa8:	1813883a 	mov	r9,r3
10005fac:	d9000c17 	ldw	r4,48(sp)
10005fb0:	980b883a 	mov	r5,r19
10005fb4:	500d883a 	mov	r6,r10
10005fb8:	480f883a 	mov	r7,r9
10005fbc:	000dc300 	call	1000dc30 <__divdf3>
10005fc0:	1025883a 	mov	r18,r2
10005fc4:	1827883a 	mov	r19,r3
10005fc8:	d8800917 	ldw	r2,36(sp)
10005fcc:	10000626 	beq	r2,zero,10005fe8 <_dtoa_r+0x400>
10005fd0:	000d883a 	mov	r6,zero
10005fd4:	01cffc34 	movhi	r7,16368
10005fd8:	9009883a 	mov	r4,r18
10005fdc:	980b883a 	mov	r5,r19
10005fe0:	000e6480 	call	1000e648 <__ledf2>
10005fe4:	10042616 	blt	r2,zero,10007080 <_dtoa_r+0x1498>
10005fe8:	8009883a 	mov	r4,r16
10005fec:	000f8040 	call	1000f804 <__floatsidf>
10005ff0:	900d883a 	mov	r6,r18
10005ff4:	980f883a 	mov	r7,r19
10005ff8:	1009883a 	mov	r4,r2
10005ffc:	180b883a 	mov	r5,r3
10006000:	000e7380 	call	1000e738 <__muldf3>
10006004:	000d883a 	mov	r6,zero
10006008:	01d00734 	movhi	r7,16412
1000600c:	1009883a 	mov	r4,r2
10006010:	180b883a 	mov	r5,r3
10006014:	000d2900 	call	1000d290 <__adddf3>
10006018:	d8800c15 	stw	r2,48(sp)
1000601c:	00bf3034 	movhi	r2,64704
10006020:	1885883a 	add	r2,r3,r2
10006024:	d8800d15 	stw	r2,52(sp)
10006028:	d8800617 	ldw	r2,24(sp)
1000602c:	10036d26 	beq	r2,zero,10006de4 <_dtoa_r+0x11fc>
10006030:	d8800417 	ldw	r2,16(sp)
10006034:	d8800f15 	stw	r2,60(sp)
10006038:	d8800617 	ldw	r2,24(sp)
1000603c:	d8800e15 	stw	r2,56(sp)
10006040:	980b883a 	mov	r5,r19
10006044:	9009883a 	mov	r4,r18
10006048:	000f7840 	call	1000f784 <__fixdfsi>
1000604c:	1009883a 	mov	r4,r2
10006050:	102f883a 	mov	r23,r2
10006054:	000f8040 	call	1000f804 <__floatsidf>
10006058:	100d883a 	mov	r6,r2
1000605c:	180f883a 	mov	r7,r3
10006060:	9009883a 	mov	r4,r18
10006064:	980b883a 	mov	r5,r19
10006068:	000edc40 	call	1000edc4 <__subdf3>
1000606c:	1025883a 	mov	r18,r2
10006070:	d8800e17 	ldw	r2,56(sp)
10006074:	1821883a 	mov	r16,r3
10006078:	ba400c04 	addi	r9,r23,48
1000607c:	10bfffc4 	addi	r2,r2,-1
10006080:	100690fa 	slli	r3,r2,3
10006084:	00840074 	movhi	r2,4097
10006088:	108b0204 	addi	r2,r2,11272
1000608c:	10c5883a 	add	r2,r2,r3
10006090:	11800017 	ldw	r6,0(r2)
10006094:	d8c00317 	ldw	r3,12(sp)
10006098:	11c00117 	ldw	r7,4(r2)
1000609c:	d8800717 	ldw	r2,28(sp)
100060a0:	4811883a 	mov	r8,r9
100060a4:	da001015 	stw	r8,64(sp)
100060a8:	1dc00044 	addi	r23,r3,1
100060ac:	1003a226 	beq	r2,zero,10006f38 <_dtoa_r+0x1350>
100060b0:	0009883a 	mov	r4,zero
100060b4:	014ff834 	movhi	r5,16352
100060b8:	da401115 	stw	r9,68(sp)
100060bc:	000dc300 	call	1000dc30 <__divdf3>
100060c0:	d9800c17 	ldw	r6,48(sp)
100060c4:	d9c00d17 	ldw	r7,52(sp)
100060c8:	1009883a 	mov	r4,r2
100060cc:	180b883a 	mov	r5,r3
100060d0:	000edc40 	call	1000edc4 <__subdf3>
100060d4:	1827883a 	mov	r19,r3
100060d8:	da401117 	ldw	r9,68(sp)
100060dc:	d8c00317 	ldw	r3,12(sp)
100060e0:	900d883a 	mov	r6,r18
100060e4:	800f883a 	mov	r7,r16
100060e8:	1a400005 	stb	r9,0(r3)
100060ec:	1009883a 	mov	r4,r2
100060f0:	980b883a 	mov	r5,r19
100060f4:	d8800c15 	stw	r2,48(sp)
100060f8:	000e5580 	call	1000e558 <__gedf2>
100060fc:	da001017 	ldw	r8,64(sp)
10006100:	00804816 	blt	zero,r2,10006224 <_dtoa_r+0x63c>
10006104:	900d883a 	mov	r6,r18
10006108:	800f883a 	mov	r7,r16
1000610c:	0009883a 	mov	r4,zero
10006110:	014ffc34 	movhi	r5,16368
10006114:	da000d15 	stw	r8,52(sp)
10006118:	000edc40 	call	1000edc4 <__subdf3>
1000611c:	d9000c17 	ldw	r4,48(sp)
10006120:	100d883a 	mov	r6,r2
10006124:	180f883a 	mov	r7,r3
10006128:	980b883a 	mov	r5,r19
1000612c:	000e5580 	call	1000e558 <__gedf2>
10006130:	da000d17 	ldw	r8,52(sp)
10006134:	00844e16 	blt	zero,r2,10007270 <_dtoa_r+0x1688>
10006138:	d8c00e17 	ldw	r3,56(sp)
1000613c:	18800060 	cmpeqi	r2,r3,1
10006140:	1000751e 	bne	r2,zero,10006318 <_dtoa_r+0x730>
10006144:	d8800317 	ldw	r2,12(sp)
10006148:	dd800d15 	stw	r22,52(sp)
1000614c:	dd000e15 	stw	r20,56(sp)
10006150:	10c5883a 	add	r2,r2,r3
10006154:	dd000c17 	ldw	r20,48(sp)
10006158:	102d883a 	mov	r22,r2
1000615c:	dc400c15 	stw	r17,48(sp)
10006160:	00000806 	br	10006184 <_dtoa_r+0x59c>
10006164:	000edc40 	call	1000edc4 <__subdf3>
10006168:	a00d883a 	mov	r6,r20
1000616c:	980f883a 	mov	r7,r19
10006170:	1009883a 	mov	r4,r2
10006174:	180b883a 	mov	r5,r3
10006178:	000e6480 	call	1000e648 <__ledf2>
1000617c:	10042316 	blt	r2,zero,1000720c <_dtoa_r+0x1624>
10006180:	bd806226 	beq	r23,r22,1000630c <_dtoa_r+0x724>
10006184:	a009883a 	mov	r4,r20
10006188:	980b883a 	mov	r5,r19
1000618c:	000d883a 	mov	r6,zero
10006190:	01d00934 	movhi	r7,16420
10006194:	000e7380 	call	1000e738 <__muldf3>
10006198:	000d883a 	mov	r6,zero
1000619c:	01d00934 	movhi	r7,16420
100061a0:	9009883a 	mov	r4,r18
100061a4:	800b883a 	mov	r5,r16
100061a8:	1029883a 	mov	r20,r2
100061ac:	1827883a 	mov	r19,r3
100061b0:	000e7380 	call	1000e738 <__muldf3>
100061b4:	180b883a 	mov	r5,r3
100061b8:	1009883a 	mov	r4,r2
100061bc:	1821883a 	mov	r16,r3
100061c0:	1025883a 	mov	r18,r2
100061c4:	000f7840 	call	1000f784 <__fixdfsi>
100061c8:	1009883a 	mov	r4,r2
100061cc:	1023883a 	mov	r17,r2
100061d0:	000f8040 	call	1000f804 <__floatsidf>
100061d4:	9009883a 	mov	r4,r18
100061d8:	800b883a 	mov	r5,r16
100061dc:	100d883a 	mov	r6,r2
100061e0:	180f883a 	mov	r7,r3
100061e4:	000edc40 	call	1000edc4 <__subdf3>
100061e8:	bdc00044 	addi	r23,r23,1
100061ec:	8c400c04 	addi	r17,r17,48
100061f0:	a00d883a 	mov	r6,r20
100061f4:	980f883a 	mov	r7,r19
100061f8:	1009883a 	mov	r4,r2
100061fc:	180b883a 	mov	r5,r3
10006200:	bc7fffc5 	stb	r17,-1(r23)
10006204:	1025883a 	mov	r18,r2
10006208:	1821883a 	mov	r16,r3
1000620c:	000e6480 	call	1000e648 <__ledf2>
10006210:	900d883a 	mov	r6,r18
10006214:	800f883a 	mov	r7,r16
10006218:	0009883a 	mov	r4,zero
1000621c:	014ffc34 	movhi	r5,16368
10006220:	103fd00e 	bge	r2,zero,10006164 <_dtoa_r+0x57c>
10006224:	d8800f17 	ldw	r2,60(sp)
10006228:	10800044 	addi	r2,r2,1
1000622c:	d8800415 	stw	r2,16(sp)
10006230:	a80b883a 	mov	r5,r21
10006234:	e009883a 	mov	r4,fp
10006238:	00090680 	call	10009068 <_Bfree>
1000623c:	d8801f17 	ldw	r2,124(sp)
10006240:	d8c00417 	ldw	r3,16(sp)
10006244:	b8000005 	stb	zero,0(r23)
10006248:	10c00015 	stw	r3,0(r2)
1000624c:	d8802117 	ldw	r2,132(sp)
10006250:	103e9726 	beq	r2,zero,10005cb0 <_dtoa_r+0xc8>
10006254:	15c00015 	stw	r23,0(r2)
10006258:	003e9506 	br	10005cb0 <_dtoa_r+0xc8>
1000625c:	04600034 	movhi	r17,32768
10006260:	8c7fffc4 	addi	r17,r17,-1
10006264:	9c62703a 	and	r17,r19,r17
10006268:	00800044 	movi	r2,1
1000626c:	8827883a 	mov	r19,r17
10006270:	80800015 	stw	r2,0(r16)
10006274:	00dffc34 	movhi	r3,32752
10006278:	989ffc2c 	andhi	r2,r19,32752
1000627c:	10fe7a1e 	bne	r2,r3,10005c68 <_dtoa_r+0x80>
10006280:	00800434 	movhi	r2,16
10006284:	d8c01f17 	ldw	r3,124(sp)
10006288:	10bfffc4 	addi	r2,r2,-1
1000628c:	98a6703a 	and	r19,r19,r2
10006290:	0089c3c4 	movi	r2,9999
10006294:	18800015 	stw	r2,0(r3)
10006298:	d8800117 	ldw	r2,4(sp)
1000629c:	98aab03a 	or	r21,r19,r2
100062a0:	a800141e 	bne	r21,zero,100062f4 <_dtoa_r+0x70c>
100062a4:	d8802117 	ldw	r2,132(sp)
100062a8:	1003f626 	beq	r2,zero,10007284 <_dtoa_r+0x169c>
100062ac:	00840074 	movhi	r2,4097
100062b0:	1007883a 	mov	r3,r2
100062b4:	18cae804 	addi	r3,r3,11168
100062b8:	00840074 	movhi	r2,4097
100062bc:	d8c00315 	stw	r3,12(sp)
100062c0:	108aea04 	addi	r2,r2,11176
100062c4:	d8c02117 	ldw	r3,132(sp)
100062c8:	18800015 	stw	r2,0(r3)
100062cc:	003e7806 	br	10005cb0 <_dtoa_r+0xc8>
100062d0:	01400434 	movhi	r5,16
100062d4:	297fffc4 	addi	r5,r5,-1
100062d8:	894a703a 	and	r5,r17,r5
100062dc:	9009883a 	mov	r4,r18
100062e0:	294ffc34 	orhi	r5,r5,16368
100062e4:	843f0044 	addi	r16,r16,-1023
100062e8:	dc801217 	ldw	r18,72(sp)
100062ec:	d8000a15 	stw	zero,40(sp)
100062f0:	003e9b06 	br	10005d60 <_dtoa_r+0x178>
100062f4:	d8802117 	ldw	r2,132(sp)
100062f8:	1002461e 	bne	r2,zero,10006c14 <_dtoa_r+0x102c>
100062fc:	00840074 	movhi	r2,4097
10006300:	108ae704 	addi	r2,r2,11164
10006304:	d8800315 	stw	r2,12(sp)
10006308:	003e6906 	br	10005cb0 <_dtoa_r+0xc8>
1000630c:	dd800d17 	ldw	r22,52(sp)
10006310:	dd000e17 	ldw	r20,56(sp)
10006314:	dc400c17 	ldw	r17,48(sp)
10006318:	d8801317 	ldw	r2,76(sp)
1000631c:	10009f16 	blt	r2,zero,1000659c <_dtoa_r+0x9b4>
10006320:	d9000417 	ldw	r4,16(sp)
10006324:	20c003c8 	cmpgei	r3,r4,15
10006328:	18009c1e 	bne	r3,zero,1000659c <_dtoa_r+0x9b4>
1000632c:	200690fa 	slli	r3,r4,3
10006330:	00840074 	movhi	r2,4097
10006334:	108b0204 	addi	r2,r2,11272
10006338:	10c5883a 	add	r2,r2,r3
1000633c:	14000017 	ldw	r16,0(r2)
10006340:	14800117 	ldw	r18,4(r2)
10006344:	d8801e17 	ldw	r2,120(sp)
10006348:	1000140e 	bge	r2,zero,1000639c <_dtoa_r+0x7b4>
1000634c:	d8800617 	ldw	r2,24(sp)
10006350:	00801216 	blt	zero,r2,1000639c <_dtoa_r+0x7b4>
10006354:	1002b81e 	bne	r2,zero,10006e38 <_dtoa_r+0x1250>
10006358:	8009883a 	mov	r4,r16
1000635c:	900b883a 	mov	r5,r18
10006360:	000d883a 	mov	r6,zero
10006364:	01d00534 	movhi	r7,16404
10006368:	000e7380 	call	1000e738 <__muldf3>
1000636c:	d9800117 	ldw	r6,4(sp)
10006370:	880f883a 	mov	r7,r17
10006374:	1009883a 	mov	r4,r2
10006378:	180b883a 	mov	r5,r3
1000637c:	000e5580 	call	1000e558 <__gedf2>
10006380:	0025883a 	mov	r18,zero
10006384:	0021883a 	mov	r16,zero
10006388:	1001fd16 	blt	r2,zero,10006b80 <_dtoa_r+0xf98>
1000638c:	d8801e17 	ldw	r2,120(sp)
10006390:	ddc00317 	ldw	r23,12(sp)
10006394:	00a2303a 	nor	r17,zero,r2
10006398:	0001ff06 	br	10006b98 <_dtoa_r+0xfb0>
1000639c:	dcc00117 	ldw	r19,4(sp)
100063a0:	800d883a 	mov	r6,r16
100063a4:	900f883a 	mov	r7,r18
100063a8:	880b883a 	mov	r5,r17
100063ac:	9809883a 	mov	r4,r19
100063b0:	000dc300 	call	1000dc30 <__divdf3>
100063b4:	180b883a 	mov	r5,r3
100063b8:	1009883a 	mov	r4,r2
100063bc:	000f7840 	call	1000f784 <__fixdfsi>
100063c0:	1009883a 	mov	r4,r2
100063c4:	102d883a 	mov	r22,r2
100063c8:	000f8040 	call	1000f804 <__floatsidf>
100063cc:	800d883a 	mov	r6,r16
100063d0:	900f883a 	mov	r7,r18
100063d4:	1009883a 	mov	r4,r2
100063d8:	180b883a 	mov	r5,r3
100063dc:	000e7380 	call	1000e738 <__muldf3>
100063e0:	880b883a 	mov	r5,r17
100063e4:	100d883a 	mov	r6,r2
100063e8:	180f883a 	mov	r7,r3
100063ec:	9809883a 	mov	r4,r19
100063f0:	000edc40 	call	1000edc4 <__subdf3>
100063f4:	dc400317 	ldw	r17,12(sp)
100063f8:	1009883a 	mov	r4,r2
100063fc:	d9c00417 	ldw	r7,16(sp)
10006400:	b0800c04 	addi	r2,r22,48
10006404:	88800005 	stb	r2,0(r17)
10006408:	d8800617 	ldw	r2,24(sp)
1000640c:	39c00044 	addi	r7,r7,1
10006410:	d9c00415 	stw	r7,16(sp)
10006414:	11800060 	cmpeqi	r6,r2,1
10006418:	180b883a 	mov	r5,r3
1000641c:	2005883a 	mov	r2,r4
10006420:	8dc00044 	addi	r23,r17,1
10006424:	3000391e 	bne	r6,zero,1000650c <_dtoa_r+0x924>
10006428:	01d00934 	movhi	r7,16420
1000642c:	000e7380 	call	1000e738 <__muldf3>
10006430:	000d883a 	mov	r6,zero
10006434:	000f883a 	mov	r7,zero
10006438:	1009883a 	mov	r4,r2
1000643c:	180b883a 	mov	r5,r3
10006440:	1027883a 	mov	r19,r2
10006444:	1829883a 	mov	r20,r3
10006448:	000e4d80 	call	1000e4d8 <__eqdf2>
1000644c:	103f7826 	beq	r2,zero,10006230 <_dtoa_r+0x648>
10006450:	d8c00617 	ldw	r3,24(sp)
10006454:	8805883a 	mov	r2,r17
10006458:	dd400115 	stw	r21,4(sp)
1000645c:	8c400084 	addi	r17,r17,2
10006460:	10ed883a 	add	r22,r2,r3
10006464:	00000a06 	br	10006490 <_dtoa_r+0x8a8>
10006468:	000e7380 	call	1000e738 <__muldf3>
1000646c:	000d883a 	mov	r6,zero
10006470:	000f883a 	mov	r7,zero
10006474:	1009883a 	mov	r4,r2
10006478:	180b883a 	mov	r5,r3
1000647c:	1027883a 	mov	r19,r2
10006480:	1829883a 	mov	r20,r3
10006484:	8c400044 	addi	r17,r17,1
10006488:	000e4d80 	call	1000e4d8 <__eqdf2>
1000648c:	10029d26 	beq	r2,zero,10006f04 <_dtoa_r+0x131c>
10006490:	800d883a 	mov	r6,r16
10006494:	900f883a 	mov	r7,r18
10006498:	9809883a 	mov	r4,r19
1000649c:	a00b883a 	mov	r5,r20
100064a0:	000dc300 	call	1000dc30 <__divdf3>
100064a4:	180b883a 	mov	r5,r3
100064a8:	1009883a 	mov	r4,r2
100064ac:	000f7840 	call	1000f784 <__fixdfsi>
100064b0:	1009883a 	mov	r4,r2
100064b4:	102b883a 	mov	r21,r2
100064b8:	000f8040 	call	1000f804 <__floatsidf>
100064bc:	800d883a 	mov	r6,r16
100064c0:	900f883a 	mov	r7,r18
100064c4:	1009883a 	mov	r4,r2
100064c8:	180b883a 	mov	r5,r3
100064cc:	000e7380 	call	1000e738 <__muldf3>
100064d0:	100d883a 	mov	r6,r2
100064d4:	180f883a 	mov	r7,r3
100064d8:	9809883a 	mov	r4,r19
100064dc:	a00b883a 	mov	r5,r20
100064e0:	000edc40 	call	1000edc4 <__subdf3>
100064e4:	aa400c04 	addi	r9,r21,48
100064e8:	8a7fffc5 	stb	r9,-1(r17)
100064ec:	000d883a 	mov	r6,zero
100064f0:	01d00934 	movhi	r7,16420
100064f4:	1009883a 	mov	r4,r2
100064f8:	180b883a 	mov	r5,r3
100064fc:	882f883a 	mov	r23,r17
10006500:	b47fd91e 	bne	r22,r17,10006468 <_dtoa_r+0x880>
10006504:	a82d883a 	mov	r22,r21
10006508:	dd400117 	ldw	r21,4(sp)
1000650c:	100d883a 	mov	r6,r2
10006510:	180f883a 	mov	r7,r3
10006514:	1009883a 	mov	r4,r2
10006518:	180b883a 	mov	r5,r3
1000651c:	000d2900 	call	1000d290 <__adddf3>
10006520:	800d883a 	mov	r6,r16
10006524:	900f883a 	mov	r7,r18
10006528:	1009883a 	mov	r4,r2
1000652c:	180b883a 	mov	r5,r3
10006530:	1027883a 	mov	r19,r2
10006534:	1823883a 	mov	r17,r3
10006538:	000e5580 	call	1000e558 <__gedf2>
1000653c:	00800816 	blt	zero,r2,10006560 <_dtoa_r+0x978>
10006540:	800d883a 	mov	r6,r16
10006544:	900f883a 	mov	r7,r18
10006548:	9809883a 	mov	r4,r19
1000654c:	880b883a 	mov	r5,r17
10006550:	000e4d80 	call	1000e4d8 <__eqdf2>
10006554:	103f361e 	bne	r2,zero,10006230 <_dtoa_r+0x648>
10006558:	b580004c 	andi	r22,r22,1
1000655c:	b03f3426 	beq	r22,zero,10006230 <_dtoa_r+0x648>
10006560:	ba3fffc3 	ldbu	r8,-1(r23)
10006564:	d9000317 	ldw	r4,12(sp)
10006568:	00000306 	br	10006578 <_dtoa_r+0x990>
1000656c:	20c30e26 	beq	r4,r3,100071a8 <_dtoa_r+0x15c0>
10006570:	1a3fffc3 	ldbu	r8,-1(r3)
10006574:	182f883a 	mov	r23,r3
10006578:	40803fcc 	andi	r2,r8,255
1000657c:	1080201c 	xori	r2,r2,128
10006580:	10bfe004 	addi	r2,r2,-128
10006584:	10800e60 	cmpeqi	r2,r2,57
10006588:	b8ffffc4 	addi	r3,r23,-1
1000658c:	103ff71e 	bne	r2,zero,1000656c <_dtoa_r+0x984>
10006590:	42000044 	addi	r8,r8,1
10006594:	1a000005 	stb	r8,0(r3)
10006598:	003f2506 	br	10006230 <_dtoa_r+0x648>
1000659c:	d8c00717 	ldw	r3,28(sp)
100065a0:	1800e426 	beq	r3,zero,10006934 <_dtoa_r+0xd4c>
100065a4:	d8c00217 	ldw	r3,8(sp)
100065a8:	18c00088 	cmpgei	r3,r3,2
100065ac:	1801ec26 	beq	r3,zero,10006d60 <_dtoa_r+0x1178>
100065b0:	d8800617 	ldw	r2,24(sp)
100065b4:	14bfffc4 	addi	r18,r2,-1
100065b8:	d8800817 	ldw	r2,32(sp)
100065bc:	1481c50e 	bge	r2,r18,10006cd4 <_dtoa_r+0x10ec>
100065c0:	d8800817 	ldw	r2,32(sp)
100065c4:	dc800815 	stw	r18,32(sp)
100065c8:	9085c83a 	sub	r2,r18,r2
100065cc:	b0ad883a 	add	r22,r22,r2
100065d0:	0025883a 	mov	r18,zero
100065d4:	d8800617 	ldw	r2,24(sp)
100065d8:	10024c16 	blt	r2,zero,10006f0c <_dtoa_r+0x1324>
100065dc:	d8c00517 	ldw	r3,20(sp)
100065e0:	a0a9883a 	add	r20,r20,r2
100065e4:	1885883a 	add	r2,r3,r2
100065e8:	1827883a 	mov	r19,r3
100065ec:	d8800515 	stw	r2,20(sp)
100065f0:	01400044 	movi	r5,1
100065f4:	e009883a 	mov	r4,fp
100065f8:	00093c40 	call	100093c4 <__i2b>
100065fc:	1021883a 	mov	r16,r2
10006600:	04c0080e 	bge	zero,r19,10006624 <_dtoa_r+0xa3c>
10006604:	0500070e 	bge	zero,r20,10006624 <_dtoa_r+0xa3c>
10006608:	9805883a 	mov	r2,r19
1000660c:	a4c1a916 	blt	r20,r19,10006cb4 <_dtoa_r+0x10cc>
10006610:	d8c00517 	ldw	r3,20(sp)
10006614:	98a7c83a 	sub	r19,r19,r2
10006618:	a0a9c83a 	sub	r20,r20,r2
1000661c:	1887c83a 	sub	r3,r3,r2
10006620:	d8c00515 	stw	r3,20(sp)
10006624:	d8800817 	ldw	r2,32(sp)
10006628:	10001426 	beq	r2,zero,1000667c <_dtoa_r+0xa94>
1000662c:	d8800717 	ldw	r2,28(sp)
10006630:	10017226 	beq	r2,zero,10006bfc <_dtoa_r+0x1014>
10006634:	04800e0e 	bge	zero,r18,10006670 <_dtoa_r+0xa88>
10006638:	800b883a 	mov	r5,r16
1000663c:	900d883a 	mov	r6,r18
10006640:	e009883a 	mov	r4,fp
10006644:	00095e40 	call	100095e4 <__pow5mult>
10006648:	a80d883a 	mov	r6,r21
1000664c:	100b883a 	mov	r5,r2
10006650:	e009883a 	mov	r4,fp
10006654:	1021883a 	mov	r16,r2
10006658:	00093f80 	call	100093f8 <__multiply>
1000665c:	102f883a 	mov	r23,r2
10006660:	a80b883a 	mov	r5,r21
10006664:	e009883a 	mov	r4,fp
10006668:	00090680 	call	10009068 <_Bfree>
1000666c:	b82b883a 	mov	r21,r23
10006670:	d8800817 	ldw	r2,32(sp)
10006674:	148dc83a 	sub	r6,r2,r18
10006678:	3001611e 	bne	r6,zero,10006c00 <_dtoa_r+0x1018>
1000667c:	01400044 	movi	r5,1
10006680:	e009883a 	mov	r4,fp
10006684:	00093c40 	call	100093c4 <__i2b>
10006688:	1025883a 	mov	r18,r2
1000668c:	0580bc16 	blt	zero,r22,10006980 <_dtoa_r+0xd98>
10006690:	d8800217 	ldw	r2,8(sp)
10006694:	10800088 	cmpgei	r2,r2,2
10006698:	10016526 	beq	r2,zero,10006c30 <_dtoa_r+0x1048>
1000669c:	0023883a 	mov	r17,zero
100066a0:	00800044 	movi	r2,1
100066a4:	b000bf1e 	bne	r22,zero,100069a4 <_dtoa_r+0xdbc>
100066a8:	1505883a 	add	r2,r2,r20
100066ac:	108007cc 	andi	r2,r2,31
100066b0:	1000aa26 	beq	r2,zero,1000695c <_dtoa_r+0xd74>
100066b4:	00c00804 	movi	r3,32
100066b8:	1887c83a 	sub	r3,r3,r2
100066bc:	19000150 	cmplti	r4,r3,5
100066c0:	2002f61e 	bne	r4,zero,1000729c <_dtoa_r+0x16b4>
100066c4:	00c00704 	movi	r3,28
100066c8:	1885c83a 	sub	r2,r3,r2
100066cc:	d8c00517 	ldw	r3,20(sp)
100066d0:	98a7883a 	add	r19,r19,r2
100066d4:	a0a9883a 	add	r20,r20,r2
100066d8:	1887883a 	add	r3,r3,r2
100066dc:	d8c00515 	stw	r3,20(sp)
100066e0:	d8800517 	ldw	r2,20(sp)
100066e4:	00809716 	blt	zero,r2,10006944 <_dtoa_r+0xd5c>
100066e8:	0500050e 	bge	zero,r20,10006700 <_dtoa_r+0xb18>
100066ec:	900b883a 	mov	r5,r18
100066f0:	a00d883a 	mov	r6,r20
100066f4:	e009883a 	mov	r4,fp
100066f8:	000970c0 	call	1000970c <__lshift>
100066fc:	1025883a 	mov	r18,r2
10006700:	d8800917 	ldw	r2,36(sp)
10006704:	10012b1e 	bne	r2,zero,10006bb4 <_dtoa_r+0xfcc>
10006708:	d8800617 	ldw	r2,24(sp)
1000670c:	00810d0e 	bge	zero,r2,10006b44 <_dtoa_r+0xf5c>
10006710:	d8800417 	ldw	r2,16(sp)
10006714:	10800044 	addi	r2,r2,1
10006718:	d8800415 	stw	r2,16(sp)
1000671c:	d8800717 	ldw	r2,28(sp)
10006720:	1000b21e 	bne	r2,zero,100069ec <_dtoa_r+0xe04>
10006724:	ddc00317 	ldw	r23,12(sp)
10006728:	04400044 	movi	r17,1
1000672c:	dcc00617 	ldw	r19,24(sp)
10006730:	00000306 	br	10006740 <_dtoa_r+0xb58>
10006734:	000908c0 	call	1000908c <__multadd>
10006738:	102b883a 	mov	r21,r2
1000673c:	8c400044 	addi	r17,r17,1
10006740:	900b883a 	mov	r5,r18
10006744:	a809883a 	mov	r4,r21
10006748:	00059d80 	call	100059d8 <quorem>
1000674c:	10800c04 	addi	r2,r2,48
10006750:	bdc00044 	addi	r23,r23,1
10006754:	b8bfffc5 	stb	r2,-1(r23)
10006758:	000f883a 	mov	r7,zero
1000675c:	01800284 	movi	r6,10
10006760:	a80b883a 	mov	r5,r21
10006764:	e009883a 	mov	r4,fp
10006768:	8cfff216 	blt	r17,r19,10006734 <_dtoa_r+0xb4c>
1000676c:	1011883a 	mov	r8,r2
10006770:	0029883a 	mov	r20,zero
10006774:	a80b883a 	mov	r5,r21
10006778:	01800044 	movi	r6,1
1000677c:	e009883a 	mov	r4,fp
10006780:	da000115 	stw	r8,4(sp)
10006784:	000970c0 	call	1000970c <__lshift>
10006788:	900b883a 	mov	r5,r18
1000678c:	1009883a 	mov	r4,r2
10006790:	102b883a 	mov	r21,r2
10006794:	00098480 	call	10009848 <__mcmp>
10006798:	b8ffffc3 	ldbu	r3,-1(r23)
1000679c:	0081610e 	bge	zero,r2,10006d24 <_dtoa_r+0x113c>
100067a0:	d9400317 	ldw	r5,12(sp)
100067a4:	00000306 	br	100067b4 <_dtoa_r+0xbcc>
100067a8:	29017726 	beq	r5,r4,10006d88 <_dtoa_r+0x11a0>
100067ac:	20ffffc3 	ldbu	r3,-1(r4)
100067b0:	202f883a 	mov	r23,r4
100067b4:	18803fcc 	andi	r2,r3,255
100067b8:	1080201c 	xori	r2,r2,128
100067bc:	10bfe004 	addi	r2,r2,-128
100067c0:	10800e60 	cmpeqi	r2,r2,57
100067c4:	b93fffc4 	addi	r4,r23,-1
100067c8:	103ff71e 	bne	r2,zero,100067a8 <_dtoa_r+0xbc0>
100067cc:	18c00044 	addi	r3,r3,1
100067d0:	20c00005 	stb	r3,0(r4)
100067d4:	900b883a 	mov	r5,r18
100067d8:	e009883a 	mov	r4,fp
100067dc:	00090680 	call	10009068 <_Bfree>
100067e0:	803e9326 	beq	r16,zero,10006230 <_dtoa_r+0x648>
100067e4:	a0000426 	beq	r20,zero,100067f8 <_dtoa_r+0xc10>
100067e8:	a4000326 	beq	r20,r16,100067f8 <_dtoa_r+0xc10>
100067ec:	a00b883a 	mov	r5,r20
100067f0:	e009883a 	mov	r4,fp
100067f4:	00090680 	call	10009068 <_Bfree>
100067f8:	800b883a 	mov	r5,r16
100067fc:	e009883a 	mov	r4,fp
10006800:	00090680 	call	10009068 <_Bfree>
10006804:	003e8a06 	br	10006230 <_dtoa_r+0x648>
10006808:	d8000915 	stw	zero,36(sp)
1000680c:	a0003616 	blt	r20,zero,100068e8 <_dtoa_r+0xd00>
10006810:	d8000515 	stw	zero,20(sp)
10006814:	d8c00217 	ldw	r3,8(sp)
10006818:	dd800415 	stw	r22,16(sp)
1000681c:	d8000815 	stw	zero,32(sp)
10006820:	188002a8 	cmpgeui	r2,r3,10
10006824:	a5a9883a 	add	r20,r20,r22
10006828:	103d9726 	beq	r2,zero,10005e88 <_dtoa_r+0x2a0>
1000682c:	00800044 	movi	r2,1
10006830:	d8800715 	stw	r2,28(sp)
10006834:	00bfffc4 	movi	r2,-1
10006838:	04bfffc4 	movi	r18,-1
1000683c:	04000044 	movi	r16,1
10006840:	d8000215 	stw	zero,8(sp)
10006844:	d8800615 	stw	r2,24(sp)
10006848:	d8001e15 	stw	zero,120(sp)
1000684c:	d8800617 	ldw	r2,24(sp)
10006850:	e0001115 	stw	zero,68(fp)
10006854:	000b883a 	mov	r5,zero
10006858:	d8800b15 	stw	r2,44(sp)
1000685c:	003daa06 	br	10005f08 <_dtoa_r+0x320>
10006860:	18800160 	cmpeqi	r2,r3,5
10006864:	00c00044 	movi	r3,1
10006868:	d8c00715 	stw	r3,28(sp)
1000686c:	10000d26 	beq	r2,zero,100068a4 <_dtoa_r+0xcbc>
10006870:	d8801e17 	ldw	r2,120(sp)
10006874:	d8c00417 	ldw	r3,16(sp)
10006878:	10c5883a 	add	r2,r2,r3
1000687c:	d8800b15 	stw	r2,44(sp)
10006880:	10800044 	addi	r2,r2,1
10006884:	d8800615 	stw	r2,24(sp)
10006888:	100d883a 	mov	r6,r2
1000688c:	00bd9216 	blt	zero,r2,10005ed8 <_dtoa_r+0x2f0>
10006890:	01800044 	movi	r6,1
10006894:	003d9006 	br	10005ed8 <_dtoa_r+0x2f0>
10006898:	188000a0 	cmpeqi	r2,r3,2
1000689c:	d8000715 	stw	zero,28(sp)
100068a0:	103d881e 	bne	r2,zero,10005ec4 <_dtoa_r+0x2dc>
100068a4:	e0001115 	stw	zero,68(fp)
100068a8:	000b883a 	mov	r5,zero
100068ac:	e009883a 	mov	r4,fp
100068b0:	0008fc40 	call	10008fc4 <_Balloc>
100068b4:	d8800315 	stw	r2,12(sp)
100068b8:	e0801015 	stw	r2,64(fp)
100068bc:	00bfffc4 	movi	r2,-1
100068c0:	d8800b15 	stw	r2,44(sp)
100068c4:	00800044 	movi	r2,1
100068c8:	d8800715 	stw	r2,28(sp)
100068cc:	00bfffc4 	movi	r2,-1
100068d0:	d8001e15 	stw	zero,120(sp)
100068d4:	d8800615 	stw	r2,24(sp)
100068d8:	003e8f06 	br	10006318 <_dtoa_r+0x730>
100068dc:	00800044 	movi	r2,1
100068e0:	d8800915 	stw	r2,36(sp)
100068e4:	a03d5c0e 	bge	r20,zero,10005e58 <_dtoa_r+0x270>
100068e8:	04800044 	movi	r18,1
100068ec:	9405c83a 	sub	r2,r18,r16
100068f0:	d8800515 	stw	r2,20(sp)
100068f4:	0029883a 	mov	r20,zero
100068f8:	003d5806 	br	10005e5c <_dtoa_r+0x274>
100068fc:	b009883a 	mov	r4,r22
10006900:	000f8040 	call	1000f804 <__floatsidf>
10006904:	a00d883a 	mov	r6,r20
10006908:	980f883a 	mov	r7,r19
1000690c:	1009883a 	mov	r4,r2
10006910:	180b883a 	mov	r5,r3
10006914:	000e4d80 	call	1000e4d8 <__eqdf2>
10006918:	103d3e26 	beq	r2,zero,10005e14 <_dtoa_r+0x22c>
1000691c:	b5bfffc4 	addi	r22,r22,-1
10006920:	003d3c06 	br	10005e14 <_dtoa_r+0x22c>
10006924:	00840074 	movhi	r2,4097
10006928:	108ade04 	addi	r2,r2,11128
1000692c:	d8800315 	stw	r2,12(sp)
10006930:	003cdf06 	br	10005cb0 <_dtoa_r+0xc8>
10006934:	dc800817 	ldw	r18,32(sp)
10006938:	dcc00517 	ldw	r19,20(sp)
1000693c:	0021883a 	mov	r16,zero
10006940:	003f2f06 	br	10006600 <_dtoa_r+0xa18>
10006944:	a80b883a 	mov	r5,r21
10006948:	100d883a 	mov	r6,r2
1000694c:	e009883a 	mov	r4,fp
10006950:	000970c0 	call	1000970c <__lshift>
10006954:	102b883a 	mov	r21,r2
10006958:	003f6306 	br	100066e8 <_dtoa_r+0xb00>
1000695c:	00800704 	movi	r2,28
10006960:	003f5a06 	br	100066cc <_dtoa_r+0xae4>
10006964:	01000804 	movi	r4,32
10006968:	2089c83a 	sub	r4,r4,r2
1000696c:	d8800117 	ldw	r2,4(sp)
10006970:	1108983a 	sll	r4,r2,r4
10006974:	003cf306 	br	10005d44 <_dtoa_r+0x15c>
10006978:	04000044 	movi	r16,1
1000697c:	003d4706 	br	10005e9c <_dtoa_r+0x2b4>
10006980:	b00d883a 	mov	r6,r22
10006984:	100b883a 	mov	r5,r2
10006988:	e009883a 	mov	r4,fp
1000698c:	00095e40 	call	100095e4 <__pow5mult>
10006990:	1025883a 	mov	r18,r2
10006994:	d8800217 	ldw	r2,8(sp)
10006998:	10800090 	cmplti	r2,r2,2
1000699c:	10012f1e 	bne	r2,zero,10006e5c <_dtoa_r+0x1274>
100069a0:	0023883a 	mov	r17,zero
100069a4:	90800417 	ldw	r2,16(r18)
100069a8:	10800104 	addi	r2,r2,4
100069ac:	100490ba 	slli	r2,r2,2
100069b0:	9085883a 	add	r2,r18,r2
100069b4:	11000017 	ldw	r4,0(r2)
100069b8:	00092b00 	call	100092b0 <__hi0bits>
100069bc:	00c00804 	movi	r3,32
100069c0:	1885c83a 	sub	r2,r3,r2
100069c4:	003f3806 	br	100066a8 <_dtoa_r+0xac0>
100069c8:	800b883a 	mov	r5,r16
100069cc:	000f883a 	mov	r7,zero
100069d0:	01800284 	movi	r6,10
100069d4:	e009883a 	mov	r4,fp
100069d8:	000908c0 	call	1000908c <__multadd>
100069dc:	1021883a 	mov	r16,r2
100069e0:	d8800b17 	ldw	r2,44(sp)
100069e4:	00821b0e 	bge	zero,r2,10007254 <_dtoa_r+0x166c>
100069e8:	d8800615 	stw	r2,24(sp)
100069ec:	04c0b316 	blt	zero,r19,10006cbc <_dtoa_r+0x10d4>
100069f0:	8801341e 	bne	r17,zero,10006ec4 <_dtoa_r+0x12dc>
100069f4:	8027883a 	mov	r19,r16
100069f8:	dc400317 	ldw	r17,12(sp)
100069fc:	d8c00617 	ldw	r3,24(sp)
10006a00:	d8800117 	ldw	r2,4(sp)
10006a04:	8dffffc4 	addi	r23,r17,-1
10006a08:	b8c7883a 	add	r3,r23,r3
10006a0c:	d8c00615 	stw	r3,24(sp)
10006a10:	d8c00217 	ldw	r3,8(sp)
10006a14:	1080004c 	andi	r2,r2,1
10006a18:	d8800815 	stw	r2,32(sp)
10006a1c:	10c4b03a 	or	r2,r2,r3
10006a20:	d8800715 	stw	r2,28(sp)
10006a24:	00002c06 	br	10006ad8 <_dtoa_r+0xef0>
10006a28:	b80b883a 	mov	r5,r23
10006a2c:	a809883a 	mov	r4,r21
10006a30:	da000515 	stw	r8,20(sp)
10006a34:	00098480 	call	10009848 <__mcmp>
10006a38:	b80b883a 	mov	r5,r23
10006a3c:	e009883a 	mov	r4,fp
10006a40:	d8800115 	stw	r2,4(sp)
10006a44:	00090680 	call	10009068 <_Bfree>
10006a48:	d8800117 	ldw	r2,4(sp)
10006a4c:	da000517 	ldw	r8,20(sp)
10006a50:	1000021e 	bne	r2,zero,10006a5c <_dtoa_r+0xe74>
10006a54:	d8c00717 	ldw	r3,28(sp)
10006a58:	1801f226 	beq	r3,zero,10007224 <_dtoa_r+0x163c>
10006a5c:	8dc00044 	addi	r23,r17,1
10006a60:	a0010516 	blt	r20,zero,10006e78 <_dtoa_r+0x1290>
10006a64:	d8c00217 	ldw	r3,8(sp)
10006a68:	a0e8b03a 	or	r20,r20,r3
10006a6c:	d8c00817 	ldw	r3,32(sp)
10006a70:	1d28b03a 	or	r20,r3,r20
10006a74:	a0010026 	beq	r20,zero,10006e78 <_dtoa_r+0x1290>
10006a78:	00812816 	blt	zero,r2,10006f1c <_dtoa_r+0x1334>
10006a7c:	d8800617 	ldw	r2,24(sp)
10006a80:	8a000005 	stb	r8,0(r17)
10006a84:	14412926 	beq	r2,r17,10006f2c <_dtoa_r+0x1344>
10006a88:	a80b883a 	mov	r5,r21
10006a8c:	000f883a 	mov	r7,zero
10006a90:	01800284 	movi	r6,10
10006a94:	e009883a 	mov	r4,fp
10006a98:	000908c0 	call	1000908c <__multadd>
10006a9c:	102b883a 	mov	r21,r2
10006aa0:	000f883a 	mov	r7,zero
10006aa4:	01800284 	movi	r6,10
10006aa8:	800b883a 	mov	r5,r16
10006aac:	e009883a 	mov	r4,fp
10006ab0:	84c02026 	beq	r16,r19,10006b34 <_dtoa_r+0xf4c>
10006ab4:	000908c0 	call	1000908c <__multadd>
10006ab8:	980b883a 	mov	r5,r19
10006abc:	000f883a 	mov	r7,zero
10006ac0:	01800284 	movi	r6,10
10006ac4:	e009883a 	mov	r4,fp
10006ac8:	1021883a 	mov	r16,r2
10006acc:	000908c0 	call	1000908c <__multadd>
10006ad0:	1027883a 	mov	r19,r2
10006ad4:	b823883a 	mov	r17,r23
10006ad8:	900b883a 	mov	r5,r18
10006adc:	a809883a 	mov	r4,r21
10006ae0:	00059d80 	call	100059d8 <quorem>
10006ae4:	800b883a 	mov	r5,r16
10006ae8:	a809883a 	mov	r4,r21
10006aec:	102d883a 	mov	r22,r2
10006af0:	00098480 	call	10009848 <__mcmp>
10006af4:	980d883a 	mov	r6,r19
10006af8:	900b883a 	mov	r5,r18
10006afc:	e009883a 	mov	r4,fp
10006b00:	1029883a 	mov	r20,r2
10006b04:	00098a00 	call	100098a0 <__mdiff>
10006b08:	102f883a 	mov	r23,r2
10006b0c:	10800317 	ldw	r2,12(r2)
10006b10:	b2000c04 	addi	r8,r22,48
10006b14:	103fc426 	beq	r2,zero,10006a28 <_dtoa_r+0xe40>
10006b18:	b80b883a 	mov	r5,r23
10006b1c:	e009883a 	mov	r4,fp
10006b20:	da000115 	stw	r8,4(sp)
10006b24:	00090680 	call	10009068 <_Bfree>
10006b28:	00800044 	movi	r2,1
10006b2c:	da000117 	ldw	r8,4(sp)
10006b30:	003fca06 	br	10006a5c <_dtoa_r+0xe74>
10006b34:	000908c0 	call	1000908c <__multadd>
10006b38:	1021883a 	mov	r16,r2
10006b3c:	1027883a 	mov	r19,r2
10006b40:	003fe406 	br	10006ad4 <_dtoa_r+0xeec>
10006b44:	d8800217 	ldw	r2,8(sp)
10006b48:	108000d0 	cmplti	r2,r2,3
10006b4c:	10004b1e 	bne	r2,zero,10006c7c <_dtoa_r+0x1094>
10006b50:	d8800617 	ldw	r2,24(sp)
10006b54:	103e0d1e 	bne	r2,zero,1000638c <_dtoa_r+0x7a4>
10006b58:	900b883a 	mov	r5,r18
10006b5c:	e009883a 	mov	r4,fp
10006b60:	000f883a 	mov	r7,zero
10006b64:	01800144 	movi	r6,5
10006b68:	000908c0 	call	1000908c <__multadd>
10006b6c:	100b883a 	mov	r5,r2
10006b70:	a809883a 	mov	r4,r21
10006b74:	1025883a 	mov	r18,r2
10006b78:	00098480 	call	10009848 <__mcmp>
10006b7c:	00be030e 	bge	zero,r2,1000638c <_dtoa_r+0x7a4>
10006b80:	d8c00317 	ldw	r3,12(sp)
10006b84:	00800c44 	movi	r2,49
10006b88:	18800005 	stb	r2,0(r3)
10006b8c:	d8800417 	ldw	r2,16(sp)
10006b90:	1dc00044 	addi	r23,r3,1
10006b94:	14400044 	addi	r17,r2,1
10006b98:	900b883a 	mov	r5,r18
10006b9c:	e009883a 	mov	r4,fp
10006ba0:	00090680 	call	10009068 <_Bfree>
10006ba4:	88800044 	addi	r2,r17,1
10006ba8:	d8800415 	stw	r2,16(sp)
10006bac:	803f121e 	bne	r16,zero,100067f8 <_dtoa_r+0xc10>
10006bb0:	003d9f06 	br	10006230 <_dtoa_r+0x648>
10006bb4:	900b883a 	mov	r5,r18
10006bb8:	a809883a 	mov	r4,r21
10006bbc:	00098480 	call	10009848 <__mcmp>
10006bc0:	103ed10e 	bge	r2,zero,10006708 <_dtoa_r+0xb20>
10006bc4:	a80b883a 	mov	r5,r21
10006bc8:	000f883a 	mov	r7,zero
10006bcc:	01800284 	movi	r6,10
10006bd0:	e009883a 	mov	r4,fp
10006bd4:	000908c0 	call	1000908c <__multadd>
10006bd8:	102b883a 	mov	r21,r2
10006bdc:	d8800417 	ldw	r2,16(sp)
10006be0:	153fffc4 	addi	r20,r2,-1
10006be4:	d8800717 	ldw	r2,28(sp)
10006be8:	103f771e 	bne	r2,zero,100069c8 <_dtoa_r+0xde0>
10006bec:	d8800b17 	ldw	r2,44(sp)
10006bf0:	0081910e 	bge	zero,r2,10007238 <_dtoa_r+0x1650>
10006bf4:	d8800615 	stw	r2,24(sp)
10006bf8:	003eca06 	br	10006724 <_dtoa_r+0xb3c>
10006bfc:	d9800817 	ldw	r6,32(sp)
10006c00:	a80b883a 	mov	r5,r21
10006c04:	e009883a 	mov	r4,fp
10006c08:	00095e40 	call	100095e4 <__pow5mult>
10006c0c:	102b883a 	mov	r21,r2
10006c10:	003e9a06 	br	1000667c <_dtoa_r+0xa94>
10006c14:	00840074 	movhi	r2,4097
10006c18:	1007883a 	mov	r3,r2
10006c1c:	18cae704 	addi	r3,r3,11164
10006c20:	00840074 	movhi	r2,4097
10006c24:	d8c00315 	stw	r3,12(sp)
10006c28:	108ae7c4 	addi	r2,r2,11167
10006c2c:	003da506 	br	100062c4 <_dtoa_r+0x6dc>
10006c30:	d8800117 	ldw	r2,4(sp)
10006c34:	103e991e 	bne	r2,zero,1000669c <_dtoa_r+0xab4>
10006c38:	00800434 	movhi	r2,16
10006c3c:	10bfffc4 	addi	r2,r2,-1
10006c40:	8884703a 	and	r2,r17,r2
10006c44:	103e951e 	bne	r2,zero,1000669c <_dtoa_r+0xab4>
10006c48:	8c5ffc2c 	andhi	r17,r17,32752
10006c4c:	883e9326 	beq	r17,zero,1000669c <_dtoa_r+0xab4>
10006c50:	d8800517 	ldw	r2,20(sp)
10006c54:	a5000044 	addi	r20,r20,1
10006c58:	04400044 	movi	r17,1
10006c5c:	10800044 	addi	r2,r2,1
10006c60:	d8800515 	stw	r2,20(sp)
10006c64:	003e8e06 	br	100066a0 <_dtoa_r+0xab8>
10006c68:	00800044 	movi	r2,1
10006c6c:	04800044 	movi	r18,1
10006c70:	d8800615 	stw	r2,24(sp)
10006c74:	d8801e15 	stw	r2,120(sp)
10006c78:	003ef406 	br	1000684c <_dtoa_r+0xc64>
10006c7c:	d8800417 	ldw	r2,16(sp)
10006c80:	10800044 	addi	r2,r2,1
10006c84:	d8800415 	stw	r2,16(sp)
10006c88:	d8800717 	ldw	r2,28(sp)
10006c8c:	103f571e 	bne	r2,zero,100069ec <_dtoa_r+0xe04>
10006c90:	900b883a 	mov	r5,r18
10006c94:	a809883a 	mov	r4,r21
10006c98:	00059d80 	call	100059d8 <quorem>
10006c9c:	12000c04 	addi	r8,r2,48
10006ca0:	d8800317 	ldw	r2,12(sp)
10006ca4:	0029883a 	mov	r20,zero
10006ca8:	15c00044 	addi	r23,r2,1
10006cac:	12000005 	stb	r8,0(r2)
10006cb0:	003eb006 	br	10006774 <_dtoa_r+0xb8c>
10006cb4:	a005883a 	mov	r2,r20
10006cb8:	003e5506 	br	10006610 <_dtoa_r+0xa28>
10006cbc:	800b883a 	mov	r5,r16
10006cc0:	980d883a 	mov	r6,r19
10006cc4:	e009883a 	mov	r4,fp
10006cc8:	000970c0 	call	1000970c <__lshift>
10006ccc:	1021883a 	mov	r16,r2
10006cd0:	003f4706 	br	100069f0 <_dtoa_r+0xe08>
10006cd4:	14a5c83a 	sub	r18,r2,r18
10006cd8:	003e3e06 	br	100065d4 <_dtoa_r+0x9ec>
10006cdc:	00840074 	movhi	r2,4097
10006ce0:	108af804 	addi	r2,r2,11232
10006ce4:	11800817 	ldw	r6,32(r2)
10006ce8:	11c00917 	ldw	r7,36(r2)
10006cec:	d9000117 	ldw	r4,4(sp)
10006cf0:	880b883a 	mov	r5,r17
10006cf4:	da400e15 	stw	r9,56(sp)
10006cf8:	da800d15 	stw	r10,52(sp)
10006cfc:	000dc300 	call	1000dc30 <__divdf3>
10006d00:	d8800c15 	stw	r2,48(sp)
10006d04:	1827883a 	mov	r19,r3
10006d08:	bdc003cc 	andi	r23,r23,15
10006d0c:	040000c4 	movi	r16,3
10006d10:	da800d17 	ldw	r10,52(sp)
10006d14:	da400e17 	ldw	r9,56(sp)
10006d18:	003c9206 	br	10005f64 <_dtoa_r+0x37c>
10006d1c:	d8000715 	stw	zero,28(sp)
10006d20:	003ed306 	br	10006870 <_dtoa_r+0xc88>
10006d24:	1000031e 	bne	r2,zero,10006d34 <_dtoa_r+0x114c>
10006d28:	da000117 	ldw	r8,4(sp)
10006d2c:	4200004c 	andi	r8,r8,1
10006d30:	403e9b1e 	bne	r8,zero,100067a0 <_dtoa_r+0xbb8>
10006d34:	1805883a 	mov	r2,r3
10006d38:	00000206 	br	10006d44 <_dtoa_r+0x115c>
10006d3c:	b8bfff83 	ldbu	r2,-2(r23)
10006d40:	182f883a 	mov	r23,r3
10006d44:	10803fcc 	andi	r2,r2,255
10006d48:	1080201c 	xori	r2,r2,128
10006d4c:	10bfe004 	addi	r2,r2,-128
10006d50:	10800c18 	cmpnei	r2,r2,48
10006d54:	b8ffffc4 	addi	r3,r23,-1
10006d58:	103ff826 	beq	r2,zero,10006d3c <_dtoa_r+0x1154>
10006d5c:	003e9d06 	br	100067d4 <_dtoa_r+0xbec>
10006d60:	d8c00a17 	ldw	r3,40(sp)
10006d64:	1800bc26 	beq	r3,zero,10007058 <_dtoa_r+0x1470>
10006d68:	d8c00517 	ldw	r3,20(sp)
10006d6c:	10810cc4 	addi	r2,r2,1075
10006d70:	a0a9883a 	add	r20,r20,r2
10006d74:	1885883a 	add	r2,r3,r2
10006d78:	1827883a 	mov	r19,r3
10006d7c:	dc800817 	ldw	r18,32(sp)
10006d80:	d8800515 	stw	r2,20(sp)
10006d84:	003e1a06 	br	100065f0 <_dtoa_r+0xa08>
10006d88:	d8c00317 	ldw	r3,12(sp)
10006d8c:	00800c44 	movi	r2,49
10006d90:	18800005 	stb	r2,0(r3)
10006d94:	d8800417 	ldw	r2,16(sp)
10006d98:	10800044 	addi	r2,r2,1
10006d9c:	d8800415 	stw	r2,16(sp)
10006da0:	003e8c06 	br	100067d4 <_dtoa_r+0xbec>
10006da4:	8009883a 	mov	r4,r16
10006da8:	000f8040 	call	1000f804 <__floatsidf>
10006dac:	900d883a 	mov	r6,r18
10006db0:	980f883a 	mov	r7,r19
10006db4:	1009883a 	mov	r4,r2
10006db8:	180b883a 	mov	r5,r3
10006dbc:	000e7380 	call	1000e738 <__muldf3>
10006dc0:	000d883a 	mov	r6,zero
10006dc4:	01d00734 	movhi	r7,16412
10006dc8:	1009883a 	mov	r4,r2
10006dcc:	180b883a 	mov	r5,r3
10006dd0:	000d2900 	call	1000d290 <__adddf3>
10006dd4:	d8800c15 	stw	r2,48(sp)
10006dd8:	00bf3034 	movhi	r2,64704
10006ddc:	1885883a 	add	r2,r3,r2
10006de0:	d8800d15 	stw	r2,52(sp)
10006de4:	9009883a 	mov	r4,r18
10006de8:	980b883a 	mov	r5,r19
10006dec:	000d883a 	mov	r6,zero
10006df0:	01d00534 	movhi	r7,16404
10006df4:	000edc40 	call	1000edc4 <__subdf3>
10006df8:	ddc00c17 	ldw	r23,48(sp)
10006dfc:	dcc00d17 	ldw	r19,52(sp)
10006e00:	1009883a 	mov	r4,r2
10006e04:	b80d883a 	mov	r6,r23
10006e08:	980f883a 	mov	r7,r19
10006e0c:	180b883a 	mov	r5,r3
10006e10:	1025883a 	mov	r18,r2
10006e14:	1821883a 	mov	r16,r3
10006e18:	000e5580 	call	1000e558 <__gedf2>
10006e1c:	0080ee16 	blt	zero,r2,100071d8 <_dtoa_r+0x15f0>
10006e20:	99e0003c 	xorhi	r7,r19,32768
10006e24:	b80d883a 	mov	r6,r23
10006e28:	9009883a 	mov	r4,r18
10006e2c:	800b883a 	mov	r5,r16
10006e30:	000e6480 	call	1000e648 <__ledf2>
10006e34:	103d380e 	bge	r2,zero,10006318 <_dtoa_r+0x730>
10006e38:	0025883a 	mov	r18,zero
10006e3c:	0021883a 	mov	r16,zero
10006e40:	003d5206 	br	1000638c <_dtoa_r+0x7a4>
10006e44:	d8800417 	ldw	r2,16(sp)
10006e48:	1000ad1e 	bne	r2,zero,10007100 <_dtoa_r+0x1518>
10006e4c:	dc800117 	ldw	r18,4(sp)
10006e50:	8827883a 	mov	r19,r17
10006e54:	04000084 	movi	r16,2
10006e58:	003c5b06 	br	10005fc8 <_dtoa_r+0x3e0>
10006e5c:	d8800117 	ldw	r2,4(sp)
10006e60:	103ecf1e 	bne	r2,zero,100069a0 <_dtoa_r+0xdb8>
10006e64:	00800434 	movhi	r2,16
10006e68:	10bfffc4 	addi	r2,r2,-1
10006e6c:	8884703a 	and	r2,r17,r2
10006e70:	103f7526 	beq	r2,zero,10006c48 <_dtoa_r+0x1060>
10006e74:	003eca06 	br	100069a0 <_dtoa_r+0xdb8>
10006e78:	00800e0e 	bge	zero,r2,10006eb4 <_dtoa_r+0x12cc>
10006e7c:	a80b883a 	mov	r5,r21
10006e80:	01800044 	movi	r6,1
10006e84:	e009883a 	mov	r4,fp
10006e88:	da000115 	stw	r8,4(sp)
10006e8c:	000970c0 	call	1000970c <__lshift>
10006e90:	900b883a 	mov	r5,r18
10006e94:	1009883a 	mov	r4,r2
10006e98:	102b883a 	mov	r21,r2
10006e9c:	00098480 	call	10009848 <__mcmp>
10006ea0:	da000117 	ldw	r8,4(sp)
10006ea4:	0080d50e 	bge	zero,r2,100071fc <_dtoa_r+0x1614>
10006ea8:	42000e60 	cmpeqi	r8,r8,57
10006eac:	4000c31e 	bne	r8,zero,100071bc <_dtoa_r+0x15d4>
10006eb0:	b2000c44 	addi	r8,r22,49
10006eb4:	8029883a 	mov	r20,r16
10006eb8:	8a000005 	stb	r8,0(r17)
10006ebc:	9821883a 	mov	r16,r19
10006ec0:	003e4406 	br	100067d4 <_dtoa_r+0xbec>
10006ec4:	81400117 	ldw	r5,4(r16)
10006ec8:	e009883a 	mov	r4,fp
10006ecc:	0008fc40 	call	10008fc4 <_Balloc>
10006ed0:	81800417 	ldw	r6,16(r16)
10006ed4:	81400304 	addi	r5,r16,12
10006ed8:	11000304 	addi	r4,r2,12
10006edc:	31800084 	addi	r6,r6,2
10006ee0:	300c90ba 	slli	r6,r6,2
10006ee4:	1023883a 	mov	r17,r2
10006ee8:	00033640 	call	10003364 <memcpy>
10006eec:	01800044 	movi	r6,1
10006ef0:	880b883a 	mov	r5,r17
10006ef4:	e009883a 	mov	r4,fp
10006ef8:	000970c0 	call	1000970c <__lshift>
10006efc:	1027883a 	mov	r19,r2
10006f00:	003ebd06 	br	100069f8 <_dtoa_r+0xe10>
10006f04:	dd400117 	ldw	r21,4(sp)
10006f08:	003cc906 	br	10006230 <_dtoa_r+0x648>
10006f0c:	d8800517 	ldw	r2,20(sp)
10006f10:	d8c00617 	ldw	r3,24(sp)
10006f14:	10e7c83a 	sub	r19,r2,r3
10006f18:	003db506 	br	100065f0 <_dtoa_r+0xa08>
10006f1c:	40800e58 	cmpnei	r2,r8,57
10006f20:	1000a626 	beq	r2,zero,100071bc <_dtoa_r+0x15d4>
10006f24:	42000044 	addi	r8,r8,1
10006f28:	003fe206 	br	10006eb4 <_dtoa_r+0x12cc>
10006f2c:	8029883a 	mov	r20,r16
10006f30:	9821883a 	mov	r16,r19
10006f34:	003e0f06 	br	10006774 <_dtoa_r+0xb8c>
10006f38:	d9000c17 	ldw	r4,48(sp)
10006f3c:	d9400d17 	ldw	r5,52(sp)
10006f40:	da401015 	stw	r9,64(sp)
10006f44:	000e7380 	call	1000e738 <__muldf3>
10006f48:	d9000e17 	ldw	r4,56(sp)
10006f4c:	d8c00d15 	stw	r3,52(sp)
10006f50:	da401017 	ldw	r9,64(sp)
10006f54:	d8c00317 	ldw	r3,12(sp)
10006f58:	d8800c15 	stw	r2,48(sp)
10006f5c:	20800058 	cmpnei	r2,r4,1
10006f60:	1a400005 	stb	r9,0(r3)
10006f64:	1907883a 	add	r3,r3,r4
10006f68:	1809883a 	mov	r4,r3
10006f6c:	10001d26 	beq	r2,zero,10006fe4 <_dtoa_r+0x13fc>
10006f70:	8007883a 	mov	r3,r16
10006f74:	9005883a 	mov	r2,r18
10006f78:	dc400e15 	stw	r17,56(sp)
10006f7c:	2021883a 	mov	r16,r4
10006f80:	000d883a 	mov	r6,zero
10006f84:	01d00934 	movhi	r7,16420
10006f88:	1009883a 	mov	r4,r2
10006f8c:	180b883a 	mov	r5,r3
10006f90:	000e7380 	call	1000e738 <__muldf3>
10006f94:	180b883a 	mov	r5,r3
10006f98:	1009883a 	mov	r4,r2
10006f9c:	1825883a 	mov	r18,r3
10006fa0:	1023883a 	mov	r17,r2
10006fa4:	000f7840 	call	1000f784 <__fixdfsi>
10006fa8:	1009883a 	mov	r4,r2
10006fac:	1027883a 	mov	r19,r2
10006fb0:	000f8040 	call	1000f804 <__floatsidf>
10006fb4:	100d883a 	mov	r6,r2
10006fb8:	180f883a 	mov	r7,r3
10006fbc:	8809883a 	mov	r4,r17
10006fc0:	900b883a 	mov	r5,r18
10006fc4:	bdc00044 	addi	r23,r23,1
10006fc8:	9cc00c04 	addi	r19,r19,48
10006fcc:	000edc40 	call	1000edc4 <__subdf3>
10006fd0:	bcffffc5 	stb	r19,-1(r23)
10006fd4:	bc3fea1e 	bne	r23,r16,10006f80 <_dtoa_r+0x1398>
10006fd8:	dc400e17 	ldw	r17,56(sp)
10006fdc:	1025883a 	mov	r18,r2
10006fe0:	1821883a 	mov	r16,r3
10006fe4:	d9000c17 	ldw	r4,48(sp)
10006fe8:	d9400d17 	ldw	r5,52(sp)
10006fec:	000d883a 	mov	r6,zero
10006ff0:	01cff834 	movhi	r7,16352
10006ff4:	000d2900 	call	1000d290 <__adddf3>
10006ff8:	100d883a 	mov	r6,r2
10006ffc:	180f883a 	mov	r7,r3
10007000:	9009883a 	mov	r4,r18
10007004:	800b883a 	mov	r5,r16
10007008:	000e5580 	call	1000e558 <__gedf2>
1000700c:	00807516 	blt	zero,r2,100071e4 <_dtoa_r+0x15fc>
10007010:	d9800c17 	ldw	r6,48(sp)
10007014:	d9c00d17 	ldw	r7,52(sp)
10007018:	0009883a 	mov	r4,zero
1000701c:	014ff834 	movhi	r5,16352
10007020:	000edc40 	call	1000edc4 <__subdf3>
10007024:	100d883a 	mov	r6,r2
10007028:	180f883a 	mov	r7,r3
1000702c:	9009883a 	mov	r4,r18
10007030:	800b883a 	mov	r5,r16
10007034:	000e6480 	call	1000e648 <__ledf2>
10007038:	103cb70e 	bge	r2,zero,10006318 <_dtoa_r+0x730>
1000703c:	00000106 	br	10007044 <_dtoa_r+0x145c>
10007040:	182f883a 	mov	r23,r3
10007044:	b8bfffc7 	ldb	r2,-1(r23)
10007048:	b8ffffc4 	addi	r3,r23,-1
1000704c:	10800c20 	cmpeqi	r2,r2,48
10007050:	103ffb1e 	bne	r2,zero,10007040 <_dtoa_r+0x1458>
10007054:	003c7306 	br	10006224 <_dtoa_r+0x63c>
10007058:	d8c01217 	ldw	r3,72(sp)
1000705c:	d9000517 	ldw	r4,20(sp)
10007060:	00800d84 	movi	r2,54
10007064:	10c5c83a 	sub	r2,r2,r3
10007068:	a0a9883a 	add	r20,r20,r2
1000706c:	2085883a 	add	r2,r4,r2
10007070:	2027883a 	mov	r19,r4
10007074:	dc800817 	ldw	r18,32(sp)
10007078:	d8800515 	stw	r2,20(sp)
1000707c:	003d5c06 	br	100065f0 <_dtoa_r+0xa08>
10007080:	d8800617 	ldw	r2,24(sp)
10007084:	103f4726 	beq	r2,zero,10006da4 <_dtoa_r+0x11bc>
10007088:	ddc00b17 	ldw	r23,44(sp)
1000708c:	05fca20e 	bge	zero,r23,10006318 <_dtoa_r+0x730>
10007090:	980b883a 	mov	r5,r19
10007094:	000d883a 	mov	r6,zero
10007098:	01d00934 	movhi	r7,16420
1000709c:	9009883a 	mov	r4,r18
100070a0:	000e7380 	call	1000e738 <__muldf3>
100070a4:	81000044 	addi	r4,r16,1
100070a8:	1025883a 	mov	r18,r2
100070ac:	1827883a 	mov	r19,r3
100070b0:	000f8040 	call	1000f804 <__floatsidf>
100070b4:	900d883a 	mov	r6,r18
100070b8:	980f883a 	mov	r7,r19
100070bc:	1009883a 	mov	r4,r2
100070c0:	180b883a 	mov	r5,r3
100070c4:	000e7380 	call	1000e738 <__muldf3>
100070c8:	000d883a 	mov	r6,zero
100070cc:	01d00734 	movhi	r7,16412
100070d0:	1009883a 	mov	r4,r2
100070d4:	180b883a 	mov	r5,r3
100070d8:	000d2900 	call	1000d290 <__adddf3>
100070dc:	d8800c15 	stw	r2,48(sp)
100070e0:	d8800417 	ldw	r2,16(sp)
100070e4:	ddc00e15 	stw	r23,56(sp)
100070e8:	10bfffc4 	addi	r2,r2,-1
100070ec:	d8800f15 	stw	r2,60(sp)
100070f0:	00bf3034 	movhi	r2,64704
100070f4:	1885883a 	add	r2,r3,r2
100070f8:	d8800d15 	stw	r2,52(sp)
100070fc:	003bd006 	br	10006040 <_dtoa_r+0x458>
10007100:	d8800417 	ldw	r2,16(sp)
10007104:	d9000117 	ldw	r4,4(sp)
10007108:	880b883a 	mov	r5,r17
1000710c:	00afc83a 	sub	r23,zero,r2
10007110:	b88003cc 	andi	r2,r23,15
10007114:	100690fa 	slli	r3,r2,3
10007118:	00840074 	movhi	r2,4097
1000711c:	108b0204 	addi	r2,r2,11272
10007120:	10c5883a 	add	r2,r2,r3
10007124:	11800017 	ldw	r6,0(r2)
10007128:	11c00117 	ldw	r7,4(r2)
1000712c:	b82fd13a 	srai	r23,r23,4
10007130:	000e7380 	call	1000e738 <__muldf3>
10007134:	1025883a 	mov	r18,r2
10007138:	1827883a 	mov	r19,r3
1000713c:	b8004a26 	beq	r23,zero,10007268 <_dtoa_r+0x1680>
10007140:	02040074 	movhi	r8,4097
10007144:	04000084 	movi	r16,2
10007148:	420af804 	addi	r8,r8,11232
1000714c:	dc400c15 	stw	r17,48(sp)
10007150:	000f883a 	mov	r7,zero
10007154:	8023883a 	mov	r17,r16
10007158:	4021883a 	mov	r16,r8
1000715c:	b980004c 	andi	r6,r23,1
10007160:	1009883a 	mov	r4,r2
10007164:	b82fd07a 	srai	r23,r23,1
10007168:	180b883a 	mov	r5,r3
1000716c:	30000526 	beq	r6,zero,10007184 <_dtoa_r+0x159c>
10007170:	81c00117 	ldw	r7,4(r16)
10007174:	81800017 	ldw	r6,0(r16)
10007178:	8c400044 	addi	r17,r17,1
1000717c:	000e7380 	call	1000e738 <__muldf3>
10007180:	01c00044 	movi	r7,1
10007184:	84000204 	addi	r16,r16,8
10007188:	b83ff41e 	bne	r23,zero,1000715c <_dtoa_r+0x1574>
1000718c:	39c03fcc 	andi	r7,r7,255
10007190:	8821883a 	mov	r16,r17
10007194:	dc400c17 	ldw	r17,48(sp)
10007198:	383b8b26 	beq	r7,zero,10005fc8 <_dtoa_r+0x3e0>
1000719c:	1025883a 	mov	r18,r2
100071a0:	1827883a 	mov	r19,r3
100071a4:	003b8806 	br	10005fc8 <_dtoa_r+0x3e0>
100071a8:	d8800417 	ldw	r2,16(sp)
100071ac:	02000c44 	movi	r8,49
100071b0:	10800044 	addi	r2,r2,1
100071b4:	d8800415 	stw	r2,16(sp)
100071b8:	003cf606 	br	10006594 <_dtoa_r+0x9ac>
100071bc:	00800e44 	movi	r2,57
100071c0:	8029883a 	mov	r20,r16
100071c4:	88800005 	stb	r2,0(r17)
100071c8:	9821883a 	mov	r16,r19
100071cc:	00c00e44 	movi	r3,57
100071d0:	d9400317 	ldw	r5,12(sp)
100071d4:	003d7706 	br	100067b4 <_dtoa_r+0xbcc>
100071d8:	0025883a 	mov	r18,zero
100071dc:	0021883a 	mov	r16,zero
100071e0:	003e6706 	br	10006b80 <_dtoa_r+0xf98>
100071e4:	d8800f17 	ldw	r2,60(sp)
100071e8:	ba3fffc3 	ldbu	r8,-1(r23)
100071ec:	d9000317 	ldw	r4,12(sp)
100071f0:	10800044 	addi	r2,r2,1
100071f4:	d8800415 	stw	r2,16(sp)
100071f8:	003cdf06 	br	10006578 <_dtoa_r+0x990>
100071fc:	103f2d1e 	bne	r2,zero,10006eb4 <_dtoa_r+0x12cc>
10007200:	4080004c 	andi	r2,r8,1
10007204:	103f281e 	bne	r2,zero,10006ea8 <_dtoa_r+0x12c0>
10007208:	003f2a06 	br	10006eb4 <_dtoa_r+0x12cc>
1000720c:	d8800f17 	ldw	r2,60(sp)
10007210:	8811883a 	mov	r8,r17
10007214:	d9000317 	ldw	r4,12(sp)
10007218:	10800044 	addi	r2,r2,1
1000721c:	d8800415 	stw	r2,16(sp)
10007220:	003cd506 	br	10006578 <_dtoa_r+0x990>
10007224:	40800e60 	cmpeqi	r2,r8,57
10007228:	8dc00044 	addi	r23,r17,1
1000722c:	103fe31e 	bne	r2,zero,100071bc <_dtoa_r+0x15d4>
10007230:	053f1f16 	blt	zero,r20,10006eb0 <_dtoa_r+0x12c8>
10007234:	003f1f06 	br	10006eb4 <_dtoa_r+0x12cc>
10007238:	d8800217 	ldw	r2,8(sp)
1000723c:	108000c8 	cmpgei	r2,r2,3
10007240:	103e9326 	beq	r2,zero,10006c90 <_dtoa_r+0x10a8>
10007244:	d8800b17 	ldw	r2,44(sp)
10007248:	dd000415 	stw	r20,16(sp)
1000724c:	d8800615 	stw	r2,24(sp)
10007250:	003e3f06 	br	10006b50 <_dtoa_r+0xf68>
10007254:	d8800217 	ldw	r2,8(sp)
10007258:	108000c8 	cmpgei	r2,r2,3
1000725c:	103ff91e 	bne	r2,zero,10007244 <_dtoa_r+0x165c>
10007260:	d8800b17 	ldw	r2,44(sp)
10007264:	003de006 	br	100069e8 <_dtoa_r+0xe00>
10007268:	04000084 	movi	r16,2
1000726c:	003b5606 	br	10005fc8 <_dtoa_r+0x3e0>
10007270:	d8800f17 	ldw	r2,60(sp)
10007274:	d9000317 	ldw	r4,12(sp)
10007278:	10800044 	addi	r2,r2,1
1000727c:	d8800415 	stw	r2,16(sp)
10007280:	003cbd06 	br	10006578 <_dtoa_r+0x990>
10007284:	00840074 	movhi	r2,4097
10007288:	108ae804 	addi	r2,r2,11168
1000728c:	d8800315 	stw	r2,12(sp)
10007290:	003a8706 	br	10005cb0 <_dtoa_r+0xc8>
10007294:	000b883a 	mov	r5,zero
10007298:	003b1b06 	br	10005f08 <_dtoa_r+0x320>
1000729c:	18c00120 	cmpeqi	r3,r3,4
100072a0:	183d0f1e 	bne	r3,zero,100066e0 <_dtoa_r+0xaf8>
100072a4:	00c00f04 	movi	r3,60
100072a8:	1885c83a 	sub	r2,r3,r2
100072ac:	003d0706 	br	100066cc <_dtoa_r+0xae4>

100072b0 <__sflush_r>:
100072b0:	2880030b 	ldhu	r2,12(r5)
100072b4:	defffb04 	addi	sp,sp,-20
100072b8:	dcc00315 	stw	r19,12(sp)
100072bc:	dc000015 	stw	r16,0(sp)
100072c0:	dfc00415 	stw	ra,16(sp)
100072c4:	dc800215 	stw	r18,8(sp)
100072c8:	dc400115 	stw	r17,4(sp)
100072cc:	10c0020c 	andi	r3,r2,8
100072d0:	2821883a 	mov	r16,r5
100072d4:	2027883a 	mov	r19,r4
100072d8:	18003f1e 	bne	r3,zero,100073d8 <__sflush_r+0x128>
100072dc:	28c00117 	ldw	r3,4(r5)
100072e0:	10820014 	ori	r2,r2,2048
100072e4:	2880030d 	sth	r2,12(r5)
100072e8:	00c0550e 	bge	zero,r3,10007440 <__sflush_r+0x190>
100072ec:	82000a17 	ldw	r8,40(r16)
100072f0:	40003126 	beq	r8,zero,100073b8 <__sflush_r+0x108>
100072f4:	9c400017 	ldw	r17,0(r19)
100072f8:	1104000c 	andi	r4,r2,4096
100072fc:	98000015 	stw	zero,0(r19)
10007300:	1007883a 	mov	r3,r2
10007304:	81400717 	ldw	r5,28(r16)
10007308:	2000521e 	bne	r4,zero,10007454 <__sflush_r+0x1a4>
1000730c:	01c00044 	movi	r7,1
10007310:	000d883a 	mov	r6,zero
10007314:	9809883a 	mov	r4,r19
10007318:	403ee83a 	callr	r8
1000731c:	10ffffd8 	cmpnei	r3,r2,-1
10007320:	18005826 	beq	r3,zero,10007484 <__sflush_r+0x1d4>
10007324:	80c0030b 	ldhu	r3,12(r16)
10007328:	82000a17 	ldw	r8,40(r16)
1000732c:	81400717 	ldw	r5,28(r16)
10007330:	18c0010c 	andi	r3,r3,4
10007334:	18000626 	beq	r3,zero,10007350 <__sflush_r+0xa0>
10007338:	81000117 	ldw	r4,4(r16)
1000733c:	80c00c17 	ldw	r3,48(r16)
10007340:	1105c83a 	sub	r2,r2,r4
10007344:	18000226 	beq	r3,zero,10007350 <__sflush_r+0xa0>
10007348:	80c00f17 	ldw	r3,60(r16)
1000734c:	10c5c83a 	sub	r2,r2,r3
10007350:	000f883a 	mov	r7,zero
10007354:	100d883a 	mov	r6,r2
10007358:	9809883a 	mov	r4,r19
1000735c:	403ee83a 	callr	r8
10007360:	10ffffd8 	cmpnei	r3,r2,-1
10007364:	18003d1e 	bne	r3,zero,1000745c <__sflush_r+0x1ac>
10007368:	99000017 	ldw	r4,0(r19)
1000736c:	80c0030b 	ldhu	r3,12(r16)
10007370:	20004e26 	beq	r4,zero,100074ac <__sflush_r+0x1fc>
10007374:	21400760 	cmpeqi	r5,r4,29
10007378:	2800021e 	bne	r5,zero,10007384 <__sflush_r+0xd4>
1000737c:	210005a0 	cmpeqi	r4,r4,22
10007380:	20002c26 	beq	r4,zero,10007434 <__sflush_r+0x184>
10007384:	80800417 	ldw	r2,16(r16)
10007388:	18fdffcc 	andi	r3,r3,63487
1000738c:	80c0030d 	sth	r3,12(r16)
10007390:	80000115 	stw	zero,4(r16)
10007394:	80800015 	stw	r2,0(r16)
10007398:	81400c17 	ldw	r5,48(r16)
1000739c:	9c400015 	stw	r17,0(r19)
100073a0:	28000526 	beq	r5,zero,100073b8 <__sflush_r+0x108>
100073a4:	80801004 	addi	r2,r16,64
100073a8:	28800226 	beq	r5,r2,100073b4 <__sflush_r+0x104>
100073ac:	9809883a 	mov	r4,r19
100073b0:	00079c00 	call	100079c0 <_free_r>
100073b4:	80000c15 	stw	zero,48(r16)
100073b8:	0005883a 	mov	r2,zero
100073bc:	dfc00417 	ldw	ra,16(sp)
100073c0:	dcc00317 	ldw	r19,12(sp)
100073c4:	dc800217 	ldw	r18,8(sp)
100073c8:	dc400117 	ldw	r17,4(sp)
100073cc:	dc000017 	ldw	r16,0(sp)
100073d0:	dec00504 	addi	sp,sp,20
100073d4:	f800283a 	ret
100073d8:	2c800417 	ldw	r18,16(r5)
100073dc:	903ff626 	beq	r18,zero,100073b8 <__sflush_r+0x108>
100073e0:	2c400017 	ldw	r17,0(r5)
100073e4:	108000cc 	andi	r2,r2,3
100073e8:	2c800015 	stw	r18,0(r5)
100073ec:	8ca3c83a 	sub	r17,r17,r18
100073f0:	1000161e 	bne	r2,zero,1000744c <__sflush_r+0x19c>
100073f4:	28800517 	ldw	r2,20(r5)
100073f8:	80800215 	stw	r2,8(r16)
100073fc:	04400316 	blt	zero,r17,1000740c <__sflush_r+0x15c>
10007400:	003fed06 	br	100073b8 <__sflush_r+0x108>
10007404:	90a5883a 	add	r18,r18,r2
10007408:	047feb0e 	bge	zero,r17,100073b8 <__sflush_r+0x108>
1000740c:	80800917 	ldw	r2,36(r16)
10007410:	81400717 	ldw	r5,28(r16)
10007414:	880f883a 	mov	r7,r17
10007418:	900d883a 	mov	r6,r18
1000741c:	9809883a 	mov	r4,r19
10007420:	103ee83a 	callr	r2
10007424:	88a3c83a 	sub	r17,r17,r2
10007428:	00bff616 	blt	zero,r2,10007404 <__sflush_r+0x154>
1000742c:	80c0030b 	ldhu	r3,12(r16)
10007430:	00bfffc4 	movi	r2,-1
10007434:	18c01014 	ori	r3,r3,64
10007438:	80c0030d 	sth	r3,12(r16)
1000743c:	003fdf06 	br	100073bc <__sflush_r+0x10c>
10007440:	28c00f17 	ldw	r3,60(r5)
10007444:	00ffa916 	blt	zero,r3,100072ec <__sflush_r+0x3c>
10007448:	003fdb06 	br	100073b8 <__sflush_r+0x108>
1000744c:	0005883a 	mov	r2,zero
10007450:	003fe906 	br	100073f8 <__sflush_r+0x148>
10007454:	80801417 	ldw	r2,80(r16)
10007458:	003fb506 	br	10007330 <__sflush_r+0x80>
1000745c:	80c0030b 	ldhu	r3,12(r16)
10007460:	81000417 	ldw	r4,16(r16)
10007464:	80000115 	stw	zero,4(r16)
10007468:	197dffcc 	andi	r5,r3,63487
1000746c:	8140030d 	sth	r5,12(r16)
10007470:	81000015 	stw	r4,0(r16)
10007474:	18c4000c 	andi	r3,r3,4096
10007478:	183fc726 	beq	r3,zero,10007398 <__sflush_r+0xe8>
1000747c:	80801415 	stw	r2,80(r16)
10007480:	003fc506 	br	10007398 <__sflush_r+0xe8>
10007484:	98c00017 	ldw	r3,0(r19)
10007488:	183fa626 	beq	r3,zero,10007324 <__sflush_r+0x74>
1000748c:	19000760 	cmpeqi	r4,r3,29
10007490:	20000e1e 	bne	r4,zero,100074cc <__sflush_r+0x21c>
10007494:	18c00598 	cmpnei	r3,r3,22
10007498:	18000c26 	beq	r3,zero,100074cc <__sflush_r+0x21c>
1000749c:	80c0030b 	ldhu	r3,12(r16)
100074a0:	18c01014 	ori	r3,r3,64
100074a4:	80c0030d 	sth	r3,12(r16)
100074a8:	003fc406 	br	100073bc <__sflush_r+0x10c>
100074ac:	81000417 	ldw	r4,16(r16)
100074b0:	197dffcc 	andi	r5,r3,63487
100074b4:	8140030d 	sth	r5,12(r16)
100074b8:	80000115 	stw	zero,4(r16)
100074bc:	81000015 	stw	r4,0(r16)
100074c0:	18c4000c 	andi	r3,r3,4096
100074c4:	183fb426 	beq	r3,zero,10007398 <__sflush_r+0xe8>
100074c8:	003fec06 	br	1000747c <__sflush_r+0x1cc>
100074cc:	9c400015 	stw	r17,0(r19)
100074d0:	0005883a 	mov	r2,zero
100074d4:	003fb906 	br	100073bc <__sflush_r+0x10c>

100074d8 <_fflush_r>:
100074d8:	defffd04 	addi	sp,sp,-12
100074dc:	dc000115 	stw	r16,4(sp)
100074e0:	dfc00215 	stw	ra,8(sp)
100074e4:	2021883a 	mov	r16,r4
100074e8:	20000226 	beq	r4,zero,100074f4 <_fflush_r+0x1c>
100074ec:	20800e17 	ldw	r2,56(r4)
100074f0:	10000726 	beq	r2,zero,10007510 <_fflush_r+0x38>
100074f4:	2880030f 	ldh	r2,12(r5)
100074f8:	10000a1e 	bne	r2,zero,10007524 <_fflush_r+0x4c>
100074fc:	0005883a 	mov	r2,zero
10007500:	dfc00217 	ldw	ra,8(sp)
10007504:	dc000117 	ldw	r16,4(sp)
10007508:	dec00304 	addi	sp,sp,12
1000750c:	f800283a 	ret
10007510:	d9400015 	stw	r5,0(sp)
10007514:	000785c0 	call	1000785c <__sinit>
10007518:	d9400017 	ldw	r5,0(sp)
1000751c:	2880030f 	ldh	r2,12(r5)
10007520:	103ff626 	beq	r2,zero,100074fc <_fflush_r+0x24>
10007524:	8009883a 	mov	r4,r16
10007528:	dfc00217 	ldw	ra,8(sp)
1000752c:	dc000117 	ldw	r16,4(sp)
10007530:	dec00304 	addi	sp,sp,12
10007534:	00072b01 	jmpi	100072b0 <__sflush_r>

10007538 <fflush>:
10007538:	200b883a 	mov	r5,r4
1000753c:	20000326 	beq	r4,zero,1000754c <fflush+0x14>
10007540:	00840074 	movhi	r2,4097
10007544:	1114a817 	ldw	r4,21152(r2)
10007548:	00074d81 	jmpi	100074d8 <_fflush_r>
1000754c:	00840074 	movhi	r2,4097
10007550:	1114a717 	ldw	r4,21148(r2)
10007554:	01440034 	movhi	r5,4096
10007558:	295d3604 	addi	r5,r5,29912
1000755c:	00082241 	jmpi	10008224 <_fwalk_reent>

10007560 <__fp_lock>:
10007560:	0005883a 	mov	r2,zero
10007564:	f800283a 	ret

10007568 <_cleanup_r>:
10007568:	01440074 	movhi	r5,4097
1000756c:	296f5204 	addi	r5,r5,-17080
10007570:	00082241 	jmpi	10008224 <_fwalk_reent>

10007574 <__sinit.part.0>:
10007574:	00c40034 	movhi	r3,4096
10007578:	20800117 	ldw	r2,4(r4)
1000757c:	18dd5a04 	addi	r3,r3,30056
10007580:	20c00f15 	stw	r3,60(r4)
10007584:	2140bb04 	addi	r5,r4,748
10007588:	00c000c4 	movi	r3,3
1000758c:	20c0b915 	stw	r3,740(r4)
10007590:	2140ba15 	stw	r5,744(r4)
10007594:	2000b815 	stw	zero,736(r4)
10007598:	10001705 	stb	zero,92(r2)
1000759c:	10001745 	stb	zero,93(r2)
100075a0:	10001785 	stb	zero,94(r2)
100075a4:	100017c5 	stb	zero,95(r2)
100075a8:	10001805 	stb	zero,96(r2)
100075ac:	10001845 	stb	zero,97(r2)
100075b0:	10001885 	stb	zero,98(r2)
100075b4:	100018c5 	stb	zero,99(r2)
100075b8:	00c00104 	movi	r3,4
100075bc:	10c00315 	stw	r3,12(r2)
100075c0:	02040074 	movhi	r8,4097
100075c4:	20c00217 	ldw	r3,8(r4)
100075c8:	01c40074 	movhi	r7,4097
100075cc:	01840074 	movhi	r6,4097
100075d0:	01440074 	movhi	r5,4097
100075d4:	42296104 	addi	r8,r8,-23164
100075d8:	39e97804 	addi	r7,r7,-23072
100075dc:	31a99804 	addi	r6,r6,-22944
100075e0:	2969af04 	addi	r5,r5,-22852
100075e4:	02400074 	movhi	r9,1
100075e8:	10001915 	stw	zero,100(r2)
100075ec:	10000015 	stw	zero,0(r2)
100075f0:	10000115 	stw	zero,4(r2)
100075f4:	10000215 	stw	zero,8(r2)
100075f8:	10000415 	stw	zero,16(r2)
100075fc:	10000515 	stw	zero,20(r2)
10007600:	10000615 	stw	zero,24(r2)
10007604:	10800715 	stw	r2,28(r2)
10007608:	12000815 	stw	r8,32(r2)
1000760c:	11c00915 	stw	r7,36(r2)
10007610:	11800a15 	stw	r6,40(r2)
10007614:	11400b15 	stw	r5,44(r2)
10007618:	4a400284 	addi	r9,r9,10
1000761c:	1a400315 	stw	r9,12(r3)
10007620:	18001915 	stw	zero,100(r3)
10007624:	18000015 	stw	zero,0(r3)
10007628:	18000115 	stw	zero,4(r3)
1000762c:	18000215 	stw	zero,8(r3)
10007630:	18000415 	stw	zero,16(r3)
10007634:	18001705 	stb	zero,92(r3)
10007638:	18001745 	stb	zero,93(r3)
1000763c:	18001785 	stb	zero,94(r3)
10007640:	180017c5 	stb	zero,95(r3)
10007644:	18001805 	stb	zero,96(r3)
10007648:	18001845 	stb	zero,97(r3)
1000764c:	18001885 	stb	zero,98(r3)
10007650:	180018c5 	stb	zero,99(r3)
10007654:	20800317 	ldw	r2,12(r4)
10007658:	024000b4 	movhi	r9,2
1000765c:	18000515 	stw	zero,20(r3)
10007660:	18000615 	stw	zero,24(r3)
10007664:	18c00715 	stw	r3,28(r3)
10007668:	1a000815 	stw	r8,32(r3)
1000766c:	19c00915 	stw	r7,36(r3)
10007670:	19800a15 	stw	r6,40(r3)
10007674:	19400b15 	stw	r5,44(r3)
10007678:	4a400484 	addi	r9,r9,18
1000767c:	10001915 	stw	zero,100(r2)
10007680:	10000015 	stw	zero,0(r2)
10007684:	10000115 	stw	zero,4(r2)
10007688:	10000215 	stw	zero,8(r2)
1000768c:	12400315 	stw	r9,12(r2)
10007690:	10000415 	stw	zero,16(r2)
10007694:	10000515 	stw	zero,20(r2)
10007698:	10000615 	stw	zero,24(r2)
1000769c:	10001705 	stb	zero,92(r2)
100076a0:	10001745 	stb	zero,93(r2)
100076a4:	10001785 	stb	zero,94(r2)
100076a8:	100017c5 	stb	zero,95(r2)
100076ac:	10001805 	stb	zero,96(r2)
100076b0:	10001845 	stb	zero,97(r2)
100076b4:	10001885 	stb	zero,98(r2)
100076b8:	100018c5 	stb	zero,99(r2)
100076bc:	10800715 	stw	r2,28(r2)
100076c0:	12000815 	stw	r8,32(r2)
100076c4:	11c00915 	stw	r7,36(r2)
100076c8:	11800a15 	stw	r6,40(r2)
100076cc:	11400b15 	stw	r5,44(r2)
100076d0:	00800044 	movi	r2,1
100076d4:	20800e15 	stw	r2,56(r4)
100076d8:	f800283a 	ret

100076dc <__fp_unlock>:
100076dc:	0005883a 	mov	r2,zero
100076e0:	f800283a 	ret

100076e4 <__sfmoreglue>:
100076e4:	defffc04 	addi	sp,sp,-16
100076e8:	dc400115 	stw	r17,4(sp)
100076ec:	2c7fffc4 	addi	r17,r5,-1
100076f0:	8c401a24 	muli	r17,r17,104
100076f4:	dc800215 	stw	r18,8(sp)
100076f8:	2825883a 	mov	r18,r5
100076fc:	89401d04 	addi	r5,r17,116
10007700:	dc000015 	stw	r16,0(sp)
10007704:	dfc00315 	stw	ra,12(sp)
10007708:	00084cc0 	call	100084cc <_malloc_r>
1000770c:	1021883a 	mov	r16,r2
10007710:	10000726 	beq	r2,zero,10007730 <__sfmoreglue+0x4c>
10007714:	11000304 	addi	r4,r2,12
10007718:	10000015 	stw	zero,0(r2)
1000771c:	14800115 	stw	r18,4(r2)
10007720:	11000215 	stw	r4,8(r2)
10007724:	89801a04 	addi	r6,r17,104
10007728:	000b883a 	mov	r5,zero
1000772c:	0008ed40 	call	10008ed4 <memset>
10007730:	8005883a 	mov	r2,r16
10007734:	dfc00317 	ldw	ra,12(sp)
10007738:	dc800217 	ldw	r18,8(sp)
1000773c:	dc400117 	ldw	r17,4(sp)
10007740:	dc000017 	ldw	r16,0(sp)
10007744:	dec00404 	addi	sp,sp,16
10007748:	f800283a 	ret

1000774c <__sfp>:
1000774c:	defffd04 	addi	sp,sp,-12
10007750:	00840074 	movhi	r2,4097
10007754:	dc000015 	stw	r16,0(sp)
10007758:	1414a717 	ldw	r16,21148(r2)
1000775c:	dc400115 	stw	r17,4(sp)
10007760:	dfc00215 	stw	ra,8(sp)
10007764:	80800e17 	ldw	r2,56(r16)
10007768:	2023883a 	mov	r17,r4
1000776c:	10002b26 	beq	r2,zero,1000781c <__sfp+0xd0>
10007770:	8400b804 	addi	r16,r16,736
10007774:	80c00117 	ldw	r3,4(r16)
10007778:	80800217 	ldw	r2,8(r16)
1000777c:	18ffffc4 	addi	r3,r3,-1
10007780:	1800050e 	bge	r3,zero,10007798 <__sfp+0x4c>
10007784:	00002106 	br	1000780c <__sfp+0xc0>
10007788:	18ffffc4 	addi	r3,r3,-1
1000778c:	193fffd8 	cmpnei	r4,r3,-1
10007790:	10801a04 	addi	r2,r2,104
10007794:	20001d26 	beq	r4,zero,1000780c <__sfp+0xc0>
10007798:	1100030f 	ldh	r4,12(r2)
1000779c:	203ffa1e 	bne	r4,zero,10007788 <__sfp+0x3c>
100077a0:	00fffff4 	movhi	r3,65535
100077a4:	18c00044 	addi	r3,r3,1
100077a8:	10001915 	stw	zero,100(r2)
100077ac:	10000015 	stw	zero,0(r2)
100077b0:	10000115 	stw	zero,4(r2)
100077b4:	10000215 	stw	zero,8(r2)
100077b8:	10c00315 	stw	r3,12(r2)
100077bc:	10000415 	stw	zero,16(r2)
100077c0:	10000515 	stw	zero,20(r2)
100077c4:	10000615 	stw	zero,24(r2)
100077c8:	10001705 	stb	zero,92(r2)
100077cc:	10001745 	stb	zero,93(r2)
100077d0:	10001785 	stb	zero,94(r2)
100077d4:	100017c5 	stb	zero,95(r2)
100077d8:	10001805 	stb	zero,96(r2)
100077dc:	10001845 	stb	zero,97(r2)
100077e0:	10001885 	stb	zero,98(r2)
100077e4:	100018c5 	stb	zero,99(r2)
100077e8:	10000c15 	stw	zero,48(r2)
100077ec:	10000d15 	stw	zero,52(r2)
100077f0:	10001115 	stw	zero,68(r2)
100077f4:	10001215 	stw	zero,72(r2)
100077f8:	dfc00217 	ldw	ra,8(sp)
100077fc:	dc400117 	ldw	r17,4(sp)
10007800:	dc000017 	ldw	r16,0(sp)
10007804:	dec00304 	addi	sp,sp,12
10007808:	f800283a 	ret
1000780c:	80800017 	ldw	r2,0(r16)
10007810:	10000526 	beq	r2,zero,10007828 <__sfp+0xdc>
10007814:	1021883a 	mov	r16,r2
10007818:	003fd606 	br	10007774 <__sfp+0x28>
1000781c:	8009883a 	mov	r4,r16
10007820:	00075740 	call	10007574 <__sinit.part.0>
10007824:	003fd206 	br	10007770 <__sfp+0x24>
10007828:	01400104 	movi	r5,4
1000782c:	8809883a 	mov	r4,r17
10007830:	00076e40 	call	100076e4 <__sfmoreglue>
10007834:	80800015 	stw	r2,0(r16)
10007838:	103ff61e 	bne	r2,zero,10007814 <__sfp+0xc8>
1000783c:	00c00304 	movi	r3,12
10007840:	88c00015 	stw	r3,0(r17)
10007844:	003fec06 	br	100077f8 <__sfp+0xac>

10007848 <_cleanup>:
10007848:	00840074 	movhi	r2,4097
1000784c:	1114a717 	ldw	r4,21148(r2)
10007850:	01440074 	movhi	r5,4097
10007854:	296f5204 	addi	r5,r5,-17080
10007858:	00082241 	jmpi	10008224 <_fwalk_reent>

1000785c <__sinit>:
1000785c:	20800e17 	ldw	r2,56(r4)
10007860:	10000126 	beq	r2,zero,10007868 <__sinit+0xc>
10007864:	f800283a 	ret
10007868:	00075741 	jmpi	10007574 <__sinit.part.0>

1000786c <__sfp_lock_acquire>:
1000786c:	f800283a 	ret

10007870 <__sfp_lock_release>:
10007870:	f800283a 	ret

10007874 <__sinit_lock_acquire>:
10007874:	f800283a 	ret

10007878 <__sinit_lock_release>:
10007878:	f800283a 	ret

1000787c <__fp_lock_all>:
1000787c:	00840074 	movhi	r2,4097
10007880:	1114a817 	ldw	r4,21152(r2)
10007884:	01440034 	movhi	r5,4096
10007888:	295d5804 	addi	r5,r5,30048
1000788c:	00081801 	jmpi	10008180 <_fwalk>

10007890 <__fp_unlock_all>:
10007890:	00840074 	movhi	r2,4097
10007894:	1114a817 	ldw	r4,21152(r2)
10007898:	01440034 	movhi	r5,4096
1000789c:	295db704 	addi	r5,r5,30428
100078a0:	00081801 	jmpi	10008180 <_fwalk>

100078a4 <_malloc_trim_r>:
100078a4:	defffb04 	addi	sp,sp,-20
100078a8:	dcc00315 	stw	r19,12(sp)
100078ac:	04c40074 	movhi	r19,4097
100078b0:	dc800215 	stw	r18,8(sp)
100078b4:	dc400115 	stw	r17,4(sp)
100078b8:	dc000015 	stw	r16,0(sp)
100078bc:	dfc00415 	stw	ra,16(sp)
100078c0:	2821883a 	mov	r16,r5
100078c4:	9ccec704 	addi	r19,r19,15132
100078c8:	2025883a 	mov	r18,r4
100078cc:	000ff380 	call	1000ff38 <__malloc_lock>
100078d0:	98800217 	ldw	r2,8(r19)
100078d4:	14400117 	ldw	r17,4(r2)
100078d8:	00bfff04 	movi	r2,-4
100078dc:	88a2703a 	and	r17,r17,r2
100078e0:	8c21c83a 	sub	r16,r17,r16
100078e4:	8403fbc4 	addi	r16,r16,4079
100078e8:	8020d33a 	srli	r16,r16,12
100078ec:	843fffc4 	addi	r16,r16,-1
100078f0:	8020933a 	slli	r16,r16,12
100078f4:	80840008 	cmpgei	r2,r16,4096
100078f8:	10000626 	beq	r2,zero,10007914 <_malloc_trim_r+0x70>
100078fc:	000b883a 	mov	r5,zero
10007900:	9009883a 	mov	r4,r18
10007904:	000a52c0 	call	1000a52c <_sbrk_r>
10007908:	98c00217 	ldw	r3,8(r19)
1000790c:	1c47883a 	add	r3,r3,r17
10007910:	10c00a26 	beq	r2,r3,1000793c <_malloc_trim_r+0x98>
10007914:	9009883a 	mov	r4,r18
10007918:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000791c:	0005883a 	mov	r2,zero
10007920:	dfc00417 	ldw	ra,16(sp)
10007924:	dcc00317 	ldw	r19,12(sp)
10007928:	dc800217 	ldw	r18,8(sp)
1000792c:	dc400117 	ldw	r17,4(sp)
10007930:	dc000017 	ldw	r16,0(sp)
10007934:	dec00504 	addi	sp,sp,20
10007938:	f800283a 	ret
1000793c:	040bc83a 	sub	r5,zero,r16
10007940:	9009883a 	mov	r4,r18
10007944:	000a52c0 	call	1000a52c <_sbrk_r>
10007948:	10bfffd8 	cmpnei	r2,r2,-1
1000794c:	10000d26 	beq	r2,zero,10007984 <_malloc_trim_r+0xe0>
10007950:	00840074 	movhi	r2,4097
10007954:	109d4917 	ldw	r2,29988(r2)
10007958:	98c00217 	ldw	r3,8(r19)
1000795c:	8c23c83a 	sub	r17,r17,r16
10007960:	8c400054 	ori	r17,r17,1
10007964:	1421c83a 	sub	r16,r2,r16
10007968:	1c400115 	stw	r17,4(r3)
1000796c:	00840074 	movhi	r2,4097
10007970:	9009883a 	mov	r4,r18
10007974:	141d4915 	stw	r16,29988(r2)
10007978:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000797c:	00800044 	movi	r2,1
10007980:	003fe706 	br	10007920 <_malloc_trim_r+0x7c>
10007984:	000b883a 	mov	r5,zero
10007988:	9009883a 	mov	r4,r18
1000798c:	000a52c0 	call	1000a52c <_sbrk_r>
10007990:	99000217 	ldw	r4,8(r19)
10007994:	1107c83a 	sub	r3,r2,r4
10007998:	19400410 	cmplti	r5,r3,16
1000799c:	283fdd1e 	bne	r5,zero,10007914 <_malloc_trim_r+0x70>
100079a0:	01440074 	movhi	r5,4097
100079a4:	2954a917 	ldw	r5,21156(r5)
100079a8:	18c00054 	ori	r3,r3,1
100079ac:	20c00115 	stw	r3,4(r4)
100079b0:	1145c83a 	sub	r2,r2,r5
100079b4:	01440074 	movhi	r5,4097
100079b8:	289d4915 	stw	r2,29988(r5)
100079bc:	003fd506 	br	10007914 <_malloc_trim_r+0x70>

100079c0 <_free_r>:
100079c0:	28004f26 	beq	r5,zero,10007b00 <_free_r+0x140>
100079c4:	defffd04 	addi	sp,sp,-12
100079c8:	dc400115 	stw	r17,4(sp)
100079cc:	dc000015 	stw	r16,0(sp)
100079d0:	2023883a 	mov	r17,r4
100079d4:	2821883a 	mov	r16,r5
100079d8:	dfc00215 	stw	ra,8(sp)
100079dc:	000ff380 	call	1000ff38 <__malloc_lock>
100079e0:	81ffff17 	ldw	r7,-4(r16)
100079e4:	00bfff84 	movi	r2,-2
100079e8:	80fffe04 	addi	r3,r16,-8
100079ec:	3884703a 	and	r2,r7,r2
100079f0:	01840074 	movhi	r6,4097
100079f4:	1889883a 	add	r4,r3,r2
100079f8:	318ec704 	addi	r6,r6,15132
100079fc:	21400117 	ldw	r5,4(r4)
10007a00:	32000217 	ldw	r8,8(r6)
10007a04:	027fff04 	movi	r9,-4
10007a08:	2a4a703a 	and	r5,r5,r9
10007a0c:	41006426 	beq	r8,r4,10007ba0 <_free_r+0x1e0>
10007a10:	21400115 	stw	r5,4(r4)
10007a14:	39c0004c 	andi	r7,r7,1
10007a18:	2151883a 	add	r8,r4,r5
10007a1c:	3800281e 	bne	r7,zero,10007ac0 <_free_r+0x100>
10007a20:	82bffe17 	ldw	r10,-8(r16)
10007a24:	42000117 	ldw	r8,4(r8)
10007a28:	01c40074 	movhi	r7,4097
10007a2c:	1a87c83a 	sub	r3,r3,r10
10007a30:	1a400217 	ldw	r9,8(r3)
10007a34:	39cec904 	addi	r7,r7,15140
10007a38:	1285883a 	add	r2,r2,r10
10007a3c:	4200004c 	andi	r8,r8,1
10007a40:	49c04c26 	beq	r9,r7,10007b74 <_free_r+0x1b4>
10007a44:	1a800317 	ldw	r10,12(r3)
10007a48:	4a800315 	stw	r10,12(r9)
10007a4c:	52400215 	stw	r9,8(r10)
10007a50:	40007126 	beq	r8,zero,10007c18 <_free_r+0x258>
10007a54:	11400054 	ori	r5,r2,1
10007a58:	19400115 	stw	r5,4(r3)
10007a5c:	20800015 	stw	r2,0(r4)
10007a60:	11008028 	cmpgeui	r4,r2,512
10007a64:	20002c1e 	bne	r4,zero,10007b18 <_free_r+0x158>
10007a68:	1008d0fa 	srli	r4,r2,3
10007a6c:	31c00117 	ldw	r7,4(r6)
10007a70:	20800044 	addi	r2,r4,1
10007a74:	200bd0ba 	srai	r5,r4,2
10007a78:	100490fa 	slli	r2,r2,3
10007a7c:	01000044 	movi	r4,1
10007a80:	2148983a 	sll	r4,r4,r5
10007a84:	3085883a 	add	r2,r6,r2
10007a88:	11400017 	ldw	r5,0(r2)
10007a8c:	21c8b03a 	or	r4,r4,r7
10007a90:	11fffe04 	addi	r7,r2,-8
10007a94:	19c00315 	stw	r7,12(r3)
10007a98:	19400215 	stw	r5,8(r3)
10007a9c:	31000115 	stw	r4,4(r6)
10007aa0:	10c00015 	stw	r3,0(r2)
10007aa4:	28c00315 	stw	r3,12(r5)
10007aa8:	8809883a 	mov	r4,r17
10007aac:	dfc00217 	ldw	ra,8(sp)
10007ab0:	dc400117 	ldw	r17,4(sp)
10007ab4:	dc000017 	ldw	r16,0(sp)
10007ab8:	dec00304 	addi	sp,sp,12
10007abc:	000ff5c1 	jmpi	1000ff5c <__malloc_unlock>
10007ac0:	41c00117 	ldw	r7,4(r8)
10007ac4:	39c0004c 	andi	r7,r7,1
10007ac8:	38000e1e 	bne	r7,zero,10007b04 <_free_r+0x144>
10007acc:	01c40074 	movhi	r7,4097
10007ad0:	1145883a 	add	r2,r2,r5
10007ad4:	39cec904 	addi	r7,r7,15140
10007ad8:	21400217 	ldw	r5,8(r4)
10007adc:	12400054 	ori	r9,r2,1
10007ae0:	1891883a 	add	r8,r3,r2
10007ae4:	29c05226 	beq	r5,r7,10007c30 <_free_r+0x270>
10007ae8:	21000317 	ldw	r4,12(r4)
10007aec:	29000315 	stw	r4,12(r5)
10007af0:	21400215 	stw	r5,8(r4)
10007af4:	1a400115 	stw	r9,4(r3)
10007af8:	40800015 	stw	r2,0(r8)
10007afc:	003fd806 	br	10007a60 <_free_r+0xa0>
10007b00:	f800283a 	ret
10007b04:	11400054 	ori	r5,r2,1
10007b08:	817fff15 	stw	r5,-4(r16)
10007b0c:	20800015 	stw	r2,0(r4)
10007b10:	11008028 	cmpgeui	r4,r2,512
10007b14:	203fd426 	beq	r4,zero,10007a68 <_free_r+0xa8>
10007b18:	1008d27a 	srli	r4,r2,9
10007b1c:	21400168 	cmpgeui	r5,r4,5
10007b20:	2800341e 	bne	r5,zero,10007bf4 <_free_r+0x234>
10007b24:	1008d1ba 	srli	r4,r2,6
10007b28:	21c00e44 	addi	r7,r4,57
10007b2c:	380e90fa 	slli	r7,r7,3
10007b30:	21400e04 	addi	r5,r4,56
10007b34:	31cf883a 	add	r7,r6,r7
10007b38:	39000017 	ldw	r4,0(r7)
10007b3c:	39fffe04 	addi	r7,r7,-8
10007b40:	39004226 	beq	r7,r4,10007c4c <_free_r+0x28c>
10007b44:	01bfff04 	movi	r6,-4
10007b48:	21400117 	ldw	r5,4(r4)
10007b4c:	298a703a 	and	r5,r5,r6
10007b50:	1140022e 	bgeu	r2,r5,10007b5c <_free_r+0x19c>
10007b54:	21000217 	ldw	r4,8(r4)
10007b58:	393ffb1e 	bne	r7,r4,10007b48 <_free_r+0x188>
10007b5c:	21c00317 	ldw	r7,12(r4)
10007b60:	19c00315 	stw	r7,12(r3)
10007b64:	19000215 	stw	r4,8(r3)
10007b68:	38c00215 	stw	r3,8(r7)
10007b6c:	20c00315 	stw	r3,12(r4)
10007b70:	003fcd06 	br	10007aa8 <_free_r+0xe8>
10007b74:	40004d1e 	bne	r8,zero,10007cac <_free_r+0x2ec>
10007b78:	21800317 	ldw	r6,12(r4)
10007b7c:	21000217 	ldw	r4,8(r4)
10007b80:	2885883a 	add	r2,r5,r2
10007b84:	11400054 	ori	r5,r2,1
10007b88:	21800315 	stw	r6,12(r4)
10007b8c:	31000215 	stw	r4,8(r6)
10007b90:	19400115 	stw	r5,4(r3)
10007b94:	1887883a 	add	r3,r3,r2
10007b98:	18800015 	stw	r2,0(r3)
10007b9c:	003fc206 	br	10007aa8 <_free_r+0xe8>
10007ba0:	39c0004c 	andi	r7,r7,1
10007ba4:	1145883a 	add	r2,r2,r5
10007ba8:	3800071e 	bne	r7,zero,10007bc8 <_free_r+0x208>
10007bac:	81fffe17 	ldw	r7,-8(r16)
10007bb0:	19c7c83a 	sub	r3,r3,r7
10007bb4:	19000317 	ldw	r4,12(r3)
10007bb8:	19400217 	ldw	r5,8(r3)
10007bbc:	11c5883a 	add	r2,r2,r7
10007bc0:	29000315 	stw	r4,12(r5)
10007bc4:	21400215 	stw	r5,8(r4)
10007bc8:	01040074 	movhi	r4,4097
10007bcc:	11400054 	ori	r5,r2,1
10007bd0:	2114aa17 	ldw	r4,21160(r4)
10007bd4:	19400115 	stw	r5,4(r3)
10007bd8:	30c00215 	stw	r3,8(r6)
10007bdc:	113fb236 	bltu	r2,r4,10007aa8 <_free_r+0xe8>
10007be0:	00840074 	movhi	r2,4097
10007be4:	115d3f17 	ldw	r5,29948(r2)
10007be8:	8809883a 	mov	r4,r17
10007bec:	00078a40 	call	100078a4 <_malloc_trim_r>
10007bf0:	003fad06 	br	10007aa8 <_free_r+0xe8>
10007bf4:	21400568 	cmpgeui	r5,r4,21
10007bf8:	28000926 	beq	r5,zero,10007c20 <_free_r+0x260>
10007bfc:	21401568 	cmpgeui	r5,r4,85
10007c00:	2800191e 	bne	r5,zero,10007c68 <_free_r+0x2a8>
10007c04:	1008d33a 	srli	r4,r2,12
10007c08:	21c01bc4 	addi	r7,r4,111
10007c0c:	21401b84 	addi	r5,r4,110
10007c10:	380e90fa 	slli	r7,r7,3
10007c14:	003fc706 	br	10007b34 <_free_r+0x174>
10007c18:	1145883a 	add	r2,r2,r5
10007c1c:	003fae06 	br	10007ad8 <_free_r+0x118>
10007c20:	21c01704 	addi	r7,r4,92
10007c24:	214016c4 	addi	r5,r4,91
10007c28:	380e90fa 	slli	r7,r7,3
10007c2c:	003fc106 	br	10007b34 <_free_r+0x174>
10007c30:	30c00515 	stw	r3,20(r6)
10007c34:	30c00415 	stw	r3,16(r6)
10007c38:	19c00315 	stw	r7,12(r3)
10007c3c:	19c00215 	stw	r7,8(r3)
10007c40:	1a400115 	stw	r9,4(r3)
10007c44:	40800015 	stw	r2,0(r8)
10007c48:	003f9706 	br	10007aa8 <_free_r+0xe8>
10007c4c:	280bd0ba 	srai	r5,r5,2
10007c50:	00800044 	movi	r2,1
10007c54:	32000117 	ldw	r8,4(r6)
10007c58:	114a983a 	sll	r5,r2,r5
10007c5c:	2a0ab03a 	or	r5,r5,r8
10007c60:	31400115 	stw	r5,4(r6)
10007c64:	003fbe06 	br	10007b60 <_free_r+0x1a0>
10007c68:	21405568 	cmpgeui	r5,r4,341
10007c6c:	2800051e 	bne	r5,zero,10007c84 <_free_r+0x2c4>
10007c70:	1008d3fa 	srli	r4,r2,15
10007c74:	21c01e04 	addi	r7,r4,120
10007c78:	21401dc4 	addi	r5,r4,119
10007c7c:	380e90fa 	slli	r7,r7,3
10007c80:	003fac06 	br	10007b34 <_free_r+0x174>
10007c84:	21015568 	cmpgeui	r4,r4,1365
10007c88:	2000051e 	bne	r4,zero,10007ca0 <_free_r+0x2e0>
10007c8c:	1008d4ba 	srli	r4,r2,18
10007c90:	21c01f44 	addi	r7,r4,125
10007c94:	21401f04 	addi	r5,r4,124
10007c98:	380e90fa 	slli	r7,r7,3
10007c9c:	003fa506 	br	10007b34 <_free_r+0x174>
10007ca0:	01c0fe04 	movi	r7,1016
10007ca4:	01401f84 	movi	r5,126
10007ca8:	003fa206 	br	10007b34 <_free_r+0x174>
10007cac:	11400054 	ori	r5,r2,1
10007cb0:	19400115 	stw	r5,4(r3)
10007cb4:	20800015 	stw	r2,0(r4)
10007cb8:	003f7b06 	br	10007aa8 <_free_r+0xe8>

10007cbc <__sfvwrite_r>:
10007cbc:	30800217 	ldw	r2,8(r6)
10007cc0:	1000c926 	beq	r2,zero,10007fe8 <__sfvwrite_r+0x32c>
10007cc4:	2880030b 	ldhu	r2,12(r5)
10007cc8:	defff304 	addi	sp,sp,-52
10007ccc:	dd000715 	stw	r20,28(sp)
10007cd0:	dc000315 	stw	r16,12(sp)
10007cd4:	dfc00c15 	stw	ra,48(sp)
10007cd8:	df000b15 	stw	fp,44(sp)
10007cdc:	ddc00a15 	stw	r23,40(sp)
10007ce0:	dd800915 	stw	r22,36(sp)
10007ce4:	dd400815 	stw	r21,32(sp)
10007ce8:	dcc00615 	stw	r19,24(sp)
10007cec:	dc800515 	stw	r18,20(sp)
10007cf0:	dc400415 	stw	r17,16(sp)
10007cf4:	d9000015 	stw	r4,0(sp)
10007cf8:	10c0020c 	andi	r3,r2,8
10007cfc:	2821883a 	mov	r16,r5
10007d00:	3029883a 	mov	r20,r6
10007d04:	18002426 	beq	r3,zero,10007d98 <__sfvwrite_r+0xdc>
10007d08:	28c00417 	ldw	r3,16(r5)
10007d0c:	18002226 	beq	r3,zero,10007d98 <__sfvwrite_r+0xdc>
10007d10:	10c0008c 	andi	r3,r2,2
10007d14:	a4400017 	ldw	r17,0(r20)
10007d18:	18002726 	beq	r3,zero,10007db8 <__sfvwrite_r+0xfc>
10007d1c:	80c00917 	ldw	r3,36(r16)
10007d20:	80800717 	ldw	r2,28(r16)
10007d24:	05600034 	movhi	r21,32768
10007d28:	0027883a 	mov	r19,zero
10007d2c:	0025883a 	mov	r18,zero
10007d30:	ad7f0004 	addi	r21,r21,-1024
10007d34:	980d883a 	mov	r6,r19
10007d38:	100b883a 	mov	r5,r2
10007d3c:	d9000017 	ldw	r4,0(sp)
10007d40:	90001126 	beq	r18,zero,10007d88 <__sfvwrite_r+0xcc>
10007d44:	900f883a 	mov	r7,r18
10007d48:	ac80012e 	bgeu	r21,r18,10007d50 <__sfvwrite_r+0x94>
10007d4c:	a80f883a 	mov	r7,r21
10007d50:	183ee83a 	callr	r3
10007d54:	00809f0e 	bge	zero,r2,10007fd4 <__sfvwrite_r+0x318>
10007d58:	a0c00217 	ldw	r3,8(r20)
10007d5c:	98a7883a 	add	r19,r19,r2
10007d60:	90a5c83a 	sub	r18,r18,r2
10007d64:	1885c83a 	sub	r2,r3,r2
10007d68:	a0800215 	stw	r2,8(r20)
10007d6c:	10006326 	beq	r2,zero,10007efc <__sfvwrite_r+0x240>
10007d70:	80800717 	ldw	r2,28(r16)
10007d74:	80c00917 	ldw	r3,36(r16)
10007d78:	980d883a 	mov	r6,r19
10007d7c:	100b883a 	mov	r5,r2
10007d80:	d9000017 	ldw	r4,0(sp)
10007d84:	903fef1e 	bne	r18,zero,10007d44 <__sfvwrite_r+0x88>
10007d88:	8cc00017 	ldw	r19,0(r17)
10007d8c:	8c800117 	ldw	r18,4(r17)
10007d90:	8c400204 	addi	r17,r17,8
10007d94:	003fe706 	br	10007d34 <__sfvwrite_r+0x78>
10007d98:	d9000017 	ldw	r4,0(sp)
10007d9c:	800b883a 	mov	r5,r16
10007da0:	00058780 	call	10005878 <__swsetup_r>
10007da4:	1000f41e 	bne	r2,zero,10008178 <__sfvwrite_r+0x4bc>
10007da8:	8080030b 	ldhu	r2,12(r16)
10007dac:	a4400017 	ldw	r17,0(r20)
10007db0:	10c0008c 	andi	r3,r2,2
10007db4:	183fd91e 	bne	r3,zero,10007d1c <__sfvwrite_r+0x60>
10007db8:	10c0004c 	andi	r3,r2,1
10007dbc:	84800217 	ldw	r18,8(r16)
10007dc0:	87000017 	ldw	fp,0(r16)
10007dc4:	18008a1e 	bne	r3,zero,10007ff0 <__sfvwrite_r+0x334>
10007dc8:	00e00034 	movhi	r3,32768
10007dcc:	18ffff84 	addi	r3,r3,-2
10007dd0:	01200034 	movhi	r4,32768
10007dd4:	d8c00115 	stw	r3,4(sp)
10007dd8:	20ffffc4 	addi	r3,r4,-1
10007ddc:	002d883a 	mov	r22,zero
10007de0:	002f883a 	mov	r23,zero
10007de4:	d8c00215 	stw	r3,8(sp)
10007de8:	b8004026 	beq	r23,zero,10007eec <__sfvwrite_r+0x230>
10007dec:	1100800c 	andi	r4,r2,512
10007df0:	20009026 	beq	r4,zero,10008034 <__sfvwrite_r+0x378>
10007df4:	902b883a 	mov	r21,r18
10007df8:	bc80b436 	bltu	r23,r18,100080cc <__sfvwrite_r+0x410>
10007dfc:	1101200c 	andi	r4,r2,1152
10007e00:	20002526 	beq	r4,zero,10007e98 <__sfvwrite_r+0x1dc>
10007e04:	81800517 	ldw	r6,20(r16)
10007e08:	81400417 	ldw	r5,16(r16)
10007e0c:	b9000044 	addi	r4,r23,1
10007e10:	318000e4 	muli	r6,r6,3
10007e14:	e167c83a 	sub	r19,fp,r5
10007e18:	24c9883a 	add	r4,r4,r19
10007e1c:	3024d7fa 	srli	r18,r6,31
10007e20:	91a5883a 	add	r18,r18,r6
10007e24:	9025d07a 	srai	r18,r18,1
10007e28:	900d883a 	mov	r6,r18
10007e2c:	9100022e 	bgeu	r18,r4,10007e38 <__sfvwrite_r+0x17c>
10007e30:	2025883a 	mov	r18,r4
10007e34:	200d883a 	mov	r6,r4
10007e38:	1081000c 	andi	r2,r2,1024
10007e3c:	1000bc26 	beq	r2,zero,10008130 <__sfvwrite_r+0x474>
10007e40:	d9000017 	ldw	r4,0(sp)
10007e44:	300b883a 	mov	r5,r6
10007e48:	00084cc0 	call	100084cc <_malloc_r>
10007e4c:	1000c526 	beq	r2,zero,10008164 <__sfvwrite_r+0x4a8>
10007e50:	81400417 	ldw	r5,16(r16)
10007e54:	980d883a 	mov	r6,r19
10007e58:	1009883a 	mov	r4,r2
10007e5c:	00033640 	call	10003364 <memcpy>
10007e60:	100f883a 	mov	r7,r2
10007e64:	8080030b 	ldhu	r2,12(r16)
10007e68:	00fedfc4 	movi	r3,-1153
10007e6c:	10c4703a 	and	r2,r2,r3
10007e70:	10802014 	ori	r2,r2,128
10007e74:	8080030d 	sth	r2,12(r16)
10007e78:	94c5c83a 	sub	r2,r18,r19
10007e7c:	3cf9883a 	add	fp,r7,r19
10007e80:	84800515 	stw	r18,20(r16)
10007e84:	81c00415 	stw	r7,16(r16)
10007e88:	87000015 	stw	fp,0(r16)
10007e8c:	b825883a 	mov	r18,r23
10007e90:	80800215 	stw	r2,8(r16)
10007e94:	b82b883a 	mov	r21,r23
10007e98:	a80d883a 	mov	r6,r21
10007e9c:	b00b883a 	mov	r5,r22
10007ea0:	e009883a 	mov	r4,fp
10007ea4:	0008da80 	call	10008da8 <memmove>
10007ea8:	80800217 	ldw	r2,8(r16)
10007eac:	81800017 	ldw	r6,0(r16)
10007eb0:	b827883a 	mov	r19,r23
10007eb4:	14a5c83a 	sub	r18,r2,r18
10007eb8:	354d883a 	add	r6,r6,r21
10007ebc:	84800215 	stw	r18,8(r16)
10007ec0:	81800015 	stw	r6,0(r16)
10007ec4:	002f883a 	mov	r23,zero
10007ec8:	a0800217 	ldw	r2,8(r20)
10007ecc:	b4ed883a 	add	r22,r22,r19
10007ed0:	14e7c83a 	sub	r19,r2,r19
10007ed4:	a4c00215 	stw	r19,8(r20)
10007ed8:	98000826 	beq	r19,zero,10007efc <__sfvwrite_r+0x240>
10007edc:	8080030b 	ldhu	r2,12(r16)
10007ee0:	84800217 	ldw	r18,8(r16)
10007ee4:	87000017 	ldw	fp,0(r16)
10007ee8:	b83fc01e 	bne	r23,zero,10007dec <__sfvwrite_r+0x130>
10007eec:	8d800017 	ldw	r22,0(r17)
10007ef0:	8dc00117 	ldw	r23,4(r17)
10007ef4:	8c400204 	addi	r17,r17,8
10007ef8:	003fbb06 	br	10007de8 <__sfvwrite_r+0x12c>
10007efc:	0005883a 	mov	r2,zero
10007f00:	dfc00c17 	ldw	ra,48(sp)
10007f04:	df000b17 	ldw	fp,44(sp)
10007f08:	ddc00a17 	ldw	r23,40(sp)
10007f0c:	dd800917 	ldw	r22,36(sp)
10007f10:	dd400817 	ldw	r21,32(sp)
10007f14:	dd000717 	ldw	r20,28(sp)
10007f18:	dcc00617 	ldw	r19,24(sp)
10007f1c:	dc800517 	ldw	r18,20(sp)
10007f20:	dc400417 	ldw	r17,16(sp)
10007f24:	dc000317 	ldw	r16,12(sp)
10007f28:	dec00d04 	addi	sp,sp,52
10007f2c:	f800283a 	ret
10007f30:	b1c06e16 	blt	r22,r7,100080ec <__sfvwrite_r+0x430>
10007f34:	80800917 	ldw	r2,36(r16)
10007f38:	81400717 	ldw	r5,28(r16)
10007f3c:	d9000017 	ldw	r4,0(sp)
10007f40:	b80d883a 	mov	r6,r23
10007f44:	103ee83a 	callr	r2
10007f48:	1025883a 	mov	r18,r2
10007f4c:	0080210e 	bge	zero,r2,10007fd4 <__sfvwrite_r+0x318>
10007f50:	acabc83a 	sub	r21,r21,r18
10007f54:	a8006026 	beq	r21,zero,100080d8 <__sfvwrite_r+0x41c>
10007f58:	00800044 	movi	r2,1
10007f5c:	a0c00217 	ldw	r3,8(r20)
10007f60:	bcaf883a 	add	r23,r23,r18
10007f64:	9ca7c83a 	sub	r19,r19,r18
10007f68:	1ca5c83a 	sub	r18,r3,r18
10007f6c:	a4800215 	stw	r18,8(r20)
10007f70:	903fe226 	beq	r18,zero,10007efc <__sfvwrite_r+0x240>
10007f74:	84800217 	ldw	r18,8(r16)
10007f78:	87000017 	ldw	fp,0(r16)
10007f7c:	98002126 	beq	r19,zero,10008004 <__sfvwrite_r+0x348>
10007f80:	10002426 	beq	r2,zero,10008014 <__sfvwrite_r+0x358>
10007f84:	a805883a 	mov	r2,r21
10007f88:	982d883a 	mov	r22,r19
10007f8c:	14c0012e 	bgeu	r2,r19,10007f94 <__sfvwrite_r+0x2d8>
10007f90:	102d883a 	mov	r22,r2
10007f94:	80800417 	ldw	r2,16(r16)
10007f98:	81c00517 	ldw	r7,20(r16)
10007f9c:	173fe42e 	bgeu	r2,fp,10007f30 <__sfvwrite_r+0x274>
10007fa0:	3ca5883a 	add	r18,r7,r18
10007fa4:	95bfe20e 	bge	r18,r22,10007f30 <__sfvwrite_r+0x274>
10007fa8:	b80b883a 	mov	r5,r23
10007fac:	e009883a 	mov	r4,fp
10007fb0:	900d883a 	mov	r6,r18
10007fb4:	0008da80 	call	10008da8 <memmove>
10007fb8:	80800017 	ldw	r2,0(r16)
10007fbc:	d9000017 	ldw	r4,0(sp)
10007fc0:	800b883a 	mov	r5,r16
10007fc4:	1485883a 	add	r2,r2,r18
10007fc8:	80800015 	stw	r2,0(r16)
10007fcc:	00074d80 	call	100074d8 <_fflush_r>
10007fd0:	103fdf26 	beq	r2,zero,10007f50 <__sfvwrite_r+0x294>
10007fd4:	8080030b 	ldhu	r2,12(r16)
10007fd8:	10801014 	ori	r2,r2,64
10007fdc:	8080030d 	sth	r2,12(r16)
10007fe0:	00bfffc4 	movi	r2,-1
10007fe4:	003fc606 	br	10007f00 <__sfvwrite_r+0x244>
10007fe8:	0005883a 	mov	r2,zero
10007fec:	f800283a 	ret
10007ff0:	0027883a 	mov	r19,zero
10007ff4:	002b883a 	mov	r21,zero
10007ff8:	0005883a 	mov	r2,zero
10007ffc:	002f883a 	mov	r23,zero
10008000:	983fdf1e 	bne	r19,zero,10007f80 <__sfvwrite_r+0x2c4>
10008004:	8cc00117 	ldw	r19,4(r17)
10008008:	8dc00017 	ldw	r23,0(r17)
1000800c:	8c400204 	addi	r17,r17,8
10008010:	983ffc26 	beq	r19,zero,10008004 <__sfvwrite_r+0x348>
10008014:	980d883a 	mov	r6,r19
10008018:	01400284 	movi	r5,10
1000801c:	b809883a 	mov	r4,r23
10008020:	0008cc00 	call	10008cc0 <memchr>
10008024:	10003f26 	beq	r2,zero,10008124 <__sfvwrite_r+0x468>
10008028:	10800044 	addi	r2,r2,1
1000802c:	15ebc83a 	sub	r21,r2,r23
10008030:	003fd406 	br	10007f84 <__sfvwrite_r+0x2c8>
10008034:	80800417 	ldw	r2,16(r16)
10008038:	17001136 	bltu	r2,fp,10008080 <__sfvwrite_r+0x3c4>
1000803c:	84c00517 	ldw	r19,20(r16)
10008040:	bcc00f36 	bltu	r23,r19,10008080 <__sfvwrite_r+0x3c4>
10008044:	d8800117 	ldw	r2,4(sp)
10008048:	15c0342e 	bgeu	r2,r23,1000811c <__sfvwrite_r+0x460>
1000804c:	d9000217 	ldw	r4,8(sp)
10008050:	980b883a 	mov	r5,r19
10008054:	000d0d80 	call	1000d0d8 <__divsi3>
10008058:	14cf383a 	mul	r7,r2,r19
1000805c:	81400717 	ldw	r5,28(r16)
10008060:	80800917 	ldw	r2,36(r16)
10008064:	d9000017 	ldw	r4,0(sp)
10008068:	b00d883a 	mov	r6,r22
1000806c:	103ee83a 	callr	r2
10008070:	00bfd80e 	bge	zero,r2,10007fd4 <__sfvwrite_r+0x318>
10008074:	1027883a 	mov	r19,r2
10008078:	bcefc83a 	sub	r23,r23,r19
1000807c:	003f9206 	br	10007ec8 <__sfvwrite_r+0x20c>
10008080:	9027883a 	mov	r19,r18
10008084:	bc80012e 	bgeu	r23,r18,1000808c <__sfvwrite_r+0x3d0>
10008088:	b827883a 	mov	r19,r23
1000808c:	e009883a 	mov	r4,fp
10008090:	980d883a 	mov	r6,r19
10008094:	b00b883a 	mov	r5,r22
10008098:	0008da80 	call	10008da8 <memmove>
1000809c:	80800217 	ldw	r2,8(r16)
100080a0:	81000017 	ldw	r4,0(r16)
100080a4:	14c5c83a 	sub	r2,r2,r19
100080a8:	24c9883a 	add	r4,r4,r19
100080ac:	80800215 	stw	r2,8(r16)
100080b0:	81000015 	stw	r4,0(r16)
100080b4:	103ff01e 	bne	r2,zero,10008078 <__sfvwrite_r+0x3bc>
100080b8:	d9000017 	ldw	r4,0(sp)
100080bc:	800b883a 	mov	r5,r16
100080c0:	00074d80 	call	100074d8 <_fflush_r>
100080c4:	103fec26 	beq	r2,zero,10008078 <__sfvwrite_r+0x3bc>
100080c8:	003fc206 	br	10007fd4 <__sfvwrite_r+0x318>
100080cc:	b825883a 	mov	r18,r23
100080d0:	b82b883a 	mov	r21,r23
100080d4:	003f7006 	br	10007e98 <__sfvwrite_r+0x1dc>
100080d8:	d9000017 	ldw	r4,0(sp)
100080dc:	800b883a 	mov	r5,r16
100080e0:	00074d80 	call	100074d8 <_fflush_r>
100080e4:	103f9d26 	beq	r2,zero,10007f5c <__sfvwrite_r+0x2a0>
100080e8:	003fba06 	br	10007fd4 <__sfvwrite_r+0x318>
100080ec:	b00d883a 	mov	r6,r22
100080f0:	b80b883a 	mov	r5,r23
100080f4:	e009883a 	mov	r4,fp
100080f8:	0008da80 	call	10008da8 <memmove>
100080fc:	80c00217 	ldw	r3,8(r16)
10008100:	80800017 	ldw	r2,0(r16)
10008104:	b025883a 	mov	r18,r22
10008108:	1d87c83a 	sub	r3,r3,r22
1000810c:	15ad883a 	add	r22,r2,r22
10008110:	80c00215 	stw	r3,8(r16)
10008114:	85800015 	stw	r22,0(r16)
10008118:	003f8d06 	br	10007f50 <__sfvwrite_r+0x294>
1000811c:	b809883a 	mov	r4,r23
10008120:	003fcb06 	br	10008050 <__sfvwrite_r+0x394>
10008124:	98800044 	addi	r2,r19,1
10008128:	102b883a 	mov	r21,r2
1000812c:	003f9606 	br	10007f88 <__sfvwrite_r+0x2cc>
10008130:	d9000017 	ldw	r4,0(sp)
10008134:	0009f000 	call	10009f00 <_realloc_r>
10008138:	100f883a 	mov	r7,r2
1000813c:	103f4e1e 	bne	r2,zero,10007e78 <__sfvwrite_r+0x1bc>
10008140:	dc400017 	ldw	r17,0(sp)
10008144:	81400417 	ldw	r5,16(r16)
10008148:	8809883a 	mov	r4,r17
1000814c:	00079c00 	call	100079c0 <_free_r>
10008150:	8080030b 	ldhu	r2,12(r16)
10008154:	00c00304 	movi	r3,12
10008158:	88c00015 	stw	r3,0(r17)
1000815c:	10bfdfcc 	andi	r2,r2,65407
10008160:	003f9d06 	br	10007fd8 <__sfvwrite_r+0x31c>
10008164:	d8c00017 	ldw	r3,0(sp)
10008168:	00800304 	movi	r2,12
1000816c:	18800015 	stw	r2,0(r3)
10008170:	8080030b 	ldhu	r2,12(r16)
10008174:	003f9806 	br	10007fd8 <__sfvwrite_r+0x31c>
10008178:	00bfffc4 	movi	r2,-1
1000817c:	003f6006 	br	10007f00 <__sfvwrite_r+0x244>

10008180 <_fwalk>:
10008180:	defffa04 	addi	sp,sp,-24
10008184:	dc800215 	stw	r18,8(sp)
10008188:	dfc00515 	stw	ra,20(sp)
1000818c:	dd000415 	stw	r20,16(sp)
10008190:	dcc00315 	stw	r19,12(sp)
10008194:	dc400115 	stw	r17,4(sp)
10008198:	dc000015 	stw	r16,0(sp)
1000819c:	2480b804 	addi	r18,r4,736
100081a0:	90001e26 	beq	r18,zero,1000821c <_fwalk+0x9c>
100081a4:	2827883a 	mov	r19,r5
100081a8:	0029883a 	mov	r20,zero
100081ac:	94400117 	ldw	r17,4(r18)
100081b0:	94000217 	ldw	r16,8(r18)
100081b4:	8c7fffc4 	addi	r17,r17,-1
100081b8:	88000d16 	blt	r17,zero,100081f0 <_fwalk+0x70>
100081bc:	8080030b 	ldhu	r2,12(r16)
100081c0:	8c7fffc4 	addi	r17,r17,-1
100081c4:	108000b0 	cmpltui	r2,r2,2
100081c8:	1000061e 	bne	r2,zero,100081e4 <_fwalk+0x64>
100081cc:	8080038f 	ldh	r2,14(r16)
100081d0:	8009883a 	mov	r4,r16
100081d4:	10bfffe0 	cmpeqi	r2,r2,-1
100081d8:	1000021e 	bne	r2,zero,100081e4 <_fwalk+0x64>
100081dc:	983ee83a 	callr	r19
100081e0:	a0a8b03a 	or	r20,r20,r2
100081e4:	88bfffd8 	cmpnei	r2,r17,-1
100081e8:	84001a04 	addi	r16,r16,104
100081ec:	103ff31e 	bne	r2,zero,100081bc <_fwalk+0x3c>
100081f0:	94800017 	ldw	r18,0(r18)
100081f4:	903fed1e 	bne	r18,zero,100081ac <_fwalk+0x2c>
100081f8:	a005883a 	mov	r2,r20
100081fc:	dfc00517 	ldw	ra,20(sp)
10008200:	dd000417 	ldw	r20,16(sp)
10008204:	dcc00317 	ldw	r19,12(sp)
10008208:	dc800217 	ldw	r18,8(sp)
1000820c:	dc400117 	ldw	r17,4(sp)
10008210:	dc000017 	ldw	r16,0(sp)
10008214:	dec00604 	addi	sp,sp,24
10008218:	f800283a 	ret
1000821c:	0029883a 	mov	r20,zero
10008220:	003ff506 	br	100081f8 <_fwalk+0x78>

10008224 <_fwalk_reent>:
10008224:	defff904 	addi	sp,sp,-28
10008228:	dc800215 	stw	r18,8(sp)
1000822c:	dfc00615 	stw	ra,24(sp)
10008230:	dd400515 	stw	r21,20(sp)
10008234:	dd000415 	stw	r20,16(sp)
10008238:	dcc00315 	stw	r19,12(sp)
1000823c:	dc400115 	stw	r17,4(sp)
10008240:	dc000015 	stw	r16,0(sp)
10008244:	2480b804 	addi	r18,r4,736
10008248:	90002126 	beq	r18,zero,100082d0 <_fwalk_reent+0xac>
1000824c:	2829883a 	mov	r20,r5
10008250:	2027883a 	mov	r19,r4
10008254:	002b883a 	mov	r21,zero
10008258:	94400117 	ldw	r17,4(r18)
1000825c:	94000217 	ldw	r16,8(r18)
10008260:	8c7fffc4 	addi	r17,r17,-1
10008264:	88000e16 	blt	r17,zero,100082a0 <_fwalk_reent+0x7c>
10008268:	8080030b 	ldhu	r2,12(r16)
1000826c:	8c7fffc4 	addi	r17,r17,-1
10008270:	108000b0 	cmpltui	r2,r2,2
10008274:	1000071e 	bne	r2,zero,10008294 <_fwalk_reent+0x70>
10008278:	8080038f 	ldh	r2,14(r16)
1000827c:	800b883a 	mov	r5,r16
10008280:	9809883a 	mov	r4,r19
10008284:	10bfffe0 	cmpeqi	r2,r2,-1
10008288:	1000021e 	bne	r2,zero,10008294 <_fwalk_reent+0x70>
1000828c:	a03ee83a 	callr	r20
10008290:	a8aab03a 	or	r21,r21,r2
10008294:	88bfffd8 	cmpnei	r2,r17,-1
10008298:	84001a04 	addi	r16,r16,104
1000829c:	103ff21e 	bne	r2,zero,10008268 <_fwalk_reent+0x44>
100082a0:	94800017 	ldw	r18,0(r18)
100082a4:	903fec1e 	bne	r18,zero,10008258 <_fwalk_reent+0x34>
100082a8:	a805883a 	mov	r2,r21
100082ac:	dfc00617 	ldw	ra,24(sp)
100082b0:	dd400517 	ldw	r21,20(sp)
100082b4:	dd000417 	ldw	r20,16(sp)
100082b8:	dcc00317 	ldw	r19,12(sp)
100082bc:	dc800217 	ldw	r18,8(sp)
100082c0:	dc400117 	ldw	r17,4(sp)
100082c4:	dc000017 	ldw	r16,0(sp)
100082c8:	dec00704 	addi	sp,sp,28
100082cc:	f800283a 	ret
100082d0:	002b883a 	mov	r21,zero
100082d4:	003ff406 	br	100082a8 <_fwalk_reent+0x84>

100082d8 <__localeconv_l>:
100082d8:	20803c04 	addi	r2,r4,240
100082dc:	f800283a 	ret

100082e0 <_localeconv_r>:
100082e0:	00840074 	movhi	r2,4097
100082e4:	10900504 	addi	r2,r2,16404
100082e8:	f800283a 	ret

100082ec <localeconv>:
100082ec:	00840074 	movhi	r2,4097
100082f0:	10900504 	addi	r2,r2,16404
100082f4:	f800283a 	ret

100082f8 <__swhatbuf_r>:
100082f8:	deffea04 	addi	sp,sp,-88
100082fc:	dc001215 	stw	r16,72(sp)
10008300:	2821883a 	mov	r16,r5
10008304:	2940038f 	ldh	r5,14(r5)
10008308:	dc801415 	stw	r18,80(sp)
1000830c:	dc401315 	stw	r17,76(sp)
10008310:	dfc01515 	stw	ra,84(sp)
10008314:	3023883a 	mov	r17,r6
10008318:	3825883a 	mov	r18,r7
1000831c:	28001016 	blt	r5,zero,10008360 <__swhatbuf_r+0x68>
10008320:	d80d883a 	mov	r6,sp
10008324:	000c0400 	call	1000c040 <_fstat_r>
10008328:	10000d16 	blt	r2,zero,10008360 <__swhatbuf_r+0x68>
1000832c:	d8c00117 	ldw	r3,4(sp)
10008330:	00820004 	movi	r2,2048
10008334:	18fc000c 	andi	r3,r3,61440
10008338:	18c80020 	cmpeqi	r3,r3,8192
1000833c:	90c00015 	stw	r3,0(r18)
10008340:	00c10004 	movi	r3,1024
10008344:	88c00015 	stw	r3,0(r17)
10008348:	dfc01517 	ldw	ra,84(sp)
1000834c:	dc801417 	ldw	r18,80(sp)
10008350:	dc401317 	ldw	r17,76(sp)
10008354:	dc001217 	ldw	r16,72(sp)
10008358:	dec01604 	addi	sp,sp,88
1000835c:	f800283a 	ret
10008360:	8080030b 	ldhu	r2,12(r16)
10008364:	90000015 	stw	zero,0(r18)
10008368:	1080200c 	andi	r2,r2,128
1000836c:	10000426 	beq	r2,zero,10008380 <__swhatbuf_r+0x88>
10008370:	00801004 	movi	r2,64
10008374:	88800015 	stw	r2,0(r17)
10008378:	0005883a 	mov	r2,zero
1000837c:	003ff206 	br	10008348 <__swhatbuf_r+0x50>
10008380:	00810004 	movi	r2,1024
10008384:	88800015 	stw	r2,0(r17)
10008388:	0005883a 	mov	r2,zero
1000838c:	003fee06 	br	10008348 <__swhatbuf_r+0x50>

10008390 <__smakebuf_r>:
10008390:	28c0030b 	ldhu	r3,12(r5)
10008394:	defffa04 	addi	sp,sp,-24
10008398:	dc000215 	stw	r16,8(sp)
1000839c:	dfc00515 	stw	ra,20(sp)
100083a0:	dc800415 	stw	r18,16(sp)
100083a4:	dc400315 	stw	r17,12(sp)
100083a8:	18c0008c 	andi	r3,r3,2
100083ac:	2821883a 	mov	r16,r5
100083b0:	18000b26 	beq	r3,zero,100083e0 <__smakebuf_r+0x50>
100083b4:	28c010c4 	addi	r3,r5,67
100083b8:	28c00015 	stw	r3,0(r5)
100083bc:	28c00415 	stw	r3,16(r5)
100083c0:	00c00044 	movi	r3,1
100083c4:	28c00515 	stw	r3,20(r5)
100083c8:	dfc00517 	ldw	ra,20(sp)
100083cc:	dc800417 	ldw	r18,16(sp)
100083d0:	dc400317 	ldw	r17,12(sp)
100083d4:	dc000217 	ldw	r16,8(sp)
100083d8:	dec00604 	addi	sp,sp,24
100083dc:	f800283a 	ret
100083e0:	d9c00104 	addi	r7,sp,4
100083e4:	d80d883a 	mov	r6,sp
100083e8:	2023883a 	mov	r17,r4
100083ec:	00082f80 	call	100082f8 <__swhatbuf_r>
100083f0:	1025883a 	mov	r18,r2
100083f4:	d8800117 	ldw	r2,4(sp)
100083f8:	1000131e 	bne	r2,zero,10008448 <__smakebuf_r+0xb8>
100083fc:	d9400017 	ldw	r5,0(sp)
10008400:	8809883a 	mov	r4,r17
10008404:	00084cc0 	call	100084cc <_malloc_r>
10008408:	10001c26 	beq	r2,zero,1000847c <__smakebuf_r+0xec>
1000840c:	01040034 	movhi	r4,4096
10008410:	211d5a04 	addi	r4,r4,30056
10008414:	80c0030b 	ldhu	r3,12(r16)
10008418:	89000f15 	stw	r4,60(r17)
1000841c:	80800015 	stw	r2,0(r16)
10008420:	80800415 	stw	r2,16(r16)
10008424:	d8800017 	ldw	r2,0(sp)
10008428:	d9400117 	ldw	r5,4(sp)
1000842c:	18c02014 	ori	r3,r3,128
10008430:	80c0030d 	sth	r3,12(r16)
10008434:	80800515 	stw	r2,20(r16)
10008438:	28001c1e 	bne	r5,zero,100084ac <__smakebuf_r+0x11c>
1000843c:	90c6b03a 	or	r3,r18,r3
10008440:	80c0030d 	sth	r3,12(r16)
10008444:	003fe006 	br	100083c8 <__smakebuf_r+0x38>
10008448:	8140038f 	ldh	r5,14(r16)
1000844c:	8809883a 	mov	r4,r17
10008450:	000c0a00 	call	1000c0a0 <_isatty_r>
10008454:	103fe926 	beq	r2,zero,100083fc <__smakebuf_r+0x6c>
10008458:	8080030b 	ldhu	r2,12(r16)
1000845c:	80c010c4 	addi	r3,r16,67
10008460:	80c00015 	stw	r3,0(r16)
10008464:	10800054 	ori	r2,r2,1
10008468:	8080030d 	sth	r2,12(r16)
1000846c:	00800044 	movi	r2,1
10008470:	80c00415 	stw	r3,16(r16)
10008474:	80800515 	stw	r2,20(r16)
10008478:	003fe006 	br	100083fc <__smakebuf_r+0x6c>
1000847c:	8080030b 	ldhu	r2,12(r16)
10008480:	10c0800c 	andi	r3,r2,512
10008484:	183fd01e 	bne	r3,zero,100083c8 <__smakebuf_r+0x38>
10008488:	10bfff0c 	andi	r2,r2,65532
1000848c:	10800094 	ori	r2,r2,2
10008490:	80c010c4 	addi	r3,r16,67
10008494:	8080030d 	sth	r2,12(r16)
10008498:	00800044 	movi	r2,1
1000849c:	80c00015 	stw	r3,0(r16)
100084a0:	80c00415 	stw	r3,16(r16)
100084a4:	80800515 	stw	r2,20(r16)
100084a8:	003fc706 	br	100083c8 <__smakebuf_r+0x38>
100084ac:	8140038f 	ldh	r5,14(r16)
100084b0:	8809883a 	mov	r4,r17
100084b4:	000c0a00 	call	1000c0a0 <_isatty_r>
100084b8:	80c0030b 	ldhu	r3,12(r16)
100084bc:	103fdf26 	beq	r2,zero,1000843c <__smakebuf_r+0xac>
100084c0:	18ffff0c 	andi	r3,r3,65532
100084c4:	18c00054 	ori	r3,r3,1
100084c8:	003fdc06 	br	1000843c <__smakebuf_r+0xac>

100084cc <_malloc_r>:
100084cc:	defff604 	addi	sp,sp,-40
100084d0:	dc400115 	stw	r17,4(sp)
100084d4:	2c4002c4 	addi	r17,r5,11
100084d8:	dc800215 	stw	r18,8(sp)
100084dc:	dfc00915 	stw	ra,36(sp)
100084e0:	df000815 	stw	fp,32(sp)
100084e4:	ddc00715 	stw	r23,28(sp)
100084e8:	dd800615 	stw	r22,24(sp)
100084ec:	dd400515 	stw	r21,20(sp)
100084f0:	dd000415 	stw	r20,16(sp)
100084f4:	dcc00315 	stw	r19,12(sp)
100084f8:	dc000015 	stw	r16,0(sp)
100084fc:	888005e8 	cmpgeui	r2,r17,23
10008500:	2025883a 	mov	r18,r4
10008504:	10001b1e 	bne	r2,zero,10008574 <_malloc_r+0xa8>
10008508:	29400468 	cmpgeui	r5,r5,17
1000850c:	2800951e 	bne	r5,zero,10008764 <_malloc_r+0x298>
10008510:	000ff380 	call	1000ff38 <__malloc_lock>
10008514:	04400404 	movi	r17,16
10008518:	00800604 	movi	r2,24
1000851c:	01800084 	movi	r6,2
10008520:	04c40074 	movhi	r19,4097
10008524:	9ccec704 	addi	r19,r19,15132
10008528:	9885883a 	add	r2,r19,r2
1000852c:	14000117 	ldw	r16,4(r2)
10008530:	10fffe04 	addi	r3,r2,-8
10008534:	80c09e26 	beq	r16,r3,100087b0 <_malloc_r+0x2e4>
10008538:	80800117 	ldw	r2,4(r16)
1000853c:	81000317 	ldw	r4,12(r16)
10008540:	00ffff04 	movi	r3,-4
10008544:	10c4703a 	and	r2,r2,r3
10008548:	81400217 	ldw	r5,8(r16)
1000854c:	8085883a 	add	r2,r16,r2
10008550:	10c00117 	ldw	r3,4(r2)
10008554:	29000315 	stw	r4,12(r5)
10008558:	21400215 	stw	r5,8(r4)
1000855c:	18c00054 	ori	r3,r3,1
10008560:	10c00115 	stw	r3,4(r2)
10008564:	9009883a 	mov	r4,r18
10008568:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000856c:	80800204 	addi	r2,r16,8
10008570:	00007f06 	br	10008770 <_malloc_r+0x2a4>
10008574:	00bffe04 	movi	r2,-8
10008578:	88a2703a 	and	r17,r17,r2
1000857c:	88007916 	blt	r17,zero,10008764 <_malloc_r+0x298>
10008580:	89407836 	bltu	r17,r5,10008764 <_malloc_r+0x298>
10008584:	000ff380 	call	1000ff38 <__malloc_lock>
10008588:	88807e28 	cmpgeui	r2,r17,504
1000858c:	10013326 	beq	r2,zero,10008a5c <_malloc_r+0x590>
10008590:	8804d27a 	srli	r2,r17,9
10008594:	10008226 	beq	r2,zero,100087a0 <_malloc_r+0x2d4>
10008598:	10c00168 	cmpgeui	r3,r2,5
1000859c:	1801151e 	bne	r3,zero,100089f4 <_malloc_r+0x528>
100085a0:	8804d1ba 	srli	r2,r17,6
100085a4:	11800e44 	addi	r6,r2,57
100085a8:	300a90fa 	slli	r5,r6,3
100085ac:	12000e04 	addi	r8,r2,56
100085b0:	04c40074 	movhi	r19,4097
100085b4:	9ccec704 	addi	r19,r19,15132
100085b8:	994b883a 	add	r5,r19,r5
100085bc:	2c000117 	ldw	r16,4(r5)
100085c0:	297ffe04 	addi	r5,r5,-8
100085c4:	2c001126 	beq	r5,r16,1000860c <_malloc_r+0x140>
100085c8:	80800117 	ldw	r2,4(r16)
100085cc:	00ffff04 	movi	r3,-4
100085d0:	10c4703a 	and	r2,r2,r3
100085d4:	1447c83a 	sub	r3,r2,r17
100085d8:	19000408 	cmpgei	r4,r3,16
100085dc:	2000e81e 	bne	r4,zero,10008980 <_malloc_r+0x4b4>
100085e0:	1800e90e 	bge	r3,zero,10008988 <_malloc_r+0x4bc>
100085e4:	01ffff04 	movi	r7,-4
100085e8:	00000606 	br	10008604 <_malloc_r+0x138>
100085ec:	80800117 	ldw	r2,4(r16)
100085f0:	11c4703a 	and	r2,r2,r7
100085f4:	1447c83a 	sub	r3,r2,r17
100085f8:	19000408 	cmpgei	r4,r3,16
100085fc:	2000e01e 	bne	r4,zero,10008980 <_malloc_r+0x4b4>
10008600:	1800e10e 	bge	r3,zero,10008988 <_malloc_r+0x4bc>
10008604:	84000317 	ldw	r16,12(r16)
10008608:	2c3ff81e 	bne	r5,r16,100085ec <_malloc_r+0x120>
1000860c:	9c000417 	ldw	r16,16(r19)
10008610:	02040074 	movhi	r8,4097
10008614:	420ec904 	addi	r8,r8,15140
10008618:	82006c26 	beq	r16,r8,100087cc <_malloc_r+0x300>
1000861c:	80c00117 	ldw	r3,4(r16)
10008620:	00bfff04 	movi	r2,-4
10008624:	1884703a 	and	r2,r3,r2
10008628:	1447c83a 	sub	r3,r2,r17
1000862c:	19000410 	cmplti	r4,r3,16
10008630:	20011526 	beq	r4,zero,10008a88 <_malloc_r+0x5bc>
10008634:	9a000515 	stw	r8,20(r19)
10008638:	9a000415 	stw	r8,16(r19)
1000863c:	18010a0e 	bge	r3,zero,10008a68 <_malloc_r+0x59c>
10008640:	10c08028 	cmpgeui	r3,r2,512
10008644:	1800d21e 	bne	r3,zero,10008990 <_malloc_r+0x4c4>
10008648:	1004d0fa 	srli	r2,r2,3
1000864c:	99400117 	ldw	r5,4(r19)
10008650:	10c00044 	addi	r3,r2,1
10008654:	1009d0ba 	srai	r4,r2,2
10008658:	180690fa 	slli	r3,r3,3
1000865c:	00800044 	movi	r2,1
10008660:	1104983a 	sll	r2,r2,r4
10008664:	98c7883a 	add	r3,r19,r3
10008668:	19000017 	ldw	r4,0(r3)
1000866c:	1144b03a 	or	r2,r2,r5
10008670:	197ffe04 	addi	r5,r3,-8
10008674:	81400315 	stw	r5,12(r16)
10008678:	81000215 	stw	r4,8(r16)
1000867c:	98800115 	stw	r2,4(r19)
10008680:	1c000015 	stw	r16,0(r3)
10008684:	24000315 	stw	r16,12(r4)
10008688:	3007d0ba 	srai	r3,r6,2
1000868c:	01000044 	movi	r4,1
10008690:	20c8983a 	sll	r4,r4,r3
10008694:	11005236 	bltu	r2,r4,100087e0 <_malloc_r+0x314>
10008698:	2086703a 	and	r3,r4,r2
1000869c:	18000a1e 	bne	r3,zero,100086c8 <_malloc_r+0x1fc>
100086a0:	00ffff04 	movi	r3,-4
100086a4:	2109883a 	add	r4,r4,r4
100086a8:	30cc703a 	and	r6,r6,r3
100086ac:	2086703a 	and	r3,r4,r2
100086b0:	31800104 	addi	r6,r6,4
100086b4:	1800041e 	bne	r3,zero,100086c8 <_malloc_r+0x1fc>
100086b8:	2109883a 	add	r4,r4,r4
100086bc:	2086703a 	and	r3,r4,r2
100086c0:	31800104 	addi	r6,r6,4
100086c4:	183ffc26 	beq	r3,zero,100086b8 <_malloc_r+0x1ec>
100086c8:	027fff04 	movi	r9,-4
100086cc:	301490fa 	slli	r10,r6,3
100086d0:	3017883a 	mov	r11,r6
100086d4:	9a95883a 	add	r10,r19,r10
100086d8:	500f883a 	mov	r7,r10
100086dc:	3c000317 	ldw	r16,12(r7)
100086e0:	3c00cd26 	beq	r7,r16,10008a18 <_malloc_r+0x54c>
100086e4:	80800117 	ldw	r2,4(r16)
100086e8:	1244703a 	and	r2,r2,r9
100086ec:	1447c83a 	sub	r3,r2,r17
100086f0:	19400408 	cmpgei	r5,r3,16
100086f4:	2800081e 	bne	r5,zero,10008718 <_malloc_r+0x24c>
100086f8:	1800cc0e 	bge	r3,zero,10008a2c <_malloc_r+0x560>
100086fc:	84000317 	ldw	r16,12(r16)
10008700:	3c00c526 	beq	r7,r16,10008a18 <_malloc_r+0x54c>
10008704:	80800117 	ldw	r2,4(r16)
10008708:	1244703a 	and	r2,r2,r9
1000870c:	1447c83a 	sub	r3,r2,r17
10008710:	19400410 	cmplti	r5,r3,16
10008714:	283ff81e 	bne	r5,zero,100086f8 <_malloc_r+0x22c>
10008718:	81000317 	ldw	r4,12(r16)
1000871c:	81400217 	ldw	r5,8(r16)
10008720:	89800054 	ori	r6,r17,1
10008724:	81800115 	stw	r6,4(r16)
10008728:	29000315 	stw	r4,12(r5)
1000872c:	21400215 	stw	r5,8(r4)
10008730:	8463883a 	add	r17,r16,r17
10008734:	9c400515 	stw	r17,20(r19)
10008738:	9c400415 	stw	r17,16(r19)
1000873c:	19000054 	ori	r4,r3,1
10008740:	89000115 	stw	r4,4(r17)
10008744:	8085883a 	add	r2,r16,r2
10008748:	8a000315 	stw	r8,12(r17)
1000874c:	8a000215 	stw	r8,8(r17)
10008750:	10c00015 	stw	r3,0(r2)
10008754:	9009883a 	mov	r4,r18
10008758:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000875c:	80800204 	addi	r2,r16,8
10008760:	00000306 	br	10008770 <_malloc_r+0x2a4>
10008764:	00800304 	movi	r2,12
10008768:	90800015 	stw	r2,0(r18)
1000876c:	0005883a 	mov	r2,zero
10008770:	dfc00917 	ldw	ra,36(sp)
10008774:	df000817 	ldw	fp,32(sp)
10008778:	ddc00717 	ldw	r23,28(sp)
1000877c:	dd800617 	ldw	r22,24(sp)
10008780:	dd400517 	ldw	r21,20(sp)
10008784:	dd000417 	ldw	r20,16(sp)
10008788:	dcc00317 	ldw	r19,12(sp)
1000878c:	dc800217 	ldw	r18,8(sp)
10008790:	dc400117 	ldw	r17,4(sp)
10008794:	dc000017 	ldw	r16,0(sp)
10008798:	dec00a04 	addi	sp,sp,40
1000879c:	f800283a 	ret
100087a0:	01408004 	movi	r5,512
100087a4:	01801004 	movi	r6,64
100087a8:	02000fc4 	movi	r8,63
100087ac:	003f8006 	br	100085b0 <_malloc_r+0xe4>
100087b0:	14000317 	ldw	r16,12(r2)
100087b4:	31800084 	addi	r6,r6,2
100087b8:	143f5f1e 	bne	r2,r16,10008538 <_malloc_r+0x6c>
100087bc:	9c000417 	ldw	r16,16(r19)
100087c0:	02040074 	movhi	r8,4097
100087c4:	420ec904 	addi	r8,r8,15140
100087c8:	823f941e 	bne	r16,r8,1000861c <_malloc_r+0x150>
100087cc:	3007d0ba 	srai	r3,r6,2
100087d0:	01000044 	movi	r4,1
100087d4:	98800117 	ldw	r2,4(r19)
100087d8:	20c8983a 	sll	r4,r4,r3
100087dc:	113fae2e 	bgeu	r2,r4,10008698 <_malloc_r+0x1cc>
100087e0:	9c000217 	ldw	r16,8(r19)
100087e4:	00bfff04 	movi	r2,-4
100087e8:	85000117 	ldw	r20,4(r16)
100087ec:	a0ac703a 	and	r22,r20,r2
100087f0:	b4400336 	bltu	r22,r17,10008800 <_malloc_r+0x334>
100087f4:	b445c83a 	sub	r2,r22,r17
100087f8:	10c00408 	cmpgei	r3,r2,16
100087fc:	1800561e 	bne	r3,zero,10008958 <_malloc_r+0x48c>
10008800:	00840074 	movhi	r2,4097
10008804:	1094a917 	ldw	r2,21156(r2)
10008808:	00c40074 	movhi	r3,4097
1000880c:	1d1d3f17 	ldw	r20,29948(r3)
10008810:	10bfffd8 	cmpnei	r2,r2,-1
10008814:	85ab883a 	add	r21,r16,r22
10008818:	8d29883a 	add	r20,r17,r20
1000881c:	1000c826 	beq	r2,zero,10008b40 <_malloc_r+0x674>
10008820:	a50403c4 	addi	r20,r20,4111
10008824:	00bc0004 	movi	r2,-4096
10008828:	a0a8703a 	and	r20,r20,r2
1000882c:	a00b883a 	mov	r5,r20
10008830:	9009883a 	mov	r4,r18
10008834:	000a52c0 	call	1000a52c <_sbrk_r>
10008838:	102f883a 	mov	r23,r2
1000883c:	10bfffd8 	cmpnei	r2,r2,-1
10008840:	10009a26 	beq	r2,zero,10008aac <_malloc_r+0x5e0>
10008844:	bd409836 	bltu	r23,r21,10008aa8 <_malloc_r+0x5dc>
10008848:	00840074 	movhi	r2,4097
1000884c:	109d4917 	ldw	r2,29988(r2)
10008850:	00c40074 	movhi	r3,4097
10008854:	a085883a 	add	r2,r20,r2
10008858:	189d4915 	stw	r2,29988(r3)
1000885c:	1007883a 	mov	r3,r2
10008860:	adc0dd26 	beq	r21,r23,10008bd8 <_malloc_r+0x70c>
10008864:	00840074 	movhi	r2,4097
10008868:	1094a917 	ldw	r2,21156(r2)
1000886c:	10bfffd8 	cmpnei	r2,r2,-1
10008870:	1000e026 	beq	r2,zero,10008bf4 <_malloc_r+0x728>
10008874:	bd6bc83a 	sub	r21,r23,r21
10008878:	a8c7883a 	add	r3,r21,r3
1000887c:	00840074 	movhi	r2,4097
10008880:	10dd4915 	stw	r3,29988(r2)
10008884:	bf0001cc 	andi	fp,r23,7
10008888:	e000b626 	beq	fp,zero,10008b64 <_malloc_r+0x698>
1000888c:	bf2fc83a 	sub	r23,r23,fp
10008890:	bdc00204 	addi	r23,r23,8
10008894:	00840204 	movi	r2,4104
10008898:	1705c83a 	sub	r2,r2,fp
1000889c:	bd29883a 	add	r20,r23,r20
100088a0:	1505c83a 	sub	r2,r2,r20
100088a4:	1543ffcc 	andi	r21,r2,4095
100088a8:	a80b883a 	mov	r5,r21
100088ac:	9009883a 	mov	r4,r18
100088b0:	000a52c0 	call	1000a52c <_sbrk_r>
100088b4:	10ffffe0 	cmpeqi	r3,r2,-1
100088b8:	1800e41e 	bne	r3,zero,10008c4c <_malloc_r+0x780>
100088bc:	15c5c83a 	sub	r2,r2,r23
100088c0:	1569883a 	add	r20,r2,r21
100088c4:	00840074 	movhi	r2,4097
100088c8:	109d4917 	ldw	r2,29988(r2)
100088cc:	9dc00215 	stw	r23,8(r19)
100088d0:	a5000054 	ori	r20,r20,1
100088d4:	a885883a 	add	r2,r21,r2
100088d8:	00c40074 	movhi	r3,4097
100088dc:	189d4915 	stw	r2,29988(r3)
100088e0:	bd000115 	stw	r20,4(r23)
100088e4:	84c0c626 	beq	r16,r19,10008c00 <_malloc_r+0x734>
100088e8:	b0c00428 	cmpgeui	r3,r22,16
100088ec:	1800c626 	beq	r3,zero,10008c08 <_malloc_r+0x73c>
100088f0:	81000117 	ldw	r4,4(r16)
100088f4:	017ffe04 	movi	r5,-8
100088f8:	b0fffd04 	addi	r3,r22,-12
100088fc:	1946703a 	and	r3,r3,r5
10008900:	2100004c 	andi	r4,r4,1
10008904:	20c8b03a 	or	r4,r4,r3
10008908:	81000115 	stw	r4,4(r16)
1000890c:	01400144 	movi	r5,5
10008910:	80c9883a 	add	r4,r16,r3
10008914:	21400115 	stw	r5,4(r4)
10008918:	21400215 	stw	r5,8(r4)
1000891c:	18c00428 	cmpgeui	r3,r3,16
10008920:	1800cf1e 	bne	r3,zero,10008c60 <_malloc_r+0x794>
10008924:	bd000117 	ldw	r20,4(r23)
10008928:	b821883a 	mov	r16,r23
1000892c:	00c40074 	movhi	r3,4097
10008930:	18dd3e17 	ldw	r3,29944(r3)
10008934:	1880022e 	bgeu	r3,r2,10008940 <_malloc_r+0x474>
10008938:	00c40074 	movhi	r3,4097
1000893c:	189d3e15 	stw	r2,29944(r3)
10008940:	00c40074 	movhi	r3,4097
10008944:	18dd3d17 	ldw	r3,29940(r3)
10008948:	18805a2e 	bgeu	r3,r2,10008ab4 <_malloc_r+0x5e8>
1000894c:	00c40074 	movhi	r3,4097
10008950:	189d3d15 	stw	r2,29940(r3)
10008954:	00005706 	br	10008ab4 <_malloc_r+0x5e8>
10008958:	88c00054 	ori	r3,r17,1
1000895c:	80c00115 	stw	r3,4(r16)
10008960:	8463883a 	add	r17,r16,r17
10008964:	10800054 	ori	r2,r2,1
10008968:	9c400215 	stw	r17,8(r19)
1000896c:	88800115 	stw	r2,4(r17)
10008970:	9009883a 	mov	r4,r18
10008974:	000ff5c0 	call	1000ff5c <__malloc_unlock>
10008978:	80800204 	addi	r2,r16,8
1000897c:	003f7c06 	br	10008770 <_malloc_r+0x2a4>
10008980:	400d883a 	mov	r6,r8
10008984:	003f2106 	br	1000860c <_malloc_r+0x140>
10008988:	81000317 	ldw	r4,12(r16)
1000898c:	003eee06 	br	10008548 <_malloc_r+0x7c>
10008990:	1006d27a 	srli	r3,r2,9
10008994:	19000168 	cmpgeui	r4,r3,5
10008998:	20003e26 	beq	r4,zero,10008a94 <_malloc_r+0x5c8>
1000899c:	19000568 	cmpgeui	r4,r3,21
100089a0:	20007a1e 	bne	r4,zero,10008b8c <_malloc_r+0x6c0>
100089a4:	19401704 	addi	r5,r3,92
100089a8:	280a90fa 	slli	r5,r5,3
100089ac:	190016c4 	addi	r4,r3,91
100089b0:	994b883a 	add	r5,r19,r5
100089b4:	28c00017 	ldw	r3,0(r5)
100089b8:	297ffe04 	addi	r5,r5,-8
100089bc:	28c06226 	beq	r5,r3,10008b48 <_malloc_r+0x67c>
100089c0:	01ffff04 	movi	r7,-4
100089c4:	19000117 	ldw	r4,4(r3)
100089c8:	21c8703a 	and	r4,r4,r7
100089cc:	1100022e 	bgeu	r2,r4,100089d8 <_malloc_r+0x50c>
100089d0:	18c00217 	ldw	r3,8(r3)
100089d4:	28fffb1e 	bne	r5,r3,100089c4 <_malloc_r+0x4f8>
100089d8:	19400317 	ldw	r5,12(r3)
100089dc:	98800117 	ldw	r2,4(r19)
100089e0:	81400315 	stw	r5,12(r16)
100089e4:	80c00215 	stw	r3,8(r16)
100089e8:	2c000215 	stw	r16,8(r5)
100089ec:	1c000315 	stw	r16,12(r3)
100089f0:	003f2506 	br	10008688 <_malloc_r+0x1bc>
100089f4:	10c00568 	cmpgeui	r3,r2,21
100089f8:	18003826 	beq	r3,zero,10008adc <_malloc_r+0x610>
100089fc:	10c01568 	cmpgeui	r3,r2,85
10008a00:	1800691e 	bne	r3,zero,10008ba8 <_malloc_r+0x6dc>
10008a04:	8804d33a 	srli	r2,r17,12
10008a08:	11801bc4 	addi	r6,r2,111
10008a0c:	12001b84 	addi	r8,r2,110
10008a10:	300a90fa 	slli	r5,r6,3
10008a14:	003ee606 	br	100085b0 <_malloc_r+0xe4>
10008a18:	5ac00044 	addi	r11,r11,1
10008a1c:	588000cc 	andi	r2,r11,3
10008a20:	39c00204 	addi	r7,r7,8
10008a24:	103f2d1e 	bne	r2,zero,100086dc <_malloc_r+0x210>
10008a28:	00003306 	br	10008af8 <_malloc_r+0x62c>
10008a2c:	8085883a 	add	r2,r16,r2
10008a30:	10c00117 	ldw	r3,4(r2)
10008a34:	81000317 	ldw	r4,12(r16)
10008a38:	81400217 	ldw	r5,8(r16)
10008a3c:	18c00054 	ori	r3,r3,1
10008a40:	10c00115 	stw	r3,4(r2)
10008a44:	29000315 	stw	r4,12(r5)
10008a48:	21400215 	stw	r5,8(r4)
10008a4c:	9009883a 	mov	r4,r18
10008a50:	000ff5c0 	call	1000ff5c <__malloc_unlock>
10008a54:	80800204 	addi	r2,r16,8
10008a58:	003f4506 	br	10008770 <_malloc_r+0x2a4>
10008a5c:	880cd0fa 	srli	r6,r17,3
10008a60:	88800204 	addi	r2,r17,8
10008a64:	003eae06 	br	10008520 <_malloc_r+0x54>
10008a68:	8085883a 	add	r2,r16,r2
10008a6c:	10c00117 	ldw	r3,4(r2)
10008a70:	9009883a 	mov	r4,r18
10008a74:	18c00054 	ori	r3,r3,1
10008a78:	10c00115 	stw	r3,4(r2)
10008a7c:	000ff5c0 	call	1000ff5c <__malloc_unlock>
10008a80:	80800204 	addi	r2,r16,8
10008a84:	003f3a06 	br	10008770 <_malloc_r+0x2a4>
10008a88:	89000054 	ori	r4,r17,1
10008a8c:	81000115 	stw	r4,4(r16)
10008a90:	003f2706 	br	10008730 <_malloc_r+0x264>
10008a94:	1006d1ba 	srli	r3,r2,6
10008a98:	19400e44 	addi	r5,r3,57
10008a9c:	19000e04 	addi	r4,r3,56
10008aa0:	280a90fa 	slli	r5,r5,3
10008aa4:	003fc206 	br	100089b0 <_malloc_r+0x4e4>
10008aa8:	84c04626 	beq	r16,r19,10008bc4 <_malloc_r+0x6f8>
10008aac:	9c000217 	ldw	r16,8(r19)
10008ab0:	85000117 	ldw	r20,4(r16)
10008ab4:	00bfff04 	movi	r2,-4
10008ab8:	a0a8703a 	and	r20,r20,r2
10008abc:	a445c83a 	sub	r2,r20,r17
10008ac0:	a4400236 	bltu	r20,r17,10008acc <_malloc_r+0x600>
10008ac4:	10c00408 	cmpgei	r3,r2,16
10008ac8:	183fa31e 	bne	r3,zero,10008958 <_malloc_r+0x48c>
10008acc:	9009883a 	mov	r4,r18
10008ad0:	000ff5c0 	call	1000ff5c <__malloc_unlock>
10008ad4:	0005883a 	mov	r2,zero
10008ad8:	003f2506 	br	10008770 <_malloc_r+0x2a4>
10008adc:	11801704 	addi	r6,r2,92
10008ae0:	120016c4 	addi	r8,r2,91
10008ae4:	300a90fa 	slli	r5,r6,3
10008ae8:	003eb106 	br	100085b0 <_malloc_r+0xe4>
10008aec:	50800217 	ldw	r2,8(r10)
10008af0:	31bfffc4 	addi	r6,r6,-1
10008af4:	1280701e 	bne	r2,r10,10008cb8 <_malloc_r+0x7ec>
10008af8:	308000cc 	andi	r2,r6,3
10008afc:	52bffe04 	addi	r10,r10,-8
10008b00:	103ffa1e 	bne	r2,zero,10008aec <_malloc_r+0x620>
10008b04:	98c00117 	ldw	r3,4(r19)
10008b08:	0104303a 	nor	r2,zero,r4
10008b0c:	10c4703a 	and	r2,r2,r3
10008b10:	98800115 	stw	r2,4(r19)
10008b14:	2109883a 	add	r4,r4,r4
10008b18:	113f3136 	bltu	r2,r4,100087e0 <_malloc_r+0x314>
10008b1c:	203f3026 	beq	r4,zero,100087e0 <_malloc_r+0x314>
10008b20:	2086703a 	and	r3,r4,r2
10008b24:	1800041e 	bne	r3,zero,10008b38 <_malloc_r+0x66c>
10008b28:	2109883a 	add	r4,r4,r4
10008b2c:	2086703a 	and	r3,r4,r2
10008b30:	5ac00104 	addi	r11,r11,4
10008b34:	183ffc26 	beq	r3,zero,10008b28 <_malloc_r+0x65c>
10008b38:	580d883a 	mov	r6,r11
10008b3c:	003ee306 	br	100086cc <_malloc_r+0x200>
10008b40:	a5000404 	addi	r20,r20,16
10008b44:	003f3906 	br	1000882c <_malloc_r+0x360>
10008b48:	2009d0ba 	srai	r4,r4,2
10008b4c:	00800044 	movi	r2,1
10008b50:	99c00117 	ldw	r7,4(r19)
10008b54:	1104983a 	sll	r2,r2,r4
10008b58:	11c4b03a 	or	r2,r2,r7
10008b5c:	98800115 	stw	r2,4(r19)
10008b60:	003f9f06 	br	100089e0 <_malloc_r+0x514>
10008b64:	bd05883a 	add	r2,r23,r20
10008b68:	0085c83a 	sub	r2,zero,r2
10008b6c:	1543ffcc 	andi	r21,r2,4095
10008b70:	a80b883a 	mov	r5,r21
10008b74:	9009883a 	mov	r4,r18
10008b78:	000a52c0 	call	1000a52c <_sbrk_r>
10008b7c:	10ffffe0 	cmpeqi	r3,r2,-1
10008b80:	183f4e26 	beq	r3,zero,100088bc <_malloc_r+0x3f0>
10008b84:	002b883a 	mov	r21,zero
10008b88:	003f4e06 	br	100088c4 <_malloc_r+0x3f8>
10008b8c:	19001568 	cmpgeui	r4,r3,85
10008b90:	2000201e 	bne	r4,zero,10008c14 <_malloc_r+0x748>
10008b94:	1006d33a 	srli	r3,r2,12
10008b98:	19401bc4 	addi	r5,r3,111
10008b9c:	19001b84 	addi	r4,r3,110
10008ba0:	280a90fa 	slli	r5,r5,3
10008ba4:	003f8206 	br	100089b0 <_malloc_r+0x4e4>
10008ba8:	10c05568 	cmpgeui	r3,r2,341
10008bac:	1800201e 	bne	r3,zero,10008c30 <_malloc_r+0x764>
10008bb0:	8804d3fa 	srli	r2,r17,15
10008bb4:	11801e04 	addi	r6,r2,120
10008bb8:	12001dc4 	addi	r8,r2,119
10008bbc:	300a90fa 	slli	r5,r6,3
10008bc0:	003e7b06 	br	100085b0 <_malloc_r+0xe4>
10008bc4:	00840074 	movhi	r2,4097
10008bc8:	10dd4917 	ldw	r3,29988(r2)
10008bcc:	a0c7883a 	add	r3,r20,r3
10008bd0:	10dd4915 	stw	r3,29988(r2)
10008bd4:	003f2306 	br	10008864 <_malloc_r+0x398>
10008bd8:	a903ffcc 	andi	r4,r21,4095
10008bdc:	203f211e 	bne	r4,zero,10008864 <_malloc_r+0x398>
10008be0:	9c000217 	ldw	r16,8(r19)
10008be4:	b529883a 	add	r20,r22,r20
10008be8:	a5000054 	ori	r20,r20,1
10008bec:	85000115 	stw	r20,4(r16)
10008bf0:	003f4e06 	br	1000892c <_malloc_r+0x460>
10008bf4:	00840074 	movhi	r2,4097
10008bf8:	15d4a915 	stw	r23,21156(r2)
10008bfc:	003f2106 	br	10008884 <_malloc_r+0x3b8>
10008c00:	b821883a 	mov	r16,r23
10008c04:	003f4906 	br	1000892c <_malloc_r+0x460>
10008c08:	00800044 	movi	r2,1
10008c0c:	b8800115 	stw	r2,4(r23)
10008c10:	003fae06 	br	10008acc <_malloc_r+0x600>
10008c14:	19005568 	cmpgeui	r4,r3,341
10008c18:	2000191e 	bne	r4,zero,10008c80 <_malloc_r+0x7b4>
10008c1c:	1006d3fa 	srli	r3,r2,15
10008c20:	19401e04 	addi	r5,r3,120
10008c24:	19001dc4 	addi	r4,r3,119
10008c28:	280a90fa 	slli	r5,r5,3
10008c2c:	003f6006 	br	100089b0 <_malloc_r+0x4e4>
10008c30:	10815568 	cmpgeui	r2,r2,1365
10008c34:	1000191e 	bne	r2,zero,10008c9c <_malloc_r+0x7d0>
10008c38:	8804d4ba 	srli	r2,r17,18
10008c3c:	11801f44 	addi	r6,r2,125
10008c40:	12001f04 	addi	r8,r2,124
10008c44:	300a90fa 	slli	r5,r6,3
10008c48:	003e5906 	br	100085b0 <_malloc_r+0xe4>
10008c4c:	e73ffe04 	addi	fp,fp,-8
10008c50:	a729883a 	add	r20,r20,fp
10008c54:	a5e9c83a 	sub	r20,r20,r23
10008c58:	002b883a 	mov	r21,zero
10008c5c:	003f1906 	br	100088c4 <_malloc_r+0x3f8>
10008c60:	81400204 	addi	r5,r16,8
10008c64:	9009883a 	mov	r4,r18
10008c68:	00079c00 	call	100079c0 <_free_r>
10008c6c:	9c000217 	ldw	r16,8(r19)
10008c70:	00840074 	movhi	r2,4097
10008c74:	109d4917 	ldw	r2,29988(r2)
10008c78:	85000117 	ldw	r20,4(r16)
10008c7c:	003f2b06 	br	1000892c <_malloc_r+0x460>
10008c80:	18c15568 	cmpgeui	r3,r3,1365
10008c84:	1800091e 	bne	r3,zero,10008cac <_malloc_r+0x7e0>
10008c88:	1006d4ba 	srli	r3,r2,18
10008c8c:	19401f44 	addi	r5,r3,125
10008c90:	19001f04 	addi	r4,r3,124
10008c94:	280a90fa 	slli	r5,r5,3
10008c98:	003f4506 	br	100089b0 <_malloc_r+0x4e4>
10008c9c:	0140fe04 	movi	r5,1016
10008ca0:	01801fc4 	movi	r6,127
10008ca4:	02001f84 	movi	r8,126
10008ca8:	003e4106 	br	100085b0 <_malloc_r+0xe4>
10008cac:	0140fe04 	movi	r5,1016
10008cb0:	01001f84 	movi	r4,126
10008cb4:	003f3e06 	br	100089b0 <_malloc_r+0x4e4>
10008cb8:	98800117 	ldw	r2,4(r19)
10008cbc:	003f9506 	br	10008b14 <_malloc_r+0x648>

10008cc0 <memchr>:
10008cc0:	208000cc 	andi	r2,r4,3
10008cc4:	280f883a 	mov	r7,r5
10008cc8:	10003526 	beq	r2,zero,10008da0 <memchr+0xe0>
10008ccc:	30bfffc4 	addi	r2,r6,-1
10008cd0:	30001926 	beq	r6,zero,10008d38 <memchr+0x78>
10008cd4:	20c00003 	ldbu	r3,0(r4)
10008cd8:	29803fcc 	andi	r6,r5,255
10008cdc:	30c0061e 	bne	r6,r3,10008cf8 <memchr+0x38>
10008ce0:	00001706 	br	10008d40 <memchr+0x80>
10008ce4:	10bfffc4 	addi	r2,r2,-1
10008ce8:	10ffffe0 	cmpeqi	r3,r2,-1
10008cec:	1800121e 	bne	r3,zero,10008d38 <memchr+0x78>
10008cf0:	20c00003 	ldbu	r3,0(r4)
10008cf4:	19801226 	beq	r3,r6,10008d40 <memchr+0x80>
10008cf8:	21000044 	addi	r4,r4,1
10008cfc:	20c000cc 	andi	r3,r4,3
10008d00:	183ff81e 	bne	r3,zero,10008ce4 <memchr+0x24>
10008d04:	10c00128 	cmpgeui	r3,r2,4
10008d08:	18000f1e 	bne	r3,zero,10008d48 <memchr+0x88>
10008d0c:	10000a26 	beq	r2,zero,10008d38 <memchr+0x78>
10008d10:	20c00003 	ldbu	r3,0(r4)
10008d14:	29403fcc 	andi	r5,r5,255
10008d18:	19400926 	beq	r3,r5,10008d40 <memchr+0x80>
10008d1c:	2085883a 	add	r2,r4,r2
10008d20:	39403fcc 	andi	r5,r7,255
10008d24:	00000206 	br	10008d30 <memchr+0x70>
10008d28:	20c00003 	ldbu	r3,0(r4)
10008d2c:	19400426 	beq	r3,r5,10008d40 <memchr+0x80>
10008d30:	21000044 	addi	r4,r4,1
10008d34:	113ffc1e 	bne	r2,r4,10008d28 <memchr+0x68>
10008d38:	0005883a 	mov	r2,zero
10008d3c:	f800283a 	ret
10008d40:	2005883a 	mov	r2,r4
10008d44:	f800283a 	ret
10008d48:	280c923a 	slli	r6,r5,8
10008d4c:	2a403fcc 	andi	r9,r5,255
10008d50:	02bfbff4 	movhi	r10,65279
10008d54:	31bfffcc 	andi	r6,r6,65535
10008d58:	3246b03a 	or	r3,r6,r9
10008d5c:	1812943a 	slli	r9,r3,16
10008d60:	02202074 	movhi	r8,32897
10008d64:	52bfbfc4 	addi	r10,r10,-257
10008d68:	48d2b03a 	or	r9,r9,r3
10008d6c:	42202004 	addi	r8,r8,-32640
10008d70:	20c00017 	ldw	r3,0(r4)
10008d74:	48c6f03a 	xor	r3,r9,r3
10008d78:	1a8d883a 	add	r6,r3,r10
10008d7c:	00c6303a 	nor	r3,zero,r3
10008d80:	30c6703a 	and	r3,r6,r3
10008d84:	1a06703a 	and	r3,r3,r8
10008d88:	183fe11e 	bne	r3,zero,10008d10 <memchr+0x50>
10008d8c:	10bfff04 	addi	r2,r2,-4
10008d90:	10c00128 	cmpgeui	r3,r2,4
10008d94:	21000104 	addi	r4,r4,4
10008d98:	183ff51e 	bne	r3,zero,10008d70 <memchr+0xb0>
10008d9c:	003fdb06 	br	10008d0c <memchr+0x4c>
10008da0:	3005883a 	mov	r2,r6
10008da4:	003fd706 	br	10008d04 <memchr+0x44>

10008da8 <memmove>:
10008da8:	2005883a 	mov	r2,r4
10008dac:	29000a2e 	bgeu	r5,r4,10008dd8 <memmove+0x30>
10008db0:	2989883a 	add	r4,r5,r6
10008db4:	1100082e 	bgeu	r2,r4,10008dd8 <memmove+0x30>
10008db8:	1187883a 	add	r3,r2,r6
10008dbc:	30003e26 	beq	r6,zero,10008eb8 <memmove+0x110>
10008dc0:	213fffc4 	addi	r4,r4,-1
10008dc4:	21400003 	ldbu	r5,0(r4)
10008dc8:	18ffffc4 	addi	r3,r3,-1
10008dcc:	19400005 	stb	r5,0(r3)
10008dd0:	10fffb1e 	bne	r2,r3,10008dc0 <memmove+0x18>
10008dd4:	f800283a 	ret
10008dd8:	30c00430 	cmpltui	r3,r6,16
10008ddc:	18000b26 	beq	r3,zero,10008e0c <memmove+0x64>
10008de0:	1007883a 	mov	r3,r2
10008de4:	31ffffc4 	addi	r7,r6,-1
10008de8:	30003726 	beq	r6,zero,10008ec8 <memmove+0x120>
10008dec:	39c00044 	addi	r7,r7,1
10008df0:	29cf883a 	add	r7,r5,r7
10008df4:	29400044 	addi	r5,r5,1
10008df8:	29bfffc3 	ldbu	r6,-1(r5)
10008dfc:	18c00044 	addi	r3,r3,1
10008e00:	19bfffc5 	stb	r6,-1(r3)
10008e04:	29fffb1e 	bne	r5,r7,10008df4 <memmove+0x4c>
10008e08:	f800283a 	ret
10008e0c:	2886b03a 	or	r3,r5,r2
10008e10:	18c000cc 	andi	r3,r3,3
10008e14:	1800291e 	bne	r3,zero,10008ebc <memmove+0x114>
10008e18:	327ffc04 	addi	r9,r6,-16
10008e1c:	4812d13a 	srli	r9,r9,4
10008e20:	280f883a 	mov	r7,r5
10008e24:	1007883a 	mov	r3,r2
10008e28:	4a400044 	addi	r9,r9,1
10008e2c:	4812913a 	slli	r9,r9,4
10008e30:	1251883a 	add	r8,r2,r9
10008e34:	39000017 	ldw	r4,0(r7)
10008e38:	18c00404 	addi	r3,r3,16
10008e3c:	39c00404 	addi	r7,r7,16
10008e40:	193ffc15 	stw	r4,-16(r3)
10008e44:	393ffd17 	ldw	r4,-12(r7)
10008e48:	193ffd15 	stw	r4,-12(r3)
10008e4c:	393ffe17 	ldw	r4,-8(r7)
10008e50:	193ffe15 	stw	r4,-8(r3)
10008e54:	393fff17 	ldw	r4,-4(r7)
10008e58:	193fff15 	stw	r4,-4(r3)
10008e5c:	40fff51e 	bne	r8,r3,10008e34 <memmove+0x8c>
10008e60:	3100030c 	andi	r4,r6,12
10008e64:	2a4b883a 	add	r5,r5,r9
10008e68:	320003cc 	andi	r8,r6,15
10008e6c:	20001726 	beq	r4,zero,10008ecc <memmove+0x124>
10008e70:	2813883a 	mov	r9,r5
10008e74:	180f883a 	mov	r7,r3
10008e78:	4a400104 	addi	r9,r9,4
10008e7c:	39c00104 	addi	r7,r7,4
10008e80:	4abfff17 	ldw	r10,-4(r9)
10008e84:	41c9c83a 	sub	r4,r8,r7
10008e88:	1909883a 	add	r4,r3,r4
10008e8c:	3abfff15 	stw	r10,-4(r7)
10008e90:	21000128 	cmpgeui	r4,r4,4
10008e94:	203ff81e 	bne	r4,zero,10008e78 <memmove+0xd0>
10008e98:	413fff04 	addi	r4,r8,-4
10008e9c:	2008d0ba 	srli	r4,r4,2
10008ea0:	318000cc 	andi	r6,r6,3
10008ea4:	21000044 	addi	r4,r4,1
10008ea8:	200890ba 	slli	r4,r4,2
10008eac:	1907883a 	add	r3,r3,r4
10008eb0:	290b883a 	add	r5,r5,r4
10008eb4:	003fcb06 	br	10008de4 <memmove+0x3c>
10008eb8:	f800283a 	ret
10008ebc:	31ffffc4 	addi	r7,r6,-1
10008ec0:	1007883a 	mov	r3,r2
10008ec4:	003fc906 	br	10008dec <memmove+0x44>
10008ec8:	f800283a 	ret
10008ecc:	400d883a 	mov	r6,r8
10008ed0:	003fc406 	br	10008de4 <memmove+0x3c>

10008ed4 <memset>:
10008ed4:	20c000cc 	andi	r3,r4,3
10008ed8:	2005883a 	mov	r2,r4
10008edc:	18003626 	beq	r3,zero,10008fb8 <memset+0xe4>
10008ee0:	31ffffc4 	addi	r7,r6,-1
10008ee4:	30003326 	beq	r6,zero,10008fb4 <memset+0xe0>
10008ee8:	2811883a 	mov	r8,r5
10008eec:	2007883a 	mov	r3,r4
10008ef0:	00000306 	br	10008f00 <memset+0x2c>
10008ef4:	39ffffc4 	addi	r7,r7,-1
10008ef8:	39bfffe0 	cmpeqi	r6,r7,-1
10008efc:	30002d1e 	bne	r6,zero,10008fb4 <memset+0xe0>
10008f00:	18c00044 	addi	r3,r3,1
10008f04:	1a3fffc5 	stb	r8,-1(r3)
10008f08:	198000cc 	andi	r6,r3,3
10008f0c:	303ff91e 	bne	r6,zero,10008ef4 <memset+0x20>
10008f10:	39000130 	cmpltui	r4,r7,4
10008f14:	2000221e 	bne	r4,zero,10008fa0 <memset+0xcc>
10008f18:	29003fcc 	andi	r4,r5,255
10008f1c:	200c923a 	slli	r6,r4,8
10008f20:	3a000430 	cmpltui	r8,r7,16
10008f24:	3108b03a 	or	r4,r6,r4
10008f28:	200c943a 	slli	r6,r4,16
10008f2c:	310cb03a 	or	r6,r6,r4
10008f30:	40000e1e 	bne	r8,zero,10008f6c <memset+0x98>
10008f34:	3a3ffc04 	addi	r8,r7,-16
10008f38:	4010d13a 	srli	r8,r8,4
10008f3c:	42000044 	addi	r8,r8,1
10008f40:	4010913a 	slli	r8,r8,4
10008f44:	1a11883a 	add	r8,r3,r8
10008f48:	19800015 	stw	r6,0(r3)
10008f4c:	19800115 	stw	r6,4(r3)
10008f50:	19800215 	stw	r6,8(r3)
10008f54:	18c00404 	addi	r3,r3,16
10008f58:	19bfff15 	stw	r6,-4(r3)
10008f5c:	40fffa1e 	bne	r8,r3,10008f48 <memset+0x74>
10008f60:	3900030c 	andi	r4,r7,12
10008f64:	39c003cc 	andi	r7,r7,15
10008f68:	20000d26 	beq	r4,zero,10008fa0 <memset+0xcc>
10008f6c:	1809883a 	mov	r4,r3
10008f70:	21000104 	addi	r4,r4,4
10008f74:	3911c83a 	sub	r8,r7,r4
10008f78:	1a11883a 	add	r8,r3,r8
10008f7c:	21bfff15 	stw	r6,-4(r4)
10008f80:	42000128 	cmpgeui	r8,r8,4
10008f84:	403ffa1e 	bne	r8,zero,10008f70 <memset+0x9c>
10008f88:	393fff04 	addi	r4,r7,-4
10008f8c:	2008d0ba 	srli	r4,r4,2
10008f90:	39c000cc 	andi	r7,r7,3
10008f94:	21000044 	addi	r4,r4,1
10008f98:	200890ba 	slli	r4,r4,2
10008f9c:	1907883a 	add	r3,r3,r4
10008fa0:	38000426 	beq	r7,zero,10008fb4 <memset+0xe0>
10008fa4:	19cf883a 	add	r7,r3,r7
10008fa8:	18c00044 	addi	r3,r3,1
10008fac:	197fffc5 	stb	r5,-1(r3)
10008fb0:	38fffd1e 	bne	r7,r3,10008fa8 <memset+0xd4>
10008fb4:	f800283a 	ret
10008fb8:	2007883a 	mov	r3,r4
10008fbc:	300f883a 	mov	r7,r6
10008fc0:	003fd306 	br	10008f10 <memset+0x3c>

10008fc4 <_Balloc>:
10008fc4:	20801317 	ldw	r2,76(r4)
10008fc8:	defffc04 	addi	sp,sp,-16
10008fcc:	dc400115 	stw	r17,4(sp)
10008fd0:	dc000015 	stw	r16,0(sp)
10008fd4:	dfc00315 	stw	ra,12(sp)
10008fd8:	dc800215 	stw	r18,8(sp)
10008fdc:	2021883a 	mov	r16,r4
10008fe0:	2823883a 	mov	r17,r5
10008fe4:	10000e26 	beq	r2,zero,10009020 <_Balloc+0x5c>
10008fe8:	880690ba 	slli	r3,r17,2
10008fec:	10c7883a 	add	r3,r2,r3
10008ff0:	18800017 	ldw	r2,0(r3)
10008ff4:	10001126 	beq	r2,zero,1000903c <_Balloc+0x78>
10008ff8:	11000017 	ldw	r4,0(r2)
10008ffc:	19000015 	stw	r4,0(r3)
10009000:	10000415 	stw	zero,16(r2)
10009004:	10000315 	stw	zero,12(r2)
10009008:	dfc00317 	ldw	ra,12(sp)
1000900c:	dc800217 	ldw	r18,8(sp)
10009010:	dc400117 	ldw	r17,4(sp)
10009014:	dc000017 	ldw	r16,0(sp)
10009018:	dec00404 	addi	sp,sp,16
1000901c:	f800283a 	ret
10009020:	01800844 	movi	r6,33
10009024:	01400104 	movi	r5,4
10009028:	000bc900 	call	1000bc90 <_calloc_r>
1000902c:	80801315 	stw	r2,76(r16)
10009030:	103fed1e 	bne	r2,zero,10008fe8 <_Balloc+0x24>
10009034:	0005883a 	mov	r2,zero
10009038:	003ff306 	br	10009008 <_Balloc+0x44>
1000903c:	04800044 	movi	r18,1
10009040:	9464983a 	sll	r18,r18,r17
10009044:	01400044 	movi	r5,1
10009048:	8009883a 	mov	r4,r16
1000904c:	91800144 	addi	r6,r18,5
10009050:	300c90ba 	slli	r6,r6,2
10009054:	000bc900 	call	1000bc90 <_calloc_r>
10009058:	103ff626 	beq	r2,zero,10009034 <_Balloc+0x70>
1000905c:	14400115 	stw	r17,4(r2)
10009060:	14800215 	stw	r18,8(r2)
10009064:	003fe606 	br	10009000 <_Balloc+0x3c>

10009068 <_Bfree>:
10009068:	28000726 	beq	r5,zero,10009088 <_Bfree+0x20>
1000906c:	28c00117 	ldw	r3,4(r5)
10009070:	20801317 	ldw	r2,76(r4)
10009074:	180690ba 	slli	r3,r3,2
10009078:	10c5883a 	add	r2,r2,r3
1000907c:	10c00017 	ldw	r3,0(r2)
10009080:	28c00015 	stw	r3,0(r5)
10009084:	11400015 	stw	r5,0(r2)
10009088:	f800283a 	ret

1000908c <__multadd>:
1000908c:	defffa04 	addi	sp,sp,-24
10009090:	dc800315 	stw	r18,12(sp)
10009094:	dc400215 	stw	r17,8(sp)
10009098:	dc000115 	stw	r16,4(sp)
1000909c:	2823883a 	mov	r17,r5
100090a0:	2c000417 	ldw	r16,16(r5)
100090a4:	2025883a 	mov	r18,r4
100090a8:	dfc00515 	stw	ra,20(sp)
100090ac:	29000504 	addi	r4,r5,20
100090b0:	dcc00415 	stw	r19,16(sp)
100090b4:	000b883a 	mov	r5,zero
100090b8:	20800017 	ldw	r2,0(r4)
100090bc:	21000104 	addi	r4,r4,4
100090c0:	29400044 	addi	r5,r5,1
100090c4:	10ffffcc 	andi	r3,r2,65535
100090c8:	1987383a 	mul	r3,r3,r6
100090cc:	1004d43a 	srli	r2,r2,16
100090d0:	19cf883a 	add	r7,r3,r7
100090d4:	1185383a 	mul	r2,r2,r6
100090d8:	3810d43a 	srli	r8,r7,16
100090dc:	38ffffcc 	andi	r3,r7,65535
100090e0:	120f883a 	add	r7,r2,r8
100090e4:	3804943a 	slli	r2,r7,16
100090e8:	380ed43a 	srli	r7,r7,16
100090ec:	10c7883a 	add	r3,r2,r3
100090f0:	20ffff15 	stw	r3,-4(r4)
100090f4:	2c3ff016 	blt	r5,r16,100090b8 <__multadd+0x2c>
100090f8:	38000826 	beq	r7,zero,1000911c <__multadd+0x90>
100090fc:	88800217 	ldw	r2,8(r17)
10009100:	80800e0e 	bge	r16,r2,1000913c <__multadd+0xb0>
10009104:	80800144 	addi	r2,r16,5
10009108:	100490ba 	slli	r2,r2,2
1000910c:	84000044 	addi	r16,r16,1
10009110:	8885883a 	add	r2,r17,r2
10009114:	11c00015 	stw	r7,0(r2)
10009118:	8c000415 	stw	r16,16(r17)
1000911c:	8805883a 	mov	r2,r17
10009120:	dfc00517 	ldw	ra,20(sp)
10009124:	dcc00417 	ldw	r19,16(sp)
10009128:	dc800317 	ldw	r18,12(sp)
1000912c:	dc400217 	ldw	r17,8(sp)
10009130:	dc000117 	ldw	r16,4(sp)
10009134:	dec00604 	addi	sp,sp,24
10009138:	f800283a 	ret
1000913c:	89400117 	ldw	r5,4(r17)
10009140:	9009883a 	mov	r4,r18
10009144:	d9c00015 	stw	r7,0(sp)
10009148:	29400044 	addi	r5,r5,1
1000914c:	0008fc40 	call	10008fc4 <_Balloc>
10009150:	89800417 	ldw	r6,16(r17)
10009154:	89400304 	addi	r5,r17,12
10009158:	11000304 	addi	r4,r2,12
1000915c:	31800084 	addi	r6,r6,2
10009160:	300c90ba 	slli	r6,r6,2
10009164:	1027883a 	mov	r19,r2
10009168:	00033640 	call	10003364 <memcpy>
1000916c:	d9c00017 	ldw	r7,0(sp)
10009170:	88000926 	beq	r17,zero,10009198 <__multadd+0x10c>
10009174:	88c00117 	ldw	r3,4(r17)
10009178:	90801317 	ldw	r2,76(r18)
1000917c:	180690ba 	slli	r3,r3,2
10009180:	10c5883a 	add	r2,r2,r3
10009184:	10c00017 	ldw	r3,0(r2)
10009188:	88c00015 	stw	r3,0(r17)
1000918c:	14400015 	stw	r17,0(r2)
10009190:	9823883a 	mov	r17,r19
10009194:	003fdb06 	br	10009104 <__multadd+0x78>
10009198:	9823883a 	mov	r17,r19
1000919c:	003fd906 	br	10009104 <__multadd+0x78>

100091a0 <__s2b>:
100091a0:	defff904 	addi	sp,sp,-28
100091a4:	dc800215 	stw	r18,8(sp)
100091a8:	dc000015 	stw	r16,0(sp)
100091ac:	2025883a 	mov	r18,r4
100091b0:	2821883a 	mov	r16,r5
100091b4:	39000204 	addi	r4,r7,8
100091b8:	01400244 	movi	r5,9
100091bc:	dcc00315 	stw	r19,12(sp)
100091c0:	dc400115 	stw	r17,4(sp)
100091c4:	dfc00615 	stw	ra,24(sp)
100091c8:	3823883a 	mov	r17,r7
100091cc:	dd400515 	stw	r21,20(sp)
100091d0:	dd000415 	stw	r20,16(sp)
100091d4:	3027883a 	mov	r19,r6
100091d8:	000d0d80 	call	1000d0d8 <__divsi3>
100091dc:	88c00290 	cmplti	r3,r17,10
100091e0:	1800311e 	bne	r3,zero,100092a8 <__s2b+0x108>
100091e4:	00c00044 	movi	r3,1
100091e8:	000b883a 	mov	r5,zero
100091ec:	18c7883a 	add	r3,r3,r3
100091f0:	29400044 	addi	r5,r5,1
100091f4:	18bffd16 	blt	r3,r2,100091ec <__s2b+0x4c>
100091f8:	9009883a 	mov	r4,r18
100091fc:	0008fc40 	call	10008fc4 <_Balloc>
10009200:	d8c00717 	ldw	r3,28(sp)
10009204:	10c00515 	stw	r3,20(r2)
10009208:	00c00044 	movi	r3,1
1000920c:	10c00415 	stw	r3,16(r2)
10009210:	98c00290 	cmplti	r3,r19,10
10009214:	1800211e 	bne	r3,zero,1000929c <__s2b+0xfc>
10009218:	85400244 	addi	r21,r16,9
1000921c:	84e9883a 	add	r20,r16,r19
10009220:	a821883a 	mov	r16,r21
10009224:	84000044 	addi	r16,r16,1
10009228:	81ffffc7 	ldb	r7,-1(r16)
1000922c:	01800284 	movi	r6,10
10009230:	100b883a 	mov	r5,r2
10009234:	39fff404 	addi	r7,r7,-48
10009238:	9009883a 	mov	r4,r18
1000923c:	000908c0 	call	1000908c <__multadd>
10009240:	a43ff81e 	bne	r20,r16,10009224 <__s2b+0x84>
10009244:	9c3ffe04 	addi	r16,r19,-8
10009248:	ac21883a 	add	r16,r21,r16
1000924c:	9c400a0e 	bge	r19,r17,10009278 <__s2b+0xd8>
10009250:	8ce3c83a 	sub	r17,r17,r19
10009254:	8463883a 	add	r17,r16,r17
10009258:	84000044 	addi	r16,r16,1
1000925c:	81ffffc7 	ldb	r7,-1(r16)
10009260:	01800284 	movi	r6,10
10009264:	100b883a 	mov	r5,r2
10009268:	39fff404 	addi	r7,r7,-48
1000926c:	9009883a 	mov	r4,r18
10009270:	000908c0 	call	1000908c <__multadd>
10009274:	8c3ff81e 	bne	r17,r16,10009258 <__s2b+0xb8>
10009278:	dfc00617 	ldw	ra,24(sp)
1000927c:	dd400517 	ldw	r21,20(sp)
10009280:	dd000417 	ldw	r20,16(sp)
10009284:	dcc00317 	ldw	r19,12(sp)
10009288:	dc800217 	ldw	r18,8(sp)
1000928c:	dc400117 	ldw	r17,4(sp)
10009290:	dc000017 	ldw	r16,0(sp)
10009294:	dec00704 	addi	sp,sp,28
10009298:	f800283a 	ret
1000929c:	84000284 	addi	r16,r16,10
100092a0:	04c00244 	movi	r19,9
100092a4:	003fe906 	br	1000924c <__s2b+0xac>
100092a8:	000b883a 	mov	r5,zero
100092ac:	003fd206 	br	100091f8 <__s2b+0x58>

100092b0 <__hi0bits>:
100092b0:	20bfffec 	andhi	r2,r4,65535
100092b4:	1000131e 	bne	r2,zero,10009304 <__hi0bits+0x54>
100092b8:	2008943a 	slli	r4,r4,16
100092bc:	00800404 	movi	r2,16
100092c0:	20ffc02c 	andhi	r3,r4,65280
100092c4:	1800021e 	bne	r3,zero,100092d0 <__hi0bits+0x20>
100092c8:	2008923a 	slli	r4,r4,8
100092cc:	10800204 	addi	r2,r2,8
100092d0:	20fc002c 	andhi	r3,r4,61440
100092d4:	1800021e 	bne	r3,zero,100092e0 <__hi0bits+0x30>
100092d8:	2008913a 	slli	r4,r4,4
100092dc:	10800104 	addi	r2,r2,4
100092e0:	20f0002c 	andhi	r3,r4,49152
100092e4:	1800021e 	bne	r3,zero,100092f0 <__hi0bits+0x40>
100092e8:	200890ba 	slli	r4,r4,2
100092ec:	10800084 	addi	r2,r2,2
100092f0:	20000316 	blt	r4,zero,10009300 <__hi0bits+0x50>
100092f4:	2110002c 	andhi	r4,r4,16384
100092f8:	10800044 	addi	r2,r2,1
100092fc:	20000326 	beq	r4,zero,1000930c <__hi0bits+0x5c>
10009300:	f800283a 	ret
10009304:	0005883a 	mov	r2,zero
10009308:	003fed06 	br	100092c0 <__hi0bits+0x10>
1000930c:	00800804 	movi	r2,32
10009310:	f800283a 	ret

10009314 <__lo0bits>:
10009314:	20c00017 	ldw	r3,0(r4)
10009318:	188001cc 	andi	r2,r3,7
1000931c:	10000826 	beq	r2,zero,10009340 <__lo0bits+0x2c>
10009320:	1880004c 	andi	r2,r3,1
10009324:	10001f1e 	bne	r2,zero,100093a4 <__lo0bits+0x90>
10009328:	1880008c 	andi	r2,r3,2
1000932c:	10002126 	beq	r2,zero,100093b4 <__lo0bits+0xa0>
10009330:	1806d07a 	srli	r3,r3,1
10009334:	00800044 	movi	r2,1
10009338:	20c00015 	stw	r3,0(r4)
1000933c:	f800283a 	ret
10009340:	18bfffcc 	andi	r2,r3,65535
10009344:	1000151e 	bne	r2,zero,1000939c <__lo0bits+0x88>
10009348:	1806d43a 	srli	r3,r3,16
1000934c:	00800404 	movi	r2,16
10009350:	19403fcc 	andi	r5,r3,255
10009354:	2800021e 	bne	r5,zero,10009360 <__lo0bits+0x4c>
10009358:	1806d23a 	srli	r3,r3,8
1000935c:	10800204 	addi	r2,r2,8
10009360:	194003cc 	andi	r5,r3,15
10009364:	2800021e 	bne	r5,zero,10009370 <__lo0bits+0x5c>
10009368:	1806d13a 	srli	r3,r3,4
1000936c:	10800104 	addi	r2,r2,4
10009370:	194000cc 	andi	r5,r3,3
10009374:	2800021e 	bne	r5,zero,10009380 <__lo0bits+0x6c>
10009378:	1806d0ba 	srli	r3,r3,2
1000937c:	10800084 	addi	r2,r2,2
10009380:	1940004c 	andi	r5,r3,1
10009384:	2800031e 	bne	r5,zero,10009394 <__lo0bits+0x80>
10009388:	1806d07a 	srli	r3,r3,1
1000938c:	10800044 	addi	r2,r2,1
10009390:	18000626 	beq	r3,zero,100093ac <__lo0bits+0x98>
10009394:	20c00015 	stw	r3,0(r4)
10009398:	f800283a 	ret
1000939c:	0005883a 	mov	r2,zero
100093a0:	003feb06 	br	10009350 <__lo0bits+0x3c>
100093a4:	0005883a 	mov	r2,zero
100093a8:	f800283a 	ret
100093ac:	00800804 	movi	r2,32
100093b0:	f800283a 	ret
100093b4:	1806d0ba 	srli	r3,r3,2
100093b8:	00800084 	movi	r2,2
100093bc:	20c00015 	stw	r3,0(r4)
100093c0:	f800283a 	ret

100093c4 <__i2b>:
100093c4:	defffe04 	addi	sp,sp,-8
100093c8:	dc000015 	stw	r16,0(sp)
100093cc:	2821883a 	mov	r16,r5
100093d0:	01400044 	movi	r5,1
100093d4:	dfc00115 	stw	ra,4(sp)
100093d8:	0008fc40 	call	10008fc4 <_Balloc>
100093dc:	01000044 	movi	r4,1
100093e0:	14000515 	stw	r16,20(r2)
100093e4:	11000415 	stw	r4,16(r2)
100093e8:	dfc00117 	ldw	ra,4(sp)
100093ec:	dc000017 	ldw	r16,0(sp)
100093f0:	dec00204 	addi	sp,sp,8
100093f4:	f800283a 	ret

100093f8 <__multiply>:
100093f8:	defffa04 	addi	sp,sp,-24
100093fc:	dd000415 	stw	r20,16(sp)
10009400:	dcc00315 	stw	r19,12(sp)
10009404:	35000417 	ldw	r20,16(r6)
10009408:	2cc00417 	ldw	r19,16(r5)
1000940c:	dc800215 	stw	r18,8(sp)
10009410:	dc400115 	stw	r17,4(sp)
10009414:	dfc00515 	stw	ra,20(sp)
10009418:	dc000015 	stw	r16,0(sp)
1000941c:	2823883a 	mov	r17,r5
10009420:	3025883a 	mov	r18,r6
10009424:	9d000516 	blt	r19,r20,1000943c <__multiply+0x44>
10009428:	a007883a 	mov	r3,r20
1000942c:	2825883a 	mov	r18,r5
10009430:	9829883a 	mov	r20,r19
10009434:	3023883a 	mov	r17,r6
10009438:	1827883a 	mov	r19,r3
1000943c:	90800217 	ldw	r2,8(r18)
10009440:	a4e1883a 	add	r16,r20,r19
10009444:	91400117 	ldw	r5,4(r18)
10009448:	1400010e 	bge	r2,r16,10009450 <__multiply+0x58>
1000944c:	29400044 	addi	r5,r5,1
10009450:	0008fc40 	call	10008fc4 <_Balloc>
10009454:	801290ba 	slli	r9,r16,2
10009458:	12800504 	addi	r10,r2,20
1000945c:	5007883a 	mov	r3,r10
10009460:	5253883a 	add	r9,r10,r9
10009464:	5240032e 	bgeu	r10,r9,10009474 <__multiply+0x7c>
10009468:	18000015 	stw	zero,0(r3)
1000946c:	18c00104 	addi	r3,r3,4
10009470:	1a7ffd36 	bltu	r3,r9,10009468 <__multiply+0x70>
10009474:	981690ba 	slli	r11,r19,2
10009478:	a01090ba 	slli	r8,r20,2
1000947c:	89400504 	addi	r5,r17,20
10009480:	91800504 	addi	r6,r18,20
10009484:	2ad7883a 	add	r11,r5,r11
10009488:	3211883a 	add	r8,r6,r8
1000948c:	2ac00636 	bltu	r5,r11,100094a8 <__multiply+0xb0>
10009490:	00004106 	br	10009598 <__multiply+0x1a0>
10009494:	701cd43a 	srli	r14,r14,16
10009498:	7000221e 	bne	r14,zero,10009524 <__multiply+0x12c>
1000949c:	29400104 	addi	r5,r5,4
100094a0:	52800104 	addi	r10,r10,4
100094a4:	2ac03c2e 	bgeu	r5,r11,10009598 <__multiply+0x1a0>
100094a8:	2b800017 	ldw	r14,0(r5)
100094ac:	73ffffcc 	andi	r15,r14,65535
100094b0:	783ff826 	beq	r15,zero,10009494 <__multiply+0x9c>
100094b4:	501b883a 	mov	r13,r10
100094b8:	301d883a 	mov	r14,r6
100094bc:	003f883a 	mov	ra,zero
100094c0:	71000017 	ldw	r4,0(r14)
100094c4:	6b000017 	ldw	r12,0(r13)
100094c8:	6b400104 	addi	r13,r13,4
100094cc:	21ffffcc 	andi	r7,r4,65535
100094d0:	3bcf383a 	mul	r7,r7,r15
100094d4:	2006d43a 	srli	r3,r4,16
100094d8:	613fffcc 	andi	r4,r12,65535
100094dc:	390f883a 	add	r7,r7,r4
100094e0:	3fcf883a 	add	r7,r7,ra
100094e4:	1bc7383a 	mul	r3,r3,r15
100094e8:	6018d43a 	srli	r12,r12,16
100094ec:	3808d43a 	srli	r4,r7,16
100094f0:	39ffffcc 	andi	r7,r7,65535
100094f4:	1b07883a 	add	r3,r3,r12
100094f8:	1907883a 	add	r3,r3,r4
100094fc:	1808943a 	slli	r4,r3,16
10009500:	73800104 	addi	r14,r14,4
10009504:	183ed43a 	srli	ra,r3,16
10009508:	21ceb03a 	or	r7,r4,r7
1000950c:	69ffff15 	stw	r7,-4(r13)
10009510:	723feb36 	bltu	r14,r8,100094c0 <__multiply+0xc8>
10009514:	6fc00015 	stw	ra,0(r13)
10009518:	2b800017 	ldw	r14,0(r5)
1000951c:	701cd43a 	srli	r14,r14,16
10009520:	703fde26 	beq	r14,zero,1000949c <__multiply+0xa4>
10009524:	50c00017 	ldw	r3,0(r10)
10009528:	501b883a 	mov	r13,r10
1000952c:	3019883a 	mov	r12,r6
10009530:	180f883a 	mov	r7,r3
10009534:	001f883a 	mov	r15,zero
10009538:	6100000b 	ldhu	r4,0(r12)
1000953c:	380ed43a 	srli	r7,r7,16
10009540:	18ffffcc 	andi	r3,r3,65535
10009544:	2389383a 	mul	r4,r4,r14
10009548:	6b400104 	addi	r13,r13,4
1000954c:	63000104 	addi	r12,r12,4
10009550:	21c9883a 	add	r4,r4,r7
10009554:	23c9883a 	add	r4,r4,r15
10009558:	201e943a 	slli	r15,r4,16
1000955c:	69c00017 	ldw	r7,0(r13)
10009560:	2008d43a 	srli	r4,r4,16
10009564:	78c6b03a 	or	r3,r15,r3
10009568:	68ffff15 	stw	r3,-4(r13)
1000956c:	60ffff8b 	ldhu	r3,-2(r12)
10009570:	3bffffcc 	andi	r15,r7,65535
10009574:	1b87383a 	mul	r3,r3,r14
10009578:	1bc7883a 	add	r3,r3,r15
1000957c:	1907883a 	add	r3,r3,r4
10009580:	181ed43a 	srli	r15,r3,16
10009584:	623fec36 	bltu	r12,r8,10009538 <__multiply+0x140>
10009588:	68c00015 	stw	r3,0(r13)
1000958c:	29400104 	addi	r5,r5,4
10009590:	52800104 	addi	r10,r10,4
10009594:	2affc436 	bltu	r5,r11,100094a8 <__multiply+0xb0>
10009598:	0400090e 	bge	zero,r16,100095c0 <__multiply+0x1c8>
1000959c:	48ffff17 	ldw	r3,-4(r9)
100095a0:	4a7fff04 	addi	r9,r9,-4
100095a4:	18000326 	beq	r3,zero,100095b4 <__multiply+0x1bc>
100095a8:	00000506 	br	100095c0 <__multiply+0x1c8>
100095ac:	48c00017 	ldw	r3,0(r9)
100095b0:	1800031e 	bne	r3,zero,100095c0 <__multiply+0x1c8>
100095b4:	843fffc4 	addi	r16,r16,-1
100095b8:	4a7fff04 	addi	r9,r9,-4
100095bc:	803ffb1e 	bne	r16,zero,100095ac <__multiply+0x1b4>
100095c0:	14000415 	stw	r16,16(r2)
100095c4:	dfc00517 	ldw	ra,20(sp)
100095c8:	dd000417 	ldw	r20,16(sp)
100095cc:	dcc00317 	ldw	r19,12(sp)
100095d0:	dc800217 	ldw	r18,8(sp)
100095d4:	dc400117 	ldw	r17,4(sp)
100095d8:	dc000017 	ldw	r16,0(sp)
100095dc:	dec00604 	addi	sp,sp,24
100095e0:	f800283a 	ret

100095e4 <__pow5mult>:
100095e4:	defffb04 	addi	sp,sp,-20
100095e8:	dcc00315 	stw	r19,12(sp)
100095ec:	dc000015 	stw	r16,0(sp)
100095f0:	dfc00415 	stw	ra,16(sp)
100095f4:	dc800215 	stw	r18,8(sp)
100095f8:	dc400115 	stw	r17,4(sp)
100095fc:	308000cc 	andi	r2,r6,3
10009600:	3021883a 	mov	r16,r6
10009604:	2027883a 	mov	r19,r4
10009608:	10002d1e 	bne	r2,zero,100096c0 <__pow5mult+0xdc>
1000960c:	2825883a 	mov	r18,r5
10009610:	8021d0ba 	srai	r16,r16,2
10009614:	80001926 	beq	r16,zero,1000967c <__pow5mult+0x98>
10009618:	9c401217 	ldw	r17,72(r19)
1000961c:	8800061e 	bne	r17,zero,10009638 <__pow5mult+0x54>
10009620:	00002f06 	br	100096e0 <__pow5mult+0xfc>
10009624:	8021d07a 	srai	r16,r16,1
10009628:	80001426 	beq	r16,zero,1000967c <__pow5mult+0x98>
1000962c:	88800017 	ldw	r2,0(r17)
10009630:	10001a26 	beq	r2,zero,1000969c <__pow5mult+0xb8>
10009634:	1023883a 	mov	r17,r2
10009638:	8080004c 	andi	r2,r16,1
1000963c:	103ff926 	beq	r2,zero,10009624 <__pow5mult+0x40>
10009640:	880d883a 	mov	r6,r17
10009644:	900b883a 	mov	r5,r18
10009648:	9809883a 	mov	r4,r19
1000964c:	00093f80 	call	100093f8 <__multiply>
10009650:	90001926 	beq	r18,zero,100096b8 <__pow5mult+0xd4>
10009654:	91000117 	ldw	r4,4(r18)
10009658:	98c01317 	ldw	r3,76(r19)
1000965c:	8021d07a 	srai	r16,r16,1
10009660:	200890ba 	slli	r4,r4,2
10009664:	1907883a 	add	r3,r3,r4
10009668:	19000017 	ldw	r4,0(r3)
1000966c:	91000015 	stw	r4,0(r18)
10009670:	1c800015 	stw	r18,0(r3)
10009674:	1025883a 	mov	r18,r2
10009678:	803fec1e 	bne	r16,zero,1000962c <__pow5mult+0x48>
1000967c:	9005883a 	mov	r2,r18
10009680:	dfc00417 	ldw	ra,16(sp)
10009684:	dcc00317 	ldw	r19,12(sp)
10009688:	dc800217 	ldw	r18,8(sp)
1000968c:	dc400117 	ldw	r17,4(sp)
10009690:	dc000017 	ldw	r16,0(sp)
10009694:	dec00504 	addi	sp,sp,20
10009698:	f800283a 	ret
1000969c:	880d883a 	mov	r6,r17
100096a0:	880b883a 	mov	r5,r17
100096a4:	9809883a 	mov	r4,r19
100096a8:	00093f80 	call	100093f8 <__multiply>
100096ac:	88800015 	stw	r2,0(r17)
100096b0:	10000015 	stw	zero,0(r2)
100096b4:	003fdf06 	br	10009634 <__pow5mult+0x50>
100096b8:	1025883a 	mov	r18,r2
100096bc:	003fd906 	br	10009624 <__pow5mult+0x40>
100096c0:	100490ba 	slli	r2,r2,2
100096c4:	00c40074 	movhi	r3,4097
100096c8:	000f883a 	mov	r7,zero
100096cc:	10c7883a 	add	r3,r2,r3
100096d0:	198aea17 	ldw	r6,11176(r3)
100096d4:	000908c0 	call	1000908c <__multadd>
100096d8:	1025883a 	mov	r18,r2
100096dc:	003fcc06 	br	10009610 <__pow5mult+0x2c>
100096e0:	01400044 	movi	r5,1
100096e4:	9809883a 	mov	r4,r19
100096e8:	0008fc40 	call	10008fc4 <_Balloc>
100096ec:	1023883a 	mov	r17,r2
100096f0:	00809c44 	movi	r2,625
100096f4:	88800515 	stw	r2,20(r17)
100096f8:	00800044 	movi	r2,1
100096fc:	88800415 	stw	r2,16(r17)
10009700:	9c401215 	stw	r17,72(r19)
10009704:	88000015 	stw	zero,0(r17)
10009708:	003fcb06 	br	10009638 <__pow5mult+0x54>

1000970c <__lshift>:
1000970c:	defff904 	addi	sp,sp,-28
10009710:	dcc00315 	stw	r19,12(sp)
10009714:	dc400115 	stw	r17,4(sp)
10009718:	2cc00417 	ldw	r19,16(r5)
1000971c:	3023d17a 	srai	r17,r6,5
10009720:	28800217 	ldw	r2,8(r5)
10009724:	dd400515 	stw	r21,20(sp)
10009728:	8ce7883a 	add	r19,r17,r19
1000972c:	dd000415 	stw	r20,16(sp)
10009730:	dc800215 	stw	r18,8(sp)
10009734:	dc000015 	stw	r16,0(sp)
10009738:	dfc00615 	stw	ra,24(sp)
1000973c:	9c000044 	addi	r16,r19,1
10009740:	2825883a 	mov	r18,r5
10009744:	302b883a 	mov	r21,r6
10009748:	2029883a 	mov	r20,r4
1000974c:	29400117 	ldw	r5,4(r5)
10009750:	1400030e 	bge	r2,r16,10009760 <__lshift+0x54>
10009754:	1085883a 	add	r2,r2,r2
10009758:	29400044 	addi	r5,r5,1
1000975c:	143ffd16 	blt	r2,r16,10009754 <__lshift+0x48>
10009760:	a009883a 	mov	r4,r20
10009764:	0008fc40 	call	10008fc4 <_Balloc>
10009768:	11000504 	addi	r4,r2,20
1000976c:	0440090e 	bge	zero,r17,10009794 <__lshift+0x88>
10009770:	8c400144 	addi	r17,r17,5
10009774:	882290ba 	slli	r17,r17,2
10009778:	2007883a 	mov	r3,r4
1000977c:	144b883a 	add	r5,r2,r17
10009780:	18c00104 	addi	r3,r3,4
10009784:	183fff15 	stw	zero,-4(r3)
10009788:	28fffd1e 	bne	r5,r3,10009780 <__lshift+0x74>
1000978c:	8c7ffb04 	addi	r17,r17,-20
10009790:	2449883a 	add	r4,r4,r17
10009794:	92000417 	ldw	r8,16(r18)
10009798:	90c00504 	addi	r3,r18,20
1000979c:	a98007cc 	andi	r6,r21,31
100097a0:	401090ba 	slli	r8,r8,2
100097a4:	1a11883a 	add	r8,r3,r8
100097a8:	30002126 	beq	r6,zero,10009830 <__lshift+0x124>
100097ac:	02400804 	movi	r9,32
100097b0:	4993c83a 	sub	r9,r9,r6
100097b4:	000f883a 	mov	r7,zero
100097b8:	19400017 	ldw	r5,0(r3)
100097bc:	21000104 	addi	r4,r4,4
100097c0:	18c00104 	addi	r3,r3,4
100097c4:	298a983a 	sll	r5,r5,r6
100097c8:	29cab03a 	or	r5,r5,r7
100097cc:	217fff15 	stw	r5,-4(r4)
100097d0:	197fff17 	ldw	r5,-4(r3)
100097d4:	2a4ed83a 	srl	r7,r5,r9
100097d8:	1a3ff736 	bltu	r3,r8,100097b8 <__lshift+0xac>
100097dc:	21c00015 	stw	r7,0(r4)
100097e0:	38000126 	beq	r7,zero,100097e8 <__lshift+0xdc>
100097e4:	8027883a 	mov	r19,r16
100097e8:	14c00415 	stw	r19,16(r2)
100097ec:	90000726 	beq	r18,zero,1000980c <__lshift+0x100>
100097f0:	91000117 	ldw	r4,4(r18)
100097f4:	a0c01317 	ldw	r3,76(r20)
100097f8:	200890ba 	slli	r4,r4,2
100097fc:	1907883a 	add	r3,r3,r4
10009800:	19000017 	ldw	r4,0(r3)
10009804:	91000015 	stw	r4,0(r18)
10009808:	1c800015 	stw	r18,0(r3)
1000980c:	dfc00617 	ldw	ra,24(sp)
10009810:	dd400517 	ldw	r21,20(sp)
10009814:	dd000417 	ldw	r20,16(sp)
10009818:	dcc00317 	ldw	r19,12(sp)
1000981c:	dc800217 	ldw	r18,8(sp)
10009820:	dc400117 	ldw	r17,4(sp)
10009824:	dc000017 	ldw	r16,0(sp)
10009828:	dec00704 	addi	sp,sp,28
1000982c:	f800283a 	ret
10009830:	18c00104 	addi	r3,r3,4
10009834:	197fff17 	ldw	r5,-4(r3)
10009838:	21000104 	addi	r4,r4,4
1000983c:	217fff15 	stw	r5,-4(r4)
10009840:	1a3ffb36 	bltu	r3,r8,10009830 <__lshift+0x124>
10009844:	003fe806 	br	100097e8 <__lshift+0xdc>

10009848 <__mcmp>:
10009848:	20800417 	ldw	r2,16(r4)
1000984c:	28c00417 	ldw	r3,16(r5)
10009850:	10c5c83a 	sub	r2,r2,r3
10009854:	10000e1e 	bne	r2,zero,10009890 <__mcmp+0x48>
10009858:	180c90ba 	slli	r6,r3,2
1000985c:	21000504 	addi	r4,r4,20
10009860:	29400504 	addi	r5,r5,20
10009864:	2187883a 	add	r3,r4,r6
10009868:	298b883a 	add	r5,r5,r6
1000986c:	00000106 	br	10009874 <__mcmp+0x2c>
10009870:	20c0082e 	bgeu	r4,r3,10009894 <__mcmp+0x4c>
10009874:	18ffff04 	addi	r3,r3,-4
10009878:	297fff04 	addi	r5,r5,-4
1000987c:	19c00017 	ldw	r7,0(r3)
10009880:	29800017 	ldw	r6,0(r5)
10009884:	39bffa26 	beq	r7,r6,10009870 <__mcmp+0x28>
10009888:	3980032e 	bgeu	r7,r6,10009898 <__mcmp+0x50>
1000988c:	00bfffc4 	movi	r2,-1
10009890:	f800283a 	ret
10009894:	f800283a 	ret
10009898:	00800044 	movi	r2,1
1000989c:	f800283a 	ret

100098a0 <__mdiff>:
100098a0:	defffa04 	addi	sp,sp,-24
100098a4:	dc800215 	stw	r18,8(sp)
100098a8:	30c00417 	ldw	r3,16(r6)
100098ac:	2c800417 	ldw	r18,16(r5)
100098b0:	dd000415 	stw	r20,16(sp)
100098b4:	dcc00315 	stw	r19,12(sp)
100098b8:	dc400115 	stw	r17,4(sp)
100098bc:	dc000015 	stw	r16,0(sp)
100098c0:	dfc00515 	stw	ra,20(sp)
100098c4:	90e5c83a 	sub	r18,r18,r3
100098c8:	2827883a 	mov	r19,r5
100098cc:	3029883a 	mov	r20,r6
100098d0:	2c000504 	addi	r16,r5,20
100098d4:	34400504 	addi	r17,r6,20
100098d8:	9000131e 	bne	r18,zero,10009928 <__mdiff+0x88>
100098dc:	180690ba 	slli	r3,r3,2
100098e0:	80c5883a 	add	r2,r16,r3
100098e4:	88c7883a 	add	r3,r17,r3
100098e8:	00000106 	br	100098f0 <__mdiff+0x50>
100098ec:	8080552e 	bgeu	r16,r2,10009a44 <__mdiff+0x1a4>
100098f0:	10bfff04 	addi	r2,r2,-4
100098f4:	18ffff04 	addi	r3,r3,-4
100098f8:	11c00017 	ldw	r7,0(r2)
100098fc:	19400017 	ldw	r5,0(r3)
10009900:	397ffa26 	beq	r7,r5,100098ec <__mdiff+0x4c>
10009904:	39400a2e 	bgeu	r7,r5,10009930 <__mdiff+0x90>
10009908:	8007883a 	mov	r3,r16
1000990c:	9805883a 	mov	r2,r19
10009910:	8821883a 	mov	r16,r17
10009914:	a027883a 	mov	r19,r20
10009918:	1823883a 	mov	r17,r3
1000991c:	1029883a 	mov	r20,r2
10009920:	04800044 	movi	r18,1
10009924:	00000206 	br	10009930 <__mdiff+0x90>
10009928:	903ff716 	blt	r18,zero,10009908 <__mdiff+0x68>
1000992c:	0025883a 	mov	r18,zero
10009930:	99400117 	ldw	r5,4(r19)
10009934:	0008fc40 	call	10008fc4 <_Balloc>
10009938:	9a400417 	ldw	r9,16(r19)
1000993c:	a2c00417 	ldw	r11,16(r20)
10009940:	12800504 	addi	r10,r2,20
10009944:	481090ba 	slli	r8,r9,2
10009948:	581690ba 	slli	r11,r11,2
1000994c:	14800315 	stw	r18,12(r2)
10009950:	8211883a 	add	r8,r16,r8
10009954:	8ad7883a 	add	r11,r17,r11
10009958:	0007883a 	mov	r3,zero
1000995c:	00000106 	br	10009964 <__mdiff+0xc4>
10009960:	3815883a 	mov	r10,r7
10009964:	81000017 	ldw	r4,0(r16)
10009968:	89800017 	ldw	r6,0(r17)
1000996c:	51c00104 	addi	r7,r10,4
10009970:	217fffcc 	andi	r5,r4,65535
10009974:	28cb883a 	add	r5,r5,r3
10009978:	30ffffcc 	andi	r3,r6,65535
1000997c:	28cbc83a 	sub	r5,r5,r3
10009980:	300cd43a 	srli	r6,r6,16
10009984:	2006d43a 	srli	r3,r4,16
10009988:	2809d43a 	srai	r4,r5,16
1000998c:	297fffcc 	andi	r5,r5,65535
10009990:	1987c83a 	sub	r3,r3,r6
10009994:	1907883a 	add	r3,r3,r4
10009998:	1808943a 	slli	r4,r3,16
1000999c:	8c400104 	addi	r17,r17,4
100099a0:	84000104 	addi	r16,r16,4
100099a4:	214ab03a 	or	r5,r4,r5
100099a8:	397fff15 	stw	r5,-4(r7)
100099ac:	1807d43a 	srai	r3,r3,16
100099b0:	8affeb36 	bltu	r17,r11,10009960 <__mdiff+0xc0>
100099b4:	8200152e 	bgeu	r16,r8,10009a0c <__mdiff+0x16c>
100099b8:	3815883a 	mov	r10,r7
100099bc:	800d883a 	mov	r6,r16
100099c0:	31000017 	ldw	r4,0(r6)
100099c4:	52800104 	addi	r10,r10,4
100099c8:	31800104 	addi	r6,r6,4
100099cc:	217fffcc 	andi	r5,r4,65535
100099d0:	28cb883a 	add	r5,r5,r3
100099d4:	2817d43a 	srai	r11,r5,16
100099d8:	2006d43a 	srli	r3,r4,16
100099dc:	293fffcc 	andi	r4,r5,65535
100099e0:	1ac7883a 	add	r3,r3,r11
100099e4:	180a943a 	slli	r5,r3,16
100099e8:	1807d43a 	srai	r3,r3,16
100099ec:	290ab03a 	or	r5,r5,r4
100099f0:	517fff15 	stw	r5,-4(r10)
100099f4:	323ff236 	bltu	r6,r8,100099c0 <__mdiff+0x120>
100099f8:	42bfffc4 	addi	r10,r8,-1
100099fc:	5415c83a 	sub	r10,r10,r16
10009a00:	5014d0ba 	srli	r10,r10,2
10009a04:	501490ba 	slli	r10,r10,2
10009a08:	3a95883a 	add	r10,r7,r10
10009a0c:	2800041e 	bne	r5,zero,10009a20 <__mdiff+0x180>
10009a10:	52bfff04 	addi	r10,r10,-4
10009a14:	50c00017 	ldw	r3,0(r10)
10009a18:	4a7fffc4 	addi	r9,r9,-1
10009a1c:	183ffc26 	beq	r3,zero,10009a10 <__mdiff+0x170>
10009a20:	12400415 	stw	r9,16(r2)
10009a24:	dfc00517 	ldw	ra,20(sp)
10009a28:	dd000417 	ldw	r20,16(sp)
10009a2c:	dcc00317 	ldw	r19,12(sp)
10009a30:	dc800217 	ldw	r18,8(sp)
10009a34:	dc400117 	ldw	r17,4(sp)
10009a38:	dc000017 	ldw	r16,0(sp)
10009a3c:	dec00604 	addi	sp,sp,24
10009a40:	f800283a 	ret
10009a44:	000b883a 	mov	r5,zero
10009a48:	0008fc40 	call	10008fc4 <_Balloc>
10009a4c:	00c00044 	movi	r3,1
10009a50:	10c00415 	stw	r3,16(r2)
10009a54:	10000515 	stw	zero,20(r2)
10009a58:	003ff206 	br	10009a24 <__mdiff+0x184>

10009a5c <__ulp>:
10009a5c:	295ffc2c 	andhi	r5,r5,32752
10009a60:	00ff3034 	movhi	r3,64704
10009a64:	28c7883a 	add	r3,r5,r3
10009a68:	00c0020e 	bge	zero,r3,10009a74 <__ulp+0x18>
10009a6c:	0005883a 	mov	r2,zero
10009a70:	f800283a 	ret
10009a74:	00c7c83a 	sub	r3,zero,r3
10009a78:	1807d53a 	srai	r3,r3,20
10009a7c:	18800508 	cmpgei	r2,r3,20
10009a80:	1000041e 	bne	r2,zero,10009a94 <__ulp+0x38>
10009a84:	01400234 	movhi	r5,8
10009a88:	28c7d83a 	sra	r3,r5,r3
10009a8c:	0005883a 	mov	r2,zero
10009a90:	f800283a 	ret
10009a94:	193ffb04 	addi	r4,r3,-20
10009a98:	208007c8 	cmpgei	r2,r4,31
10009a9c:	0007883a 	mov	r3,zero
10009aa0:	1000031e 	bne	r2,zero,10009ab0 <__ulp+0x54>
10009aa4:	00a00034 	movhi	r2,32768
10009aa8:	1104d83a 	srl	r2,r2,r4
10009aac:	f800283a 	ret
10009ab0:	00800044 	movi	r2,1
10009ab4:	f800283a 	ret

10009ab8 <__b2d>:
10009ab8:	defffa04 	addi	sp,sp,-24
10009abc:	dc000015 	stw	r16,0(sp)
10009ac0:	24000417 	ldw	r16,16(r4)
10009ac4:	dc800215 	stw	r18,8(sp)
10009ac8:	24800504 	addi	r18,r4,20
10009acc:	802090ba 	slli	r16,r16,2
10009ad0:	dc400115 	stw	r17,4(sp)
10009ad4:	dd000415 	stw	r20,16(sp)
10009ad8:	9421883a 	add	r16,r18,r16
10009adc:	847fff17 	ldw	r17,-4(r16)
10009ae0:	dcc00315 	stw	r19,12(sp)
10009ae4:	2829883a 	mov	r20,r5
10009ae8:	8809883a 	mov	r4,r17
10009aec:	dfc00515 	stw	ra,20(sp)
10009af0:	00092b00 	call	100092b0 <__hi0bits>
10009af4:	01000804 	movi	r4,32
10009af8:	2087c83a 	sub	r3,r4,r2
10009afc:	a0c00015 	stw	r3,0(r20)
10009b00:	10c002c8 	cmpgei	r3,r2,11
10009b04:	84ffff04 	addi	r19,r16,-4
10009b08:	18001f26 	beq	r3,zero,10009b88 <__b2d+0xd0>
10009b0c:	10fffd44 	addi	r3,r2,-11
10009b10:	94c00e2e 	bgeu	r18,r19,10009b4c <__b2d+0x94>
10009b14:	80bffe17 	ldw	r2,-8(r16)
10009b18:	18001226 	beq	r3,zero,10009b64 <__b2d+0xac>
10009b1c:	20c9c83a 	sub	r4,r4,r3
10009b20:	110cd83a 	srl	r6,r2,r4
10009b24:	88e2983a 	sll	r17,r17,r3
10009b28:	10c4983a 	sll	r2,r2,r3
10009b2c:	817ffe04 	addi	r5,r16,-8
10009b30:	8986b03a 	or	r3,r17,r6
10009b34:	18cffc34 	orhi	r3,r3,16368
10009b38:	91400b2e 	bgeu	r18,r5,10009b68 <__b2d+0xb0>
10009b3c:	817ffd17 	ldw	r5,-12(r16)
10009b40:	2908d83a 	srl	r4,r5,r4
10009b44:	1104b03a 	or	r2,r2,r4
10009b48:	00000706 	br	10009b68 <__b2d+0xb0>
10009b4c:	18000426 	beq	r3,zero,10009b60 <__b2d+0xa8>
10009b50:	88c6983a 	sll	r3,r17,r3
10009b54:	0005883a 	mov	r2,zero
10009b58:	18cffc34 	orhi	r3,r3,16368
10009b5c:	00000206 	br	10009b68 <__b2d+0xb0>
10009b60:	0005883a 	mov	r2,zero
10009b64:	88cffc34 	orhi	r3,r17,16368
10009b68:	dfc00517 	ldw	ra,20(sp)
10009b6c:	dd000417 	ldw	r20,16(sp)
10009b70:	dcc00317 	ldw	r19,12(sp)
10009b74:	dc800217 	ldw	r18,8(sp)
10009b78:	dc400117 	ldw	r17,4(sp)
10009b7c:	dc000017 	ldw	r16,0(sp)
10009b80:	dec00604 	addi	sp,sp,24
10009b84:	f800283a 	ret
10009b88:	014002c4 	movi	r5,11
10009b8c:	2889c83a 	sub	r4,r5,r2
10009b90:	8906d83a 	srl	r3,r17,r4
10009b94:	18cffc34 	orhi	r3,r3,16368
10009b98:	94c00536 	bltu	r18,r19,10009bb0 <__b2d+0xf8>
10009b9c:	000b883a 	mov	r5,zero
10009ba0:	10800544 	addi	r2,r2,21
10009ba4:	8884983a 	sll	r2,r17,r2
10009ba8:	1144b03a 	or	r2,r2,r5
10009bac:	003fee06 	br	10009b68 <__b2d+0xb0>
10009bb0:	817ffe17 	ldw	r5,-8(r16)
10009bb4:	290ad83a 	srl	r5,r5,r4
10009bb8:	003ff906 	br	10009ba0 <__b2d+0xe8>

10009bbc <__d2b>:
10009bbc:	defff804 	addi	sp,sp,-32
10009bc0:	dc400315 	stw	r17,12(sp)
10009bc4:	3023883a 	mov	r17,r6
10009bc8:	dd000615 	stw	r20,24(sp)
10009bcc:	dc000215 	stw	r16,8(sp)
10009bd0:	2829883a 	mov	r20,r5
10009bd4:	8820d53a 	srli	r16,r17,20
10009bd8:	01400044 	movi	r5,1
10009bdc:	dcc00515 	stw	r19,20(sp)
10009be0:	dc800415 	stw	r18,16(sp)
10009be4:	dfc00715 	stw	ra,28(sp)
10009be8:	3825883a 	mov	r18,r7
10009bec:	0008fc40 	call	10008fc4 <_Balloc>
10009bf0:	01800434 	movhi	r6,16
10009bf4:	31bfffc4 	addi	r6,r6,-1
10009bf8:	8401ffcc 	andi	r16,r16,2047
10009bfc:	1027883a 	mov	r19,r2
10009c00:	89a2703a 	and	r17,r17,r6
10009c04:	80000126 	beq	r16,zero,10009c0c <__d2b+0x50>
10009c08:	8c400434 	orhi	r17,r17,16
10009c0c:	dc400115 	stw	r17,4(sp)
10009c10:	a0002826 	beq	r20,zero,10009cb4 <__d2b+0xf8>
10009c14:	d809883a 	mov	r4,sp
10009c18:	dd000015 	stw	r20,0(sp)
10009c1c:	00093140 	call	10009314 <__lo0bits>
10009c20:	d8c00117 	ldw	r3,4(sp)
10009c24:	1000171e 	bne	r2,zero,10009c84 <__d2b+0xc8>
10009c28:	d9000017 	ldw	r4,0(sp)
10009c2c:	98c00615 	stw	r3,24(r19)
10009c30:	99000515 	stw	r4,20(r19)
10009c34:	18001d1e 	bne	r3,zero,10009cac <__d2b+0xf0>
10009c38:	04400044 	movi	r17,1
10009c3c:	9c400415 	stw	r17,16(r19)
10009c40:	80002526 	beq	r16,zero,10009cd8 <__d2b+0x11c>
10009c44:	00c00d44 	movi	r3,53
10009c48:	843ef344 	addi	r16,r16,-1075
10009c4c:	80a1883a 	add	r16,r16,r2
10009c50:	1885c83a 	sub	r2,r3,r2
10009c54:	d8c00817 	ldw	r3,32(sp)
10009c58:	94000015 	stw	r16,0(r18)
10009c5c:	18800015 	stw	r2,0(r3)
10009c60:	9805883a 	mov	r2,r19
10009c64:	dfc00717 	ldw	ra,28(sp)
10009c68:	dd000617 	ldw	r20,24(sp)
10009c6c:	dcc00517 	ldw	r19,20(sp)
10009c70:	dc800417 	ldw	r18,16(sp)
10009c74:	dc400317 	ldw	r17,12(sp)
10009c78:	dc000217 	ldw	r16,8(sp)
10009c7c:	dec00804 	addi	sp,sp,32
10009c80:	f800283a 	ret
10009c84:	01000804 	movi	r4,32
10009c88:	2089c83a 	sub	r4,r4,r2
10009c8c:	1908983a 	sll	r4,r3,r4
10009c90:	d9400017 	ldw	r5,0(sp)
10009c94:	1886d83a 	srl	r3,r3,r2
10009c98:	2148b03a 	or	r4,r4,r5
10009c9c:	99000515 	stw	r4,20(r19)
10009ca0:	d8c00115 	stw	r3,4(sp)
10009ca4:	98c00615 	stw	r3,24(r19)
10009ca8:	183fe326 	beq	r3,zero,10009c38 <__d2b+0x7c>
10009cac:	04400084 	movi	r17,2
10009cb0:	003fe206 	br	10009c3c <__d2b+0x80>
10009cb4:	d9000104 	addi	r4,sp,4
10009cb8:	00093140 	call	10009314 <__lo0bits>
10009cbc:	00c00044 	movi	r3,1
10009cc0:	98c00415 	stw	r3,16(r19)
10009cc4:	d8c00117 	ldw	r3,4(sp)
10009cc8:	10800804 	addi	r2,r2,32
10009ccc:	04400044 	movi	r17,1
10009cd0:	98c00515 	stw	r3,20(r19)
10009cd4:	803fdb1e 	bne	r16,zero,10009c44 <__d2b+0x88>
10009cd8:	880690ba 	slli	r3,r17,2
10009cdc:	10bef384 	addi	r2,r2,-1074
10009ce0:	8822917a 	slli	r17,r17,5
10009ce4:	98c7883a 	add	r3,r19,r3
10009ce8:	19000417 	ldw	r4,16(r3)
10009cec:	90800015 	stw	r2,0(r18)
10009cf0:	00092b00 	call	100092b0 <__hi0bits>
10009cf4:	88a3c83a 	sub	r17,r17,r2
10009cf8:	d8800817 	ldw	r2,32(sp)
10009cfc:	14400015 	stw	r17,0(r2)
10009d00:	003fd706 	br	10009c60 <__d2b+0xa4>

10009d04 <__ratio>:
10009d04:	defff904 	addi	sp,sp,-28
10009d08:	dc400315 	stw	r17,12(sp)
10009d0c:	2823883a 	mov	r17,r5
10009d10:	d80b883a 	mov	r5,sp
10009d14:	dfc00615 	stw	ra,24(sp)
10009d18:	dcc00515 	stw	r19,20(sp)
10009d1c:	dc800415 	stw	r18,16(sp)
10009d20:	2027883a 	mov	r19,r4
10009d24:	dc000215 	stw	r16,8(sp)
10009d28:	0009ab80 	call	10009ab8 <__b2d>
10009d2c:	d9400104 	addi	r5,sp,4
10009d30:	8809883a 	mov	r4,r17
10009d34:	1025883a 	mov	r18,r2
10009d38:	1821883a 	mov	r16,r3
10009d3c:	0009ab80 	call	10009ab8 <__b2d>
10009d40:	89400417 	ldw	r5,16(r17)
10009d44:	99000417 	ldw	r4,16(r19)
10009d48:	d9800117 	ldw	r6,4(sp)
10009d4c:	2149c83a 	sub	r4,r4,r5
10009d50:	d9400017 	ldw	r5,0(sp)
10009d54:	2008917a 	slli	r4,r4,5
10009d58:	298bc83a 	sub	r5,r5,r6
10009d5c:	2149883a 	add	r4,r4,r5
10009d60:	01000e0e 	bge	zero,r4,10009d9c <__ratio+0x98>
10009d64:	2008953a 	slli	r4,r4,20
10009d68:	2421883a 	add	r16,r4,r16
10009d6c:	100d883a 	mov	r6,r2
10009d70:	180f883a 	mov	r7,r3
10009d74:	9009883a 	mov	r4,r18
10009d78:	800b883a 	mov	r5,r16
10009d7c:	000dc300 	call	1000dc30 <__divdf3>
10009d80:	dfc00617 	ldw	ra,24(sp)
10009d84:	dcc00517 	ldw	r19,20(sp)
10009d88:	dc800417 	ldw	r18,16(sp)
10009d8c:	dc400317 	ldw	r17,12(sp)
10009d90:	dc000217 	ldw	r16,8(sp)
10009d94:	dec00704 	addi	sp,sp,28
10009d98:	f800283a 	ret
10009d9c:	017ffc34 	movhi	r5,65520
10009da0:	2149383a 	mul	r4,r4,r5
10009da4:	20c7883a 	add	r3,r4,r3
10009da8:	003ff006 	br	10009d6c <__ratio+0x68>

10009dac <_mprec_log10>:
10009dac:	defffe04 	addi	sp,sp,-8
10009db0:	dc000015 	stw	r16,0(sp)
10009db4:	dfc00115 	stw	ra,4(sp)
10009db8:	20800608 	cmpgei	r2,r4,24
10009dbc:	2021883a 	mov	r16,r4
10009dc0:	10000d26 	beq	r2,zero,10009df8 <_mprec_log10+0x4c>
10009dc4:	0005883a 	mov	r2,zero
10009dc8:	00cffc34 	movhi	r3,16368
10009dcc:	843fffc4 	addi	r16,r16,-1
10009dd0:	000d883a 	mov	r6,zero
10009dd4:	01d00934 	movhi	r7,16420
10009dd8:	1009883a 	mov	r4,r2
10009ddc:	180b883a 	mov	r5,r3
10009de0:	000e7380 	call	1000e738 <__muldf3>
10009de4:	803ff91e 	bne	r16,zero,10009dcc <_mprec_log10+0x20>
10009de8:	dfc00117 	ldw	ra,4(sp)
10009dec:	dc000017 	ldw	r16,0(sp)
10009df0:	dec00204 	addi	sp,sp,8
10009df4:	f800283a 	ret
10009df8:	202090fa 	slli	r16,r4,3
10009dfc:	00840074 	movhi	r2,4097
10009e00:	108b0204 	addi	r2,r2,11272
10009e04:	1421883a 	add	r16,r2,r16
10009e08:	80800017 	ldw	r2,0(r16)
10009e0c:	80c00117 	ldw	r3,4(r16)
10009e10:	dfc00117 	ldw	ra,4(sp)
10009e14:	dc000017 	ldw	r16,0(sp)
10009e18:	dec00204 	addi	sp,sp,8
10009e1c:	f800283a 	ret

10009e20 <__copybits>:
10009e20:	29ffffc4 	addi	r7,r5,-1
10009e24:	380fd17a 	srai	r7,r7,5
10009e28:	31400417 	ldw	r5,16(r6)
10009e2c:	30800504 	addi	r2,r6,20
10009e30:	39c00044 	addi	r7,r7,1
10009e34:	280a90ba 	slli	r5,r5,2
10009e38:	380e90ba 	slli	r7,r7,2
10009e3c:	114b883a 	add	r5,r2,r5
10009e40:	21cf883a 	add	r7,r4,r7
10009e44:	11400c2e 	bgeu	r2,r5,10009e78 <__copybits+0x58>
10009e48:	2007883a 	mov	r3,r4
10009e4c:	10800104 	addi	r2,r2,4
10009e50:	123fff17 	ldw	r8,-4(r2)
10009e54:	18c00104 	addi	r3,r3,4
10009e58:	1a3fff15 	stw	r8,-4(r3)
10009e5c:	117ffb36 	bltu	r2,r5,10009e4c <__copybits+0x2c>
10009e60:	2985c83a 	sub	r2,r5,r6
10009e64:	10bffac4 	addi	r2,r2,-21
10009e68:	1004d0ba 	srli	r2,r2,2
10009e6c:	10800044 	addi	r2,r2,1
10009e70:	100490ba 	slli	r2,r2,2
10009e74:	2089883a 	add	r4,r4,r2
10009e78:	21c0032e 	bgeu	r4,r7,10009e88 <__copybits+0x68>
10009e7c:	21000104 	addi	r4,r4,4
10009e80:	203fff15 	stw	zero,-4(r4)
10009e84:	21fffd36 	bltu	r4,r7,10009e7c <__copybits+0x5c>
10009e88:	f800283a 	ret

10009e8c <__any_on>:
10009e8c:	20800417 	ldw	r2,16(r4)
10009e90:	280dd17a 	srai	r6,r5,5
10009e94:	21000504 	addi	r4,r4,20
10009e98:	11800c0e 	bge	r2,r6,10009ecc <__any_on+0x40>
10009e9c:	100690ba 	slli	r3,r2,2
10009ea0:	20c7883a 	add	r3,r4,r3
10009ea4:	20c0142e 	bgeu	r4,r3,10009ef8 <__any_on+0x6c>
10009ea8:	18bfff17 	ldw	r2,-4(r3)
10009eac:	18ffff04 	addi	r3,r3,-4
10009eb0:	1000041e 	bne	r2,zero,10009ec4 <__any_on+0x38>
10009eb4:	20c00f2e 	bgeu	r4,r3,10009ef4 <__any_on+0x68>
10009eb8:	18ffff04 	addi	r3,r3,-4
10009ebc:	19400017 	ldw	r5,0(r3)
10009ec0:	283ffc26 	beq	r5,zero,10009eb4 <__any_on+0x28>
10009ec4:	00800044 	movi	r2,1
10009ec8:	f800283a 	ret
10009ecc:	300690ba 	slli	r3,r6,2
10009ed0:	20c7883a 	add	r3,r4,r3
10009ed4:	30bff30e 	bge	r6,r2,10009ea4 <__any_on+0x18>
10009ed8:	294007cc 	andi	r5,r5,31
10009edc:	283ff126 	beq	r5,zero,10009ea4 <__any_on+0x18>
10009ee0:	19800017 	ldw	r6,0(r3)
10009ee4:	3144d83a 	srl	r2,r6,r5
10009ee8:	114a983a 	sll	r5,r2,r5
10009eec:	317ff51e 	bne	r6,r5,10009ec4 <__any_on+0x38>
10009ef0:	003fec06 	br	10009ea4 <__any_on+0x18>
10009ef4:	f800283a 	ret
10009ef8:	0005883a 	mov	r2,zero
10009efc:	f800283a 	ret

10009f00 <_realloc_r>:
10009f00:	defff504 	addi	sp,sp,-44
10009f04:	dcc00415 	stw	r19,16(sp)
10009f08:	dfc00a15 	stw	ra,40(sp)
10009f0c:	df000915 	stw	fp,36(sp)
10009f10:	ddc00815 	stw	r23,32(sp)
10009f14:	dd800715 	stw	r22,28(sp)
10009f18:	dd400615 	stw	r21,24(sp)
10009f1c:	dd000515 	stw	r20,20(sp)
10009f20:	dc800315 	stw	r18,12(sp)
10009f24:	dc400215 	stw	r17,8(sp)
10009f28:	dc000115 	stw	r16,4(sp)
10009f2c:	3027883a 	mov	r19,r6
10009f30:	28008b26 	beq	r5,zero,1000a160 <_realloc_r+0x260>
10009f34:	282d883a 	mov	r22,r5
10009f38:	202b883a 	mov	r21,r4
10009f3c:	9c0002c4 	addi	r16,r19,11
10009f40:	000ff380 	call	1000ff38 <__malloc_lock>
10009f44:	808005f0 	cmpltui	r2,r16,23
10009f48:	1000521e 	bne	r2,zero,1000a094 <_realloc_r+0x194>
10009f4c:	017ffe04 	movi	r5,-8
10009f50:	8160703a 	and	r16,r16,r5
10009f54:	8007883a 	mov	r3,r16
10009f58:	80005116 	blt	r16,zero,1000a0a0 <_realloc_r+0x1a0>
10009f5c:	84c05036 	bltu	r16,r19,1000a0a0 <_realloc_r+0x1a0>
10009f60:	b0bfff17 	ldw	r2,-4(r22)
10009f64:	017fff04 	movi	r5,-4
10009f68:	b4bffe04 	addi	r18,r22,-8
10009f6c:	1162703a 	and	r17,r2,r5
10009f70:	9469883a 	add	r20,r18,r17
10009f74:	88c0390e 	bge	r17,r3,1000a05c <_realloc_r+0x15c>
10009f78:	07040074 	movhi	fp,4097
10009f7c:	e70ec704 	addi	fp,fp,15132
10009f80:	e2000217 	ldw	r8,8(fp)
10009f84:	a1000117 	ldw	r4,4(r20)
10009f88:	45008e26 	beq	r8,r20,1000a1c4 <_realloc_r+0x2c4>
10009f8c:	01bfff84 	movi	r6,-2
10009f90:	218c703a 	and	r6,r4,r6
10009f94:	a18d883a 	add	r6,r20,r6
10009f98:	31800117 	ldw	r6,4(r6)
10009f9c:	3180004c 	andi	r6,r6,1
10009fa0:	30004f1e 	bne	r6,zero,1000a0e0 <_realloc_r+0x1e0>
10009fa4:	2148703a 	and	r4,r4,r5
10009fa8:	890b883a 	add	r5,r17,r4
10009fac:	28c0cb0e 	bge	r5,r3,1000a2dc <_realloc_r+0x3dc>
10009fb0:	1080004c 	andi	r2,r2,1
10009fb4:	10004c1e 	bne	r2,zero,1000a0e8 <_realloc_r+0x1e8>
10009fb8:	b1fffe17 	ldw	r7,-8(r22)
10009fbc:	00bfff04 	movi	r2,-4
10009fc0:	91cfc83a 	sub	r7,r18,r7
10009fc4:	39400117 	ldw	r5,4(r7)
10009fc8:	288a703a 	and	r5,r5,r2
10009fcc:	a0000426 	beq	r20,zero,10009fe0 <_realloc_r+0xe0>
10009fd0:	896f883a 	add	r23,r17,r5
10009fd4:	b92f883a 	add	r23,r23,r4
10009fd8:	4500cb26 	beq	r8,r20,1000a308 <_realloc_r+0x408>
10009fdc:	b8c0930e 	bge	r23,r3,1000a22c <_realloc_r+0x32c>
10009fe0:	38004126 	beq	r7,zero,1000a0e8 <_realloc_r+0x1e8>
10009fe4:	896f883a 	add	r23,r17,r5
10009fe8:	b8c03f16 	blt	r23,r3,1000a0e8 <_realloc_r+0x1e8>
10009fec:	38c00217 	ldw	r3,8(r7)
10009ff0:	38800317 	ldw	r2,12(r7)
10009ff4:	89bfff04 	addi	r6,r17,-4
10009ff8:	31000968 	cmpgeui	r4,r6,37
10009ffc:	18800315 	stw	r2,12(r3)
1000a000:	10c00215 	stw	r3,8(r2)
1000a004:	3de9883a 	add	r20,r7,r23
1000a008:	38c00204 	addi	r3,r7,8
1000a00c:	2000f81e 	bne	r4,zero,1000a3f0 <_realloc_r+0x4f0>
1000a010:	30800530 	cmpltui	r2,r6,20
1000a014:	b1000017 	ldw	r4,0(r22)
1000a018:	1000eb1e 	bne	r2,zero,1000a3c8 <_realloc_r+0x4c8>
1000a01c:	39000215 	stw	r4,8(r7)
1000a020:	b1000117 	ldw	r4,4(r22)
1000a024:	30800728 	cmpgeui	r2,r6,28
1000a028:	39000315 	stw	r4,12(r7)
1000a02c:	1001041e 	bne	r2,zero,1000a440 <_realloc_r+0x540>
1000a030:	b1000217 	ldw	r4,8(r22)
1000a034:	38800404 	addi	r2,r7,16
1000a038:	b5800204 	addi	r22,r22,8
1000a03c:	11000015 	stw	r4,0(r2)
1000a040:	b1000117 	ldw	r4,4(r22)
1000a044:	b823883a 	mov	r17,r23
1000a048:	3825883a 	mov	r18,r7
1000a04c:	11000115 	stw	r4,4(r2)
1000a050:	b1000217 	ldw	r4,8(r22)
1000a054:	182d883a 	mov	r22,r3
1000a058:	11000215 	stw	r4,8(r2)
1000a05c:	91800117 	ldw	r6,4(r18)
1000a060:	8c05c83a 	sub	r2,r17,r16
1000a064:	10c00430 	cmpltui	r3,r2,16
1000a068:	3180004c 	andi	r6,r6,1
1000a06c:	18004926 	beq	r3,zero,1000a194 <_realloc_r+0x294>
1000a070:	898cb03a 	or	r6,r17,r6
1000a074:	91800115 	stw	r6,4(r18)
1000a078:	a0800117 	ldw	r2,4(r20)
1000a07c:	10800054 	ori	r2,r2,1
1000a080:	a0800115 	stw	r2,4(r20)
1000a084:	a809883a 	mov	r4,r21
1000a088:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000a08c:	b027883a 	mov	r19,r22
1000a090:	00000606 	br	1000a0ac <_realloc_r+0x1ac>
1000a094:	04000404 	movi	r16,16
1000a098:	00c00404 	movi	r3,16
1000a09c:	84ffb02e 	bgeu	r16,r19,10009f60 <_realloc_r+0x60>
1000a0a0:	00800304 	movi	r2,12
1000a0a4:	a8800015 	stw	r2,0(r21)
1000a0a8:	0027883a 	mov	r19,zero
1000a0ac:	9805883a 	mov	r2,r19
1000a0b0:	dfc00a17 	ldw	ra,40(sp)
1000a0b4:	df000917 	ldw	fp,36(sp)
1000a0b8:	ddc00817 	ldw	r23,32(sp)
1000a0bc:	dd800717 	ldw	r22,28(sp)
1000a0c0:	dd400617 	ldw	r21,24(sp)
1000a0c4:	dd000517 	ldw	r20,20(sp)
1000a0c8:	dcc00417 	ldw	r19,16(sp)
1000a0cc:	dc800317 	ldw	r18,12(sp)
1000a0d0:	dc400217 	ldw	r17,8(sp)
1000a0d4:	dc000117 	ldw	r16,4(sp)
1000a0d8:	dec00b04 	addi	sp,sp,44
1000a0dc:	f800283a 	ret
1000a0e0:	1080004c 	andi	r2,r2,1
1000a0e4:	10007826 	beq	r2,zero,1000a2c8 <_realloc_r+0x3c8>
1000a0e8:	980b883a 	mov	r5,r19
1000a0ec:	a809883a 	mov	r4,r21
1000a0f0:	00084cc0 	call	100084cc <_malloc_r>
1000a0f4:	1027883a 	mov	r19,r2
1000a0f8:	10001626 	beq	r2,zero,1000a154 <_realloc_r+0x254>
1000a0fc:	b0bfff17 	ldw	r2,-4(r22)
1000a100:	013fff84 	movi	r4,-2
1000a104:	98fffe04 	addi	r3,r19,-8
1000a108:	1104703a 	and	r2,r2,r4
1000a10c:	9085883a 	add	r2,r18,r2
1000a110:	10c06726 	beq	r2,r3,1000a2b0 <_realloc_r+0x3b0>
1000a114:	89bfff04 	addi	r6,r17,-4
1000a118:	30800968 	cmpgeui	r2,r6,37
1000a11c:	1000761e 	bne	r2,zero,1000a2f8 <_realloc_r+0x3f8>
1000a120:	30800530 	cmpltui	r2,r6,20
1000a124:	b1000017 	ldw	r4,0(r22)
1000a128:	10003726 	beq	r2,zero,1000a208 <_realloc_r+0x308>
1000a12c:	9805883a 	mov	r2,r19
1000a130:	b007883a 	mov	r3,r22
1000a134:	11000015 	stw	r4,0(r2)
1000a138:	19000117 	ldw	r4,4(r3)
1000a13c:	11000115 	stw	r4,4(r2)
1000a140:	18c00217 	ldw	r3,8(r3)
1000a144:	10c00215 	stw	r3,8(r2)
1000a148:	b00b883a 	mov	r5,r22
1000a14c:	a809883a 	mov	r4,r21
1000a150:	00079c00 	call	100079c0 <_free_r>
1000a154:	a809883a 	mov	r4,r21
1000a158:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000a15c:	003fd306 	br	1000a0ac <_realloc_r+0x1ac>
1000a160:	300b883a 	mov	r5,r6
1000a164:	dfc00a17 	ldw	ra,40(sp)
1000a168:	df000917 	ldw	fp,36(sp)
1000a16c:	ddc00817 	ldw	r23,32(sp)
1000a170:	dd800717 	ldw	r22,28(sp)
1000a174:	dd400617 	ldw	r21,24(sp)
1000a178:	dd000517 	ldw	r20,20(sp)
1000a17c:	dcc00417 	ldw	r19,16(sp)
1000a180:	dc800317 	ldw	r18,12(sp)
1000a184:	dc400217 	ldw	r17,8(sp)
1000a188:	dc000117 	ldw	r16,4(sp)
1000a18c:	dec00b04 	addi	sp,sp,44
1000a190:	00084cc1 	jmpi	100084cc <_malloc_r>
1000a194:	340cb03a 	or	r6,r6,r16
1000a198:	91800115 	stw	r6,4(r18)
1000a19c:	940b883a 	add	r5,r18,r16
1000a1a0:	10800054 	ori	r2,r2,1
1000a1a4:	28800115 	stw	r2,4(r5)
1000a1a8:	a0800117 	ldw	r2,4(r20)
1000a1ac:	29400204 	addi	r5,r5,8
1000a1b0:	a809883a 	mov	r4,r21
1000a1b4:	10800054 	ori	r2,r2,1
1000a1b8:	a0800115 	stw	r2,4(r20)
1000a1bc:	00079c00 	call	100079c0 <_free_r>
1000a1c0:	003fb006 	br	1000a084 <_realloc_r+0x184>
1000a1c4:	2148703a 	and	r4,r4,r5
1000a1c8:	890b883a 	add	r5,r17,r4
1000a1cc:	81800404 	addi	r6,r16,16
1000a1d0:	29bf7716 	blt	r5,r6,10009fb0 <_realloc_r+0xb0>
1000a1d4:	9425883a 	add	r18,r18,r16
1000a1d8:	2c05c83a 	sub	r2,r5,r16
1000a1dc:	e4800215 	stw	r18,8(fp)
1000a1e0:	10800054 	ori	r2,r2,1
1000a1e4:	90800115 	stw	r2,4(r18)
1000a1e8:	b0bfff17 	ldw	r2,-4(r22)
1000a1ec:	a809883a 	mov	r4,r21
1000a1f0:	b027883a 	mov	r19,r22
1000a1f4:	1080004c 	andi	r2,r2,1
1000a1f8:	1420b03a 	or	r16,r2,r16
1000a1fc:	b43fff15 	stw	r16,-4(r22)
1000a200:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000a204:	003fa906 	br	1000a0ac <_realloc_r+0x1ac>
1000a208:	99000015 	stw	r4,0(r19)
1000a20c:	b0c00117 	ldw	r3,4(r22)
1000a210:	30800728 	cmpgeui	r2,r6,28
1000a214:	98c00115 	stw	r3,4(r19)
1000a218:	1000611e 	bne	r2,zero,1000a3a0 <_realloc_r+0x4a0>
1000a21c:	b0c00204 	addi	r3,r22,8
1000a220:	98800204 	addi	r2,r19,8
1000a224:	b1000217 	ldw	r4,8(r22)
1000a228:	003fc206 	br	1000a134 <_realloc_r+0x234>
1000a22c:	a0800317 	ldw	r2,12(r20)
1000a230:	a0c00217 	ldw	r3,8(r20)
1000a234:	89bfff04 	addi	r6,r17,-4
1000a238:	31000968 	cmpgeui	r4,r6,37
1000a23c:	18800315 	stw	r2,12(r3)
1000a240:	10c00215 	stw	r3,8(r2)
1000a244:	38c00217 	ldw	r3,8(r7)
1000a248:	38800317 	ldw	r2,12(r7)
1000a24c:	3a000204 	addi	r8,r7,8
1000a250:	3de9883a 	add	r20,r7,r23
1000a254:	18800315 	stw	r2,12(r3)
1000a258:	10c00215 	stw	r3,8(r2)
1000a25c:	20006f1e 	bne	r4,zero,1000a41c <_realloc_r+0x51c>
1000a260:	30800530 	cmpltui	r2,r6,20
1000a264:	b0c00017 	ldw	r3,0(r22)
1000a268:	10006a1e 	bne	r2,zero,1000a414 <_realloc_r+0x514>
1000a26c:	38c00215 	stw	r3,8(r7)
1000a270:	b0c00117 	ldw	r3,4(r22)
1000a274:	30800728 	cmpgeui	r2,r6,28
1000a278:	38c00315 	stw	r3,12(r7)
1000a27c:	10007a1e 	bne	r2,zero,1000a468 <_realloc_r+0x568>
1000a280:	b0c00217 	ldw	r3,8(r22)
1000a284:	38800404 	addi	r2,r7,16
1000a288:	b5800204 	addi	r22,r22,8
1000a28c:	10c00015 	stw	r3,0(r2)
1000a290:	b0c00117 	ldw	r3,4(r22)
1000a294:	b823883a 	mov	r17,r23
1000a298:	3825883a 	mov	r18,r7
1000a29c:	10c00115 	stw	r3,4(r2)
1000a2a0:	b0c00217 	ldw	r3,8(r22)
1000a2a4:	402d883a 	mov	r22,r8
1000a2a8:	10c00215 	stw	r3,8(r2)
1000a2ac:	003f6b06 	br	1000a05c <_realloc_r+0x15c>
1000a2b0:	98bfff17 	ldw	r2,-4(r19)
1000a2b4:	00ffff04 	movi	r3,-4
1000a2b8:	10c4703a 	and	r2,r2,r3
1000a2bc:	88a3883a 	add	r17,r17,r2
1000a2c0:	9469883a 	add	r20,r18,r17
1000a2c4:	003f6506 	br	1000a05c <_realloc_r+0x15c>
1000a2c8:	b1fffe17 	ldw	r7,-8(r22)
1000a2cc:	91cfc83a 	sub	r7,r18,r7
1000a2d0:	39000117 	ldw	r4,4(r7)
1000a2d4:	214a703a 	and	r5,r4,r5
1000a2d8:	003f4106 	br	10009fe0 <_realloc_r+0xe0>
1000a2dc:	a0800317 	ldw	r2,12(r20)
1000a2e0:	a0c00217 	ldw	r3,8(r20)
1000a2e4:	2823883a 	mov	r17,r5
1000a2e8:	9169883a 	add	r20,r18,r5
1000a2ec:	18800315 	stw	r2,12(r3)
1000a2f0:	10c00215 	stw	r3,8(r2)
1000a2f4:	003f5906 	br	1000a05c <_realloc_r+0x15c>
1000a2f8:	b00b883a 	mov	r5,r22
1000a2fc:	9809883a 	mov	r4,r19
1000a300:	0008da80 	call	10008da8 <memmove>
1000a304:	003f9006 	br	1000a148 <_realloc_r+0x248>
1000a308:	80800404 	addi	r2,r16,16
1000a30c:	b8bf3416 	blt	r23,r2,10009fe0 <_realloc_r+0xe0>
1000a310:	38800317 	ldw	r2,12(r7)
1000a314:	38c00217 	ldw	r3,8(r7)
1000a318:	89bfff04 	addi	r6,r17,-4
1000a31c:	31000968 	cmpgeui	r4,r6,37
1000a320:	18800315 	stw	r2,12(r3)
1000a324:	10c00215 	stw	r3,8(r2)
1000a328:	3cc00204 	addi	r19,r7,8
1000a32c:	20005a1e 	bne	r4,zero,1000a498 <_realloc_r+0x598>
1000a330:	30800530 	cmpltui	r2,r6,20
1000a334:	b0c00017 	ldw	r3,0(r22)
1000a338:	1000551e 	bne	r2,zero,1000a490 <_realloc_r+0x590>
1000a33c:	38c00215 	stw	r3,8(r7)
1000a340:	b0c00117 	ldw	r3,4(r22)
1000a344:	30800728 	cmpgeui	r2,r6,28
1000a348:	38c00315 	stw	r3,12(r7)
1000a34c:	1000661e 	bne	r2,zero,1000a4e8 <_realloc_r+0x5e8>
1000a350:	b0c00217 	ldw	r3,8(r22)
1000a354:	38800404 	addi	r2,r7,16
1000a358:	b5800204 	addi	r22,r22,8
1000a35c:	10c00015 	stw	r3,0(r2)
1000a360:	b0c00117 	ldw	r3,4(r22)
1000a364:	10c00115 	stw	r3,4(r2)
1000a368:	b0c00217 	ldw	r3,8(r22)
1000a36c:	10c00215 	stw	r3,8(r2)
1000a370:	3c07883a 	add	r3,r7,r16
1000a374:	bc05c83a 	sub	r2,r23,r16
1000a378:	e0c00215 	stw	r3,8(fp)
1000a37c:	10800054 	ori	r2,r2,1
1000a380:	18800115 	stw	r2,4(r3)
1000a384:	38800117 	ldw	r2,4(r7)
1000a388:	a809883a 	mov	r4,r21
1000a38c:	1080004c 	andi	r2,r2,1
1000a390:	1420b03a 	or	r16,r2,r16
1000a394:	3c000115 	stw	r16,4(r7)
1000a398:	000ff5c0 	call	1000ff5c <__malloc_unlock>
1000a39c:	003f4306 	br	1000a0ac <_realloc_r+0x1ac>
1000a3a0:	b0800217 	ldw	r2,8(r22)
1000a3a4:	31800920 	cmpeqi	r6,r6,36
1000a3a8:	98800215 	stw	r2,8(r19)
1000a3ac:	b0800317 	ldw	r2,12(r22)
1000a3b0:	98800315 	stw	r2,12(r19)
1000a3b4:	3000061e 	bne	r6,zero,1000a3d0 <_realloc_r+0x4d0>
1000a3b8:	b0c00404 	addi	r3,r22,16
1000a3bc:	98800404 	addi	r2,r19,16
1000a3c0:	b1000417 	ldw	r4,16(r22)
1000a3c4:	003f5b06 	br	1000a134 <_realloc_r+0x234>
1000a3c8:	1805883a 	mov	r2,r3
1000a3cc:	003f1b06 	br	1000a03c <_realloc_r+0x13c>
1000a3d0:	b1000417 	ldw	r4,16(r22)
1000a3d4:	b0c00604 	addi	r3,r22,24
1000a3d8:	98800604 	addi	r2,r19,24
1000a3dc:	99000415 	stw	r4,16(r19)
1000a3e0:	b1000517 	ldw	r4,20(r22)
1000a3e4:	99000515 	stw	r4,20(r19)
1000a3e8:	b1000617 	ldw	r4,24(r22)
1000a3ec:	003f5106 	br	1000a134 <_realloc_r+0x234>
1000a3f0:	b00b883a 	mov	r5,r22
1000a3f4:	1809883a 	mov	r4,r3
1000a3f8:	d9c00015 	stw	r7,0(sp)
1000a3fc:	0008da80 	call	10008da8 <memmove>
1000a400:	d9c00017 	ldw	r7,0(sp)
1000a404:	102d883a 	mov	r22,r2
1000a408:	b823883a 	mov	r17,r23
1000a40c:	3825883a 	mov	r18,r7
1000a410:	003f1206 	br	1000a05c <_realloc_r+0x15c>
1000a414:	4005883a 	mov	r2,r8
1000a418:	003f9c06 	br	1000a28c <_realloc_r+0x38c>
1000a41c:	b00b883a 	mov	r5,r22
1000a420:	4009883a 	mov	r4,r8
1000a424:	d9c00015 	stw	r7,0(sp)
1000a428:	0008da80 	call	10008da8 <memmove>
1000a42c:	d9c00017 	ldw	r7,0(sp)
1000a430:	102d883a 	mov	r22,r2
1000a434:	b823883a 	mov	r17,r23
1000a438:	3825883a 	mov	r18,r7
1000a43c:	003f0706 	br	1000a05c <_realloc_r+0x15c>
1000a440:	b0800217 	ldw	r2,8(r22)
1000a444:	31800920 	cmpeqi	r6,r6,36
1000a448:	38800415 	stw	r2,16(r7)
1000a44c:	b0800317 	ldw	r2,12(r22)
1000a450:	38800515 	stw	r2,20(r7)
1000a454:	b1000417 	ldw	r4,16(r22)
1000a458:	3000151e 	bne	r6,zero,1000a4b0 <_realloc_r+0x5b0>
1000a45c:	38800604 	addi	r2,r7,24
1000a460:	b5800404 	addi	r22,r22,16
1000a464:	003ef506 	br	1000a03c <_realloc_r+0x13c>
1000a468:	b0800217 	ldw	r2,8(r22)
1000a46c:	31800920 	cmpeqi	r6,r6,36
1000a470:	38800415 	stw	r2,16(r7)
1000a474:	b0800317 	ldw	r2,12(r22)
1000a478:	38800515 	stw	r2,20(r7)
1000a47c:	b0c00417 	ldw	r3,16(r22)
1000a480:	3000121e 	bne	r6,zero,1000a4cc <_realloc_r+0x5cc>
1000a484:	38800604 	addi	r2,r7,24
1000a488:	b5800404 	addi	r22,r22,16
1000a48c:	003f7f06 	br	1000a28c <_realloc_r+0x38c>
1000a490:	9805883a 	mov	r2,r19
1000a494:	003fb106 	br	1000a35c <_realloc_r+0x45c>
1000a498:	b00b883a 	mov	r5,r22
1000a49c:	9809883a 	mov	r4,r19
1000a4a0:	d9c00015 	stw	r7,0(sp)
1000a4a4:	0008da80 	call	10008da8 <memmove>
1000a4a8:	d9c00017 	ldw	r7,0(sp)
1000a4ac:	003fb006 	br	1000a370 <_realloc_r+0x470>
1000a4b0:	b5800604 	addi	r22,r22,24
1000a4b4:	39000615 	stw	r4,24(r7)
1000a4b8:	b13fff17 	ldw	r4,-4(r22)
1000a4bc:	38800804 	addi	r2,r7,32
1000a4c0:	39000715 	stw	r4,28(r7)
1000a4c4:	b1000017 	ldw	r4,0(r22)
1000a4c8:	003edc06 	br	1000a03c <_realloc_r+0x13c>
1000a4cc:	b5800604 	addi	r22,r22,24
1000a4d0:	38c00615 	stw	r3,24(r7)
1000a4d4:	b0ffff17 	ldw	r3,-4(r22)
1000a4d8:	38800804 	addi	r2,r7,32
1000a4dc:	38c00715 	stw	r3,28(r7)
1000a4e0:	b0c00017 	ldw	r3,0(r22)
1000a4e4:	003f6906 	br	1000a28c <_realloc_r+0x38c>
1000a4e8:	b0800217 	ldw	r2,8(r22)
1000a4ec:	31800920 	cmpeqi	r6,r6,36
1000a4f0:	38800415 	stw	r2,16(r7)
1000a4f4:	b0800317 	ldw	r2,12(r22)
1000a4f8:	38800515 	stw	r2,20(r7)
1000a4fc:	b0c00417 	ldw	r3,16(r22)
1000a500:	3000031e 	bne	r6,zero,1000a510 <_realloc_r+0x610>
1000a504:	38800604 	addi	r2,r7,24
1000a508:	b5800404 	addi	r22,r22,16
1000a50c:	003f9306 	br	1000a35c <_realloc_r+0x45c>
1000a510:	b5800604 	addi	r22,r22,24
1000a514:	38c00615 	stw	r3,24(r7)
1000a518:	b0ffff17 	ldw	r3,-4(r22)
1000a51c:	38800804 	addi	r2,r7,32
1000a520:	38c00715 	stw	r3,28(r7)
1000a524:	b0c00017 	ldw	r3,0(r22)
1000a528:	003f8c06 	br	1000a35c <_realloc_r+0x45c>

1000a52c <_sbrk_r>:
1000a52c:	defffe04 	addi	sp,sp,-8
1000a530:	dc000015 	stw	r16,0(sp)
1000a534:	00840074 	movhi	r2,4097
1000a538:	2021883a 	mov	r16,r4
1000a53c:	2809883a 	mov	r4,r5
1000a540:	dfc00115 	stw	ra,4(sp)
1000a544:	101d4015 	stw	zero,29952(r2)
1000a548:	00101100 	call	10010110 <sbrk>
1000a54c:	10ffffd8 	cmpnei	r3,r2,-1
1000a550:	18000426 	beq	r3,zero,1000a564 <_sbrk_r+0x38>
1000a554:	dfc00117 	ldw	ra,4(sp)
1000a558:	dc000017 	ldw	r16,0(sp)
1000a55c:	dec00204 	addi	sp,sp,8
1000a560:	f800283a 	ret
1000a564:	00c40074 	movhi	r3,4097
1000a568:	18dd4017 	ldw	r3,29952(r3)
1000a56c:	183ff926 	beq	r3,zero,1000a554 <_sbrk_r+0x28>
1000a570:	80c00015 	stw	r3,0(r16)
1000a574:	dfc00117 	ldw	ra,4(sp)
1000a578:	dc000017 	ldw	r16,0(sp)
1000a57c:	dec00204 	addi	sp,sp,8
1000a580:	f800283a 	ret

1000a584 <__sread>:
1000a584:	defffe04 	addi	sp,sp,-8
1000a588:	dc000015 	stw	r16,0(sp)
1000a58c:	2821883a 	mov	r16,r5
1000a590:	2940038f 	ldh	r5,14(r5)
1000a594:	dfc00115 	stw	ra,4(sp)
1000a598:	000c23c0 	call	1000c23c <_read_r>
1000a59c:	10000716 	blt	r2,zero,1000a5bc <__sread+0x38>
1000a5a0:	80c01417 	ldw	r3,80(r16)
1000a5a4:	1887883a 	add	r3,r3,r2
1000a5a8:	80c01415 	stw	r3,80(r16)
1000a5ac:	dfc00117 	ldw	ra,4(sp)
1000a5b0:	dc000017 	ldw	r16,0(sp)
1000a5b4:	dec00204 	addi	sp,sp,8
1000a5b8:	f800283a 	ret
1000a5bc:	80c0030b 	ldhu	r3,12(r16)
1000a5c0:	18fbffcc 	andi	r3,r3,61439
1000a5c4:	80c0030d 	sth	r3,12(r16)
1000a5c8:	dfc00117 	ldw	ra,4(sp)
1000a5cc:	dc000017 	ldw	r16,0(sp)
1000a5d0:	dec00204 	addi	sp,sp,8
1000a5d4:	f800283a 	ret

1000a5d8 <__seofread>:
1000a5d8:	0005883a 	mov	r2,zero
1000a5dc:	f800283a 	ret

1000a5e0 <__swrite>:
1000a5e0:	2880030b 	ldhu	r2,12(r5)
1000a5e4:	defffb04 	addi	sp,sp,-20
1000a5e8:	dcc00315 	stw	r19,12(sp)
1000a5ec:	dc800215 	stw	r18,8(sp)
1000a5f0:	dc400115 	stw	r17,4(sp)
1000a5f4:	dc000015 	stw	r16,0(sp)
1000a5f8:	dfc00415 	stw	ra,16(sp)
1000a5fc:	10c0400c 	andi	r3,r2,256
1000a600:	2821883a 	mov	r16,r5
1000a604:	2023883a 	mov	r17,r4
1000a608:	3025883a 	mov	r18,r6
1000a60c:	3827883a 	mov	r19,r7
1000a610:	2940038f 	ldh	r5,14(r5)
1000a614:	18000c1e 	bne	r3,zero,1000a648 <__swrite+0x68>
1000a618:	10bbffcc 	andi	r2,r2,61439
1000a61c:	980f883a 	mov	r7,r19
1000a620:	900d883a 	mov	r6,r18
1000a624:	8809883a 	mov	r4,r17
1000a628:	8080030d 	sth	r2,12(r16)
1000a62c:	dfc00417 	ldw	ra,16(sp)
1000a630:	dcc00317 	ldw	r19,12(sp)
1000a634:	dc800217 	ldw	r18,8(sp)
1000a638:	dc400117 	ldw	r17,4(sp)
1000a63c:	dc000017 	ldw	r16,0(sp)
1000a640:	dec00504 	addi	sp,sp,20
1000a644:	000bbd41 	jmpi	1000bbd4 <_write_r>
1000a648:	01c00084 	movi	r7,2
1000a64c:	000d883a 	mov	r6,zero
1000a650:	000c1880 	call	1000c188 <_lseek_r>
1000a654:	8080030b 	ldhu	r2,12(r16)
1000a658:	8140038f 	ldh	r5,14(r16)
1000a65c:	003fee06 	br	1000a618 <__swrite+0x38>

1000a660 <__sseek>:
1000a660:	defffe04 	addi	sp,sp,-8
1000a664:	dc000015 	stw	r16,0(sp)
1000a668:	2821883a 	mov	r16,r5
1000a66c:	2940038f 	ldh	r5,14(r5)
1000a670:	dfc00115 	stw	ra,4(sp)
1000a674:	000c1880 	call	1000c188 <_lseek_r>
1000a678:	10ffffd8 	cmpnei	r3,r2,-1
1000a67c:	18000826 	beq	r3,zero,1000a6a0 <__sseek+0x40>
1000a680:	80c0030b 	ldhu	r3,12(r16)
1000a684:	80801415 	stw	r2,80(r16)
1000a688:	18c40014 	ori	r3,r3,4096
1000a68c:	80c0030d 	sth	r3,12(r16)
1000a690:	dfc00117 	ldw	ra,4(sp)
1000a694:	dc000017 	ldw	r16,0(sp)
1000a698:	dec00204 	addi	sp,sp,8
1000a69c:	f800283a 	ret
1000a6a0:	80c0030b 	ldhu	r3,12(r16)
1000a6a4:	18fbffcc 	andi	r3,r3,61439
1000a6a8:	80c0030d 	sth	r3,12(r16)
1000a6ac:	dfc00117 	ldw	ra,4(sp)
1000a6b0:	dc000017 	ldw	r16,0(sp)
1000a6b4:	dec00204 	addi	sp,sp,8
1000a6b8:	f800283a 	ret

1000a6bc <__sclose>:
1000a6bc:	2940038f 	ldh	r5,14(r5)
1000a6c0:	000bc381 	jmpi	1000bc38 <_close_r>

1000a6c4 <__sprint_r.part.0>:
1000a6c4:	28801917 	ldw	r2,100(r5)
1000a6c8:	defff604 	addi	sp,sp,-40
1000a6cc:	dd000415 	stw	r20,16(sp)
1000a6d0:	dfc00915 	stw	ra,36(sp)
1000a6d4:	df000815 	stw	fp,32(sp)
1000a6d8:	ddc00715 	stw	r23,28(sp)
1000a6dc:	dd800615 	stw	r22,24(sp)
1000a6e0:	dd400515 	stw	r21,20(sp)
1000a6e4:	dcc00315 	stw	r19,12(sp)
1000a6e8:	dc800215 	stw	r18,8(sp)
1000a6ec:	dc400115 	stw	r17,4(sp)
1000a6f0:	dc000015 	stw	r16,0(sp)
1000a6f4:	1088000c 	andi	r2,r2,8192
1000a6f8:	3029883a 	mov	r20,r6
1000a6fc:	10002c26 	beq	r2,zero,1000a7b0 <__sprint_r.part.0+0xec>
1000a700:	30800217 	ldw	r2,8(r6)
1000a704:	2823883a 	mov	r17,r5
1000a708:	2027883a 	mov	r19,r4
1000a70c:	35400017 	ldw	r21,0(r6)
1000a710:	05ffff04 	movi	r23,-4
1000a714:	10002426 	beq	r2,zero,1000a7a8 <__sprint_r.part.0+0xe4>
1000a718:	ad800117 	ldw	r22,4(r21)
1000a71c:	ac000017 	ldw	r16,0(r21)
1000a720:	b024d0ba 	srli	r18,r22,2
1000a724:	90001b26 	beq	r18,zero,1000a794 <__sprint_r.part.0+0xd0>
1000a728:	0039883a 	mov	fp,zero
1000a72c:	00000206 	br	1000a738 <__sprint_r.part.0+0x74>
1000a730:	84000104 	addi	r16,r16,4
1000a734:	97001626 	beq	r18,fp,1000a790 <__sprint_r.part.0+0xcc>
1000a738:	81400017 	ldw	r5,0(r16)
1000a73c:	880d883a 	mov	r6,r17
1000a740:	9809883a 	mov	r4,r19
1000a744:	000bfa00 	call	1000bfa0 <_fputwc_r>
1000a748:	10bfffe0 	cmpeqi	r2,r2,-1
1000a74c:	e7000044 	addi	fp,fp,1
1000a750:	103ff726 	beq	r2,zero,1000a730 <__sprint_r.part.0+0x6c>
1000a754:	00bfffc4 	movi	r2,-1
1000a758:	a0000215 	stw	zero,8(r20)
1000a75c:	a0000115 	stw	zero,4(r20)
1000a760:	dfc00917 	ldw	ra,36(sp)
1000a764:	df000817 	ldw	fp,32(sp)
1000a768:	ddc00717 	ldw	r23,28(sp)
1000a76c:	dd800617 	ldw	r22,24(sp)
1000a770:	dd400517 	ldw	r21,20(sp)
1000a774:	dd000417 	ldw	r20,16(sp)
1000a778:	dcc00317 	ldw	r19,12(sp)
1000a77c:	dc800217 	ldw	r18,8(sp)
1000a780:	dc400117 	ldw	r17,4(sp)
1000a784:	dc000017 	ldw	r16,0(sp)
1000a788:	dec00a04 	addi	sp,sp,40
1000a78c:	f800283a 	ret
1000a790:	a0800217 	ldw	r2,8(r20)
1000a794:	b5ec703a 	and	r22,r22,r23
1000a798:	1585c83a 	sub	r2,r2,r22
1000a79c:	a0800215 	stw	r2,8(r20)
1000a7a0:	ad400204 	addi	r21,r21,8
1000a7a4:	103fdc1e 	bne	r2,zero,1000a718 <__sprint_r.part.0+0x54>
1000a7a8:	0005883a 	mov	r2,zero
1000a7ac:	003fea06 	br	1000a758 <__sprint_r.part.0+0x94>
1000a7b0:	0007cbc0 	call	10007cbc <__sfvwrite_r>
1000a7b4:	003fe806 	br	1000a758 <__sprint_r.part.0+0x94>

1000a7b8 <__sprint_r>:
1000a7b8:	30c00217 	ldw	r3,8(r6)
1000a7bc:	18000126 	beq	r3,zero,1000a7c4 <__sprint_r+0xc>
1000a7c0:	000a6c41 	jmpi	1000a6c4 <__sprint_r.part.0>
1000a7c4:	30000115 	stw	zero,4(r6)
1000a7c8:	0005883a 	mov	r2,zero
1000a7cc:	f800283a 	ret

1000a7d0 <___vfiprintf_internal_r>:
1000a7d0:	deffd004 	addi	sp,sp,-192
1000a7d4:	df002e15 	stw	fp,184(sp)
1000a7d8:	dcc02915 	stw	r19,164(sp)
1000a7dc:	dc802815 	stw	r18,160(sp)
1000a7e0:	dfc02f15 	stw	ra,188(sp)
1000a7e4:	ddc02d15 	stw	r23,180(sp)
1000a7e8:	dd802c15 	stw	r22,176(sp)
1000a7ec:	dd402b15 	stw	r21,172(sp)
1000a7f0:	dd002a15 	stw	r20,168(sp)
1000a7f4:	dc402715 	stw	r17,156(sp)
1000a7f8:	dc002615 	stw	r16,152(sp)
1000a7fc:	d9c00315 	stw	r7,12(sp)
1000a800:	2027883a 	mov	r19,r4
1000a804:	2825883a 	mov	r18,r5
1000a808:	3039883a 	mov	fp,r6
1000a80c:	20000226 	beq	r4,zero,1000a818 <___vfiprintf_internal_r+0x48>
1000a810:	20800e17 	ldw	r2,56(r4)
1000a814:	1002b626 	beq	r2,zero,1000b2f0 <___vfiprintf_internal_r+0xb20>
1000a818:	9080030b 	ldhu	r2,12(r18)
1000a81c:	10c8000c 	andi	r3,r2,8192
1000a820:	1800061e 	bne	r3,zero,1000a83c <___vfiprintf_internal_r+0x6c>
1000a824:	90c01917 	ldw	r3,100(r18)
1000a828:	0137ffc4 	movi	r4,-8193
1000a82c:	10880014 	ori	r2,r2,8192
1000a830:	1906703a 	and	r3,r3,r4
1000a834:	9080030d 	sth	r2,12(r18)
1000a838:	90c01915 	stw	r3,100(r18)
1000a83c:	10c0020c 	andi	r3,r2,8
1000a840:	18009426 	beq	r3,zero,1000aa94 <___vfiprintf_internal_r+0x2c4>
1000a844:	90c00417 	ldw	r3,16(r18)
1000a848:	18009226 	beq	r3,zero,1000aa94 <___vfiprintf_internal_r+0x2c4>
1000a84c:	1080068c 	andi	r2,r2,26
1000a850:	10800298 	cmpnei	r2,r2,10
1000a854:	10009726 	beq	r2,zero,1000aab4 <___vfiprintf_internal_r+0x2e4>
1000a858:	dc401604 	addi	r17,sp,88
1000a85c:	dc400915 	stw	r17,36(sp)
1000a860:	d8000b15 	stw	zero,44(sp)
1000a864:	d8000a15 	stw	zero,40(sp)
1000a868:	8811883a 	mov	r8,r17
1000a86c:	d8000415 	stw	zero,16(sp)
1000a870:	d8000015 	stw	zero,0(sp)
1000a874:	e0800007 	ldb	r2,0(fp)
1000a878:	1000a226 	beq	r2,zero,1000ab04 <___vfiprintf_internal_r+0x334>
1000a87c:	10800960 	cmpeqi	r2,r2,37
1000a880:	1003e71e 	bne	r2,zero,1000b820 <___vfiprintf_internal_r+0x1050>
1000a884:	e021883a 	mov	r16,fp
1000a888:	00000206 	br	1000a894 <___vfiprintf_internal_r+0xc4>
1000a88c:	18009226 	beq	r3,zero,1000aad8 <___vfiprintf_internal_r+0x308>
1000a890:	a021883a 	mov	r16,r20
1000a894:	80800047 	ldb	r2,1(r16)
1000a898:	85000044 	addi	r20,r16,1
1000a89c:	10c00958 	cmpnei	r3,r2,37
1000a8a0:	103ffa1e 	bne	r2,zero,1000a88c <___vfiprintf_internal_r+0xbc>
1000a8a4:	a72bc83a 	sub	r21,r20,fp
1000a8a8:	a8009626 	beq	r21,zero,1000ab04 <___vfiprintf_internal_r+0x334>
1000a8ac:	d8c00b17 	ldw	r3,44(sp)
1000a8b0:	d8800a17 	ldw	r2,40(sp)
1000a8b4:	47000015 	stw	fp,0(r8)
1000a8b8:	a8c7883a 	add	r3,r21,r3
1000a8bc:	10800044 	addi	r2,r2,1
1000a8c0:	d8800a15 	stw	r2,40(sp)
1000a8c4:	45400115 	stw	r21,4(r8)
1000a8c8:	d8c00b15 	stw	r3,44(sp)
1000a8cc:	10800208 	cmpgei	r2,r2,8
1000a8d0:	1000841e 	bne	r2,zero,1000aae4 <___vfiprintf_internal_r+0x314>
1000a8d4:	42000204 	addi	r8,r8,8
1000a8d8:	d8c00017 	ldw	r3,0(sp)
1000a8dc:	80800047 	ldb	r2,1(r16)
1000a8e0:	1d47883a 	add	r3,r3,r21
1000a8e4:	d8c00015 	stw	r3,0(sp)
1000a8e8:	10008626 	beq	r2,zero,1000ab04 <___vfiprintf_internal_r+0x334>
1000a8ec:	a0800047 	ldb	r2,1(r20)
1000a8f0:	a7000044 	addi	fp,r20,1
1000a8f4:	d8000845 	stb	zero,33(sp)
1000a8f8:	000b883a 	mov	r5,zero
1000a8fc:	000d883a 	mov	r6,zero
1000a900:	027fffc4 	movi	r9,-1
1000a904:	0021883a 	mov	r16,zero
1000a908:	0019883a 	mov	r12,zero
1000a90c:	e7000044 	addi	fp,fp,1
1000a910:	10fff804 	addi	r3,r2,-32
1000a914:	19001668 	cmpgeui	r4,r3,89
1000a918:	20009c1e 	bne	r4,zero,1000ab8c <___vfiprintf_internal_r+0x3bc>
1000a91c:	180690ba 	slli	r3,r3,2
1000a920:	01040074 	movhi	r4,4097
1000a924:	1909883a 	add	r4,r3,r4
1000a928:	20ea4c17 	ldw	r3,-22224(r4)
1000a92c:	1800683a 	jmp	r3
1000a930:	1000ac5c 	xori	zero,r2,689
1000a934:	1000ab8c 	andi	zero,r2,686
1000a938:	1000ab8c 	andi	zero,r2,686
1000a93c:	1000ac50 	cmplti	zero,r2,689
1000a940:	1000ab8c 	andi	zero,r2,686
1000a944:	1000ab8c 	andi	zero,r2,686
1000a948:	1000ab8c 	andi	zero,r2,686
1000a94c:	1000ab8c 	andi	zero,r2,686
1000a950:	1000ab8c 	andi	zero,r2,686
1000a954:	1000ab8c 	andi	zero,r2,686
1000a958:	1000ac28 	cmpgeui	zero,r2,688
1000a95c:	1000ac18 	cmpnei	zero,r2,688
1000a960:	1000ab8c 	andi	zero,r2,686
1000a964:	1000ac00 	call	11000ac0 <_gp+0xfe3828>
1000a968:	1000abbc 	xorhi	zero,r2,686
1000a96c:	1000ab8c 	andi	zero,r2,686
1000a970:	1000abb0 	cmpltui	zero,r2,686
1000a974:	1000ab5c 	xori	zero,r2,685
1000a978:	1000ab5c 	xori	zero,r2,685
1000a97c:	1000ab5c 	xori	zero,r2,685
1000a980:	1000ab5c 	xori	zero,r2,685
1000a984:	1000ab5c 	xori	zero,r2,685
1000a988:	1000ab5c 	xori	zero,r2,685
1000a98c:	1000ab5c 	xori	zero,r2,685
1000a990:	1000ab5c 	xori	zero,r2,685
1000a994:	1000ab5c 	xori	zero,r2,685
1000a998:	1000ab8c 	andi	zero,r2,686
1000a99c:	1000ab8c 	andi	zero,r2,686
1000a9a0:	1000ab8c 	andi	zero,r2,686
1000a9a4:	1000ab8c 	andi	zero,r2,686
1000a9a8:	1000ab8c 	andi	zero,r2,686
1000a9ac:	1000ab8c 	andi	zero,r2,686
1000a9b0:	1000ab8c 	andi	zero,r2,686
1000a9b4:	1000ab8c 	andi	zero,r2,686
1000a9b8:	1000ab8c 	andi	zero,r2,686
1000a9bc:	1000ab8c 	andi	zero,r2,686
1000a9c0:	1000b218 	cmpnei	zero,r2,712
1000a9c4:	1000ab8c 	andi	zero,r2,686
1000a9c8:	1000ab8c 	andi	zero,r2,686
1000a9cc:	1000ab8c 	andi	zero,r2,686
1000a9d0:	1000ab8c 	andi	zero,r2,686
1000a9d4:	1000ab8c 	andi	zero,r2,686
1000a9d8:	1000ab8c 	andi	zero,r2,686
1000a9dc:	1000ab8c 	andi	zero,r2,686
1000a9e0:	1000ab8c 	andi	zero,r2,686
1000a9e4:	1000ab8c 	andi	zero,r2,686
1000a9e8:	1000ab8c 	andi	zero,r2,686
1000a9ec:	1000b1b0 	cmpltui	zero,r2,710
1000a9f0:	1000ab8c 	andi	zero,r2,686
1000a9f4:	1000ab8c 	andi	zero,r2,686
1000a9f8:	1000ab8c 	andi	zero,r2,686
1000a9fc:	1000ab8c 	andi	zero,r2,686
1000aa00:	1000ab8c 	andi	zero,r2,686
1000aa04:	1000b1e4 	muli	zero,r2,711
1000aa08:	1000ab8c 	andi	zero,r2,686
1000aa0c:	1000ab8c 	andi	zero,r2,686
1000aa10:	1000adb4 	orhi	zero,r2,694
1000aa14:	1000ab8c 	andi	zero,r2,686
1000aa18:	1000ab8c 	andi	zero,r2,686
1000aa1c:	1000ab8c 	andi	zero,r2,686
1000aa20:	1000ab8c 	andi	zero,r2,686
1000aa24:	1000ab8c 	andi	zero,r2,686
1000aa28:	1000ab8c 	andi	zero,r2,686
1000aa2c:	1000ab8c 	andi	zero,r2,686
1000aa30:	1000ab8c 	andi	zero,r2,686
1000aa34:	1000ab8c 	andi	zero,r2,686
1000aa38:	1000ab8c 	andi	zero,r2,686
1000aa3c:	1000af50 	cmplti	zero,r2,701
1000aa40:	1000aedc 	xori	zero,r2,699
1000aa44:	1000ab8c 	andi	zero,r2,686
1000aa48:	1000ab8c 	andi	zero,r2,686
1000aa4c:	1000ab8c 	andi	zero,r2,686
1000aa50:	1000ace4 	muli	zero,r2,691
1000aa54:	1000aedc 	xori	zero,r2,699
1000aa58:	1000ab8c 	andi	zero,r2,686
1000aa5c:	1000ab8c 	andi	zero,r2,686
1000aa60:	1000acd0 	cmplti	zero,r2,691
1000aa64:	1000ab8c 	andi	zero,r2,686
1000aa68:	1000ae9c 	xori	zero,r2,698
1000aa6c:	1000ad74 	orhi	zero,r2,693
1000aa70:	1000acfc 	xorhi	zero,r2,691
1000aa74:	1000acf0 	cmpltui	zero,r2,691
1000aa78:	1000ab8c 	andi	zero,r2,686
1000aa7c:	1000ae3c 	xorhi	zero,r2,696
1000aa80:	1000ab8c 	andi	zero,r2,686
1000aa84:	1000adfc 	xorhi	zero,r2,695
1000aa88:	1000ab8c 	andi	zero,r2,686
1000aa8c:	1000ab8c 	andi	zero,r2,686
1000aa90:	1000ac88 	cmpgei	zero,r2,690
1000aa94:	900b883a 	mov	r5,r18
1000aa98:	9809883a 	mov	r4,r19
1000aa9c:	00058780 	call	10005878 <__swsetup_r>
1000aaa0:	1004071e 	bne	r2,zero,1000bac0 <___vfiprintf_internal_r+0x12f0>
1000aaa4:	9080030b 	ldhu	r2,12(r18)
1000aaa8:	1080068c 	andi	r2,r2,26
1000aaac:	10800298 	cmpnei	r2,r2,10
1000aab0:	103f691e 	bne	r2,zero,1000a858 <___vfiprintf_internal_r+0x88>
1000aab4:	9080038f 	ldh	r2,14(r18)
1000aab8:	103f6716 	blt	r2,zero,1000a858 <___vfiprintf_internal_r+0x88>
1000aabc:	d9c00317 	ldw	r7,12(sp)
1000aac0:	e00d883a 	mov	r6,fp
1000aac4:	900b883a 	mov	r5,r18
1000aac8:	9809883a 	mov	r4,r19
1000aacc:	000bb140 	call	1000bb14 <__sbprintf>
1000aad0:	d8800015 	stw	r2,0(sp)
1000aad4:	00001406 	br	1000ab28 <___vfiprintf_internal_r+0x358>
1000aad8:	a72bc83a 	sub	r21,r20,fp
1000aadc:	a83f8326 	beq	r21,zero,1000a8ec <___vfiprintf_internal_r+0x11c>
1000aae0:	003f7206 	br	1000a8ac <___vfiprintf_internal_r+0xdc>
1000aae4:	18032b26 	beq	r3,zero,1000b794 <___vfiprintf_internal_r+0xfc4>
1000aae8:	d9800904 	addi	r6,sp,36
1000aaec:	900b883a 	mov	r5,r18
1000aaf0:	9809883a 	mov	r4,r19
1000aaf4:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000aaf8:	1000081e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000aafc:	8811883a 	mov	r8,r17
1000ab00:	003f7506 	br	1000a8d8 <___vfiprintf_internal_r+0x108>
1000ab04:	d8800b17 	ldw	r2,44(sp)
1000ab08:	10000426 	beq	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000ab0c:	d9800904 	addi	r6,sp,36
1000ab10:	900b883a 	mov	r5,r18
1000ab14:	9809883a 	mov	r4,r19
1000ab18:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000ab1c:	9080030b 	ldhu	r2,12(r18)
1000ab20:	1080100c 	andi	r2,r2,64
1000ab24:	1003e61e 	bne	r2,zero,1000bac0 <___vfiprintf_internal_r+0x12f0>
1000ab28:	d8800017 	ldw	r2,0(sp)
1000ab2c:	dfc02f17 	ldw	ra,188(sp)
1000ab30:	df002e17 	ldw	fp,184(sp)
1000ab34:	ddc02d17 	ldw	r23,180(sp)
1000ab38:	dd802c17 	ldw	r22,176(sp)
1000ab3c:	dd402b17 	ldw	r21,172(sp)
1000ab40:	dd002a17 	ldw	r20,168(sp)
1000ab44:	dcc02917 	ldw	r19,164(sp)
1000ab48:	dc802817 	ldw	r18,160(sp)
1000ab4c:	dc402717 	ldw	r17,156(sp)
1000ab50:	dc002617 	ldw	r16,152(sp)
1000ab54:	dec03004 	addi	sp,sp,192
1000ab58:	f800283a 	ret
1000ab5c:	0021883a 	mov	r16,zero
1000ab60:	10fff404 	addi	r3,r2,-48
1000ab64:	e7000044 	addi	fp,fp,1
1000ab68:	840002a4 	muli	r16,r16,10
1000ab6c:	e0bfffc7 	ldb	r2,-1(fp)
1000ab70:	1c21883a 	add	r16,r3,r16
1000ab74:	10fff404 	addi	r3,r2,-48
1000ab78:	190002b0 	cmpltui	r4,r3,10
1000ab7c:	203ff91e 	bne	r4,zero,1000ab64 <___vfiprintf_internal_r+0x394>
1000ab80:	10fff804 	addi	r3,r2,-32
1000ab84:	19001668 	cmpgeui	r4,r3,89
1000ab88:	203f6426 	beq	r4,zero,1000a91c <___vfiprintf_internal_r+0x14c>
1000ab8c:	29403fcc 	andi	r5,r5,255
1000ab90:	2803a91e 	bne	r5,zero,1000ba38 <___vfiprintf_internal_r+0x1268>
1000ab94:	103fdb26 	beq	r2,zero,1000ab04 <___vfiprintf_internal_r+0x334>
1000ab98:	d8800c05 	stb	r2,48(sp)
1000ab9c:	d8000845 	stb	zero,33(sp)
1000aba0:	05400044 	movi	r21,1
1000aba4:	05800044 	movi	r22,1
1000aba8:	ddc00c04 	addi	r23,sp,48
1000abac:	0000f106 	br	1000af74 <___vfiprintf_internal_r+0x7a4>
1000abb0:	63002014 	ori	r12,r12,128
1000abb4:	e0800007 	ldb	r2,0(fp)
1000abb8:	003f5406 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000abbc:	e0800007 	ldb	r2,0(fp)
1000abc0:	e1000044 	addi	r4,fp,1
1000abc4:	10c00aa0 	cmpeqi	r3,r2,42
1000abc8:	1803c01e 	bne	r3,zero,1000bacc <___vfiprintf_internal_r+0x12fc>
1000abcc:	10fff404 	addi	r3,r2,-48
1000abd0:	19c002b0 	cmpltui	r7,r3,10
1000abd4:	2039883a 	mov	fp,r4
1000abd8:	0013883a 	mov	r9,zero
1000abdc:	383f4c26 	beq	r7,zero,1000a910 <___vfiprintf_internal_r+0x140>
1000abe0:	e7000044 	addi	fp,fp,1
1000abe4:	4a4002a4 	muli	r9,r9,10
1000abe8:	e0bfffc7 	ldb	r2,-1(fp)
1000abec:	48d3883a 	add	r9,r9,r3
1000abf0:	10fff404 	addi	r3,r2,-48
1000abf4:	190002b0 	cmpltui	r4,r3,10
1000abf8:	203ff91e 	bne	r4,zero,1000abe0 <___vfiprintf_internal_r+0x410>
1000abfc:	003f4406 	br	1000a910 <___vfiprintf_internal_r+0x140>
1000ac00:	e0800003 	ldbu	r2,0(fp)
1000ac04:	10803fcc 	andi	r2,r2,255
1000ac08:	1080201c 	xori	r2,r2,128
1000ac0c:	63000114 	ori	r12,r12,4
1000ac10:	10bfe004 	addi	r2,r2,-128
1000ac14:	003f3d06 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000ac18:	01400044 	movi	r5,1
1000ac1c:	01800ac4 	movi	r6,43
1000ac20:	e0800007 	ldb	r2,0(fp)
1000ac24:	003f3906 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000ac28:	d8800317 	ldw	r2,12(sp)
1000ac2c:	14000017 	ldw	r16,0(r2)
1000ac30:	15c00104 	addi	r23,r2,4
1000ac34:	e0800003 	ldbu	r2,0(fp)
1000ac38:	80031416 	blt	r16,zero,1000b88c <___vfiprintf_internal_r+0x10bc>
1000ac3c:	ddc00315 	stw	r23,12(sp)
1000ac40:	10803fcc 	andi	r2,r2,255
1000ac44:	1080201c 	xori	r2,r2,128
1000ac48:	10bfe004 	addi	r2,r2,-128
1000ac4c:	003f2f06 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000ac50:	63000054 	ori	r12,r12,1
1000ac54:	e0800007 	ldb	r2,0(fp)
1000ac58:	003f2c06 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000ac5c:	30c03fcc 	andi	r3,r6,255
1000ac60:	18c0201c 	xori	r3,r3,128
1000ac64:	18ffe004 	addi	r3,r3,-128
1000ac68:	e0800003 	ldbu	r2,0(fp)
1000ac6c:	183ff41e 	bne	r3,zero,1000ac40 <___vfiprintf_internal_r+0x470>
1000ac70:	10803fcc 	andi	r2,r2,255
1000ac74:	1080201c 	xori	r2,r2,128
1000ac78:	01400044 	movi	r5,1
1000ac7c:	01800804 	movi	r6,32
1000ac80:	10bfe004 	addi	r2,r2,-128
1000ac84:	003f2106 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000ac88:	29403fcc 	andi	r5,r5,255
1000ac8c:	2803741e 	bne	r5,zero,1000ba60 <___vfiprintf_internal_r+0x1290>
1000ac90:	00c40074 	movhi	r3,4097
1000ac94:	18cad704 	addi	r3,r3,11100
1000ac98:	d8c00415 	stw	r3,16(sp)
1000ac9c:	60c0080c 	andi	r3,r12,32
1000aca0:	18004b26 	beq	r3,zero,1000add0 <___vfiprintf_internal_r+0x600>
1000aca4:	d8c00317 	ldw	r3,12(sp)
1000aca8:	1d400017 	ldw	r21,0(r3)
1000acac:	1d800117 	ldw	r22,4(r3)
1000acb0:	18c00204 	addi	r3,r3,8
1000acb4:	d8c00315 	stw	r3,12(sp)
1000acb8:	60c0004c 	andi	r3,r12,1
1000acbc:	18000226 	beq	r3,zero,1000acc8 <___vfiprintf_internal_r+0x4f8>
1000acc0:	ad86b03a 	or	r3,r21,r22
1000acc4:	1802df1e 	bne	r3,zero,1000b844 <___vfiprintf_internal_r+0x1074>
1000acc8:	00800084 	movi	r2,2
1000accc:	00001906 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000acd0:	e0800007 	ldb	r2,0(fp)
1000acd4:	10c01b18 	cmpnei	r3,r2,108
1000acd8:	18033026 	beq	r3,zero,1000b99c <___vfiprintf_internal_r+0x11cc>
1000acdc:	63000414 	ori	r12,r12,16
1000ace0:	003f0a06 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000ace4:	63001014 	ori	r12,r12,64
1000ace8:	e0800007 	ldb	r2,0(fp)
1000acec:	003f0706 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000acf0:	63000814 	ori	r12,r12,32
1000acf4:	e0800007 	ldb	r2,0(fp)
1000acf8:	003f0406 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000acfc:	d8c00317 	ldw	r3,12(sp)
1000ad00:	00800c04 	movi	r2,48
1000ad04:	d8800885 	stb	r2,34(sp)
1000ad08:	00801e04 	movi	r2,120
1000ad0c:	01040074 	movhi	r4,4097
1000ad10:	d88008c5 	stb	r2,35(sp)
1000ad14:	1d400017 	ldw	r21,0(r3)
1000ad18:	18800104 	addi	r2,r3,4
1000ad1c:	d8800315 	stw	r2,12(sp)
1000ad20:	208ad704 	addi	r2,r4,11100
1000ad24:	d8800415 	stw	r2,16(sp)
1000ad28:	002d883a 	mov	r22,zero
1000ad2c:	63000094 	ori	r12,r12,2
1000ad30:	00800084 	movi	r2,2
1000ad34:	d8000845 	stb	zero,33(sp)
1000ad38:	48ffffe0 	cmpeqi	r3,r9,-1
1000ad3c:	001b883a 	mov	r13,zero
1000ad40:	18014c1e 	bne	r3,zero,1000b274 <___vfiprintf_internal_r+0xaa4>
1000ad44:	053fdfc4 	movi	r20,-129
1000ad48:	ad86b03a 	or	r3,r21,r22
1000ad4c:	6528703a 	and	r20,r12,r20
1000ad50:	1802411e 	bne	r3,zero,1000b658 <___vfiprintf_internal_r+0xe88>
1000ad54:	48030d1e 	bne	r9,zero,1000b98c <___vfiprintf_internal_r+0x11bc>
1000ad58:	1000791e 	bne	r2,zero,1000af40 <___vfiprintf_internal_r+0x770>
1000ad5c:	6580004c 	andi	r22,r12,1
1000ad60:	b002b126 	beq	r22,zero,1000b828 <___vfiprintf_internal_r+0x1058>
1000ad64:	00800c04 	movi	r2,48
1000ad68:	d88015c5 	stb	r2,87(sp)
1000ad6c:	ddc015c4 	addi	r23,sp,87
1000ad70:	00017e06 	br	1000b36c <___vfiprintf_internal_r+0xb9c>
1000ad74:	29403fcc 	andi	r5,r5,255
1000ad78:	2803461e 	bne	r5,zero,1000ba94 <___vfiprintf_internal_r+0x12c4>
1000ad7c:	6080080c 	andi	r2,r12,32
1000ad80:	10016b1e 	bne	r2,zero,1000b330 <___vfiprintf_internal_r+0xb60>
1000ad84:	d8800317 	ldw	r2,12(sp)
1000ad88:	60c0040c 	andi	r3,r12,16
1000ad8c:	15400017 	ldw	r21,0(r2)
1000ad90:	10800104 	addi	r2,r2,4
1000ad94:	18010d1e 	bne	r3,zero,1000b1cc <___vfiprintf_internal_r+0x9fc>
1000ad98:	60c0100c 	andi	r3,r12,64
1000ad9c:	18031326 	beq	r3,zero,1000b9ec <___vfiprintf_internal_r+0x121c>
1000ada0:	d8800315 	stw	r2,12(sp)
1000ada4:	ad7fffcc 	andi	r21,r21,65535
1000ada8:	002d883a 	mov	r22,zero
1000adac:	0005883a 	mov	r2,zero
1000adb0:	003fe006 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000adb4:	29403fcc 	andi	r5,r5,255
1000adb8:	2803251e 	bne	r5,zero,1000ba50 <___vfiprintf_internal_r+0x1280>
1000adbc:	00c40074 	movhi	r3,4097
1000adc0:	18cad204 	addi	r3,r3,11080
1000adc4:	d8c00415 	stw	r3,16(sp)
1000adc8:	60c0080c 	andi	r3,r12,32
1000adcc:	183fb51e 	bne	r3,zero,1000aca4 <___vfiprintf_internal_r+0x4d4>
1000add0:	d9000317 	ldw	r4,12(sp)
1000add4:	60c0040c 	andi	r3,r12,16
1000add8:	25400017 	ldw	r21,0(r4)
1000addc:	21000104 	addi	r4,r4,4
1000ade0:	d9000315 	stw	r4,12(sp)
1000ade4:	18026e1e 	bne	r3,zero,1000b7a0 <___vfiprintf_internal_r+0xfd0>
1000ade8:	60c0100c 	andi	r3,r12,64
1000adec:	18026c26 	beq	r3,zero,1000b7a0 <___vfiprintf_internal_r+0xfd0>
1000adf0:	ad7fffcc 	andi	r21,r21,65535
1000adf4:	002d883a 	mov	r22,zero
1000adf8:	003faf06 	br	1000acb8 <___vfiprintf_internal_r+0x4e8>
1000adfc:	29403fcc 	andi	r5,r5,255
1000ae00:	2803151e 	bne	r5,zero,1000ba58 <___vfiprintf_internal_r+0x1288>
1000ae04:	6080080c 	andi	r2,r12,32
1000ae08:	10013b1e 	bne	r2,zero,1000b2f8 <___vfiprintf_internal_r+0xb28>
1000ae0c:	d8800317 	ldw	r2,12(sp)
1000ae10:	60c0040c 	andi	r3,r12,16
1000ae14:	15400017 	ldw	r21,0(r2)
1000ae18:	10800104 	addi	r2,r2,4
1000ae1c:	1800f81e 	bne	r3,zero,1000b200 <___vfiprintf_internal_r+0xa30>
1000ae20:	60c0100c 	andi	r3,r12,64
1000ae24:	1802ed26 	beq	r3,zero,1000b9dc <___vfiprintf_internal_r+0x120c>
1000ae28:	d8800315 	stw	r2,12(sp)
1000ae2c:	ad7fffcc 	andi	r21,r21,65535
1000ae30:	002d883a 	mov	r22,zero
1000ae34:	00800044 	movi	r2,1
1000ae38:	003fbe06 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000ae3c:	d8800317 	ldw	r2,12(sp)
1000ae40:	d8000845 	stb	zero,33(sp)
1000ae44:	15c00017 	ldw	r23,0(r2)
1000ae48:	15000104 	addi	r20,r2,4
1000ae4c:	b802da26 	beq	r23,zero,1000b9b8 <___vfiprintf_internal_r+0x11e8>
1000ae50:	48bfffe0 	cmpeqi	r2,r9,-1
1000ae54:	1002901e 	bne	r2,zero,1000b898 <___vfiprintf_internal_r+0x10c8>
1000ae58:	480d883a 	mov	r6,r9
1000ae5c:	000b883a 	mov	r5,zero
1000ae60:	b809883a 	mov	r4,r23
1000ae64:	da000315 	stw	r8,12(sp)
1000ae68:	db000215 	stw	r12,8(sp)
1000ae6c:	da400115 	stw	r9,4(sp)
1000ae70:	0008cc00 	call	10008cc0 <memchr>
1000ae74:	da400117 	ldw	r9,4(sp)
1000ae78:	db000217 	ldw	r12,8(sp)
1000ae7c:	da000317 	ldw	r8,12(sp)
1000ae80:	1002ef26 	beq	r2,zero,1000ba40 <___vfiprintf_internal_r+0x1270>
1000ae84:	15edc83a 	sub	r22,r2,r23
1000ae88:	b02b883a 	mov	r21,r22
1000ae8c:	b000010e 	bge	r22,zero,1000ae94 <___vfiprintf_internal_r+0x6c4>
1000ae90:	002b883a 	mov	r21,zero
1000ae94:	dd000315 	stw	r20,12(sp)
1000ae98:	00003606 	br	1000af74 <___vfiprintf_internal_r+0x7a4>
1000ae9c:	29403fcc 	andi	r5,r5,255
1000aea0:	2802fa1e 	bne	r5,zero,1000ba8c <___vfiprintf_internal_r+0x12bc>
1000aea4:	d9000317 	ldw	r4,12(sp)
1000aea8:	6080080c 	andi	r2,r12,32
1000aeac:	20c00104 	addi	r3,r4,4
1000aeb0:	10026a1e 	bne	r2,zero,1000b85c <___vfiprintf_internal_r+0x108c>
1000aeb4:	6080040c 	andi	r2,r12,16
1000aeb8:	1002891e 	bne	r2,zero,1000b8e0 <___vfiprintf_internal_r+0x1110>
1000aebc:	6300100c 	andi	r12,r12,64
1000aec0:	60028726 	beq	r12,zero,1000b8e0 <___vfiprintf_internal_r+0x1110>
1000aec4:	d8800317 	ldw	r2,12(sp)
1000aec8:	d8c00315 	stw	r3,12(sp)
1000aecc:	d8c00017 	ldw	r3,0(sp)
1000aed0:	10800017 	ldw	r2,0(r2)
1000aed4:	10c0000d 	sth	r3,0(r2)
1000aed8:	003e6606 	br	1000a874 <___vfiprintf_internal_r+0xa4>
1000aedc:	29403fcc 	andi	r5,r5,255
1000aee0:	2802e81e 	bne	r5,zero,1000ba84 <___vfiprintf_internal_r+0x12b4>
1000aee4:	6080080c 	andi	r2,r12,32
1000aee8:	10010a1e 	bne	r2,zero,1000b314 <___vfiprintf_internal_r+0xb44>
1000aeec:	d8800317 	ldw	r2,12(sp)
1000aef0:	60c0040c 	andi	r3,r12,16
1000aef4:	10800104 	addi	r2,r2,4
1000aef8:	1800ce1e 	bne	r3,zero,1000b234 <___vfiprintf_internal_r+0xa64>
1000aefc:	60c0100c 	andi	r3,r12,64
1000af00:	1800cc26 	beq	r3,zero,1000b234 <___vfiprintf_internal_r+0xa64>
1000af04:	d8c00317 	ldw	r3,12(sp)
1000af08:	d8800315 	stw	r2,12(sp)
1000af0c:	1d40000f 	ldh	r21,0(r3)
1000af10:	a82dd7fa 	srai	r22,r21,31
1000af14:	b005883a 	mov	r2,r22
1000af18:	1000cc16 	blt	r2,zero,1000b24c <___vfiprintf_internal_r+0xa7c>
1000af1c:	48bfffd8 	cmpnei	r2,r9,-1
1000af20:	db400843 	ldbu	r13,33(sp)
1000af24:	10010926 	beq	r2,zero,1000b34c <___vfiprintf_internal_r+0xb7c>
1000af28:	00ffdfc4 	movi	r3,-129
1000af2c:	ad84b03a 	or	r2,r21,r22
1000af30:	60d8703a 	and	r12,r12,r3
1000af34:	1001051e 	bne	r2,zero,1000b34c <___vfiprintf_internal_r+0xb7c>
1000af38:	4801071e 	bne	r9,zero,1000b358 <___vfiprintf_internal_r+0xb88>
1000af3c:	6029883a 	mov	r20,r12
1000af40:	0013883a 	mov	r9,zero
1000af44:	002d883a 	mov	r22,zero
1000af48:	882f883a 	mov	r23,r17
1000af4c:	00010706 	br	1000b36c <___vfiprintf_internal_r+0xb9c>
1000af50:	d8c00317 	ldw	r3,12(sp)
1000af54:	d8000845 	stb	zero,33(sp)
1000af58:	05400044 	movi	r21,1
1000af5c:	18800017 	ldw	r2,0(r3)
1000af60:	18c00104 	addi	r3,r3,4
1000af64:	d8c00315 	stw	r3,12(sp)
1000af68:	d8800c05 	stb	r2,48(sp)
1000af6c:	05800044 	movi	r22,1
1000af70:	ddc00c04 	addi	r23,sp,48
1000af74:	6029883a 	mov	r20,r12
1000af78:	0013883a 	mov	r9,zero
1000af7c:	a340008c 	andi	r13,r20,2
1000af80:	68000126 	beq	r13,zero,1000af88 <___vfiprintf_internal_r+0x7b8>
1000af84:	ad400084 	addi	r21,r21,2
1000af88:	d9000a17 	ldw	r4,40(sp)
1000af8c:	a300210c 	andi	r12,r20,132
1000af90:	d8800b17 	ldw	r2,44(sp)
1000af94:	21800044 	addi	r6,r4,1
1000af98:	300b883a 	mov	r5,r6
1000af9c:	6000021e 	bne	r12,zero,1000afa8 <___vfiprintf_internal_r+0x7d8>
1000afa0:	8547c83a 	sub	r3,r16,r21
1000afa4:	00c1ae16 	blt	zero,r3,1000b660 <___vfiprintf_internal_r+0xe90>
1000afa8:	d9800847 	ldb	r6,33(sp)
1000afac:	40c00204 	addi	r3,r8,8
1000afb0:	30000d26 	beq	r6,zero,1000afe8 <___vfiprintf_internal_r+0x818>
1000afb4:	d9000844 	addi	r4,sp,33
1000afb8:	10800044 	addi	r2,r2,1
1000afbc:	41000015 	stw	r4,0(r8)
1000afc0:	01000044 	movi	r4,1
1000afc4:	41000115 	stw	r4,4(r8)
1000afc8:	d8800b15 	stw	r2,44(sp)
1000afcc:	d9400a15 	stw	r5,40(sp)
1000afd0:	29000208 	cmpgei	r4,r5,8
1000afd4:	2001831e 	bne	r4,zero,1000b5e4 <___vfiprintf_internal_r+0xe14>
1000afd8:	2809883a 	mov	r4,r5
1000afdc:	1811883a 	mov	r8,r3
1000afe0:	29400044 	addi	r5,r5,1
1000afe4:	18c00204 	addi	r3,r3,8
1000afe8:	68001826 	beq	r13,zero,1000b04c <___vfiprintf_internal_r+0x87c>
1000afec:	d9000884 	addi	r4,sp,34
1000aff0:	10800084 	addi	r2,r2,2
1000aff4:	41000015 	stw	r4,0(r8)
1000aff8:	01000084 	movi	r4,2
1000affc:	41000115 	stw	r4,4(r8)
1000b000:	d8800b15 	stw	r2,44(sp)
1000b004:	d9400a15 	stw	r5,40(sp)
1000b008:	29000208 	cmpgei	r4,r5,8
1000b00c:	20018d26 	beq	r4,zero,1000b644 <___vfiprintf_internal_r+0xe74>
1000b010:	1001ed26 	beq	r2,zero,1000b7c8 <___vfiprintf_internal_r+0xff8>
1000b014:	d9800904 	addi	r6,sp,36
1000b018:	900b883a 	mov	r5,r18
1000b01c:	9809883a 	mov	r4,r19
1000b020:	da400215 	stw	r9,8(sp)
1000b024:	db000115 	stw	r12,4(sp)
1000b028:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b02c:	103ebb1e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b030:	d9000a17 	ldw	r4,40(sp)
1000b034:	d8800b17 	ldw	r2,44(sp)
1000b038:	da400217 	ldw	r9,8(sp)
1000b03c:	db000117 	ldw	r12,4(sp)
1000b040:	d8c01804 	addi	r3,sp,96
1000b044:	21400044 	addi	r5,r4,1
1000b048:	8811883a 	mov	r8,r17
1000b04c:	63002018 	cmpnei	r12,r12,128
1000b050:	6000e326 	beq	r12,zero,1000b3e0 <___vfiprintf_internal_r+0xc10>
1000b054:	4d93c83a 	sub	r9,r9,r22
1000b058:	02412216 	blt	zero,r9,1000b4e4 <___vfiprintf_internal_r+0xd14>
1000b05c:	b085883a 	add	r2,r22,r2
1000b060:	d9400a15 	stw	r5,40(sp)
1000b064:	45c00015 	stw	r23,0(r8)
1000b068:	45800115 	stw	r22,4(r8)
1000b06c:	d8800b15 	stw	r2,44(sp)
1000b070:	29400210 	cmplti	r5,r5,8
1000b074:	2800081e 	bne	r5,zero,1000b098 <___vfiprintf_internal_r+0x8c8>
1000b078:	10001426 	beq	r2,zero,1000b0cc <___vfiprintf_internal_r+0x8fc>
1000b07c:	d9800904 	addi	r6,sp,36
1000b080:	900b883a 	mov	r5,r18
1000b084:	9809883a 	mov	r4,r19
1000b088:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b08c:	103ea31e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b090:	d8800b17 	ldw	r2,44(sp)
1000b094:	8807883a 	mov	r3,r17
1000b098:	a500010c 	andi	r20,r20,4
1000b09c:	a0000226 	beq	r20,zero,1000b0a8 <___vfiprintf_internal_r+0x8d8>
1000b0a0:	8569c83a 	sub	r20,r16,r21
1000b0a4:	05000f16 	blt	zero,r20,1000b0e4 <___vfiprintf_internal_r+0x914>
1000b0a8:	8540010e 	bge	r16,r21,1000b0b0 <___vfiprintf_internal_r+0x8e0>
1000b0ac:	a821883a 	mov	r16,r21
1000b0b0:	d8c00017 	ldw	r3,0(sp)
1000b0b4:	1c07883a 	add	r3,r3,r16
1000b0b8:	d8c00015 	stw	r3,0(sp)
1000b0bc:	10013f1e 	bne	r2,zero,1000b5bc <___vfiprintf_internal_r+0xdec>
1000b0c0:	d8000a15 	stw	zero,40(sp)
1000b0c4:	8811883a 	mov	r8,r17
1000b0c8:	003dea06 	br	1000a874 <___vfiprintf_internal_r+0xa4>
1000b0cc:	d8000a15 	stw	zero,40(sp)
1000b0d0:	a500010c 	andi	r20,r20,4
1000b0d4:	a0019d26 	beq	r20,zero,1000b74c <___vfiprintf_internal_r+0xf7c>
1000b0d8:	8569c83a 	sub	r20,r16,r21
1000b0dc:	05019b0e 	bge	zero,r20,1000b74c <___vfiprintf_internal_r+0xf7c>
1000b0e0:	8807883a 	mov	r3,r17
1000b0e4:	a1000450 	cmplti	r4,r20,17
1000b0e8:	01c40074 	movhi	r7,4097
1000b0ec:	d9400a17 	ldw	r5,40(sp)
1000b0f0:	20026c1e 	bne	r4,zero,1000baa4 <___vfiprintf_internal_r+0x12d4>
1000b0f4:	39cb3804 	addi	r7,r7,11488
1000b0f8:	05800404 	movi	r22,16
1000b0fc:	00000606 	br	1000b118 <___vfiprintf_internal_r+0x948>
1000b100:	29800084 	addi	r6,r5,2
1000b104:	18c00204 	addi	r3,r3,8
1000b108:	200b883a 	mov	r5,r4
1000b10c:	a53ffc04 	addi	r20,r20,-16
1000b110:	a1000448 	cmpgei	r4,r20,17
1000b114:	20001726 	beq	r4,zero,1000b174 <___vfiprintf_internal_r+0x9a4>
1000b118:	29000044 	addi	r4,r5,1
1000b11c:	10800404 	addi	r2,r2,16
1000b120:	19c00015 	stw	r7,0(r3)
1000b124:	1d800115 	stw	r22,4(r3)
1000b128:	d8800b15 	stw	r2,44(sp)
1000b12c:	d9000a15 	stw	r4,40(sp)
1000b130:	21800208 	cmpgei	r6,r4,8
1000b134:	303ff226 	beq	r6,zero,1000b100 <___vfiprintf_internal_r+0x930>
1000b138:	d9800904 	addi	r6,sp,36
1000b13c:	900b883a 	mov	r5,r18
1000b140:	9809883a 	mov	r4,r19
1000b144:	1000a226 	beq	r2,zero,1000b3d0 <___vfiprintf_internal_r+0xc00>
1000b148:	d9c00115 	stw	r7,4(sp)
1000b14c:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b150:	103e721e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b154:	d9400a17 	ldw	r5,40(sp)
1000b158:	a53ffc04 	addi	r20,r20,-16
1000b15c:	a1000448 	cmpgei	r4,r20,17
1000b160:	d8800b17 	ldw	r2,44(sp)
1000b164:	8807883a 	mov	r3,r17
1000b168:	29800044 	addi	r6,r5,1
1000b16c:	d9c00117 	ldw	r7,4(sp)
1000b170:	203fe91e 	bne	r4,zero,1000b118 <___vfiprintf_internal_r+0x948>
1000b174:	1505883a 	add	r2,r2,r20
1000b178:	d9800a15 	stw	r6,40(sp)
1000b17c:	19c00015 	stw	r7,0(r3)
1000b180:	1d000115 	stw	r20,4(r3)
1000b184:	d8800b15 	stw	r2,44(sp)
1000b188:	31800210 	cmplti	r6,r6,8
1000b18c:	303fc61e 	bne	r6,zero,1000b0a8 <___vfiprintf_internal_r+0x8d8>
1000b190:	10016e26 	beq	r2,zero,1000b74c <___vfiprintf_internal_r+0xf7c>
1000b194:	d9800904 	addi	r6,sp,36
1000b198:	900b883a 	mov	r5,r18
1000b19c:	9809883a 	mov	r4,r19
1000b1a0:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b1a4:	103e5d1e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b1a8:	d8800b17 	ldw	r2,44(sp)
1000b1ac:	003fbe06 	br	1000b0a8 <___vfiprintf_internal_r+0x8d8>
1000b1b0:	29403fcc 	andi	r5,r5,255
1000b1b4:	28022c1e 	bne	r5,zero,1000ba68 <___vfiprintf_internal_r+0x1298>
1000b1b8:	6080080c 	andi	r2,r12,32
1000b1bc:	63000414 	ori	r12,r12,16
1000b1c0:	10005b1e 	bne	r2,zero,1000b330 <___vfiprintf_internal_r+0xb60>
1000b1c4:	d8800317 	ldw	r2,12(sp)
1000b1c8:	10800104 	addi	r2,r2,4
1000b1cc:	d8c00317 	ldw	r3,12(sp)
1000b1d0:	002d883a 	mov	r22,zero
1000b1d4:	d8800315 	stw	r2,12(sp)
1000b1d8:	1d400017 	ldw	r21,0(r3)
1000b1dc:	0005883a 	mov	r2,zero
1000b1e0:	003ed406 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b1e4:	29403fcc 	andi	r5,r5,255
1000b1e8:	2802211e 	bne	r5,zero,1000ba70 <___vfiprintf_internal_r+0x12a0>
1000b1ec:	6080080c 	andi	r2,r12,32
1000b1f0:	63000414 	ori	r12,r12,16
1000b1f4:	1000401e 	bne	r2,zero,1000b2f8 <___vfiprintf_internal_r+0xb28>
1000b1f8:	d8800317 	ldw	r2,12(sp)
1000b1fc:	10800104 	addi	r2,r2,4
1000b200:	d8c00317 	ldw	r3,12(sp)
1000b204:	002d883a 	mov	r22,zero
1000b208:	d8800315 	stw	r2,12(sp)
1000b20c:	1d400017 	ldw	r21,0(r3)
1000b210:	00800044 	movi	r2,1
1000b214:	003ec706 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b218:	29403fcc 	andi	r5,r5,255
1000b21c:	28021f1e 	bne	r5,zero,1000ba9c <___vfiprintf_internal_r+0x12cc>
1000b220:	6080080c 	andi	r2,r12,32
1000b224:	63000414 	ori	r12,r12,16
1000b228:	10003a1e 	bne	r2,zero,1000b314 <___vfiprintf_internal_r+0xb44>
1000b22c:	d8800317 	ldw	r2,12(sp)
1000b230:	10800104 	addi	r2,r2,4
1000b234:	d8c00317 	ldw	r3,12(sp)
1000b238:	1d400017 	ldw	r21,0(r3)
1000b23c:	d8800315 	stw	r2,12(sp)
1000b240:	a82dd7fa 	srai	r22,r21,31
1000b244:	b005883a 	mov	r2,r22
1000b248:	103f340e 	bge	r2,zero,1000af1c <___vfiprintf_internal_r+0x74c>
1000b24c:	056bc83a 	sub	r21,zero,r21
1000b250:	a804c03a 	cmpne	r2,r21,zero
1000b254:	05adc83a 	sub	r22,zero,r22
1000b258:	b0adc83a 	sub	r22,r22,r2
1000b25c:	00800b44 	movi	r2,45
1000b260:	d8800845 	stb	r2,33(sp)
1000b264:	48ffffe0 	cmpeqi	r3,r9,-1
1000b268:	03400b44 	movi	r13,45
1000b26c:	00800044 	movi	r2,1
1000b270:	183eb426 	beq	r3,zero,1000ad44 <___vfiprintf_internal_r+0x574>
1000b274:	10c00060 	cmpeqi	r3,r2,1
1000b278:	1800341e 	bne	r3,zero,1000b34c <___vfiprintf_internal_r+0xb7c>
1000b27c:	108000a0 	cmpeqi	r2,r2,2
1000b280:	1000431e 	bne	r2,zero,1000b390 <___vfiprintf_internal_r+0xbc0>
1000b284:	8807883a 	mov	r3,r17
1000b288:	00000106 	br	1000b290 <___vfiprintf_internal_r+0xac0>
1000b28c:	b807883a 	mov	r3,r23
1000b290:	a808d0fa 	srli	r4,r21,3
1000b294:	b00a977a 	slli	r5,r22,29
1000b298:	b02cd0fa 	srli	r22,r22,3
1000b29c:	ad4001cc 	andi	r21,r21,7
1000b2a0:	a8800c04 	addi	r2,r21,48
1000b2a4:	292ab03a 	or	r21,r5,r4
1000b2a8:	18bfffc5 	stb	r2,-1(r3)
1000b2ac:	ad88b03a 	or	r4,r21,r22
1000b2b0:	1dffffc4 	addi	r23,r3,-1
1000b2b4:	203ff51e 	bne	r4,zero,1000b28c <___vfiprintf_internal_r+0xabc>
1000b2b8:	6100004c 	andi	r4,r12,1
1000b2bc:	20004126 	beq	r4,zero,1000b3c4 <___vfiprintf_internal_r+0xbf4>
1000b2c0:	10803fcc 	andi	r2,r2,255
1000b2c4:	1080201c 	xori	r2,r2,128
1000b2c8:	10bfe004 	addi	r2,r2,-128
1000b2cc:	10800c18 	cmpnei	r2,r2,48
1000b2d0:	10003c26 	beq	r2,zero,1000b3c4 <___vfiprintf_internal_r+0xbf4>
1000b2d4:	18ffff84 	addi	r3,r3,-2
1000b2d8:	00800c04 	movi	r2,48
1000b2dc:	b8bfffc5 	stb	r2,-1(r23)
1000b2e0:	88edc83a 	sub	r22,r17,r3
1000b2e4:	6029883a 	mov	r20,r12
1000b2e8:	182f883a 	mov	r23,r3
1000b2ec:	00001f06 	br	1000b36c <___vfiprintf_internal_r+0xb9c>
1000b2f0:	000785c0 	call	1000785c <__sinit>
1000b2f4:	003d4806 	br	1000a818 <___vfiprintf_internal_r+0x48>
1000b2f8:	d8c00317 	ldw	r3,12(sp)
1000b2fc:	00800044 	movi	r2,1
1000b300:	1d400017 	ldw	r21,0(r3)
1000b304:	1d800117 	ldw	r22,4(r3)
1000b308:	18c00204 	addi	r3,r3,8
1000b30c:	d8c00315 	stw	r3,12(sp)
1000b310:	003e8806 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b314:	d8c00317 	ldw	r3,12(sp)
1000b318:	18800117 	ldw	r2,4(r3)
1000b31c:	1d400017 	ldw	r21,0(r3)
1000b320:	18c00204 	addi	r3,r3,8
1000b324:	d8c00315 	stw	r3,12(sp)
1000b328:	102d883a 	mov	r22,r2
1000b32c:	003efa06 	br	1000af18 <___vfiprintf_internal_r+0x748>
1000b330:	d8c00317 	ldw	r3,12(sp)
1000b334:	0005883a 	mov	r2,zero
1000b338:	1d400017 	ldw	r21,0(r3)
1000b33c:	1d800117 	ldw	r22,4(r3)
1000b340:	18c00204 	addi	r3,r3,8
1000b344:	d8c00315 	stw	r3,12(sp)
1000b348:	003e7a06 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b34c:	b0016a1e 	bne	r22,zero,1000b8f8 <___vfiprintf_internal_r+0x1128>
1000b350:	a88002a8 	cmpgeui	r2,r21,10
1000b354:	1001681e 	bne	r2,zero,1000b8f8 <___vfiprintf_internal_r+0x1128>
1000b358:	ad400c04 	addi	r21,r21,48
1000b35c:	dd4015c5 	stb	r21,87(sp)
1000b360:	6029883a 	mov	r20,r12
1000b364:	05800044 	movi	r22,1
1000b368:	ddc015c4 	addi	r23,sp,87
1000b36c:	482b883a 	mov	r21,r9
1000b370:	4d80010e 	bge	r9,r22,1000b378 <___vfiprintf_internal_r+0xba8>
1000b374:	b02b883a 	mov	r21,r22
1000b378:	6b403fcc 	andi	r13,r13,255
1000b37c:	6b40201c 	xori	r13,r13,128
1000b380:	6b7fe004 	addi	r13,r13,-128
1000b384:	683efd26 	beq	r13,zero,1000af7c <___vfiprintf_internal_r+0x7ac>
1000b388:	ad400044 	addi	r21,r21,1
1000b38c:	003efb06 	br	1000af7c <___vfiprintf_internal_r+0x7ac>
1000b390:	882f883a 	mov	r23,r17
1000b394:	d9000417 	ldw	r4,16(sp)
1000b398:	a88003cc 	andi	r2,r21,15
1000b39c:	b006973a 	slli	r3,r22,28
1000b3a0:	2085883a 	add	r2,r4,r2
1000b3a4:	a82ad13a 	srli	r21,r21,4
1000b3a8:	10800003 	ldbu	r2,0(r2)
1000b3ac:	b02cd13a 	srli	r22,r22,4
1000b3b0:	bdffffc4 	addi	r23,r23,-1
1000b3b4:	1d6ab03a 	or	r21,r3,r21
1000b3b8:	b8800005 	stb	r2,0(r23)
1000b3bc:	ad84b03a 	or	r2,r21,r22
1000b3c0:	103ff41e 	bne	r2,zero,1000b394 <___vfiprintf_internal_r+0xbc4>
1000b3c4:	8dedc83a 	sub	r22,r17,r23
1000b3c8:	6029883a 	mov	r20,r12
1000b3cc:	003fe706 	br	1000b36c <___vfiprintf_internal_r+0xb9c>
1000b3d0:	01800044 	movi	r6,1
1000b3d4:	000b883a 	mov	r5,zero
1000b3d8:	8807883a 	mov	r3,r17
1000b3dc:	003f4b06 	br	1000b10c <___vfiprintf_internal_r+0x93c>
1000b3e0:	8559c83a 	sub	r12,r16,r21
1000b3e4:	033f1b0e 	bge	zero,r12,1000b054 <___vfiprintf_internal_r+0x884>
1000b3e8:	61800450 	cmplti	r6,r12,17
1000b3ec:	01c40074 	movhi	r7,4097
1000b3f0:	3001af1e 	bne	r6,zero,1000bab0 <___vfiprintf_internal_r+0x12e0>
1000b3f4:	39cb3404 	addi	r7,r7,11472
1000b3f8:	03400404 	movi	r13,16
1000b3fc:	00000606 	br	1000b418 <___vfiprintf_internal_r+0xc48>
1000b400:	21800084 	addi	r6,r4,2
1000b404:	42000204 	addi	r8,r8,8
1000b408:	1809883a 	mov	r4,r3
1000b40c:	633ffc04 	addi	r12,r12,-16
1000b410:	60c00448 	cmpgei	r3,r12,17
1000b414:	18001c26 	beq	r3,zero,1000b488 <___vfiprintf_internal_r+0xcb8>
1000b418:	20c00044 	addi	r3,r4,1
1000b41c:	10800404 	addi	r2,r2,16
1000b420:	41c00015 	stw	r7,0(r8)
1000b424:	43400115 	stw	r13,4(r8)
1000b428:	d8800b15 	stw	r2,44(sp)
1000b42c:	d8c00a15 	stw	r3,40(sp)
1000b430:	19400208 	cmpgei	r5,r3,8
1000b434:	283ff226 	beq	r5,zero,1000b400 <___vfiprintf_internal_r+0xc30>
1000b438:	d9800904 	addi	r6,sp,36
1000b43c:	900b883a 	mov	r5,r18
1000b440:	9809883a 	mov	r4,r19
1000b444:	10006326 	beq	r2,zero,1000b5d4 <___vfiprintf_internal_r+0xe04>
1000b448:	d9c00515 	stw	r7,20(sp)
1000b44c:	db000215 	stw	r12,8(sp)
1000b450:	da400115 	stw	r9,4(sp)
1000b454:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b458:	103db01e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b45c:	db000217 	ldw	r12,8(sp)
1000b460:	d9000a17 	ldw	r4,40(sp)
1000b464:	d8800b17 	ldw	r2,44(sp)
1000b468:	633ffc04 	addi	r12,r12,-16
1000b46c:	60c00448 	cmpgei	r3,r12,17
1000b470:	8811883a 	mov	r8,r17
1000b474:	21800044 	addi	r6,r4,1
1000b478:	d9c00517 	ldw	r7,20(sp)
1000b47c:	03400404 	movi	r13,16
1000b480:	da400117 	ldw	r9,4(sp)
1000b484:	183fe41e 	bne	r3,zero,1000b418 <___vfiprintf_internal_r+0xc48>
1000b488:	43400204 	addi	r13,r8,8
1000b48c:	1305883a 	add	r2,r2,r12
1000b490:	41c00015 	stw	r7,0(r8)
1000b494:	43000115 	stw	r12,4(r8)
1000b498:	d8800b15 	stw	r2,44(sp)
1000b49c:	d9800a15 	stw	r6,40(sp)
1000b4a0:	30c00208 	cmpgei	r3,r6,8
1000b4a4:	1800e226 	beq	r3,zero,1000b830 <___vfiprintf_internal_r+0x1060>
1000b4a8:	10015726 	beq	r2,zero,1000ba08 <___vfiprintf_internal_r+0x1238>
1000b4ac:	d9800904 	addi	r6,sp,36
1000b4b0:	900b883a 	mov	r5,r18
1000b4b4:	9809883a 	mov	r4,r19
1000b4b8:	da400115 	stw	r9,4(sp)
1000b4bc:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b4c0:	103d961e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b4c4:	da400117 	ldw	r9,4(sp)
1000b4c8:	d9000a17 	ldw	r4,40(sp)
1000b4cc:	d8800b17 	ldw	r2,44(sp)
1000b4d0:	4d93c83a 	sub	r9,r9,r22
1000b4d4:	d8c01804 	addi	r3,sp,96
1000b4d8:	21400044 	addi	r5,r4,1
1000b4dc:	8811883a 	mov	r8,r17
1000b4e0:	027ede0e 	bge	zero,r9,1000b05c <___vfiprintf_internal_r+0x88c>
1000b4e4:	49800450 	cmplti	r6,r9,17
1000b4e8:	01c40074 	movhi	r7,4097
1000b4ec:	3001431e 	bne	r6,zero,1000b9fc <___vfiprintf_internal_r+0x122c>
1000b4f0:	39cb3404 	addi	r7,r7,11472
1000b4f4:	03000404 	movi	r12,16
1000b4f8:	00000606 	br	1000b514 <___vfiprintf_internal_r+0xd44>
1000b4fc:	21400084 	addi	r5,r4,2
1000b500:	42000204 	addi	r8,r8,8
1000b504:	1809883a 	mov	r4,r3
1000b508:	4a7ffc04 	addi	r9,r9,-16
1000b50c:	48c00448 	cmpgei	r3,r9,17
1000b510:	18001a26 	beq	r3,zero,1000b57c <___vfiprintf_internal_r+0xdac>
1000b514:	20c00044 	addi	r3,r4,1
1000b518:	10800404 	addi	r2,r2,16
1000b51c:	41c00015 	stw	r7,0(r8)
1000b520:	43000115 	stw	r12,4(r8)
1000b524:	d8800b15 	stw	r2,44(sp)
1000b528:	d8c00a15 	stw	r3,40(sp)
1000b52c:	19400208 	cmpgei	r5,r3,8
1000b530:	283ff226 	beq	r5,zero,1000b4fc <___vfiprintf_internal_r+0xd2c>
1000b534:	d9800904 	addi	r6,sp,36
1000b538:	900b883a 	mov	r5,r18
1000b53c:	9809883a 	mov	r4,r19
1000b540:	10001a26 	beq	r2,zero,1000b5ac <___vfiprintf_internal_r+0xddc>
1000b544:	d9c00215 	stw	r7,8(sp)
1000b548:	da400115 	stw	r9,4(sp)
1000b54c:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b550:	103d721e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b554:	da400117 	ldw	r9,4(sp)
1000b558:	d9000a17 	ldw	r4,40(sp)
1000b55c:	d8800b17 	ldw	r2,44(sp)
1000b560:	4a7ffc04 	addi	r9,r9,-16
1000b564:	48c00448 	cmpgei	r3,r9,17
1000b568:	8811883a 	mov	r8,r17
1000b56c:	21400044 	addi	r5,r4,1
1000b570:	d9c00217 	ldw	r7,8(sp)
1000b574:	03000404 	movi	r12,16
1000b578:	183fe61e 	bne	r3,zero,1000b514 <___vfiprintf_internal_r+0xd44>
1000b57c:	41000204 	addi	r4,r8,8
1000b580:	1245883a 	add	r2,r2,r9
1000b584:	41c00015 	stw	r7,0(r8)
1000b588:	42400115 	stw	r9,4(r8)
1000b58c:	d8800b15 	stw	r2,44(sp)
1000b590:	d9400a15 	stw	r5,40(sp)
1000b594:	28c00208 	cmpgei	r3,r5,8
1000b598:	1800721e 	bne	r3,zero,1000b764 <___vfiprintf_internal_r+0xf94>
1000b59c:	29400044 	addi	r5,r5,1
1000b5a0:	20c00204 	addi	r3,r4,8
1000b5a4:	2011883a 	mov	r8,r4
1000b5a8:	003eac06 	br	1000b05c <___vfiprintf_internal_r+0x88c>
1000b5ac:	01400044 	movi	r5,1
1000b5b0:	0009883a 	mov	r4,zero
1000b5b4:	8811883a 	mov	r8,r17
1000b5b8:	003fd306 	br	1000b508 <___vfiprintf_internal_r+0xd38>
1000b5bc:	d9800904 	addi	r6,sp,36
1000b5c0:	900b883a 	mov	r5,r18
1000b5c4:	9809883a 	mov	r4,r19
1000b5c8:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b5cc:	103ebc26 	beq	r2,zero,1000b0c0 <___vfiprintf_internal_r+0x8f0>
1000b5d0:	003d5206 	br	1000ab1c <___vfiprintf_internal_r+0x34c>
1000b5d4:	01800044 	movi	r6,1
1000b5d8:	0009883a 	mov	r4,zero
1000b5dc:	8811883a 	mov	r8,r17
1000b5e0:	003f8a06 	br	1000b40c <___vfiprintf_internal_r+0xc3c>
1000b5e4:	10007026 	beq	r2,zero,1000b7a8 <___vfiprintf_internal_r+0xfd8>
1000b5e8:	d9800904 	addi	r6,sp,36
1000b5ec:	900b883a 	mov	r5,r18
1000b5f0:	9809883a 	mov	r4,r19
1000b5f4:	da400515 	stw	r9,20(sp)
1000b5f8:	db000215 	stw	r12,8(sp)
1000b5fc:	db400115 	stw	r13,4(sp)
1000b600:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b604:	103d451e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b608:	d9000a17 	ldw	r4,40(sp)
1000b60c:	d8800b17 	ldw	r2,44(sp)
1000b610:	d8c01804 	addi	r3,sp,96
1000b614:	21400044 	addi	r5,r4,1
1000b618:	8811883a 	mov	r8,r17
1000b61c:	da400517 	ldw	r9,20(sp)
1000b620:	db000217 	ldw	r12,8(sp)
1000b624:	db400117 	ldw	r13,4(sp)
1000b628:	003e6f06 	br	1000afe8 <___vfiprintf_internal_r+0x818>
1000b62c:	d8800884 	addi	r2,sp,34
1000b630:	d8801615 	stw	r2,88(sp)
1000b634:	00800084 	movi	r2,2
1000b638:	d8801715 	stw	r2,92(sp)
1000b63c:	d8c01804 	addi	r3,sp,96
1000b640:	01400044 	movi	r5,1
1000b644:	1811883a 	mov	r8,r3
1000b648:	2809883a 	mov	r4,r5
1000b64c:	21400044 	addi	r5,r4,1
1000b650:	40c00204 	addi	r3,r8,8
1000b654:	003e7d06 	br	1000b04c <___vfiprintf_internal_r+0x87c>
1000b658:	a019883a 	mov	r12,r20
1000b65c:	003f0506 	br	1000b274 <___vfiprintf_internal_r+0xaa4>
1000b660:	19400450 	cmplti	r5,r3,17
1000b664:	01c40074 	movhi	r7,4097
1000b668:	2801031e 	bne	r5,zero,1000ba78 <___vfiprintf_internal_r+0x12a8>
1000b66c:	39cb3804 	addi	r7,r7,11488
1000b670:	03800404 	movi	r14,16
1000b674:	00000706 	br	1000b694 <___vfiprintf_internal_r+0xec4>
1000b678:	23c00084 	addi	r15,r4,2
1000b67c:	42000204 	addi	r8,r8,8
1000b680:	3009883a 	mov	r4,r6
1000b684:	18fffc04 	addi	r3,r3,-16
1000b688:	19400448 	cmpgei	r5,r3,17
1000b68c:	28002026 	beq	r5,zero,1000b710 <___vfiprintf_internal_r+0xf40>
1000b690:	21800044 	addi	r6,r4,1
1000b694:	10800404 	addi	r2,r2,16
1000b698:	41c00015 	stw	r7,0(r8)
1000b69c:	43800115 	stw	r14,4(r8)
1000b6a0:	d8800b15 	stw	r2,44(sp)
1000b6a4:	d9800a15 	stw	r6,40(sp)
1000b6a8:	31400208 	cmpgei	r5,r6,8
1000b6ac:	283ff226 	beq	r5,zero,1000b678 <___vfiprintf_internal_r+0xea8>
1000b6b0:	d9800904 	addi	r6,sp,36
1000b6b4:	900b883a 	mov	r5,r18
1000b6b8:	9809883a 	mov	r4,r19
1000b6bc:	10001f26 	beq	r2,zero,1000b73c <___vfiprintf_internal_r+0xf6c>
1000b6c0:	d9c00715 	stw	r7,28(sp)
1000b6c4:	d8c00615 	stw	r3,24(sp)
1000b6c8:	da400515 	stw	r9,20(sp)
1000b6cc:	db000215 	stw	r12,8(sp)
1000b6d0:	db400115 	stw	r13,4(sp)
1000b6d4:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b6d8:	103d101e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b6dc:	d8c00617 	ldw	r3,24(sp)
1000b6e0:	d9000a17 	ldw	r4,40(sp)
1000b6e4:	d8800b17 	ldw	r2,44(sp)
1000b6e8:	18fffc04 	addi	r3,r3,-16
1000b6ec:	19400448 	cmpgei	r5,r3,17
1000b6f0:	8811883a 	mov	r8,r17
1000b6f4:	23c00044 	addi	r15,r4,1
1000b6f8:	d9c00717 	ldw	r7,28(sp)
1000b6fc:	03800404 	movi	r14,16
1000b700:	da400517 	ldw	r9,20(sp)
1000b704:	db000217 	ldw	r12,8(sp)
1000b708:	db400117 	ldw	r13,4(sp)
1000b70c:	283fe01e 	bne	r5,zero,1000b690 <___vfiprintf_internal_r+0xec0>
1000b710:	10c5883a 	add	r2,r2,r3
1000b714:	40c00115 	stw	r3,4(r8)
1000b718:	41c00015 	stw	r7,0(r8)
1000b71c:	d8800b15 	stw	r2,44(sp)
1000b720:	dbc00a15 	stw	r15,40(sp)
1000b724:	78c00208 	cmpgei	r3,r15,8
1000b728:	18002c1e 	bne	r3,zero,1000b7dc <___vfiprintf_internal_r+0x100c>
1000b72c:	42000204 	addi	r8,r8,8
1000b730:	79400044 	addi	r5,r15,1
1000b734:	7809883a 	mov	r4,r15
1000b738:	003e1b06 	br	1000afa8 <___vfiprintf_internal_r+0x7d8>
1000b73c:	0009883a 	mov	r4,zero
1000b740:	03c00044 	movi	r15,1
1000b744:	8811883a 	mov	r8,r17
1000b748:	003fce06 	br	1000b684 <___vfiprintf_internal_r+0xeb4>
1000b74c:	8540010e 	bge	r16,r21,1000b754 <___vfiprintf_internal_r+0xf84>
1000b750:	a821883a 	mov	r16,r21
1000b754:	d8800017 	ldw	r2,0(sp)
1000b758:	1405883a 	add	r2,r2,r16
1000b75c:	d8800015 	stw	r2,0(sp)
1000b760:	003e5706 	br	1000b0c0 <___vfiprintf_internal_r+0x8f0>
1000b764:	10008126 	beq	r2,zero,1000b96c <___vfiprintf_internal_r+0x119c>
1000b768:	d9800904 	addi	r6,sp,36
1000b76c:	900b883a 	mov	r5,r18
1000b770:	9809883a 	mov	r4,r19
1000b774:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b778:	103ce81e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b77c:	d9400a17 	ldw	r5,40(sp)
1000b780:	d8800b17 	ldw	r2,44(sp)
1000b784:	d8c01804 	addi	r3,sp,96
1000b788:	29400044 	addi	r5,r5,1
1000b78c:	8811883a 	mov	r8,r17
1000b790:	003e3206 	br	1000b05c <___vfiprintf_internal_r+0x88c>
1000b794:	d8000a15 	stw	zero,40(sp)
1000b798:	8811883a 	mov	r8,r17
1000b79c:	003c4e06 	br	1000a8d8 <___vfiprintf_internal_r+0x108>
1000b7a0:	002d883a 	mov	r22,zero
1000b7a4:	003d4406 	br	1000acb8 <___vfiprintf_internal_r+0x4e8>
1000b7a8:	68003326 	beq	r13,zero,1000b878 <___vfiprintf_internal_r+0x10a8>
1000b7ac:	d8800884 	addi	r2,sp,34
1000b7b0:	d8801615 	stw	r2,88(sp)
1000b7b4:	00800084 	movi	r2,2
1000b7b8:	d8801715 	stw	r2,92(sp)
1000b7bc:	da001804 	addi	r8,sp,96
1000b7c0:	01000044 	movi	r4,1
1000b7c4:	003fa106 	br	1000b64c <___vfiprintf_internal_r+0xe7c>
1000b7c8:	d8c01804 	addi	r3,sp,96
1000b7cc:	01400044 	movi	r5,1
1000b7d0:	0009883a 	mov	r4,zero
1000b7d4:	8811883a 	mov	r8,r17
1000b7d8:	003e1c06 	br	1000b04c <___vfiprintf_internal_r+0x87c>
1000b7dc:	10003826 	beq	r2,zero,1000b8c0 <___vfiprintf_internal_r+0x10f0>
1000b7e0:	d9800904 	addi	r6,sp,36
1000b7e4:	900b883a 	mov	r5,r18
1000b7e8:	9809883a 	mov	r4,r19
1000b7ec:	da400515 	stw	r9,20(sp)
1000b7f0:	db000215 	stw	r12,8(sp)
1000b7f4:	db400115 	stw	r13,4(sp)
1000b7f8:	000a6c40 	call	1000a6c4 <__sprint_r.part.0>
1000b7fc:	103cc71e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0x34c>
1000b800:	d9000a17 	ldw	r4,40(sp)
1000b804:	d8800b17 	ldw	r2,44(sp)
1000b808:	8811883a 	mov	r8,r17
1000b80c:	21400044 	addi	r5,r4,1
1000b810:	da400517 	ldw	r9,20(sp)
1000b814:	db000217 	ldw	r12,8(sp)
1000b818:	db400117 	ldw	r13,4(sp)
1000b81c:	003de206 	br	1000afa8 <___vfiprintf_internal_r+0x7d8>
1000b820:	e029883a 	mov	r20,fp
1000b824:	003c3106 	br	1000a8ec <___vfiprintf_internal_r+0x11c>
1000b828:	882f883a 	mov	r23,r17
1000b82c:	003ecf06 	br	1000b36c <___vfiprintf_internal_r+0xb9c>
1000b830:	31400044 	addi	r5,r6,1
1000b834:	68c00204 	addi	r3,r13,8
1000b838:	3009883a 	mov	r4,r6
1000b83c:	6811883a 	mov	r8,r13
1000b840:	003e0406 	br	1000b054 <___vfiprintf_internal_r+0x884>
1000b844:	00c00c04 	movi	r3,48
1000b848:	d88008c5 	stb	r2,35(sp)
1000b84c:	d8c00885 	stb	r3,34(sp)
1000b850:	63000094 	ori	r12,r12,2
1000b854:	00800084 	movi	r2,2
1000b858:	003d3606 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b85c:	d9400017 	ldw	r5,0(sp)
1000b860:	20800017 	ldw	r2,0(r4)
1000b864:	d8c00315 	stw	r3,12(sp)
1000b868:	2809d7fa 	srai	r4,r5,31
1000b86c:	11400015 	stw	r5,0(r2)
1000b870:	11000115 	stw	r4,4(r2)
1000b874:	003bff06 	br	1000a874 <___vfiprintf_internal_r+0xa4>
1000b878:	0009883a 	mov	r4,zero
1000b87c:	d8c01804 	addi	r3,sp,96
1000b880:	01400044 	movi	r5,1
1000b884:	8811883a 	mov	r8,r17
1000b888:	003df006 	br	1000b04c <___vfiprintf_internal_r+0x87c>
1000b88c:	0421c83a 	sub	r16,zero,r16
1000b890:	ddc00315 	stw	r23,12(sp)
1000b894:	003cdb06 	br	1000ac04 <___vfiprintf_internal_r+0x434>
1000b898:	b809883a 	mov	r4,r23
1000b89c:	da000215 	stw	r8,8(sp)
1000b8a0:	db000115 	stw	r12,4(sp)
1000b8a4:	00035a80 	call	100035a8 <strlen>
1000b8a8:	102d883a 	mov	r22,r2
1000b8ac:	102b883a 	mov	r21,r2
1000b8b0:	dd000315 	stw	r20,12(sp)
1000b8b4:	db000117 	ldw	r12,4(sp)
1000b8b8:	da000217 	ldw	r8,8(sp)
1000b8bc:	003dad06 	br	1000af74 <___vfiprintf_internal_r+0x7a4>
1000b8c0:	d8c00847 	ldb	r3,33(sp)
1000b8c4:	1800551e 	bne	r3,zero,1000ba1c <___vfiprintf_internal_r+0x124c>
1000b8c8:	683f581e 	bne	r13,zero,1000b62c <___vfiprintf_internal_r+0xe5c>
1000b8cc:	0009883a 	mov	r4,zero
1000b8d0:	d8c01804 	addi	r3,sp,96
1000b8d4:	01400044 	movi	r5,1
1000b8d8:	8811883a 	mov	r8,r17
1000b8dc:	003ddd06 	br	1000b054 <___vfiprintf_internal_r+0x884>
1000b8e0:	d8800317 	ldw	r2,12(sp)
1000b8e4:	10800017 	ldw	r2,0(r2)
1000b8e8:	d8c00315 	stw	r3,12(sp)
1000b8ec:	d8c00017 	ldw	r3,0(sp)
1000b8f0:	10c00015 	stw	r3,0(r2)
1000b8f4:	003bdf06 	br	1000a874 <___vfiprintf_internal_r+0xa4>
1000b8f8:	882f883a 	mov	r23,r17
1000b8fc:	00000206 	br	1000b908 <___vfiprintf_internal_r+0x1138>
1000b900:	102b883a 	mov	r21,r2
1000b904:	182d883a 	mov	r22,r3
1000b908:	a809883a 	mov	r4,r21
1000b90c:	b00b883a 	mov	r5,r22
1000b910:	01800284 	movi	r6,10
1000b914:	000f883a 	mov	r7,zero
1000b918:	db400615 	stw	r13,24(sp)
1000b91c:	da000515 	stw	r8,20(sp)
1000b920:	da400215 	stw	r9,8(sp)
1000b924:	db000115 	stw	r12,4(sp)
1000b928:	000cb980 	call	1000cb98 <__umoddi3>
1000b92c:	10800c04 	addi	r2,r2,48
1000b930:	bdffffc4 	addi	r23,r23,-1
1000b934:	a809883a 	mov	r4,r21
1000b938:	b00b883a 	mov	r5,r22
1000b93c:	b8800005 	stb	r2,0(r23)
1000b940:	01800284 	movi	r6,10
1000b944:	000f883a 	mov	r7,zero
1000b948:	000c6000 	call	1000c600 <__udivdi3>
1000b94c:	db000117 	ldw	r12,4(sp)
1000b950:	da400217 	ldw	r9,8(sp)
1000b954:	da000517 	ldw	r8,20(sp)
1000b958:	db400617 	ldw	r13,24(sp)
1000b95c:	b03fe81e 	bne	r22,zero,1000b900 <___vfiprintf_internal_r+0x1130>
1000b960:	ad4002a8 	cmpgeui	r21,r21,10
1000b964:	a83fe61e 	bne	r21,zero,1000b900 <___vfiprintf_internal_r+0x1130>
1000b968:	003e9606 	br	1000b3c4 <___vfiprintf_internal_r+0xbf4>
1000b96c:	00c00044 	movi	r3,1
1000b970:	d8c00a15 	stw	r3,40(sp)
1000b974:	b005883a 	mov	r2,r22
1000b978:	ddc01615 	stw	r23,88(sp)
1000b97c:	dd801715 	stw	r22,92(sp)
1000b980:	dd800b15 	stw	r22,44(sp)
1000b984:	d8c01804 	addi	r3,sp,96
1000b988:	003dc306 	br	1000b098 <___vfiprintf_internal_r+0x8c8>
1000b98c:	10c00060 	cmpeqi	r3,r2,1
1000b990:	a019883a 	mov	r12,r20
1000b994:	183e3926 	beq	r3,zero,1000b27c <___vfiprintf_internal_r+0xaac>
1000b998:	003e6f06 	br	1000b358 <___vfiprintf_internal_r+0xb88>
1000b99c:	e0800043 	ldbu	r2,1(fp)
1000b9a0:	63000814 	ori	r12,r12,32
1000b9a4:	e7000044 	addi	fp,fp,1
1000b9a8:	10803fcc 	andi	r2,r2,255
1000b9ac:	1080201c 	xori	r2,r2,128
1000b9b0:	10bfe004 	addi	r2,r2,-128
1000b9b4:	003bd506 	br	1000a90c <___vfiprintf_internal_r+0x13c>
1000b9b8:	488001f0 	cmpltui	r2,r9,7
1000b9bc:	482d883a 	mov	r22,r9
1000b9c0:	1000011e 	bne	r2,zero,1000b9c8 <___vfiprintf_internal_r+0x11f8>
1000b9c4:	05800184 	movi	r22,6
1000b9c8:	05c40074 	movhi	r23,4097
1000b9cc:	b02b883a 	mov	r21,r22
1000b9d0:	dd000315 	stw	r20,12(sp)
1000b9d4:	bdcadc04 	addi	r23,r23,11120
1000b9d8:	003d6606 	br	1000af74 <___vfiprintf_internal_r+0x7a4>
1000b9dc:	d8800315 	stw	r2,12(sp)
1000b9e0:	002d883a 	mov	r22,zero
1000b9e4:	00800044 	movi	r2,1
1000b9e8:	003cd206 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b9ec:	d8800315 	stw	r2,12(sp)
1000b9f0:	002d883a 	mov	r22,zero
1000b9f4:	0005883a 	mov	r2,zero
1000b9f8:	003cce06 	br	1000ad34 <___vfiprintf_internal_r+0x564>
1000b9fc:	1809883a 	mov	r4,r3
1000ba00:	39cb3404 	addi	r7,r7,11472
1000ba04:	003ede06 	br	1000b580 <___vfiprintf_internal_r+0xdb0>
1000ba08:	d8c01804 	addi	r3,sp,96
1000ba0c:	01400044 	movi	r5,1
1000ba10:	0009883a 	mov	r4,zero
1000ba14:	8811883a 	mov	r8,r17
1000ba18:	003d8e06 	br	1000b054 <___vfiprintf_internal_r+0x884>
1000ba1c:	d8800844 	addi	r2,sp,33
1000ba20:	d8801615 	stw	r2,88(sp)
1000ba24:	00800044 	movi	r2,1
1000ba28:	d8801715 	stw	r2,92(sp)
1000ba2c:	d8c01804 	addi	r3,sp,96
1000ba30:	01400044 	movi	r5,1
1000ba34:	003d6806 	br	1000afd8 <___vfiprintf_internal_r+0x808>
1000ba38:	d9800845 	stb	r6,33(sp)
1000ba3c:	003c5506 	br	1000ab94 <___vfiprintf_internal_r+0x3c4>
1000ba40:	482b883a 	mov	r21,r9
1000ba44:	dd000315 	stw	r20,12(sp)
1000ba48:	482d883a 	mov	r22,r9
1000ba4c:	003d4906 	br	1000af74 <___vfiprintf_internal_r+0x7a4>
1000ba50:	d9800845 	stb	r6,33(sp)
1000ba54:	003cd906 	br	1000adbc <___vfiprintf_internal_r+0x5ec>
1000ba58:	d9800845 	stb	r6,33(sp)
1000ba5c:	003ce906 	br	1000ae04 <___vfiprintf_internal_r+0x634>
1000ba60:	d9800845 	stb	r6,33(sp)
1000ba64:	003c8a06 	br	1000ac90 <___vfiprintf_internal_r+0x4c0>
1000ba68:	d9800845 	stb	r6,33(sp)
1000ba6c:	003dd206 	br	1000b1b8 <___vfiprintf_internal_r+0x9e8>
1000ba70:	d9800845 	stb	r6,33(sp)
1000ba74:	003ddd06 	br	1000b1ec <___vfiprintf_internal_r+0xa1c>
1000ba78:	301f883a 	mov	r15,r6
1000ba7c:	39cb3804 	addi	r7,r7,11488
1000ba80:	003f2306 	br	1000b710 <___vfiprintf_internal_r+0xf40>
1000ba84:	d9800845 	stb	r6,33(sp)
1000ba88:	003d1606 	br	1000aee4 <___vfiprintf_internal_r+0x714>
1000ba8c:	d9800845 	stb	r6,33(sp)
1000ba90:	003d0406 	br	1000aea4 <___vfiprintf_internal_r+0x6d4>
1000ba94:	d9800845 	stb	r6,33(sp)
1000ba98:	003cb806 	br	1000ad7c <___vfiprintf_internal_r+0x5ac>
1000ba9c:	d9800845 	stb	r6,33(sp)
1000baa0:	003ddf06 	br	1000b220 <___vfiprintf_internal_r+0xa50>
1000baa4:	29800044 	addi	r6,r5,1
1000baa8:	39cb3804 	addi	r7,r7,11488
1000baac:	003db106 	br	1000b174 <___vfiprintf_internal_r+0x9a4>
1000bab0:	181b883a 	mov	r13,r3
1000bab4:	280d883a 	mov	r6,r5
1000bab8:	39cb3404 	addi	r7,r7,11472
1000babc:	003e7306 	br	1000b48c <___vfiprintf_internal_r+0xcbc>
1000bac0:	00bfffc4 	movi	r2,-1
1000bac4:	d8800015 	stw	r2,0(sp)
1000bac8:	003c1706 	br	1000ab28 <___vfiprintf_internal_r+0x358>
1000bacc:	d8800317 	ldw	r2,12(sp)
1000bad0:	12400017 	ldw	r9,0(r2)
1000bad4:	15c00104 	addi	r23,r2,4
1000bad8:	4800010e 	bge	r9,zero,1000bae0 <___vfiprintf_internal_r+0x1310>
1000badc:	027fffc4 	movi	r9,-1
1000bae0:	e0800043 	ldbu	r2,1(fp)
1000bae4:	ddc00315 	stw	r23,12(sp)
1000bae8:	2039883a 	mov	fp,r4
1000baec:	10803fcc 	andi	r2,r2,255
1000baf0:	1080201c 	xori	r2,r2,128
1000baf4:	10bfe004 	addi	r2,r2,-128
1000baf8:	003b8406 	br	1000a90c <___vfiprintf_internal_r+0x13c>

1000bafc <__vfiprintf_internal>:
1000bafc:	00840074 	movhi	r2,4097
1000bb00:	300f883a 	mov	r7,r6
1000bb04:	280d883a 	mov	r6,r5
1000bb08:	200b883a 	mov	r5,r4
1000bb0c:	1114a817 	ldw	r4,21152(r2)
1000bb10:	000a7d01 	jmpi	1000a7d0 <___vfiprintf_internal_r>

1000bb14 <__sbprintf>:
1000bb14:	2880030b 	ldhu	r2,12(r5)
1000bb18:	2b001917 	ldw	r12,100(r5)
1000bb1c:	2ac0038b 	ldhu	r11,14(r5)
1000bb20:	2a800717 	ldw	r10,28(r5)
1000bb24:	2a400917 	ldw	r9,36(r5)
1000bb28:	defee204 	addi	sp,sp,-1144
1000bb2c:	da001a04 	addi	r8,sp,104
1000bb30:	00c10004 	movi	r3,1024
1000bb34:	dc011a15 	stw	r16,1128(sp)
1000bb38:	10bfff4c 	andi	r2,r2,65533
1000bb3c:	2821883a 	mov	r16,r5
1000bb40:	d80b883a 	mov	r5,sp
1000bb44:	dc811c15 	stw	r18,1136(sp)
1000bb48:	dc411b15 	stw	r17,1132(sp)
1000bb4c:	dfc11d15 	stw	ra,1140(sp)
1000bb50:	2025883a 	mov	r18,r4
1000bb54:	d880030d 	sth	r2,12(sp)
1000bb58:	db001915 	stw	r12,100(sp)
1000bb5c:	dac0038d 	sth	r11,14(sp)
1000bb60:	da800715 	stw	r10,28(sp)
1000bb64:	da400915 	stw	r9,36(sp)
1000bb68:	da000015 	stw	r8,0(sp)
1000bb6c:	da000415 	stw	r8,16(sp)
1000bb70:	d8c00215 	stw	r3,8(sp)
1000bb74:	d8c00515 	stw	r3,20(sp)
1000bb78:	d8000615 	stw	zero,24(sp)
1000bb7c:	000a7d00 	call	1000a7d0 <___vfiprintf_internal_r>
1000bb80:	1023883a 	mov	r17,r2
1000bb84:	10000d0e 	bge	r2,zero,1000bbbc <__sbprintf+0xa8>
1000bb88:	d880030b 	ldhu	r2,12(sp)
1000bb8c:	1080100c 	andi	r2,r2,64
1000bb90:	10000326 	beq	r2,zero,1000bba0 <__sbprintf+0x8c>
1000bb94:	8080030b 	ldhu	r2,12(r16)
1000bb98:	10801014 	ori	r2,r2,64
1000bb9c:	8080030d 	sth	r2,12(r16)
1000bba0:	8805883a 	mov	r2,r17
1000bba4:	dfc11d17 	ldw	ra,1140(sp)
1000bba8:	dc811c17 	ldw	r18,1136(sp)
1000bbac:	dc411b17 	ldw	r17,1132(sp)
1000bbb0:	dc011a17 	ldw	r16,1128(sp)
1000bbb4:	dec11e04 	addi	sp,sp,1144
1000bbb8:	f800283a 	ret
1000bbbc:	d80b883a 	mov	r5,sp
1000bbc0:	9009883a 	mov	r4,r18
1000bbc4:	00074d80 	call	100074d8 <_fflush_r>
1000bbc8:	103fef26 	beq	r2,zero,1000bb88 <__sbprintf+0x74>
1000bbcc:	047fffc4 	movi	r17,-1
1000bbd0:	003fed06 	br	1000bb88 <__sbprintf+0x74>

1000bbd4 <_write_r>:
1000bbd4:	defffe04 	addi	sp,sp,-8
1000bbd8:	2805883a 	mov	r2,r5
1000bbdc:	dc000015 	stw	r16,0(sp)
1000bbe0:	300b883a 	mov	r5,r6
1000bbe4:	2021883a 	mov	r16,r4
1000bbe8:	380d883a 	mov	r6,r7
1000bbec:	1009883a 	mov	r4,r2
1000bbf0:	00840074 	movhi	r2,4097
1000bbf4:	dfc00115 	stw	ra,4(sp)
1000bbf8:	101d4015 	stw	zero,29952(r2)
1000bbfc:	001022c0 	call	1001022c <write>
1000bc00:	10ffffd8 	cmpnei	r3,r2,-1
1000bc04:	18000426 	beq	r3,zero,1000bc18 <_write_r+0x44>
1000bc08:	dfc00117 	ldw	ra,4(sp)
1000bc0c:	dc000017 	ldw	r16,0(sp)
1000bc10:	dec00204 	addi	sp,sp,8
1000bc14:	f800283a 	ret
1000bc18:	00c40074 	movhi	r3,4097
1000bc1c:	18dd4017 	ldw	r3,29952(r3)
1000bc20:	183ff926 	beq	r3,zero,1000bc08 <_write_r+0x34>
1000bc24:	80c00015 	stw	r3,0(r16)
1000bc28:	dfc00117 	ldw	ra,4(sp)
1000bc2c:	dc000017 	ldw	r16,0(sp)
1000bc30:	dec00204 	addi	sp,sp,8
1000bc34:	f800283a 	ret

1000bc38 <_close_r>:
1000bc38:	defffe04 	addi	sp,sp,-8
1000bc3c:	dc000015 	stw	r16,0(sp)
1000bc40:	00840074 	movhi	r2,4097
1000bc44:	2021883a 	mov	r16,r4
1000bc48:	2809883a 	mov	r4,r5
1000bc4c:	dfc00115 	stw	ra,4(sp)
1000bc50:	101d4015 	stw	zero,29952(r2)
1000bc54:	000f9f80 	call	1000f9f8 <close>
1000bc58:	10ffffd8 	cmpnei	r3,r2,-1
1000bc5c:	18000426 	beq	r3,zero,1000bc70 <_close_r+0x38>
1000bc60:	dfc00117 	ldw	ra,4(sp)
1000bc64:	dc000017 	ldw	r16,0(sp)
1000bc68:	dec00204 	addi	sp,sp,8
1000bc6c:	f800283a 	ret
1000bc70:	00c40074 	movhi	r3,4097
1000bc74:	18dd4017 	ldw	r3,29952(r3)
1000bc78:	183ff926 	beq	r3,zero,1000bc60 <_close_r+0x28>
1000bc7c:	80c00015 	stw	r3,0(r16)
1000bc80:	dfc00117 	ldw	ra,4(sp)
1000bc84:	dc000017 	ldw	r16,0(sp)
1000bc88:	dec00204 	addi	sp,sp,8
1000bc8c:	f800283a 	ret

1000bc90 <_calloc_r>:
1000bc90:	298b383a 	mul	r5,r5,r6
1000bc94:	deffff04 	addi	sp,sp,-4
1000bc98:	dfc00015 	stw	ra,0(sp)
1000bc9c:	00084cc0 	call	100084cc <_malloc_r>
1000bca0:	1007883a 	mov	r3,r2
1000bca4:	10000c26 	beq	r2,zero,1000bcd8 <_calloc_r+0x48>
1000bca8:	11bfff17 	ldw	r6,-4(r2)
1000bcac:	00bfff04 	movi	r2,-4
1000bcb0:	308c703a 	and	r6,r6,r2
1000bcb4:	31bfff04 	addi	r6,r6,-4
1000bcb8:	30800968 	cmpgeui	r2,r6,37
1000bcbc:	1000141e 	bne	r2,zero,1000bd10 <_calloc_r+0x80>
1000bcc0:	30800530 	cmpltui	r2,r6,20
1000bcc4:	10000826 	beq	r2,zero,1000bce8 <_calloc_r+0x58>
1000bcc8:	1805883a 	mov	r2,r3
1000bccc:	10000015 	stw	zero,0(r2)
1000bcd0:	10000115 	stw	zero,4(r2)
1000bcd4:	10000215 	stw	zero,8(r2)
1000bcd8:	1805883a 	mov	r2,r3
1000bcdc:	dfc00017 	ldw	ra,0(sp)
1000bce0:	dec00104 	addi	sp,sp,4
1000bce4:	f800283a 	ret
1000bce8:	18000015 	stw	zero,0(r3)
1000bcec:	18000115 	stw	zero,4(r3)
1000bcf0:	30800728 	cmpgeui	r2,r6,28
1000bcf4:	10000e26 	beq	r2,zero,1000bd30 <_calloc_r+0xa0>
1000bcf8:	18000215 	stw	zero,8(r3)
1000bcfc:	18000315 	stw	zero,12(r3)
1000bd00:	31800920 	cmpeqi	r6,r6,36
1000bd04:	30000c1e 	bne	r6,zero,1000bd38 <_calloc_r+0xa8>
1000bd08:	18800404 	addi	r2,r3,16
1000bd0c:	003fef06 	br	1000bccc <_calloc_r+0x3c>
1000bd10:	1809883a 	mov	r4,r3
1000bd14:	000b883a 	mov	r5,zero
1000bd18:	0008ed40 	call	10008ed4 <memset>
1000bd1c:	1007883a 	mov	r3,r2
1000bd20:	1805883a 	mov	r2,r3
1000bd24:	dfc00017 	ldw	ra,0(sp)
1000bd28:	dec00104 	addi	sp,sp,4
1000bd2c:	f800283a 	ret
1000bd30:	18800204 	addi	r2,r3,8
1000bd34:	003fe506 	br	1000bccc <_calloc_r+0x3c>
1000bd38:	18000415 	stw	zero,16(r3)
1000bd3c:	18800604 	addi	r2,r3,24
1000bd40:	18000515 	stw	zero,20(r3)
1000bd44:	003fe106 	br	1000bccc <_calloc_r+0x3c>

1000bd48 <_fclose_r>:
1000bd48:	defffc04 	addi	sp,sp,-16
1000bd4c:	dfc00315 	stw	ra,12(sp)
1000bd50:	dc800215 	stw	r18,8(sp)
1000bd54:	dc400115 	stw	r17,4(sp)
1000bd58:	dc000015 	stw	r16,0(sp)
1000bd5c:	28000726 	beq	r5,zero,1000bd7c <_fclose_r+0x34>
1000bd60:	2023883a 	mov	r17,r4
1000bd64:	2821883a 	mov	r16,r5
1000bd68:	20000226 	beq	r4,zero,1000bd74 <_fclose_r+0x2c>
1000bd6c:	20800e17 	ldw	r2,56(r4)
1000bd70:	10002726 	beq	r2,zero,1000be10 <_fclose_r+0xc8>
1000bd74:	8080030f 	ldh	r2,12(r16)
1000bd78:	1000081e 	bne	r2,zero,1000bd9c <_fclose_r+0x54>
1000bd7c:	0025883a 	mov	r18,zero
1000bd80:	9005883a 	mov	r2,r18
1000bd84:	dfc00317 	ldw	ra,12(sp)
1000bd88:	dc800217 	ldw	r18,8(sp)
1000bd8c:	dc400117 	ldw	r17,4(sp)
1000bd90:	dc000017 	ldw	r16,0(sp)
1000bd94:	dec00404 	addi	sp,sp,16
1000bd98:	f800283a 	ret
1000bd9c:	800b883a 	mov	r5,r16
1000bda0:	8809883a 	mov	r4,r17
1000bda4:	00072b00 	call	100072b0 <__sflush_r>
1000bda8:	1025883a 	mov	r18,r2
1000bdac:	80800b17 	ldw	r2,44(r16)
1000bdb0:	10000426 	beq	r2,zero,1000bdc4 <_fclose_r+0x7c>
1000bdb4:	81400717 	ldw	r5,28(r16)
1000bdb8:	8809883a 	mov	r4,r17
1000bdbc:	103ee83a 	callr	r2
1000bdc0:	10001716 	blt	r2,zero,1000be20 <_fclose_r+0xd8>
1000bdc4:	8080030b 	ldhu	r2,12(r16)
1000bdc8:	1080200c 	andi	r2,r2,128
1000bdcc:	1000181e 	bne	r2,zero,1000be30 <_fclose_r+0xe8>
1000bdd0:	81400c17 	ldw	r5,48(r16)
1000bdd4:	28000526 	beq	r5,zero,1000bdec <_fclose_r+0xa4>
1000bdd8:	80801004 	addi	r2,r16,64
1000bddc:	28800226 	beq	r5,r2,1000bde8 <_fclose_r+0xa0>
1000bde0:	8809883a 	mov	r4,r17
1000bde4:	00079c00 	call	100079c0 <_free_r>
1000bde8:	80000c15 	stw	zero,48(r16)
1000bdec:	81401117 	ldw	r5,68(r16)
1000bdf0:	28000326 	beq	r5,zero,1000be00 <_fclose_r+0xb8>
1000bdf4:	8809883a 	mov	r4,r17
1000bdf8:	00079c00 	call	100079c0 <_free_r>
1000bdfc:	80001115 	stw	zero,68(r16)
1000be00:	000786c0 	call	1000786c <__sfp_lock_acquire>
1000be04:	8000030d 	sth	zero,12(r16)
1000be08:	00078700 	call	10007870 <__sfp_lock_release>
1000be0c:	003fdc06 	br	1000bd80 <_fclose_r+0x38>
1000be10:	000785c0 	call	1000785c <__sinit>
1000be14:	8080030f 	ldh	r2,12(r16)
1000be18:	103fd826 	beq	r2,zero,1000bd7c <_fclose_r+0x34>
1000be1c:	003fdf06 	br	1000bd9c <_fclose_r+0x54>
1000be20:	8080030b 	ldhu	r2,12(r16)
1000be24:	04bfffc4 	movi	r18,-1
1000be28:	1080200c 	andi	r2,r2,128
1000be2c:	103fe826 	beq	r2,zero,1000bdd0 <_fclose_r+0x88>
1000be30:	81400417 	ldw	r5,16(r16)
1000be34:	8809883a 	mov	r4,r17
1000be38:	00079c00 	call	100079c0 <_free_r>
1000be3c:	003fe406 	br	1000bdd0 <_fclose_r+0x88>

1000be40 <fclose>:
1000be40:	00840074 	movhi	r2,4097
1000be44:	200b883a 	mov	r5,r4
1000be48:	1114a817 	ldw	r4,21152(r2)
1000be4c:	000bd481 	jmpi	1000bd48 <_fclose_r>

1000be50 <__fputwc>:
1000be50:	defff904 	addi	sp,sp,-28
1000be54:	dcc00415 	stw	r19,16(sp)
1000be58:	dc800315 	stw	r18,12(sp)
1000be5c:	dc000115 	stw	r16,4(sp)
1000be60:	dfc00615 	stw	ra,24(sp)
1000be64:	dd000515 	stw	r20,20(sp)
1000be68:	dc400215 	stw	r17,8(sp)
1000be6c:	2025883a 	mov	r18,r4
1000be70:	2827883a 	mov	r19,r5
1000be74:	3021883a 	mov	r16,r6
1000be78:	000c1680 	call	1000c168 <__locale_mb_cur_max>
1000be7c:	10800058 	cmpnei	r2,r2,1
1000be80:	1000071e 	bne	r2,zero,1000bea0 <__fputwc+0x50>
1000be84:	98bfffc4 	addi	r2,r19,-1
1000be88:	10803fe8 	cmpgeui	r2,r2,255
1000be8c:	1000041e 	bne	r2,zero,1000bea0 <__fputwc+0x50>
1000be90:	980b883a 	mov	r5,r19
1000be94:	dcc000c5 	stb	r19,3(sp)
1000be98:	05000044 	movi	r20,1
1000be9c:	00000a06 	br	1000bec8 <__fputwc+0x78>
1000bea0:	81c01704 	addi	r7,r16,92
1000bea4:	980d883a 	mov	r6,r19
1000bea8:	d94000c4 	addi	r5,sp,3
1000beac:	9009883a 	mov	r4,r18
1000beb0:	000c4d40 	call	1000c4d4 <_wcrtomb_r>
1000beb4:	1029883a 	mov	r20,r2
1000beb8:	10bfffd8 	cmpnei	r2,r2,-1
1000bebc:	10003426 	beq	r2,zero,1000bf90 <__fputwc+0x140>
1000bec0:	a0002926 	beq	r20,zero,1000bf68 <__fputwc+0x118>
1000bec4:	d94000c3 	ldbu	r5,3(sp)
1000bec8:	0023883a 	mov	r17,zero
1000becc:	00000a06 	br	1000bef8 <__fputwc+0xa8>
1000bed0:	80800017 	ldw	r2,0(r16)
1000bed4:	11400005 	stb	r5,0(r2)
1000bed8:	80800017 	ldw	r2,0(r16)
1000bedc:	10800044 	addi	r2,r2,1
1000bee0:	80800015 	stw	r2,0(r16)
1000bee4:	8c400044 	addi	r17,r17,1
1000bee8:	d88000c4 	addi	r2,sp,3
1000beec:	1445883a 	add	r2,r2,r17
1000bef0:	8d001d2e 	bgeu	r17,r20,1000bf68 <__fputwc+0x118>
1000bef4:	11400003 	ldbu	r5,0(r2)
1000bef8:	80800217 	ldw	r2,8(r16)
1000befc:	10bfffc4 	addi	r2,r2,-1
1000bf00:	80800215 	stw	r2,8(r16)
1000bf04:	103ff20e 	bge	r2,zero,1000bed0 <__fputwc+0x80>
1000bf08:	80c00617 	ldw	r3,24(r16)
1000bf0c:	10c01016 	blt	r2,r3,1000bf50 <__fputwc+0x100>
1000bf10:	80800017 	ldw	r2,0(r16)
1000bf14:	11400005 	stb	r5,0(r2)
1000bf18:	80800017 	ldw	r2,0(r16)
1000bf1c:	10c00003 	ldbu	r3,0(r2)
1000bf20:	10800044 	addi	r2,r2,1
1000bf24:	18c002a0 	cmpeqi	r3,r3,10
1000bf28:	183fed26 	beq	r3,zero,1000bee0 <__fputwc+0x90>
1000bf2c:	800d883a 	mov	r6,r16
1000bf30:	01400284 	movi	r5,10
1000bf34:	9009883a 	mov	r4,r18
1000bf38:	000c3780 	call	1000c378 <__swbuf_r>
1000bf3c:	10bfffe0 	cmpeqi	r2,r2,-1
1000bf40:	10803fcc 	andi	r2,r2,255
1000bf44:	103fe726 	beq	r2,zero,1000bee4 <__fputwc+0x94>
1000bf48:	053fffc4 	movi	r20,-1
1000bf4c:	00000706 	br	1000bf6c <__fputwc+0x11c>
1000bf50:	29403fcc 	andi	r5,r5,255
1000bf54:	800d883a 	mov	r6,r16
1000bf58:	9009883a 	mov	r4,r18
1000bf5c:	000c3780 	call	1000c378 <__swbuf_r>
1000bf60:	10bfffe0 	cmpeqi	r2,r2,-1
1000bf64:	003ff606 	br	1000bf40 <__fputwc+0xf0>
1000bf68:	9829883a 	mov	r20,r19
1000bf6c:	a005883a 	mov	r2,r20
1000bf70:	dfc00617 	ldw	ra,24(sp)
1000bf74:	dd000517 	ldw	r20,20(sp)
1000bf78:	dcc00417 	ldw	r19,16(sp)
1000bf7c:	dc800317 	ldw	r18,12(sp)
1000bf80:	dc400217 	ldw	r17,8(sp)
1000bf84:	dc000117 	ldw	r16,4(sp)
1000bf88:	dec00704 	addi	sp,sp,28
1000bf8c:	f800283a 	ret
1000bf90:	8080030b 	ldhu	r2,12(r16)
1000bf94:	10801014 	ori	r2,r2,64
1000bf98:	8080030d 	sth	r2,12(r16)
1000bf9c:	003ff306 	br	1000bf6c <__fputwc+0x11c>

1000bfa0 <_fputwc_r>:
1000bfa0:	3080030b 	ldhu	r2,12(r6)
1000bfa4:	10c8000c 	andi	r3,r2,8192
1000bfa8:	1800051e 	bne	r3,zero,1000bfc0 <_fputwc_r+0x20>
1000bfac:	30c01917 	ldw	r3,100(r6)
1000bfb0:	10880014 	ori	r2,r2,8192
1000bfb4:	3080030d 	sth	r2,12(r6)
1000bfb8:	18880014 	ori	r2,r3,8192
1000bfbc:	30801915 	stw	r2,100(r6)
1000bfc0:	000be501 	jmpi	1000be50 <__fputwc>

1000bfc4 <fputwc>:
1000bfc4:	defffc04 	addi	sp,sp,-16
1000bfc8:	00840074 	movhi	r2,4097
1000bfcc:	dc000115 	stw	r16,4(sp)
1000bfd0:	1414a817 	ldw	r16,21152(r2)
1000bfd4:	dc400215 	stw	r17,8(sp)
1000bfd8:	dfc00315 	stw	ra,12(sp)
1000bfdc:	2023883a 	mov	r17,r4
1000bfe0:	80000226 	beq	r16,zero,1000bfec <fputwc+0x28>
1000bfe4:	80800e17 	ldw	r2,56(r16)
1000bfe8:	10001026 	beq	r2,zero,1000c02c <fputwc+0x68>
1000bfec:	2880030b 	ldhu	r2,12(r5)
1000bff0:	10c8000c 	andi	r3,r2,8192
1000bff4:	1800051e 	bne	r3,zero,1000c00c <fputwc+0x48>
1000bff8:	28c01917 	ldw	r3,100(r5)
1000bffc:	10880014 	ori	r2,r2,8192
1000c000:	2880030d 	sth	r2,12(r5)
1000c004:	18880014 	ori	r2,r3,8192
1000c008:	28801915 	stw	r2,100(r5)
1000c00c:	280d883a 	mov	r6,r5
1000c010:	8009883a 	mov	r4,r16
1000c014:	880b883a 	mov	r5,r17
1000c018:	dfc00317 	ldw	ra,12(sp)
1000c01c:	dc400217 	ldw	r17,8(sp)
1000c020:	dc000117 	ldw	r16,4(sp)
1000c024:	dec00404 	addi	sp,sp,16
1000c028:	000be501 	jmpi	1000be50 <__fputwc>
1000c02c:	8009883a 	mov	r4,r16
1000c030:	d9400015 	stw	r5,0(sp)
1000c034:	000785c0 	call	1000785c <__sinit>
1000c038:	d9400017 	ldw	r5,0(sp)
1000c03c:	003feb06 	br	1000bfec <fputwc+0x28>

1000c040 <_fstat_r>:
1000c040:	defffe04 	addi	sp,sp,-8
1000c044:	2805883a 	mov	r2,r5
1000c048:	dc000015 	stw	r16,0(sp)
1000c04c:	300b883a 	mov	r5,r6
1000c050:	2021883a 	mov	r16,r4
1000c054:	1009883a 	mov	r4,r2
1000c058:	00840074 	movhi	r2,4097
1000c05c:	dfc00115 	stw	ra,4(sp)
1000c060:	101d4015 	stw	zero,29952(r2)
1000c064:	000fb300 	call	1000fb30 <fstat>
1000c068:	10ffffd8 	cmpnei	r3,r2,-1
1000c06c:	18000426 	beq	r3,zero,1000c080 <_fstat_r+0x40>
1000c070:	dfc00117 	ldw	ra,4(sp)
1000c074:	dc000017 	ldw	r16,0(sp)
1000c078:	dec00204 	addi	sp,sp,8
1000c07c:	f800283a 	ret
1000c080:	00c40074 	movhi	r3,4097
1000c084:	18dd4017 	ldw	r3,29952(r3)
1000c088:	183ff926 	beq	r3,zero,1000c070 <_fstat_r+0x30>
1000c08c:	80c00015 	stw	r3,0(r16)
1000c090:	dfc00117 	ldw	ra,4(sp)
1000c094:	dc000017 	ldw	r16,0(sp)
1000c098:	dec00204 	addi	sp,sp,8
1000c09c:	f800283a 	ret

1000c0a0 <_isatty_r>:
1000c0a0:	defffe04 	addi	sp,sp,-8
1000c0a4:	dc000015 	stw	r16,0(sp)
1000c0a8:	00840074 	movhi	r2,4097
1000c0ac:	2021883a 	mov	r16,r4
1000c0b0:	2809883a 	mov	r4,r5
1000c0b4:	dfc00115 	stw	ra,4(sp)
1000c0b8:	101d4015 	stw	zero,29952(r2)
1000c0bc:	000fc1c0 	call	1000fc1c <isatty>
1000c0c0:	10ffffd8 	cmpnei	r3,r2,-1
1000c0c4:	18000426 	beq	r3,zero,1000c0d8 <_isatty_r+0x38>
1000c0c8:	dfc00117 	ldw	ra,4(sp)
1000c0cc:	dc000017 	ldw	r16,0(sp)
1000c0d0:	dec00204 	addi	sp,sp,8
1000c0d4:	f800283a 	ret
1000c0d8:	00c40074 	movhi	r3,4097
1000c0dc:	18dd4017 	ldw	r3,29952(r3)
1000c0e0:	183ff926 	beq	r3,zero,1000c0c8 <_isatty_r+0x28>
1000c0e4:	80c00015 	stw	r3,0(r16)
1000c0e8:	dfc00117 	ldw	ra,4(sp)
1000c0ec:	dc000017 	ldw	r16,0(sp)
1000c0f0:	dec00204 	addi	sp,sp,8
1000c0f4:	f800283a 	ret

1000c0f8 <_setlocale_r>:
1000c0f8:	30001826 	beq	r6,zero,1000c15c <_setlocale_r+0x64>
1000c0fc:	01440074 	movhi	r5,4097
1000c100:	defffe04 	addi	sp,sp,-8
1000c104:	294b3d04 	addi	r5,r5,11508
1000c108:	3009883a 	mov	r4,r6
1000c10c:	dc000015 	stw	r16,0(sp)
1000c110:	dfc00115 	stw	ra,4(sp)
1000c114:	3021883a 	mov	r16,r6
1000c118:	000c2a00 	call	1000c2a0 <strcmp>
1000c11c:	1000061e 	bne	r2,zero,1000c138 <_setlocale_r+0x40>
1000c120:	00840074 	movhi	r2,4097
1000c124:	108b3c04 	addi	r2,r2,11504
1000c128:	dfc00117 	ldw	ra,4(sp)
1000c12c:	dc000017 	ldw	r16,0(sp)
1000c130:	dec00204 	addi	sp,sp,8
1000c134:	f800283a 	ret
1000c138:	01440074 	movhi	r5,4097
1000c13c:	294b3c04 	addi	r5,r5,11504
1000c140:	8009883a 	mov	r4,r16
1000c144:	000c2a00 	call	1000c2a0 <strcmp>
1000c148:	103ff526 	beq	r2,zero,1000c120 <_setlocale_r+0x28>
1000c14c:	80800003 	ldbu	r2,0(r16)
1000c150:	103ff326 	beq	r2,zero,1000c120 <_setlocale_r+0x28>
1000c154:	0005883a 	mov	r2,zero
1000c158:	003ff306 	br	1000c128 <_setlocale_r+0x30>
1000c15c:	00840074 	movhi	r2,4097
1000c160:	108b3c04 	addi	r2,r2,11504
1000c164:	f800283a 	ret

1000c168 <__locale_mb_cur_max>:
1000c168:	00840074 	movhi	r2,4097
1000c16c:	10901307 	ldb	r2,16460(r2)
1000c170:	f800283a 	ret

1000c174 <setlocale>:
1000c174:	00840074 	movhi	r2,4097
1000c178:	280d883a 	mov	r6,r5
1000c17c:	200b883a 	mov	r5,r4
1000c180:	1114a817 	ldw	r4,21152(r2)
1000c184:	000c0f81 	jmpi	1000c0f8 <_setlocale_r>

1000c188 <_lseek_r>:
1000c188:	defffe04 	addi	sp,sp,-8
1000c18c:	2805883a 	mov	r2,r5
1000c190:	dc000015 	stw	r16,0(sp)
1000c194:	300b883a 	mov	r5,r6
1000c198:	2021883a 	mov	r16,r4
1000c19c:	380d883a 	mov	r6,r7
1000c1a0:	1009883a 	mov	r4,r2
1000c1a4:	00840074 	movhi	r2,4097
1000c1a8:	dfc00115 	stw	ra,4(sp)
1000c1ac:	101d4015 	stw	zero,29952(r2)
1000c1b0:	000fde80 	call	1000fde8 <lseek>
1000c1b4:	10ffffd8 	cmpnei	r3,r2,-1
1000c1b8:	18000426 	beq	r3,zero,1000c1cc <_lseek_r+0x44>
1000c1bc:	dfc00117 	ldw	ra,4(sp)
1000c1c0:	dc000017 	ldw	r16,0(sp)
1000c1c4:	dec00204 	addi	sp,sp,8
1000c1c8:	f800283a 	ret
1000c1cc:	00c40074 	movhi	r3,4097
1000c1d0:	18dd4017 	ldw	r3,29952(r3)
1000c1d4:	183ff926 	beq	r3,zero,1000c1bc <_lseek_r+0x34>
1000c1d8:	80c00015 	stw	r3,0(r16)
1000c1dc:	dfc00117 	ldw	ra,4(sp)
1000c1e0:	dc000017 	ldw	r16,0(sp)
1000c1e4:	dec00204 	addi	sp,sp,8
1000c1e8:	f800283a 	ret

1000c1ec <_mbtowc_r>:
1000c1ec:	00840074 	movhi	r2,4097
1000c1f0:	10900217 	ldw	r2,16392(r2)
1000c1f4:	1000683a 	jmp	r2

1000c1f8 <__ascii_mbtowc>:
1000c1f8:	deffff04 	addi	sp,sp,-4
1000c1fc:	28000826 	beq	r5,zero,1000c220 <__ascii_mbtowc+0x28>
1000c200:	30000926 	beq	r6,zero,1000c228 <__ascii_mbtowc+0x30>
1000c204:	38000b26 	beq	r7,zero,1000c234 <__ascii_mbtowc+0x3c>
1000c208:	30800003 	ldbu	r2,0(r6)
1000c20c:	28800015 	stw	r2,0(r5)
1000c210:	30800003 	ldbu	r2,0(r6)
1000c214:	1004c03a 	cmpne	r2,r2,zero
1000c218:	dec00104 	addi	sp,sp,4
1000c21c:	f800283a 	ret
1000c220:	d80b883a 	mov	r5,sp
1000c224:	303ff71e 	bne	r6,zero,1000c204 <__ascii_mbtowc+0xc>
1000c228:	0005883a 	mov	r2,zero
1000c22c:	dec00104 	addi	sp,sp,4
1000c230:	f800283a 	ret
1000c234:	00bfff84 	movi	r2,-2
1000c238:	003ff706 	br	1000c218 <__ascii_mbtowc+0x20>

1000c23c <_read_r>:
1000c23c:	defffe04 	addi	sp,sp,-8
1000c240:	2805883a 	mov	r2,r5
1000c244:	dc000015 	stw	r16,0(sp)
1000c248:	300b883a 	mov	r5,r6
1000c24c:	2021883a 	mov	r16,r4
1000c250:	380d883a 	mov	r6,r7
1000c254:	1009883a 	mov	r4,r2
1000c258:	00840074 	movhi	r2,4097
1000c25c:	dfc00115 	stw	ra,4(sp)
1000c260:	101d4015 	stw	zero,29952(r2)
1000c264:	000ffbc0 	call	1000ffbc <read>
1000c268:	10ffffd8 	cmpnei	r3,r2,-1
1000c26c:	18000426 	beq	r3,zero,1000c280 <_read_r+0x44>
1000c270:	dfc00117 	ldw	ra,4(sp)
1000c274:	dc000017 	ldw	r16,0(sp)
1000c278:	dec00204 	addi	sp,sp,8
1000c27c:	f800283a 	ret
1000c280:	00c40074 	movhi	r3,4097
1000c284:	18dd4017 	ldw	r3,29952(r3)
1000c288:	183ff926 	beq	r3,zero,1000c270 <_read_r+0x34>
1000c28c:	80c00015 	stw	r3,0(r16)
1000c290:	dfc00117 	ldw	ra,4(sp)
1000c294:	dc000017 	ldw	r16,0(sp)
1000c298:	dec00204 	addi	sp,sp,8
1000c29c:	f800283a 	ret

1000c2a0 <strcmp>:
1000c2a0:	2144b03a 	or	r2,r4,r5
1000c2a4:	108000cc 	andi	r2,r2,3
1000c2a8:	1000171e 	bne	r2,zero,1000c308 <strcmp+0x68>
1000c2ac:	20800017 	ldw	r2,0(r4)
1000c2b0:	28c00017 	ldw	r3,0(r5)
1000c2b4:	10c0141e 	bne	r2,r3,1000c308 <strcmp+0x68>
1000c2b8:	027fbff4 	movhi	r9,65279
1000c2bc:	4a7fbfc4 	addi	r9,r9,-257
1000c2c0:	1247883a 	add	r3,r2,r9
1000c2c4:	02202074 	movhi	r8,32897
1000c2c8:	0084303a 	nor	r2,zero,r2
1000c2cc:	1884703a 	and	r2,r3,r2
1000c2d0:	42202004 	addi	r8,r8,-32640
1000c2d4:	1204703a 	and	r2,r2,r8
1000c2d8:	10000226 	beq	r2,zero,1000c2e4 <strcmp+0x44>
1000c2dc:	00002406 	br	1000c370 <strcmp+0xd0>
1000c2e0:	1000231e 	bne	r2,zero,1000c370 <strcmp+0xd0>
1000c2e4:	21000104 	addi	r4,r4,4
1000c2e8:	20c00017 	ldw	r3,0(r4)
1000c2ec:	29400104 	addi	r5,r5,4
1000c2f0:	29800017 	ldw	r6,0(r5)
1000c2f4:	1a45883a 	add	r2,r3,r9
1000c2f8:	00ce303a 	nor	r7,zero,r3
1000c2fc:	11c4703a 	and	r2,r2,r7
1000c300:	1204703a 	and	r2,r2,r8
1000c304:	19bff626 	beq	r3,r6,1000c2e0 <strcmp+0x40>
1000c308:	20800003 	ldbu	r2,0(r4)
1000c30c:	10c03fcc 	andi	r3,r2,255
1000c310:	18c0201c 	xori	r3,r3,128
1000c314:	18ffe004 	addi	r3,r3,-128
1000c318:	18000d26 	beq	r3,zero,1000c350 <strcmp+0xb0>
1000c31c:	29800007 	ldb	r6,0(r5)
1000c320:	10803fcc 	andi	r2,r2,255
1000c324:	19800326 	beq	r3,r6,1000c334 <strcmp+0x94>
1000c328:	00000a06 	br	1000c354 <strcmp+0xb4>
1000c32c:	29800007 	ldb	r6,0(r5)
1000c330:	11800b1e 	bne	r2,r6,1000c360 <strcmp+0xc0>
1000c334:	21000044 	addi	r4,r4,1
1000c338:	20c00003 	ldbu	r3,0(r4)
1000c33c:	29400044 	addi	r5,r5,1
1000c340:	18803fcc 	andi	r2,r3,255
1000c344:	1080201c 	xori	r2,r2,128
1000c348:	10bfe004 	addi	r2,r2,-128
1000c34c:	103ff71e 	bne	r2,zero,1000c32c <strcmp+0x8c>
1000c350:	0005883a 	mov	r2,zero
1000c354:	28c00003 	ldbu	r3,0(r5)
1000c358:	10c5c83a 	sub	r2,r2,r3
1000c35c:	f800283a 	ret
1000c360:	18803fcc 	andi	r2,r3,255
1000c364:	28c00003 	ldbu	r3,0(r5)
1000c368:	10c5c83a 	sub	r2,r2,r3
1000c36c:	f800283a 	ret
1000c370:	0005883a 	mov	r2,zero
1000c374:	f800283a 	ret

1000c378 <__swbuf_r>:
1000c378:	defffb04 	addi	sp,sp,-20
1000c37c:	dc800215 	stw	r18,8(sp)
1000c380:	dc400115 	stw	r17,4(sp)
1000c384:	dc000015 	stw	r16,0(sp)
1000c388:	dfc00415 	stw	ra,16(sp)
1000c38c:	dcc00315 	stw	r19,12(sp)
1000c390:	2023883a 	mov	r17,r4
1000c394:	2825883a 	mov	r18,r5
1000c398:	3021883a 	mov	r16,r6
1000c39c:	20000226 	beq	r4,zero,1000c3a8 <__swbuf_r+0x30>
1000c3a0:	20800e17 	ldw	r2,56(r4)
1000c3a4:	10003e26 	beq	r2,zero,1000c4a0 <__swbuf_r+0x128>
1000c3a8:	80800617 	ldw	r2,24(r16)
1000c3ac:	80c0030b 	ldhu	r3,12(r16)
1000c3b0:	80800215 	stw	r2,8(r16)
1000c3b4:	1880020c 	andi	r2,r3,8
1000c3b8:	10001f26 	beq	r2,zero,1000c438 <__swbuf_r+0xc0>
1000c3bc:	80800417 	ldw	r2,16(r16)
1000c3c0:	10001d26 	beq	r2,zero,1000c438 <__swbuf_r+0xc0>
1000c3c4:	1908000c 	andi	r4,r3,8192
1000c3c8:	94c03fcc 	andi	r19,r18,255
1000c3cc:	20002326 	beq	r4,zero,1000c45c <__swbuf_r+0xe4>
1000c3d0:	80c00017 	ldw	r3,0(r16)
1000c3d4:	81000517 	ldw	r4,20(r16)
1000c3d8:	1885c83a 	sub	r2,r3,r2
1000c3dc:	1100290e 	bge	r2,r4,1000c484 <__swbuf_r+0x10c>
1000c3e0:	10800044 	addi	r2,r2,1
1000c3e4:	81000217 	ldw	r4,8(r16)
1000c3e8:	19400044 	addi	r5,r3,1
1000c3ec:	81400015 	stw	r5,0(r16)
1000c3f0:	213fffc4 	addi	r4,r4,-1
1000c3f4:	81000215 	stw	r4,8(r16)
1000c3f8:	1c800005 	stb	r18,0(r3)
1000c3fc:	80c00517 	ldw	r3,20(r16)
1000c400:	18802926 	beq	r3,r2,1000c4a8 <__swbuf_r+0x130>
1000c404:	8080030b 	ldhu	r2,12(r16)
1000c408:	1080004c 	andi	r2,r2,1
1000c40c:	10000226 	beq	r2,zero,1000c418 <__swbuf_r+0xa0>
1000c410:	98800298 	cmpnei	r2,r19,10
1000c414:	10002426 	beq	r2,zero,1000c4a8 <__swbuf_r+0x130>
1000c418:	9805883a 	mov	r2,r19
1000c41c:	dfc00417 	ldw	ra,16(sp)
1000c420:	dcc00317 	ldw	r19,12(sp)
1000c424:	dc800217 	ldw	r18,8(sp)
1000c428:	dc400117 	ldw	r17,4(sp)
1000c42c:	dc000017 	ldw	r16,0(sp)
1000c430:	dec00504 	addi	sp,sp,20
1000c434:	f800283a 	ret
1000c438:	800b883a 	mov	r5,r16
1000c43c:	8809883a 	mov	r4,r17
1000c440:	00058780 	call	10005878 <__swsetup_r>
1000c444:	10001c1e 	bne	r2,zero,1000c4b8 <__swbuf_r+0x140>
1000c448:	80c0030b 	ldhu	r3,12(r16)
1000c44c:	80800417 	ldw	r2,16(r16)
1000c450:	94c03fcc 	andi	r19,r18,255
1000c454:	1908000c 	andi	r4,r3,8192
1000c458:	203fdd1e 	bne	r4,zero,1000c3d0 <__swbuf_r+0x58>
1000c45c:	81001917 	ldw	r4,100(r16)
1000c460:	18c80014 	ori	r3,r3,8192
1000c464:	0177ffc4 	movi	r5,-8193
1000c468:	2148703a 	and	r4,r4,r5
1000c46c:	80c0030d 	sth	r3,12(r16)
1000c470:	80c00017 	ldw	r3,0(r16)
1000c474:	81001915 	stw	r4,100(r16)
1000c478:	81000517 	ldw	r4,20(r16)
1000c47c:	1885c83a 	sub	r2,r3,r2
1000c480:	113fd716 	blt	r2,r4,1000c3e0 <__swbuf_r+0x68>
1000c484:	800b883a 	mov	r5,r16
1000c488:	8809883a 	mov	r4,r17
1000c48c:	00074d80 	call	100074d8 <_fflush_r>
1000c490:	1000091e 	bne	r2,zero,1000c4b8 <__swbuf_r+0x140>
1000c494:	80c00017 	ldw	r3,0(r16)
1000c498:	00800044 	movi	r2,1
1000c49c:	003fd106 	br	1000c3e4 <__swbuf_r+0x6c>
1000c4a0:	000785c0 	call	1000785c <__sinit>
1000c4a4:	003fc006 	br	1000c3a8 <__swbuf_r+0x30>
1000c4a8:	800b883a 	mov	r5,r16
1000c4ac:	8809883a 	mov	r4,r17
1000c4b0:	00074d80 	call	100074d8 <_fflush_r>
1000c4b4:	103fd826 	beq	r2,zero,1000c418 <__swbuf_r+0xa0>
1000c4b8:	04ffffc4 	movi	r19,-1
1000c4bc:	003fd606 	br	1000c418 <__swbuf_r+0xa0>

1000c4c0 <__swbuf>:
1000c4c0:	00840074 	movhi	r2,4097
1000c4c4:	280d883a 	mov	r6,r5
1000c4c8:	200b883a 	mov	r5,r4
1000c4cc:	1114a817 	ldw	r4,21152(r2)
1000c4d0:	000c3781 	jmpi	1000c378 <__swbuf_r>

1000c4d4 <_wcrtomb_r>:
1000c4d4:	defffa04 	addi	sp,sp,-24
1000c4d8:	dc400415 	stw	r17,16(sp)
1000c4dc:	dc000315 	stw	r16,12(sp)
1000c4e0:	00840074 	movhi	r2,4097
1000c4e4:	dfc00515 	stw	ra,20(sp)
1000c4e8:	2021883a 	mov	r16,r4
1000c4ec:	3823883a 	mov	r17,r7
1000c4f0:	10900117 	ldw	r2,16388(r2)
1000c4f4:	28000826 	beq	r5,zero,1000c518 <_wcrtomb_r+0x44>
1000c4f8:	103ee83a 	callr	r2
1000c4fc:	10ffffd8 	cmpnei	r3,r2,-1
1000c500:	18000a26 	beq	r3,zero,1000c52c <_wcrtomb_r+0x58>
1000c504:	dfc00517 	ldw	ra,20(sp)
1000c508:	dc400417 	ldw	r17,16(sp)
1000c50c:	dc000317 	ldw	r16,12(sp)
1000c510:	dec00604 	addi	sp,sp,24
1000c514:	f800283a 	ret
1000c518:	000d883a 	mov	r6,zero
1000c51c:	d9400084 	addi	r5,sp,2
1000c520:	103ee83a 	callr	r2
1000c524:	10ffffd8 	cmpnei	r3,r2,-1
1000c528:	183ff61e 	bne	r3,zero,1000c504 <_wcrtomb_r+0x30>
1000c52c:	00802284 	movi	r2,138
1000c530:	88000015 	stw	zero,0(r17)
1000c534:	80800015 	stw	r2,0(r16)
1000c538:	00bfffc4 	movi	r2,-1
1000c53c:	003ff106 	br	1000c504 <_wcrtomb_r+0x30>

1000c540 <wcrtomb>:
1000c540:	defffa04 	addi	sp,sp,-24
1000c544:	00840074 	movhi	r2,4097
1000c548:	dc400415 	stw	r17,16(sp)
1000c54c:	dc000315 	stw	r16,12(sp)
1000c550:	dfc00515 	stw	ra,20(sp)
1000c554:	1414a817 	ldw	r16,21152(r2)
1000c558:	00840074 	movhi	r2,4097
1000c55c:	3023883a 	mov	r17,r6
1000c560:	10900117 	ldw	r2,16388(r2)
1000c564:	300f883a 	mov	r7,r6
1000c568:	20000b26 	beq	r4,zero,1000c598 <wcrtomb+0x58>
1000c56c:	280d883a 	mov	r6,r5
1000c570:	200b883a 	mov	r5,r4
1000c574:	8009883a 	mov	r4,r16
1000c578:	103ee83a 	callr	r2
1000c57c:	10ffffd8 	cmpnei	r3,r2,-1
1000c580:	18000b26 	beq	r3,zero,1000c5b0 <wcrtomb+0x70>
1000c584:	dfc00517 	ldw	ra,20(sp)
1000c588:	dc400417 	ldw	r17,16(sp)
1000c58c:	dc000317 	ldw	r16,12(sp)
1000c590:	dec00604 	addi	sp,sp,24
1000c594:	f800283a 	ret
1000c598:	000d883a 	mov	r6,zero
1000c59c:	d9400084 	addi	r5,sp,2
1000c5a0:	8009883a 	mov	r4,r16
1000c5a4:	103ee83a 	callr	r2
1000c5a8:	10ffffd8 	cmpnei	r3,r2,-1
1000c5ac:	183ff51e 	bne	r3,zero,1000c584 <wcrtomb+0x44>
1000c5b0:	00802284 	movi	r2,138
1000c5b4:	88000015 	stw	zero,0(r17)
1000c5b8:	80800015 	stw	r2,0(r16)
1000c5bc:	00bfffc4 	movi	r2,-1
1000c5c0:	003ff006 	br	1000c584 <wcrtomb+0x44>

1000c5c4 <_wctomb_r>:
1000c5c4:	00840074 	movhi	r2,4097
1000c5c8:	10900117 	ldw	r2,16388(r2)
1000c5cc:	1000683a 	jmp	r2

1000c5d0 <__ascii_wctomb>:
1000c5d0:	28000926 	beq	r5,zero,1000c5f8 <__ascii_wctomb+0x28>
1000c5d4:	30804030 	cmpltui	r2,r6,256
1000c5d8:	10000326 	beq	r2,zero,1000c5e8 <__ascii_wctomb+0x18>
1000c5dc:	29800005 	stb	r6,0(r5)
1000c5e0:	00800044 	movi	r2,1
1000c5e4:	f800283a 	ret
1000c5e8:	00802284 	movi	r2,138
1000c5ec:	20800015 	stw	r2,0(r4)
1000c5f0:	00bfffc4 	movi	r2,-1
1000c5f4:	f800283a 	ret
1000c5f8:	0005883a 	mov	r2,zero
1000c5fc:	f800283a 	ret

1000c600 <__udivdi3>:
1000c600:	defff504 	addi	sp,sp,-44
1000c604:	dd400615 	stw	r21,24(sp)
1000c608:	dc000115 	stw	r16,4(sp)
1000c60c:	dfc00a15 	stw	ra,40(sp)
1000c610:	df000915 	stw	fp,36(sp)
1000c614:	ddc00815 	stw	r23,32(sp)
1000c618:	dd800715 	stw	r22,28(sp)
1000c61c:	dd000515 	stw	r20,20(sp)
1000c620:	dcc00415 	stw	r19,16(sp)
1000c624:	dc800315 	stw	r18,12(sp)
1000c628:	dc400215 	stw	r17,8(sp)
1000c62c:	202b883a 	mov	r21,r4
1000c630:	2821883a 	mov	r16,r5
1000c634:	3800821e 	bne	r7,zero,1000c840 <__udivdi3+0x240>
1000c638:	3827883a 	mov	r19,r7
1000c63c:	3023883a 	mov	r17,r6
1000c640:	2025883a 	mov	r18,r4
1000c644:	29803d2e 	bgeu	r5,r6,1000c73c <__udivdi3+0x13c>
1000c648:	00bfffd4 	movui	r2,65535
1000c64c:	282d883a 	mov	r22,r5
1000c650:	1180a52e 	bgeu	r2,r6,1000c8e8 <__udivdi3+0x2e8>
1000c654:	00804034 	movhi	r2,256
1000c658:	30813836 	bltu	r6,r2,1000cb3c <__udivdi3+0x53c>
1000c65c:	3006d63a 	srli	r3,r6,24
1000c660:	04c00604 	movi	r19,24
1000c664:	00840074 	movhi	r2,4097
1000c668:	1885883a 	add	r2,r3,r2
1000c66c:	108be043 	ldbu	r2,12161(r2)
1000c670:	14e7883a 	add	r19,r2,r19
1000c674:	00800804 	movi	r2,32
1000c678:	14c5c83a 	sub	r2,r2,r19
1000c67c:	10000526 	beq	r2,zero,1000c694 <__udivdi3+0x94>
1000c680:	80a0983a 	sll	r16,r16,r2
1000c684:	ace6d83a 	srl	r19,r21,r19
1000c688:	30a2983a 	sll	r17,r6,r2
1000c68c:	a8a4983a 	sll	r18,r21,r2
1000c690:	9c2cb03a 	or	r22,r19,r16
1000c694:	882ad43a 	srli	r21,r17,16
1000c698:	b009883a 	mov	r4,r22
1000c69c:	8d3fffcc 	andi	r20,r17,65535
1000c6a0:	a80b883a 	mov	r5,r21
1000c6a4:	000d2340 	call	1000d234 <__umodsi3>
1000c6a8:	a80b883a 	mov	r5,r21
1000c6ac:	b009883a 	mov	r4,r22
1000c6b0:	1027883a 	mov	r19,r2
1000c6b4:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c6b8:	1021883a 	mov	r16,r2
1000c6bc:	9826943a 	slli	r19,r19,16
1000c6c0:	9004d43a 	srli	r2,r18,16
1000c6c4:	a407383a 	mul	r3,r20,r16
1000c6c8:	9884b03a 	or	r2,r19,r2
1000c6cc:	10c0052e 	bgeu	r2,r3,1000c6e4 <__udivdi3+0xe4>
1000c6d0:	1445883a 	add	r2,r2,r17
1000c6d4:	813fffc4 	addi	r4,r16,-1
1000c6d8:	14400136 	bltu	r2,r17,1000c6e0 <__udivdi3+0xe0>
1000c6dc:	10c12836 	bltu	r2,r3,1000cb80 <__udivdi3+0x580>
1000c6e0:	2021883a 	mov	r16,r4
1000c6e4:	10e7c83a 	sub	r19,r2,r3
1000c6e8:	a80b883a 	mov	r5,r21
1000c6ec:	9809883a 	mov	r4,r19
1000c6f0:	000d2340 	call	1000d234 <__umodsi3>
1000c6f4:	102d883a 	mov	r22,r2
1000c6f8:	a80b883a 	mov	r5,r21
1000c6fc:	9809883a 	mov	r4,r19
1000c700:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c704:	b02c943a 	slli	r22,r22,16
1000c708:	a0a9383a 	mul	r20,r20,r2
1000c70c:	94bfffcc 	andi	r18,r18,65535
1000c710:	b4a4b03a 	or	r18,r22,r18
1000c714:	9500052e 	bgeu	r18,r20,1000c72c <__udivdi3+0x12c>
1000c718:	8ca5883a 	add	r18,r17,r18
1000c71c:	10ffffc4 	addi	r3,r2,-1
1000c720:	94400136 	bltu	r18,r17,1000c728 <__udivdi3+0x128>
1000c724:	95011436 	bltu	r18,r20,1000cb78 <__udivdi3+0x578>
1000c728:	1805883a 	mov	r2,r3
1000c72c:	800c943a 	slli	r6,r16,16
1000c730:	0007883a 	mov	r3,zero
1000c734:	3084b03a 	or	r2,r6,r2
1000c738:	00005506 	br	1000c890 <__udivdi3+0x290>
1000c73c:	3000041e 	bne	r6,zero,1000c750 <__udivdi3+0x150>
1000c740:	000b883a 	mov	r5,zero
1000c744:	01000044 	movi	r4,1
1000c748:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c74c:	1023883a 	mov	r17,r2
1000c750:	00bfffd4 	movui	r2,65535
1000c754:	14405f2e 	bgeu	r2,r17,1000c8d4 <__udivdi3+0x2d4>
1000c758:	00804034 	movhi	r2,256
1000c75c:	8880f436 	bltu	r17,r2,1000cb30 <__udivdi3+0x530>
1000c760:	8806d63a 	srli	r3,r17,24
1000c764:	04c00604 	movi	r19,24
1000c768:	00840074 	movhi	r2,4097
1000c76c:	1885883a 	add	r2,r3,r2
1000c770:	108be043 	ldbu	r2,12161(r2)
1000c774:	14e7883a 	add	r19,r2,r19
1000c778:	00800804 	movi	r2,32
1000c77c:	14c5c83a 	sub	r2,r2,r19
1000c780:	10005e1e 	bne	r2,zero,1000c8fc <__udivdi3+0x2fc>
1000c784:	8828d43a 	srli	r20,r17,16
1000c788:	8461c83a 	sub	r16,r16,r17
1000c78c:	8d7fffcc 	andi	r21,r17,65535
1000c790:	00c00044 	movi	r3,1
1000c794:	8009883a 	mov	r4,r16
1000c798:	a00b883a 	mov	r5,r20
1000c79c:	d8c00015 	stw	r3,0(sp)
1000c7a0:	000d2340 	call	1000d234 <__umodsi3>
1000c7a4:	8009883a 	mov	r4,r16
1000c7a8:	a00b883a 	mov	r5,r20
1000c7ac:	1027883a 	mov	r19,r2
1000c7b0:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c7b4:	1021883a 	mov	r16,r2
1000c7b8:	9826943a 	slli	r19,r19,16
1000c7bc:	9004d43a 	srli	r2,r18,16
1000c7c0:	8549383a 	mul	r4,r16,r21
1000c7c4:	d8c00017 	ldw	r3,0(sp)
1000c7c8:	9884b03a 	or	r2,r19,r2
1000c7cc:	1100052e 	bgeu	r2,r4,1000c7e4 <__udivdi3+0x1e4>
1000c7d0:	1445883a 	add	r2,r2,r17
1000c7d4:	817fffc4 	addi	r5,r16,-1
1000c7d8:	14400136 	bltu	r2,r17,1000c7e0 <__udivdi3+0x1e0>
1000c7dc:	1100eb36 	bltu	r2,r4,1000cb8c <__udivdi3+0x58c>
1000c7e0:	2821883a 	mov	r16,r5
1000c7e4:	1127c83a 	sub	r19,r2,r4
1000c7e8:	a00b883a 	mov	r5,r20
1000c7ec:	9809883a 	mov	r4,r19
1000c7f0:	d8c00015 	stw	r3,0(sp)
1000c7f4:	000d2340 	call	1000d234 <__umodsi3>
1000c7f8:	102d883a 	mov	r22,r2
1000c7fc:	a00b883a 	mov	r5,r20
1000c800:	9809883a 	mov	r4,r19
1000c804:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c808:	b02c943a 	slli	r22,r22,16
1000c80c:	156b383a 	mul	r21,r2,r21
1000c810:	94bfffcc 	andi	r18,r18,65535
1000c814:	b4a4b03a 	or	r18,r22,r18
1000c818:	d8c00017 	ldw	r3,0(sp)
1000c81c:	9540052e 	bgeu	r18,r21,1000c834 <__udivdi3+0x234>
1000c820:	8ca5883a 	add	r18,r17,r18
1000c824:	113fffc4 	addi	r4,r2,-1
1000c828:	94400136 	bltu	r18,r17,1000c830 <__udivdi3+0x230>
1000c82c:	9540d036 	bltu	r18,r21,1000cb70 <__udivdi3+0x570>
1000c830:	2005883a 	mov	r2,r4
1000c834:	800c943a 	slli	r6,r16,16
1000c838:	3084b03a 	or	r2,r6,r2
1000c83c:	00001406 	br	1000c890 <__udivdi3+0x290>
1000c840:	29c01136 	bltu	r5,r7,1000c888 <__udivdi3+0x288>
1000c844:	00bfffd4 	movui	r2,65535
1000c848:	11c01d2e 	bgeu	r2,r7,1000c8c0 <__udivdi3+0x2c0>
1000c84c:	00804034 	movhi	r2,256
1000c850:	3880ac36 	bltu	r7,r2,1000cb04 <__udivdi3+0x504>
1000c854:	3806d63a 	srli	r3,r7,24
1000c858:	01000604 	movi	r4,24
1000c85c:	00840074 	movhi	r2,4097
1000c860:	1885883a 	add	r2,r3,r2
1000c864:	10cbe043 	ldbu	r3,12161(r2)
1000c868:	05800804 	movi	r22,32
1000c86c:	1907883a 	add	r3,r3,r4
1000c870:	b0edc83a 	sub	r22,r22,r3
1000c874:	b000531e 	bne	r22,zero,1000c9c4 <__udivdi3+0x3c4>
1000c878:	3c00a536 	bltu	r7,r16,1000cb10 <__udivdi3+0x510>
1000c87c:	a985403a 	cmpgeu	r2,r21,r6
1000c880:	0007883a 	mov	r3,zero
1000c884:	00000206 	br	1000c890 <__udivdi3+0x290>
1000c888:	0007883a 	mov	r3,zero
1000c88c:	0005883a 	mov	r2,zero
1000c890:	dfc00a17 	ldw	ra,40(sp)
1000c894:	df000917 	ldw	fp,36(sp)
1000c898:	ddc00817 	ldw	r23,32(sp)
1000c89c:	dd800717 	ldw	r22,28(sp)
1000c8a0:	dd400617 	ldw	r21,24(sp)
1000c8a4:	dd000517 	ldw	r20,20(sp)
1000c8a8:	dcc00417 	ldw	r19,16(sp)
1000c8ac:	dc800317 	ldw	r18,12(sp)
1000c8b0:	dc400217 	ldw	r17,8(sp)
1000c8b4:	dc000117 	ldw	r16,4(sp)
1000c8b8:	dec00b04 	addi	sp,sp,44
1000c8bc:	f800283a 	ret
1000c8c0:	38804030 	cmpltui	r2,r7,256
1000c8c4:	1000951e 	bne	r2,zero,1000cb1c <__udivdi3+0x51c>
1000c8c8:	3806d23a 	srli	r3,r7,8
1000c8cc:	01000204 	movi	r4,8
1000c8d0:	003fe206 	br	1000c85c <__udivdi3+0x25c>
1000c8d4:	88804030 	cmpltui	r2,r17,256
1000c8d8:	10009b1e 	bne	r2,zero,1000cb48 <__udivdi3+0x548>
1000c8dc:	8806d23a 	srli	r3,r17,8
1000c8e0:	04c00204 	movi	r19,8
1000c8e4:	003fa006 	br	1000c768 <__udivdi3+0x168>
1000c8e8:	30804030 	cmpltui	r2,r6,256
1000c8ec:	10008e1e 	bne	r2,zero,1000cb28 <__udivdi3+0x528>
1000c8f0:	3006d23a 	srli	r3,r6,8
1000c8f4:	04c00204 	movi	r19,8
1000c8f8:	003f5a06 	br	1000c664 <__udivdi3+0x64>
1000c8fc:	88a2983a 	sll	r17,r17,r2
1000c900:	84ecd83a 	srl	r22,r16,r19
1000c904:	80a0983a 	sll	r16,r16,r2
1000c908:	8828d43a 	srli	r20,r17,16
1000c90c:	b009883a 	mov	r4,r22
1000c910:	ace6d83a 	srl	r19,r21,r19
1000c914:	a00b883a 	mov	r5,r20
1000c918:	a8a4983a 	sll	r18,r21,r2
1000c91c:	000d2340 	call	1000d234 <__umodsi3>
1000c920:	b009883a 	mov	r4,r22
1000c924:	a00b883a 	mov	r5,r20
1000c928:	9c26b03a 	or	r19,r19,r16
1000c92c:	1021883a 	mov	r16,r2
1000c930:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c934:	102f883a 	mov	r23,r2
1000c938:	8d7fffcc 	andi	r21,r17,65535
1000c93c:	8020943a 	slli	r16,r16,16
1000c940:	9804d43a 	srli	r2,r19,16
1000c944:	aded383a 	mul	r22,r21,r23
1000c948:	8084b03a 	or	r2,r16,r2
1000c94c:	1580062e 	bgeu	r2,r22,1000c968 <__udivdi3+0x368>
1000c950:	1445883a 	add	r2,r2,r17
1000c954:	b8ffffc4 	addi	r3,r23,-1
1000c958:	14408336 	bltu	r2,r17,1000cb68 <__udivdi3+0x568>
1000c95c:	1580822e 	bgeu	r2,r22,1000cb68 <__udivdi3+0x568>
1000c960:	bdffff84 	addi	r23,r23,-2
1000c964:	1445883a 	add	r2,r2,r17
1000c968:	15adc83a 	sub	r22,r2,r22
1000c96c:	a00b883a 	mov	r5,r20
1000c970:	b009883a 	mov	r4,r22
1000c974:	000d2340 	call	1000d234 <__umodsi3>
1000c978:	1021883a 	mov	r16,r2
1000c97c:	b009883a 	mov	r4,r22
1000c980:	a00b883a 	mov	r5,r20
1000c984:	000d1d00 	call	1000d1d0 <__udivsi3>
1000c988:	8020943a 	slli	r16,r16,16
1000c98c:	a889383a 	mul	r4,r21,r2
1000c990:	9cffffcc 	andi	r19,r19,65535
1000c994:	84e0b03a 	or	r16,r16,r19
1000c998:	8100062e 	bgeu	r16,r4,1000c9b4 <__udivdi3+0x3b4>
1000c99c:	8461883a 	add	r16,r16,r17
1000c9a0:	10ffffc4 	addi	r3,r2,-1
1000c9a4:	84406c36 	bltu	r16,r17,1000cb58 <__udivdi3+0x558>
1000c9a8:	81006b2e 	bgeu	r16,r4,1000cb58 <__udivdi3+0x558>
1000c9ac:	10bfff84 	addi	r2,r2,-2
1000c9b0:	8461883a 	add	r16,r16,r17
1000c9b4:	b806943a 	slli	r3,r23,16
1000c9b8:	8121c83a 	sub	r16,r16,r4
1000c9bc:	1886b03a 	or	r3,r3,r2
1000c9c0:	003f7406 	br	1000c794 <__udivdi3+0x194>
1000c9c4:	30f8d83a 	srl	fp,r6,r3
1000c9c8:	3d8e983a 	sll	r7,r7,r22
1000c9cc:	80eed83a 	srl	r23,r16,r3
1000c9d0:	a8c6d83a 	srl	r3,r21,r3
1000c9d4:	e1f8b03a 	or	fp,fp,r7
1000c9d8:	e024d43a 	srli	r18,fp,16
1000c9dc:	85a0983a 	sll	r16,r16,r22
1000c9e0:	b809883a 	mov	r4,r23
1000c9e4:	900b883a 	mov	r5,r18
1000c9e8:	1c22b03a 	or	r17,r3,r16
1000c9ec:	35a8983a 	sll	r20,r6,r22
1000c9f0:	000d2340 	call	1000d234 <__umodsi3>
1000c9f4:	b809883a 	mov	r4,r23
1000c9f8:	900b883a 	mov	r5,r18
1000c9fc:	1027883a 	mov	r19,r2
1000ca00:	000d1d00 	call	1000d1d0 <__udivsi3>
1000ca04:	1021883a 	mov	r16,r2
1000ca08:	e0ffffcc 	andi	r3,fp,65535
1000ca0c:	9826943a 	slli	r19,r19,16
1000ca10:	8804d43a 	srli	r2,r17,16
1000ca14:	1c09383a 	mul	r4,r3,r16
1000ca18:	9884b03a 	or	r2,r19,r2
1000ca1c:	1100062e 	bgeu	r2,r4,1000ca38 <__udivdi3+0x438>
1000ca20:	1705883a 	add	r2,r2,fp
1000ca24:	817fffc4 	addi	r5,r16,-1
1000ca28:	17004d36 	bltu	r2,fp,1000cb60 <__udivdi3+0x560>
1000ca2c:	11004c2e 	bgeu	r2,r4,1000cb60 <__udivdi3+0x560>
1000ca30:	843fff84 	addi	r16,r16,-2
1000ca34:	1705883a 	add	r2,r2,fp
1000ca38:	1127c83a 	sub	r19,r2,r4
1000ca3c:	900b883a 	mov	r5,r18
1000ca40:	9809883a 	mov	r4,r19
1000ca44:	d8c00015 	stw	r3,0(sp)
1000ca48:	000d2340 	call	1000d234 <__umodsi3>
1000ca4c:	9809883a 	mov	r4,r19
1000ca50:	900b883a 	mov	r5,r18
1000ca54:	102f883a 	mov	r23,r2
1000ca58:	000d1d00 	call	1000d1d0 <__udivsi3>
1000ca5c:	d8c00017 	ldw	r3,0(sp)
1000ca60:	b82e943a 	slli	r23,r23,16
1000ca64:	8c7fffcc 	andi	r17,r17,65535
1000ca68:	1889383a 	mul	r4,r3,r2
1000ca6c:	bc62b03a 	or	r17,r23,r17
1000ca70:	8900062e 	bgeu	r17,r4,1000ca8c <__udivdi3+0x48c>
1000ca74:	8f23883a 	add	r17,r17,fp
1000ca78:	10ffffc4 	addi	r3,r2,-1
1000ca7c:	8f003436 	bltu	r17,fp,1000cb50 <__udivdi3+0x550>
1000ca80:	8900332e 	bgeu	r17,r4,1000cb50 <__udivdi3+0x550>
1000ca84:	10bfff84 	addi	r2,r2,-2
1000ca88:	8f23883a 	add	r17,r17,fp
1000ca8c:	8020943a 	slli	r16,r16,16
1000ca90:	a17fffcc 	andi	r5,r20,65535
1000ca94:	a00cd43a 	srli	r6,r20,16
1000ca98:	8084b03a 	or	r2,r16,r2
1000ca9c:	10ffffcc 	andi	r3,r2,65535
1000caa0:	1028d43a 	srli	r20,r2,16
1000caa4:	1951383a 	mul	r8,r3,r5
1000caa8:	1987383a 	mul	r3,r3,r6
1000caac:	a14b383a 	mul	r5,r20,r5
1000cab0:	400ed43a 	srli	r7,r8,16
1000cab4:	8923c83a 	sub	r17,r17,r4
1000cab8:	1947883a 	add	r3,r3,r5
1000cabc:	38c7883a 	add	r3,r7,r3
1000cac0:	a1a9383a 	mul	r20,r20,r6
1000cac4:	1940022e 	bgeu	r3,r5,1000cad0 <__udivdi3+0x4d0>
1000cac8:	01000074 	movhi	r4,1
1000cacc:	a129883a 	add	r20,r20,r4
1000cad0:	180cd43a 	srli	r6,r3,16
1000cad4:	3529883a 	add	r20,r6,r20
1000cad8:	8d000836 	bltu	r17,r20,1000cafc <__udivdi3+0x4fc>
1000cadc:	8d000226 	beq	r17,r20,1000cae8 <__udivdi3+0x4e8>
1000cae0:	0007883a 	mov	r3,zero
1000cae4:	003f6a06 	br	1000c890 <__udivdi3+0x290>
1000cae8:	1806943a 	slli	r3,r3,16
1000caec:	ad8c983a 	sll	r6,r21,r22
1000caf0:	423fffcc 	andi	r8,r8,65535
1000caf4:	1a07883a 	add	r3,r3,r8
1000caf8:	30fff92e 	bgeu	r6,r3,1000cae0 <__udivdi3+0x4e0>
1000cafc:	10bfffc4 	addi	r2,r2,-1
1000cb00:	003ff706 	br	1000cae0 <__udivdi3+0x4e0>
1000cb04:	3806d43a 	srli	r3,r7,16
1000cb08:	01000404 	movi	r4,16
1000cb0c:	003f5306 	br	1000c85c <__udivdi3+0x25c>
1000cb10:	0007883a 	mov	r3,zero
1000cb14:	00800044 	movi	r2,1
1000cb18:	003f5d06 	br	1000c890 <__udivdi3+0x290>
1000cb1c:	3807883a 	mov	r3,r7
1000cb20:	0009883a 	mov	r4,zero
1000cb24:	003f4d06 	br	1000c85c <__udivdi3+0x25c>
1000cb28:	3007883a 	mov	r3,r6
1000cb2c:	003ecd06 	br	1000c664 <__udivdi3+0x64>
1000cb30:	8806d43a 	srli	r3,r17,16
1000cb34:	04c00404 	movi	r19,16
1000cb38:	003f0b06 	br	1000c768 <__udivdi3+0x168>
1000cb3c:	3006d43a 	srli	r3,r6,16
1000cb40:	04c00404 	movi	r19,16
1000cb44:	003ec706 	br	1000c664 <__udivdi3+0x64>
1000cb48:	8807883a 	mov	r3,r17
1000cb4c:	003f0606 	br	1000c768 <__udivdi3+0x168>
1000cb50:	1805883a 	mov	r2,r3
1000cb54:	003fcd06 	br	1000ca8c <__udivdi3+0x48c>
1000cb58:	1805883a 	mov	r2,r3
1000cb5c:	003f9506 	br	1000c9b4 <__udivdi3+0x3b4>
1000cb60:	2821883a 	mov	r16,r5
1000cb64:	003fb406 	br	1000ca38 <__udivdi3+0x438>
1000cb68:	182f883a 	mov	r23,r3
1000cb6c:	003f7e06 	br	1000c968 <__udivdi3+0x368>
1000cb70:	10bfff84 	addi	r2,r2,-2
1000cb74:	003f2f06 	br	1000c834 <__udivdi3+0x234>
1000cb78:	10bfff84 	addi	r2,r2,-2
1000cb7c:	003eeb06 	br	1000c72c <__udivdi3+0x12c>
1000cb80:	843fff84 	addi	r16,r16,-2
1000cb84:	1445883a 	add	r2,r2,r17
1000cb88:	003ed606 	br	1000c6e4 <__udivdi3+0xe4>
1000cb8c:	843fff84 	addi	r16,r16,-2
1000cb90:	1445883a 	add	r2,r2,r17
1000cb94:	003f1306 	br	1000c7e4 <__udivdi3+0x1e4>

1000cb98 <__umoddi3>:
1000cb98:	defff404 	addi	sp,sp,-48
1000cb9c:	dc400315 	stw	r17,12(sp)
1000cba0:	dc000215 	stw	r16,8(sp)
1000cba4:	dfc00b15 	stw	ra,44(sp)
1000cba8:	df000a15 	stw	fp,40(sp)
1000cbac:	ddc00915 	stw	r23,36(sp)
1000cbb0:	dd800815 	stw	r22,32(sp)
1000cbb4:	dd400715 	stw	r21,28(sp)
1000cbb8:	dd000615 	stw	r20,24(sp)
1000cbbc:	dcc00515 	stw	r19,20(sp)
1000cbc0:	dc800415 	stw	r18,16(sp)
1000cbc4:	2823883a 	mov	r17,r5
1000cbc8:	2021883a 	mov	r16,r4
1000cbcc:	3800701e 	bne	r7,zero,1000cd90 <__umoddi3+0x1f8>
1000cbd0:	382b883a 	mov	r21,r7
1000cbd4:	3027883a 	mov	r19,r6
1000cbd8:	2029883a 	mov	r20,r4
1000cbdc:	2980392e 	bgeu	r5,r6,1000ccc4 <__umoddi3+0x12c>
1000cbe0:	00bfffd4 	movui	r2,65535
1000cbe4:	282f883a 	mov	r23,r5
1000cbe8:	11809736 	bltu	r2,r6,1000ce48 <__umoddi3+0x2b0>
1000cbec:	30804030 	cmpltui	r2,r6,256
1000cbf0:	1001231e 	bne	r2,zero,1000d080 <__umoddi3+0x4e8>
1000cbf4:	3006d23a 	srli	r3,r6,8
1000cbf8:	05400204 	movi	r21,8
1000cbfc:	00840074 	movhi	r2,4097
1000cc00:	1885883a 	add	r2,r3,r2
1000cc04:	108be043 	ldbu	r2,12161(r2)
1000cc08:	156b883a 	add	r21,r2,r21
1000cc0c:	00800804 	movi	r2,32
1000cc10:	1565c83a 	sub	r18,r2,r21
1000cc14:	90000526 	beq	r18,zero,1000cc2c <__umoddi3+0x94>
1000cc18:	8ca2983a 	sll	r17,r17,r18
1000cc1c:	856ad83a 	srl	r21,r16,r21
1000cc20:	34a6983a 	sll	r19,r6,r18
1000cc24:	84a8983a 	sll	r20,r16,r18
1000cc28:	ac6eb03a 	or	r23,r21,r17
1000cc2c:	982cd43a 	srli	r22,r19,16
1000cc30:	b809883a 	mov	r4,r23
1000cc34:	9c3fffcc 	andi	r16,r19,65535
1000cc38:	b00b883a 	mov	r5,r22
1000cc3c:	000d2340 	call	1000d234 <__umodsi3>
1000cc40:	b00b883a 	mov	r5,r22
1000cc44:	b809883a 	mov	r4,r23
1000cc48:	102b883a 	mov	r21,r2
1000cc4c:	000d1d00 	call	1000d1d0 <__udivsi3>
1000cc50:	a82a943a 	slli	r21,r21,16
1000cc54:	a006d43a 	srli	r3,r20,16
1000cc58:	8085383a 	mul	r2,r16,r2
1000cc5c:	a8c6b03a 	or	r3,r21,r3
1000cc60:	1880032e 	bgeu	r3,r2,1000cc70 <__umoddi3+0xd8>
1000cc64:	1cc7883a 	add	r3,r3,r19
1000cc68:	1cc00136 	bltu	r3,r19,1000cc70 <__umoddi3+0xd8>
1000cc6c:	18811836 	bltu	r3,r2,1000d0d0 <__umoddi3+0x538>
1000cc70:	18abc83a 	sub	r21,r3,r2
1000cc74:	b00b883a 	mov	r5,r22
1000cc78:	a809883a 	mov	r4,r21
1000cc7c:	000d2340 	call	1000d234 <__umodsi3>
1000cc80:	1023883a 	mov	r17,r2
1000cc84:	b00b883a 	mov	r5,r22
1000cc88:	a809883a 	mov	r4,r21
1000cc8c:	000d1d00 	call	1000d1d0 <__udivsi3>
1000cc90:	8822943a 	slli	r17,r17,16
1000cc94:	8085383a 	mul	r2,r16,r2
1000cc98:	a0ffffcc 	andi	r3,r20,65535
1000cc9c:	88c6b03a 	or	r3,r17,r3
1000cca0:	1880042e 	bgeu	r3,r2,1000ccb4 <__umoddi3+0x11c>
1000cca4:	1cc7883a 	add	r3,r3,r19
1000cca8:	1cc00236 	bltu	r3,r19,1000ccb4 <__umoddi3+0x11c>
1000ccac:	1880012e 	bgeu	r3,r2,1000ccb4 <__umoddi3+0x11c>
1000ccb0:	1cc7883a 	add	r3,r3,r19
1000ccb4:	1885c83a 	sub	r2,r3,r2
1000ccb8:	1484d83a 	srl	r2,r2,r18
1000ccbc:	0007883a 	mov	r3,zero
1000ccc0:	00003606 	br	1000cd9c <__umoddi3+0x204>
1000ccc4:	3000041e 	bne	r6,zero,1000ccd8 <__umoddi3+0x140>
1000ccc8:	000b883a 	mov	r5,zero
1000cccc:	01000044 	movi	r4,1
1000ccd0:	000d1d00 	call	1000d1d0 <__udivsi3>
1000ccd4:	1027883a 	mov	r19,r2
1000ccd8:	00bfffd4 	movui	r2,65535
1000ccdc:	14c0552e 	bgeu	r2,r19,1000ce34 <__umoddi3+0x29c>
1000cce0:	00804034 	movhi	r2,256
1000cce4:	9880ee36 	bltu	r19,r2,1000d0a0 <__umoddi3+0x508>
1000cce8:	9806d63a 	srli	r3,r19,24
1000ccec:	05400604 	movi	r21,24
1000ccf0:	00840074 	movhi	r2,4097
1000ccf4:	1885883a 	add	r2,r3,r2
1000ccf8:	108be043 	ldbu	r2,12161(r2)
1000ccfc:	156b883a 	add	r21,r2,r21
1000cd00:	00800804 	movi	r2,32
1000cd04:	1565c83a 	sub	r18,r2,r21
1000cd08:	9000ab1e 	bne	r18,zero,1000cfb8 <__umoddi3+0x420>
1000cd0c:	982cd43a 	srli	r22,r19,16
1000cd10:	8ce3c83a 	sub	r17,r17,r19
1000cd14:	9d7fffcc 	andi	r21,r19,65535
1000cd18:	b00b883a 	mov	r5,r22
1000cd1c:	8809883a 	mov	r4,r17
1000cd20:	000d2340 	call	1000d234 <__umodsi3>
1000cd24:	b00b883a 	mov	r5,r22
1000cd28:	8809883a 	mov	r4,r17
1000cd2c:	1021883a 	mov	r16,r2
1000cd30:	000d1d00 	call	1000d1d0 <__udivsi3>
1000cd34:	8020943a 	slli	r16,r16,16
1000cd38:	a006d43a 	srli	r3,r20,16
1000cd3c:	1545383a 	mul	r2,r2,r21
1000cd40:	80c6b03a 	or	r3,r16,r3
1000cd44:	1880042e 	bgeu	r3,r2,1000cd58 <__umoddi3+0x1c0>
1000cd48:	1cc7883a 	add	r3,r3,r19
1000cd4c:	1cc00236 	bltu	r3,r19,1000cd58 <__umoddi3+0x1c0>
1000cd50:	1880012e 	bgeu	r3,r2,1000cd58 <__umoddi3+0x1c0>
1000cd54:	1cc7883a 	add	r3,r3,r19
1000cd58:	18a1c83a 	sub	r16,r3,r2
1000cd5c:	b00b883a 	mov	r5,r22
1000cd60:	8009883a 	mov	r4,r16
1000cd64:	000d2340 	call	1000d234 <__umodsi3>
1000cd68:	1023883a 	mov	r17,r2
1000cd6c:	b00b883a 	mov	r5,r22
1000cd70:	8009883a 	mov	r4,r16
1000cd74:	000d1d00 	call	1000d1d0 <__udivsi3>
1000cd78:	8822943a 	slli	r17,r17,16
1000cd7c:	1545383a 	mul	r2,r2,r21
1000cd80:	a53fffcc 	andi	r20,r20,65535
1000cd84:	8d06b03a 	or	r3,r17,r20
1000cd88:	18bfca2e 	bgeu	r3,r2,1000ccb4 <__umoddi3+0x11c>
1000cd8c:	003fc506 	br	1000cca4 <__umoddi3+0x10c>
1000cd90:	2005883a 	mov	r2,r4
1000cd94:	29c00d2e 	bgeu	r5,r7,1000cdcc <__umoddi3+0x234>
1000cd98:	2807883a 	mov	r3,r5
1000cd9c:	dfc00b17 	ldw	ra,44(sp)
1000cda0:	df000a17 	ldw	fp,40(sp)
1000cda4:	ddc00917 	ldw	r23,36(sp)
1000cda8:	dd800817 	ldw	r22,32(sp)
1000cdac:	dd400717 	ldw	r21,28(sp)
1000cdb0:	dd000617 	ldw	r20,24(sp)
1000cdb4:	dcc00517 	ldw	r19,20(sp)
1000cdb8:	dc800417 	ldw	r18,16(sp)
1000cdbc:	dc400317 	ldw	r17,12(sp)
1000cdc0:	dc000217 	ldw	r16,8(sp)
1000cdc4:	dec00c04 	addi	sp,sp,48
1000cdc8:	f800283a 	ret
1000cdcc:	013fffd4 	movui	r4,65535
1000cdd0:	2807883a 	mov	r3,r5
1000cdd4:	21c0122e 	bgeu	r4,r7,1000ce20 <__umoddi3+0x288>
1000cdd8:	01004034 	movhi	r4,256
1000cddc:	3900ad36 	bltu	r7,r4,1000d094 <__umoddi3+0x4fc>
1000cde0:	3810d63a 	srli	r8,r7,24
1000cde4:	01400604 	movi	r5,24
1000cde8:	01040074 	movhi	r4,4097
1000cdec:	4109883a 	add	r4,r8,r4
1000cdf0:	250be043 	ldbu	r20,12161(r4)
1000cdf4:	04c00804 	movi	r19,32
1000cdf8:	a169883a 	add	r20,r20,r5
1000cdfc:	9d27c83a 	sub	r19,r19,r20
1000ce00:	9800161e 	bne	r19,zero,1000ce5c <__umoddi3+0x2c4>
1000ce04:	3c400136 	bltu	r7,r17,1000ce0c <__umoddi3+0x274>
1000ce08:	81bfe436 	bltu	r16,r6,1000cd9c <__umoddi3+0x204>
1000ce0c:	8185c83a 	sub	r2,r16,r6
1000ce10:	89cfc83a 	sub	r7,r17,r7
1000ce14:	8087803a 	cmpltu	r3,r16,r2
1000ce18:	38c7c83a 	sub	r3,r7,r3
1000ce1c:	003fdf06 	br	1000cd9c <__umoddi3+0x204>
1000ce20:	39004030 	cmpltui	r4,r7,256
1000ce24:	2000981e 	bne	r4,zero,1000d088 <__umoddi3+0x4f0>
1000ce28:	3810d23a 	srli	r8,r7,8
1000ce2c:	01400204 	movi	r5,8
1000ce30:	003fed06 	br	1000cde8 <__umoddi3+0x250>
1000ce34:	98804030 	cmpltui	r2,r19,256
1000ce38:	10009c1e 	bne	r2,zero,1000d0ac <__umoddi3+0x514>
1000ce3c:	9806d23a 	srli	r3,r19,8
1000ce40:	05400204 	movi	r21,8
1000ce44:	003faa06 	br	1000ccf0 <__umoddi3+0x158>
1000ce48:	00804034 	movhi	r2,256
1000ce4c:	30809936 	bltu	r6,r2,1000d0b4 <__umoddi3+0x51c>
1000ce50:	3006d63a 	srli	r3,r6,24
1000ce54:	05400604 	movi	r21,24
1000ce58:	003f6806 	br	1000cbfc <__umoddi3+0x64>
1000ce5c:	3504d83a 	srl	r2,r6,r20
1000ce60:	3cce983a 	sll	r7,r7,r19
1000ce64:	8d38d83a 	srl	fp,r17,r20
1000ce68:	8ce2983a 	sll	r17,r17,r19
1000ce6c:	11eeb03a 	or	r23,r2,r7
1000ce70:	b82cd43a 	srli	r22,r23,16
1000ce74:	8504d83a 	srl	r2,r16,r20
1000ce78:	e009883a 	mov	r4,fp
1000ce7c:	b00b883a 	mov	r5,r22
1000ce80:	34e4983a 	sll	r18,r6,r19
1000ce84:	1462b03a 	or	r17,r2,r17
1000ce88:	000d2340 	call	1000d234 <__umodsi3>
1000ce8c:	e009883a 	mov	r4,fp
1000ce90:	b00b883a 	mov	r5,r22
1000ce94:	102b883a 	mov	r21,r2
1000ce98:	000d1d00 	call	1000d1d0 <__udivsi3>
1000ce9c:	100d883a 	mov	r6,r2
1000cea0:	b8ffffcc 	andi	r3,r23,65535
1000cea4:	a82a943a 	slli	r21,r21,16
1000cea8:	8804d43a 	srli	r2,r17,16
1000ceac:	1989383a 	mul	r4,r3,r6
1000ceb0:	84e0983a 	sll	r16,r16,r19
1000ceb4:	a884b03a 	or	r2,r21,r2
1000ceb8:	1100062e 	bgeu	r2,r4,1000ced4 <__umoddi3+0x33c>
1000cebc:	15c5883a 	add	r2,r2,r23
1000cec0:	317fffc4 	addi	r5,r6,-1
1000cec4:	15c08036 	bltu	r2,r23,1000d0c8 <__umoddi3+0x530>
1000cec8:	11007f2e 	bgeu	r2,r4,1000d0c8 <__umoddi3+0x530>
1000cecc:	31bfff84 	addi	r6,r6,-2
1000ced0:	15c5883a 	add	r2,r2,r23
1000ced4:	112bc83a 	sub	r21,r2,r4
1000ced8:	b00b883a 	mov	r5,r22
1000cedc:	a809883a 	mov	r4,r21
1000cee0:	d9800115 	stw	r6,4(sp)
1000cee4:	d8c00015 	stw	r3,0(sp)
1000cee8:	000d2340 	call	1000d234 <__umodsi3>
1000ceec:	b00b883a 	mov	r5,r22
1000cef0:	a809883a 	mov	r4,r21
1000cef4:	1039883a 	mov	fp,r2
1000cef8:	000d1d00 	call	1000d1d0 <__udivsi3>
1000cefc:	d8c00017 	ldw	r3,0(sp)
1000cf00:	e038943a 	slli	fp,fp,16
1000cf04:	8c7fffcc 	andi	r17,r17,65535
1000cf08:	1887383a 	mul	r3,r3,r2
1000cf0c:	e462b03a 	or	r17,fp,r17
1000cf10:	d9800117 	ldw	r6,4(sp)
1000cf14:	88c0062e 	bgeu	r17,r3,1000cf30 <__umoddi3+0x398>
1000cf18:	8de3883a 	add	r17,r17,r23
1000cf1c:	113fffc4 	addi	r4,r2,-1
1000cf20:	8dc06736 	bltu	r17,r23,1000d0c0 <__umoddi3+0x528>
1000cf24:	88c0662e 	bgeu	r17,r3,1000d0c0 <__umoddi3+0x528>
1000cf28:	10bfff84 	addi	r2,r2,-2
1000cf2c:	8de3883a 	add	r17,r17,r23
1000cf30:	300a943a 	slli	r5,r6,16
1000cf34:	9010d43a 	srli	r8,r18,16
1000cf38:	91bfffcc 	andi	r6,r18,65535
1000cf3c:	2888b03a 	or	r4,r5,r2
1000cf40:	21ffffcc 	andi	r7,r4,65535
1000cf44:	2008d43a 	srli	r4,r4,16
1000cf48:	300b883a 	mov	r5,r6
1000cf4c:	398d383a 	mul	r6,r7,r6
1000cf50:	214b383a 	mul	r5,r4,r5
1000cf54:	3a0f383a 	mul	r7,r7,r8
1000cf58:	3004d43a 	srli	r2,r6,16
1000cf5c:	88c7c83a 	sub	r3,r17,r3
1000cf60:	394f883a 	add	r7,r7,r5
1000cf64:	11c5883a 	add	r2,r2,r7
1000cf68:	2209383a 	mul	r4,r4,r8
1000cf6c:	1140022e 	bgeu	r2,r5,1000cf78 <__umoddi3+0x3e0>
1000cf70:	01400074 	movhi	r5,1
1000cf74:	2149883a 	add	r4,r4,r5
1000cf78:	100ad43a 	srli	r5,r2,16
1000cf7c:	1004943a 	slli	r2,r2,16
1000cf80:	31bfffcc 	andi	r6,r6,65535
1000cf84:	2909883a 	add	r4,r5,r4
1000cf88:	1185883a 	add	r2,r2,r6
1000cf8c:	19003636 	bltu	r3,r4,1000d068 <__umoddi3+0x4d0>
1000cf90:	19003426 	beq	r3,r4,1000d064 <__umoddi3+0x4cc>
1000cf94:	8085c83a 	sub	r2,r16,r2
1000cf98:	80a1803a 	cmpltu	r16,r16,r2
1000cf9c:	1907c83a 	sub	r3,r3,r4
1000cfa0:	1c07c83a 	sub	r3,r3,r16
1000cfa4:	1d20983a 	sll	r16,r3,r20
1000cfa8:	14c4d83a 	srl	r2,r2,r19
1000cfac:	1cc6d83a 	srl	r3,r3,r19
1000cfb0:	8084b03a 	or	r2,r16,r2
1000cfb4:	003f7906 	br	1000cd9c <__umoddi3+0x204>
1000cfb8:	9ca6983a 	sll	r19,r19,r18
1000cfbc:	8d68d83a 	srl	r20,r17,r21
1000cfc0:	856ad83a 	srl	r21,r16,r21
1000cfc4:	982cd43a 	srli	r22,r19,16
1000cfc8:	a009883a 	mov	r4,r20
1000cfcc:	8ca2983a 	sll	r17,r17,r18
1000cfd0:	b00b883a 	mov	r5,r22
1000cfd4:	000d2340 	call	1000d234 <__umodsi3>
1000cfd8:	a009883a 	mov	r4,r20
1000cfdc:	b00b883a 	mov	r5,r22
1000cfe0:	ac6eb03a 	or	r23,r21,r17
1000cfe4:	1023883a 	mov	r17,r2
1000cfe8:	000d1d00 	call	1000d1d0 <__udivsi3>
1000cfec:	9d7fffcc 	andi	r21,r19,65535
1000cff0:	8822943a 	slli	r17,r17,16
1000cff4:	b806d43a 	srli	r3,r23,16
1000cff8:	a885383a 	mul	r2,r21,r2
1000cffc:	84a8983a 	sll	r20,r16,r18
1000d000:	88c6b03a 	or	r3,r17,r3
1000d004:	1880042e 	bgeu	r3,r2,1000d018 <__umoddi3+0x480>
1000d008:	1cc7883a 	add	r3,r3,r19
1000d00c:	1cc00236 	bltu	r3,r19,1000d018 <__umoddi3+0x480>
1000d010:	1880012e 	bgeu	r3,r2,1000d018 <__umoddi3+0x480>
1000d014:	1cc7883a 	add	r3,r3,r19
1000d018:	18a3c83a 	sub	r17,r3,r2
1000d01c:	8809883a 	mov	r4,r17
1000d020:	b00b883a 	mov	r5,r22
1000d024:	000d2340 	call	1000d234 <__umodsi3>
1000d028:	1021883a 	mov	r16,r2
1000d02c:	8809883a 	mov	r4,r17
1000d030:	b00b883a 	mov	r5,r22
1000d034:	000d1d00 	call	1000d1d0 <__udivsi3>
1000d038:	8022943a 	slli	r17,r16,16
1000d03c:	a885383a 	mul	r2,r21,r2
1000d040:	bdffffcc 	andi	r23,r23,65535
1000d044:	8de2b03a 	or	r17,r17,r23
1000d048:	8880042e 	bgeu	r17,r2,1000d05c <__umoddi3+0x4c4>
1000d04c:	8ce3883a 	add	r17,r17,r19
1000d050:	8cc00236 	bltu	r17,r19,1000d05c <__umoddi3+0x4c4>
1000d054:	8880012e 	bgeu	r17,r2,1000d05c <__umoddi3+0x4c4>
1000d058:	8ce3883a 	add	r17,r17,r19
1000d05c:	88a3c83a 	sub	r17,r17,r2
1000d060:	003f2d06 	br	1000cd18 <__umoddi3+0x180>
1000d064:	80bfcb2e 	bgeu	r16,r2,1000cf94 <__umoddi3+0x3fc>
1000d068:	14a5c83a 	sub	r18,r2,r18
1000d06c:	1485803a 	cmpltu	r2,r2,r18
1000d070:	15c5883a 	add	r2,r2,r23
1000d074:	2089c83a 	sub	r4,r4,r2
1000d078:	9005883a 	mov	r2,r18
1000d07c:	003fc506 	br	1000cf94 <__umoddi3+0x3fc>
1000d080:	3007883a 	mov	r3,r6
1000d084:	003edd06 	br	1000cbfc <__umoddi3+0x64>
1000d088:	3811883a 	mov	r8,r7
1000d08c:	000b883a 	mov	r5,zero
1000d090:	003f5506 	br	1000cde8 <__umoddi3+0x250>
1000d094:	3810d43a 	srli	r8,r7,16
1000d098:	01400404 	movi	r5,16
1000d09c:	003f5206 	br	1000cde8 <__umoddi3+0x250>
1000d0a0:	9806d43a 	srli	r3,r19,16
1000d0a4:	05400404 	movi	r21,16
1000d0a8:	003f1106 	br	1000ccf0 <__umoddi3+0x158>
1000d0ac:	9807883a 	mov	r3,r19
1000d0b0:	003f0f06 	br	1000ccf0 <__umoddi3+0x158>
1000d0b4:	3006d43a 	srli	r3,r6,16
1000d0b8:	05400404 	movi	r21,16
1000d0bc:	003ecf06 	br	1000cbfc <__umoddi3+0x64>
1000d0c0:	2005883a 	mov	r2,r4
1000d0c4:	003f9a06 	br	1000cf30 <__umoddi3+0x398>
1000d0c8:	280d883a 	mov	r6,r5
1000d0cc:	003f8106 	br	1000ced4 <__umoddi3+0x33c>
1000d0d0:	1cc7883a 	add	r3,r3,r19
1000d0d4:	003ee606 	br	1000cc70 <__umoddi3+0xd8>

1000d0d8 <__divsi3>:
1000d0d8:	20001a16 	blt	r4,zero,1000d144 <__divsi3+0x6c>
1000d0dc:	000f883a 	mov	r7,zero
1000d0e0:	2800020e 	bge	r5,zero,1000d0ec <__divsi3+0x14>
1000d0e4:	014bc83a 	sub	r5,zero,r5
1000d0e8:	39c0005c 	xori	r7,r7,1
1000d0ec:	200d883a 	mov	r6,r4
1000d0f0:	00c00044 	movi	r3,1
1000d0f4:	2900092e 	bgeu	r5,r4,1000d11c <__divsi3+0x44>
1000d0f8:	00800804 	movi	r2,32
1000d0fc:	00c00044 	movi	r3,1
1000d100:	00000106 	br	1000d108 <__divsi3+0x30>
1000d104:	10001226 	beq	r2,zero,1000d150 <__divsi3+0x78>
1000d108:	294b883a 	add	r5,r5,r5
1000d10c:	10bfffc4 	addi	r2,r2,-1
1000d110:	18c7883a 	add	r3,r3,r3
1000d114:	293ffb36 	bltu	r5,r4,1000d104 <__divsi3+0x2c>
1000d118:	18000d26 	beq	r3,zero,1000d150 <__divsi3+0x78>
1000d11c:	0005883a 	mov	r2,zero
1000d120:	31400236 	bltu	r6,r5,1000d12c <__divsi3+0x54>
1000d124:	314dc83a 	sub	r6,r6,r5
1000d128:	10c4b03a 	or	r2,r2,r3
1000d12c:	1806d07a 	srli	r3,r3,1
1000d130:	280ad07a 	srli	r5,r5,1
1000d134:	183ffa1e 	bne	r3,zero,1000d120 <__divsi3+0x48>
1000d138:	38000126 	beq	r7,zero,1000d140 <__divsi3+0x68>
1000d13c:	0085c83a 	sub	r2,zero,r2
1000d140:	f800283a 	ret
1000d144:	0109c83a 	sub	r4,zero,r4
1000d148:	01c00044 	movi	r7,1
1000d14c:	003fe406 	br	1000d0e0 <__divsi3+0x8>
1000d150:	0005883a 	mov	r2,zero
1000d154:	003ff806 	br	1000d138 <__divsi3+0x60>

1000d158 <__modsi3>:
1000d158:	20001a16 	blt	r4,zero,1000d1c4 <__modsi3+0x6c>
1000d15c:	000f883a 	mov	r7,zero
1000d160:	2005883a 	mov	r2,r4
1000d164:	2800010e 	bge	r5,zero,1000d16c <__modsi3+0x14>
1000d168:	014bc83a 	sub	r5,zero,r5
1000d16c:	00c00044 	movi	r3,1
1000d170:	2900092e 	bgeu	r5,r4,1000d198 <__modsi3+0x40>
1000d174:	01800804 	movi	r6,32
1000d178:	00c00044 	movi	r3,1
1000d17c:	00000106 	br	1000d184 <__modsi3+0x2c>
1000d180:	30000d26 	beq	r6,zero,1000d1b8 <__modsi3+0x60>
1000d184:	294b883a 	add	r5,r5,r5
1000d188:	31bfffc4 	addi	r6,r6,-1
1000d18c:	18c7883a 	add	r3,r3,r3
1000d190:	293ffb36 	bltu	r5,r4,1000d180 <__modsi3+0x28>
1000d194:	18000826 	beq	r3,zero,1000d1b8 <__modsi3+0x60>
1000d198:	1806d07a 	srli	r3,r3,1
1000d19c:	11400136 	bltu	r2,r5,1000d1a4 <__modsi3+0x4c>
1000d1a0:	1145c83a 	sub	r2,r2,r5
1000d1a4:	280ad07a 	srli	r5,r5,1
1000d1a8:	183ffb1e 	bne	r3,zero,1000d198 <__modsi3+0x40>
1000d1ac:	38000126 	beq	r7,zero,1000d1b4 <__modsi3+0x5c>
1000d1b0:	0085c83a 	sub	r2,zero,r2
1000d1b4:	f800283a 	ret
1000d1b8:	2005883a 	mov	r2,r4
1000d1bc:	383ffd26 	beq	r7,zero,1000d1b4 <__modsi3+0x5c>
1000d1c0:	003ffb06 	br	1000d1b0 <__modsi3+0x58>
1000d1c4:	0109c83a 	sub	r4,zero,r4
1000d1c8:	01c00044 	movi	r7,1
1000d1cc:	003fe406 	br	1000d160 <__modsi3+0x8>

1000d1d0 <__udivsi3>:
1000d1d0:	200d883a 	mov	r6,r4
1000d1d4:	2900152e 	bgeu	r5,r4,1000d22c <__udivsi3+0x5c>
1000d1d8:	28001416 	blt	r5,zero,1000d22c <__udivsi3+0x5c>
1000d1dc:	00800804 	movi	r2,32
1000d1e0:	00c00044 	movi	r3,1
1000d1e4:	00000206 	br	1000d1f0 <__udivsi3+0x20>
1000d1e8:	10000e26 	beq	r2,zero,1000d224 <__udivsi3+0x54>
1000d1ec:	28000516 	blt	r5,zero,1000d204 <__udivsi3+0x34>
1000d1f0:	294b883a 	add	r5,r5,r5
1000d1f4:	10bfffc4 	addi	r2,r2,-1
1000d1f8:	18c7883a 	add	r3,r3,r3
1000d1fc:	293ffa36 	bltu	r5,r4,1000d1e8 <__udivsi3+0x18>
1000d200:	18000826 	beq	r3,zero,1000d224 <__udivsi3+0x54>
1000d204:	0005883a 	mov	r2,zero
1000d208:	31400236 	bltu	r6,r5,1000d214 <__udivsi3+0x44>
1000d20c:	314dc83a 	sub	r6,r6,r5
1000d210:	10c4b03a 	or	r2,r2,r3
1000d214:	1806d07a 	srli	r3,r3,1
1000d218:	280ad07a 	srli	r5,r5,1
1000d21c:	183ffa1e 	bne	r3,zero,1000d208 <__udivsi3+0x38>
1000d220:	f800283a 	ret
1000d224:	0005883a 	mov	r2,zero
1000d228:	f800283a 	ret
1000d22c:	00c00044 	movi	r3,1
1000d230:	003ff406 	br	1000d204 <__udivsi3+0x34>

1000d234 <__umodsi3>:
1000d234:	2005883a 	mov	r2,r4
1000d238:	2900132e 	bgeu	r5,r4,1000d288 <__umodsi3+0x54>
1000d23c:	28001216 	blt	r5,zero,1000d288 <__umodsi3+0x54>
1000d240:	01800804 	movi	r6,32
1000d244:	00c00044 	movi	r3,1
1000d248:	00000206 	br	1000d254 <__umodsi3+0x20>
1000d24c:	30000c26 	beq	r6,zero,1000d280 <__umodsi3+0x4c>
1000d250:	28000516 	blt	r5,zero,1000d268 <__umodsi3+0x34>
1000d254:	294b883a 	add	r5,r5,r5
1000d258:	31bfffc4 	addi	r6,r6,-1
1000d25c:	18c7883a 	add	r3,r3,r3
1000d260:	293ffa36 	bltu	r5,r4,1000d24c <__umodsi3+0x18>
1000d264:	18000626 	beq	r3,zero,1000d280 <__umodsi3+0x4c>
1000d268:	1806d07a 	srli	r3,r3,1
1000d26c:	11400136 	bltu	r2,r5,1000d274 <__umodsi3+0x40>
1000d270:	1145c83a 	sub	r2,r2,r5
1000d274:	280ad07a 	srli	r5,r5,1
1000d278:	183ffb1e 	bne	r3,zero,1000d268 <__umodsi3+0x34>
1000d27c:	f800283a 	ret
1000d280:	2005883a 	mov	r2,r4
1000d284:	f800283a 	ret
1000d288:	00c00044 	movi	r3,1
1000d28c:	003ff606 	br	1000d268 <__umodsi3+0x34>

1000d290 <__adddf3>:
1000d290:	02000434 	movhi	r8,16
1000d294:	defffb04 	addi	sp,sp,-20
1000d298:	423fffc4 	addi	r8,r8,-1
1000d29c:	2a12703a 	and	r9,r5,r8
1000d2a0:	3a06703a 	and	r3,r7,r8
1000d2a4:	3804d53a 	srli	r2,r7,20
1000d2a8:	dc000015 	stw	r16,0(sp)
1000d2ac:	2820d53a 	srli	r16,r5,20
1000d2b0:	2016d77a 	srli	r11,r4,29
1000d2b4:	3014d77a 	srli	r10,r6,29
1000d2b8:	280ad7fa 	srli	r5,r5,31
1000d2bc:	481290fa 	slli	r9,r9,3
1000d2c0:	180690fa 	slli	r3,r3,3
1000d2c4:	380ed7fa 	srli	r7,r7,31
1000d2c8:	dc400115 	stw	r17,4(sp)
1000d2cc:	8401ffcc 	andi	r16,r16,2047
1000d2d0:	1081ffcc 	andi	r2,r2,2047
1000d2d4:	dfc00415 	stw	ra,16(sp)
1000d2d8:	dcc00315 	stw	r19,12(sp)
1000d2dc:	dc800215 	stw	r18,8(sp)
1000d2e0:	5a52b03a 	or	r9,r11,r9
1000d2e4:	50c6b03a 	or	r3,r10,r3
1000d2e8:	2823883a 	mov	r17,r5
1000d2ec:	201890fa 	slli	r12,r4,3
1000d2f0:	301690fa 	slli	r11,r6,3
1000d2f4:	8095c83a 	sub	r10,r16,r2
1000d2f8:	29c06a26 	beq	r5,r7,1000d4a4 <__adddf3+0x214>
1000d2fc:	0280590e 	bge	zero,r10,1000d464 <__adddf3+0x1d4>
1000d300:	10007c26 	beq	r2,zero,1000d4f4 <__adddf3+0x264>
1000d304:	8081ffd8 	cmpnei	r2,r16,2047
1000d308:	10010726 	beq	r2,zero,1000d728 <__adddf3+0x498>
1000d30c:	18c02034 	orhi	r3,r3,128
1000d310:	50800e48 	cmpgei	r2,r10,57
1000d314:	1000ed1e 	bne	r2,zero,1000d6cc <__adddf3+0x43c>
1000d318:	50800808 	cmpgei	r2,r10,32
1000d31c:	1001541e 	bne	r2,zero,1000d870 <__adddf3+0x5e0>
1000d320:	01000804 	movi	r4,32
1000d324:	2289c83a 	sub	r4,r4,r10
1000d328:	1926983a 	sll	r19,r3,r4
1000d32c:	5a84d83a 	srl	r2,r11,r10
1000d330:	5908983a 	sll	r4,r11,r4
1000d334:	1a86d83a 	srl	r3,r3,r10
1000d338:	98a6b03a 	or	r19,r19,r2
1000d33c:	2016c03a 	cmpne	r11,r4,zero
1000d340:	9ae6b03a 	or	r19,r19,r11
1000d344:	48d3c83a 	sub	r9,r9,r3
1000d348:	64e7c83a 	sub	r19,r12,r19
1000d34c:	64c9803a 	cmpltu	r4,r12,r19
1000d350:	4909c83a 	sub	r4,r9,r4
1000d354:	2080202c 	andhi	r2,r4,128
1000d358:	10008726 	beq	r2,zero,1000d578 <__adddf3+0x2e8>
1000d35c:	02402034 	movhi	r9,128
1000d360:	4a7fffc4 	addi	r9,r9,-1
1000d364:	2264703a 	and	r18,r4,r9
1000d368:	9000cf26 	beq	r18,zero,1000d6a8 <__adddf3+0x418>
1000d36c:	9009883a 	mov	r4,r18
1000d370:	000f9680 	call	1000f968 <__clzsi2>
1000d374:	10fffe04 	addi	r3,r2,-8
1000d378:	01000804 	movi	r4,32
1000d37c:	20c9c83a 	sub	r4,r4,r3
1000d380:	990ad83a 	srl	r5,r19,r4
1000d384:	90c8983a 	sll	r4,r18,r3
1000d388:	98e6983a 	sll	r19,r19,r3
1000d38c:	2908b03a 	or	r4,r5,r4
1000d390:	1c00be16 	blt	r3,r16,1000d68c <__adddf3+0x3fc>
1000d394:	1c21c83a 	sub	r16,r3,r16
1000d398:	81400044 	addi	r5,r16,1
1000d39c:	28800808 	cmpgei	r2,r5,32
1000d3a0:	10011b1e 	bne	r2,zero,1000d810 <__adddf3+0x580>
1000d3a4:	00800804 	movi	r2,32
1000d3a8:	1145c83a 	sub	r2,r2,r5
1000d3ac:	9946d83a 	srl	r3,r19,r5
1000d3b0:	98a6983a 	sll	r19,r19,r2
1000d3b4:	2084983a 	sll	r2,r4,r2
1000d3b8:	2148d83a 	srl	r4,r4,r5
1000d3bc:	9826c03a 	cmpne	r19,r19,zero
1000d3c0:	10c4b03a 	or	r2,r2,r3
1000d3c4:	14e6b03a 	or	r19,r2,r19
1000d3c8:	0021883a 	mov	r16,zero
1000d3cc:	988001cc 	andi	r2,r19,7
1000d3d0:	10000726 	beq	r2,zero,1000d3f0 <__adddf3+0x160>
1000d3d4:	988003cc 	andi	r2,r19,15
1000d3d8:	10800120 	cmpeqi	r2,r2,4
1000d3dc:	1000041e 	bne	r2,zero,1000d3f0 <__adddf3+0x160>
1000d3e0:	99400104 	addi	r5,r19,4
1000d3e4:	2ce7803a 	cmpltu	r19,r5,r19
1000d3e8:	24c9883a 	add	r4,r4,r19
1000d3ec:	2827883a 	mov	r19,r5
1000d3f0:	2080202c 	andhi	r2,r4,128
1000d3f4:	10006226 	beq	r2,zero,1000d580 <__adddf3+0x2f0>
1000d3f8:	84000044 	addi	r16,r16,1
1000d3fc:	8081ffe0 	cmpeqi	r2,r16,2047
1000d400:	8401ffcc 	andi	r16,r16,2047
1000d404:	1000731e 	bne	r2,zero,1000d5d4 <__adddf3+0x344>
1000d408:	017fe034 	movhi	r5,65408
1000d40c:	297fffc4 	addi	r5,r5,-1
1000d410:	214a703a 	and	r5,r4,r5
1000d414:	2804977a 	slli	r2,r5,29
1000d418:	280a927a 	slli	r5,r5,9
1000d41c:	9826d0fa 	srli	r19,r19,3
1000d420:	2808d33a 	srli	r4,r5,12
1000d424:	14c4b03a 	or	r2,r2,r19
1000d428:	8020953a 	slli	r16,r16,20
1000d42c:	00c00434 	movhi	r3,16
1000d430:	8c403fcc 	andi	r17,r17,255
1000d434:	882297fa 	slli	r17,r17,31
1000d438:	18ffffc4 	addi	r3,r3,-1
1000d43c:	20c6703a 	and	r3,r4,r3
1000d440:	1c06b03a 	or	r3,r3,r16
1000d444:	1c46b03a 	or	r3,r3,r17
1000d448:	dfc00417 	ldw	ra,16(sp)
1000d44c:	dcc00317 	ldw	r19,12(sp)
1000d450:	dc800217 	ldw	r18,8(sp)
1000d454:	dc400117 	ldw	r17,4(sp)
1000d458:	dc000017 	ldw	r16,0(sp)
1000d45c:	dec00504 	addi	sp,sp,20
1000d460:	f800283a 	ret
1000d464:	50002b1e 	bne	r10,zero,1000d514 <__adddf3+0x284>
1000d468:	80800044 	addi	r2,r16,1
1000d46c:	1081ff8c 	andi	r2,r2,2046
1000d470:	1000a11e 	bne	r2,zero,1000d6f8 <__adddf3+0x468>
1000d474:	4b0ab03a 	or	r5,r9,r12
1000d478:	1ac4b03a 	or	r2,r3,r11
1000d47c:	80015c1e 	bne	r16,zero,1000d9f0 <__adddf3+0x760>
1000d480:	28012826 	beq	r5,zero,1000d924 <__adddf3+0x694>
1000d484:	1001671e 	bne	r2,zero,1000da24 <__adddf3+0x794>
1000d488:	4826977a 	slli	r19,r9,29
1000d48c:	00c80034 	movhi	r3,8192
1000d490:	18ffffc4 	addi	r3,r3,-1
1000d494:	20c4703a 	and	r2,r4,r3
1000d498:	9884b03a 	or	r2,r19,r2
1000d49c:	4812d0fa 	srli	r9,r9,3
1000d4a0:	00003d06 	br	1000d598 <__adddf3+0x308>
1000d4a4:	02804f0e 	bge	zero,r10,1000d5e4 <__adddf3+0x354>
1000d4a8:	10002426 	beq	r2,zero,1000d53c <__adddf3+0x2ac>
1000d4ac:	8081ffd8 	cmpnei	r2,r16,2047
1000d4b0:	10009d26 	beq	r2,zero,1000d728 <__adddf3+0x498>
1000d4b4:	18c02034 	orhi	r3,r3,128
1000d4b8:	50800e48 	cmpgei	r2,r10,57
1000d4bc:	10003b1e 	bne	r2,zero,1000d5ac <__adddf3+0x31c>
1000d4c0:	50800808 	cmpgei	r2,r10,32
1000d4c4:	10010326 	beq	r2,zero,1000d8d4 <__adddf3+0x644>
1000d4c8:	54fff804 	addi	r19,r10,-32
1000d4cc:	51000820 	cmpeqi	r4,r10,32
1000d4d0:	1cc4d83a 	srl	r2,r3,r19
1000d4d4:	2000041e 	bne	r4,zero,1000d4e8 <__adddf3+0x258>
1000d4d8:	01001004 	movi	r4,64
1000d4dc:	2295c83a 	sub	r10,r4,r10
1000d4e0:	1a86983a 	sll	r3,r3,r10
1000d4e4:	58d6b03a 	or	r11,r11,r3
1000d4e8:	5826c03a 	cmpne	r19,r11,zero
1000d4ec:	98a6b03a 	or	r19,r19,r2
1000d4f0:	00003006 	br	1000d5b4 <__adddf3+0x324>
1000d4f4:	1ac4b03a 	or	r2,r3,r11
1000d4f8:	10007726 	beq	r2,zero,1000d6d8 <__adddf3+0x448>
1000d4fc:	50bfffc4 	addi	r2,r10,-1
1000d500:	10011926 	beq	r2,zero,1000d968 <__adddf3+0x6d8>
1000d504:	5281ffd8 	cmpnei	r10,r10,2047
1000d508:	50012026 	beq	r10,zero,1000d98c <__adddf3+0x6fc>
1000d50c:	1015883a 	mov	r10,r2
1000d510:	003f7f06 	br	1000d310 <__adddf3+0x80>
1000d514:	1409c83a 	sub	r4,r2,r16
1000d518:	8000a61e 	bne	r16,zero,1000d7b4 <__adddf3+0x524>
1000d51c:	4b0ab03a 	or	r5,r9,r12
1000d520:	2800f726 	beq	r5,zero,1000d900 <__adddf3+0x670>
1000d524:	217fffc4 	addi	r5,r4,-1
1000d528:	28017f26 	beq	r5,zero,1000db28 <__adddf3+0x898>
1000d52c:	2101ffd8 	cmpnei	r4,r4,2047
1000d530:	2001a326 	beq	r4,zero,1000dbc0 <__adddf3+0x930>
1000d534:	2809883a 	mov	r4,r5
1000d538:	0000a106 	br	1000d7c0 <__adddf3+0x530>
1000d53c:	1ac4b03a 	or	r2,r3,r11
1000d540:	10006526 	beq	r2,zero,1000d6d8 <__adddf3+0x448>
1000d544:	50bfffc4 	addi	r2,r10,-1
1000d548:	10000426 	beq	r2,zero,1000d55c <__adddf3+0x2cc>
1000d54c:	5281ffd8 	cmpnei	r10,r10,2047
1000d550:	50014326 	beq	r10,zero,1000da60 <__adddf3+0x7d0>
1000d554:	1015883a 	mov	r10,r2
1000d558:	003fd706 	br	1000d4b8 <__adddf3+0x228>
1000d55c:	62e7883a 	add	r19,r12,r11
1000d560:	48d3883a 	add	r9,r9,r3
1000d564:	9b09803a 	cmpltu	r4,r19,r12
1000d568:	4909883a 	add	r4,r9,r4
1000d56c:	2080202c 	andhi	r2,r4,128
1000d570:	1000b41e 	bne	r2,zero,1000d844 <__adddf3+0x5b4>
1000d574:	04000044 	movi	r16,1
1000d578:	988001cc 	andi	r2,r19,7
1000d57c:	103f951e 	bne	r2,zero,1000d3d4 <__adddf3+0x144>
1000d580:	9826d0fa 	srli	r19,r19,3
1000d584:	2004977a 	slli	r2,r4,29
1000d588:	2012d0fa 	srli	r9,r4,3
1000d58c:	9884b03a 	or	r2,r19,r2
1000d590:	80c1ffe0 	cmpeqi	r3,r16,2047
1000d594:	1800351e 	bne	r3,zero,1000d66c <__adddf3+0x3dc>
1000d598:	01000434 	movhi	r4,16
1000d59c:	213fffc4 	addi	r4,r4,-1
1000d5a0:	4908703a 	and	r4,r9,r4
1000d5a4:	8401ffcc 	andi	r16,r16,2047
1000d5a8:	003f9f06 	br	1000d428 <__adddf3+0x198>
1000d5ac:	1ac8b03a 	or	r4,r3,r11
1000d5b0:	2026c03a 	cmpne	r19,r4,zero
1000d5b4:	9b27883a 	add	r19,r19,r12
1000d5b8:	9b09803a 	cmpltu	r4,r19,r12
1000d5bc:	2249883a 	add	r4,r4,r9
1000d5c0:	2080202c 	andhi	r2,r4,128
1000d5c4:	103fec26 	beq	r2,zero,1000d578 <__adddf3+0x2e8>
1000d5c8:	84000044 	addi	r16,r16,1
1000d5cc:	8081ffe0 	cmpeqi	r2,r16,2047
1000d5d0:	10009d26 	beq	r2,zero,1000d848 <__adddf3+0x5b8>
1000d5d4:	0401ffc4 	movi	r16,2047
1000d5d8:	0009883a 	mov	r4,zero
1000d5dc:	0005883a 	mov	r2,zero
1000d5e0:	003f9106 	br	1000d428 <__adddf3+0x198>
1000d5e4:	5000571e 	bne	r10,zero,1000d744 <__adddf3+0x4b4>
1000d5e8:	80800044 	addi	r2,r16,1
1000d5ec:	1141ff8c 	andi	r5,r2,2046
1000d5f0:	2800ed1e 	bne	r5,zero,1000d9a8 <__adddf3+0x718>
1000d5f4:	4b04b03a 	or	r2,r9,r12
1000d5f8:	8000a826 	beq	r16,zero,1000d89c <__adddf3+0x60c>
1000d5fc:	10010226 	beq	r2,zero,1000da08 <__adddf3+0x778>
1000d600:	1ad6b03a 	or	r11,r3,r11
1000d604:	480a977a 	slli	r5,r9,29
1000d608:	4812d0fa 	srli	r9,r9,3
1000d60c:	58015f26 	beq	r11,zero,1000db8c <__adddf3+0x8fc>
1000d610:	02080034 	movhi	r8,8192
1000d614:	423fffc4 	addi	r8,r8,-1
1000d618:	2204703a 	and	r2,r4,r8
1000d61c:	4900022c 	andhi	r4,r9,8
1000d620:	114ab03a 	or	r5,r2,r5
1000d624:	20000826 	beq	r4,zero,1000d648 <__adddf3+0x3b8>
1000d628:	1808d0fa 	srli	r4,r3,3
1000d62c:	2080022c 	andhi	r2,r4,8
1000d630:	1000051e 	bne	r2,zero,1000d648 <__adddf3+0x3b8>
1000d634:	1806977a 	slli	r3,r3,29
1000d638:	3204703a 	and	r2,r6,r8
1000d63c:	3823883a 	mov	r17,r7
1000d640:	10cab03a 	or	r5,r2,r3
1000d644:	2013883a 	mov	r9,r4
1000d648:	2804d77a 	srli	r2,r5,29
1000d64c:	480890fa 	slli	r4,r9,3
1000d650:	00c80034 	movhi	r3,8192
1000d654:	18ffffc4 	addi	r3,r3,-1
1000d658:	1108b03a 	or	r4,r2,r4
1000d65c:	2004977a 	slli	r2,r4,29
1000d660:	2012d0fa 	srli	r9,r4,3
1000d664:	28ca703a 	and	r5,r5,r3
1000d668:	1144b03a 	or	r2,r2,r5
1000d66c:	4886b03a 	or	r3,r9,r2
1000d670:	18016b26 	beq	r3,zero,1000dc20 <__adddf3+0x990>
1000d674:	00c00434 	movhi	r3,16
1000d678:	49000234 	orhi	r4,r9,8
1000d67c:	18ffffc4 	addi	r3,r3,-1
1000d680:	20c8703a 	and	r4,r4,r3
1000d684:	0401ffc4 	movi	r16,2047
1000d688:	003f6706 	br	1000d428 <__adddf3+0x198>
1000d68c:	017fe034 	movhi	r5,65408
1000d690:	297fffc4 	addi	r5,r5,-1
1000d694:	988001cc 	andi	r2,r19,7
1000d698:	80e1c83a 	sub	r16,r16,r3
1000d69c:	2148703a 	and	r4,r4,r5
1000d6a0:	103f4c1e 	bne	r2,zero,1000d3d4 <__adddf3+0x144>
1000d6a4:	003fb606 	br	1000d580 <__adddf3+0x2f0>
1000d6a8:	9809883a 	mov	r4,r19
1000d6ac:	000f9680 	call	1000f968 <__clzsi2>
1000d6b0:	10c00604 	addi	r3,r2,24
1000d6b4:	19000808 	cmpgei	r4,r3,32
1000d6b8:	203f2f26 	beq	r4,zero,1000d378 <__adddf3+0xe8>
1000d6bc:	113ffe04 	addi	r4,r2,-8
1000d6c0:	9908983a 	sll	r4,r19,r4
1000d6c4:	0027883a 	mov	r19,zero
1000d6c8:	003f3106 	br	1000d390 <__adddf3+0x100>
1000d6cc:	1ac8b03a 	or	r4,r3,r11
1000d6d0:	2026c03a 	cmpne	r19,r4,zero
1000d6d4:	003f1c06 	br	1000d348 <__adddf3+0xb8>
1000d6d8:	4826977a 	slli	r19,r9,29
1000d6dc:	00c80034 	movhi	r3,8192
1000d6e0:	18ffffc4 	addi	r3,r3,-1
1000d6e4:	20c4703a 	and	r2,r4,r3
1000d6e8:	14c4b03a 	or	r2,r2,r19
1000d6ec:	4812d0fa 	srli	r9,r9,3
1000d6f0:	5021883a 	mov	r16,r10
1000d6f4:	003fa606 	br	1000d590 <__adddf3+0x300>
1000d6f8:	62e7c83a 	sub	r19,r12,r11
1000d6fc:	48e5c83a 	sub	r18,r9,r3
1000d700:	64c9803a 	cmpltu	r4,r12,r19
1000d704:	9125c83a 	sub	r18,r18,r4
1000d708:	9080202c 	andhi	r2,r18,128
1000d70c:	1000b21e 	bne	r2,zero,1000d9d8 <__adddf3+0x748>
1000d710:	9c84b03a 	or	r2,r19,r18
1000d714:	103f141e 	bne	r2,zero,1000d368 <__adddf3+0xd8>
1000d718:	0013883a 	mov	r9,zero
1000d71c:	0021883a 	mov	r16,zero
1000d720:	0023883a 	mov	r17,zero
1000d724:	003f9c06 	br	1000d598 <__adddf3+0x308>
1000d728:	4826977a 	slli	r19,r9,29
1000d72c:	00c80034 	movhi	r3,8192
1000d730:	18ffffc4 	addi	r3,r3,-1
1000d734:	20c4703a 	and	r2,r4,r3
1000d738:	14c4b03a 	or	r2,r2,r19
1000d73c:	4812d0fa 	srli	r9,r9,3
1000d740:	003fca06 	br	1000d66c <__adddf3+0x3dc>
1000d744:	1409c83a 	sub	r4,r2,r16
1000d748:	80005e1e 	bne	r16,zero,1000d8c4 <__adddf3+0x634>
1000d74c:	4b0ab03a 	or	r5,r9,r12
1000d750:	28011326 	beq	r5,zero,1000dba0 <__adddf3+0x910>
1000d754:	217fffc4 	addi	r5,r4,-1
1000d758:	28012c26 	beq	r5,zero,1000dc0c <__adddf3+0x97c>
1000d75c:	2101ffd8 	cmpnei	r4,r4,2047
1000d760:	2000a926 	beq	r4,zero,1000da08 <__adddf3+0x778>
1000d764:	2809883a 	mov	r4,r5
1000d768:	21400e48 	cmpgei	r5,r4,57
1000d76c:	2800b91e 	bne	r5,zero,1000da54 <__adddf3+0x7c4>
1000d770:	21400808 	cmpgei	r5,r4,32
1000d774:	28011a1e 	bne	r5,zero,1000dbe0 <__adddf3+0x950>
1000d778:	01400804 	movi	r5,32
1000d77c:	290bc83a 	sub	r5,r5,r4
1000d780:	4966983a 	sll	r19,r9,r5
1000d784:	610cd83a 	srl	r6,r12,r4
1000d788:	614a983a 	sll	r5,r12,r5
1000d78c:	4912d83a 	srl	r9,r9,r4
1000d790:	99a6b03a 	or	r19,r19,r6
1000d794:	280ac03a 	cmpne	r5,r5,zero
1000d798:	9966b03a 	or	r19,r19,r5
1000d79c:	1a47883a 	add	r3,r3,r9
1000d7a0:	9ae7883a 	add	r19,r19,r11
1000d7a4:	9ac9803a 	cmpltu	r4,r19,r11
1000d7a8:	20c9883a 	add	r4,r4,r3
1000d7ac:	1021883a 	mov	r16,r2
1000d7b0:	003f8306 	br	1000d5c0 <__adddf3+0x330>
1000d7b4:	1141ffd8 	cmpnei	r5,r2,2047
1000d7b8:	28006326 	beq	r5,zero,1000d948 <__adddf3+0x6b8>
1000d7bc:	4a402034 	orhi	r9,r9,128
1000d7c0:	21400e48 	cmpgei	r5,r4,57
1000d7c4:	28006e1e 	bne	r5,zero,1000d980 <__adddf3+0x6f0>
1000d7c8:	21400808 	cmpgei	r5,r4,32
1000d7cc:	2800ab1e 	bne	r5,zero,1000da7c <__adddf3+0x7ec>
1000d7d0:	01400804 	movi	r5,32
1000d7d4:	290bc83a 	sub	r5,r5,r4
1000d7d8:	4966983a 	sll	r19,r9,r5
1000d7dc:	610cd83a 	srl	r6,r12,r4
1000d7e0:	614a983a 	sll	r5,r12,r5
1000d7e4:	4912d83a 	srl	r9,r9,r4
1000d7e8:	99a6b03a 	or	r19,r19,r6
1000d7ec:	280ac03a 	cmpne	r5,r5,zero
1000d7f0:	9966b03a 	or	r19,r19,r5
1000d7f4:	1a47c83a 	sub	r3,r3,r9
1000d7f8:	5ce7c83a 	sub	r19,r11,r19
1000d7fc:	5cc9803a 	cmpltu	r4,r11,r19
1000d800:	1909c83a 	sub	r4,r3,r4
1000d804:	3823883a 	mov	r17,r7
1000d808:	1021883a 	mov	r16,r2
1000d80c:	003ed106 	br	1000d354 <__adddf3+0xc4>
1000d810:	843ff844 	addi	r16,r16,-31
1000d814:	28800820 	cmpeqi	r2,r5,32
1000d818:	2420d83a 	srl	r16,r4,r16
1000d81c:	1000041e 	bne	r2,zero,1000d830 <__adddf3+0x5a0>
1000d820:	00801004 	movi	r2,64
1000d824:	114bc83a 	sub	r5,r2,r5
1000d828:	2148983a 	sll	r4,r4,r5
1000d82c:	9926b03a 	or	r19,r19,r4
1000d830:	9826c03a 	cmpne	r19,r19,zero
1000d834:	9c26b03a 	or	r19,r19,r16
1000d838:	0009883a 	mov	r4,zero
1000d83c:	0021883a 	mov	r16,zero
1000d840:	003f4d06 	br	1000d578 <__adddf3+0x2e8>
1000d844:	04000084 	movi	r16,2
1000d848:	00bfe034 	movhi	r2,65408
1000d84c:	10bfffc4 	addi	r2,r2,-1
1000d850:	208a703a 	and	r5,r4,r2
1000d854:	9804d07a 	srli	r2,r19,1
1000d858:	280697fa 	slli	r3,r5,31
1000d85c:	9cc0004c 	andi	r19,r19,1
1000d860:	14e6b03a 	or	r19,r2,r19
1000d864:	2808d07a 	srli	r4,r5,1
1000d868:	1ce6b03a 	or	r19,r3,r19
1000d86c:	003ed706 	br	1000d3cc <__adddf3+0x13c>
1000d870:	54fff804 	addi	r19,r10,-32
1000d874:	50800820 	cmpeqi	r2,r10,32
1000d878:	1ce6d83a 	srl	r19,r3,r19
1000d87c:	1000041e 	bne	r2,zero,1000d890 <__adddf3+0x600>
1000d880:	00801004 	movi	r2,64
1000d884:	1295c83a 	sub	r10,r2,r10
1000d888:	1a86983a 	sll	r3,r3,r10
1000d88c:	58d6b03a 	or	r11,r11,r3
1000d890:	5808c03a 	cmpne	r4,r11,zero
1000d894:	24e6b03a 	or	r19,r4,r19
1000d898:	003eab06 	br	1000d348 <__adddf3+0xb8>
1000d89c:	1000a926 	beq	r2,zero,1000db44 <__adddf3+0x8b4>
1000d8a0:	1ac4b03a 	or	r2,r3,r11
1000d8a4:	1000ae1e 	bne	r2,zero,1000db60 <__adddf3+0x8d0>
1000d8a8:	4806977a 	slli	r3,r9,29
1000d8ac:	00880034 	movhi	r2,8192
1000d8b0:	10bfffc4 	addi	r2,r2,-1
1000d8b4:	2084703a 	and	r2,r4,r2
1000d8b8:	10c4b03a 	or	r2,r2,r3
1000d8bc:	4812d0fa 	srli	r9,r9,3
1000d8c0:	003f3506 	br	1000d598 <__adddf3+0x308>
1000d8c4:	1141ffd8 	cmpnei	r5,r2,2047
1000d8c8:	28004f26 	beq	r5,zero,1000da08 <__adddf3+0x778>
1000d8cc:	4a402034 	orhi	r9,r9,128
1000d8d0:	003fa506 	br	1000d768 <__adddf3+0x4d8>
1000d8d4:	01000804 	movi	r4,32
1000d8d8:	2289c83a 	sub	r4,r4,r10
1000d8dc:	1926983a 	sll	r19,r3,r4
1000d8e0:	5a84d83a 	srl	r2,r11,r10
1000d8e4:	5908983a 	sll	r4,r11,r4
1000d8e8:	1a86d83a 	srl	r3,r3,r10
1000d8ec:	98a6b03a 	or	r19,r19,r2
1000d8f0:	2016c03a 	cmpne	r11,r4,zero
1000d8f4:	9ae6b03a 	or	r19,r19,r11
1000d8f8:	48d3883a 	add	r9,r9,r3
1000d8fc:	003f2d06 	br	1000d5b4 <__adddf3+0x324>
1000d900:	01480034 	movhi	r5,8192
1000d904:	1826977a 	slli	r19,r3,29
1000d908:	297fffc4 	addi	r5,r5,-1
1000d90c:	3144703a 	and	r2,r6,r5
1000d910:	14c4b03a 	or	r2,r2,r19
1000d914:	1812d0fa 	srli	r9,r3,3
1000d918:	3823883a 	mov	r17,r7
1000d91c:	2021883a 	mov	r16,r4
1000d920:	003f1b06 	br	1000d590 <__adddf3+0x300>
1000d924:	10007d26 	beq	r2,zero,1000db1c <__adddf3+0x88c>
1000d928:	00880034 	movhi	r2,8192
1000d92c:	1808977a 	slli	r4,r3,29
1000d930:	10bfffc4 	addi	r2,r2,-1
1000d934:	3084703a 	and	r2,r6,r2
1000d938:	1104b03a 	or	r2,r2,r4
1000d93c:	1812d0fa 	srli	r9,r3,3
1000d940:	3823883a 	mov	r17,r7
1000d944:	003f1406 	br	1000d598 <__adddf3+0x308>
1000d948:	180a977a 	slli	r5,r3,29
1000d94c:	01080034 	movhi	r4,8192
1000d950:	213fffc4 	addi	r4,r4,-1
1000d954:	3104703a 	and	r2,r6,r4
1000d958:	2884b03a 	or	r2,r5,r2
1000d95c:	1812d0fa 	srli	r9,r3,3
1000d960:	3823883a 	mov	r17,r7
1000d964:	003f4106 	br	1000d66c <__adddf3+0x3dc>
1000d968:	62e7c83a 	sub	r19,r12,r11
1000d96c:	48d3c83a 	sub	r9,r9,r3
1000d970:	64c9803a 	cmpltu	r4,r12,r19
1000d974:	4909c83a 	sub	r4,r9,r4
1000d978:	04000044 	movi	r16,1
1000d97c:	003e7506 	br	1000d354 <__adddf3+0xc4>
1000d980:	4b12b03a 	or	r9,r9,r12
1000d984:	4826c03a 	cmpne	r19,r9,zero
1000d988:	003f9b06 	br	1000d7f8 <__adddf3+0x568>
1000d98c:	4826977a 	slli	r19,r9,29
1000d990:	00c80034 	movhi	r3,8192
1000d994:	18ffffc4 	addi	r3,r3,-1
1000d998:	20c4703a 	and	r2,r4,r3
1000d99c:	9884b03a 	or	r2,r19,r2
1000d9a0:	4812d0fa 	srli	r9,r9,3
1000d9a4:	003f3106 	br	1000d66c <__adddf3+0x3dc>
1000d9a8:	1101ffe0 	cmpeqi	r4,r2,2047
1000d9ac:	203f091e 	bne	r4,zero,1000d5d4 <__adddf3+0x344>
1000d9b0:	62d7883a 	add	r11,r12,r11
1000d9b4:	5b09803a 	cmpltu	r4,r11,r12
1000d9b8:	48d3883a 	add	r9,r9,r3
1000d9bc:	490b883a 	add	r5,r9,r4
1000d9c0:	282697fa 	slli	r19,r5,31
1000d9c4:	5816d07a 	srli	r11,r11,1
1000d9c8:	2808d07a 	srli	r4,r5,1
1000d9cc:	1021883a 	mov	r16,r2
1000d9d0:	9ae6b03a 	or	r19,r19,r11
1000d9d4:	003ee806 	br	1000d578 <__adddf3+0x2e8>
1000d9d8:	5b27c83a 	sub	r19,r11,r12
1000d9dc:	1a53c83a 	sub	r9,r3,r9
1000d9e0:	5cc9803a 	cmpltu	r4,r11,r19
1000d9e4:	4925c83a 	sub	r18,r9,r4
1000d9e8:	3823883a 	mov	r17,r7
1000d9ec:	003e5e06 	br	1000d368 <__adddf3+0xd8>
1000d9f0:	28002d1e 	bne	r5,zero,1000daa8 <__adddf3+0x818>
1000d9f4:	103fd41e 	bne	r2,zero,1000d948 <__adddf3+0x6b8>
1000d9f8:	00bfffc4 	movi	r2,-1
1000d9fc:	0023883a 	mov	r17,zero
1000da00:	4013883a 	mov	r9,r8
1000da04:	003f1b06 	br	1000d674 <__adddf3+0x3e4>
1000da08:	00880034 	movhi	r2,8192
1000da0c:	1808977a 	slli	r4,r3,29
1000da10:	10bfffc4 	addi	r2,r2,-1
1000da14:	3084703a 	and	r2,r6,r2
1000da18:	1104b03a 	or	r2,r2,r4
1000da1c:	1812d0fa 	srli	r9,r3,3
1000da20:	003f1206 	br	1000d66c <__adddf3+0x3dc>
1000da24:	62e7c83a 	sub	r19,r12,r11
1000da28:	48cbc83a 	sub	r5,r9,r3
1000da2c:	64c9803a 	cmpltu	r4,r12,r19
1000da30:	2909c83a 	sub	r4,r5,r4
1000da34:	2080202c 	andhi	r2,r4,128
1000da38:	10003626 	beq	r2,zero,1000db14 <__adddf3+0x884>
1000da3c:	5b27c83a 	sub	r19,r11,r12
1000da40:	1a53c83a 	sub	r9,r3,r9
1000da44:	5cc9803a 	cmpltu	r4,r11,r19
1000da48:	4909c83a 	sub	r4,r9,r4
1000da4c:	3823883a 	mov	r17,r7
1000da50:	003e5e06 	br	1000d3cc <__adddf3+0x13c>
1000da54:	4b12b03a 	or	r9,r9,r12
1000da58:	4826c03a 	cmpne	r19,r9,zero
1000da5c:	003f5006 	br	1000d7a0 <__adddf3+0x510>
1000da60:	4806977a 	slli	r3,r9,29
1000da64:	00880034 	movhi	r2,8192
1000da68:	10bfffc4 	addi	r2,r2,-1
1000da6c:	2084703a 	and	r2,r4,r2
1000da70:	10c4b03a 	or	r2,r2,r3
1000da74:	4812d0fa 	srli	r9,r9,3
1000da78:	003efc06 	br	1000d66c <__adddf3+0x3dc>
1000da7c:	217ff804 	addi	r5,r4,-32
1000da80:	21800820 	cmpeqi	r6,r4,32
1000da84:	494ad83a 	srl	r5,r9,r5
1000da88:	3000041e 	bne	r6,zero,1000da9c <__adddf3+0x80c>
1000da8c:	01801004 	movi	r6,64
1000da90:	3109c83a 	sub	r4,r6,r4
1000da94:	4912983a 	sll	r9,r9,r4
1000da98:	6258b03a 	or	r12,r12,r9
1000da9c:	6026c03a 	cmpne	r19,r12,zero
1000daa0:	9966b03a 	or	r19,r19,r5
1000daa4:	003f5406 	br	1000d7f8 <__adddf3+0x568>
1000daa8:	480a977a 	slli	r5,r9,29
1000daac:	4812d0fa 	srli	r9,r9,3
1000dab0:	10003626 	beq	r2,zero,1000db8c <__adddf3+0x8fc>
1000dab4:	02080034 	movhi	r8,8192
1000dab8:	423fffc4 	addi	r8,r8,-1
1000dabc:	2204703a 	and	r2,r4,r8
1000dac0:	4900022c 	andhi	r4,r9,8
1000dac4:	114ab03a 	or	r5,r2,r5
1000dac8:	20000826 	beq	r4,zero,1000daec <__adddf3+0x85c>
1000dacc:	1808d0fa 	srli	r4,r3,3
1000dad0:	2080022c 	andhi	r2,r4,8
1000dad4:	1000051e 	bne	r2,zero,1000daec <__adddf3+0x85c>
1000dad8:	1806977a 	slli	r3,r3,29
1000dadc:	3204703a 	and	r2,r6,r8
1000dae0:	3823883a 	mov	r17,r7
1000dae4:	10cab03a 	or	r5,r2,r3
1000dae8:	2013883a 	mov	r9,r4
1000daec:	480890fa 	slli	r4,r9,3
1000daf0:	2804d77a 	srli	r2,r5,29
1000daf4:	00c80034 	movhi	r3,8192
1000daf8:	18ffffc4 	addi	r3,r3,-1
1000dafc:	1108b03a 	or	r4,r2,r4
1000db00:	200c977a 	slli	r6,r4,29
1000db04:	28c4703a 	and	r2,r5,r3
1000db08:	2012d0fa 	srli	r9,r4,3
1000db0c:	3084b03a 	or	r2,r6,r2
1000db10:	003ed606 	br	1000d66c <__adddf3+0x3dc>
1000db14:	9904b03a 	or	r2,r19,r4
1000db18:	103e971e 	bne	r2,zero,1000d578 <__adddf3+0x2e8>
1000db1c:	0013883a 	mov	r9,zero
1000db20:	0023883a 	mov	r17,zero
1000db24:	003e9c06 	br	1000d598 <__adddf3+0x308>
1000db28:	5b27c83a 	sub	r19,r11,r12
1000db2c:	1a53c83a 	sub	r9,r3,r9
1000db30:	5cc9803a 	cmpltu	r4,r11,r19
1000db34:	4909c83a 	sub	r4,r9,r4
1000db38:	3823883a 	mov	r17,r7
1000db3c:	04000044 	movi	r16,1
1000db40:	003e0406 	br	1000d354 <__adddf3+0xc4>
1000db44:	180a977a 	slli	r5,r3,29
1000db48:	01080034 	movhi	r4,8192
1000db4c:	213fffc4 	addi	r4,r4,-1
1000db50:	3104703a 	and	r2,r6,r4
1000db54:	2884b03a 	or	r2,r5,r2
1000db58:	1812d0fa 	srli	r9,r3,3
1000db5c:	003e8e06 	br	1000d598 <__adddf3+0x308>
1000db60:	62e7883a 	add	r19,r12,r11
1000db64:	48d3883a 	add	r9,r9,r3
1000db68:	9b09803a 	cmpltu	r4,r19,r12
1000db6c:	4909883a 	add	r4,r9,r4
1000db70:	2080202c 	andhi	r2,r4,128
1000db74:	103e8026 	beq	r2,zero,1000d578 <__adddf3+0x2e8>
1000db78:	00bfe034 	movhi	r2,65408
1000db7c:	10bfffc4 	addi	r2,r2,-1
1000db80:	2088703a 	and	r4,r4,r2
1000db84:	04000044 	movi	r16,1
1000db88:	003e7b06 	br	1000d578 <__adddf3+0x2e8>
1000db8c:	00880034 	movhi	r2,8192
1000db90:	10bfffc4 	addi	r2,r2,-1
1000db94:	2084703a 	and	r2,r4,r2
1000db98:	1144b03a 	or	r2,r2,r5
1000db9c:	003eb306 	br	1000d66c <__adddf3+0x3dc>
1000dba0:	180e977a 	slli	r7,r3,29
1000dba4:	01480034 	movhi	r5,8192
1000dba8:	297fffc4 	addi	r5,r5,-1
1000dbac:	3144703a 	and	r2,r6,r5
1000dbb0:	3884b03a 	or	r2,r7,r2
1000dbb4:	1812d0fa 	srli	r9,r3,3
1000dbb8:	2021883a 	mov	r16,r4
1000dbbc:	003e7406 	br	1000d590 <__adddf3+0x300>
1000dbc0:	00880034 	movhi	r2,8192
1000dbc4:	1808977a 	slli	r4,r3,29
1000dbc8:	10bfffc4 	addi	r2,r2,-1
1000dbcc:	3084703a 	and	r2,r6,r2
1000dbd0:	1104b03a 	or	r2,r2,r4
1000dbd4:	1812d0fa 	srli	r9,r3,3
1000dbd8:	3823883a 	mov	r17,r7
1000dbdc:	003ea306 	br	1000d66c <__adddf3+0x3dc>
1000dbe0:	217ff804 	addi	r5,r4,-32
1000dbe4:	21800820 	cmpeqi	r6,r4,32
1000dbe8:	494ad83a 	srl	r5,r9,r5
1000dbec:	3000041e 	bne	r6,zero,1000dc00 <__adddf3+0x970>
1000dbf0:	01801004 	movi	r6,64
1000dbf4:	3109c83a 	sub	r4,r6,r4
1000dbf8:	4912983a 	sll	r9,r9,r4
1000dbfc:	6258b03a 	or	r12,r12,r9
1000dc00:	6026c03a 	cmpne	r19,r12,zero
1000dc04:	9966b03a 	or	r19,r19,r5
1000dc08:	003ee506 	br	1000d7a0 <__adddf3+0x510>
1000dc0c:	62e7883a 	add	r19,r12,r11
1000dc10:	48d3883a 	add	r9,r9,r3
1000dc14:	9ac9803a 	cmpltu	r4,r19,r11
1000dc18:	4909883a 	add	r4,r9,r4
1000dc1c:	003e5306 	br	1000d56c <__adddf3+0x2dc>
1000dc20:	0005883a 	mov	r2,zero
1000dc24:	0401ffc4 	movi	r16,2047
1000dc28:	0009883a 	mov	r4,zero
1000dc2c:	003dfe06 	br	1000d428 <__adddf3+0x198>

1000dc30 <__divdf3>:
1000dc30:	defff104 	addi	sp,sp,-60
1000dc34:	2804d53a 	srli	r2,r5,20
1000dc38:	dd000915 	stw	r20,36(sp)
1000dc3c:	2828d7fa 	srli	r20,r5,31
1000dc40:	dc000515 	stw	r16,20(sp)
1000dc44:	04000434 	movhi	r16,16
1000dc48:	ddc00c15 	stw	r23,48(sp)
1000dc4c:	dc800715 	stw	r18,28(sp)
1000dc50:	843fffc4 	addi	r16,r16,-1
1000dc54:	dfc00e15 	stw	ra,56(sp)
1000dc58:	df000d15 	stw	fp,52(sp)
1000dc5c:	dd800b15 	stw	r22,44(sp)
1000dc60:	dd400a15 	stw	r21,40(sp)
1000dc64:	dcc00815 	stw	r19,32(sp)
1000dc68:	dc400615 	stw	r17,24(sp)
1000dc6c:	1081ffcc 	andi	r2,r2,2047
1000dc70:	2025883a 	mov	r18,r4
1000dc74:	2c20703a 	and	r16,r5,r16
1000dc78:	a02f883a 	mov	r23,r20
1000dc7c:	10008926 	beq	r2,zero,1000dea4 <__divdf3+0x274>
1000dc80:	10c1ffe0 	cmpeqi	r3,r2,2047
1000dc84:	18009f1e 	bne	r3,zero,1000df04 <__divdf3+0x2d4>
1000dc88:	800a90fa 	slli	r5,r16,3
1000dc8c:	2008d77a 	srli	r4,r4,29
1000dc90:	902490fa 	slli	r18,r18,3
1000dc94:	157f0044 	addi	r21,r2,-1023
1000dc98:	2148b03a 	or	r4,r4,r5
1000dc9c:	25802034 	orhi	r22,r4,128
1000dca0:	0023883a 	mov	r17,zero
1000dca4:	0021883a 	mov	r16,zero
1000dca8:	3806d53a 	srli	r3,r7,20
1000dcac:	01000434 	movhi	r4,16
1000dcb0:	213fffc4 	addi	r4,r4,-1
1000dcb4:	18c1ffcc 	andi	r3,r3,2047
1000dcb8:	3926703a 	and	r19,r7,r4
1000dcbc:	380ed7fa 	srli	r7,r7,31
1000dcc0:	18006326 	beq	r3,zero,1000de50 <__divdf3+0x220>
1000dcc4:	1881ffe0 	cmpeqi	r2,r3,2047
1000dcc8:	1000201e 	bne	r2,zero,1000dd4c <__divdf3+0x11c>
1000dccc:	980890fa 	slli	r4,r19,3
1000dcd0:	300ad77a 	srli	r5,r6,29
1000dcd4:	301090fa 	slli	r8,r6,3
1000dcd8:	18ff0044 	addi	r3,r3,-1023
1000dcdc:	2908b03a 	or	r4,r5,r4
1000dce0:	a8ebc83a 	sub	r21,r21,r3
1000dce4:	24c02034 	orhi	r19,r4,128
1000dce8:	0007883a 	mov	r3,zero
1000dcec:	89800428 	cmpgeui	r6,r17,16
1000dcf0:	a1f8f03a 	xor	fp,r20,r7
1000dcf4:	3000ad1e 	bne	r6,zero,1000dfac <__divdf3+0x37c>
1000dcf8:	882290ba 	slli	r17,r17,2
1000dcfc:	00840074 	movhi	r2,4097
1000dd00:	8885883a 	add	r2,r17,r2
1000dd04:	10b74317 	ldw	r2,-8948(r2)
1000dd08:	1000683a 	jmp	r2
1000dd0c:	1000dfac 	andhi	zero,r2,894
1000dd10:	1000de40 	call	11000de4 <_gp+0xfe3b4c>
1000dd14:	1000dde4 	muli	zero,r2,887
1000dd18:	1000dd68 	cmpgeui	zero,r2,885
1000dd1c:	1000dde4 	muli	zero,r2,887
1000dd20:	1000df68 	cmpgeui	zero,r2,893
1000dd24:	1000dde4 	muli	zero,r2,887
1000dd28:	1000dd68 	cmpgeui	zero,r2,885
1000dd2c:	1000de40 	call	11000de4 <_gp+0xfe3b4c>
1000dd30:	1000de40 	call	11000de4 <_gp+0xfe3b4c>
1000dd34:	1000df68 	cmpgeui	zero,r2,893
1000dd38:	1000dd68 	cmpgeui	zero,r2,885
1000dd3c:	1000dd78 	rdprs	zero,r2,885
1000dd40:	1000dd78 	rdprs	zero,r2,885
1000dd44:	1000dd78 	rdprs	zero,r2,885
1000dd48:	1000df80 	call	11000df8 <_gp+0xfe3b60>
1000dd4c:	9990b03a 	or	r8,r19,r6
1000dd50:	ad7e0044 	addi	r21,r21,-2047
1000dd54:	4000801e 	bne	r8,zero,1000df58 <__divdf3+0x328>
1000dd58:	8c400094 	ori	r17,r17,2
1000dd5c:	0027883a 	mov	r19,zero
1000dd60:	00c00084 	movi	r3,2
1000dd64:	003fe106 	br	1000dcec <__divdf3+0xbc>
1000dd68:	382f883a 	mov	r23,r7
1000dd6c:	982d883a 	mov	r22,r19
1000dd70:	4025883a 	mov	r18,r8
1000dd74:	1821883a 	mov	r16,r3
1000dd78:	808000a0 	cmpeqi	r2,r16,2
1000dd7c:	10017c1e 	bne	r2,zero,1000e370 <__divdf3+0x740>
1000dd80:	808000e0 	cmpeqi	r2,r16,3
1000dd84:	1001ca1e 	bne	r2,zero,1000e4b0 <__divdf3+0x880>
1000dd88:	80800060 	cmpeqi	r2,r16,1
1000dd8c:	1000141e 	bne	r2,zero,1000dde0 <__divdf3+0x1b0>
1000dd90:	ac00ffc4 	addi	r16,r21,1023
1000dd94:	b839883a 	mov	fp,r23
1000dd98:	0401580e 	bge	zero,r16,1000e2fc <__divdf3+0x6cc>
1000dd9c:	908001cc 	andi	r2,r18,7
1000dda0:	1001921e 	bne	r2,zero,1000e3ec <__divdf3+0x7bc>
1000dda4:	900ad0fa 	srli	r5,r18,3
1000dda8:	b080402c 	andhi	r2,r22,256
1000ddac:	10000426 	beq	r2,zero,1000ddc0 <__divdf3+0x190>
1000ddb0:	00bfc034 	movhi	r2,65280
1000ddb4:	10bfffc4 	addi	r2,r2,-1
1000ddb8:	b0ac703a 	and	r22,r22,r2
1000ddbc:	ac010004 	addi	r16,r21,1024
1000ddc0:	8081ffc8 	cmpgei	r2,r16,2047
1000ddc4:	10001e1e 	bne	r2,zero,1000de40 <__divdf3+0x210>
1000ddc8:	b024977a 	slli	r18,r22,29
1000ddcc:	b008927a 	slli	r4,r22,9
1000ddd0:	8081ffcc 	andi	r2,r16,2047
1000ddd4:	9164b03a 	or	r18,r18,r5
1000ddd8:	2008d33a 	srli	r4,r4,12
1000dddc:	00000406 	br	1000ddf0 <__divdf3+0x1c0>
1000dde0:	b839883a 	mov	fp,r23
1000dde4:	0005883a 	mov	r2,zero
1000dde8:	0009883a 	mov	r4,zero
1000ddec:	0025883a 	mov	r18,zero
1000ddf0:	1004953a 	slli	r2,r2,20
1000ddf4:	00c00434 	movhi	r3,16
1000ddf8:	e03897fa 	slli	fp,fp,31
1000ddfc:	18ffffc4 	addi	r3,r3,-1
1000de00:	20c6703a 	and	r3,r4,r3
1000de04:	1886b03a 	or	r3,r3,r2
1000de08:	1f06b03a 	or	r3,r3,fp
1000de0c:	9005883a 	mov	r2,r18
1000de10:	dfc00e17 	ldw	ra,56(sp)
1000de14:	df000d17 	ldw	fp,52(sp)
1000de18:	ddc00c17 	ldw	r23,48(sp)
1000de1c:	dd800b17 	ldw	r22,44(sp)
1000de20:	dd400a17 	ldw	r21,40(sp)
1000de24:	dd000917 	ldw	r20,36(sp)
1000de28:	dcc00817 	ldw	r19,32(sp)
1000de2c:	dc800717 	ldw	r18,28(sp)
1000de30:	dc400617 	ldw	r17,24(sp)
1000de34:	dc000517 	ldw	r16,20(sp)
1000de38:	dec00f04 	addi	sp,sp,60
1000de3c:	f800283a 	ret
1000de40:	0081ffc4 	movi	r2,2047
1000de44:	0009883a 	mov	r4,zero
1000de48:	0025883a 	mov	r18,zero
1000de4c:	003fe806 	br	1000ddf0 <__divdf3+0x1c0>
1000de50:	9990b03a 	or	r8,r19,r6
1000de54:	40003c26 	beq	r8,zero,1000df48 <__divdf3+0x318>
1000de58:	98011826 	beq	r19,zero,1000e2bc <__divdf3+0x68c>
1000de5c:	9809883a 	mov	r4,r19
1000de60:	d9800115 	stw	r6,4(sp)
1000de64:	d9c00015 	stw	r7,0(sp)
1000de68:	000f9680 	call	1000f968 <__clzsi2>
1000de6c:	d9c00017 	ldw	r7,0(sp)
1000de70:	d9800117 	ldw	r6,4(sp)
1000de74:	117ffd44 	addi	r5,r2,-11
1000de78:	00c00744 	movi	r3,29
1000de7c:	123ffe04 	addi	r8,r2,-8
1000de80:	1947c83a 	sub	r3,r3,r5
1000de84:	9a08983a 	sll	r4,r19,r8
1000de88:	30c6d83a 	srl	r3,r6,r3
1000de8c:	3210983a 	sll	r8,r6,r8
1000de90:	1926b03a 	or	r19,r3,r4
1000de94:	1545883a 	add	r2,r2,r21
1000de98:	1540fcc4 	addi	r21,r2,1011
1000de9c:	0007883a 	mov	r3,zero
1000dea0:	003f9206 	br	1000dcec <__divdf3+0xbc>
1000dea4:	242cb03a 	or	r22,r4,r16
1000dea8:	2023883a 	mov	r17,r4
1000deac:	b0002126 	beq	r22,zero,1000df34 <__divdf3+0x304>
1000deb0:	d9c00115 	stw	r7,4(sp)
1000deb4:	d9800015 	stw	r6,0(sp)
1000deb8:	8000f526 	beq	r16,zero,1000e290 <__divdf3+0x660>
1000debc:	8009883a 	mov	r4,r16
1000dec0:	000f9680 	call	1000f968 <__clzsi2>
1000dec4:	d9800017 	ldw	r6,0(sp)
1000dec8:	d9c00117 	ldw	r7,4(sp)
1000decc:	102b883a 	mov	r21,r2
1000ded0:	113ffd44 	addi	r4,r2,-11
1000ded4:	05800744 	movi	r22,29
1000ded8:	acbffe04 	addi	r18,r21,-8
1000dedc:	b12dc83a 	sub	r22,r22,r4
1000dee0:	848a983a 	sll	r5,r16,r18
1000dee4:	8d88d83a 	srl	r4,r17,r22
1000dee8:	8ca4983a 	sll	r18,r17,r18
1000deec:	216cb03a 	or	r22,r4,r5
1000def0:	00bf0344 	movi	r2,-1011
1000def4:	156bc83a 	sub	r21,r2,r21
1000def8:	0023883a 	mov	r17,zero
1000defc:	0021883a 	mov	r16,zero
1000df00:	003f6906 	br	1000dca8 <__divdf3+0x78>
1000df04:	242cb03a 	or	r22,r4,r16
1000df08:	b000051e 	bne	r22,zero,1000df20 <__divdf3+0x2f0>
1000df0c:	0025883a 	mov	r18,zero
1000df10:	04400204 	movi	r17,8
1000df14:	0541ffc4 	movi	r21,2047
1000df18:	04000084 	movi	r16,2
1000df1c:	003f6206 	br	1000dca8 <__divdf3+0x78>
1000df20:	802d883a 	mov	r22,r16
1000df24:	04400304 	movi	r17,12
1000df28:	0541ffc4 	movi	r21,2047
1000df2c:	040000c4 	movi	r16,3
1000df30:	003f5d06 	br	1000dca8 <__divdf3+0x78>
1000df34:	0025883a 	mov	r18,zero
1000df38:	04400104 	movi	r17,4
1000df3c:	002b883a 	mov	r21,zero
1000df40:	04000044 	movi	r16,1
1000df44:	003f5806 	br	1000dca8 <__divdf3+0x78>
1000df48:	8c400054 	ori	r17,r17,1
1000df4c:	0027883a 	mov	r19,zero
1000df50:	00c00044 	movi	r3,1
1000df54:	003f6506 	br	1000dcec <__divdf3+0xbc>
1000df58:	8c4000d4 	ori	r17,r17,3
1000df5c:	3011883a 	mov	r8,r6
1000df60:	00c000c4 	movi	r3,3
1000df64:	003f6106 	br	1000dcec <__divdf3+0xbc>
1000df68:	01000434 	movhi	r4,16
1000df6c:	0039883a 	mov	fp,zero
1000df70:	213fffc4 	addi	r4,r4,-1
1000df74:	04bfffc4 	movi	r18,-1
1000df78:	0081ffc4 	movi	r2,2047
1000df7c:	003f9c06 	br	1000ddf0 <__divdf3+0x1c0>
1000df80:	b080022c 	andhi	r2,r22,8
1000df84:	1000a126 	beq	r2,zero,1000e20c <__divdf3+0x5dc>
1000df88:	9880022c 	andhi	r2,r19,8
1000df8c:	10009f1e 	bne	r2,zero,1000e20c <__divdf3+0x5dc>
1000df90:	00800434 	movhi	r2,16
1000df94:	99000234 	orhi	r4,r19,8
1000df98:	10bfffc4 	addi	r2,r2,-1
1000df9c:	2088703a 	and	r4,r4,r2
1000dfa0:	3839883a 	mov	fp,r7
1000dfa4:	4025883a 	mov	r18,r8
1000dfa8:	003ff306 	br	1000df78 <__divdf3+0x348>
1000dfac:	9d80b236 	bltu	r19,r22,1000e278 <__divdf3+0x648>
1000dfb0:	9d80b026 	beq	r19,r22,1000e274 <__divdf3+0x644>
1000dfb4:	ad7fffc4 	addi	r21,r21,-1
1000dfb8:	b007883a 	mov	r3,r22
1000dfbc:	0021883a 	mov	r16,zero
1000dfc0:	400cd63a 	srli	r6,r8,24
1000dfc4:	9826923a 	slli	r19,r19,8
1000dfc8:	4004923a 	slli	r2,r8,8
1000dfcc:	1809883a 	mov	r4,r3
1000dfd0:	34e2b03a 	or	r17,r6,r19
1000dfd4:	8828d43a 	srli	r20,r17,16
1000dfd8:	d8c00115 	stw	r3,4(sp)
1000dfdc:	d8800015 	stw	r2,0(sp)
1000dfe0:	a00b883a 	mov	r5,r20
1000dfe4:	000d1d00 	call	1000d1d0 <__udivsi3>
1000dfe8:	d8c00117 	ldw	r3,4(sp)
1000dfec:	a00b883a 	mov	r5,r20
1000dff0:	102d883a 	mov	r22,r2
1000dff4:	1809883a 	mov	r4,r3
1000dff8:	000d2340 	call	1000d234 <__umodsi3>
1000dffc:	1006943a 	slli	r3,r2,16
1000e000:	8dffffcc 	andi	r23,r17,65535
1000e004:	9004d43a 	srli	r2,r18,16
1000e008:	bda7383a 	mul	r19,r23,r22
1000e00c:	10c4b03a 	or	r2,r2,r3
1000e010:	14c0042e 	bgeu	r2,r19,1000e024 <__divdf3+0x3f4>
1000e014:	1445883a 	add	r2,r2,r17
1000e018:	b0ffffc4 	addi	r3,r22,-1
1000e01c:	1440e12e 	bgeu	r2,r17,1000e3a4 <__divdf3+0x774>
1000e020:	182d883a 	mov	r22,r3
1000e024:	14e7c83a 	sub	r19,r2,r19
1000e028:	a00b883a 	mov	r5,r20
1000e02c:	9809883a 	mov	r4,r19
1000e030:	000d1d00 	call	1000d1d0 <__udivsi3>
1000e034:	a00b883a 	mov	r5,r20
1000e038:	9809883a 	mov	r4,r19
1000e03c:	d8800115 	stw	r2,4(sp)
1000e040:	000d2340 	call	1000d234 <__umodsi3>
1000e044:	d8c00117 	ldw	r3,4(sp)
1000e048:	1004943a 	slli	r2,r2,16
1000e04c:	94bfffcc 	andi	r18,r18,65535
1000e050:	b8cb383a 	mul	r5,r23,r3
1000e054:	9084b03a 	or	r2,r18,r2
1000e058:	1140042e 	bgeu	r2,r5,1000e06c <__divdf3+0x43c>
1000e05c:	1445883a 	add	r2,r2,r17
1000e060:	193fffc4 	addi	r4,r3,-1
1000e064:	1440cb2e 	bgeu	r2,r17,1000e394 <__divdf3+0x764>
1000e068:	2007883a 	mov	r3,r4
1000e06c:	b008943a 	slli	r4,r22,16
1000e070:	d9800017 	ldw	r6,0(sp)
1000e074:	1145c83a 	sub	r2,r2,r5
1000e078:	20ecb03a 	or	r22,r4,r3
1000e07c:	b0ffffcc 	andi	r3,r22,65535
1000e080:	300ed43a 	srli	r7,r6,16
1000e084:	323fffcc 	andi	r8,r6,65535
1000e088:	b026d43a 	srli	r19,r22,16
1000e08c:	40e5383a 	mul	r18,r8,r3
1000e090:	38c9383a 	mul	r4,r7,r3
1000e094:	9a13383a 	mul	r9,r19,r8
1000e098:	9006d43a 	srli	r3,r18,16
1000e09c:	2249883a 	add	r4,r4,r9
1000e0a0:	1907883a 	add	r3,r3,r4
1000e0a4:	99c9383a 	mul	r4,r19,r7
1000e0a8:	1a40022e 	bgeu	r3,r9,1000e0b4 <__divdf3+0x484>
1000e0ac:	01400074 	movhi	r5,1
1000e0b0:	2149883a 	add	r4,r4,r5
1000e0b4:	1826d43a 	srli	r19,r3,16
1000e0b8:	1806943a 	slli	r3,r3,16
1000e0bc:	94bfffcc 	andi	r18,r18,65535
1000e0c0:	9927883a 	add	r19,r19,r4
1000e0c4:	1ca5883a 	add	r18,r3,r18
1000e0c8:	14c05f36 	bltu	r2,r19,1000e248 <__divdf3+0x618>
1000e0cc:	14c05d26 	beq	r2,r19,1000e244 <__divdf3+0x614>
1000e0d0:	84a5c83a 	sub	r18,r16,r18
1000e0d4:	14c5c83a 	sub	r2,r2,r19
1000e0d8:	84a7803a 	cmpltu	r19,r16,r18
1000e0dc:	da000215 	stw	r8,8(sp)
1000e0e0:	d9c00115 	stw	r7,4(sp)
1000e0e4:	14e7c83a 	sub	r19,r2,r19
1000e0e8:	ac00ffc4 	addi	r16,r21,1023
1000e0ec:	8cc0b626 	beq	r17,r19,1000e3c8 <__divdf3+0x798>
1000e0f0:	9809883a 	mov	r4,r19
1000e0f4:	a00b883a 	mov	r5,r20
1000e0f8:	000d1d00 	call	1000d1d0 <__udivsi3>
1000e0fc:	9809883a 	mov	r4,r19
1000e100:	a00b883a 	mov	r5,r20
1000e104:	d8800315 	stw	r2,12(sp)
1000e108:	000d2340 	call	1000d234 <__umodsi3>
1000e10c:	d8c00317 	ldw	r3,12(sp)
1000e110:	1008943a 	slli	r4,r2,16
1000e114:	9004d43a 	srli	r2,r18,16
1000e118:	b8e7383a 	mul	r19,r23,r3
1000e11c:	d9c00117 	ldw	r7,4(sp)
1000e120:	1104b03a 	or	r2,r2,r4
1000e124:	da000217 	ldw	r8,8(sp)
1000e128:	14c0062e 	bgeu	r2,r19,1000e144 <__divdf3+0x514>
1000e12c:	1445883a 	add	r2,r2,r17
1000e130:	193fffc4 	addi	r4,r3,-1
1000e134:	1440ab36 	bltu	r2,r17,1000e3e4 <__divdf3+0x7b4>
1000e138:	14c0aa2e 	bgeu	r2,r19,1000e3e4 <__divdf3+0x7b4>
1000e13c:	18ffff84 	addi	r3,r3,-2
1000e140:	1445883a 	add	r2,r2,r17
1000e144:	14e7c83a 	sub	r19,r2,r19
1000e148:	a00b883a 	mov	r5,r20
1000e14c:	9809883a 	mov	r4,r19
1000e150:	da000415 	stw	r8,16(sp)
1000e154:	d8c00315 	stw	r3,12(sp)
1000e158:	d9c00215 	stw	r7,8(sp)
1000e15c:	000d1d00 	call	1000d1d0 <__udivsi3>
1000e160:	a00b883a 	mov	r5,r20
1000e164:	9809883a 	mov	r4,r19
1000e168:	d8800115 	stw	r2,4(sp)
1000e16c:	000d2340 	call	1000d234 <__umodsi3>
1000e170:	da400117 	ldw	r9,4(sp)
1000e174:	1004943a 	slli	r2,r2,16
1000e178:	94bfffcc 	andi	r18,r18,65535
1000e17c:	ba6f383a 	mul	r23,r23,r9
1000e180:	9084b03a 	or	r2,r18,r2
1000e184:	d9c00217 	ldw	r7,8(sp)
1000e188:	d8c00317 	ldw	r3,12(sp)
1000e18c:	da000417 	ldw	r8,16(sp)
1000e190:	15c0062e 	bgeu	r2,r23,1000e1ac <__divdf3+0x57c>
1000e194:	1445883a 	add	r2,r2,r17
1000e198:	493fffc4 	addi	r4,r9,-1
1000e19c:	14408f36 	bltu	r2,r17,1000e3dc <__divdf3+0x7ac>
1000e1a0:	15c08e2e 	bgeu	r2,r23,1000e3dc <__divdf3+0x7ac>
1000e1a4:	4a7fff84 	addi	r9,r9,-2
1000e1a8:	1445883a 	add	r2,r2,r17
1000e1ac:	180a943a 	slli	r5,r3,16
1000e1b0:	15c5c83a 	sub	r2,r2,r23
1000e1b4:	2a64b03a 	or	r18,r5,r9
1000e1b8:	9012d43a 	srli	r9,r18,16
1000e1bc:	913fffcc 	andi	r4,r18,65535
1000e1c0:	220b383a 	mul	r5,r4,r8
1000e1c4:	3909383a 	mul	r4,r7,r4
1000e1c8:	4a11383a 	mul	r8,r9,r8
1000e1cc:	2806d43a 	srli	r3,r5,16
1000e1d0:	3a4f383a 	mul	r7,r7,r9
1000e1d4:	2209883a 	add	r4,r4,r8
1000e1d8:	1907883a 	add	r3,r3,r4
1000e1dc:	1a00022e 	bgeu	r3,r8,1000e1e8 <__divdf3+0x5b8>
1000e1e0:	01000074 	movhi	r4,1
1000e1e4:	390f883a 	add	r7,r7,r4
1000e1e8:	1808d43a 	srli	r4,r3,16
1000e1ec:	1806943a 	slli	r3,r3,16
1000e1f0:	297fffcc 	andi	r5,r5,65535
1000e1f4:	21cf883a 	add	r7,r4,r7
1000e1f8:	1947883a 	add	r3,r3,r5
1000e1fc:	11c00a36 	bltu	r2,r7,1000e228 <__divdf3+0x5f8>
1000e200:	11c00826 	beq	r2,r7,1000e224 <__divdf3+0x5f4>
1000e204:	94800054 	ori	r18,r18,1
1000e208:	003ee306 	br	1000dd98 <__divdf3+0x168>
1000e20c:	00800434 	movhi	r2,16
1000e210:	b1000234 	orhi	r4,r22,8
1000e214:	10bfffc4 	addi	r2,r2,-1
1000e218:	2088703a 	and	r4,r4,r2
1000e21c:	a039883a 	mov	fp,r20
1000e220:	003f5506 	br	1000df78 <__divdf3+0x348>
1000e224:	183edc26 	beq	r3,zero,1000dd98 <__divdf3+0x168>
1000e228:	8885883a 	add	r2,r17,r2
1000e22c:	913fffc4 	addi	r4,r18,-1
1000e230:	14406036 	bltu	r2,r17,1000e3b4 <__divdf3+0x784>
1000e234:	11c07d36 	bltu	r2,r7,1000e42c <__divdf3+0x7fc>
1000e238:	11c0a326 	beq	r2,r7,1000e4c8 <__divdf3+0x898>
1000e23c:	2025883a 	mov	r18,r4
1000e240:	003ff006 	br	1000e204 <__divdf3+0x5d4>
1000e244:	84bfa22e 	bgeu	r16,r18,1000e0d0 <__divdf3+0x4a0>
1000e248:	d8c00017 	ldw	r3,0(sp)
1000e24c:	80e1883a 	add	r16,r16,r3
1000e250:	80c7803a 	cmpltu	r3,r16,r3
1000e254:	1c47883a 	add	r3,r3,r17
1000e258:	10c5883a 	add	r2,r2,r3
1000e25c:	b0ffffc4 	addi	r3,r22,-1
1000e260:	8880482e 	bgeu	r17,r2,1000e384 <__divdf3+0x754>
1000e264:	14c06a36 	bltu	r2,r19,1000e410 <__divdf3+0x7e0>
1000e268:	98806826 	beq	r19,r2,1000e40c <__divdf3+0x7dc>
1000e26c:	182d883a 	mov	r22,r3
1000e270:	003f9706 	br	1000e0d0 <__divdf3+0x4a0>
1000e274:	923f4f36 	bltu	r18,r8,1000dfb4 <__divdf3+0x384>
1000e278:	b00a97fa 	slli	r5,r22,31
1000e27c:	9004d07a 	srli	r2,r18,1
1000e280:	902097fa 	slli	r16,r18,31
1000e284:	b006d07a 	srli	r3,r22,1
1000e288:	28a4b03a 	or	r18,r5,r2
1000e28c:	003f4c06 	br	1000dfc0 <__divdf3+0x390>
1000e290:	000f9680 	call	1000f968 <__clzsi2>
1000e294:	11000544 	addi	r4,r2,21
1000e298:	21400748 	cmpgei	r5,r4,29
1000e29c:	15400804 	addi	r21,r2,32
1000e2a0:	d9800017 	ldw	r6,0(sp)
1000e2a4:	d9c00117 	ldw	r7,4(sp)
1000e2a8:	283f0a26 	beq	r5,zero,1000ded4 <__divdf3+0x2a4>
1000e2ac:	113ffe04 	addi	r4,r2,-8
1000e2b0:	912c983a 	sll	r22,r18,r4
1000e2b4:	0025883a 	mov	r18,zero
1000e2b8:	003f0d06 	br	1000def0 <__divdf3+0x2c0>
1000e2bc:	3009883a 	mov	r4,r6
1000e2c0:	d9c00115 	stw	r7,4(sp)
1000e2c4:	d9800015 	stw	r6,0(sp)
1000e2c8:	000f9680 	call	1000f968 <__clzsi2>
1000e2cc:	11400544 	addi	r5,r2,21
1000e2d0:	28c00748 	cmpgei	r3,r5,29
1000e2d4:	1009883a 	mov	r4,r2
1000e2d8:	d9800017 	ldw	r6,0(sp)
1000e2dc:	10800804 	addi	r2,r2,32
1000e2e0:	d9c00117 	ldw	r7,4(sp)
1000e2e4:	183ee426 	beq	r3,zero,1000de78 <__divdf3+0x248>
1000e2e8:	213ffe04 	addi	r4,r4,-8
1000e2ec:	3126983a 	sll	r19,r6,r4
1000e2f0:	0011883a 	mov	r8,zero
1000e2f4:	003ee706 	br	1000de94 <__divdf3+0x264>
1000e2f8:	04bfffc4 	movi	r18,-1
1000e2fc:	01000044 	movi	r4,1
1000e300:	2409c83a 	sub	r4,r4,r16
1000e304:	20800e48 	cmpgei	r2,r4,57
1000e308:	103eb61e 	bne	r2,zero,1000dde4 <__divdf3+0x1b4>
1000e30c:	20800808 	cmpgei	r2,r4,32
1000e310:	10004e1e 	bne	r2,zero,1000e44c <__divdf3+0x81c>
1000e314:	a8810784 	addi	r2,r21,1054
1000e318:	b086983a 	sll	r3,r22,r2
1000e31c:	910ad83a 	srl	r5,r18,r4
1000e320:	9084983a 	sll	r2,r18,r2
1000e324:	b108d83a 	srl	r4,r22,r4
1000e328:	1964b03a 	or	r18,r3,r5
1000e32c:	1004c03a 	cmpne	r2,r2,zero
1000e330:	90a4b03a 	or	r18,r18,r2
1000e334:	908001cc 	andi	r2,r18,7
1000e338:	10000726 	beq	r2,zero,1000e358 <__divdf3+0x728>
1000e33c:	908003cc 	andi	r2,r18,15
1000e340:	10800120 	cmpeqi	r2,r2,4
1000e344:	1000041e 	bne	r2,zero,1000e358 <__divdf3+0x728>
1000e348:	90800104 	addi	r2,r18,4
1000e34c:	14a5803a 	cmpltu	r18,r2,r18
1000e350:	2489883a 	add	r4,r4,r18
1000e354:	1025883a 	mov	r18,r2
1000e358:	2080202c 	andhi	r2,r4,128
1000e35c:	10005026 	beq	r2,zero,1000e4a0 <__divdf3+0x870>
1000e360:	00800044 	movi	r2,1
1000e364:	0009883a 	mov	r4,zero
1000e368:	0025883a 	mov	r18,zero
1000e36c:	003ea006 	br	1000ddf0 <__divdf3+0x1c0>
1000e370:	b839883a 	mov	fp,r23
1000e374:	0081ffc4 	movi	r2,2047
1000e378:	0009883a 	mov	r4,zero
1000e37c:	0025883a 	mov	r18,zero
1000e380:	003e9b06 	br	1000ddf0 <__divdf3+0x1c0>
1000e384:	88bfb91e 	bne	r17,r2,1000e26c <__divdf3+0x63c>
1000e388:	d9000017 	ldw	r4,0(sp)
1000e38c:	813fb736 	bltu	r16,r4,1000e26c <__divdf3+0x63c>
1000e390:	003fb406 	br	1000e264 <__divdf3+0x634>
1000e394:	117f342e 	bgeu	r2,r5,1000e068 <__divdf3+0x438>
1000e398:	18ffff84 	addi	r3,r3,-2
1000e39c:	1445883a 	add	r2,r2,r17
1000e3a0:	003f3206 	br	1000e06c <__divdf3+0x43c>
1000e3a4:	14ff1e2e 	bgeu	r2,r19,1000e020 <__divdf3+0x3f0>
1000e3a8:	b5bfff84 	addi	r22,r22,-2
1000e3ac:	1445883a 	add	r2,r2,r17
1000e3b0:	003f1c06 	br	1000e024 <__divdf3+0x3f4>
1000e3b4:	2025883a 	mov	r18,r4
1000e3b8:	11ff921e 	bne	r2,r7,1000e204 <__divdf3+0x5d4>
1000e3bc:	d8800017 	ldw	r2,0(sp)
1000e3c0:	10ff901e 	bne	r2,r3,1000e204 <__divdf3+0x5d4>
1000e3c4:	003e7406 	br	1000dd98 <__divdf3+0x168>
1000e3c8:	043fcb0e 	bge	zero,r16,1000e2f8 <__divdf3+0x6c8>
1000e3cc:	000b883a 	mov	r5,zero
1000e3d0:	04800044 	movi	r18,1
1000e3d4:	b4ad883a 	add	r22,r22,r18
1000e3d8:	003e7306 	br	1000dda8 <__divdf3+0x178>
1000e3dc:	2013883a 	mov	r9,r4
1000e3e0:	003f7206 	br	1000e1ac <__divdf3+0x57c>
1000e3e4:	2007883a 	mov	r3,r4
1000e3e8:	003f5606 	br	1000e144 <__divdf3+0x514>
1000e3ec:	908003cc 	andi	r2,r18,15
1000e3f0:	10800118 	cmpnei	r2,r2,4
1000e3f4:	103e6b26 	beq	r2,zero,1000dda4 <__divdf3+0x174>
1000e3f8:	91400104 	addi	r5,r18,4
1000e3fc:	00bffec4 	movi	r2,-5
1000e400:	14a5803a 	cmpltu	r18,r2,r18
1000e404:	280ad0fa 	srli	r5,r5,3
1000e408:	003ff206 	br	1000e3d4 <__divdf3+0x7a4>
1000e40c:	84bf972e 	bgeu	r16,r18,1000e26c <__divdf3+0x63c>
1000e410:	d8c00017 	ldw	r3,0(sp)
1000e414:	b5bfff84 	addi	r22,r22,-2
1000e418:	80e1883a 	add	r16,r16,r3
1000e41c:	80c7803a 	cmpltu	r3,r16,r3
1000e420:	1c47883a 	add	r3,r3,r17
1000e424:	10c5883a 	add	r2,r2,r3
1000e428:	003f2906 	br	1000e0d0 <__divdf3+0x4a0>
1000e42c:	d9400017 	ldw	r5,0(sp)
1000e430:	94bfff84 	addi	r18,r18,-2
1000e434:	2949883a 	add	r4,r5,r5
1000e438:	214b803a 	cmpltu	r5,r4,r5
1000e43c:	2c4d883a 	add	r6,r5,r17
1000e440:	1185883a 	add	r2,r2,r6
1000e444:	d9000015 	stw	r4,0(sp)
1000e448:	003fdb06 	br	1000e3b8 <__divdf3+0x788>
1000e44c:	00bff844 	movi	r2,-31
1000e450:	1421c83a 	sub	r16,r2,r16
1000e454:	21000820 	cmpeqi	r4,r4,32
1000e458:	b420d83a 	srl	r16,r22,r16
1000e45c:	2000031e 	bne	r4,zero,1000e46c <__divdf3+0x83c>
1000e460:	a8810f84 	addi	r2,r21,1086
1000e464:	b088983a 	sll	r4,r22,r2
1000e468:	9124b03a 	or	r18,r18,r4
1000e46c:	9024c03a 	cmpne	r18,r18,zero
1000e470:	9424b03a 	or	r18,r18,r16
1000e474:	914001cc 	andi	r5,r18,7
1000e478:	2800051e 	bne	r5,zero,1000e490 <__divdf3+0x860>
1000e47c:	0009883a 	mov	r4,zero
1000e480:	9024d0fa 	srli	r18,r18,3
1000e484:	0005883a 	mov	r2,zero
1000e488:	9164b03a 	or	r18,r18,r5
1000e48c:	003e5806 	br	1000ddf0 <__divdf3+0x1c0>
1000e490:	908003cc 	andi	r2,r18,15
1000e494:	10800118 	cmpnei	r2,r2,4
1000e498:	0009883a 	mov	r4,zero
1000e49c:	103faa1e 	bne	r2,zero,1000e348 <__divdf3+0x718>
1000e4a0:	2004927a 	slli	r2,r4,9
1000e4a4:	200a977a 	slli	r5,r4,29
1000e4a8:	1008d33a 	srli	r4,r2,12
1000e4ac:	003ff406 	br	1000e480 <__divdf3+0x850>
1000e4b0:	00800434 	movhi	r2,16
1000e4b4:	b1000234 	orhi	r4,r22,8
1000e4b8:	10bfffc4 	addi	r2,r2,-1
1000e4bc:	2088703a 	and	r4,r4,r2
1000e4c0:	b839883a 	mov	fp,r23
1000e4c4:	003eac06 	br	1000df78 <__divdf3+0x348>
1000e4c8:	d9400017 	ldw	r5,0(sp)
1000e4cc:	28ffd736 	bltu	r5,r3,1000e42c <__divdf3+0x7fc>
1000e4d0:	2025883a 	mov	r18,r4
1000e4d4:	003fb906 	br	1000e3bc <__divdf3+0x78c>

1000e4d8 <__eqdf2>:
1000e4d8:	2810d53a 	srli	r8,r5,20
1000e4dc:	3806d53a 	srli	r3,r7,20
1000e4e0:	00800434 	movhi	r2,16
1000e4e4:	4201ffcc 	andi	r8,r8,2047
1000e4e8:	10bfffc4 	addi	r2,r2,-1
1000e4ec:	4281ffd8 	cmpnei	r10,r8,2047
1000e4f0:	2892703a 	and	r9,r5,r2
1000e4f4:	18c1ffcc 	andi	r3,r3,2047
1000e4f8:	3884703a 	and	r2,r7,r2
1000e4fc:	280ad7fa 	srli	r5,r5,31
1000e500:	380ed7fa 	srli	r7,r7,31
1000e504:	50000626 	beq	r10,zero,1000e520 <__eqdf2+0x48>
1000e508:	1a81ffe0 	cmpeqi	r10,r3,2047
1000e50c:	5000021e 	bne	r10,zero,1000e518 <__eqdf2+0x40>
1000e510:	40c0011e 	bne	r8,r3,1000e518 <__eqdf2+0x40>
1000e514:	48800826 	beq	r9,r2,1000e538 <__eqdf2+0x60>
1000e518:	00800044 	movi	r2,1
1000e51c:	f800283a 	ret
1000e520:	4914b03a 	or	r10,r9,r4
1000e524:	503ffc1e 	bne	r10,zero,1000e518 <__eqdf2+0x40>
1000e528:	18c1ffd8 	cmpnei	r3,r3,2047
1000e52c:	183ffa1e 	bne	r3,zero,1000e518 <__eqdf2+0x40>
1000e530:	1184b03a 	or	r2,r2,r6
1000e534:	103ff81e 	bne	r2,zero,1000e518 <__eqdf2+0x40>
1000e538:	21bff71e 	bne	r4,r6,1000e518 <__eqdf2+0x40>
1000e53c:	29c00426 	beq	r5,r7,1000e550 <__eqdf2+0x78>
1000e540:	403ff51e 	bne	r8,zero,1000e518 <__eqdf2+0x40>
1000e544:	4904b03a 	or	r2,r9,r4
1000e548:	1004c03a 	cmpne	r2,r2,zero
1000e54c:	f800283a 	ret
1000e550:	0005883a 	mov	r2,zero
1000e554:	f800283a 	ret

1000e558 <__gedf2>:
1000e558:	2810d53a 	srli	r8,r5,20
1000e55c:	3812d53a 	srli	r9,r7,20
1000e560:	00800434 	movhi	r2,16
1000e564:	4201ffcc 	andi	r8,r8,2047
1000e568:	10bfffc4 	addi	r2,r2,-1
1000e56c:	4281ffd8 	cmpnei	r10,r8,2047
1000e570:	2896703a 	and	r11,r5,r2
1000e574:	3886703a 	and	r3,r7,r2
1000e578:	280ad7fa 	srli	r5,r5,31
1000e57c:	4a41ffcc 	andi	r9,r9,2047
1000e580:	3804d7fa 	srli	r2,r7,31
1000e584:	50000b26 	beq	r10,zero,1000e5b4 <__gedf2+0x5c>
1000e588:	49c1ffd8 	cmpnei	r7,r9,2047
1000e58c:	38000d26 	beq	r7,zero,1000e5c4 <__gedf2+0x6c>
1000e590:	4000191e 	bne	r8,zero,1000e5f8 <__gedf2+0xa0>
1000e594:	5914b03a 	or	r10,r11,r4
1000e598:	500f003a 	cmpeq	r7,r10,zero
1000e59c:	4800131e 	bne	r9,zero,1000e5ec <__gedf2+0x94>
1000e5a0:	1998b03a 	or	r12,r3,r6
1000e5a4:	6000111e 	bne	r12,zero,1000e5ec <__gedf2+0x94>
1000e5a8:	50000a1e 	bne	r10,zero,1000e5d4 <__gedf2+0x7c>
1000e5ac:	0005883a 	mov	r2,zero
1000e5b0:	f800283a 	ret
1000e5b4:	590eb03a 	or	r7,r11,r4
1000e5b8:	38001e1e 	bne	r7,zero,1000e634 <__gedf2+0xdc>
1000e5bc:	49c1ffe0 	cmpeqi	r7,r9,2047
1000e5c0:	38000d26 	beq	r7,zero,1000e5f8 <__gedf2+0xa0>
1000e5c4:	198eb03a 	or	r7,r3,r6
1000e5c8:	38001a1e 	bne	r7,zero,1000e634 <__gedf2+0xdc>
1000e5cc:	40000526 	beq	r8,zero,1000e5e4 <__gedf2+0x8c>
1000e5d0:	28800d26 	beq	r5,r2,1000e608 <__gedf2+0xb0>
1000e5d4:	00800044 	movi	r2,1
1000e5d8:	28000626 	beq	r5,zero,1000e5f4 <__gedf2+0x9c>
1000e5dc:	00bfffc4 	movi	r2,-1
1000e5e0:	f800283a 	ret
1000e5e4:	590eb03a 	or	r7,r11,r4
1000e5e8:	380f003a 	cmpeq	r7,r7,zero
1000e5ec:	383ff826 	beq	r7,zero,1000e5d0 <__gedf2+0x78>
1000e5f0:	103ffa26 	beq	r2,zero,1000e5dc <__gedf2+0x84>
1000e5f4:	f800283a 	ret
1000e5f8:	483ff51e 	bne	r9,zero,1000e5d0 <__gedf2+0x78>
1000e5fc:	198eb03a 	or	r7,r3,r6
1000e600:	383ff31e 	bne	r7,zero,1000e5d0 <__gedf2+0x78>
1000e604:	003ff306 	br	1000e5d4 <__gedf2+0x7c>
1000e608:	4a000716 	blt	r9,r8,1000e628 <__gedf2+0xd0>
1000e60c:	427ff816 	blt	r8,r9,1000e5f0 <__gedf2+0x98>
1000e610:	1afff036 	bltu	r3,r11,1000e5d4 <__gedf2+0x7c>
1000e614:	58c00926 	beq	r11,r3,1000e63c <__gedf2+0xe4>
1000e618:	58ffe42e 	bgeu	r11,r3,1000e5ac <__gedf2+0x54>
1000e61c:	283fef26 	beq	r5,zero,1000e5dc <__gedf2+0x84>
1000e620:	2805883a 	mov	r2,r5
1000e624:	f800283a 	ret
1000e628:	103fec1e 	bne	r2,zero,1000e5dc <__gedf2+0x84>
1000e62c:	00800044 	movi	r2,1
1000e630:	f800283a 	ret
1000e634:	00bfff84 	movi	r2,-2
1000e638:	f800283a 	ret
1000e63c:	313fe536 	bltu	r6,r4,1000e5d4 <__gedf2+0x7c>
1000e640:	21bfda2e 	bgeu	r4,r6,1000e5ac <__gedf2+0x54>
1000e644:	003ff506 	br	1000e61c <__gedf2+0xc4>

1000e648 <__ledf2>:
1000e648:	2810d53a 	srli	r8,r5,20
1000e64c:	3812d53a 	srli	r9,r7,20
1000e650:	00800434 	movhi	r2,16
1000e654:	4201ffcc 	andi	r8,r8,2047
1000e658:	10bfffc4 	addi	r2,r2,-1
1000e65c:	4281ffd8 	cmpnei	r10,r8,2047
1000e660:	2896703a 	and	r11,r5,r2
1000e664:	3886703a 	and	r3,r7,r2
1000e668:	280ad7fa 	srli	r5,r5,31
1000e66c:	4a41ffcc 	andi	r9,r9,2047
1000e670:	3804d7fa 	srli	r2,r7,31
1000e674:	50000b26 	beq	r10,zero,1000e6a4 <__ledf2+0x5c>
1000e678:	49c1ffd8 	cmpnei	r7,r9,2047
1000e67c:	38000d26 	beq	r7,zero,1000e6b4 <__ledf2+0x6c>
1000e680:	40001b1e 	bne	r8,zero,1000e6f0 <__ledf2+0xa8>
1000e684:	5914b03a 	or	r10,r11,r4
1000e688:	500f003a 	cmpeq	r7,r10,zero
1000e68c:	48000e1e 	bne	r9,zero,1000e6c8 <__ledf2+0x80>
1000e690:	1998b03a 	or	r12,r3,r6
1000e694:	60000c1e 	bne	r12,zero,1000e6c8 <__ledf2+0x80>
1000e698:	50000d1e 	bne	r10,zero,1000e6d0 <__ledf2+0x88>
1000e69c:	0005883a 	mov	r2,zero
1000e6a0:	f800283a 	ret
1000e6a4:	590eb03a 	or	r7,r11,r4
1000e6a8:	38000d1e 	bne	r7,zero,1000e6e0 <__ledf2+0x98>
1000e6ac:	49c1ffe0 	cmpeqi	r7,r9,2047
1000e6b0:	38000f26 	beq	r7,zero,1000e6f0 <__ledf2+0xa8>
1000e6b4:	198eb03a 	or	r7,r3,r6
1000e6b8:	3800091e 	bne	r7,zero,1000e6e0 <__ledf2+0x98>
1000e6bc:	4000031e 	bne	r8,zero,1000e6cc <__ledf2+0x84>
1000e6c0:	590eb03a 	or	r7,r11,r4
1000e6c4:	380f003a 	cmpeq	r7,r7,zero
1000e6c8:	3800071e 	bne	r7,zero,1000e6e8 <__ledf2+0xa0>
1000e6cc:	28800c26 	beq	r5,r2,1000e700 <__ledf2+0xb8>
1000e6d0:	00800044 	movi	r2,1
1000e6d4:	28000526 	beq	r5,zero,1000e6ec <__ledf2+0xa4>
1000e6d8:	00bfffc4 	movi	r2,-1
1000e6dc:	f800283a 	ret
1000e6e0:	00800084 	movi	r2,2
1000e6e4:	f800283a 	ret
1000e6e8:	103ffb26 	beq	r2,zero,1000e6d8 <__ledf2+0x90>
1000e6ec:	f800283a 	ret
1000e6f0:	483ff61e 	bne	r9,zero,1000e6cc <__ledf2+0x84>
1000e6f4:	198eb03a 	or	r7,r3,r6
1000e6f8:	383ff41e 	bne	r7,zero,1000e6cc <__ledf2+0x84>
1000e6fc:	003ff406 	br	1000e6d0 <__ledf2+0x88>
1000e700:	4a00030e 	bge	r9,r8,1000e710 <__ledf2+0xc8>
1000e704:	103ff41e 	bne	r2,zero,1000e6d8 <__ledf2+0x90>
1000e708:	00800044 	movi	r2,1
1000e70c:	f800283a 	ret
1000e710:	427ff516 	blt	r8,r9,1000e6e8 <__ledf2+0xa0>
1000e714:	1affee36 	bltu	r3,r11,1000e6d0 <__ledf2+0x88>
1000e718:	58c00426 	beq	r11,r3,1000e72c <__ledf2+0xe4>
1000e71c:	58ffdf2e 	bgeu	r11,r3,1000e69c <__ledf2+0x54>
1000e720:	283fed26 	beq	r5,zero,1000e6d8 <__ledf2+0x90>
1000e724:	2805883a 	mov	r2,r5
1000e728:	f800283a 	ret
1000e72c:	313fe836 	bltu	r6,r4,1000e6d0 <__ledf2+0x88>
1000e730:	21bfda2e 	bgeu	r4,r6,1000e69c <__ledf2+0x54>
1000e734:	003ffa06 	br	1000e720 <__ledf2+0xd8>

1000e738 <__muldf3>:
1000e738:	2806d53a 	srli	r3,r5,20
1000e73c:	defff504 	addi	sp,sp,-44
1000e740:	dc000215 	stw	r16,8(sp)
1000e744:	04000434 	movhi	r16,16
1000e748:	dd000615 	stw	r20,24(sp)
1000e74c:	dc800415 	stw	r18,16(sp)
1000e750:	843fffc4 	addi	r16,r16,-1
1000e754:	dfc00a15 	stw	ra,40(sp)
1000e758:	ddc00915 	stw	r23,36(sp)
1000e75c:	dd800815 	stw	r22,32(sp)
1000e760:	dd400715 	stw	r21,28(sp)
1000e764:	dcc00515 	stw	r19,20(sp)
1000e768:	dc400315 	stw	r17,12(sp)
1000e76c:	18c1ffcc 	andi	r3,r3,2047
1000e770:	2025883a 	mov	r18,r4
1000e774:	2c20703a 	and	r16,r5,r16
1000e778:	2828d7fa 	srli	r20,r5,31
1000e77c:	18005c26 	beq	r3,zero,1000e8f0 <__muldf3+0x1b8>
1000e780:	1881ffe0 	cmpeqi	r2,r3,2047
1000e784:	1000711e 	bne	r2,zero,1000e94c <__muldf3+0x214>
1000e788:	800490fa 	slli	r2,r16,3
1000e78c:	2020d77a 	srli	r16,r4,29
1000e790:	202290fa 	slli	r17,r4,3
1000e794:	1cff0044 	addi	r19,r3,-1023
1000e798:	80a0b03a 	or	r16,r16,r2
1000e79c:	84002034 	orhi	r16,r16,128
1000e7a0:	002d883a 	mov	r22,zero
1000e7a4:	002f883a 	mov	r23,zero
1000e7a8:	3806d53a 	srli	r3,r7,20
1000e7ac:	01000434 	movhi	r4,16
1000e7b0:	213fffc4 	addi	r4,r4,-1
1000e7b4:	18c1ffcc 	andi	r3,r3,2047
1000e7b8:	3924703a 	and	r18,r7,r4
1000e7bc:	382ad7fa 	srli	r21,r7,31
1000e7c0:	18006926 	beq	r3,zero,1000e968 <__muldf3+0x230>
1000e7c4:	1881ffe0 	cmpeqi	r2,r3,2047
1000e7c8:	1000211e 	bne	r2,zero,1000e850 <__muldf3+0x118>
1000e7cc:	900890fa 	slli	r4,r18,3
1000e7d0:	300ad77a 	srli	r5,r6,29
1000e7d4:	301090fa 	slli	r8,r6,3
1000e7d8:	18ff0044 	addi	r3,r3,-1023
1000e7dc:	2908b03a 	or	r4,r5,r4
1000e7e0:	98e7883a 	add	r19,r19,r3
1000e7e4:	24802034 	orhi	r18,r4,128
1000e7e8:	0007883a 	mov	r3,zero
1000e7ec:	b1000428 	cmpgeui	r4,r22,16
1000e7f0:	a54cf03a 	xor	r6,r20,r21
1000e7f4:	99400044 	addi	r5,r19,1
1000e7f8:	2000981e 	bne	r4,zero,1000ea5c <__muldf3+0x324>
1000e7fc:	b00890ba 	slli	r4,r22,2
1000e800:	00840074 	movhi	r2,4097
1000e804:	2085883a 	add	r2,r4,r2
1000e808:	10ba0417 	ldw	r2,-6128(r2)
1000e80c:	1000683a 	jmp	r2
1000e810:	1000ea5c 	xori	zero,r2,937
1000e814:	1000e870 	cmpltui	zero,r2,929
1000e818:	1000e870 	cmpltui	zero,r2,929
1000e81c:	1000e86c 	andhi	zero,r2,929
1000e820:	1000e87c 	xorhi	zero,r2,929
1000e824:	1000e87c 	xorhi	zero,r2,929
1000e828:	1000ea18 	cmpnei	zero,r2,936
1000e82c:	1000e86c 	andhi	zero,r2,929
1000e830:	1000e87c 	xorhi	zero,r2,929
1000e834:	1000ea18 	cmpnei	zero,r2,936
1000e838:	1000e87c 	xorhi	zero,r2,929
1000e83c:	1000e86c 	andhi	zero,r2,929
1000e840:	1000ea10 	cmplti	zero,r2,936
1000e844:	1000ea10 	cmplti	zero,r2,936
1000e848:	1000ea10 	cmplti	zero,r2,936
1000e84c:	1000ea30 	cmpltui	zero,r2,936
1000e850:	3490b03a 	or	r8,r6,r18
1000e854:	9cc1ffc4 	addi	r19,r19,2047
1000e858:	4000691e 	bne	r8,zero,1000ea00 <__muldf3+0x2c8>
1000e85c:	b5800094 	ori	r22,r22,2
1000e860:	0025883a 	mov	r18,zero
1000e864:	00c00084 	movi	r3,2
1000e868:	003fe006 	br	1000e7ec <__muldf3+0xb4>
1000e86c:	a80d883a 	mov	r6,r21
1000e870:	9021883a 	mov	r16,r18
1000e874:	4023883a 	mov	r17,r8
1000e878:	182f883a 	mov	r23,r3
1000e87c:	b88000a0 	cmpeqi	r2,r23,2
1000e880:	10004d1e 	bne	r2,zero,1000e9b8 <__muldf3+0x280>
1000e884:	b88000e0 	cmpeqi	r2,r23,3
1000e888:	1001491e 	bne	r2,zero,1000edb0 <__muldf3+0x678>
1000e88c:	b8800060 	cmpeqi	r2,r23,1
1000e890:	1000d826 	beq	r2,zero,1000ebf4 <__muldf3+0x4bc>
1000e894:	0007883a 	mov	r3,zero
1000e898:	0021883a 	mov	r16,zero
1000e89c:	0023883a 	mov	r17,zero
1000e8a0:	30803fcc 	andi	r2,r6,255
1000e8a4:	01000434 	movhi	r4,16
1000e8a8:	1806953a 	slli	r3,r3,20
1000e8ac:	213fffc4 	addi	r4,r4,-1
1000e8b0:	100497fa 	slli	r2,r2,31
1000e8b4:	8120703a 	and	r16,r16,r4
1000e8b8:	80c6b03a 	or	r3,r16,r3
1000e8bc:	1886b03a 	or	r3,r3,r2
1000e8c0:	8805883a 	mov	r2,r17
1000e8c4:	dfc00a17 	ldw	ra,40(sp)
1000e8c8:	ddc00917 	ldw	r23,36(sp)
1000e8cc:	dd800817 	ldw	r22,32(sp)
1000e8d0:	dd400717 	ldw	r21,28(sp)
1000e8d4:	dd000617 	ldw	r20,24(sp)
1000e8d8:	dcc00517 	ldw	r19,20(sp)
1000e8dc:	dc800417 	ldw	r18,16(sp)
1000e8e0:	dc400317 	ldw	r17,12(sp)
1000e8e4:	dc000217 	ldw	r16,8(sp)
1000e8e8:	dec00b04 	addi	sp,sp,44
1000e8ec:	f800283a 	ret
1000e8f0:	8122b03a 	or	r17,r16,r4
1000e8f4:	88003d26 	beq	r17,zero,1000e9ec <__muldf3+0x2b4>
1000e8f8:	d9c00115 	stw	r7,4(sp)
1000e8fc:	d9800015 	stw	r6,0(sp)
1000e900:	8000e826 	beq	r16,zero,1000eca4 <__muldf3+0x56c>
1000e904:	8009883a 	mov	r4,r16
1000e908:	000f9680 	call	1000f968 <__clzsi2>
1000e90c:	d9800017 	ldw	r6,0(sp)
1000e910:	d9c00117 	ldw	r7,4(sp)
1000e914:	1007883a 	mov	r3,r2
1000e918:	117ffd44 	addi	r5,r2,-11
1000e91c:	01000744 	movi	r4,29
1000e920:	1c7ffe04 	addi	r17,r3,-8
1000e924:	2149c83a 	sub	r4,r4,r5
1000e928:	8460983a 	sll	r16,r16,r17
1000e92c:	9108d83a 	srl	r4,r18,r4
1000e930:	9462983a 	sll	r17,r18,r17
1000e934:	2420b03a 	or	r16,r4,r16
1000e938:	04ff0344 	movi	r19,-1011
1000e93c:	98e7c83a 	sub	r19,r19,r3
1000e940:	002d883a 	mov	r22,zero
1000e944:	002f883a 	mov	r23,zero
1000e948:	003f9706 	br	1000e7a8 <__muldf3+0x70>
1000e94c:	8122b03a 	or	r17,r16,r4
1000e950:	8800211e 	bne	r17,zero,1000e9d8 <__muldf3+0x2a0>
1000e954:	0021883a 	mov	r16,zero
1000e958:	05800204 	movi	r22,8
1000e95c:	04c1ffc4 	movi	r19,2047
1000e960:	05c00084 	movi	r23,2
1000e964:	003f9006 	br	1000e7a8 <__muldf3+0x70>
1000e968:	3490b03a 	or	r8,r6,r18
1000e96c:	40001626 	beq	r8,zero,1000e9c8 <__muldf3+0x290>
1000e970:	9000c026 	beq	r18,zero,1000ec74 <__muldf3+0x53c>
1000e974:	9009883a 	mov	r4,r18
1000e978:	d9800015 	stw	r6,0(sp)
1000e97c:	000f9680 	call	1000f968 <__clzsi2>
1000e980:	d9800017 	ldw	r6,0(sp)
1000e984:	1007883a 	mov	r3,r2
1000e988:	113ffd44 	addi	r4,r2,-11
1000e98c:	01400744 	movi	r5,29
1000e990:	1a3ffe04 	addi	r8,r3,-8
1000e994:	290bc83a 	sub	r5,r5,r4
1000e998:	314ad83a 	srl	r5,r6,r5
1000e99c:	9208983a 	sll	r4,r18,r8
1000e9a0:	3210983a 	sll	r8,r6,r8
1000e9a4:	2924b03a 	or	r18,r5,r4
1000e9a8:	98c7c83a 	sub	r3,r19,r3
1000e9ac:	1cff0344 	addi	r19,r3,-1011
1000e9b0:	0007883a 	mov	r3,zero
1000e9b4:	003f8d06 	br	1000e7ec <__muldf3+0xb4>
1000e9b8:	00c1ffc4 	movi	r3,2047
1000e9bc:	0021883a 	mov	r16,zero
1000e9c0:	0023883a 	mov	r17,zero
1000e9c4:	003fb606 	br	1000e8a0 <__muldf3+0x168>
1000e9c8:	b5800054 	ori	r22,r22,1
1000e9cc:	0025883a 	mov	r18,zero
1000e9d0:	00c00044 	movi	r3,1
1000e9d4:	003f8506 	br	1000e7ec <__muldf3+0xb4>
1000e9d8:	2023883a 	mov	r17,r4
1000e9dc:	05800304 	movi	r22,12
1000e9e0:	04c1ffc4 	movi	r19,2047
1000e9e4:	05c000c4 	movi	r23,3
1000e9e8:	003f6f06 	br	1000e7a8 <__muldf3+0x70>
1000e9ec:	0021883a 	mov	r16,zero
1000e9f0:	05800104 	movi	r22,4
1000e9f4:	0027883a 	mov	r19,zero
1000e9f8:	05c00044 	movi	r23,1
1000e9fc:	003f6a06 	br	1000e7a8 <__muldf3+0x70>
1000ea00:	b58000d4 	ori	r22,r22,3
1000ea04:	3011883a 	mov	r8,r6
1000ea08:	00c000c4 	movi	r3,3
1000ea0c:	003f7706 	br	1000e7ec <__muldf3+0xb4>
1000ea10:	a00d883a 	mov	r6,r20
1000ea14:	003f9906 	br	1000e87c <__muldf3+0x144>
1000ea18:	04000434 	movhi	r16,16
1000ea1c:	000d883a 	mov	r6,zero
1000ea20:	843fffc4 	addi	r16,r16,-1
1000ea24:	047fffc4 	movi	r17,-1
1000ea28:	00c1ffc4 	movi	r3,2047
1000ea2c:	003f9c06 	br	1000e8a0 <__muldf3+0x168>
1000ea30:	8080022c 	andhi	r2,r16,8
1000ea34:	10008926 	beq	r2,zero,1000ec5c <__muldf3+0x524>
1000ea38:	9080022c 	andhi	r2,r18,8
1000ea3c:	1000871e 	bne	r2,zero,1000ec5c <__muldf3+0x524>
1000ea40:	00800434 	movhi	r2,16
1000ea44:	94000234 	orhi	r16,r18,8
1000ea48:	10bfffc4 	addi	r2,r2,-1
1000ea4c:	80a0703a 	and	r16,r16,r2
1000ea50:	a80d883a 	mov	r6,r21
1000ea54:	4023883a 	mov	r17,r8
1000ea58:	003ff306 	br	1000ea28 <__muldf3+0x2f0>
1000ea5c:	8818d43a 	srli	r12,r17,16
1000ea60:	4028d43a 	srli	r20,r8,16
1000ea64:	42ffffcc 	andi	r11,r8,65535
1000ea68:	8c7fffcc 	andi	r17,r17,65535
1000ea6c:	5c47383a 	mul	r3,r11,r17
1000ea70:	62c9383a 	mul	r4,r12,r11
1000ea74:	a445383a 	mul	r2,r20,r17
1000ea78:	1810d43a 	srli	r8,r3,16
1000ea7c:	651d383a 	mul	r14,r12,r20
1000ea80:	1105883a 	add	r2,r2,r4
1000ea84:	4091883a 	add	r8,r8,r2
1000ea88:	4100022e 	bgeu	r8,r4,1000ea94 <__muldf3+0x35c>
1000ea8c:	00800074 	movhi	r2,1
1000ea90:	709d883a 	add	r14,r14,r2
1000ea94:	901ed43a 	srli	r15,r18,16
1000ea98:	94bfffcc 	andi	r18,r18,65535
1000ea9c:	9449383a 	mul	r4,r18,r17
1000eaa0:	648f383a 	mul	r7,r12,r18
1000eaa4:	7c63383a 	mul	r17,r15,r17
1000eaa8:	201ad43a 	srli	r13,r4,16
1000eaac:	4014943a 	slli	r10,r8,16
1000eab0:	89e3883a 	add	r17,r17,r7
1000eab4:	1a7fffcc 	andi	r9,r3,65535
1000eab8:	6c5b883a 	add	r13,r13,r17
1000eabc:	4006d43a 	srli	r3,r8,16
1000eac0:	5253883a 	add	r9,r10,r9
1000eac4:	63c5383a 	mul	r2,r12,r15
1000eac8:	69c0022e 	bgeu	r13,r7,1000ead4 <__muldf3+0x39c>
1000eacc:	01c00074 	movhi	r7,1
1000ead0:	11c5883a 	add	r2,r2,r7
1000ead4:	802ad43a 	srli	r21,r16,16
1000ead8:	823fffcc 	andi	r8,r16,65535
1000eadc:	5a2d383a 	mul	r22,r11,r8
1000eae0:	a20f383a 	mul	r7,r20,r8
1000eae4:	aad7383a 	mul	r11,r21,r11
1000eae8:	6814943a 	slli	r10,r13,16
1000eaec:	b018d43a 	srli	r12,r22,16
1000eaf0:	6822d43a 	srli	r17,r13,16
1000eaf4:	213fffcc 	andi	r4,r4,65535
1000eaf8:	3acf883a 	add	r7,r7,r11
1000eafc:	5115883a 	add	r10,r10,r4
1000eb00:	61cf883a 	add	r7,r12,r7
1000eb04:	889b883a 	add	r13,r17,r2
1000eb08:	1a87883a 	add	r3,r3,r10
1000eb0c:	a569383a 	mul	r20,r20,r21
1000eb10:	3ac0022e 	bgeu	r7,r11,1000eb1c <__muldf3+0x3e4>
1000eb14:	00800074 	movhi	r2,1
1000eb18:	a0a9883a 	add	r20,r20,r2
1000eb1c:	9217383a 	mul	r11,r18,r8
1000eb20:	aca5383a 	mul	r18,r21,r18
1000eb24:	7a11383a 	mul	r8,r15,r8
1000eb28:	5820d43a 	srli	r16,r11,16
1000eb2c:	3808d43a 	srli	r4,r7,16
1000eb30:	380e943a 	slli	r7,r7,16
1000eb34:	4491883a 	add	r8,r8,r18
1000eb38:	b5bfffcc 	andi	r22,r22,65535
1000eb3c:	8211883a 	add	r8,r16,r8
1000eb40:	2529883a 	add	r20,r4,r20
1000eb44:	3d8f883a 	add	r7,r7,r22
1000eb48:	7d59383a 	mul	r12,r15,r21
1000eb4c:	4480022e 	bgeu	r8,r18,1000eb58 <__muldf3+0x420>
1000eb50:	00800074 	movhi	r2,1
1000eb54:	6099883a 	add	r12,r12,r2
1000eb58:	4004943a 	slli	r2,r8,16
1000eb5c:	5affffcc 	andi	r11,r11,65535
1000eb60:	1b87883a 	add	r3,r3,r14
1000eb64:	12c5883a 	add	r2,r2,r11
1000eb68:	1a95803a 	cmpltu	r10,r3,r10
1000eb6c:	1345883a 	add	r2,r2,r13
1000eb70:	19c7883a 	add	r3,r3,r7
1000eb74:	129d883a 	add	r14,r2,r10
1000eb78:	19cf803a 	cmpltu	r7,r3,r7
1000eb7c:	7509883a 	add	r4,r14,r20
1000eb80:	4010d43a 	srli	r8,r8,16
1000eb84:	21d7883a 	add	r11,r4,r7
1000eb88:	1345803a 	cmpltu	r2,r2,r13
1000eb8c:	72a1803a 	cmpltu	r16,r14,r10
1000eb90:	1420b03a 	or	r16,r2,r16
1000eb94:	2509803a 	cmpltu	r4,r4,r20
1000eb98:	59cf803a 	cmpltu	r7,r11,r7
1000eb9c:	21ceb03a 	or	r7,r4,r7
1000eba0:	8221883a 	add	r16,r16,r8
1000eba4:	81e1883a 	add	r16,r16,r7
1000eba8:	1822927a 	slli	r17,r3,9
1000ebac:	8321883a 	add	r16,r16,r12
1000ebb0:	8020927a 	slli	r16,r16,9
1000ebb4:	5808d5fa 	srli	r4,r11,23
1000ebb8:	1806d5fa 	srli	r3,r3,23
1000ebbc:	8a62b03a 	or	r17,r17,r9
1000ebc0:	5804927a 	slli	r2,r11,9
1000ebc4:	8120b03a 	or	r16,r16,r4
1000ebc8:	8822c03a 	cmpne	r17,r17,zero
1000ebcc:	88e2b03a 	or	r17,r17,r3
1000ebd0:	80c0402c 	andhi	r3,r16,256
1000ebd4:	88a2b03a 	or	r17,r17,r2
1000ebd8:	18005a26 	beq	r3,zero,1000ed44 <__muldf3+0x60c>
1000ebdc:	8804d07a 	srli	r2,r17,1
1000ebe0:	800697fa 	slli	r3,r16,31
1000ebe4:	8c40004c 	andi	r17,r17,1
1000ebe8:	8020d07a 	srli	r16,r16,1
1000ebec:	1462b03a 	or	r17,r2,r17
1000ebf0:	88e2b03a 	or	r17,r17,r3
1000ebf4:	28c0ffc4 	addi	r3,r5,1023
1000ebf8:	00c0350e 	bge	zero,r3,1000ecd0 <__muldf3+0x598>
1000ebfc:	888001cc 	andi	r2,r17,7
1000ec00:	10000726 	beq	r2,zero,1000ec20 <__muldf3+0x4e8>
1000ec04:	888003cc 	andi	r2,r17,15
1000ec08:	10800120 	cmpeqi	r2,r2,4
1000ec0c:	1000041e 	bne	r2,zero,1000ec20 <__muldf3+0x4e8>
1000ec10:	88800104 	addi	r2,r17,4
1000ec14:	1463803a 	cmpltu	r17,r2,r17
1000ec18:	8461883a 	add	r16,r16,r17
1000ec1c:	1023883a 	mov	r17,r2
1000ec20:	8080402c 	andhi	r2,r16,256
1000ec24:	10000426 	beq	r2,zero,1000ec38 <__muldf3+0x500>
1000ec28:	00bfc034 	movhi	r2,65280
1000ec2c:	10bfffc4 	addi	r2,r2,-1
1000ec30:	80a0703a 	and	r16,r16,r2
1000ec34:	28c10004 	addi	r3,r5,1024
1000ec38:	1881ffc8 	cmpgei	r2,r3,2047
1000ec3c:	103f5e1e 	bne	r2,zero,1000e9b8 <__muldf3+0x280>
1000ec40:	8004977a 	slli	r2,r16,29
1000ec44:	8822d0fa 	srli	r17,r17,3
1000ec48:	8020927a 	slli	r16,r16,9
1000ec4c:	18c1ffcc 	andi	r3,r3,2047
1000ec50:	1462b03a 	or	r17,r2,r17
1000ec54:	8020d33a 	srli	r16,r16,12
1000ec58:	003f1106 	br	1000e8a0 <__muldf3+0x168>
1000ec5c:	00800434 	movhi	r2,16
1000ec60:	84000234 	orhi	r16,r16,8
1000ec64:	10bfffc4 	addi	r2,r2,-1
1000ec68:	80a0703a 	and	r16,r16,r2
1000ec6c:	a00d883a 	mov	r6,r20
1000ec70:	003f6d06 	br	1000ea28 <__muldf3+0x2f0>
1000ec74:	3009883a 	mov	r4,r6
1000ec78:	d9800015 	stw	r6,0(sp)
1000ec7c:	000f9680 	call	1000f968 <__clzsi2>
1000ec80:	11000544 	addi	r4,r2,21
1000ec84:	21400748 	cmpgei	r5,r4,29
1000ec88:	10c00804 	addi	r3,r2,32
1000ec8c:	d9800017 	ldw	r6,0(sp)
1000ec90:	283f3e26 	beq	r5,zero,1000e98c <__muldf3+0x254>
1000ec94:	10bffe04 	addi	r2,r2,-8
1000ec98:	30a4983a 	sll	r18,r6,r2
1000ec9c:	0011883a 	mov	r8,zero
1000eca0:	003f4106 	br	1000e9a8 <__muldf3+0x270>
1000eca4:	000f9680 	call	1000f968 <__clzsi2>
1000eca8:	11400544 	addi	r5,r2,21
1000ecac:	29000748 	cmpgei	r4,r5,29
1000ecb0:	10c00804 	addi	r3,r2,32
1000ecb4:	d9800017 	ldw	r6,0(sp)
1000ecb8:	d9c00117 	ldw	r7,4(sp)
1000ecbc:	203f1726 	beq	r4,zero,1000e91c <__muldf3+0x1e4>
1000ecc0:	10bffe04 	addi	r2,r2,-8
1000ecc4:	90a0983a 	sll	r16,r18,r2
1000ecc8:	0023883a 	mov	r17,zero
1000eccc:	003f1a06 	br	1000e938 <__muldf3+0x200>
1000ecd0:	00800044 	movi	r2,1
1000ecd4:	10c5c83a 	sub	r2,r2,r3
1000ecd8:	11000e48 	cmpgei	r4,r2,57
1000ecdc:	203eed1e 	bne	r4,zero,1000e894 <__muldf3+0x15c>
1000ece0:	11000808 	cmpgei	r4,r2,32
1000ece4:	2000191e 	bne	r4,zero,1000ed4c <__muldf3+0x614>
1000ece8:	29410784 	addi	r5,r5,1054
1000ecec:	8146983a 	sll	r3,r16,r5
1000ecf0:	8888d83a 	srl	r4,r17,r2
1000ecf4:	894a983a 	sll	r5,r17,r5
1000ecf8:	80a0d83a 	srl	r16,r16,r2
1000ecfc:	1904b03a 	or	r2,r3,r4
1000ed00:	2822c03a 	cmpne	r17,r5,zero
1000ed04:	1444b03a 	or	r2,r2,r17
1000ed08:	10c001cc 	andi	r3,r2,7
1000ed0c:	18000726 	beq	r3,zero,1000ed2c <__muldf3+0x5f4>
1000ed10:	10c003cc 	andi	r3,r2,15
1000ed14:	18c00120 	cmpeqi	r3,r3,4
1000ed18:	1800041e 	bne	r3,zero,1000ed2c <__muldf3+0x5f4>
1000ed1c:	10c00104 	addi	r3,r2,4
1000ed20:	1885803a 	cmpltu	r2,r3,r2
1000ed24:	80a1883a 	add	r16,r16,r2
1000ed28:	1805883a 	mov	r2,r3
1000ed2c:	80c0202c 	andhi	r3,r16,128
1000ed30:	18001b26 	beq	r3,zero,1000eda0 <__muldf3+0x668>
1000ed34:	00c00044 	movi	r3,1
1000ed38:	0021883a 	mov	r16,zero
1000ed3c:	0023883a 	mov	r17,zero
1000ed40:	003ed706 	br	1000e8a0 <__muldf3+0x168>
1000ed44:	980b883a 	mov	r5,r19
1000ed48:	003faa06 	br	1000ebf4 <__muldf3+0x4bc>
1000ed4c:	013ff844 	movi	r4,-31
1000ed50:	20c7c83a 	sub	r3,r4,r3
1000ed54:	10800820 	cmpeqi	r2,r2,32
1000ed58:	80c6d83a 	srl	r3,r16,r3
1000ed5c:	1000031e 	bne	r2,zero,1000ed6c <__muldf3+0x634>
1000ed60:	28810f84 	addi	r2,r5,1086
1000ed64:	8084983a 	sll	r2,r16,r2
1000ed68:	88a2b03a 	or	r17,r17,r2
1000ed6c:	8822c03a 	cmpne	r17,r17,zero
1000ed70:	88c4b03a 	or	r2,r17,r3
1000ed74:	144001cc 	andi	r17,r2,7
1000ed78:	8800051e 	bne	r17,zero,1000ed90 <__muldf3+0x658>
1000ed7c:	0021883a 	mov	r16,zero
1000ed80:	1004d0fa 	srli	r2,r2,3
1000ed84:	0007883a 	mov	r3,zero
1000ed88:	1462b03a 	or	r17,r2,r17
1000ed8c:	003ec406 	br	1000e8a0 <__muldf3+0x168>
1000ed90:	10c003cc 	andi	r3,r2,15
1000ed94:	18c00118 	cmpnei	r3,r3,4
1000ed98:	0021883a 	mov	r16,zero
1000ed9c:	183fdf1e 	bne	r3,zero,1000ed1c <__muldf3+0x5e4>
1000eda0:	8006927a 	slli	r3,r16,9
1000eda4:	8022977a 	slli	r17,r16,29
1000eda8:	1820d33a 	srli	r16,r3,12
1000edac:	003ff406 	br	1000ed80 <__muldf3+0x648>
1000edb0:	00800434 	movhi	r2,16
1000edb4:	84000234 	orhi	r16,r16,8
1000edb8:	10bfffc4 	addi	r2,r2,-1
1000edbc:	80a0703a 	and	r16,r16,r2
1000edc0:	003f1906 	br	1000ea28 <__muldf3+0x2f0>

1000edc4 <__subdf3>:
1000edc4:	00800434 	movhi	r2,16
1000edc8:	3812d53a 	srli	r9,r7,20
1000edcc:	10bfffc4 	addi	r2,r2,-1
1000edd0:	defffb04 	addi	sp,sp,-20
1000edd4:	2890703a 	and	r8,r5,r2
1000edd8:	3884703a 	and	r2,r7,r2
1000eddc:	2806d7fa 	srli	r3,r5,31
1000ede0:	dcc00315 	stw	r19,12(sp)
1000ede4:	dc400115 	stw	r17,4(sp)
1000ede8:	280ad53a 	srli	r5,r5,20
1000edec:	401090fa 	slli	r8,r8,3
1000edf0:	2026d77a 	srli	r19,r4,29
1000edf4:	100490fa 	slli	r2,r2,3
1000edf8:	3022d77a 	srli	r17,r6,29
1000edfc:	4a81ffcc 	andi	r10,r9,2047
1000ee00:	dc800215 	stw	r18,8(sp)
1000ee04:	dc000015 	stw	r16,0(sp)
1000ee08:	dfc00415 	stw	ra,16(sp)
1000ee0c:	5241ffe0 	cmpeqi	r9,r10,2047
1000ee10:	1825883a 	mov	r18,r3
1000ee14:	2c01ffcc 	andi	r16,r5,2047
1000ee18:	18c03fcc 	andi	r3,r3,255
1000ee1c:	9a18b03a 	or	r12,r19,r8
1000ee20:	201a90fa 	slli	r13,r4,3
1000ee24:	380ed7fa 	srli	r7,r7,31
1000ee28:	8896b03a 	or	r11,r17,r2
1000ee2c:	301c90fa 	slli	r14,r6,3
1000ee30:	4800711e 	bne	r9,zero,1000eff8 <__subdf3+0x234>
1000ee34:	39c0005c 	xori	r7,r7,1
1000ee38:	8291c83a 	sub	r8,r16,r10
1000ee3c:	19c05a26 	beq	r3,r7,1000efa8 <__subdf3+0x1e4>
1000ee40:	0200720e 	bge	zero,r8,1000f00c <__subdf3+0x248>
1000ee44:	50008126 	beq	r10,zero,1000f04c <__subdf3+0x288>
1000ee48:	8081ffd8 	cmpnei	r2,r16,2047
1000ee4c:	10011626 	beq	r2,zero,1000f2a8 <__subdf3+0x4e4>
1000ee50:	5ac02034 	orhi	r11,r11,128
1000ee54:	40800e48 	cmpgei	r2,r8,57
1000ee58:	1000fe1e 	bne	r2,zero,1000f254 <__subdf3+0x490>
1000ee5c:	40800808 	cmpgei	r2,r8,32
1000ee60:	10015e1e 	bne	r2,zero,1000f3dc <__subdf3+0x618>
1000ee64:	00800804 	movi	r2,32
1000ee68:	1205c83a 	sub	r2,r2,r8
1000ee6c:	58a2983a 	sll	r17,r11,r2
1000ee70:	7206d83a 	srl	r3,r14,r8
1000ee74:	709c983a 	sll	r14,r14,r2
1000ee78:	5a04d83a 	srl	r2,r11,r8
1000ee7c:	88e2b03a 	or	r17,r17,r3
1000ee80:	701cc03a 	cmpne	r14,r14,zero
1000ee84:	8ba2b03a 	or	r17,r17,r14
1000ee88:	6099c83a 	sub	r12,r12,r2
1000ee8c:	6c63c83a 	sub	r17,r13,r17
1000ee90:	6c49803a 	cmpltu	r4,r13,r17
1000ee94:	6109c83a 	sub	r4,r12,r4
1000ee98:	2080202c 	andhi	r2,r4,128
1000ee9c:	10009f26 	beq	r2,zero,1000f11c <__subdf3+0x358>
1000eea0:	04c02034 	movhi	r19,128
1000eea4:	9cffffc4 	addi	r19,r19,-1
1000eea8:	24e6703a 	and	r19,r4,r19
1000eeac:	9800e026 	beq	r19,zero,1000f230 <__subdf3+0x46c>
1000eeb0:	9809883a 	mov	r4,r19
1000eeb4:	000f9680 	call	1000f968 <__clzsi2>
1000eeb8:	123ffe04 	addi	r8,r2,-8
1000eebc:	01000804 	movi	r4,32
1000eec0:	2209c83a 	sub	r4,r4,r8
1000eec4:	8906d83a 	srl	r3,r17,r4
1000eec8:	9a08983a 	sll	r4,r19,r8
1000eecc:	8a22983a 	sll	r17,r17,r8
1000eed0:	1908b03a 	or	r4,r3,r4
1000eed4:	4400cf16 	blt	r8,r16,1000f214 <__subdf3+0x450>
1000eed8:	4411c83a 	sub	r8,r8,r16
1000eedc:	40800044 	addi	r2,r8,1
1000eee0:	10c00808 	cmpgei	r3,r2,32
1000eee4:	1801251e 	bne	r3,zero,1000f37c <__subdf3+0x5b8>
1000eee8:	00c00804 	movi	r3,32
1000eeec:	1887c83a 	sub	r3,r3,r2
1000eef0:	888ad83a 	srl	r5,r17,r2
1000eef4:	88e2983a 	sll	r17,r17,r3
1000eef8:	20c6983a 	sll	r3,r4,r3
1000eefc:	2088d83a 	srl	r4,r4,r2
1000ef00:	8822c03a 	cmpne	r17,r17,zero
1000ef04:	1946b03a 	or	r3,r3,r5
1000ef08:	1c62b03a 	or	r17,r3,r17
1000ef0c:	0021883a 	mov	r16,zero
1000ef10:	888001cc 	andi	r2,r17,7
1000ef14:	10000726 	beq	r2,zero,1000ef34 <__subdf3+0x170>
1000ef18:	888003cc 	andi	r2,r17,15
1000ef1c:	10800120 	cmpeqi	r2,r2,4
1000ef20:	1000041e 	bne	r2,zero,1000ef34 <__subdf3+0x170>
1000ef24:	88c00104 	addi	r3,r17,4
1000ef28:	1c63803a 	cmpltu	r17,r3,r17
1000ef2c:	2449883a 	add	r4,r4,r17
1000ef30:	1823883a 	mov	r17,r3
1000ef34:	2080202c 	andhi	r2,r4,128
1000ef38:	10007a26 	beq	r2,zero,1000f124 <__subdf3+0x360>
1000ef3c:	82000044 	addi	r8,r16,1
1000ef40:	4081ffe0 	cmpeqi	r2,r8,2047
1000ef44:	4201ffcc 	andi	r8,r8,2047
1000ef48:	10008c1e 	bne	r2,zero,1000f17c <__subdf3+0x3b8>
1000ef4c:	00bfe034 	movhi	r2,65408
1000ef50:	10bfffc4 	addi	r2,r2,-1
1000ef54:	2084703a 	and	r2,r4,r2
1000ef58:	1008927a 	slli	r4,r2,9
1000ef5c:	8822d0fa 	srli	r17,r17,3
1000ef60:	100c977a 	slli	r6,r2,29
1000ef64:	2008d33a 	srli	r4,r4,12
1000ef68:	3444b03a 	or	r2,r6,r17
1000ef6c:	4010953a 	slli	r8,r8,20
1000ef70:	00c00434 	movhi	r3,16
1000ef74:	94803fcc 	andi	r18,r18,255
1000ef78:	902497fa 	slli	r18,r18,31
1000ef7c:	18ffffc4 	addi	r3,r3,-1
1000ef80:	20c6703a 	and	r3,r4,r3
1000ef84:	1a06b03a 	or	r3,r3,r8
1000ef88:	1c86b03a 	or	r3,r3,r18
1000ef8c:	dfc00417 	ldw	ra,16(sp)
1000ef90:	dcc00317 	ldw	r19,12(sp)
1000ef94:	dc800217 	ldw	r18,8(sp)
1000ef98:	dc400117 	ldw	r17,4(sp)
1000ef9c:	dc000017 	ldw	r16,0(sp)
1000efa0:	dec00504 	addi	sp,sp,20
1000efa4:	f800283a 	ret
1000efa8:	0200320e 	bge	zero,r8,1000f074 <__subdf3+0x2b0>
1000efac:	50004c26 	beq	r10,zero,1000f0e0 <__subdf3+0x31c>
1000efb0:	8081ffd8 	cmpnei	r2,r16,2047
1000efb4:	1000bc26 	beq	r2,zero,1000f2a8 <__subdf3+0x4e4>
1000efb8:	5ac02034 	orhi	r11,r11,128
1000efbc:	40800e48 	cmpgei	r2,r8,57
1000efc0:	1000641e 	bne	r2,zero,1000f154 <__subdf3+0x390>
1000efc4:	40800808 	cmpgei	r2,r8,32
1000efc8:	10011726 	beq	r2,zero,1000f428 <__subdf3+0x664>
1000efcc:	447ff804 	addi	r17,r8,-32
1000efd0:	40800820 	cmpeqi	r2,r8,32
1000efd4:	5c46d83a 	srl	r3,r11,r17
1000efd8:	1000041e 	bne	r2,zero,1000efec <__subdf3+0x228>
1000efdc:	00801004 	movi	r2,64
1000efe0:	1205c83a 	sub	r2,r2,r8
1000efe4:	5884983a 	sll	r2,r11,r2
1000efe8:	709cb03a 	or	r14,r14,r2
1000efec:	7022c03a 	cmpne	r17,r14,zero
1000eff0:	88e2b03a 	or	r17,r17,r3
1000eff4:	00005906 	br	1000f15c <__subdf3+0x398>
1000eff8:	5b8ab03a 	or	r5,r11,r14
1000effc:	823e0044 	addi	r8,r16,-2047
1000f000:	28001a1e 	bne	r5,zero,1000f06c <__subdf3+0x2a8>
1000f004:	39c0005c 	xori	r7,r7,1
1000f008:	19c01a26 	beq	r3,r7,1000f074 <__subdf3+0x2b0>
1000f00c:	4000291e 	bne	r8,zero,1000f0b4 <__subdf3+0x2f0>
1000f010:	80800044 	addi	r2,r16,1
1000f014:	1081ff8c 	andi	r2,r2,2046
1000f018:	1000911e 	bne	r2,zero,1000f260 <__subdf3+0x49c>
1000f01c:	6346b03a 	or	r3,r12,r13
1000f020:	5b84b03a 	or	r2,r11,r14
1000f024:	8001551e 	bne	r16,zero,1000f57c <__subdf3+0x7b8>
1000f028:	18011b26 	beq	r3,zero,1000f498 <__subdf3+0x6d4>
1000f02c:	1001641e 	bne	r2,zero,1000f5c0 <__subdf3+0x7fc>
1000f030:	00880034 	movhi	r2,8192
1000f034:	6022977a 	slli	r17,r12,29
1000f038:	10bfffc4 	addi	r2,r2,-1
1000f03c:	2088703a 	and	r4,r4,r2
1000f040:	2444b03a 	or	r2,r4,r17
1000f044:	6026d0fa 	srli	r19,r12,3
1000f048:	00003d06 	br	1000f140 <__subdf3+0x37c>
1000f04c:	5b84b03a 	or	r2,r11,r14
1000f050:	10008e26 	beq	r2,zero,1000f28c <__subdf3+0x4c8>
1000f054:	40bfffc4 	addi	r2,r8,-1
1000f058:	10011f26 	beq	r2,zero,1000f4d8 <__subdf3+0x714>
1000f05c:	4201ffd8 	cmpnei	r8,r8,2047
1000f060:	40012d26 	beq	r8,zero,1000f518 <__subdf3+0x754>
1000f064:	1011883a 	mov	r8,r2
1000f068:	003f7a06 	br	1000ee54 <__subdf3+0x90>
1000f06c:	39c03fcc 	andi	r7,r7,255
1000f070:	19ffe61e 	bne	r3,r7,1000f00c <__subdf3+0x248>
1000f074:	4000931e 	bne	r8,zero,1000f2c4 <__subdf3+0x500>
1000f078:	80c00044 	addi	r3,r16,1
1000f07c:	1881ff8c 	andi	r2,r3,2046
1000f080:	10012c1e 	bne	r2,zero,1000f534 <__subdf3+0x770>
1000f084:	6344b03a 	or	r2,r12,r13
1000f088:	8000f91e 	bne	r16,zero,1000f470 <__subdf3+0x6ac>
1000f08c:	10017326 	beq	r2,zero,1000f65c <__subdf3+0x898>
1000f090:	5b84b03a 	or	r2,r11,r14
1000f094:	1001781e 	bne	r2,zero,1000f678 <__subdf3+0x8b4>
1000f098:	6004977a 	slli	r2,r12,29
1000f09c:	00c80034 	movhi	r3,8192
1000f0a0:	18ffffc4 	addi	r3,r3,-1
1000f0a4:	20c6703a 	and	r3,r4,r3
1000f0a8:	10c4b03a 	or	r2,r2,r3
1000f0ac:	6026d0fa 	srli	r19,r12,3
1000f0b0:	00002306 	br	1000f140 <__subdf3+0x37c>
1000f0b4:	5411c83a 	sub	r8,r10,r16
1000f0b8:	3825883a 	mov	r18,r7
1000f0bc:	8000991e 	bne	r16,zero,1000f324 <__subdf3+0x560>
1000f0c0:	6344b03a 	or	r2,r12,r13
1000f0c4:	1000e326 	beq	r2,zero,1000f454 <__subdf3+0x690>
1000f0c8:	40bfffc4 	addi	r2,r8,-1
1000f0cc:	10015d26 	beq	r2,zero,1000f644 <__subdf3+0x880>
1000f0d0:	4201ffd8 	cmpnei	r8,r8,2047
1000f0d4:	4000f926 	beq	r8,zero,1000f4bc <__subdf3+0x6f8>
1000f0d8:	1011883a 	mov	r8,r2
1000f0dc:	00009406 	br	1000f330 <__subdf3+0x56c>
1000f0e0:	5b84b03a 	or	r2,r11,r14
1000f0e4:	10010226 	beq	r2,zero,1000f4f0 <__subdf3+0x72c>
1000f0e8:	40bfffc4 	addi	r2,r8,-1
1000f0ec:	10000426 	beq	r2,zero,1000f100 <__subdf3+0x33c>
1000f0f0:	4201ffd8 	cmpnei	r8,r8,2047
1000f0f4:	40014126 	beq	r8,zero,1000f5fc <__subdf3+0x838>
1000f0f8:	1011883a 	mov	r8,r2
1000f0fc:	003faf06 	br	1000efbc <__subdf3+0x1f8>
1000f100:	6ba3883a 	add	r17,r13,r14
1000f104:	62c9883a 	add	r4,r12,r11
1000f108:	8b5b803a 	cmpltu	r13,r17,r13
1000f10c:	2349883a 	add	r4,r4,r13
1000f110:	2080202c 	andhi	r2,r4,128
1000f114:	1000a61e 	bne	r2,zero,1000f3b0 <__subdf3+0x5ec>
1000f118:	04000044 	movi	r16,1
1000f11c:	888001cc 	andi	r2,r17,7
1000f120:	103f7d1e 	bne	r2,zero,1000ef18 <__subdf3+0x154>
1000f124:	8822d0fa 	srli	r17,r17,3
1000f128:	2004977a 	slli	r2,r4,29
1000f12c:	2026d0fa 	srli	r19,r4,3
1000f130:	8011883a 	mov	r8,r16
1000f134:	8884b03a 	or	r2,r17,r2
1000f138:	40c1ffe0 	cmpeqi	r3,r8,2047
1000f13c:	18002d1e 	bne	r3,zero,1000f1f4 <__subdf3+0x430>
1000f140:	01000434 	movhi	r4,16
1000f144:	213fffc4 	addi	r4,r4,-1
1000f148:	9908703a 	and	r4,r19,r4
1000f14c:	4201ffcc 	andi	r8,r8,2047
1000f150:	003f8606 	br	1000ef6c <__subdf3+0x1a8>
1000f154:	5ba2b03a 	or	r17,r11,r14
1000f158:	8822c03a 	cmpne	r17,r17,zero
1000f15c:	8b63883a 	add	r17,r17,r13
1000f160:	8b49803a 	cmpltu	r4,r17,r13
1000f164:	2309883a 	add	r4,r4,r12
1000f168:	2080202c 	andhi	r2,r4,128
1000f16c:	103feb26 	beq	r2,zero,1000f11c <__subdf3+0x358>
1000f170:	84000044 	addi	r16,r16,1
1000f174:	8081ffe0 	cmpeqi	r2,r16,2047
1000f178:	10008e26 	beq	r2,zero,1000f3b4 <__subdf3+0x5f0>
1000f17c:	0201ffc4 	movi	r8,2047
1000f180:	0009883a 	mov	r4,zero
1000f184:	0005883a 	mov	r2,zero
1000f188:	003f7806 	br	1000ef6c <__subdf3+0x1a8>
1000f18c:	6010977a 	slli	r8,r12,29
1000f190:	6026d0fa 	srli	r19,r12,3
1000f194:	1000bb26 	beq	r2,zero,1000f484 <__subdf3+0x6c0>
1000f198:	01480034 	movhi	r5,8192
1000f19c:	297fffc4 	addi	r5,r5,-1
1000f1a0:	2146703a 	and	r3,r4,r5
1000f1a4:	9880022c 	andhi	r2,r19,8
1000f1a8:	1a06b03a 	or	r3,r3,r8
1000f1ac:	10000826 	beq	r2,zero,1000f1d0 <__subdf3+0x40c>
1000f1b0:	5808d0fa 	srli	r4,r11,3
1000f1b4:	2080022c 	andhi	r2,r4,8
1000f1b8:	1000051e 	bne	r2,zero,1000f1d0 <__subdf3+0x40c>
1000f1bc:	5804977a 	slli	r2,r11,29
1000f1c0:	3146703a 	and	r3,r6,r5
1000f1c4:	3825883a 	mov	r18,r7
1000f1c8:	1886b03a 	or	r3,r3,r2
1000f1cc:	2027883a 	mov	r19,r4
1000f1d0:	1804d77a 	srli	r2,r3,29
1000f1d4:	980890fa 	slli	r4,r19,3
1000f1d8:	01480034 	movhi	r5,8192
1000f1dc:	297fffc4 	addi	r5,r5,-1
1000f1e0:	1108b03a 	or	r4,r2,r4
1000f1e4:	2004977a 	slli	r2,r4,29
1000f1e8:	2026d0fa 	srli	r19,r4,3
1000f1ec:	1946703a 	and	r3,r3,r5
1000f1f0:	10c4b03a 	or	r2,r2,r3
1000f1f4:	14c6b03a 	or	r3,r2,r19
1000f1f8:	18014926 	beq	r3,zero,1000f720 <__subdf3+0x95c>
1000f1fc:	00c00434 	movhi	r3,16
1000f200:	99000234 	orhi	r4,r19,8
1000f204:	18ffffc4 	addi	r3,r3,-1
1000f208:	20c8703a 	and	r4,r4,r3
1000f20c:	0201ffc4 	movi	r8,2047
1000f210:	003f5606 	br	1000ef6c <__subdf3+0x1a8>
1000f214:	00bfe034 	movhi	r2,65408
1000f218:	10bfffc4 	addi	r2,r2,-1
1000f21c:	2088703a 	and	r4,r4,r2
1000f220:	888001cc 	andi	r2,r17,7
1000f224:	8221c83a 	sub	r16,r16,r8
1000f228:	103f3b1e 	bne	r2,zero,1000ef18 <__subdf3+0x154>
1000f22c:	003fbd06 	br	1000f124 <__subdf3+0x360>
1000f230:	8809883a 	mov	r4,r17
1000f234:	000f9680 	call	1000f968 <__clzsi2>
1000f238:	12000604 	addi	r8,r2,24
1000f23c:	40c00808 	cmpgei	r3,r8,32
1000f240:	183f1e26 	beq	r3,zero,1000eebc <__subdf3+0xf8>
1000f244:	113ffe04 	addi	r4,r2,-8
1000f248:	8908983a 	sll	r4,r17,r4
1000f24c:	0023883a 	mov	r17,zero
1000f250:	003f2006 	br	1000eed4 <__subdf3+0x110>
1000f254:	5ba2b03a 	or	r17,r11,r14
1000f258:	8822c03a 	cmpne	r17,r17,zero
1000f25c:	003f0b06 	br	1000ee8c <__subdf3+0xc8>
1000f260:	6ba3c83a 	sub	r17,r13,r14
1000f264:	62e7c83a 	sub	r19,r12,r11
1000f268:	6c49803a 	cmpltu	r4,r13,r17
1000f26c:	9927c83a 	sub	r19,r19,r4
1000f270:	9880202c 	andhi	r2,r19,128
1000f274:	1000bb1e 	bne	r2,zero,1000f564 <__subdf3+0x7a0>
1000f278:	8cc4b03a 	or	r2,r17,r19
1000f27c:	103f0b1e 	bne	r2,zero,1000eeac <__subdf3+0xe8>
1000f280:	0027883a 	mov	r19,zero
1000f284:	0025883a 	mov	r18,zero
1000f288:	003fad06 	br	1000f140 <__subdf3+0x37c>
1000f28c:	00880034 	movhi	r2,8192
1000f290:	6022977a 	slli	r17,r12,29
1000f294:	10bfffc4 	addi	r2,r2,-1
1000f298:	2088703a 	and	r4,r4,r2
1000f29c:	2444b03a 	or	r2,r4,r17
1000f2a0:	6026d0fa 	srli	r19,r12,3
1000f2a4:	003fa406 	br	1000f138 <__subdf3+0x374>
1000f2a8:	00880034 	movhi	r2,8192
1000f2ac:	6022977a 	slli	r17,r12,29
1000f2b0:	10bfffc4 	addi	r2,r2,-1
1000f2b4:	2088703a 	and	r4,r4,r2
1000f2b8:	2444b03a 	or	r2,r4,r17
1000f2bc:	6026d0fa 	srli	r19,r12,3
1000f2c0:	003fcc06 	br	1000f1f4 <__subdf3+0x430>
1000f2c4:	5411c83a 	sub	r8,r10,r16
1000f2c8:	80004f26 	beq	r16,zero,1000f408 <__subdf3+0x644>
1000f2cc:	5081ffd8 	cmpnei	r2,r10,2047
1000f2d0:	1000b426 	beq	r2,zero,1000f5a4 <__subdf3+0x7e0>
1000f2d4:	63002034 	orhi	r12,r12,128
1000f2d8:	40800e48 	cmpgei	r2,r8,57
1000f2dc:	1000c41e 	bne	r2,zero,1000f5f0 <__subdf3+0x82c>
1000f2e0:	40800808 	cmpgei	r2,r8,32
1000f2e4:	1000f91e 	bne	r2,zero,1000f6cc <__subdf3+0x908>
1000f2e8:	00800804 	movi	r2,32
1000f2ec:	1205c83a 	sub	r2,r2,r8
1000f2f0:	60a2983a 	sll	r17,r12,r2
1000f2f4:	6a06d83a 	srl	r3,r13,r8
1000f2f8:	6884983a 	sll	r2,r13,r2
1000f2fc:	6210d83a 	srl	r8,r12,r8
1000f300:	88e2b03a 	or	r17,r17,r3
1000f304:	1004c03a 	cmpne	r2,r2,zero
1000f308:	88a2b03a 	or	r17,r17,r2
1000f30c:	5a17883a 	add	r11,r11,r8
1000f310:	8ba3883a 	add	r17,r17,r14
1000f314:	8b85803a 	cmpltu	r2,r17,r14
1000f318:	12c9883a 	add	r4,r2,r11
1000f31c:	5021883a 	mov	r16,r10
1000f320:	003f9106 	br	1000f168 <__subdf3+0x3a4>
1000f324:	5081ffd8 	cmpnei	r2,r10,2047
1000f328:	10006426 	beq	r2,zero,1000f4bc <__subdf3+0x6f8>
1000f32c:	63002034 	orhi	r12,r12,128
1000f330:	40800e48 	cmpgei	r2,r8,57
1000f334:	1000751e 	bne	r2,zero,1000f50c <__subdf3+0x748>
1000f338:	40800808 	cmpgei	r2,r8,32
1000f33c:	1000b61e 	bne	r2,zero,1000f618 <__subdf3+0x854>
1000f340:	00800804 	movi	r2,32
1000f344:	1205c83a 	sub	r2,r2,r8
1000f348:	60a2983a 	sll	r17,r12,r2
1000f34c:	6a06d83a 	srl	r3,r13,r8
1000f350:	6884983a 	sll	r2,r13,r2
1000f354:	6210d83a 	srl	r8,r12,r8
1000f358:	88e2b03a 	or	r17,r17,r3
1000f35c:	1004c03a 	cmpne	r2,r2,zero
1000f360:	88a2b03a 	or	r17,r17,r2
1000f364:	5a17c83a 	sub	r11,r11,r8
1000f368:	7463c83a 	sub	r17,r14,r17
1000f36c:	7445803a 	cmpltu	r2,r14,r17
1000f370:	5889c83a 	sub	r4,r11,r2
1000f374:	5021883a 	mov	r16,r10
1000f378:	003ec706 	br	1000ee98 <__subdf3+0xd4>
1000f37c:	423ff844 	addi	r8,r8,-31
1000f380:	10c00820 	cmpeqi	r3,r2,32
1000f384:	2210d83a 	srl	r8,r4,r8
1000f388:	1800041e 	bne	r3,zero,1000f39c <__subdf3+0x5d8>
1000f38c:	00c01004 	movi	r3,64
1000f390:	1885c83a 	sub	r2,r3,r2
1000f394:	2088983a 	sll	r4,r4,r2
1000f398:	8922b03a 	or	r17,r17,r4
1000f39c:	8822c03a 	cmpne	r17,r17,zero
1000f3a0:	8a22b03a 	or	r17,r17,r8
1000f3a4:	0009883a 	mov	r4,zero
1000f3a8:	0021883a 	mov	r16,zero
1000f3ac:	003f5b06 	br	1000f11c <__subdf3+0x358>
1000f3b0:	04000084 	movi	r16,2
1000f3b4:	00bfe034 	movhi	r2,65408
1000f3b8:	10bfffc4 	addi	r2,r2,-1
1000f3bc:	2084703a 	and	r2,r4,r2
1000f3c0:	8806d07a 	srli	r3,r17,1
1000f3c4:	100a97fa 	slli	r5,r2,31
1000f3c8:	8c40004c 	andi	r17,r17,1
1000f3cc:	1c62b03a 	or	r17,r3,r17
1000f3d0:	1008d07a 	srli	r4,r2,1
1000f3d4:	2c62b03a 	or	r17,r5,r17
1000f3d8:	003ecd06 	br	1000ef10 <__subdf3+0x14c>
1000f3dc:	447ff804 	addi	r17,r8,-32
1000f3e0:	40800820 	cmpeqi	r2,r8,32
1000f3e4:	5c46d83a 	srl	r3,r11,r17
1000f3e8:	1000041e 	bne	r2,zero,1000f3fc <__subdf3+0x638>
1000f3ec:	00801004 	movi	r2,64
1000f3f0:	1205c83a 	sub	r2,r2,r8
1000f3f4:	5884983a 	sll	r2,r11,r2
1000f3f8:	709cb03a 	or	r14,r14,r2
1000f3fc:	7022c03a 	cmpne	r17,r14,zero
1000f400:	88e2b03a 	or	r17,r17,r3
1000f404:	003ea106 	br	1000ee8c <__subdf3+0xc8>
1000f408:	6344b03a 	or	r2,r12,r13
1000f40c:	1000a526 	beq	r2,zero,1000f6a4 <__subdf3+0x8e0>
1000f410:	40bfffc4 	addi	r2,r8,-1
1000f414:	1000bd26 	beq	r2,zero,1000f70c <__subdf3+0x948>
1000f418:	4201ffd8 	cmpnei	r8,r8,2047
1000f41c:	40006126 	beq	r8,zero,1000f5a4 <__subdf3+0x7e0>
1000f420:	1011883a 	mov	r8,r2
1000f424:	003fac06 	br	1000f2d8 <__subdf3+0x514>
1000f428:	00800804 	movi	r2,32
1000f42c:	1205c83a 	sub	r2,r2,r8
1000f430:	58a2983a 	sll	r17,r11,r2
1000f434:	7206d83a 	srl	r3,r14,r8
1000f438:	709c983a 	sll	r14,r14,r2
1000f43c:	5a04d83a 	srl	r2,r11,r8
1000f440:	88e2b03a 	or	r17,r17,r3
1000f444:	701cc03a 	cmpne	r14,r14,zero
1000f448:	8ba2b03a 	or	r17,r17,r14
1000f44c:	6099883a 	add	r12,r12,r2
1000f450:	003f4206 	br	1000f15c <__subdf3+0x398>
1000f454:	5808977a 	slli	r4,r11,29
1000f458:	00c80034 	movhi	r3,8192
1000f45c:	18ffffc4 	addi	r3,r3,-1
1000f460:	30cc703a 	and	r6,r6,r3
1000f464:	2184b03a 	or	r2,r4,r6
1000f468:	5826d0fa 	srli	r19,r11,3
1000f46c:	003f3206 	br	1000f138 <__subdf3+0x374>
1000f470:	10004c26 	beq	r2,zero,1000f5a4 <__subdf3+0x7e0>
1000f474:	5b9cb03a 	or	r14,r11,r14
1000f478:	6010977a 	slli	r8,r12,29
1000f47c:	6026d0fa 	srli	r19,r12,3
1000f480:	703f451e 	bne	r14,zero,1000f198 <__subdf3+0x3d4>
1000f484:	00880034 	movhi	r2,8192
1000f488:	10bfffc4 	addi	r2,r2,-1
1000f48c:	2084703a 	and	r2,r4,r2
1000f490:	1204b03a 	or	r2,r2,r8
1000f494:	003f5706 	br	1000f1f4 <__subdf3+0x430>
1000f498:	103f7926 	beq	r2,zero,1000f280 <__subdf3+0x4bc>
1000f49c:	5804977a 	slli	r2,r11,29
1000f4a0:	00c80034 	movhi	r3,8192
1000f4a4:	18ffffc4 	addi	r3,r3,-1
1000f4a8:	30c6703a 	and	r3,r6,r3
1000f4ac:	10c4b03a 	or	r2,r2,r3
1000f4b0:	5826d0fa 	srli	r19,r11,3
1000f4b4:	3825883a 	mov	r18,r7
1000f4b8:	003f2106 	br	1000f140 <__subdf3+0x37c>
1000f4bc:	5804977a 	slli	r2,r11,29
1000f4c0:	00c80034 	movhi	r3,8192
1000f4c4:	18ffffc4 	addi	r3,r3,-1
1000f4c8:	30c6703a 	and	r3,r6,r3
1000f4cc:	10c4b03a 	or	r2,r2,r3
1000f4d0:	5826d0fa 	srli	r19,r11,3
1000f4d4:	003f4706 	br	1000f1f4 <__subdf3+0x430>
1000f4d8:	6ba3c83a 	sub	r17,r13,r14
1000f4dc:	62c9c83a 	sub	r4,r12,r11
1000f4e0:	6c5b803a 	cmpltu	r13,r13,r17
1000f4e4:	2349c83a 	sub	r4,r4,r13
1000f4e8:	04000044 	movi	r16,1
1000f4ec:	003e6a06 	br	1000ee98 <__subdf3+0xd4>
1000f4f0:	6004977a 	slli	r2,r12,29
1000f4f4:	00c80034 	movhi	r3,8192
1000f4f8:	18ffffc4 	addi	r3,r3,-1
1000f4fc:	20c8703a 	and	r4,r4,r3
1000f500:	1104b03a 	or	r2,r2,r4
1000f504:	6026d0fa 	srli	r19,r12,3
1000f508:	003f0b06 	br	1000f138 <__subdf3+0x374>
1000f50c:	6366b03a 	or	r19,r12,r13
1000f510:	9822c03a 	cmpne	r17,r19,zero
1000f514:	003f9406 	br	1000f368 <__subdf3+0x5a4>
1000f518:	6004977a 	slli	r2,r12,29
1000f51c:	00c80034 	movhi	r3,8192
1000f520:	18ffffc4 	addi	r3,r3,-1
1000f524:	20c8703a 	and	r4,r4,r3
1000f528:	1104b03a 	or	r2,r2,r4
1000f52c:	6026d0fa 	srli	r19,r12,3
1000f530:	003f3006 	br	1000f1f4 <__subdf3+0x430>
1000f534:	1881ffe0 	cmpeqi	r2,r3,2047
1000f538:	103f101e 	bne	r2,zero,1000f17c <__subdf3+0x3b8>
1000f53c:	6b9d883a 	add	r14,r13,r14
1000f540:	62c9883a 	add	r4,r12,r11
1000f544:	7345803a 	cmpltu	r2,r14,r13
1000f548:	2085883a 	add	r2,r4,r2
1000f54c:	102297fa 	slli	r17,r2,31
1000f550:	701cd07a 	srli	r14,r14,1
1000f554:	1008d07a 	srli	r4,r2,1
1000f558:	1821883a 	mov	r16,r3
1000f55c:	8ba2b03a 	or	r17,r17,r14
1000f560:	003eee06 	br	1000f11c <__subdf3+0x358>
1000f564:	7363c83a 	sub	r17,r14,r13
1000f568:	5b09c83a 	sub	r4,r11,r12
1000f56c:	7467803a 	cmpltu	r19,r14,r17
1000f570:	24e7c83a 	sub	r19,r4,r19
1000f574:	3825883a 	mov	r18,r7
1000f578:	003e4c06 	br	1000eeac <__subdf3+0xe8>
1000f57c:	183f031e 	bne	r3,zero,1000f18c <__subdf3+0x3c8>
1000f580:	10005d26 	beq	r2,zero,1000f6f8 <__subdf3+0x934>
1000f584:	00880034 	movhi	r2,8192
1000f588:	5806977a 	slli	r3,r11,29
1000f58c:	10bfffc4 	addi	r2,r2,-1
1000f590:	3084703a 	and	r2,r6,r2
1000f594:	10c4b03a 	or	r2,r2,r3
1000f598:	5826d0fa 	srli	r19,r11,3
1000f59c:	3825883a 	mov	r18,r7
1000f5a0:	003f1406 	br	1000f1f4 <__subdf3+0x430>
1000f5a4:	00880034 	movhi	r2,8192
1000f5a8:	5806977a 	slli	r3,r11,29
1000f5ac:	10bfffc4 	addi	r2,r2,-1
1000f5b0:	3084703a 	and	r2,r6,r2
1000f5b4:	10c4b03a 	or	r2,r2,r3
1000f5b8:	5826d0fa 	srli	r19,r11,3
1000f5bc:	003f0d06 	br	1000f1f4 <__subdf3+0x430>
1000f5c0:	6ba3c83a 	sub	r17,r13,r14
1000f5c4:	62c5c83a 	sub	r2,r12,r11
1000f5c8:	6c49803a 	cmpltu	r4,r13,r17
1000f5cc:	1109c83a 	sub	r4,r2,r4
1000f5d0:	2080202c 	andhi	r2,r4,128
1000f5d4:	10003a26 	beq	r2,zero,1000f6c0 <__subdf3+0x8fc>
1000f5d8:	7363c83a 	sub	r17,r14,r13
1000f5dc:	5b09c83a 	sub	r4,r11,r12
1000f5e0:	745d803a 	cmpltu	r14,r14,r17
1000f5e4:	2389c83a 	sub	r4,r4,r14
1000f5e8:	3825883a 	mov	r18,r7
1000f5ec:	003e4806 	br	1000ef10 <__subdf3+0x14c>
1000f5f0:	6362b03a 	or	r17,r12,r13
1000f5f4:	8822c03a 	cmpne	r17,r17,zero
1000f5f8:	003f4506 	br	1000f310 <__subdf3+0x54c>
1000f5fc:	6004977a 	slli	r2,r12,29
1000f600:	00c80034 	movhi	r3,8192
1000f604:	18ffffc4 	addi	r3,r3,-1
1000f608:	20c6703a 	and	r3,r4,r3
1000f60c:	10c4b03a 	or	r2,r2,r3
1000f610:	6026d0fa 	srli	r19,r12,3
1000f614:	003ef706 	br	1000f1f4 <__subdf3+0x430>
1000f618:	40bff804 	addi	r2,r8,-32
1000f61c:	40c00820 	cmpeqi	r3,r8,32
1000f620:	6084d83a 	srl	r2,r12,r2
1000f624:	1800041e 	bne	r3,zero,1000f638 <__subdf3+0x874>
1000f628:	04c01004 	movi	r19,64
1000f62c:	9a11c83a 	sub	r8,r19,r8
1000f630:	6226983a 	sll	r19,r12,r8
1000f634:	6cdab03a 	or	r13,r13,r19
1000f638:	6822c03a 	cmpne	r17,r13,zero
1000f63c:	88a2b03a 	or	r17,r17,r2
1000f640:	003f4906 	br	1000f368 <__subdf3+0x5a4>
1000f644:	7363c83a 	sub	r17,r14,r13
1000f648:	5b09c83a 	sub	r4,r11,r12
1000f64c:	745d803a 	cmpltu	r14,r14,r17
1000f650:	2389c83a 	sub	r4,r4,r14
1000f654:	04000044 	movi	r16,1
1000f658:	003e0f06 	br	1000ee98 <__subdf3+0xd4>
1000f65c:	00880034 	movhi	r2,8192
1000f660:	5806977a 	slli	r3,r11,29
1000f664:	10bfffc4 	addi	r2,r2,-1
1000f668:	3084703a 	and	r2,r6,r2
1000f66c:	10c4b03a 	or	r2,r2,r3
1000f670:	5826d0fa 	srli	r19,r11,3
1000f674:	003eb206 	br	1000f140 <__subdf3+0x37c>
1000f678:	6ba3883a 	add	r17,r13,r14
1000f67c:	62c9883a 	add	r4,r12,r11
1000f680:	8b5b803a 	cmpltu	r13,r17,r13
1000f684:	2349883a 	add	r4,r4,r13
1000f688:	2080202c 	andhi	r2,r4,128
1000f68c:	103ea326 	beq	r2,zero,1000f11c <__subdf3+0x358>
1000f690:	00bfe034 	movhi	r2,65408
1000f694:	10bfffc4 	addi	r2,r2,-1
1000f698:	2088703a 	and	r4,r4,r2
1000f69c:	04000044 	movi	r16,1
1000f6a0:	003e9e06 	br	1000f11c <__subdf3+0x358>
1000f6a4:	00880034 	movhi	r2,8192
1000f6a8:	5806977a 	slli	r3,r11,29
1000f6ac:	10bfffc4 	addi	r2,r2,-1
1000f6b0:	3084703a 	and	r2,r6,r2
1000f6b4:	10c4b03a 	or	r2,r2,r3
1000f6b8:	5826d0fa 	srli	r19,r11,3
1000f6bc:	003e9e06 	br	1000f138 <__subdf3+0x374>
1000f6c0:	8904b03a 	or	r2,r17,r4
1000f6c4:	103eee26 	beq	r2,zero,1000f280 <__subdf3+0x4bc>
1000f6c8:	003e9406 	br	1000f11c <__subdf3+0x358>
1000f6cc:	40bff804 	addi	r2,r8,-32
1000f6d0:	40c00820 	cmpeqi	r3,r8,32
1000f6d4:	6084d83a 	srl	r2,r12,r2
1000f6d8:	1800041e 	bne	r3,zero,1000f6ec <__subdf3+0x928>
1000f6dc:	04c01004 	movi	r19,64
1000f6e0:	9a11c83a 	sub	r8,r19,r8
1000f6e4:	6226983a 	sll	r19,r12,r8
1000f6e8:	6cdab03a 	or	r13,r13,r19
1000f6ec:	6822c03a 	cmpne	r17,r13,zero
1000f6f0:	88a2b03a 	or	r17,r17,r2
1000f6f4:	003f0606 	br	1000f310 <__subdf3+0x54c>
1000f6f8:	04c00434 	movhi	r19,16
1000f6fc:	9cffffc4 	addi	r19,r19,-1
1000f700:	0025883a 	mov	r18,zero
1000f704:	00bfffc4 	movi	r2,-1
1000f708:	003ebc06 	br	1000f1fc <__subdf3+0x438>
1000f70c:	6ba3883a 	add	r17,r13,r14
1000f710:	62c9883a 	add	r4,r12,r11
1000f714:	8b9d803a 	cmpltu	r14,r17,r14
1000f718:	2389883a 	add	r4,r4,r14
1000f71c:	003e7c06 	br	1000f110 <__subdf3+0x34c>
1000f720:	0005883a 	mov	r2,zero
1000f724:	0201ffc4 	movi	r8,2047
1000f728:	0009883a 	mov	r4,zero
1000f72c:	003e0f06 	br	1000ef6c <__subdf3+0x1a8>

1000f730 <__unorddf2>:
1000f730:	2806d53a 	srli	r3,r5,20
1000f734:	3810d53a 	srli	r8,r7,20
1000f738:	00800434 	movhi	r2,16
1000f73c:	18c1ffcc 	andi	r3,r3,2047
1000f740:	10bfffc4 	addi	r2,r2,-1
1000f744:	18c1ffd8 	cmpnei	r3,r3,2047
1000f748:	288a703a 	and	r5,r5,r2
1000f74c:	388e703a 	and	r7,r7,r2
1000f750:	4201ffcc 	andi	r8,r8,2047
1000f754:	18000426 	beq	r3,zero,1000f768 <__unorddf2+0x38>
1000f758:	4201ffd8 	cmpnei	r8,r8,2047
1000f75c:	40000626 	beq	r8,zero,1000f778 <__unorddf2+0x48>
1000f760:	0005883a 	mov	r2,zero
1000f764:	f800283a 	ret
1000f768:	214ab03a 	or	r5,r4,r5
1000f76c:	283ffa26 	beq	r5,zero,1000f758 <__unorddf2+0x28>
1000f770:	00800044 	movi	r2,1
1000f774:	f800283a 	ret
1000f778:	398eb03a 	or	r7,r7,r6
1000f77c:	3804c03a 	cmpne	r2,r7,zero
1000f780:	f800283a 	ret

1000f784 <__fixdfsi>:
1000f784:	280cd53a 	srli	r6,r5,20
1000f788:	00c00434 	movhi	r3,16
1000f78c:	18ffffc4 	addi	r3,r3,-1
1000f790:	3181ffcc 	andi	r6,r6,2047
1000f794:	31c0ffd0 	cmplti	r7,r6,1023
1000f798:	28c6703a 	and	r3,r5,r3
1000f79c:	280ad7fa 	srli	r5,r5,31
1000f7a0:	3800061e 	bne	r7,zero,1000f7bc <__fixdfsi+0x38>
1000f7a4:	30810790 	cmplti	r2,r6,1054
1000f7a8:	1000061e 	bne	r2,zero,1000f7c4 <__fixdfsi+0x40>
1000f7ac:	00a00034 	movhi	r2,32768
1000f7b0:	10bfffc4 	addi	r2,r2,-1
1000f7b4:	2885883a 	add	r2,r5,r2
1000f7b8:	f800283a 	ret
1000f7bc:	0005883a 	mov	r2,zero
1000f7c0:	f800283a 	ret
1000f7c4:	00810cc4 	movi	r2,1075
1000f7c8:	118fc83a 	sub	r7,r2,r6
1000f7cc:	38800808 	cmpgei	r2,r7,32
1000f7d0:	18c00434 	orhi	r3,r3,16
1000f7d4:	1000071e 	bne	r2,zero,1000f7f4 <__fixdfsi+0x70>
1000f7d8:	30befb44 	addi	r2,r6,-1043
1000f7dc:	1886983a 	sll	r3,r3,r2
1000f7e0:	21c4d83a 	srl	r2,r4,r7
1000f7e4:	1884b03a 	or	r2,r3,r2
1000f7e8:	283ff526 	beq	r5,zero,1000f7c0 <__fixdfsi+0x3c>
1000f7ec:	0085c83a 	sub	r2,zero,r2
1000f7f0:	f800283a 	ret
1000f7f4:	008104c4 	movi	r2,1043
1000f7f8:	1185c83a 	sub	r2,r2,r6
1000f7fc:	1884d83a 	srl	r2,r3,r2
1000f800:	003ff906 	br	1000f7e8 <__fixdfsi+0x64>

1000f804 <__floatsidf>:
1000f804:	defffd04 	addi	sp,sp,-12
1000f808:	dfc00215 	stw	ra,8(sp)
1000f80c:	dc400115 	stw	r17,4(sp)
1000f810:	dc000015 	stw	r16,0(sp)
1000f814:	20001326 	beq	r4,zero,1000f864 <__floatsidf+0x60>
1000f818:	2021883a 	mov	r16,r4
1000f81c:	2022d7fa 	srli	r17,r4,31
1000f820:	20002116 	blt	r4,zero,1000f8a8 <__floatsidf+0xa4>
1000f824:	8009883a 	mov	r4,r16
1000f828:	000f9680 	call	1000f968 <__clzsi2>
1000f82c:	01010784 	movi	r4,1054
1000f830:	2089c83a 	sub	r4,r4,r2
1000f834:	10c002c8 	cmpgei	r3,r2,11
1000f838:	2101ffcc 	andi	r4,r4,2047
1000f83c:	18001c1e 	bne	r3,zero,1000f8b0 <__floatsidf+0xac>
1000f840:	018002c4 	movi	r6,11
1000f844:	308dc83a 	sub	r6,r6,r2
1000f848:	818ad83a 	srl	r5,r16,r6
1000f84c:	00c00434 	movhi	r3,16
1000f850:	10800544 	addi	r2,r2,21
1000f854:	18ffffc4 	addi	r3,r3,-1
1000f858:	8084983a 	sll	r2,r16,r2
1000f85c:	28ca703a 	and	r5,r5,r3
1000f860:	00000406 	br	1000f874 <__floatsidf+0x70>
1000f864:	0023883a 	mov	r17,zero
1000f868:	0009883a 	mov	r4,zero
1000f86c:	000b883a 	mov	r5,zero
1000f870:	0005883a 	mov	r2,zero
1000f874:	2008953a 	slli	r4,r4,20
1000f878:	8c403fcc 	andi	r17,r17,255
1000f87c:	01800434 	movhi	r6,16
1000f880:	31bfffc4 	addi	r6,r6,-1
1000f884:	880697fa 	slli	r3,r17,31
1000f888:	298a703a 	and	r5,r5,r6
1000f88c:	290ab03a 	or	r5,r5,r4
1000f890:	28c6b03a 	or	r3,r5,r3
1000f894:	dfc00217 	ldw	ra,8(sp)
1000f898:	dc400117 	ldw	r17,4(sp)
1000f89c:	dc000017 	ldw	r16,0(sp)
1000f8a0:	dec00304 	addi	sp,sp,12
1000f8a4:	f800283a 	ret
1000f8a8:	0121c83a 	sub	r16,zero,r4
1000f8ac:	003fdd06 	br	1000f824 <__floatsidf+0x20>
1000f8b0:	10bffd44 	addi	r2,r2,-11
1000f8b4:	808a983a 	sll	r5,r16,r2
1000f8b8:	00800434 	movhi	r2,16
1000f8bc:	10bfffc4 	addi	r2,r2,-1
1000f8c0:	288a703a 	and	r5,r5,r2
1000f8c4:	0005883a 	mov	r2,zero
1000f8c8:	003fea06 	br	1000f874 <__floatsidf+0x70>

1000f8cc <__floatunsidf>:
1000f8cc:	defffe04 	addi	sp,sp,-8
1000f8d0:	dc000015 	stw	r16,0(sp)
1000f8d4:	dfc00115 	stw	ra,4(sp)
1000f8d8:	2021883a 	mov	r16,r4
1000f8dc:	20000f26 	beq	r4,zero,1000f91c <__floatunsidf+0x50>
1000f8e0:	000f9680 	call	1000f968 <__clzsi2>
1000f8e4:	01010784 	movi	r4,1054
1000f8e8:	2089c83a 	sub	r4,r4,r2
1000f8ec:	10c002c8 	cmpgei	r3,r2,11
1000f8f0:	2101ffcc 	andi	r4,r4,2047
1000f8f4:	1800151e 	bne	r3,zero,1000f94c <__floatunsidf+0x80>
1000f8f8:	00c002c4 	movi	r3,11
1000f8fc:	1887c83a 	sub	r3,r3,r2
1000f900:	80c6d83a 	srl	r3,r16,r3
1000f904:	01400434 	movhi	r5,16
1000f908:	10800544 	addi	r2,r2,21
1000f90c:	297fffc4 	addi	r5,r5,-1
1000f910:	80a0983a 	sll	r16,r16,r2
1000f914:	1944703a 	and	r2,r3,r5
1000f918:	00000206 	br	1000f924 <__floatunsidf+0x58>
1000f91c:	0009883a 	mov	r4,zero
1000f920:	0005883a 	mov	r2,zero
1000f924:	2008953a 	slli	r4,r4,20
1000f928:	00c00434 	movhi	r3,16
1000f92c:	18ffffc4 	addi	r3,r3,-1
1000f930:	10c6703a 	and	r3,r2,r3
1000f934:	1906b03a 	or	r3,r3,r4
1000f938:	8005883a 	mov	r2,r16
1000f93c:	dfc00117 	ldw	ra,4(sp)
1000f940:	dc000017 	ldw	r16,0(sp)
1000f944:	dec00204 	addi	sp,sp,8
1000f948:	f800283a 	ret
1000f94c:	10bffd44 	addi	r2,r2,-11
1000f950:	8084983a 	sll	r2,r16,r2
1000f954:	00c00434 	movhi	r3,16
1000f958:	18ffffc4 	addi	r3,r3,-1
1000f95c:	10c4703a 	and	r2,r2,r3
1000f960:	0021883a 	mov	r16,zero
1000f964:	003fef06 	br	1000f924 <__floatunsidf+0x58>

1000f968 <__clzsi2>:
1000f968:	00bfffd4 	movui	r2,65535
1000f96c:	11000b36 	bltu	r2,r4,1000f99c <__clzsi2+0x34>
1000f970:	20804030 	cmpltui	r2,r4,256
1000f974:	1000071e 	bne	r2,zero,1000f994 <__clzsi2+0x2c>
1000f978:	2008d23a 	srli	r4,r4,8
1000f97c:	01400604 	movi	r5,24
1000f980:	00c40074 	movhi	r3,4097
1000f984:	20c7883a 	add	r3,r4,r3
1000f988:	188be043 	ldbu	r2,12161(r3)
1000f98c:	2885c83a 	sub	r2,r5,r2
1000f990:	f800283a 	ret
1000f994:	01400804 	movi	r5,32
1000f998:	003ff906 	br	1000f980 <__clzsi2+0x18>
1000f99c:	00804034 	movhi	r2,256
1000f9a0:	20800336 	bltu	r4,r2,1000f9b0 <__clzsi2+0x48>
1000f9a4:	2008d63a 	srli	r4,r4,24
1000f9a8:	01400204 	movi	r5,8
1000f9ac:	003ff406 	br	1000f980 <__clzsi2+0x18>
1000f9b0:	2008d43a 	srli	r4,r4,16
1000f9b4:	01400404 	movi	r5,16
1000f9b8:	003ff106 	br	1000f980 <__clzsi2+0x18>

1000f9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f9bc:	defffe04 	addi	sp,sp,-8
1000f9c0:	dfc00115 	stw	ra,4(sp)
1000f9c4:	df000015 	stw	fp,0(sp)
1000f9c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f9cc:	d0a00a17 	ldw	r2,-32728(gp)
1000f9d0:	10000326 	beq	r2,zero,1000f9e0 <alt_get_errno+0x24>
1000f9d4:	d0a00a17 	ldw	r2,-32728(gp)
1000f9d8:	103ee83a 	callr	r2
1000f9dc:	00000106 	br	1000f9e4 <alt_get_errno+0x28>
1000f9e0:	d0a89a04 	addi	r2,gp,-23960
}
1000f9e4:	e037883a 	mov	sp,fp
1000f9e8:	dfc00117 	ldw	ra,4(sp)
1000f9ec:	df000017 	ldw	fp,0(sp)
1000f9f0:	dec00204 	addi	sp,sp,8
1000f9f4:	f800283a 	ret

1000f9f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f9f8:	defffb04 	addi	sp,sp,-20
1000f9fc:	dfc00415 	stw	ra,16(sp)
1000fa00:	df000315 	stw	fp,12(sp)
1000fa04:	df000304 	addi	fp,sp,12
1000fa08:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000fa0c:	e0bffd17 	ldw	r2,-12(fp)
1000fa10:	10000616 	blt	r2,zero,1000fa2c <close+0x34>
1000fa14:	e0bffd17 	ldw	r2,-12(fp)
1000fa18:	10c00324 	muli	r3,r2,12
1000fa1c:	00840074 	movhi	r2,4097
1000fa20:	10902e04 	addi	r2,r2,16568
1000fa24:	1885883a 	add	r2,r3,r2
1000fa28:	00000106 	br	1000fa30 <close+0x38>
1000fa2c:	0005883a 	mov	r2,zero
1000fa30:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
1000fa34:	e0bfff17 	ldw	r2,-4(fp)
1000fa38:	10001926 	beq	r2,zero,1000faa0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000fa3c:	e0bfff17 	ldw	r2,-4(fp)
1000fa40:	10800017 	ldw	r2,0(r2)
1000fa44:	10800417 	ldw	r2,16(r2)
1000fa48:	10000626 	beq	r2,zero,1000fa64 <close+0x6c>
1000fa4c:	e0bfff17 	ldw	r2,-4(fp)
1000fa50:	10800017 	ldw	r2,0(r2)
1000fa54:	10800417 	ldw	r2,16(r2)
1000fa58:	e13fff17 	ldw	r4,-4(fp)
1000fa5c:	103ee83a 	callr	r2
1000fa60:	00000106 	br	1000fa68 <close+0x70>
1000fa64:	0005883a 	mov	r2,zero
1000fa68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000fa6c:	e13ffd17 	ldw	r4,-12(fp)
1000fa70:	00100b80 	call	100100b8 <alt_release_fd>
    if (rval < 0)
1000fa74:	e0bffe17 	ldw	r2,-8(fp)
1000fa78:	1000070e 	bge	r2,zero,1000fa98 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000fa7c:	000f9bc0 	call	1000f9bc <alt_get_errno>
1000fa80:	1007883a 	mov	r3,r2
1000fa84:	e0bffe17 	ldw	r2,-8(fp)
1000fa88:	0085c83a 	sub	r2,zero,r2
1000fa8c:	18800015 	stw	r2,0(r3)
      return -1;
1000fa90:	00bfffc4 	movi	r2,-1
1000fa94:	00000706 	br	1000fab4 <close+0xbc>
    }
    return 0;
1000fa98:	0005883a 	mov	r2,zero
1000fa9c:	00000506 	br	1000fab4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000faa0:	000f9bc0 	call	1000f9bc <alt_get_errno>
1000faa4:	1007883a 	mov	r3,r2
1000faa8:	00801444 	movi	r2,81
1000faac:	18800015 	stw	r2,0(r3)
    return -1;
1000fab0:	00bfffc4 	movi	r2,-1
  }
}
1000fab4:	e037883a 	mov	sp,fp
1000fab8:	dfc00117 	ldw	ra,4(sp)
1000fabc:	df000017 	ldw	fp,0(sp)
1000fac0:	dec00204 	addi	sp,sp,8
1000fac4:	f800283a 	ret

1000fac8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fac8:	defffc04 	addi	sp,sp,-16
1000facc:	df000315 	stw	fp,12(sp)
1000fad0:	df000304 	addi	fp,sp,12
1000fad4:	e13fff15 	stw	r4,-4(fp)
1000fad8:	e17ffe15 	stw	r5,-8(fp)
1000fadc:	e1bffd15 	stw	r6,-12(fp)
  return len;
1000fae0:	e0bffd17 	ldw	r2,-12(fp)
}
1000fae4:	e037883a 	mov	sp,fp
1000fae8:	df000017 	ldw	fp,0(sp)
1000faec:	dec00104 	addi	sp,sp,4
1000faf0:	f800283a 	ret

1000faf4 <alt_get_errno>:
{
1000faf4:	defffe04 	addi	sp,sp,-8
1000faf8:	dfc00115 	stw	ra,4(sp)
1000fafc:	df000015 	stw	fp,0(sp)
1000fb00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fb04:	d0a00a17 	ldw	r2,-32728(gp)
1000fb08:	10000326 	beq	r2,zero,1000fb18 <alt_get_errno+0x24>
1000fb0c:	d0a00a17 	ldw	r2,-32728(gp)
1000fb10:	103ee83a 	callr	r2
1000fb14:	00000106 	br	1000fb1c <alt_get_errno+0x28>
1000fb18:	d0a89a04 	addi	r2,gp,-23960
}
1000fb1c:	e037883a 	mov	sp,fp
1000fb20:	dfc00117 	ldw	ra,4(sp)
1000fb24:	df000017 	ldw	fp,0(sp)
1000fb28:	dec00204 	addi	sp,sp,8
1000fb2c:	f800283a 	ret

1000fb30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000fb30:	defffb04 	addi	sp,sp,-20
1000fb34:	dfc00415 	stw	ra,16(sp)
1000fb38:	df000315 	stw	fp,12(sp)
1000fb3c:	df000304 	addi	fp,sp,12
1000fb40:	e13ffe15 	stw	r4,-8(fp)
1000fb44:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fb48:	e0bffe17 	ldw	r2,-8(fp)
1000fb4c:	10000616 	blt	r2,zero,1000fb68 <fstat+0x38>
1000fb50:	e0bffe17 	ldw	r2,-8(fp)
1000fb54:	10c00324 	muli	r3,r2,12
1000fb58:	00840074 	movhi	r2,4097
1000fb5c:	10902e04 	addi	r2,r2,16568
1000fb60:	1885883a 	add	r2,r3,r2
1000fb64:	00000106 	br	1000fb6c <fstat+0x3c>
1000fb68:	0005883a 	mov	r2,zero
1000fb6c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000fb70:	e0bfff17 	ldw	r2,-4(fp)
1000fb74:	10001026 	beq	r2,zero,1000fbb8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000fb78:	e0bfff17 	ldw	r2,-4(fp)
1000fb7c:	10800017 	ldw	r2,0(r2)
1000fb80:	10800817 	ldw	r2,32(r2)
1000fb84:	10000726 	beq	r2,zero,1000fba4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000fb88:	e0bfff17 	ldw	r2,-4(fp)
1000fb8c:	10800017 	ldw	r2,0(r2)
1000fb90:	10800817 	ldw	r2,32(r2)
1000fb94:	e17ffd17 	ldw	r5,-12(fp)
1000fb98:	e13fff17 	ldw	r4,-4(fp)
1000fb9c:	103ee83a 	callr	r2
1000fba0:	00000a06 	br	1000fbcc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000fba4:	e0bffd17 	ldw	r2,-12(fp)
1000fba8:	00c80004 	movi	r3,8192
1000fbac:	10c00115 	stw	r3,4(r2)
      return 0;
1000fbb0:	0005883a 	mov	r2,zero
1000fbb4:	00000506 	br	1000fbcc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fbb8:	000faf40 	call	1000faf4 <alt_get_errno>
1000fbbc:	1007883a 	mov	r3,r2
1000fbc0:	00801444 	movi	r2,81
1000fbc4:	18800015 	stw	r2,0(r3)
    return -1;
1000fbc8:	00bfffc4 	movi	r2,-1
  }
}
1000fbcc:	e037883a 	mov	sp,fp
1000fbd0:	dfc00117 	ldw	ra,4(sp)
1000fbd4:	df000017 	ldw	fp,0(sp)
1000fbd8:	dec00204 	addi	sp,sp,8
1000fbdc:	f800283a 	ret

1000fbe0 <alt_get_errno>:
{
1000fbe0:	defffe04 	addi	sp,sp,-8
1000fbe4:	dfc00115 	stw	ra,4(sp)
1000fbe8:	df000015 	stw	fp,0(sp)
1000fbec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fbf0:	d0a00a17 	ldw	r2,-32728(gp)
1000fbf4:	10000326 	beq	r2,zero,1000fc04 <alt_get_errno+0x24>
1000fbf8:	d0a00a17 	ldw	r2,-32728(gp)
1000fbfc:	103ee83a 	callr	r2
1000fc00:	00000106 	br	1000fc08 <alt_get_errno+0x28>
1000fc04:	d0a89a04 	addi	r2,gp,-23960
}
1000fc08:	e037883a 	mov	sp,fp
1000fc0c:	dfc00117 	ldw	ra,4(sp)
1000fc10:	df000017 	ldw	fp,0(sp)
1000fc14:	dec00204 	addi	sp,sp,8
1000fc18:	f800283a 	ret

1000fc1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fc1c:	deffea04 	addi	sp,sp,-88
1000fc20:	dfc01515 	stw	ra,84(sp)
1000fc24:	df001415 	stw	fp,80(sp)
1000fc28:	df001404 	addi	fp,sp,80
1000fc2c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fc30:	e0bfec17 	ldw	r2,-80(fp)
1000fc34:	10000616 	blt	r2,zero,1000fc50 <isatty+0x34>
1000fc38:	e0bfec17 	ldw	r2,-80(fp)
1000fc3c:	10c00324 	muli	r3,r2,12
1000fc40:	00840074 	movhi	r2,4097
1000fc44:	10902e04 	addi	r2,r2,16568
1000fc48:	1885883a 	add	r2,r3,r2
1000fc4c:	00000106 	br	1000fc54 <isatty+0x38>
1000fc50:	0005883a 	mov	r2,zero
1000fc54:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000fc58:	e0bfff17 	ldw	r2,-4(fp)
1000fc5c:	10000e26 	beq	r2,zero,1000fc98 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000fc60:	e0bfff17 	ldw	r2,-4(fp)
1000fc64:	10800017 	ldw	r2,0(r2)
1000fc68:	10800817 	ldw	r2,32(r2)
1000fc6c:	1000021e 	bne	r2,zero,1000fc78 <isatty+0x5c>
    {
      return 1;
1000fc70:	00800044 	movi	r2,1
1000fc74:	00000d06 	br	1000fcac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fc78:	e0bfed04 	addi	r2,fp,-76
1000fc7c:	100b883a 	mov	r5,r2
1000fc80:	e13fec17 	ldw	r4,-80(fp)
1000fc84:	000fb300 	call	1000fb30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fc88:	e0bfee17 	ldw	r2,-72(fp)
1000fc8c:	10880020 	cmpeqi	r2,r2,8192
1000fc90:	10803fcc 	andi	r2,r2,255
1000fc94:	00000506 	br	1000fcac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fc98:	000fbe00 	call	1000fbe0 <alt_get_errno>
1000fc9c:	1007883a 	mov	r3,r2
1000fca0:	00801444 	movi	r2,81
1000fca4:	18800015 	stw	r2,0(r3)
    return 0;
1000fca8:	0005883a 	mov	r2,zero
  }
}
1000fcac:	e037883a 	mov	sp,fp
1000fcb0:	dfc00117 	ldw	ra,4(sp)
1000fcb4:	df000017 	ldw	fp,0(sp)
1000fcb8:	dec00204 	addi	sp,sp,8
1000fcbc:	f800283a 	ret

1000fcc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000fcc0:	defffc04 	addi	sp,sp,-16
1000fcc4:	df000315 	stw	fp,12(sp)
1000fcc8:	df000304 	addi	fp,sp,12
1000fccc:	e13fff15 	stw	r4,-4(fp)
1000fcd0:	e17ffe15 	stw	r5,-8(fp)
1000fcd4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
1000fcd8:	e0fffe17 	ldw	r3,-8(fp)
1000fcdc:	e0bfff17 	ldw	r2,-4(fp)
1000fce0:	18800c26 	beq	r3,r2,1000fd14 <alt_load_section+0x54>
  {
    while( to != end )
1000fce4:	00000806 	br	1000fd08 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000fce8:	e0ffff17 	ldw	r3,-4(fp)
1000fcec:	18800104 	addi	r2,r3,4
1000fcf0:	e0bfff15 	stw	r2,-4(fp)
1000fcf4:	e0bffe17 	ldw	r2,-8(fp)
1000fcf8:	11000104 	addi	r4,r2,4
1000fcfc:	e13ffe15 	stw	r4,-8(fp)
1000fd00:	18c00017 	ldw	r3,0(r3)
1000fd04:	10c00015 	stw	r3,0(r2)
    while( to != end )
1000fd08:	e0fffe17 	ldw	r3,-8(fp)
1000fd0c:	e0bffd17 	ldw	r2,-12(fp)
1000fd10:	18bff51e 	bne	r3,r2,1000fce8 <alt_load_section+0x28>
    }
  }
}
1000fd14:	0001883a 	nop
1000fd18:	e037883a 	mov	sp,fp
1000fd1c:	df000017 	ldw	fp,0(sp)
1000fd20:	dec00104 	addi	sp,sp,4
1000fd24:	f800283a 	ret

1000fd28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000fd28:	defffe04 	addi	sp,sp,-8
1000fd2c:	dfc00115 	stw	ra,4(sp)
1000fd30:	df000015 	stw	fp,0(sp)
1000fd34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000fd38:	01840074 	movhi	r6,4097
1000fd3c:	3194b504 	addi	r6,r6,21204
1000fd40:	01440074 	movhi	r5,4097
1000fd44:	294c2e04 	addi	r5,r5,12472
1000fd48:	01040074 	movhi	r4,4097
1000fd4c:	2114b504 	addi	r4,r4,21204
1000fd50:	000fcc00 	call	1000fcc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fd54:	01840034 	movhi	r6,4096
1000fd58:	31808e04 	addi	r6,r6,568
1000fd5c:	01440034 	movhi	r5,4096
1000fd60:	29400804 	addi	r5,r5,32
1000fd64:	01040034 	movhi	r4,4096
1000fd68:	21000804 	addi	r4,r4,32
1000fd6c:	000fcc00 	call	1000fcc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fd70:	01840074 	movhi	r6,4097
1000fd74:	318c2e04 	addi	r6,r6,12472
1000fd78:	01440074 	movhi	r5,4097
1000fd7c:	29486604 	addi	r5,r5,8600
1000fd80:	01040074 	movhi	r4,4097
1000fd84:	21086604 	addi	r4,r4,8600
1000fd88:	000fcc00 	call	1000fcc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fd8c:	001119c0 	call	1001119c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fd90:	00113840 	call	10011384 <alt_icache_flush_all>
}
1000fd94:	0001883a 	nop
1000fd98:	e037883a 	mov	sp,fp
1000fd9c:	dfc00117 	ldw	ra,4(sp)
1000fda0:	df000017 	ldw	fp,0(sp)
1000fda4:	dec00204 	addi	sp,sp,8
1000fda8:	f800283a 	ret

1000fdac <alt_get_errno>:
{
1000fdac:	defffe04 	addi	sp,sp,-8
1000fdb0:	dfc00115 	stw	ra,4(sp)
1000fdb4:	df000015 	stw	fp,0(sp)
1000fdb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fdbc:	d0a00a17 	ldw	r2,-32728(gp)
1000fdc0:	10000326 	beq	r2,zero,1000fdd0 <alt_get_errno+0x24>
1000fdc4:	d0a00a17 	ldw	r2,-32728(gp)
1000fdc8:	103ee83a 	callr	r2
1000fdcc:	00000106 	br	1000fdd4 <alt_get_errno+0x28>
1000fdd0:	d0a89a04 	addi	r2,gp,-23960
}
1000fdd4:	e037883a 	mov	sp,fp
1000fdd8:	dfc00117 	ldw	ra,4(sp)
1000fddc:	df000017 	ldw	fp,0(sp)
1000fde0:	dec00204 	addi	sp,sp,8
1000fde4:	f800283a 	ret

1000fde8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000fde8:	defff904 	addi	sp,sp,-28
1000fdec:	dfc00615 	stw	ra,24(sp)
1000fdf0:	df000515 	stw	fp,20(sp)
1000fdf4:	df000504 	addi	fp,sp,20
1000fdf8:	e13ffd15 	stw	r4,-12(fp)
1000fdfc:	e17ffc15 	stw	r5,-16(fp)
1000fe00:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fe04:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fe08:	e0bffd17 	ldw	r2,-12(fp)
1000fe0c:	10000616 	blt	r2,zero,1000fe28 <lseek+0x40>
1000fe10:	e0bffd17 	ldw	r2,-12(fp)
1000fe14:	10c00324 	muli	r3,r2,12
1000fe18:	00840074 	movhi	r2,4097
1000fe1c:	10902e04 	addi	r2,r2,16568
1000fe20:	1885883a 	add	r2,r3,r2
1000fe24:	00000106 	br	1000fe2c <lseek+0x44>
1000fe28:	0005883a 	mov	r2,zero
1000fe2c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
1000fe30:	e0bffe17 	ldw	r2,-8(fp)
1000fe34:	10001026 	beq	r2,zero,1000fe78 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fe38:	e0bffe17 	ldw	r2,-8(fp)
1000fe3c:	10800017 	ldw	r2,0(r2)
1000fe40:	10800717 	ldw	r2,28(r2)
1000fe44:	10000926 	beq	r2,zero,1000fe6c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fe48:	e0bffe17 	ldw	r2,-8(fp)
1000fe4c:	10800017 	ldw	r2,0(r2)
1000fe50:	10800717 	ldw	r2,28(r2)
1000fe54:	e1bffb17 	ldw	r6,-20(fp)
1000fe58:	e17ffc17 	ldw	r5,-16(fp)
1000fe5c:	e13ffe17 	ldw	r4,-8(fp)
1000fe60:	103ee83a 	callr	r2
1000fe64:	e0bfff15 	stw	r2,-4(fp)
1000fe68:	00000506 	br	1000fe80 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fe6c:	00bfde84 	movi	r2,-134
1000fe70:	e0bfff15 	stw	r2,-4(fp)
1000fe74:	00000206 	br	1000fe80 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fe78:	00bfebc4 	movi	r2,-81
1000fe7c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
1000fe80:	e0bfff17 	ldw	r2,-4(fp)
1000fe84:	1000070e 	bge	r2,zero,1000fea4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000fe88:	000fdac0 	call	1000fdac <alt_get_errno>
1000fe8c:	1007883a 	mov	r3,r2
1000fe90:	e0bfff17 	ldw	r2,-4(fp)
1000fe94:	0085c83a 	sub	r2,zero,r2
1000fe98:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fe9c:	00bfffc4 	movi	r2,-1
1000fea0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
1000fea4:	e0bfff17 	ldw	r2,-4(fp)
}
1000fea8:	e037883a 	mov	sp,fp
1000feac:	dfc00117 	ldw	ra,4(sp)
1000feb0:	df000017 	ldw	fp,0(sp)
1000feb4:	dec00204 	addi	sp,sp,8
1000feb8:	f800283a 	ret

1000febc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000febc:	defffd04 	addi	sp,sp,-12
1000fec0:	dfc00215 	stw	ra,8(sp)
1000fec4:	df000115 	stw	fp,4(sp)
1000fec8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fecc:	0009883a 	mov	r4,zero
1000fed0:	00103580 	call	10010358 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fed4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fed8:	00103900 	call	10010390 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fedc:	01840074 	movhi	r6,4097
1000fee0:	318c2404 	addi	r6,r6,12432
1000fee4:	01440074 	movhi	r5,4097
1000fee8:	294c2404 	addi	r5,r5,12432
1000feec:	01040074 	movhi	r4,4097
1000fef0:	210c2404 	addi	r4,r4,12432
1000fef4:	00116fc0 	call	100116fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fef8:	00112c40 	call	100112c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fefc:	01040074 	movhi	r4,4097
1000ff00:	2104c904 	addi	r4,r4,4900
1000ff04:	0011ee80 	call	10011ee8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000ff08:	d0a89c17 	ldw	r2,-23952(gp)
1000ff0c:	d0e89d17 	ldw	r3,-23948(gp)
1000ff10:	d1289e17 	ldw	r4,-23944(gp)
1000ff14:	200d883a 	mov	r6,r4
1000ff18:	180b883a 	mov	r5,r3
1000ff1c:	1009883a 	mov	r4,r2
1000ff20:	000124c0 	call	1000124c <main>
1000ff24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000ff28:	01000044 	movi	r4,1
1000ff2c:	000f9f80 	call	1000f9f8 <close>
  exit (result);
1000ff30:	e13fff17 	ldw	r4,-4(fp)
1000ff34:	0011efc0 	call	10011efc <exit>

1000ff38 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ff38:	defffe04 	addi	sp,sp,-8
1000ff3c:	df000115 	stw	fp,4(sp)
1000ff40:	df000104 	addi	fp,sp,4
1000ff44:	e13fff15 	stw	r4,-4(fp)
}
1000ff48:	0001883a 	nop
1000ff4c:	e037883a 	mov	sp,fp
1000ff50:	df000017 	ldw	fp,0(sp)
1000ff54:	dec00104 	addi	sp,sp,4
1000ff58:	f800283a 	ret

1000ff5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000ff5c:	defffe04 	addi	sp,sp,-8
1000ff60:	df000115 	stw	fp,4(sp)
1000ff64:	df000104 	addi	fp,sp,4
1000ff68:	e13fff15 	stw	r4,-4(fp)
}
1000ff6c:	0001883a 	nop
1000ff70:	e037883a 	mov	sp,fp
1000ff74:	df000017 	ldw	fp,0(sp)
1000ff78:	dec00104 	addi	sp,sp,4
1000ff7c:	f800283a 	ret

1000ff80 <alt_get_errno>:
{
1000ff80:	defffe04 	addi	sp,sp,-8
1000ff84:	dfc00115 	stw	ra,4(sp)
1000ff88:	df000015 	stw	fp,0(sp)
1000ff8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ff90:	d0a00a17 	ldw	r2,-32728(gp)
1000ff94:	10000326 	beq	r2,zero,1000ffa4 <alt_get_errno+0x24>
1000ff98:	d0a00a17 	ldw	r2,-32728(gp)
1000ff9c:	103ee83a 	callr	r2
1000ffa0:	00000106 	br	1000ffa8 <alt_get_errno+0x28>
1000ffa4:	d0a89a04 	addi	r2,gp,-23960
}
1000ffa8:	e037883a 	mov	sp,fp
1000ffac:	dfc00117 	ldw	ra,4(sp)
1000ffb0:	df000017 	ldw	fp,0(sp)
1000ffb4:	dec00204 	addi	sp,sp,8
1000ffb8:	f800283a 	ret

1000ffbc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000ffbc:	defff904 	addi	sp,sp,-28
1000ffc0:	dfc00615 	stw	ra,24(sp)
1000ffc4:	df000515 	stw	fp,20(sp)
1000ffc8:	df000504 	addi	fp,sp,20
1000ffcc:	e13ffd15 	stw	r4,-12(fp)
1000ffd0:	e17ffc15 	stw	r5,-16(fp)
1000ffd4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ffd8:	e0bffd17 	ldw	r2,-12(fp)
1000ffdc:	10000616 	blt	r2,zero,1000fff8 <read+0x3c>
1000ffe0:	e0bffd17 	ldw	r2,-12(fp)
1000ffe4:	10c00324 	muli	r3,r2,12
1000ffe8:	00840074 	movhi	r2,4097
1000ffec:	10902e04 	addi	r2,r2,16568
1000fff0:	1885883a 	add	r2,r3,r2
1000fff4:	00000106 	br	1000fffc <read+0x40>
1000fff8:	0005883a 	mov	r2,zero
1000fffc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
10010000:	e0bfff17 	ldw	r2,-4(fp)
10010004:	10002226 	beq	r2,zero,10010090 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010008:	e0bfff17 	ldw	r2,-4(fp)
1001000c:	10800217 	ldw	r2,8(r2)
10010010:	108000cc 	andi	r2,r2,3
10010014:	10800060 	cmpeqi	r2,r2,1
10010018:	1000181e 	bne	r2,zero,1001007c <read+0xc0>
        (fd->dev->read))
1001001c:	e0bfff17 	ldw	r2,-4(fp)
10010020:	10800017 	ldw	r2,0(r2)
10010024:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010028:	10001426 	beq	r2,zero,1001007c <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1001002c:	e0bfff17 	ldw	r2,-4(fp)
10010030:	10800017 	ldw	r2,0(r2)
10010034:	10800517 	ldw	r2,20(r2)
10010038:	e0fffb17 	ldw	r3,-20(fp)
1001003c:	180d883a 	mov	r6,r3
10010040:	e17ffc17 	ldw	r5,-16(fp)
10010044:	e13fff17 	ldw	r4,-4(fp)
10010048:	103ee83a 	callr	r2
1001004c:	e0bffe15 	stw	r2,-8(fp)
10010050:	e0bffe17 	ldw	r2,-8(fp)
10010054:	1000070e 	bge	r2,zero,10010074 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10010058:	000ff800 	call	1000ff80 <alt_get_errno>
1001005c:	1007883a 	mov	r3,r2
10010060:	e0bffe17 	ldw	r2,-8(fp)
10010064:	0085c83a 	sub	r2,zero,r2
10010068:	18800015 	stw	r2,0(r3)
          return -1;
1001006c:	00bfffc4 	movi	r2,-1
10010070:	00000c06 	br	100100a4 <read+0xe8>
        }
        return rval;
10010074:	e0bffe17 	ldw	r2,-8(fp)
10010078:	00000a06 	br	100100a4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001007c:	000ff800 	call	1000ff80 <alt_get_errno>
10010080:	1007883a 	mov	r3,r2
10010084:	00800344 	movi	r2,13
10010088:	18800015 	stw	r2,0(r3)
1001008c:	00000406 	br	100100a0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010090:	000ff800 	call	1000ff80 <alt_get_errno>
10010094:	1007883a 	mov	r3,r2
10010098:	00801444 	movi	r2,81
1001009c:	18800015 	stw	r2,0(r3)
  }
  return -1;
100100a0:	00bfffc4 	movi	r2,-1
}
100100a4:	e037883a 	mov	sp,fp
100100a8:	dfc00117 	ldw	ra,4(sp)
100100ac:	df000017 	ldw	fp,0(sp)
100100b0:	dec00204 	addi	sp,sp,8
100100b4:	f800283a 	ret

100100b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100100b8:	defffe04 	addi	sp,sp,-8
100100bc:	df000115 	stw	fp,4(sp)
100100c0:	df000104 	addi	fp,sp,4
100100c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
100100c8:	e0bfff17 	ldw	r2,-4(fp)
100100cc:	108000d0 	cmplti	r2,r2,3
100100d0:	10000a1e 	bne	r2,zero,100100fc <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
100100d4:	e0bfff17 	ldw	r2,-4(fp)
100100d8:	10c00324 	muli	r3,r2,12
100100dc:	00840074 	movhi	r2,4097
100100e0:	1885883a 	add	r2,r3,r2
100100e4:	10103015 	stw	zero,16576(r2)
    alt_fd_list[fd].dev      = 0;
100100e8:	e0bfff17 	ldw	r2,-4(fp)
100100ec:	10c00324 	muli	r3,r2,12
100100f0:	00840074 	movhi	r2,4097
100100f4:	1885883a 	add	r2,r3,r2
100100f8:	10102e15 	stw	zero,16568(r2)
  }
}
100100fc:	0001883a 	nop
10010100:	e037883a 	mov	sp,fp
10010104:	df000017 	ldw	fp,0(sp)
10010108:	dec00104 	addi	sp,sp,4
1001010c:	f800283a 	ret

10010110 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010110:	defff904 	addi	sp,sp,-28
10010114:	df000615 	stw	fp,24(sp)
10010118:	df000604 	addi	fp,sp,24
1001011c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
10010120:	0005303a 	rdctl	r2,status
10010124:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010128:	e0fffd17 	ldw	r3,-12(fp)
1001012c:	00bfff84 	movi	r2,-2
10010130:	1884703a 	and	r2,r3,r2
10010134:	1001703a 	wrctl	status,r2
  return context;
10010138:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1001013c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010140:	d0a00b17 	ldw	r2,-32724(gp)
10010144:	10c000c4 	addi	r3,r2,3
10010148:	00bfff04 	movi	r2,-4
1001014c:	1884703a 	and	r2,r3,r2
10010150:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010154:	d0e00b17 	ldw	r3,-32724(gp)
10010158:	e0bffa17 	ldw	r2,-24(fp)
1001015c:	1887883a 	add	r3,r3,r2
10010160:	00860034 	movhi	r2,6144
10010164:	10800004 	addi	r2,r2,0
10010168:	10c0062e 	bgeu	r2,r3,10010184 <sbrk+0x74>
1001016c:	e0bfff17 	ldw	r2,-4(fp)
10010170:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10010174:	e0bffc17 	ldw	r2,-16(fp)
10010178:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001017c:	00bfffc4 	movi	r2,-1
10010180:	00000b06 	br	100101b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010184:	d0a00b17 	ldw	r2,-32724(gp)
10010188:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
1001018c:	d0e00b17 	ldw	r3,-32724(gp)
10010190:	e0bffa17 	ldw	r2,-24(fp)
10010194:	1885883a 	add	r2,r3,r2
10010198:	d0a00b15 	stw	r2,-32724(gp)
1001019c:	e0bfff17 	ldw	r2,-4(fp)
100101a0:	e0bffb15 	stw	r2,-20(fp)
100101a4:	e0bffb17 	ldw	r2,-20(fp)
100101a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100101ac:	e0bffe17 	ldw	r2,-8(fp)
} 
100101b0:	e037883a 	mov	sp,fp
100101b4:	df000017 	ldw	fp,0(sp)
100101b8:	dec00104 	addi	sp,sp,4
100101bc:	f800283a 	ret

100101c0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100101c0:	defffd04 	addi	sp,sp,-12
100101c4:	dfc00215 	stw	ra,8(sp)
100101c8:	df000115 	stw	fp,4(sp)
100101cc:	df000104 	addi	fp,sp,4
100101d0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100101d4:	e13fff17 	ldw	r4,-4(fp)
100101d8:	00110740 	call	10011074 <alt_busy_sleep>
}
100101dc:	e037883a 	mov	sp,fp
100101e0:	dfc00117 	ldw	ra,4(sp)
100101e4:	df000017 	ldw	fp,0(sp)
100101e8:	dec00204 	addi	sp,sp,8
100101ec:	f800283a 	ret

100101f0 <alt_get_errno>:
{
100101f0:	defffe04 	addi	sp,sp,-8
100101f4:	dfc00115 	stw	ra,4(sp)
100101f8:	df000015 	stw	fp,0(sp)
100101fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010200:	d0a00a17 	ldw	r2,-32728(gp)
10010204:	10000326 	beq	r2,zero,10010214 <alt_get_errno+0x24>
10010208:	d0a00a17 	ldw	r2,-32728(gp)
1001020c:	103ee83a 	callr	r2
10010210:	00000106 	br	10010218 <alt_get_errno+0x28>
10010214:	d0a89a04 	addi	r2,gp,-23960
}
10010218:	e037883a 	mov	sp,fp
1001021c:	dfc00117 	ldw	ra,4(sp)
10010220:	df000017 	ldw	fp,0(sp)
10010224:	dec00204 	addi	sp,sp,8
10010228:	f800283a 	ret

1001022c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1001022c:	defff904 	addi	sp,sp,-28
10010230:	dfc00615 	stw	ra,24(sp)
10010234:	df000515 	stw	fp,20(sp)
10010238:	df000504 	addi	fp,sp,20
1001023c:	e13ffd15 	stw	r4,-12(fp)
10010240:	e17ffc15 	stw	r5,-16(fp)
10010244:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010248:	e0bffd17 	ldw	r2,-12(fp)
1001024c:	10000616 	blt	r2,zero,10010268 <write+0x3c>
10010250:	e0bffd17 	ldw	r2,-12(fp)
10010254:	10c00324 	muli	r3,r2,12
10010258:	00840074 	movhi	r2,4097
1001025c:	10902e04 	addi	r2,r2,16568
10010260:	1885883a 	add	r2,r3,r2
10010264:	00000106 	br	1001026c <write+0x40>
10010268:	0005883a 	mov	r2,zero
1001026c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
10010270:	e0bfff17 	ldw	r2,-4(fp)
10010274:	10002126 	beq	r2,zero,100102fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010278:	e0bfff17 	ldw	r2,-4(fp)
1001027c:	10800217 	ldw	r2,8(r2)
10010280:	108000cc 	andi	r2,r2,3
10010284:	10001826 	beq	r2,zero,100102e8 <write+0xbc>
10010288:	e0bfff17 	ldw	r2,-4(fp)
1001028c:	10800017 	ldw	r2,0(r2)
10010290:	10800617 	ldw	r2,24(r2)
10010294:	10001426 	beq	r2,zero,100102e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010298:	e0bfff17 	ldw	r2,-4(fp)
1001029c:	10800017 	ldw	r2,0(r2)
100102a0:	10800617 	ldw	r2,24(r2)
100102a4:	e0fffb17 	ldw	r3,-20(fp)
100102a8:	180d883a 	mov	r6,r3
100102ac:	e17ffc17 	ldw	r5,-16(fp)
100102b0:	e13fff17 	ldw	r4,-4(fp)
100102b4:	103ee83a 	callr	r2
100102b8:	e0bffe15 	stw	r2,-8(fp)
100102bc:	e0bffe17 	ldw	r2,-8(fp)
100102c0:	1000070e 	bge	r2,zero,100102e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
100102c4:	00101f00 	call	100101f0 <alt_get_errno>
100102c8:	1007883a 	mov	r3,r2
100102cc:	e0bffe17 	ldw	r2,-8(fp)
100102d0:	0085c83a 	sub	r2,zero,r2
100102d4:	18800015 	stw	r2,0(r3)
        return -1;
100102d8:	00bfffc4 	movi	r2,-1
100102dc:	00000c06 	br	10010310 <write+0xe4>
      }
      return rval;
100102e0:	e0bffe17 	ldw	r2,-8(fp)
100102e4:	00000a06 	br	10010310 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
100102e8:	00101f00 	call	100101f0 <alt_get_errno>
100102ec:	1007883a 	mov	r3,r2
100102f0:	00800344 	movi	r2,13
100102f4:	18800015 	stw	r2,0(r3)
100102f8:	00000406 	br	1001030c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100102fc:	00101f00 	call	100101f0 <alt_get_errno>
10010300:	1007883a 	mov	r3,r2
10010304:	00801444 	movi	r2,81
10010308:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001030c:	00bfffc4 	movi	r2,-1
}
10010310:	e037883a 	mov	sp,fp
10010314:	dfc00117 	ldw	ra,4(sp)
10010318:	df000017 	ldw	fp,0(sp)
1001031c:	dec00204 	addi	sp,sp,8
10010320:	f800283a 	ret

10010324 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010324:	defffd04 	addi	sp,sp,-12
10010328:	dfc00215 	stw	ra,8(sp)
1001032c:	df000115 	stw	fp,4(sp)
10010330:	df000104 	addi	fp,sp,4
10010334:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010338:	d1600704 	addi	r5,gp,-32740
1001033c:	e13fff17 	ldw	r4,-4(fp)
10010340:	00112200 	call	10011220 <alt_dev_llist_insert>
}
10010344:	e037883a 	mov	sp,fp
10010348:	dfc00117 	ldw	ra,4(sp)
1001034c:	df000017 	ldw	fp,0(sp)
10010350:	dec00204 	addi	sp,sp,8
10010354:	f800283a 	ret

10010358 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010358:	defffd04 	addi	sp,sp,-12
1001035c:	dfc00215 	stw	ra,8(sp)
10010360:	df000115 	stw	fp,4(sp)
10010364:	df000104 	addi	fp,sp,4
10010368:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1001036c:	0011b640 	call	10011b64 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010370:	00800044 	movi	r2,1
10010374:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010378:	0001883a 	nop
1001037c:	e037883a 	mov	sp,fp
10010380:	dfc00117 	ldw	ra,4(sp)
10010384:	df000017 	ldw	fp,0(sp)
10010388:	dec00204 	addi	sp,sp,8
1001038c:	f800283a 	ret

10010390 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010390:	defffe04 	addi	sp,sp,-8
10010394:	dfc00115 	stw	ra,4(sp)
10010398:	df000015 	stw	fp,0(sp)
1001039c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
100103a0:	01c0fa04 	movi	r7,1000
100103a4:	01800044 	movi	r6,1
100103a8:	000b883a 	mov	r5,zero
100103ac:	01000804 	movi	r4,32
100103b0:	0010ecc0 	call	10010ecc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100103b4:	01800144 	movi	r6,5
100103b8:	000b883a 	mov	r5,zero
100103bc:	01040074 	movhi	r4,4097
100103c0:	21109804 	addi	r4,r4,16992
100103c4:	00105540 	call	10010554 <altera_avalon_jtag_uart_init>
100103c8:	01040074 	movhi	r4,4097
100103cc:	21108e04 	addi	r4,r4,16952
100103d0:	00103240 	call	10010324 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100103d4:	0001883a 	nop
}
100103d8:	0001883a 	nop
100103dc:	e037883a 	mov	sp,fp
100103e0:	dfc00117 	ldw	ra,4(sp)
100103e4:	df000017 	ldw	fp,0(sp)
100103e8:	dec00204 	addi	sp,sp,8
100103ec:	f800283a 	ret

100103f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100103f0:	defffa04 	addi	sp,sp,-24
100103f4:	dfc00515 	stw	ra,20(sp)
100103f8:	df000415 	stw	fp,16(sp)
100103fc:	df000404 	addi	fp,sp,16
10010400:	e13ffe15 	stw	r4,-8(fp)
10010404:	e17ffd15 	stw	r5,-12(fp)
10010408:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001040c:	e0bffe17 	ldw	r2,-8(fp)
10010410:	10800017 	ldw	r2,0(r2)
10010414:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010418:	e0bfff17 	ldw	r2,-4(fp)
1001041c:	10c00a04 	addi	r3,r2,40
10010420:	e0bffe17 	ldw	r2,-8(fp)
10010424:	10800217 	ldw	r2,8(r2)
10010428:	100f883a 	mov	r7,r2
1001042c:	e1bffc17 	ldw	r6,-16(fp)
10010430:	e17ffd17 	ldw	r5,-12(fp)
10010434:	1809883a 	mov	r4,r3
10010438:	0010a140 	call	10010a14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1001043c:	e037883a 	mov	sp,fp
10010440:	dfc00117 	ldw	ra,4(sp)
10010444:	df000017 	ldw	fp,0(sp)
10010448:	dec00204 	addi	sp,sp,8
1001044c:	f800283a 	ret

10010450 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010450:	defffa04 	addi	sp,sp,-24
10010454:	dfc00515 	stw	ra,20(sp)
10010458:	df000415 	stw	fp,16(sp)
1001045c:	df000404 	addi	fp,sp,16
10010460:	e13ffe15 	stw	r4,-8(fp)
10010464:	e17ffd15 	stw	r5,-12(fp)
10010468:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001046c:	e0bffe17 	ldw	r2,-8(fp)
10010470:	10800017 	ldw	r2,0(r2)
10010474:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010478:	e0bfff17 	ldw	r2,-4(fp)
1001047c:	10c00a04 	addi	r3,r2,40
10010480:	e0bffe17 	ldw	r2,-8(fp)
10010484:	10800217 	ldw	r2,8(r2)
10010488:	100f883a 	mov	r7,r2
1001048c:	e1bffc17 	ldw	r6,-16(fp)
10010490:	e17ffd17 	ldw	r5,-12(fp)
10010494:	1809883a 	mov	r4,r3
10010498:	0010c300 	call	10010c30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1001049c:	e037883a 	mov	sp,fp
100104a0:	dfc00117 	ldw	ra,4(sp)
100104a4:	df000017 	ldw	fp,0(sp)
100104a8:	dec00204 	addi	sp,sp,8
100104ac:	f800283a 	ret

100104b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100104b0:	defffc04 	addi	sp,sp,-16
100104b4:	dfc00315 	stw	ra,12(sp)
100104b8:	df000215 	stw	fp,8(sp)
100104bc:	df000204 	addi	fp,sp,8
100104c0:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100104c4:	e0bffe17 	ldw	r2,-8(fp)
100104c8:	10800017 	ldw	r2,0(r2)
100104cc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100104d0:	e0bfff17 	ldw	r2,-4(fp)
100104d4:	10c00a04 	addi	r3,r2,40
100104d8:	e0bffe17 	ldw	r2,-8(fp)
100104dc:	10800217 	ldw	r2,8(r2)
100104e0:	100b883a 	mov	r5,r2
100104e4:	1809883a 	mov	r4,r3
100104e8:	00108b80 	call	100108b8 <altera_avalon_jtag_uart_close>
}
100104ec:	e037883a 	mov	sp,fp
100104f0:	dfc00117 	ldw	ra,4(sp)
100104f4:	df000017 	ldw	fp,0(sp)
100104f8:	dec00204 	addi	sp,sp,8
100104fc:	f800283a 	ret

10010500 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010500:	defffa04 	addi	sp,sp,-24
10010504:	dfc00515 	stw	ra,20(sp)
10010508:	df000415 	stw	fp,16(sp)
1001050c:	df000404 	addi	fp,sp,16
10010510:	e13ffe15 	stw	r4,-8(fp)
10010514:	e17ffd15 	stw	r5,-12(fp)
10010518:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1001051c:	e0bffe17 	ldw	r2,-8(fp)
10010520:	10800017 	ldw	r2,0(r2)
10010524:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010528:	e0bfff17 	ldw	r2,-4(fp)
1001052c:	10800a04 	addi	r2,r2,40
10010530:	e1bffc17 	ldw	r6,-16(fp)
10010534:	e17ffd17 	ldw	r5,-12(fp)
10010538:	1009883a 	mov	r4,r2
1001053c:	00109200 	call	10010920 <altera_avalon_jtag_uart_ioctl>
}
10010540:	e037883a 	mov	sp,fp
10010544:	dfc00117 	ldw	ra,4(sp)
10010548:	df000017 	ldw	fp,0(sp)
1001054c:	dec00204 	addi	sp,sp,8
10010550:	f800283a 	ret

10010554 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010554:	defffa04 	addi	sp,sp,-24
10010558:	dfc00515 	stw	ra,20(sp)
1001055c:	df000415 	stw	fp,16(sp)
10010560:	df000404 	addi	fp,sp,16
10010564:	e13fff15 	stw	r4,-4(fp)
10010568:	e17ffe15 	stw	r5,-8(fp)
1001056c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010570:	e0bfff17 	ldw	r2,-4(fp)
10010574:	00c00044 	movi	r3,1
10010578:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1001057c:	e0bfff17 	ldw	r2,-4(fp)
10010580:	10800017 	ldw	r2,0(r2)
10010584:	10800104 	addi	r2,r2,4
10010588:	1007883a 	mov	r3,r2
1001058c:	e0bfff17 	ldw	r2,-4(fp)
10010590:	10800817 	ldw	r2,32(r2)
10010594:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010598:	e0bffe17 	ldw	r2,-8(fp)
1001059c:	e0fffd17 	ldw	r3,-12(fp)
100105a0:	d8000015 	stw	zero,0(sp)
100105a4:	e1ffff17 	ldw	r7,-4(fp)
100105a8:	01840074 	movhi	r6,4097
100105ac:	31818504 	addi	r6,r6,1556
100105b0:	180b883a 	mov	r5,r3
100105b4:	1009883a 	mov	r4,r2
100105b8:	00113b80 	call	100113b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100105bc:	e0bfff17 	ldw	r2,-4(fp)
100105c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100105c4:	e0bfff17 	ldw	r2,-4(fp)
100105c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100105cc:	d0e8a017 	ldw	r3,-23936(gp)
100105d0:	e1ffff17 	ldw	r7,-4(fp)
100105d4:	01840074 	movhi	r6,4097
100105d8:	31820604 	addi	r6,r6,2072
100105dc:	180b883a 	mov	r5,r3
100105e0:	1009883a 	mov	r4,r2
100105e4:	0010f480 	call	10010f48 <alt_alarm_start>
100105e8:	1000040e 	bge	r2,zero,100105fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100105ec:	e0ffff17 	ldw	r3,-4(fp)
100105f0:	00a00034 	movhi	r2,32768
100105f4:	10bfffc4 	addi	r2,r2,-1
100105f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100105fc:	0001883a 	nop
10010600:	e037883a 	mov	sp,fp
10010604:	dfc00117 	ldw	ra,4(sp)
10010608:	df000017 	ldw	fp,0(sp)
1001060c:	dec00204 	addi	sp,sp,8
10010610:	f800283a 	ret

10010614 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010614:	defff804 	addi	sp,sp,-32
10010618:	df000715 	stw	fp,28(sp)
1001061c:	df000704 	addi	fp,sp,28
10010620:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010624:	e0bff917 	ldw	r2,-28(fp)
10010628:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
1001062c:	e0bffd17 	ldw	r2,-12(fp)
10010630:	10800017 	ldw	r2,0(r2)
10010634:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010638:	e0bffc17 	ldw	r2,-16(fp)
1001063c:	10800104 	addi	r2,r2,4
10010640:	10800037 	ldwio	r2,0(r2)
10010644:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010648:	e0bffb17 	ldw	r2,-20(fp)
1001064c:	1080c00c 	andi	r2,r2,768
10010650:	10006b26 	beq	r2,zero,10010800 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010654:	e0bffb17 	ldw	r2,-20(fp)
10010658:	1080400c 	andi	r2,r2,256
1001065c:	10003426 	beq	r2,zero,10010730 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010660:	00800074 	movhi	r2,1
10010664:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010668:	e0bffd17 	ldw	r2,-12(fp)
1001066c:	10800a17 	ldw	r2,40(r2)
10010670:	10800044 	addi	r2,r2,1
10010674:	1081ffcc 	andi	r2,r2,2047
10010678:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
1001067c:	e0bffd17 	ldw	r2,-12(fp)
10010680:	10800b17 	ldw	r2,44(r2)
10010684:	e0fffa17 	ldw	r3,-24(fp)
10010688:	18801426 	beq	r3,r2,100106dc <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1001068c:	e0bffc17 	ldw	r2,-16(fp)
10010690:	10800037 	ldwio	r2,0(r2)
10010694:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010698:	e0bfff17 	ldw	r2,-4(fp)
1001069c:	10a0000c 	andi	r2,r2,32768
100106a0:	10001026 	beq	r2,zero,100106e4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100106a4:	e0bffd17 	ldw	r2,-12(fp)
100106a8:	10800a17 	ldw	r2,40(r2)
100106ac:	e0ffff17 	ldw	r3,-4(fp)
100106b0:	1809883a 	mov	r4,r3
100106b4:	e0fffd17 	ldw	r3,-12(fp)
100106b8:	1885883a 	add	r2,r3,r2
100106bc:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100106c0:	e0bffd17 	ldw	r2,-12(fp)
100106c4:	10800a17 	ldw	r2,40(r2)
100106c8:	10800044 	addi	r2,r2,1
100106cc:	10c1ffcc 	andi	r3,r2,2047
100106d0:	e0bffd17 	ldw	r2,-12(fp)
100106d4:	10c00a15 	stw	r3,40(r2)
      {
100106d8:	003fe306 	br	10010668 <altera_avalon_jtag_uart_irq+0x54>
          break;
100106dc:	0001883a 	nop
100106e0:	00000106 	br	100106e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;
100106e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100106e8:	e0bfff17 	ldw	r2,-4(fp)
100106ec:	10bfffec 	andhi	r2,r2,65535
100106f0:	10000f26 	beq	r2,zero,10010730 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100106f4:	e0bffd17 	ldw	r2,-12(fp)
100106f8:	10c00817 	ldw	r3,32(r2)
100106fc:	00bfff84 	movi	r2,-2
10010700:	1886703a 	and	r3,r3,r2
10010704:	e0bffd17 	ldw	r2,-12(fp)
10010708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001070c:	e0bffc17 	ldw	r2,-16(fp)
10010710:	10800104 	addi	r2,r2,4
10010714:	1007883a 	mov	r3,r2
10010718:	e0bffd17 	ldw	r2,-12(fp)
1001071c:	10800817 	ldw	r2,32(r2)
10010720:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010724:	e0bffc17 	ldw	r2,-16(fp)
10010728:	10800104 	addi	r2,r2,4
1001072c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010730:	e0bffb17 	ldw	r2,-20(fp)
10010734:	1080800c 	andi	r2,r2,512
10010738:	103fbf26 	beq	r2,zero,10010638 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1001073c:	e0bffb17 	ldw	r2,-20(fp)
10010740:	1004d43a 	srli	r2,r2,16
10010744:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010748:	00001306 	br	10010798 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1001074c:	e0bffc17 	ldw	r2,-16(fp)
10010750:	e0fffd17 	ldw	r3,-12(fp)
10010754:	18c00d17 	ldw	r3,52(r3)
10010758:	e13ffd17 	ldw	r4,-12(fp)
1001075c:	20c7883a 	add	r3,r4,r3
10010760:	18c20e03 	ldbu	r3,2104(r3)
10010764:	18c03fcc 	andi	r3,r3,255
10010768:	18c0201c 	xori	r3,r3,128
1001076c:	18ffe004 	addi	r3,r3,-128
10010770:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010774:	e0bffd17 	ldw	r2,-12(fp)
10010778:	10800d17 	ldw	r2,52(r2)
1001077c:	10800044 	addi	r2,r2,1
10010780:	10c1ffcc 	andi	r3,r2,2047
10010784:	e0bffd17 	ldw	r2,-12(fp)
10010788:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1001078c:	e0bffe17 	ldw	r2,-8(fp)
10010790:	10bfffc4 	addi	r2,r2,-1
10010794:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
10010798:	e0bffe17 	ldw	r2,-8(fp)
1001079c:	10000526 	beq	r2,zero,100107b4 <altera_avalon_jtag_uart_irq+0x1a0>
100107a0:	e0bffd17 	ldw	r2,-12(fp)
100107a4:	10c00d17 	ldw	r3,52(r2)
100107a8:	e0bffd17 	ldw	r2,-12(fp)
100107ac:	10800c17 	ldw	r2,48(r2)
100107b0:	18bfe61e 	bne	r3,r2,1001074c <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
100107b4:	e0bffe17 	ldw	r2,-8(fp)
100107b8:	103f9f26 	beq	r2,zero,10010638 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100107bc:	e0bffd17 	ldw	r2,-12(fp)
100107c0:	10c00817 	ldw	r3,32(r2)
100107c4:	00bfff44 	movi	r2,-3
100107c8:	1886703a 	and	r3,r3,r2
100107cc:	e0bffd17 	ldw	r2,-12(fp)
100107d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100107d4:	e0bffd17 	ldw	r2,-12(fp)
100107d8:	10800017 	ldw	r2,0(r2)
100107dc:	10800104 	addi	r2,r2,4
100107e0:	1007883a 	mov	r3,r2
100107e4:	e0bffd17 	ldw	r2,-12(fp)
100107e8:	10800817 	ldw	r2,32(r2)
100107ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100107f0:	e0bffc17 	ldw	r2,-16(fp)
100107f4:	10800104 	addi	r2,r2,4
100107f8:	10800037 	ldwio	r2,0(r2)
  {
100107fc:	003f8e06 	br	10010638 <altera_avalon_jtag_uart_irq+0x24>
      break;
10010800:	0001883a 	nop
      }
    }
  }
}
10010804:	0001883a 	nop
10010808:	e037883a 	mov	sp,fp
1001080c:	df000017 	ldw	fp,0(sp)
10010810:	dec00104 	addi	sp,sp,4
10010814:	f800283a 	ret

10010818 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010818:	defffc04 	addi	sp,sp,-16
1001081c:	df000315 	stw	fp,12(sp)
10010820:	df000304 	addi	fp,sp,12
10010824:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010828:	e0bffd17 	ldw	r2,-12(fp)
1001082c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010830:	e0bfff17 	ldw	r2,-4(fp)
10010834:	10800017 	ldw	r2,0(r2)
10010838:	10800104 	addi	r2,r2,4
1001083c:	10800037 	ldwio	r2,0(r2)
10010840:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010844:	e0bffe17 	ldw	r2,-8(fp)
10010848:	1081000c 	andi	r2,r2,1024
1001084c:	10000b26 	beq	r2,zero,1001087c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010850:	e0bfff17 	ldw	r2,-4(fp)
10010854:	10800017 	ldw	r2,0(r2)
10010858:	10800104 	addi	r2,r2,4
1001085c:	1007883a 	mov	r3,r2
10010860:	e0bfff17 	ldw	r2,-4(fp)
10010864:	10800817 	ldw	r2,32(r2)
10010868:	10810014 	ori	r2,r2,1024
1001086c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010870:	e0bfff17 	ldw	r2,-4(fp)
10010874:	10000915 	stw	zero,36(r2)
10010878:	00000a06 	br	100108a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1001087c:	e0bfff17 	ldw	r2,-4(fp)
10010880:	10c00917 	ldw	r3,36(r2)
10010884:	00a00034 	movhi	r2,32768
10010888:	10bfff04 	addi	r2,r2,-4
1001088c:	10c00536 	bltu	r2,r3,100108a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010890:	e0bfff17 	ldw	r2,-4(fp)
10010894:	10800917 	ldw	r2,36(r2)
10010898:	10c00044 	addi	r3,r2,1
1001089c:	e0bfff17 	ldw	r2,-4(fp)
100108a0:	10c00915 	stw	r3,36(r2)
100108a4:	d0a8a017 	ldw	r2,-23936(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100108a8:	e037883a 	mov	sp,fp
100108ac:	df000017 	ldw	fp,0(sp)
100108b0:	dec00104 	addi	sp,sp,4
100108b4:	f800283a 	ret

100108b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100108b8:	defffd04 	addi	sp,sp,-12
100108bc:	df000215 	stw	fp,8(sp)
100108c0:	df000204 	addi	fp,sp,8
100108c4:	e13fff15 	stw	r4,-4(fp)
100108c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100108cc:	00000506 	br	100108e4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100108d0:	e0bffe17 	ldw	r2,-8(fp)
100108d4:	1090000c 	andi	r2,r2,16384
100108d8:	10000226 	beq	r2,zero,100108e4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100108dc:	00bffd44 	movi	r2,-11
100108e0:	00000b06 	br	10010910 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100108e4:	e0bfff17 	ldw	r2,-4(fp)
100108e8:	10c00d17 	ldw	r3,52(r2)
100108ec:	e0bfff17 	ldw	r2,-4(fp)
100108f0:	10800c17 	ldw	r2,48(r2)
100108f4:	18800526 	beq	r3,r2,1001090c <altera_avalon_jtag_uart_close+0x54>
100108f8:	e0bfff17 	ldw	r2,-4(fp)
100108fc:	10c00917 	ldw	r3,36(r2)
10010900:	e0bfff17 	ldw	r2,-4(fp)
10010904:	10800117 	ldw	r2,4(r2)
10010908:	18bff136 	bltu	r3,r2,100108d0 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
1001090c:	0005883a 	mov	r2,zero
}
10010910:	e037883a 	mov	sp,fp
10010914:	df000017 	ldw	fp,0(sp)
10010918:	dec00104 	addi	sp,sp,4
1001091c:	f800283a 	ret

10010920 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010920:	defffa04 	addi	sp,sp,-24
10010924:	df000515 	stw	fp,20(sp)
10010928:	df000504 	addi	fp,sp,20
1001092c:	e13ffd15 	stw	r4,-12(fp)
10010930:	e17ffc15 	stw	r5,-16(fp)
10010934:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
10010938:	00bff9c4 	movi	r2,-25
1001093c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
10010940:	e0bffc17 	ldw	r2,-16(fp)
10010944:	109a8060 	cmpeqi	r2,r2,27137
10010948:	1000041e 	bne	r2,zero,1001095c <altera_avalon_jtag_uart_ioctl+0x3c>
1001094c:	e0bffc17 	ldw	r2,-16(fp)
10010950:	109a80a0 	cmpeqi	r2,r2,27138
10010954:	1000181e 	bne	r2,zero,100109b8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010958:	00002906 	br	10010a00 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
1001095c:	e0bffd17 	ldw	r2,-12(fp)
10010960:	10c00117 	ldw	r3,4(r2)
10010964:	00a00034 	movhi	r2,32768
10010968:	10bfffc4 	addi	r2,r2,-1
1001096c:	18802126 	beq	r3,r2,100109f4 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
10010970:	e0bffb17 	ldw	r2,-20(fp)
10010974:	10800017 	ldw	r2,0(r2)
10010978:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1001097c:	e0bffe17 	ldw	r2,-8(fp)
10010980:	10800090 	cmplti	r2,r2,2
10010984:	1000061e 	bne	r2,zero,100109a0 <altera_avalon_jtag_uart_ioctl+0x80>
10010988:	e0fffe17 	ldw	r3,-8(fp)
1001098c:	00a00034 	movhi	r2,32768
10010990:	10bfffc4 	addi	r2,r2,-1
10010994:	18800226 	beq	r3,r2,100109a0 <altera_avalon_jtag_uart_ioctl+0x80>
10010998:	e0bffe17 	ldw	r2,-8(fp)
1001099c:	00000206 	br	100109a8 <altera_avalon_jtag_uart_ioctl+0x88>
100109a0:	00a00034 	movhi	r2,32768
100109a4:	10bfff84 	addi	r2,r2,-2
100109a8:	e0fffd17 	ldw	r3,-12(fp)
100109ac:	18800115 	stw	r2,4(r3)
      rc = 0;
100109b0:	e03fff15 	stw	zero,-4(fp)
    break;
100109b4:	00000f06 	br	100109f4 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
100109b8:	e0bffd17 	ldw	r2,-12(fp)
100109bc:	10c00117 	ldw	r3,4(r2)
100109c0:	00a00034 	movhi	r2,32768
100109c4:	10bfffc4 	addi	r2,r2,-1
100109c8:	18800c26 	beq	r3,r2,100109fc <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100109cc:	e0bffd17 	ldw	r2,-12(fp)
100109d0:	10c00917 	ldw	r3,36(r2)
100109d4:	e0bffd17 	ldw	r2,-12(fp)
100109d8:	10800117 	ldw	r2,4(r2)
100109dc:	1885803a 	cmpltu	r2,r3,r2
100109e0:	10c03fcc 	andi	r3,r2,255
100109e4:	e0bffb17 	ldw	r2,-20(fp)
100109e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100109ec:	e03fff15 	stw	zero,-4(fp)
    break;
100109f0:	00000206 	br	100109fc <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
100109f4:	0001883a 	nop
100109f8:	00000106 	br	10010a00 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
100109fc:	0001883a 	nop
  }

  return rc;
10010a00:	e0bfff17 	ldw	r2,-4(fp)
}
10010a04:	e037883a 	mov	sp,fp
10010a08:	df000017 	ldw	fp,0(sp)
10010a0c:	dec00104 	addi	sp,sp,4
10010a10:	f800283a 	ret

10010a14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010a14:	defff304 	addi	sp,sp,-52
10010a18:	dfc00c15 	stw	ra,48(sp)
10010a1c:	df000b15 	stw	fp,44(sp)
10010a20:	df000b04 	addi	fp,sp,44
10010a24:	e13ff815 	stw	r4,-32(fp)
10010a28:	e17ff715 	stw	r5,-36(fp)
10010a2c:	e1bff615 	stw	r6,-40(fp)
10010a30:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
10010a34:	e0bff717 	ldw	r2,-36(fp)
10010a38:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010a3c:	00004706 	br	10010b5c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010a40:	e0bff817 	ldw	r2,-32(fp)
10010a44:	10800a17 	ldw	r2,40(r2)
10010a48:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
10010a4c:	e0bff817 	ldw	r2,-32(fp)
10010a50:	10800b17 	ldw	r2,44(r2)
10010a54:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
10010a58:	e0fffd17 	ldw	r3,-12(fp)
10010a5c:	e0bffc17 	ldw	r2,-16(fp)
10010a60:	18800536 	bltu	r3,r2,10010a78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010a64:	e0fffd17 	ldw	r3,-12(fp)
10010a68:	e0bffc17 	ldw	r2,-16(fp)
10010a6c:	1885c83a 	sub	r2,r3,r2
10010a70:	e0bffe15 	stw	r2,-8(fp)
10010a74:	00000406 	br	10010a88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010a78:	00c20004 	movi	r3,2048
10010a7c:	e0bffc17 	ldw	r2,-16(fp)
10010a80:	1885c83a 	sub	r2,r3,r2
10010a84:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010a88:	e0bffe17 	ldw	r2,-8(fp)
10010a8c:	10001e26 	beq	r2,zero,10010b08 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010a90:	e0fff617 	ldw	r3,-40(fp)
10010a94:	e0bffe17 	ldw	r2,-8(fp)
10010a98:	1880022e 	bgeu	r3,r2,10010aa4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010a9c:	e0bff617 	ldw	r2,-40(fp)
10010aa0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010aa4:	e0bff817 	ldw	r2,-32(fp)
10010aa8:	10c00e04 	addi	r3,r2,56
10010aac:	e0bffc17 	ldw	r2,-16(fp)
10010ab0:	1885883a 	add	r2,r3,r2
10010ab4:	e1bffe17 	ldw	r6,-8(fp)
10010ab8:	100b883a 	mov	r5,r2
10010abc:	e13fff17 	ldw	r4,-4(fp)
10010ac0:	00033640 	call	10003364 <memcpy>
      ptr   += n;
10010ac4:	e0ffff17 	ldw	r3,-4(fp)
10010ac8:	e0bffe17 	ldw	r2,-8(fp)
10010acc:	1885883a 	add	r2,r3,r2
10010ad0:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
10010ad4:	e0fff617 	ldw	r3,-40(fp)
10010ad8:	e0bffe17 	ldw	r2,-8(fp)
10010adc:	1885c83a 	sub	r2,r3,r2
10010ae0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010ae4:	e0fffc17 	ldw	r3,-16(fp)
10010ae8:	e0bffe17 	ldw	r2,-8(fp)
10010aec:	1885883a 	add	r2,r3,r2
10010af0:	10c1ffcc 	andi	r3,r2,2047
10010af4:	e0bff817 	ldw	r2,-32(fp)
10010af8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010afc:	e0bff617 	ldw	r2,-40(fp)
10010b00:	00bfcf16 	blt	zero,r2,10010a40 <altera_avalon_jtag_uart_read+0x2c>
10010b04:	00000106 	br	10010b0c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
10010b08:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
10010b0c:	e0ffff17 	ldw	r3,-4(fp)
10010b10:	e0bff717 	ldw	r2,-36(fp)
10010b14:	1880141e 	bne	r3,r2,10010b68 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010b18:	e0bff517 	ldw	r2,-44(fp)
10010b1c:	1090000c 	andi	r2,r2,16384
10010b20:	1000131e 	bne	r2,zero,10010b70 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010b24:	0001883a 	nop
10010b28:	e0bff817 	ldw	r2,-32(fp)
10010b2c:	10800a17 	ldw	r2,40(r2)
10010b30:	e0fffd17 	ldw	r3,-12(fp)
10010b34:	1880051e 	bne	r3,r2,10010b4c <altera_avalon_jtag_uart_read+0x138>
10010b38:	e0bff817 	ldw	r2,-32(fp)
10010b3c:	10c00917 	ldw	r3,36(r2)
10010b40:	e0bff817 	ldw	r2,-32(fp)
10010b44:	10800117 	ldw	r2,4(r2)
10010b48:	18bff736 	bltu	r3,r2,10010b28 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010b4c:	e0bff817 	ldw	r2,-32(fp)
10010b50:	10800a17 	ldw	r2,40(r2)
10010b54:	e0fffd17 	ldw	r3,-12(fp)
10010b58:	18800726 	beq	r3,r2,10010b78 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
10010b5c:	e0bff617 	ldw	r2,-40(fp)
10010b60:	00bfb716 	blt	zero,r2,10010a40 <altera_avalon_jtag_uart_read+0x2c>
10010b64:	00000506 	br	10010b7c <altera_avalon_jtag_uart_read+0x168>
      break;
10010b68:	0001883a 	nop
10010b6c:	00000306 	br	10010b7c <altera_avalon_jtag_uart_read+0x168>
      break;
10010b70:	0001883a 	nop
10010b74:	00000106 	br	10010b7c <altera_avalon_jtag_uart_read+0x168>
      break;
10010b78:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010b7c:	e0ffff17 	ldw	r3,-4(fp)
10010b80:	e0bff717 	ldw	r2,-36(fp)
10010b84:	18801826 	beq	r3,r2,10010be8 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
10010b88:	0005303a 	rdctl	r2,status
10010b8c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b90:	e0fff917 	ldw	r3,-28(fp)
10010b94:	00bfff84 	movi	r2,-2
10010b98:	1884703a 	and	r2,r3,r2
10010b9c:	1001703a 	wrctl	status,r2
  return context;
10010ba0:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010ba4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010ba8:	e0bff817 	ldw	r2,-32(fp)
10010bac:	10800817 	ldw	r2,32(r2)
10010bb0:	10c00054 	ori	r3,r2,1
10010bb4:	e0bff817 	ldw	r2,-32(fp)
10010bb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010bbc:	e0bff817 	ldw	r2,-32(fp)
10010bc0:	10800017 	ldw	r2,0(r2)
10010bc4:	10800104 	addi	r2,r2,4
10010bc8:	1007883a 	mov	r3,r2
10010bcc:	e0bff817 	ldw	r2,-32(fp)
10010bd0:	10800817 	ldw	r2,32(r2)
10010bd4:	18800035 	stwio	r2,0(r3)
10010bd8:	e0bffb17 	ldw	r2,-20(fp)
10010bdc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010be0:	e0bffa17 	ldw	r2,-24(fp)
10010be4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010be8:	e0ffff17 	ldw	r3,-4(fp)
10010bec:	e0bff717 	ldw	r2,-36(fp)
10010bf0:	18800426 	beq	r3,r2,10010c04 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010bf4:	e0ffff17 	ldw	r3,-4(fp)
10010bf8:	e0bff717 	ldw	r2,-36(fp)
10010bfc:	1885c83a 	sub	r2,r3,r2
10010c00:	00000606 	br	10010c1c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010c04:	e0bff517 	ldw	r2,-44(fp)
10010c08:	1090000c 	andi	r2,r2,16384
10010c0c:	10000226 	beq	r2,zero,10010c18 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010c10:	00bffd44 	movi	r2,-11
10010c14:	00000106 	br	10010c1c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010c18:	00bffec4 	movi	r2,-5
}
10010c1c:	e037883a 	mov	sp,fp
10010c20:	dfc00117 	ldw	ra,4(sp)
10010c24:	df000017 	ldw	fp,0(sp)
10010c28:	dec00204 	addi	sp,sp,8
10010c2c:	f800283a 	ret

10010c30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010c30:	defff304 	addi	sp,sp,-52
10010c34:	dfc00c15 	stw	ra,48(sp)
10010c38:	df000b15 	stw	fp,44(sp)
10010c3c:	df000b04 	addi	fp,sp,44
10010c40:	e13ff815 	stw	r4,-32(fp)
10010c44:	e17ff715 	stw	r5,-36(fp)
10010c48:	e1bff615 	stw	r6,-40(fp)
10010c4c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010c50:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010c54:	e0bff717 	ldw	r2,-36(fp)
10010c58:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010c5c:	00003706 	br	10010d3c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010c60:	e0bff817 	ldw	r2,-32(fp)
10010c64:	10800c17 	ldw	r2,48(r2)
10010c68:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
10010c6c:	e0bff817 	ldw	r2,-32(fp)
10010c70:	10800d17 	ldw	r2,52(r2)
10010c74:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
10010c78:	e0fffc17 	ldw	r3,-16(fp)
10010c7c:	e0bfff17 	ldw	r2,-4(fp)
10010c80:	1880062e 	bgeu	r3,r2,10010c9c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010c84:	e0ffff17 	ldw	r3,-4(fp)
10010c88:	e0bffc17 	ldw	r2,-16(fp)
10010c8c:	1885c83a 	sub	r2,r3,r2
10010c90:	10bfffc4 	addi	r2,r2,-1
10010c94:	e0bffe15 	stw	r2,-8(fp)
10010c98:	00000b06 	br	10010cc8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010c9c:	e0bfff17 	ldw	r2,-4(fp)
10010ca0:	10000526 	beq	r2,zero,10010cb8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010ca4:	00c20004 	movi	r3,2048
10010ca8:	e0bffc17 	ldw	r2,-16(fp)
10010cac:	1885c83a 	sub	r2,r3,r2
10010cb0:	e0bffe15 	stw	r2,-8(fp)
10010cb4:	00000406 	br	10010cc8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010cb8:	00c1ffc4 	movi	r3,2047
10010cbc:	e0bffc17 	ldw	r2,-16(fp)
10010cc0:	1885c83a 	sub	r2,r3,r2
10010cc4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010cc8:	e0bffe17 	ldw	r2,-8(fp)
10010ccc:	10001e26 	beq	r2,zero,10010d48 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010cd0:	e0fff617 	ldw	r3,-40(fp)
10010cd4:	e0bffe17 	ldw	r2,-8(fp)
10010cd8:	1880022e 	bgeu	r3,r2,10010ce4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010cdc:	e0bff617 	ldw	r2,-40(fp)
10010ce0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010ce4:	e0bff817 	ldw	r2,-32(fp)
10010ce8:	10c20e04 	addi	r3,r2,2104
10010cec:	e0bffc17 	ldw	r2,-16(fp)
10010cf0:	1885883a 	add	r2,r3,r2
10010cf4:	e1bffe17 	ldw	r6,-8(fp)
10010cf8:	e17ff717 	ldw	r5,-36(fp)
10010cfc:	1009883a 	mov	r4,r2
10010d00:	00033640 	call	10003364 <memcpy>
      ptr   += n;
10010d04:	e0fff717 	ldw	r3,-36(fp)
10010d08:	e0bffe17 	ldw	r2,-8(fp)
10010d0c:	1885883a 	add	r2,r3,r2
10010d10:	e0bff715 	stw	r2,-36(fp)
      count -= n;
10010d14:	e0fff617 	ldw	r3,-40(fp)
10010d18:	e0bffe17 	ldw	r2,-8(fp)
10010d1c:	1885c83a 	sub	r2,r3,r2
10010d20:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010d24:	e0fffc17 	ldw	r3,-16(fp)
10010d28:	e0bffe17 	ldw	r2,-8(fp)
10010d2c:	1885883a 	add	r2,r3,r2
10010d30:	10c1ffcc 	andi	r3,r2,2047
10010d34:	e0bff817 	ldw	r2,-32(fp)
10010d38:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
10010d3c:	e0bff617 	ldw	r2,-40(fp)
10010d40:	00bfc716 	blt	zero,r2,10010c60 <altera_avalon_jtag_uart_write+0x30>
10010d44:	00000106 	br	10010d4c <altera_avalon_jtag_uart_write+0x11c>
        break;
10010d48:	0001883a 	nop
  NIOS2_READ_STATUS (context);
10010d4c:	0005303a 	rdctl	r2,status
10010d50:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010d54:	e0fff917 	ldw	r3,-28(fp)
10010d58:	00bfff84 	movi	r2,-2
10010d5c:	1884703a 	and	r2,r3,r2
10010d60:	1001703a 	wrctl	status,r2
  return context;
10010d64:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010d68:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010d6c:	e0bff817 	ldw	r2,-32(fp)
10010d70:	10800817 	ldw	r2,32(r2)
10010d74:	10c00094 	ori	r3,r2,2
10010d78:	e0bff817 	ldw	r2,-32(fp)
10010d7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010d80:	e0bff817 	ldw	r2,-32(fp)
10010d84:	10800017 	ldw	r2,0(r2)
10010d88:	10800104 	addi	r2,r2,4
10010d8c:	1007883a 	mov	r3,r2
10010d90:	e0bff817 	ldw	r2,-32(fp)
10010d94:	10800817 	ldw	r2,32(r2)
10010d98:	18800035 	stwio	r2,0(r3)
10010d9c:	e0bffb17 	ldw	r2,-20(fp)
10010da0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010da4:	e0bffa17 	ldw	r2,-24(fp)
10010da8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010dac:	e0bff617 	ldw	r2,-40(fp)
10010db0:	0080100e 	bge	zero,r2,10010df4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010db4:	e0bff517 	ldw	r2,-44(fp)
10010db8:	1090000c 	andi	r2,r2,16384
10010dbc:	1000101e 	bne	r2,zero,10010e00 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010dc0:	0001883a 	nop
10010dc4:	e0bff817 	ldw	r2,-32(fp)
10010dc8:	10800d17 	ldw	r2,52(r2)
10010dcc:	e0ffff17 	ldw	r3,-4(fp)
10010dd0:	1880051e 	bne	r3,r2,10010de8 <altera_avalon_jtag_uart_write+0x1b8>
10010dd4:	e0bff817 	ldw	r2,-32(fp)
10010dd8:	10c00917 	ldw	r3,36(r2)
10010ddc:	e0bff817 	ldw	r2,-32(fp)
10010de0:	10800117 	ldw	r2,4(r2)
10010de4:	18bff736 	bltu	r3,r2,10010dc4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010de8:	e0bff817 	ldw	r2,-32(fp)
10010dec:	10800917 	ldw	r2,36(r2)
10010df0:	1000051e 	bne	r2,zero,10010e08 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010df4:	e0bff617 	ldw	r2,-40(fp)
10010df8:	00bfd016 	blt	zero,r2,10010d3c <altera_avalon_jtag_uart_write+0x10c>
10010dfc:	00000306 	br	10010e0c <altera_avalon_jtag_uart_write+0x1dc>
        break;
10010e00:	0001883a 	nop
10010e04:	00000106 	br	10010e0c <altera_avalon_jtag_uart_write+0x1dc>
         break;
10010e08:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010e0c:	e0fff717 	ldw	r3,-36(fp)
10010e10:	e0bffd17 	ldw	r2,-12(fp)
10010e14:	18800426 	beq	r3,r2,10010e28 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010e18:	e0fff717 	ldw	r3,-36(fp)
10010e1c:	e0bffd17 	ldw	r2,-12(fp)
10010e20:	1885c83a 	sub	r2,r3,r2
10010e24:	00000606 	br	10010e40 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010e28:	e0bff517 	ldw	r2,-44(fp)
10010e2c:	1090000c 	andi	r2,r2,16384
10010e30:	10000226 	beq	r2,zero,10010e3c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010e34:	00bffd44 	movi	r2,-11
10010e38:	00000106 	br	10010e40 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010e3c:	00bffec4 	movi	r2,-5
}
10010e40:	e037883a 	mov	sp,fp
10010e44:	dfc00117 	ldw	ra,4(sp)
10010e48:	df000017 	ldw	fp,0(sp)
10010e4c:	dec00204 	addi	sp,sp,8
10010e50:	f800283a 	ret

10010e54 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
10010e54:	defffa04 	addi	sp,sp,-24
10010e58:	dfc00515 	stw	ra,20(sp)
10010e5c:	df000415 	stw	fp,16(sp)
10010e60:	df000404 	addi	fp,sp,16
10010e64:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10010e68:	0007883a 	mov	r3,zero
10010e6c:	e0bffc17 	ldw	r2,-16(fp)
10010e70:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
10010e74:	e0bffc17 	ldw	r2,-16(fp)
10010e78:	10800104 	addi	r2,r2,4
10010e7c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
10010e80:	0005303a 	rdctl	r2,status
10010e84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e88:	e0fffd17 	ldw	r3,-12(fp)
10010e8c:	00bfff84 	movi	r2,-2
10010e90:	1884703a 	and	r2,r3,r2
10010e94:	1001703a 	wrctl	status,r2
  return context;
10010e98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10010e9c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
10010ea0:	0011a5c0 	call	10011a5c <alt_tick>
10010ea4:	e0bfff17 	ldw	r2,-4(fp)
10010ea8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10010eac:	e0bffe17 	ldw	r2,-8(fp)
10010eb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
10010eb4:	0001883a 	nop
10010eb8:	e037883a 	mov	sp,fp
10010ebc:	dfc00117 	ldw	ra,4(sp)
10010ec0:	df000017 	ldw	fp,0(sp)
10010ec4:	dec00204 	addi	sp,sp,8
10010ec8:	f800283a 	ret

10010ecc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
10010ecc:	defff804 	addi	sp,sp,-32
10010ed0:	dfc00715 	stw	ra,28(sp)
10010ed4:	df000615 	stw	fp,24(sp)
10010ed8:	df000604 	addi	fp,sp,24
10010edc:	e13ffe15 	stw	r4,-8(fp)
10010ee0:	e17ffd15 	stw	r5,-12(fp)
10010ee4:	e1bffc15 	stw	r6,-16(fp)
10010ee8:	e1fffb15 	stw	r7,-20(fp)
10010eec:	e0bffb17 	ldw	r2,-20(fp)
10010ef0:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
10010ef4:	d0a8a017 	ldw	r2,-23936(gp)
10010ef8:	1000021e 	bne	r2,zero,10010f04 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
10010efc:	e0bfff17 	ldw	r2,-4(fp)
10010f00:	d0a8a015 	stw	r2,-23936(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
10010f04:	e0bffe17 	ldw	r2,-8(fp)
10010f08:	10800104 	addi	r2,r2,4
10010f0c:	00c001c4 	movi	r3,7
10010f10:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10010f14:	d8000015 	stw	zero,0(sp)
10010f18:	e1fffe17 	ldw	r7,-8(fp)
10010f1c:	01840074 	movhi	r6,4097
10010f20:	31839504 	addi	r6,r6,3668
10010f24:	e17ffc17 	ldw	r5,-16(fp)
10010f28:	e13ffd17 	ldw	r4,-12(fp)
10010f2c:	00113b80 	call	100113b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10010f30:	0001883a 	nop
10010f34:	e037883a 	mov	sp,fp
10010f38:	dfc00117 	ldw	ra,4(sp)
10010f3c:	df000017 	ldw	fp,0(sp)
10010f40:	dec00204 	addi	sp,sp,8
10010f44:	f800283a 	ret

10010f48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010f48:	defff504 	addi	sp,sp,-44
10010f4c:	df000a15 	stw	fp,40(sp)
10010f50:	df000a04 	addi	fp,sp,40
10010f54:	e13ff915 	stw	r4,-28(fp)
10010f58:	e17ff815 	stw	r5,-32(fp)
10010f5c:	e1bff715 	stw	r6,-36(fp)
10010f60:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010f64:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
10010f68:	d0a8a017 	ldw	r2,-23936(gp)
  
  if (alt_ticks_per_second ())
10010f6c:	10003c26 	beq	r2,zero,10011060 <alt_alarm_start+0x118>
  {
    if (alarm)
10010f70:	e0bff917 	ldw	r2,-28(fp)
10010f74:	10003826 	beq	r2,zero,10011058 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010f78:	e0bff917 	ldw	r2,-28(fp)
10010f7c:	e0fff717 	ldw	r3,-36(fp)
10010f80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010f84:	e0bff917 	ldw	r2,-28(fp)
10010f88:	e0fff617 	ldw	r3,-40(fp)
10010f8c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
10010f90:	0005303a 	rdctl	r2,status
10010f94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f98:	e0fffd17 	ldw	r3,-12(fp)
10010f9c:	00bfff84 	movi	r2,-2
10010fa0:	1884703a 	and	r2,r3,r2
10010fa4:	1001703a 	wrctl	status,r2
  return context;
10010fa8:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
10010fac:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010fb0:	d0a8a117 	ldw	r2,-23932(gp)
      
      current_nticks = alt_nticks();
10010fb4:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010fb8:	e0fff817 	ldw	r3,-32(fp)
10010fbc:	e0bfff17 	ldw	r2,-4(fp)
10010fc0:	1885883a 	add	r2,r3,r2
10010fc4:	10c00044 	addi	r3,r2,1
10010fc8:	e0bff917 	ldw	r2,-28(fp)
10010fcc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010fd0:	e0bff917 	ldw	r2,-28(fp)
10010fd4:	10c00217 	ldw	r3,8(r2)
10010fd8:	e0bfff17 	ldw	r2,-4(fp)
10010fdc:	1880042e 	bgeu	r3,r2,10010ff0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010fe0:	e0bff917 	ldw	r2,-28(fp)
10010fe4:	00c00044 	movi	r3,1
10010fe8:	10c00405 	stb	r3,16(r2)
10010fec:	00000206 	br	10010ff8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010ff0:	e0bff917 	ldw	r2,-28(fp)
10010ff4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010ff8:	e0bff917 	ldw	r2,-28(fp)
10010ffc:	d0e00d04 	addi	r3,gp,-32716
10011000:	e0fffb15 	stw	r3,-20(fp)
10011004:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011008:	e0bffa17 	ldw	r2,-24(fp)
1001100c:	e0fffb17 	ldw	r3,-20(fp)
10011010:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011014:	e0bffb17 	ldw	r2,-20(fp)
10011018:	10c00017 	ldw	r3,0(r2)
1001101c:	e0bffa17 	ldw	r2,-24(fp)
10011020:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011024:	e0bffb17 	ldw	r2,-20(fp)
10011028:	10800017 	ldw	r2,0(r2)
1001102c:	e0fffa17 	ldw	r3,-24(fp)
10011030:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011034:	e0bffb17 	ldw	r2,-20(fp)
10011038:	e0fffa17 	ldw	r3,-24(fp)
1001103c:	10c00015 	stw	r3,0(r2)
10011040:	e0bffe17 	ldw	r2,-8(fp)
10011044:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011048:	e0bffc17 	ldw	r2,-16(fp)
1001104c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011050:	0005883a 	mov	r2,zero
10011054:	00000306 	br	10011064 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10011058:	00bffa84 	movi	r2,-22
1001105c:	00000106 	br	10011064 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10011060:	00bfde84 	movi	r2,-134
  }
}
10011064:	e037883a 	mov	sp,fp
10011068:	df000017 	ldw	fp,0(sp)
1001106c:	dec00104 	addi	sp,sp,4
10011070:	f800283a 	ret

10011074 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10011074:	defffb04 	addi	sp,sp,-20
10011078:	df000415 	stw	fp,16(sp)
1001107c:	df000404 	addi	fp,sp,16
10011080:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10011084:	008000c4 	movi	r2,3
10011088:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001108c:	e0fffe17 	ldw	r3,-8(fp)
10011090:	008003f4 	movhi	r2,15
10011094:	10909004 	addi	r2,r2,16960
10011098:	1887383a 	mul	r3,r3,r2
1001109c:	00817db4 	movhi	r2,1526
100110a0:	10b84004 	addi	r2,r2,-7936
100110a4:	10c7203a 	divu	r3,r2,r3
  big_loops = us / (INT_MAX/
100110a8:	00a00034 	movhi	r2,32768
100110ac:	10bfffc4 	addi	r2,r2,-1
100110b0:	10c5203a 	divu	r2,r2,r3
100110b4:	e0fffc17 	ldw	r3,-16(fp)
100110b8:	1885203a 	divu	r2,r3,r2
100110bc:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
100110c0:	e0bffd17 	ldw	r2,-12(fp)
100110c4:	10002526 	beq	r2,zero,1001115c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
100110c8:	e03fff15 	stw	zero,-4(fp)
100110cc:	00001406 	br	10011120 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100110d0:	00a00034 	movhi	r2,32768
100110d4:	10bfffc4 	addi	r2,r2,-1
100110d8:	10bfffc4 	addi	r2,r2,-1
100110dc:	103ffe1e 	bne	r2,zero,100110d8 <alt_busy_sleep+0x64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100110e0:	e0fffe17 	ldw	r3,-8(fp)
100110e4:	008003f4 	movhi	r2,15
100110e8:	10909004 	addi	r2,r2,16960
100110ec:	1887383a 	mul	r3,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
100110f0:	00817db4 	movhi	r2,1526
100110f4:	10b84004 	addi	r2,r2,-7936
100110f8:	10c7203a 	divu	r3,r2,r3
100110fc:	00a00034 	movhi	r2,32768
10011100:	10bfffc4 	addi	r2,r2,-1
10011104:	10c5203a 	divu	r2,r2,r3
10011108:	e0fffc17 	ldw	r3,-16(fp)
1001110c:	1885c83a 	sub	r2,r3,r2
10011110:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
10011114:	e0bfff17 	ldw	r2,-4(fp)
10011118:	10800044 	addi	r2,r2,1
1001111c:	e0bfff15 	stw	r2,-4(fp)
10011120:	e0ffff17 	ldw	r3,-4(fp)
10011124:	e0bffd17 	ldw	r2,-12(fp)
10011128:	18bfe916 	blt	r3,r2,100110d0 <alt_busy_sleep+0x5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001112c:	e0fffe17 	ldw	r3,-8(fp)
10011130:	008003f4 	movhi	r2,15
10011134:	10909004 	addi	r2,r2,16960
10011138:	1887383a 	mul	r3,r3,r2
1001113c:	00817db4 	movhi	r2,1526
10011140:	10b84004 	addi	r2,r2,-7936
10011144:	10c7203a 	divu	r3,r2,r3
10011148:	e0bffc17 	ldw	r2,-16(fp)
1001114c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10011150:	10bfffc4 	addi	r2,r2,-1
10011154:	103ffe1e 	bne	r2,zero,10011150 <alt_busy_sleep+0xdc>
10011158:	00000b06 	br	10011188 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001115c:	e0fffe17 	ldw	r3,-8(fp)
10011160:	008003f4 	movhi	r2,15
10011164:	10909004 	addi	r2,r2,16960
10011168:	1887383a 	mul	r3,r3,r2
1001116c:	00817db4 	movhi	r2,1526
10011170:	10b84004 	addi	r2,r2,-7936
10011174:	10c7203a 	divu	r3,r2,r3
10011178:	e0bffc17 	ldw	r2,-16(fp)
1001117c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
10011180:	10bfffc4 	addi	r2,r2,-1
10011184:	00bffe16 	blt	zero,r2,10011180 <alt_busy_sleep+0x10c>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011188:	0005883a 	mov	r2,zero
}
1001118c:	e037883a 	mov	sp,fp
10011190:	df000017 	ldw	fp,0(sp)
10011194:	dec00104 	addi	sp,sp,4
10011198:	f800283a 	ret

1001119c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1001119c:	defffe04 	addi	sp,sp,-8
100111a0:	df000115 	stw	fp,4(sp)
100111a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100111a8:	e03fff15 	stw	zero,-4(fp)
100111ac:	00000506 	br	100111c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
100111b0:	e0bfff17 	ldw	r2,-4(fp)
100111b4:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100111b8:	e0bfff17 	ldw	r2,-4(fp)
100111bc:	10800804 	addi	r2,r2,32
100111c0:	e0bfff15 	stw	r2,-4(fp)
100111c4:	e0bfff17 	ldw	r2,-4(fp)
100111c8:	10820030 	cmpltui	r2,r2,2048
100111cc:	103ff81e 	bne	r2,zero,100111b0 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100111d0:	0001883a 	nop
100111d4:	e037883a 	mov	sp,fp
100111d8:	df000017 	ldw	fp,0(sp)
100111dc:	dec00104 	addi	sp,sp,4
100111e0:	f800283a 	ret

100111e4 <alt_get_errno>:
{
100111e4:	defffe04 	addi	sp,sp,-8
100111e8:	dfc00115 	stw	ra,4(sp)
100111ec:	df000015 	stw	fp,0(sp)
100111f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100111f4:	d0a00a17 	ldw	r2,-32728(gp)
100111f8:	10000326 	beq	r2,zero,10011208 <alt_get_errno+0x24>
100111fc:	d0a00a17 	ldw	r2,-32728(gp)
10011200:	103ee83a 	callr	r2
10011204:	00000106 	br	1001120c <alt_get_errno+0x28>
10011208:	d0a89a04 	addi	r2,gp,-23960
}
1001120c:	e037883a 	mov	sp,fp
10011210:	dfc00117 	ldw	ra,4(sp)
10011214:	df000017 	ldw	fp,0(sp)
10011218:	dec00204 	addi	sp,sp,8
1001121c:	f800283a 	ret

10011220 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011220:	defffa04 	addi	sp,sp,-24
10011224:	dfc00515 	stw	ra,20(sp)
10011228:	df000415 	stw	fp,16(sp)
1001122c:	df000404 	addi	fp,sp,16
10011230:	e13ffd15 	stw	r4,-12(fp)
10011234:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011238:	e0bffd17 	ldw	r2,-12(fp)
1001123c:	10000326 	beq	r2,zero,1001124c <alt_dev_llist_insert+0x2c>
10011240:	e0bffd17 	ldw	r2,-12(fp)
10011244:	10800217 	ldw	r2,8(r2)
10011248:	1000061e 	bne	r2,zero,10011264 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1001124c:	00111e40 	call	100111e4 <alt_get_errno>
10011250:	1007883a 	mov	r3,r2
10011254:	00800584 	movi	r2,22
10011258:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1001125c:	00bffa84 	movi	r2,-22
10011260:	00001306 	br	100112b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011264:	e0bffd17 	ldw	r2,-12(fp)
10011268:	e0fffc17 	ldw	r3,-16(fp)
1001126c:	e0ffff15 	stw	r3,-4(fp)
10011270:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
10011274:	e0bffe17 	ldw	r2,-8(fp)
10011278:	e0ffff17 	ldw	r3,-4(fp)
1001127c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011280:	e0bfff17 	ldw	r2,-4(fp)
10011284:	10c00017 	ldw	r3,0(r2)
10011288:	e0bffe17 	ldw	r2,-8(fp)
1001128c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
10011290:	e0bfff17 	ldw	r2,-4(fp)
10011294:	10800017 	ldw	r2,0(r2)
10011298:	e0fffe17 	ldw	r3,-8(fp)
1001129c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100112a0:	e0bfff17 	ldw	r2,-4(fp)
100112a4:	e0fffe17 	ldw	r3,-8(fp)
100112a8:	10c00015 	stw	r3,0(r2)

  return 0;  
100112ac:	0005883a 	mov	r2,zero
}
100112b0:	e037883a 	mov	sp,fp
100112b4:	dfc00117 	ldw	ra,4(sp)
100112b8:	df000017 	ldw	fp,0(sp)
100112bc:	dec00204 	addi	sp,sp,8
100112c0:	f800283a 	ret

100112c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100112c4:	defffd04 	addi	sp,sp,-12
100112c8:	dfc00215 	stw	ra,8(sp)
100112cc:	df000115 	stw	fp,4(sp)
100112d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100112d4:	00840074 	movhi	r2,4097
100112d8:	10886504 	addi	r2,r2,8596
100112dc:	e0bfff15 	stw	r2,-4(fp)
100112e0:	00000606 	br	100112fc <_do_ctors+0x38>
        (*ctor) (); 
100112e4:	e0bfff17 	ldw	r2,-4(fp)
100112e8:	10800017 	ldw	r2,0(r2)
100112ec:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100112f0:	e0bfff17 	ldw	r2,-4(fp)
100112f4:	10bfff04 	addi	r2,r2,-4
100112f8:	e0bfff15 	stw	r2,-4(fp)
100112fc:	e0ffff17 	ldw	r3,-4(fp)
10011300:	00840074 	movhi	r2,4097
10011304:	10886604 	addi	r2,r2,8600
10011308:	18bff62e 	bgeu	r3,r2,100112e4 <_do_ctors+0x20>
}
1001130c:	0001883a 	nop
10011310:	e037883a 	mov	sp,fp
10011314:	dfc00117 	ldw	ra,4(sp)
10011318:	df000017 	ldw	fp,0(sp)
1001131c:	dec00204 	addi	sp,sp,8
10011320:	f800283a 	ret

10011324 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011324:	defffd04 	addi	sp,sp,-12
10011328:	dfc00215 	stw	ra,8(sp)
1001132c:	df000115 	stw	fp,4(sp)
10011330:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011334:	00840074 	movhi	r2,4097
10011338:	10886504 	addi	r2,r2,8596
1001133c:	e0bfff15 	stw	r2,-4(fp)
10011340:	00000606 	br	1001135c <_do_dtors+0x38>
        (*dtor) (); 
10011344:	e0bfff17 	ldw	r2,-4(fp)
10011348:	10800017 	ldw	r2,0(r2)
1001134c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011350:	e0bfff17 	ldw	r2,-4(fp)
10011354:	10bfff04 	addi	r2,r2,-4
10011358:	e0bfff15 	stw	r2,-4(fp)
1001135c:	e0ffff17 	ldw	r3,-4(fp)
10011360:	00840074 	movhi	r2,4097
10011364:	10886604 	addi	r2,r2,8600
10011368:	18bff62e 	bgeu	r3,r2,10011344 <_do_dtors+0x20>
}
1001136c:	0001883a 	nop
10011370:	e037883a 	mov	sp,fp
10011374:	dfc00117 	ldw	ra,4(sp)
10011378:	df000017 	ldw	fp,0(sp)
1001137c:	dec00204 	addi	sp,sp,8
10011380:	f800283a 	ret

10011384 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011384:	defffe04 	addi	sp,sp,-8
10011388:	dfc00115 	stw	ra,4(sp)
1001138c:	df000015 	stw	fp,0(sp)
10011390:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10011394:	01440004 	movi	r5,4096
10011398:	0009883a 	mov	r4,zero
1001139c:	0011dc00 	call	10011dc0 <alt_icache_flush>
#endif
}
100113a0:	0001883a 	nop
100113a4:	e037883a 	mov	sp,fp
100113a8:	dfc00117 	ldw	ra,4(sp)
100113ac:	df000017 	ldw	fp,0(sp)
100113b0:	dec00204 	addi	sp,sp,8
100113b4:	f800283a 	ret

100113b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100113b8:	defff904 	addi	sp,sp,-28
100113bc:	dfc00615 	stw	ra,24(sp)
100113c0:	df000515 	stw	fp,20(sp)
100113c4:	df000504 	addi	fp,sp,20
100113c8:	e13fff15 	stw	r4,-4(fp)
100113cc:	e17ffe15 	stw	r5,-8(fp)
100113d0:	e1bffd15 	stw	r6,-12(fp)
100113d4:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100113d8:	e0800217 	ldw	r2,8(fp)
100113dc:	d8800015 	stw	r2,0(sp)
100113e0:	e1fffc17 	ldw	r7,-16(fp)
100113e4:	e1bffd17 	ldw	r6,-12(fp)
100113e8:	e17ffe17 	ldw	r5,-8(fp)
100113ec:	e13fff17 	ldw	r4,-4(fp)
100113f0:	00115680 	call	10011568 <alt_iic_isr_register>
}  
100113f4:	e037883a 	mov	sp,fp
100113f8:	dfc00117 	ldw	ra,4(sp)
100113fc:	df000017 	ldw	fp,0(sp)
10011400:	dec00204 	addi	sp,sp,8
10011404:	f800283a 	ret

10011408 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011408:	defff904 	addi	sp,sp,-28
1001140c:	df000615 	stw	fp,24(sp)
10011410:	df000604 	addi	fp,sp,24
10011414:	e13ffb15 	stw	r4,-20(fp)
10011418:	e17ffa15 	stw	r5,-24(fp)
1001141c:	e0bffa17 	ldw	r2,-24(fp)
10011420:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
10011424:	0005303a 	rdctl	r2,status
10011428:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001142c:	e0fffe17 	ldw	r3,-8(fp)
10011430:	00bfff84 	movi	r2,-2
10011434:	1884703a 	and	r2,r3,r2
10011438:	1001703a 	wrctl	status,r2
  return context;
1001143c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011440:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
10011444:	00c00044 	movi	r3,1
10011448:	e0bfff17 	ldw	r2,-4(fp)
1001144c:	1884983a 	sll	r2,r3,r2
10011450:	1007883a 	mov	r3,r2
10011454:	d0a89f17 	ldw	r2,-23940(gp)
10011458:	1884b03a 	or	r2,r3,r2
1001145c:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011460:	d0a89f17 	ldw	r2,-23940(gp)
10011464:	100170fa 	wrctl	ienable,r2
10011468:	e0bffd17 	ldw	r2,-12(fp)
1001146c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011470:	e0bffc17 	ldw	r2,-16(fp)
10011474:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011478:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001147c:	0001883a 	nop
}
10011480:	e037883a 	mov	sp,fp
10011484:	df000017 	ldw	fp,0(sp)
10011488:	dec00104 	addi	sp,sp,4
1001148c:	f800283a 	ret

10011490 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011490:	defff904 	addi	sp,sp,-28
10011494:	df000615 	stw	fp,24(sp)
10011498:	df000604 	addi	fp,sp,24
1001149c:	e13ffb15 	stw	r4,-20(fp)
100114a0:	e17ffa15 	stw	r5,-24(fp)
100114a4:	e0bffa17 	ldw	r2,-24(fp)
100114a8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
100114ac:	0005303a 	rdctl	r2,status
100114b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100114b4:	e0fffe17 	ldw	r3,-8(fp)
100114b8:	00bfff84 	movi	r2,-2
100114bc:	1884703a 	and	r2,r3,r2
100114c0:	1001703a 	wrctl	status,r2
  return context;
100114c4:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
100114c8:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
100114cc:	00c00044 	movi	r3,1
100114d0:	e0bfff17 	ldw	r2,-4(fp)
100114d4:	1884983a 	sll	r2,r3,r2
100114d8:	0084303a 	nor	r2,zero,r2
100114dc:	1007883a 	mov	r3,r2
100114e0:	d0a89f17 	ldw	r2,-23940(gp)
100114e4:	1884703a 	and	r2,r3,r2
100114e8:	d0a89f15 	stw	r2,-23940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100114ec:	d0a89f17 	ldw	r2,-23940(gp)
100114f0:	100170fa 	wrctl	ienable,r2
100114f4:	e0bffd17 	ldw	r2,-12(fp)
100114f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
100114fc:	e0bffc17 	ldw	r2,-16(fp)
10011500:	1001703a 	wrctl	status,r2
  return 0;
10011504:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011508:	0001883a 	nop
}
1001150c:	e037883a 	mov	sp,fp
10011510:	df000017 	ldw	fp,0(sp)
10011514:	dec00104 	addi	sp,sp,4
10011518:	f800283a 	ret

1001151c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001151c:	defffc04 	addi	sp,sp,-16
10011520:	df000315 	stw	fp,12(sp)
10011524:	df000304 	addi	fp,sp,12
10011528:	e13ffe15 	stw	r4,-8(fp)
1001152c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011530:	000530fa 	rdctl	r2,ienable
10011534:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011538:	00c00044 	movi	r3,1
1001153c:	e0bffd17 	ldw	r2,-12(fp)
10011540:	1884983a 	sll	r2,r3,r2
10011544:	1007883a 	mov	r3,r2
10011548:	e0bfff17 	ldw	r2,-4(fp)
1001154c:	1884703a 	and	r2,r3,r2
10011550:	1004c03a 	cmpne	r2,r2,zero
10011554:	10803fcc 	andi	r2,r2,255
}
10011558:	e037883a 	mov	sp,fp
1001155c:	df000017 	ldw	fp,0(sp)
10011560:	dec00104 	addi	sp,sp,4
10011564:	f800283a 	ret

10011568 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011568:	defff504 	addi	sp,sp,-44
1001156c:	dfc00a15 	stw	ra,40(sp)
10011570:	df000915 	stw	fp,36(sp)
10011574:	df000904 	addi	fp,sp,36
10011578:	e13ffa15 	stw	r4,-24(fp)
1001157c:	e17ff915 	stw	r5,-28(fp)
10011580:	e1bff815 	stw	r6,-32(fp)
10011584:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
10011588:	00bffa84 	movi	r2,-22
1001158c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011590:	e0bff917 	ldw	r2,-28(fp)
10011594:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011598:	e0bffe17 	ldw	r2,-8(fp)
1001159c:	10800808 	cmpgei	r2,r2,32
100115a0:	1000241e 	bne	r2,zero,10011634 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
100115a4:	0005303a 	rdctl	r2,status
100115a8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100115ac:	e0fffc17 	ldw	r3,-16(fp)
100115b0:	00bfff84 	movi	r2,-2
100115b4:	1884703a 	and	r2,r3,r2
100115b8:	1001703a 	wrctl	status,r2
  return context;
100115bc:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100115c0:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
100115c4:	e0bffe17 	ldw	r2,-8(fp)
100115c8:	100890fa 	slli	r4,r2,3
100115cc:	e0fff817 	ldw	r3,-32(fp)
100115d0:	00840074 	movhi	r2,4097
100115d4:	2085883a 	add	r2,r4,r2
100115d8:	10dd5315 	stw	r3,30028(r2)
    alt_irq[id].context = isr_context;
100115dc:	e0bffe17 	ldw	r2,-8(fp)
100115e0:	100890fa 	slli	r4,r2,3
100115e4:	e0fff717 	ldw	r3,-36(fp)
100115e8:	00840074 	movhi	r2,4097
100115ec:	2085883a 	add	r2,r4,r2
100115f0:	10dd5415 	stw	r3,30032(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100115f4:	e0bff817 	ldw	r2,-32(fp)
100115f8:	10000526 	beq	r2,zero,10011610 <alt_iic_isr_register+0xa8>
100115fc:	e0bffe17 	ldw	r2,-8(fp)
10011600:	100b883a 	mov	r5,r2
10011604:	e13ffa17 	ldw	r4,-24(fp)
10011608:	00114080 	call	10011408 <alt_ic_irq_enable>
1001160c:	00000406 	br	10011620 <alt_iic_isr_register+0xb8>
10011610:	e0bffe17 	ldw	r2,-8(fp)
10011614:	100b883a 	mov	r5,r2
10011618:	e13ffa17 	ldw	r4,-24(fp)
1001161c:	00114900 	call	10011490 <alt_ic_irq_disable>
10011620:	e0bfff15 	stw	r2,-4(fp)
10011624:	e0bffd17 	ldw	r2,-12(fp)
10011628:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
1001162c:	e0bffb17 	ldw	r2,-20(fp)
10011630:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011634:	e0bfff17 	ldw	r2,-4(fp)
}
10011638:	e037883a 	mov	sp,fp
1001163c:	dfc00117 	ldw	ra,4(sp)
10011640:	df000017 	ldw	fp,0(sp)
10011644:	dec00204 	addi	sp,sp,8
10011648:	f800283a 	ret

1001164c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001164c:	defff904 	addi	sp,sp,-28
10011650:	dfc00615 	stw	ra,24(sp)
10011654:	df000515 	stw	fp,20(sp)
10011658:	df000504 	addi	fp,sp,20
1001165c:	e13ffe15 	stw	r4,-8(fp)
10011660:	e17ffd15 	stw	r5,-12(fp)
10011664:	e1bffc15 	stw	r6,-16(fp)
10011668:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
1001166c:	e1bffb17 	ldw	r6,-20(fp)
10011670:	e17ffc17 	ldw	r5,-16(fp)
10011674:	e13ffd17 	ldw	r4,-12(fp)
10011678:	001186c0 	call	1001186c <open>
1001167c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
10011680:	e0bfff17 	ldw	r2,-4(fp)
10011684:	10001716 	blt	r2,zero,100116e4 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
10011688:	e0bfff17 	ldw	r2,-4(fp)
1001168c:	10c00324 	muli	r3,r2,12
10011690:	00840074 	movhi	r2,4097
10011694:	1885883a 	add	r2,r3,r2
10011698:	10d02e17 	ldw	r3,16568(r2)
1001169c:	e0bffe17 	ldw	r2,-8(fp)
100116a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100116a4:	e0bfff17 	ldw	r2,-4(fp)
100116a8:	10c00324 	muli	r3,r2,12
100116ac:	00840074 	movhi	r2,4097
100116b0:	1885883a 	add	r2,r3,r2
100116b4:	10d02f17 	ldw	r3,16572(r2)
100116b8:	e0bffe17 	ldw	r2,-8(fp)
100116bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100116c0:	e0bfff17 	ldw	r2,-4(fp)
100116c4:	10c00324 	muli	r3,r2,12
100116c8:	00840074 	movhi	r2,4097
100116cc:	1885883a 	add	r2,r3,r2
100116d0:	10d03017 	ldw	r3,16576(r2)
100116d4:	e0bffe17 	ldw	r2,-8(fp)
100116d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100116dc:	e13fff17 	ldw	r4,-4(fp)
100116e0:	00100b80 	call	100100b8 <alt_release_fd>
  }
} 
100116e4:	0001883a 	nop
100116e8:	e037883a 	mov	sp,fp
100116ec:	dfc00117 	ldw	ra,4(sp)
100116f0:	df000017 	ldw	fp,0(sp)
100116f4:	dec00204 	addi	sp,sp,8
100116f8:	f800283a 	ret

100116fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100116fc:	defffb04 	addi	sp,sp,-20
10011700:	dfc00415 	stw	ra,16(sp)
10011704:	df000315 	stw	fp,12(sp)
10011708:	df000304 	addi	fp,sp,12
1001170c:	e13fff15 	stw	r4,-4(fp)
10011710:	e17ffe15 	stw	r5,-8(fp)
10011714:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011718:	01c07fc4 	movi	r7,511
1001171c:	01800044 	movi	r6,1
10011720:	e17fff17 	ldw	r5,-4(fp)
10011724:	01040074 	movhi	r4,4097
10011728:	21103104 	addi	r4,r4,16580
1001172c:	001164c0 	call	1001164c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011730:	01c07fc4 	movi	r7,511
10011734:	000d883a 	mov	r6,zero
10011738:	e17ffe17 	ldw	r5,-8(fp)
1001173c:	01040074 	movhi	r4,4097
10011740:	21102e04 	addi	r4,r4,16568
10011744:	001164c0 	call	1001164c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011748:	01c07fc4 	movi	r7,511
1001174c:	01800044 	movi	r6,1
10011750:	e17ffd17 	ldw	r5,-12(fp)
10011754:	01040074 	movhi	r4,4097
10011758:	21103404 	addi	r4,r4,16592
1001175c:	001164c0 	call	1001164c <alt_open_fd>
}  
10011760:	0001883a 	nop
10011764:	e037883a 	mov	sp,fp
10011768:	dfc00117 	ldw	ra,4(sp)
1001176c:	df000017 	ldw	fp,0(sp)
10011770:	dec00204 	addi	sp,sp,8
10011774:	f800283a 	ret

10011778 <alt_get_errno>:
{
10011778:	defffe04 	addi	sp,sp,-8
1001177c:	dfc00115 	stw	ra,4(sp)
10011780:	df000015 	stw	fp,0(sp)
10011784:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011788:	d0a00a17 	ldw	r2,-32728(gp)
1001178c:	10000326 	beq	r2,zero,1001179c <alt_get_errno+0x24>
10011790:	d0a00a17 	ldw	r2,-32728(gp)
10011794:	103ee83a 	callr	r2
10011798:	00000106 	br	100117a0 <alt_get_errno+0x28>
1001179c:	d0a89a04 	addi	r2,gp,-23960
}
100117a0:	e037883a 	mov	sp,fp
100117a4:	dfc00117 	ldw	ra,4(sp)
100117a8:	df000017 	ldw	fp,0(sp)
100117ac:	dec00204 	addi	sp,sp,8
100117b0:	f800283a 	ret

100117b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100117b4:	defffd04 	addi	sp,sp,-12
100117b8:	df000215 	stw	fp,8(sp)
100117bc:	df000204 	addi	fp,sp,8
100117c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100117c4:	e0bffe17 	ldw	r2,-8(fp)
100117c8:	10800217 	ldw	r2,8(r2)
100117cc:	10d00034 	orhi	r3,r2,16384
100117d0:	e0bffe17 	ldw	r2,-8(fp)
100117d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100117d8:	e03fff15 	stw	zero,-4(fp)
100117dc:	00001a06 	br	10011848 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100117e0:	e0bfff17 	ldw	r2,-4(fp)
100117e4:	10c00324 	muli	r3,r2,12
100117e8:	00840074 	movhi	r2,4097
100117ec:	1885883a 	add	r2,r3,r2
100117f0:	10d02e17 	ldw	r3,16568(r2)
100117f4:	e0bffe17 	ldw	r2,-8(fp)
100117f8:	10800017 	ldw	r2,0(r2)
100117fc:	18800f1e 	bne	r3,r2,1001183c <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011800:	e0bfff17 	ldw	r2,-4(fp)
10011804:	10c00324 	muli	r3,r2,12
10011808:	00840074 	movhi	r2,4097
1001180c:	1885883a 	add	r2,r3,r2
10011810:	10903017 	ldw	r2,16576(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
10011814:	1000090e 	bge	r2,zero,1001183c <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
10011818:	e0bfff17 	ldw	r2,-4(fp)
1001181c:	10c00324 	muli	r3,r2,12
10011820:	00840074 	movhi	r2,4097
10011824:	10902e04 	addi	r2,r2,16568
10011828:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001182c:	e0fffe17 	ldw	r3,-8(fp)
10011830:	18800226 	beq	r3,r2,1001183c <alt_file_locked+0x88>
    {
      return -EACCES;
10011834:	00bffcc4 	movi	r2,-13
10011838:	00000806 	br	1001185c <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
1001183c:	e0bfff17 	ldw	r2,-4(fp)
10011840:	10800044 	addi	r2,r2,1
10011844:	e0bfff15 	stw	r2,-4(fp)
10011848:	d0a00917 	ldw	r2,-32732(gp)
1001184c:	1007883a 	mov	r3,r2
10011850:	e0bfff17 	ldw	r2,-4(fp)
10011854:	18bfe22e 	bgeu	r3,r2,100117e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011858:	0005883a 	mov	r2,zero
}
1001185c:	e037883a 	mov	sp,fp
10011860:	df000017 	ldw	fp,0(sp)
10011864:	dec00104 	addi	sp,sp,4
10011868:	f800283a 	ret

1001186c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1001186c:	defff604 	addi	sp,sp,-40
10011870:	dfc00915 	stw	ra,36(sp)
10011874:	df000815 	stw	fp,32(sp)
10011878:	df000804 	addi	fp,sp,32
1001187c:	e13ffa15 	stw	r4,-24(fp)
10011880:	e17ff915 	stw	r5,-28(fp)
10011884:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011888:	00bfffc4 	movi	r2,-1
1001188c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
10011890:	00bffb44 	movi	r2,-19
10011894:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
10011898:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1001189c:	d1600704 	addi	r5,gp,-32740
100118a0:	e13ffa17 	ldw	r4,-24(fp)
100118a4:	0011b880 	call	10011b88 <alt_find_dev>
100118a8:	e0bfff15 	stw	r2,-4(fp)
100118ac:	e0bfff17 	ldw	r2,-4(fp)
100118b0:	1000051e 	bne	r2,zero,100118c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100118b4:	e13ffa17 	ldw	r4,-24(fp)
100118b8:	0011c180 	call	10011c18 <alt_find_file>
100118bc:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
100118c0:	00800044 	movi	r2,1
100118c4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100118c8:	e0bfff17 	ldw	r2,-4(fp)
100118cc:	10002926 	beq	r2,zero,10011974 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
100118d0:	e13fff17 	ldw	r4,-4(fp)
100118d4:	0011d200 	call	10011d20 <alt_get_fd>
100118d8:	e0bffe15 	stw	r2,-8(fp)
100118dc:	e0bffe17 	ldw	r2,-8(fp)
100118e0:	1000030e 	bge	r2,zero,100118f0 <open+0x84>
    {
      status = index;
100118e4:	e0bffe17 	ldw	r2,-8(fp)
100118e8:	e0bffd15 	stw	r2,-12(fp)
100118ec:	00002306 	br	1001197c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
100118f0:	e0bffe17 	ldw	r2,-8(fp)
100118f4:	10c00324 	muli	r3,r2,12
100118f8:	00840074 	movhi	r2,4097
100118fc:	10902e04 	addi	r2,r2,16568
10011900:	1885883a 	add	r2,r3,r2
10011904:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011908:	e0fff917 	ldw	r3,-28(fp)
1001190c:	00900034 	movhi	r2,16384
10011910:	10bfffc4 	addi	r2,r2,-1
10011914:	1886703a 	and	r3,r3,r2
10011918:	e0bffb17 	ldw	r2,-20(fp)
1001191c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011920:	e0bffc17 	ldw	r2,-16(fp)
10011924:	1000051e 	bne	r2,zero,1001193c <open+0xd0>
10011928:	e13ffb17 	ldw	r4,-20(fp)
1001192c:	00117b40 	call	100117b4 <alt_file_locked>
10011930:	e0bffd15 	stw	r2,-12(fp)
10011934:	e0bffd17 	ldw	r2,-12(fp)
10011938:	10001016 	blt	r2,zero,1001197c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1001193c:	e0bfff17 	ldw	r2,-4(fp)
10011940:	10800317 	ldw	r2,12(r2)
10011944:	10000826 	beq	r2,zero,10011968 <open+0xfc>
10011948:	e0bfff17 	ldw	r2,-4(fp)
1001194c:	10800317 	ldw	r2,12(r2)
10011950:	e1fff817 	ldw	r7,-32(fp)
10011954:	e1bff917 	ldw	r6,-28(fp)
10011958:	e17ffa17 	ldw	r5,-24(fp)
1001195c:	e13ffb17 	ldw	r4,-20(fp)
10011960:	103ee83a 	callr	r2
10011964:	00000106 	br	1001196c <open+0x100>
10011968:	0005883a 	mov	r2,zero
1001196c:	e0bffd15 	stw	r2,-12(fp)
10011970:	00000206 	br	1001197c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011974:	00bffb44 	movi	r2,-19
10011978:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001197c:	e0bffd17 	ldw	r2,-12(fp)
10011980:	1000090e 	bge	r2,zero,100119a8 <open+0x13c>
  {
    alt_release_fd (index);  
10011984:	e13ffe17 	ldw	r4,-8(fp)
10011988:	00100b80 	call	100100b8 <alt_release_fd>
    ALT_ERRNO = -status;
1001198c:	00117780 	call	10011778 <alt_get_errno>
10011990:	1007883a 	mov	r3,r2
10011994:	e0bffd17 	ldw	r2,-12(fp)
10011998:	0085c83a 	sub	r2,zero,r2
1001199c:	18800015 	stw	r2,0(r3)
    return -1;
100119a0:	00bfffc4 	movi	r2,-1
100119a4:	00000106 	br	100119ac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
100119a8:	e0bffe17 	ldw	r2,-8(fp)
}
100119ac:	e037883a 	mov	sp,fp
100119b0:	dfc00117 	ldw	ra,4(sp)
100119b4:	df000017 	ldw	fp,0(sp)
100119b8:	dec00204 	addi	sp,sp,8
100119bc:	f800283a 	ret

100119c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100119c0:	defffa04 	addi	sp,sp,-24
100119c4:	df000515 	stw	fp,20(sp)
100119c8:	df000504 	addi	fp,sp,20
100119cc:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
100119d0:	0005303a 	rdctl	r2,status
100119d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100119d8:	e0fffc17 	ldw	r3,-16(fp)
100119dc:	00bfff84 	movi	r2,-2
100119e0:	1884703a 	and	r2,r3,r2
100119e4:	1001703a 	wrctl	status,r2
  return context;
100119e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100119ec:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
100119f0:	e0bffb17 	ldw	r2,-20(fp)
100119f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100119f8:	e0bffd17 	ldw	r2,-12(fp)
100119fc:	10800017 	ldw	r2,0(r2)
10011a00:	e0fffd17 	ldw	r3,-12(fp)
10011a04:	18c00117 	ldw	r3,4(r3)
10011a08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011a0c:	e0bffd17 	ldw	r2,-12(fp)
10011a10:	10800117 	ldw	r2,4(r2)
10011a14:	e0fffd17 	ldw	r3,-12(fp)
10011a18:	18c00017 	ldw	r3,0(r3)
10011a1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011a20:	e0bffd17 	ldw	r2,-12(fp)
10011a24:	e0fffd17 	ldw	r3,-12(fp)
10011a28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011a2c:	e0bffd17 	ldw	r2,-12(fp)
10011a30:	e0fffd17 	ldw	r3,-12(fp)
10011a34:	10c00015 	stw	r3,0(r2)
10011a38:	e0bfff17 	ldw	r2,-4(fp)
10011a3c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10011a40:	e0bffe17 	ldw	r2,-8(fp)
10011a44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011a48:	0001883a 	nop
10011a4c:	e037883a 	mov	sp,fp
10011a50:	df000017 	ldw	fp,0(sp)
10011a54:	dec00104 	addi	sp,sp,4
10011a58:	f800283a 	ret

10011a5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011a5c:	defffb04 	addi	sp,sp,-20
10011a60:	dfc00415 	stw	ra,16(sp)
10011a64:	df000315 	stw	fp,12(sp)
10011a68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011a6c:	d0a00d17 	ldw	r2,-32716(gp)
10011a70:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011a74:	d0a8a117 	ldw	r2,-23932(gp)
10011a78:	10800044 	addi	r2,r2,1
10011a7c:	d0a8a115 	stw	r2,-23932(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011a80:	00002e06 	br	10011b3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011a84:	e0bfff17 	ldw	r2,-4(fp)
10011a88:	10800017 	ldw	r2,0(r2)
10011a8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011a90:	e0bfff17 	ldw	r2,-4(fp)
10011a94:	10800403 	ldbu	r2,16(r2)
10011a98:	10803fcc 	andi	r2,r2,255
10011a9c:	10000426 	beq	r2,zero,10011ab0 <alt_tick+0x54>
10011aa0:	d0a8a117 	ldw	r2,-23932(gp)
10011aa4:	1000021e 	bne	r2,zero,10011ab0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011aa8:	e0bfff17 	ldw	r2,-4(fp)
10011aac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011ab0:	e0bfff17 	ldw	r2,-4(fp)
10011ab4:	10800217 	ldw	r2,8(r2)
10011ab8:	d0e8a117 	ldw	r3,-23932(gp)
10011abc:	18801d36 	bltu	r3,r2,10011b34 <alt_tick+0xd8>
10011ac0:	e0bfff17 	ldw	r2,-4(fp)
10011ac4:	10800403 	ldbu	r2,16(r2)
10011ac8:	10803fcc 	andi	r2,r2,255
10011acc:	1000191e 	bne	r2,zero,10011b34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011ad0:	e0bfff17 	ldw	r2,-4(fp)
10011ad4:	10800317 	ldw	r2,12(r2)
10011ad8:	e0ffff17 	ldw	r3,-4(fp)
10011adc:	18c00517 	ldw	r3,20(r3)
10011ae0:	1809883a 	mov	r4,r3
10011ae4:	103ee83a 	callr	r2
10011ae8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011aec:	e0bffd17 	ldw	r2,-12(fp)
10011af0:	1000031e 	bne	r2,zero,10011b00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011af4:	e13fff17 	ldw	r4,-4(fp)
10011af8:	00119c00 	call	100119c0 <alt_alarm_stop>
10011afc:	00000d06 	br	10011b34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011b00:	e0bfff17 	ldw	r2,-4(fp)
10011b04:	10c00217 	ldw	r3,8(r2)
10011b08:	e0bffd17 	ldw	r2,-12(fp)
10011b0c:	1887883a 	add	r3,r3,r2
10011b10:	e0bfff17 	ldw	r2,-4(fp)
10011b14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011b18:	e0bfff17 	ldw	r2,-4(fp)
10011b1c:	10c00217 	ldw	r3,8(r2)
10011b20:	d0a8a117 	ldw	r2,-23932(gp)
10011b24:	1880032e 	bgeu	r3,r2,10011b34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011b28:	e0bfff17 	ldw	r2,-4(fp)
10011b2c:	00c00044 	movi	r3,1
10011b30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011b34:	e0bffe17 	ldw	r2,-8(fp)
10011b38:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
10011b3c:	e0ffff17 	ldw	r3,-4(fp)
10011b40:	d0a00d04 	addi	r2,gp,-32716
10011b44:	18bfcf1e 	bne	r3,r2,10011a84 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011b48:	0001883a 	nop
}
10011b4c:	0001883a 	nop
10011b50:	e037883a 	mov	sp,fp
10011b54:	dfc00117 	ldw	ra,4(sp)
10011b58:	df000017 	ldw	fp,0(sp)
10011b5c:	dec00204 	addi	sp,sp,8
10011b60:	f800283a 	ret

10011b64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011b64:	deffff04 	addi	sp,sp,-4
10011b68:	df000015 	stw	fp,0(sp)
10011b6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011b70:	000170fa 	wrctl	ienable,zero
}
10011b74:	0001883a 	nop
10011b78:	e037883a 	mov	sp,fp
10011b7c:	df000017 	ldw	fp,0(sp)
10011b80:	dec00104 	addi	sp,sp,4
10011b84:	f800283a 	ret

10011b88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011b88:	defffa04 	addi	sp,sp,-24
10011b8c:	dfc00515 	stw	ra,20(sp)
10011b90:	df000415 	stw	fp,16(sp)
10011b94:	df000404 	addi	fp,sp,16
10011b98:	e13ffd15 	stw	r4,-12(fp)
10011b9c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011ba0:	e0bffc17 	ldw	r2,-16(fp)
10011ba4:	10800017 	ldw	r2,0(r2)
10011ba8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011bac:	e13ffd17 	ldw	r4,-12(fp)
10011bb0:	00035a80 	call	100035a8 <strlen>
10011bb4:	10800044 	addi	r2,r2,1
10011bb8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011bbc:	00000d06 	br	10011bf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011bc0:	e0bfff17 	ldw	r2,-4(fp)
10011bc4:	10800217 	ldw	r2,8(r2)
10011bc8:	e0fffe17 	ldw	r3,-8(fp)
10011bcc:	180d883a 	mov	r6,r3
10011bd0:	e17ffd17 	ldw	r5,-12(fp)
10011bd4:	1009883a 	mov	r4,r2
10011bd8:	0011f300 	call	10011f30 <memcmp>
10011bdc:	1000021e 	bne	r2,zero,10011be8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011be0:	e0bfff17 	ldw	r2,-4(fp)
10011be4:	00000706 	br	10011c04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011be8:	e0bfff17 	ldw	r2,-4(fp)
10011bec:	10800017 	ldw	r2,0(r2)
10011bf0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
10011bf4:	e0ffff17 	ldw	r3,-4(fp)
10011bf8:	e0bffc17 	ldw	r2,-16(fp)
10011bfc:	18bff01e 	bne	r3,r2,10011bc0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
10011c00:	0005883a 	mov	r2,zero
}
10011c04:	e037883a 	mov	sp,fp
10011c08:	dfc00117 	ldw	ra,4(sp)
10011c0c:	df000017 	ldw	fp,0(sp)
10011c10:	dec00204 	addi	sp,sp,8
10011c14:	f800283a 	ret

10011c18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011c18:	defffb04 	addi	sp,sp,-20
10011c1c:	dfc00415 	stw	ra,16(sp)
10011c20:	df000315 	stw	fp,12(sp)
10011c24:	df000304 	addi	fp,sp,12
10011c28:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011c2c:	d0a00517 	ldw	r2,-32748(gp)
10011c30:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011c34:	00003106 	br	10011cfc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011c38:	e0bfff17 	ldw	r2,-4(fp)
10011c3c:	10800217 	ldw	r2,8(r2)
10011c40:	1009883a 	mov	r4,r2
10011c44:	00035a80 	call	100035a8 <strlen>
10011c48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011c4c:	e0bfff17 	ldw	r2,-4(fp)
10011c50:	10c00217 	ldw	r3,8(r2)
10011c54:	e0bffe17 	ldw	r2,-8(fp)
10011c58:	10bfffc4 	addi	r2,r2,-1
10011c5c:	1885883a 	add	r2,r3,r2
10011c60:	10800003 	ldbu	r2,0(r2)
10011c64:	10803fcc 	andi	r2,r2,255
10011c68:	1080201c 	xori	r2,r2,128
10011c6c:	10bfe004 	addi	r2,r2,-128
10011c70:	10800bd8 	cmpnei	r2,r2,47
10011c74:	1000031e 	bne	r2,zero,10011c84 <alt_find_file+0x6c>
    {
      len -= 1;
10011c78:	e0bffe17 	ldw	r2,-8(fp)
10011c7c:	10bfffc4 	addi	r2,r2,-1
10011c80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011c84:	e0bffe17 	ldw	r2,-8(fp)
10011c88:	e0fffd17 	ldw	r3,-12(fp)
10011c8c:	1885883a 	add	r2,r3,r2
10011c90:	10800003 	ldbu	r2,0(r2)
10011c94:	10803fcc 	andi	r2,r2,255
10011c98:	1080201c 	xori	r2,r2,128
10011c9c:	10bfe004 	addi	r2,r2,-128
10011ca0:	10800be0 	cmpeqi	r2,r2,47
10011ca4:	1000081e 	bne	r2,zero,10011cc8 <alt_find_file+0xb0>
10011ca8:	e0bffe17 	ldw	r2,-8(fp)
10011cac:	e0fffd17 	ldw	r3,-12(fp)
10011cb0:	1885883a 	add	r2,r3,r2
10011cb4:	10800003 	ldbu	r2,0(r2)
10011cb8:	10803fcc 	andi	r2,r2,255
10011cbc:	1080201c 	xori	r2,r2,128
10011cc0:	10bfe004 	addi	r2,r2,-128
10011cc4:	10000a1e 	bne	r2,zero,10011cf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011cc8:	e0bfff17 	ldw	r2,-4(fp)
10011ccc:	10800217 	ldw	r2,8(r2)
10011cd0:	e0fffe17 	ldw	r3,-8(fp)
10011cd4:	180d883a 	mov	r6,r3
10011cd8:	e17ffd17 	ldw	r5,-12(fp)
10011cdc:	1009883a 	mov	r4,r2
10011ce0:	0011f300 	call	10011f30 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
10011ce4:	1000021e 	bne	r2,zero,10011cf0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
10011ce8:	e0bfff17 	ldw	r2,-4(fp)
10011cec:	00000706 	br	10011d0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011cf0:	e0bfff17 	ldw	r2,-4(fp)
10011cf4:	10800017 	ldw	r2,0(r2)
10011cf8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
10011cfc:	e0ffff17 	ldw	r3,-4(fp)
10011d00:	d0a00504 	addi	r2,gp,-32748
10011d04:	18bfcc1e 	bne	r3,r2,10011c38 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
10011d08:	0005883a 	mov	r2,zero
}
10011d0c:	e037883a 	mov	sp,fp
10011d10:	dfc00117 	ldw	ra,4(sp)
10011d14:	df000017 	ldw	fp,0(sp)
10011d18:	dec00204 	addi	sp,sp,8
10011d1c:	f800283a 	ret

10011d20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011d20:	defffc04 	addi	sp,sp,-16
10011d24:	df000315 	stw	fp,12(sp)
10011d28:	df000304 	addi	fp,sp,12
10011d2c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
10011d30:	00bffa04 	movi	r2,-24
10011d34:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011d38:	e03fff15 	stw	zero,-4(fp)
10011d3c:	00001706 	br	10011d9c <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
10011d40:	e0bfff17 	ldw	r2,-4(fp)
10011d44:	10c00324 	muli	r3,r2,12
10011d48:	00840074 	movhi	r2,4097
10011d4c:	1885883a 	add	r2,r3,r2
10011d50:	10902e17 	ldw	r2,16568(r2)
10011d54:	10000e1e 	bne	r2,zero,10011d90 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
10011d58:	e0bfff17 	ldw	r2,-4(fp)
10011d5c:	11000324 	muli	r4,r2,12
10011d60:	e0fffd17 	ldw	r3,-12(fp)
10011d64:	00840074 	movhi	r2,4097
10011d68:	2085883a 	add	r2,r4,r2
10011d6c:	10d02e15 	stw	r3,16568(r2)
      if (i > alt_max_fd)
10011d70:	d0e00917 	ldw	r3,-32732(gp)
10011d74:	e0bfff17 	ldw	r2,-4(fp)
10011d78:	1880020e 	bge	r3,r2,10011d84 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
10011d7c:	e0bfff17 	ldw	r2,-4(fp)
10011d80:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
10011d84:	e0bfff17 	ldw	r2,-4(fp)
10011d88:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10011d8c:	00000706 	br	10011dac <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
10011d90:	e0bfff17 	ldw	r2,-4(fp)
10011d94:	10800044 	addi	r2,r2,1
10011d98:	e0bfff15 	stw	r2,-4(fp)
10011d9c:	e0bfff17 	ldw	r2,-4(fp)
10011da0:	10800810 	cmplti	r2,r2,32
10011da4:	103fe61e 	bne	r2,zero,10011d40 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
10011da8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011dac:	e0bffe17 	ldw	r2,-8(fp)
}
10011db0:	e037883a 	mov	sp,fp
10011db4:	df000017 	ldw	fp,0(sp)
10011db8:	dec00104 	addi	sp,sp,4
10011dbc:	f800283a 	ret

10011dc0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10011dc0:	defffb04 	addi	sp,sp,-20
10011dc4:	df000415 	stw	fp,16(sp)
10011dc8:	df000404 	addi	fp,sp,16
10011dcc:	e13ffd15 	stw	r4,-12(fp)
10011dd0:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10011dd4:	e0bffc17 	ldw	r2,-16(fp)
10011dd8:	10840070 	cmpltui	r2,r2,4097
10011ddc:	1000021e 	bne	r2,zero,10011de8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10011de0:	00840004 	movi	r2,4096
10011de4:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
10011de8:	e0fffd17 	ldw	r3,-12(fp)
10011dec:	e0bffc17 	ldw	r2,-16(fp)
10011df0:	1885883a 	add	r2,r3,r2
10011df4:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011df8:	e0bffd17 	ldw	r2,-12(fp)
10011dfc:	e0bfff15 	stw	r2,-4(fp)
10011e00:	00000506 	br	10011e18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10011e04:	e0bfff17 	ldw	r2,-4(fp)
10011e08:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10011e0c:	e0bfff17 	ldw	r2,-4(fp)
10011e10:	10800804 	addi	r2,r2,32
10011e14:	e0bfff15 	stw	r2,-4(fp)
10011e18:	e0ffff17 	ldw	r3,-4(fp)
10011e1c:	e0bffe17 	ldw	r2,-8(fp)
10011e20:	18bff836 	bltu	r3,r2,10011e04 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10011e24:	e0bffd17 	ldw	r2,-12(fp)
10011e28:	108007cc 	andi	r2,r2,31
10011e2c:	10000226 	beq	r2,zero,10011e38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10011e30:	e0bfff17 	ldw	r2,-4(fp)
10011e34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10011e38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10011e3c:	0001883a 	nop
10011e40:	e037883a 	mov	sp,fp
10011e44:	df000017 	ldw	fp,0(sp)
10011e48:	dec00104 	addi	sp,sp,4
10011e4c:	f800283a 	ret

10011e50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011e50:	defffe04 	addi	sp,sp,-8
10011e54:	df000115 	stw	fp,4(sp)
10011e58:	df000104 	addi	fp,sp,4
10011e5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011e60:	e0bfff17 	ldw	r2,-4(fp)
10011e64:	10bffe84 	addi	r2,r2,-6
10011e68:	10c00428 	cmpgeui	r3,r2,16
10011e6c:	1800191e 	bne	r3,zero,10011ed4 <alt_exception_cause_generated_bad_addr+0x84>
10011e70:	100690ba 	slli	r3,r2,2
10011e74:	00840074 	movhi	r2,4097
10011e78:	1885883a 	add	r2,r3,r2
10011e7c:	1087a117 	ldw	r2,7812(r2)
10011e80:	1000683a 	jmp	r2
10011e84:	10011ec4 	addi	zero,r2,1147
10011e88:	10011ec4 	addi	zero,r2,1147
10011e8c:	10011ed4 	ori	zero,r2,1147
10011e90:	10011ed4 	ori	zero,r2,1147
10011e94:	10011ed4 	ori	zero,r2,1147
10011e98:	10011ec4 	addi	zero,r2,1147
10011e9c:	10011ecc 	andi	zero,r2,1147
10011ea0:	10011ed4 	ori	zero,r2,1147
10011ea4:	10011ec4 	addi	zero,r2,1147
10011ea8:	10011ec4 	addi	zero,r2,1147
10011eac:	10011ed4 	ori	zero,r2,1147
10011eb0:	10011ec4 	addi	zero,r2,1147
10011eb4:	10011ecc 	andi	zero,r2,1147
10011eb8:	10011ed4 	ori	zero,r2,1147
10011ebc:	10011ed4 	ori	zero,r2,1147
10011ec0:	10011ec4 	addi	zero,r2,1147
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011ec4:	00800044 	movi	r2,1
10011ec8:	00000306 	br	10011ed8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011ecc:	0005883a 	mov	r2,zero
10011ed0:	00000106 	br	10011ed8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
10011ed4:	0005883a 	mov	r2,zero
  }
}
10011ed8:	e037883a 	mov	sp,fp
10011edc:	df000017 	ldw	fp,0(sp)
10011ee0:	dec00104 	addi	sp,sp,4
10011ee4:	f800283a 	ret

10011ee8 <atexit>:
10011ee8:	200b883a 	mov	r5,r4
10011eec:	000f883a 	mov	r7,zero
10011ef0:	000d883a 	mov	r6,zero
10011ef4:	0009883a 	mov	r4,zero
10011ef8:	0011fbc1 	jmpi	10011fbc <__register_exitproc>

10011efc <exit>:
10011efc:	defffe04 	addi	sp,sp,-8
10011f00:	000b883a 	mov	r5,zero
10011f04:	dc000015 	stw	r16,0(sp)
10011f08:	dfc00115 	stw	ra,4(sp)
10011f0c:	2021883a 	mov	r16,r4
10011f10:	001204c0 	call	1001204c <__call_exitprocs>
10011f14:	00840074 	movhi	r2,4097
10011f18:	1114a717 	ldw	r4,21148(r2)
10011f1c:	20800f17 	ldw	r2,60(r4)
10011f20:	10000126 	beq	r2,zero,10011f28 <exit+0x2c>
10011f24:	103ee83a 	callr	r2
10011f28:	8009883a 	mov	r4,r16
10011f2c:	00121640 	call	10012164 <_exit>

10011f30 <memcmp>:
10011f30:	30800130 	cmpltui	r2,r6,4
10011f34:	10000b1e 	bne	r2,zero,10011f64 <memcmp+0x34>
10011f38:	2144b03a 	or	r2,r4,r5
10011f3c:	108000cc 	andi	r2,r2,3
10011f40:	10001a1e 	bne	r2,zero,10011fac <memcmp+0x7c>
10011f44:	20c00017 	ldw	r3,0(r4)
10011f48:	28800017 	ldw	r2,0(r5)
10011f4c:	1880171e 	bne	r3,r2,10011fac <memcmp+0x7c>
10011f50:	31bfff04 	addi	r6,r6,-4
10011f54:	30800128 	cmpgeui	r2,r6,4
10011f58:	21000104 	addi	r4,r4,4
10011f5c:	29400104 	addi	r5,r5,4
10011f60:	103ff81e 	bne	r2,zero,10011f44 <memcmp+0x14>
10011f64:	30ffffc4 	addi	r3,r6,-1
10011f68:	30000e26 	beq	r6,zero,10011fa4 <memcmp+0x74>
10011f6c:	29800003 	ldbu	r6,0(r5)
10011f70:	20800003 	ldbu	r2,0(r4)
10011f74:	30800f1e 	bne	r6,r2,10011fb4 <memcmp+0x84>
10011f78:	18800044 	addi	r2,r3,1
10011f7c:	20c00044 	addi	r3,r4,1
10011f80:	2089883a 	add	r4,r4,r2
10011f84:	00000506 	br	10011f9c <memcmp+0x6c>
10011f88:	18800003 	ldbu	r2,0(r3)
10011f8c:	29800003 	ldbu	r6,0(r5)
10011f90:	18c00044 	addi	r3,r3,1
10011f94:	10803fcc 	andi	r2,r2,255
10011f98:	1180061e 	bne	r2,r6,10011fb4 <memcmp+0x84>
10011f9c:	29400044 	addi	r5,r5,1
10011fa0:	193ff91e 	bne	r3,r4,10011f88 <memcmp+0x58>
10011fa4:	0005883a 	mov	r2,zero
10011fa8:	f800283a 	ret
10011fac:	30ffffc4 	addi	r3,r6,-1
10011fb0:	003fee06 	br	10011f6c <memcmp+0x3c>
10011fb4:	1185c83a 	sub	r2,r2,r6
10011fb8:	f800283a 	ret

10011fbc <__register_exitproc>:
10011fbc:	00840074 	movhi	r2,4097
10011fc0:	10d4a717 	ldw	r3,21148(r2)
10011fc4:	18805217 	ldw	r2,328(r3)
10011fc8:	10001726 	beq	r2,zero,10012028 <__register_exitproc+0x6c>
10011fcc:	10c00117 	ldw	r3,4(r2)
10011fd0:	1a000808 	cmpgei	r8,r3,32
10011fd4:	40001b1e 	bne	r8,zero,10012044 <__register_exitproc+0x88>
10011fd8:	20000b26 	beq	r4,zero,10012008 <__register_exitproc+0x4c>
10011fdc:	181090ba 	slli	r8,r3,2
10011fe0:	02400044 	movi	r9,1
10011fe4:	48d2983a 	sll	r9,r9,r3
10011fe8:	1211883a 	add	r8,r2,r8
10011fec:	41802215 	stw	r6,136(r8)
10011ff0:	11806217 	ldw	r6,392(r2)
10011ff4:	21000098 	cmpnei	r4,r4,2
10011ff8:	324cb03a 	or	r6,r6,r9
10011ffc:	11806215 	stw	r6,392(r2)
10012000:	41c04215 	stw	r7,264(r8)
10012004:	20000b26 	beq	r4,zero,10012034 <__register_exitproc+0x78>
10012008:	19000084 	addi	r4,r3,2
1001200c:	200890ba 	slli	r4,r4,2
10012010:	18c00044 	addi	r3,r3,1
10012014:	10c00115 	stw	r3,4(r2)
10012018:	1105883a 	add	r2,r2,r4
1001201c:	11400015 	stw	r5,0(r2)
10012020:	0005883a 	mov	r2,zero
10012024:	f800283a 	ret
10012028:	18805304 	addi	r2,r3,332
1001202c:	18805215 	stw	r2,328(r3)
10012030:	003fe606 	br	10011fcc <__register_exitproc+0x10>
10012034:	11006317 	ldw	r4,396(r2)
10012038:	2252b03a 	or	r9,r4,r9
1001203c:	12406315 	stw	r9,396(r2)
10012040:	003ff106 	br	10012008 <__register_exitproc+0x4c>
10012044:	00bfffc4 	movi	r2,-1
10012048:	f800283a 	ret

1001204c <__call_exitprocs>:
1001204c:	defff704 	addi	sp,sp,-36
10012050:	00840074 	movhi	r2,4097
10012054:	ddc00715 	stw	r23,28(sp)
10012058:	15d4a717 	ldw	r23,21148(r2)
1001205c:	dd400515 	stw	r21,20(sp)
10012060:	dd000415 	stw	r20,16(sp)
10012064:	dcc00315 	stw	r19,12(sp)
10012068:	dfc00815 	stw	ra,32(sp)
1001206c:	dd800615 	stw	r22,24(sp)
10012070:	dc800215 	stw	r18,8(sp)
10012074:	dc400115 	stw	r17,4(sp)
10012078:	dc000015 	stw	r16,0(sp)
1001207c:	2029883a 	mov	r20,r4
10012080:	282b883a 	mov	r21,r5
10012084:	04c00044 	movi	r19,1
10012088:	bc805217 	ldw	r18,328(r23)
1001208c:	90000d26 	beq	r18,zero,100120c4 <__call_exitprocs+0x78>
10012090:	94000117 	ldw	r16,4(r18)
10012094:	847fffc4 	addi	r17,r16,-1
10012098:	88000a16 	blt	r17,zero,100120c4 <__call_exitprocs+0x78>
1001209c:	84000044 	addi	r16,r16,1
100120a0:	802090ba 	slli	r16,r16,2
100120a4:	9421883a 	add	r16,r18,r16
100120a8:	a8001126 	beq	r21,zero,100120f0 <__call_exitprocs+0xa4>
100120ac:	80804017 	ldw	r2,256(r16)
100120b0:	15400f26 	beq	r2,r21,100120f0 <__call_exitprocs+0xa4>
100120b4:	8c7fffc4 	addi	r17,r17,-1
100120b8:	88bfffd8 	cmpnei	r2,r17,-1
100120bc:	843fff04 	addi	r16,r16,-4
100120c0:	103ff91e 	bne	r2,zero,100120a8 <__call_exitprocs+0x5c>
100120c4:	dfc00817 	ldw	ra,32(sp)
100120c8:	ddc00717 	ldw	r23,28(sp)
100120cc:	dd800617 	ldw	r22,24(sp)
100120d0:	dd400517 	ldw	r21,20(sp)
100120d4:	dd000417 	ldw	r20,16(sp)
100120d8:	dcc00317 	ldw	r19,12(sp)
100120dc:	dc800217 	ldw	r18,8(sp)
100120e0:	dc400117 	ldw	r17,4(sp)
100120e4:	dc000017 	ldw	r16,0(sp)
100120e8:	dec00904 	addi	sp,sp,36
100120ec:	f800283a 	ret
100120f0:	90800117 	ldw	r2,4(r18)
100120f4:	81800017 	ldw	r6,0(r16)
100120f8:	10bfffc4 	addi	r2,r2,-1
100120fc:	14401526 	beq	r2,r17,10012154 <__call_exitprocs+0x108>
10012100:	80000015 	stw	zero,0(r16)
10012104:	303feb26 	beq	r6,zero,100120b4 <__call_exitprocs+0x68>
10012108:	9c46983a 	sll	r3,r19,r17
1001210c:	90806217 	ldw	r2,392(r18)
10012110:	95800117 	ldw	r22,4(r18)
10012114:	1884703a 	and	r2,r3,r2
10012118:	1000061e 	bne	r2,zero,10012134 <__call_exitprocs+0xe8>
1001211c:	303ee83a 	callr	r6
10012120:	90800117 	ldw	r2,4(r18)
10012124:	15bfd81e 	bne	r2,r22,10012088 <__call_exitprocs+0x3c>
10012128:	b8805217 	ldw	r2,328(r23)
1001212c:	14bfe126 	beq	r2,r18,100120b4 <__call_exitprocs+0x68>
10012130:	003fd506 	br	10012088 <__call_exitprocs+0x3c>
10012134:	90806317 	ldw	r2,396(r18)
10012138:	81002017 	ldw	r4,128(r16)
1001213c:	1886703a 	and	r3,r3,r2
10012140:	1800061e 	bne	r3,zero,1001215c <__call_exitprocs+0x110>
10012144:	200b883a 	mov	r5,r4
10012148:	a009883a 	mov	r4,r20
1001214c:	303ee83a 	callr	r6
10012150:	003ff306 	br	10012120 <__call_exitprocs+0xd4>
10012154:	94400115 	stw	r17,4(r18)
10012158:	003fea06 	br	10012104 <__call_exitprocs+0xb8>
1001215c:	303ee83a 	callr	r6
10012160:	003fef06 	br	10012120 <__call_exitprocs+0xd4>

10012164 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012164:	defffd04 	addi	sp,sp,-12
10012168:	df000215 	stw	fp,8(sp)
1001216c:	df000204 	addi	fp,sp,8
10012170:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012174:	0001883a 	nop
10012178:	e0bffe17 	ldw	r2,-8(fp)
1001217c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012180:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012184:	10000226 	beq	r2,zero,10012190 <_exit+0x2c>
    ALT_SIM_FAIL();
10012188:	002af070 	cmpltui	zero,zero,43969
1001218c:	00000106 	br	10012194 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012190:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012194:	003fff06 	br	10012194 <_exit+0x30>
